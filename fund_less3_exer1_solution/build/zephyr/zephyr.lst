
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200013e0 	.word	0x200013e0
}
   4:	000018e9 	.word	0x000018e9
   8:	000054bb 	.word	0x000054bb
   c:	000018a1 	.word	0x000018a1
  10:	000018a1 	.word	0x000018a1
  14:	000018a1 	.word	0x000018a1
  18:	000018a1 	.word	0x000018a1
	...
  2c:	0000152d 	.word	0x0000152d
  30:	000018a1 	.word	0x000018a1
  34:	00000000 	.word	0x00000000
  38:	000014d5 	.word	0x000014d5
  3c:	000018a1 	.word	0x000018a1

00000040 <_irq_vector_table>:
  40:	00001619 00001619 00001619 00001619     ................
  50:	00001619 00001619 00001619 00001619     ................
  60:	00001619 00001619 00001619 00001619     ................
  70:	00001619 00001619 00001619 00001619     ................
  80:	00001619 00001619 00001619 00001619     ................
  90:	00001619 00001619 00001619 00001619     ................
  a0:	00001619 00001619 00001619 00001619     ................
  b0:	00001619 00001619 00001619 00001619     ................
  c0:	00001619 00001619 00001619 00001619     ................
  d0:	00001619 00001619 00001619 00001619     ................
  e0:	00001619 00001619 00001619 00001619     ................
  f0:	00001619 00001619 00001619 00001619     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <main>:
#include <zephyr.h>
#include <sys/printk.h>


void main(void)
{
     3f4:	b508      	push	{r3, lr}
	while(1) {
		printk("Hello World!\n\r");
     3f6:	4804      	ldr	r0, [pc, #16]	; (408 <CONFIG_FLASH_SIZE+0x8>)
     3f8:	f004 fe35 	bl	5066 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     400:	2100      	movs	r1, #0
     402:	f004 fa1b 	bl	483c <z_impl_k_sleep>
     406:	e7f6      	b.n	3f6 <main+0x2>
     408:	000065e8 	.word	0x000065e8

0000040c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     40c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     40e:	680b      	ldr	r3, [r1, #0]
     410:	3301      	adds	r3, #1
     412:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     414:	4b01      	ldr	r3, [pc, #4]	; (41c <char_out+0x10>)
     416:	681b      	ldr	r3, [r3, #0]
     418:	4798      	blx	r3
}
     41a:	bd08      	pop	{r3, pc}
     41c:	20000000 	.word	0x20000000

00000420 <__printk_hook_install>:
	_char_out = fn;
     420:	4b01      	ldr	r3, [pc, #4]	; (428 <__printk_hook_install+0x8>)
     422:	6018      	str	r0, [r3, #0]
}
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	20000000 	.word	0x20000000

0000042c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     42c:	b500      	push	{lr}
     42e:	b083      	sub	sp, #12
     430:	4602      	mov	r2, r0
     432:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     434:	2100      	movs	r1, #0
     436:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     438:	a901      	add	r1, sp, #4
     43a:	4803      	ldr	r0, [pc, #12]	; (448 <vprintk+0x1c>)
     43c:	f000 f8c8 	bl	5d0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     440:	b003      	add	sp, #12
     442:	f85d fb04 	ldr.w	pc, [sp], #4
     446:	bf00      	nop
     448:	0000040d 	.word	0x0000040d

0000044c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     44c:	b510      	push	{r4, lr}
     44e:	b084      	sub	sp, #16
     450:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     452:	9001      	str	r0, [sp, #4]
     454:	9102      	str	r1, [sp, #8]
     456:	2100      	movs	r1, #0
     458:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     45a:	a901      	add	r1, sp, #4
     45c:	4805      	ldr	r0, [pc, #20]	; (474 <vsnprintk+0x28>)
     45e:	f000 f8b7 	bl	5d0 <cbvprintf>

	if (ctx.count < ctx.max) {
     462:	9b03      	ldr	r3, [sp, #12]
     464:	9a02      	ldr	r2, [sp, #8]
     466:	4293      	cmp	r3, r2
     468:	da01      	bge.n	46e <vsnprintk+0x22>
		str[ctx.count] = '\0';
     46a:	2200      	movs	r2, #0
     46c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     46e:	9803      	ldr	r0, [sp, #12]
     470:	b004      	add	sp, #16
     472:	bd10      	pop	{r4, pc}
     474:	00005037 	.word	0x00005037

00000478 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     47c:	b083      	sub	sp, #12
     47e:	4604      	mov	r4, r0
     480:	4608      	mov	r0, r1
     482:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     484:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     486:	f013 0f08 	tst.w	r3, #8
     48a:	d105      	bne.n	498 <process_event+0x20>
     48c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     490:	2300      	movs	r3, #0
     492:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     494:	9301      	str	r3, [sp, #4]
}
     496:	e069      	b.n	56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>
		if (evt == EVT_COMPLETE) {
     498:	2901      	cmp	r1, #1
     49a:	d009      	beq.n	4b0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     49c:	f043 0320 	orr.w	r3, r3, #32
     4a0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4a2:	f385 8811 	msr	BASEPRI, r5
     4a6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4aa:	b003      	add	sp, #12
     4ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4b0:	f043 0310 	orr.w	r3, r3, #16
     4b4:	8323      	strh	r3, [r4, #24]
     4b6:	e7f4      	b.n	4a2 <process_event+0x2a>
			evt = process_recheck(mgr);
     4b8:	4620      	mov	r0, r4
     4ba:	f004 fe17 	bl	50ec <process_recheck>
     4be:	e057      	b.n	570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
			res = mgr->last_res;
     4c0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     4c4:	464a      	mov	r2, r9
     4c6:	4669      	mov	r1, sp
     4c8:	4620      	mov	r0, r4
     4ca:	f004 fe28 	bl	511e <process_complete>
		onoff_transition_fn transit = NULL;
     4ce:	2700      	movs	r7, #0
     4d0:	e05a      	b.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
			transit = mgr->transitions->start;
     4d2:	6923      	ldr	r3, [r4, #16]
     4d4:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     4d6:	2106      	movs	r1, #6
     4d8:	4620      	mov	r0, r4
     4da:	f004 fde0 	bl	509e <set_state>
		res = 0;
     4de:	f04f 0900 	mov.w	r9, #0
     4e2:	e051      	b.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
			transit = mgr->transitions->stop;
     4e4:	6923      	ldr	r3, [r4, #16]
     4e6:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     4e8:	2104      	movs	r1, #4
     4ea:	4620      	mov	r0, r4
     4ec:	f004 fdd7 	bl	509e <set_state>
		res = 0;
     4f0:	f04f 0900 	mov.w	r9, #0
     4f4:	e048      	b.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
			transit = mgr->transitions->reset;
     4f6:	6923      	ldr	r3, [r4, #16]
     4f8:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     4fa:	2105      	movs	r1, #5
     4fc:	4620      	mov	r0, r4
     4fe:	f004 fdce 	bl	509e <set_state>
		res = 0;
     502:	f04f 0900 	mov.w	r9, #0
     506:	e03f      	b.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
				   && !sys_slist_is_empty(&mgr->monitors);
     508:	2200      	movs	r2, #0
     50a:	e046      	b.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     50c:	2200      	movs	r2, #0
     50e:	e044      	b.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     510:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     514:	8323      	strh	r3, [r4, #24]
     516:	f385 8811 	msr	BASEPRI, r5
     51a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     51e:	2900      	cmp	r1, #0
     520:	d144      	bne.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     522:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     524:	b12b      	cbz	r3, 532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
				notify_all(mgr, &clients, state, res);
     526:	464b      	mov	r3, r9
     528:	4642      	mov	r2, r8
     52a:	4669      	mov	r1, sp
     52c:	4620      	mov	r0, r4
     52e:	f004 fe6c 	bl	520a <notify_all>
			if (transit != NULL) {
     532:	b117      	cbz	r7, 53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
				transit(mgr, transition_complete);
     534:	4925      	ldr	r1, [pc, #148]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     536:	4620      	mov	r0, r4
     538:	47b8      	blx	r7
	__asm__ volatile(
     53a:	f04f 0320 	mov.w	r3, #32
     53e:	f3ef 8511 	mrs	r5, BASEPRI
     542:	f383 8812 	msr	BASEPRI_MAX, r3
     546:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     54a:	8b23      	ldrh	r3, [r4, #24]
     54c:	f023 0308 	bic.w	r3, r3, #8
     550:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     552:	8b23      	ldrh	r3, [r4, #24]
     554:	f013 0f10 	tst.w	r3, #16
     558:	d02e      	beq.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     55a:	f023 0310 	bic.w	r3, r3, #16
     55e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     560:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     562:	8b26      	ldrh	r6, [r4, #24]
     564:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     568:	2800      	cmp	r0, #0
     56a:	d09a      	beq.n	4a2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     56c:	2802      	cmp	r0, #2
     56e:	d0a3      	beq.n	4b8 <process_event+0x40>
		if (evt == EVT_NOP) {
     570:	2800      	cmp	r0, #0
     572:	d096      	beq.n	4a2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     574:	2801      	cmp	r0, #1
     576:	d0a3      	beq.n	4c0 <process_event+0x48>
		} else if (evt == EVT_START) {
     578:	2803      	cmp	r0, #3
     57a:	d0aa      	beq.n	4d2 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     57c:	2804      	cmp	r0, #4
     57e:	d0b1      	beq.n	4e4 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     580:	2805      	cmp	r0, #5
     582:	d0b8      	beq.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
		onoff_transition_fn transit = NULL;
     584:	2700      	movs	r7, #0
		res = 0;
     586:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     588:	8b23      	ldrh	r3, [r4, #24]
     58a:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     58e:	45b0      	cmp	r8, r6
     590:	d0ba      	beq.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     592:	68a2      	ldr	r2, [r4, #8]
     594:	2a00      	cmp	r2, #0
     596:	d0b9      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     598:	2201      	movs	r2, #1
		if (do_monitors
     59a:	4611      	mov	r1, r2
     59c:	2a00      	cmp	r2, #0
     59e:	d1b7      	bne.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     5a0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5a2:	2a00      	cmp	r2, #0
     5a4:	d1b4      	bne.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
		    || (transit != NULL)) {
     5a6:	2f00      	cmp	r7, #0
     5a8:	d1b2      	bne.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     5aa:	e7d2      	b.n	552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
				notify_monitors(mgr, state, res);
     5ac:	464a      	mov	r2, r9
     5ae:	4641      	mov	r1, r8
     5b0:	4620      	mov	r0, r4
     5b2:	f004 fd7c 	bl	50ae <notify_monitors>
     5b6:	e7b4      	b.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5b8:	f013 0f20 	tst.w	r3, #32
     5bc:	d004      	beq.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5be:	f023 0320 	bic.w	r3, r3, #32
     5c2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     5c4:	2002      	movs	r0, #2
     5c6:	e7cc      	b.n	562 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7a>
		evt = EVT_NOP;
     5c8:	2000      	movs	r0, #0
     5ca:	e7ca      	b.n	562 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7a>
     5cc:	00005239 	.word	0x00005239

000005d0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d4:	b093      	sub	sp, #76	; 0x4c
     5d6:	4606      	mov	r6, r0
     5d8:	460d      	mov	r5, r1
     5da:	4692      	mov	sl, r2
     5dc:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     5de:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     5e0:	f89a 0000 	ldrb.w	r0, [sl]
     5e4:	2800      	cmp	r0, #0
     5e6:	f000 84d6 	beq.w	f96 <CONFIG_ISR_STACK_SIZE+0x796>
		if (*fp != '%') {
     5ea:	2825      	cmp	r0, #37	; 0x25
     5ec:	d008      	beq.n	600 <cbvprintf+0x30>
			OUTC(*fp++);
     5ee:	f10a 0a01 	add.w	sl, sl, #1
     5f2:	4629      	mov	r1, r5
     5f4:	47b0      	blx	r6
     5f6:	2800      	cmp	r0, #0
     5f8:	f2c0 84ce 	blt.w	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     5fc:	3401      	adds	r4, #1
			continue;
     5fe:	e7ef      	b.n	5e0 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     600:	2300      	movs	r3, #0
     602:	9306      	str	r3, [sp, #24]
     604:	9307      	str	r3, [sp, #28]
     606:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     608:	9308      	str	r3, [sp, #32]
     60a:	9309      	str	r3, [sp, #36]	; 0x24
     60c:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     60e:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     612:	f89a 3001 	ldrb.w	r3, [sl, #1]
     616:	2b25      	cmp	r3, #37	; 0x25
     618:	d001      	beq.n	61e <cbvprintf+0x4e>
	bool loop = true;
     61a:	2701      	movs	r7, #1
     61c:	e02c      	b.n	678 <cbvprintf+0xa8>
		conv->specifier = *sp++;
     61e:	f10a 0802 	add.w	r8, sl, #2
     622:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     626:	e1a8      	b.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
			conv->flag_dash = true;
     628:	f89d 3020 	ldrb.w	r3, [sp, #32]
     62c:	f043 0304 	orr.w	r3, r3, #4
     630:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     634:	b1ff      	cbz	r7, 676 <cbvprintf+0xa6>
			++sp;
     636:	f108 0801 	add.w	r8, r8, #1
     63a:	e01c      	b.n	676 <cbvprintf+0xa6>
			conv->flag_plus = true;
     63c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     640:	f043 0308 	orr.w	r3, r3, #8
     644:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     648:	e7f4      	b.n	634 <cbvprintf+0x64>
			conv->flag_space = true;
     64a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     64e:	f043 0310 	orr.w	r3, r3, #16
     652:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     656:	e7ed      	b.n	634 <cbvprintf+0x64>
			conv->flag_hash = true;
     658:	f89d 3020 	ldrb.w	r3, [sp, #32]
     65c:	f043 0320 	orr.w	r3, r3, #32
     660:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     664:	e7e6      	b.n	634 <cbvprintf+0x64>
			conv->flag_zero = true;
     666:	f89d 3020 	ldrb.w	r3, [sp, #32]
     66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     66e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     672:	e7df      	b.n	634 <cbvprintf+0x64>
		switch (*sp) {
     674:	2700      	movs	r7, #0
	} while (loop);
     676:	b34f      	cbz	r7, 6cc <cbvprintf+0xfc>
		switch (*sp) {
     678:	f898 3000 	ldrb.w	r3, [r8]
     67c:	3b20      	subs	r3, #32
     67e:	2b10      	cmp	r3, #16
     680:	d8f8      	bhi.n	674 <cbvprintf+0xa4>
     682:	a201      	add	r2, pc, #4	; (adr r2, 688 <cbvprintf+0xb8>)
     684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     688:	0000064b 	.word	0x0000064b
     68c:	00000675 	.word	0x00000675
     690:	00000675 	.word	0x00000675
     694:	00000659 	.word	0x00000659
     698:	00000675 	.word	0x00000675
     69c:	00000675 	.word	0x00000675
     6a0:	00000675 	.word	0x00000675
     6a4:	00000675 	.word	0x00000675
     6a8:	00000675 	.word	0x00000675
     6ac:	00000675 	.word	0x00000675
     6b0:	00000675 	.word	0x00000675
     6b4:	0000063d 	.word	0x0000063d
     6b8:	00000675 	.word	0x00000675
     6bc:	00000629 	.word	0x00000629
     6c0:	00000675 	.word	0x00000675
     6c4:	00000675 	.word	0x00000675
     6c8:	00000667 	.word	0x00000667
	if (conv->flag_zero && conv->flag_dash) {
     6cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     6d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
     6d4:	2b44      	cmp	r3, #68	; 0x44
     6d6:	d06d      	beq.n	7b4 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     6d8:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     6dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     6e4:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     6e8:	f898 3000 	ldrb.w	r3, [r8]
     6ec:	2b2a      	cmp	r3, #42	; 0x2a
     6ee:	d068      	beq.n	7c2 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     6f0:	a805      	add	r0, sp, #20
     6f2:	f004 fe31 	bl	5358 <extract_decimal>
	if (sp != wp) {
     6f6:	9b05      	ldr	r3, [sp, #20]
     6f8:	4598      	cmp	r8, r3
     6fa:	d012      	beq.n	722 <cbvprintf+0x152>
		conv->width_present = true;
     6fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     704:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     708:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     70a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     70e:	2800      	cmp	r0, #0
     710:	db60      	blt.n	7d4 <cbvprintf+0x204>
     712:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     714:	4313      	orrs	r3, r2
     716:	f89d 2020 	ldrb.w	r2, [sp, #32]
     71a:	f363 0241 	bfi	r2, r3, #1, #1
     71e:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     722:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     724:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b2e      	cmp	r3, #46	; 0x2e
     72a:	bf14      	ite	ne
     72c:	2300      	movne	r3, #0
     72e:	2301      	moveq	r3, #1
     730:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     734:	f363 0241 	bfi	r2, r3, #1, #1
     738:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     73c:	2b00      	cmp	r3, #0
     73e:	d04b      	beq.n	7d8 <cbvprintf+0x208>
	++sp;
     740:	9b05      	ldr	r3, [sp, #20]
     742:	1c5a      	adds	r2, r3, #1
     744:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     746:	785b      	ldrb	r3, [r3, #1]
     748:	2b2a      	cmp	r3, #42	; 0x2a
     74a:	d048      	beq.n	7de <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
     74c:	a805      	add	r0, sp, #20
     74e:	f004 fe03 	bl	5358 <extract_decimal>
	conv->prec_value = prec;
     752:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     754:	f89d 3020 	ldrb.w	r3, [sp, #32]
     758:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     75c:	2800      	cmp	r0, #0
     75e:	db47      	blt.n	7f0 <cbvprintf+0x220>
     760:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     762:	4313      	orrs	r3, r2
     764:	f89d 2020 	ldrb.w	r2, [sp, #32]
     768:	f363 0241 	bfi	r2, r3, #1, #1
     76c:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     770:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     774:	f898 3000 	ldrb.w	r3, [r8]
     778:	3b4c      	subs	r3, #76	; 0x4c
     77a:	2b2e      	cmp	r3, #46	; 0x2e
     77c:	f200 80dc 	bhi.w	938 <CONFIG_ISR_STACK_SIZE+0x138>
     780:	e8df f003 	tbb	[pc, r3]
     784:	dadadaca 	.word	0xdadadaca
     788:	dadadada 	.word	0xdadadada
     78c:	dadadada 	.word	0xdadadada
     790:	dadadada 	.word	0xdadadada
     794:	dadadada 	.word	0xdadadada
     798:	dadadada 	.word	0xdadadada
     79c:	dadadada 	.word	0xdadadada
     7a0:	da6ada38 	.word	0xda6ada38
     7a4:	dadada51 	.word	0xdadada51
     7a8:	dadadada 	.word	0xdadadada
     7ac:	dadadac0 	.word	0xdadadac0
     7b0:	dada      	.short	0xdada
     7b2:	b6          	.byte	0xb6
     7b3:	00          	.byte	0x00
		conv->flag_zero = false;
     7b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7b8:	f36f 1386 	bfc	r3, #6, #1
     7bc:	f88d 3020 	strb.w	r3, [sp, #32]
     7c0:	e78a      	b.n	6d8 <cbvprintf+0x108>
		conv->width_star = true;
     7c2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     7c6:	f043 0301 	orr.w	r3, r3, #1
     7ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     7ce:	4643      	mov	r3, r8
     7d0:	3301      	adds	r3, #1
     7d2:	e7a7      	b.n	724 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     7d4:	2201      	movs	r2, #1
     7d6:	e79d      	b.n	714 <cbvprintf+0x144>
		return sp;
     7d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
     7dc:	e7ca      	b.n	774 <cbvprintf+0x1a4>
		conv->prec_star = true;
     7de:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     7e2:	f043 0304 	orr.w	r3, r3, #4
     7e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     7ea:	f102 0801 	add.w	r8, r2, #1
     7ee:	e7c1      	b.n	774 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     7f0:	2201      	movs	r2, #1
     7f2:	e7b6      	b.n	762 <cbvprintf+0x192>
		if (*++sp == 'h') {
     7f4:	f108 0201 	add.w	r2, r8, #1
     7f8:	f898 3001 	ldrb.w	r3, [r8, #1]
     7fc:	2b68      	cmp	r3, #104	; 0x68
     7fe:	d008      	beq.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
			conv->length_mod = LENGTH_H;
     800:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     804:	2102      	movs	r1, #2
     806:	f361 03c6 	bfi	r3, r1, #3, #4
     80a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     80e:	4690      	mov	r8, r2
     810:	e02b      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
			conv->length_mod = LENGTH_HH;
     812:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     816:	2201      	movs	r2, #1
     818:	f362 03c6 	bfi	r3, r2, #3, #4
     81c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     820:	f108 0802 	add.w	r8, r8, #2
     824:	e021      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		if (*++sp == 'l') {
     826:	f108 0201 	add.w	r2, r8, #1
     82a:	f898 3001 	ldrb.w	r3, [r8, #1]
     82e:	2b6c      	cmp	r3, #108	; 0x6c
     830:	d008      	beq.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
			conv->length_mod = LENGTH_L;
     832:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     836:	2103      	movs	r1, #3
     838:	f361 03c6 	bfi	r3, r1, #3, #4
     83c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     840:	4690      	mov	r8, r2
     842:	e012      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
			conv->length_mod = LENGTH_LL;
     844:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     848:	2204      	movs	r2, #4
     84a:	f362 03c6 	bfi	r3, r2, #3, #4
     84e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     852:	f108 0802 	add.w	r8, r8, #2
     856:	e008      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		conv->length_mod = LENGTH_J;
     858:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     85c:	2205      	movs	r2, #5
     85e:	f362 03c6 	bfi	r3, r2, #3, #4
     862:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     866:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     86a:	f818 3b01 	ldrb.w	r3, [r8], #1
     86e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     872:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     876:	2a37      	cmp	r2, #55	; 0x37
     878:	f200 8150 	bhi.w	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
     87c:	e8df f012 	tbh	[pc, r2, lsl #1]
     880:	014e0126 	.word	0x014e0126
     884:	014e014e 	.word	0x014e014e
     888:	01260126 	.word	0x01260126
     88c:	014e0126 	.word	0x014e0126
     890:	014e014e 	.word	0x014e014e
     894:	014e014e 	.word	0x014e014e
     898:	014e014e 	.word	0x014e014e
     89c:	014e014e 	.word	0x014e014e
     8a0:	014e014e 	.word	0x014e014e
     8a4:	014e014e 	.word	0x014e014e
     8a8:	014e014e 	.word	0x014e014e
     8ac:	0113014e 	.word	0x0113014e
     8b0:	014e014e 	.word	0x014e014e
     8b4:	014e014e 	.word	0x014e014e
     8b8:	014e014e 	.word	0x014e014e
     8bc:	014e014e 	.word	0x014e014e
     8c0:	014e0126 	.word	0x014e0126
     8c4:	00630113 	.word	0x00630113
     8c8:	01260126 	.word	0x01260126
     8cc:	014e0126 	.word	0x014e0126
     8d0:	014e0063 	.word	0x014e0063
     8d4:	014e014e 	.word	0x014e014e
     8d8:	012f014e 	.word	0x012f014e
     8dc:	013f0113 	.word	0x013f0113
     8e0:	014e014e 	.word	0x014e014e
     8e4:	014e013f 	.word	0x014e013f
     8e8:	014e0113 	.word	0x014e0113
     8ec:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     8f0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8f4:	2206      	movs	r2, #6
     8f6:	f362 03c6 	bfi	r3, r2, #3, #4
     8fa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     8fe:	f108 0801 	add.w	r8, r8, #1
		break;
     902:	e7b2      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		conv->length_mod = LENGTH_T;
     904:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     908:	2207      	movs	r2, #7
     90a:	f362 03c6 	bfi	r3, r2, #3, #4
     90e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     912:	f108 0801 	add.w	r8, r8, #1
		break;
     916:	e7a8      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		conv->length_mod = LENGTH_UPPER_L;
     918:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     91c:	2208      	movs	r2, #8
     91e:	f362 03c6 	bfi	r3, r2, #3, #4
     922:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     926:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     92a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     92e:	f043 0302 	orr.w	r3, r3, #2
     932:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     936:	e798      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		conv->length_mod = LENGTH_NONE;
     938:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     93c:	f36f 03c6 	bfc	r3, #3, #4
     940:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     944:	e791      	b.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		conv->specifier_cat = SPECIFIER_SINT;
     946:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     94a:	2101      	movs	r1, #1
     94c:	f361 0202 	bfi	r2, r1, #0, #3
     950:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     954:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     958:	f002 0278 	and.w	r2, r2, #120	; 0x78
     95c:	2a40      	cmp	r2, #64	; 0x40
     95e:	f000 80aa 	beq.w	ab6 <CONFIG_ISR_STACK_SIZE+0x2b6>
		if (conv->specifier == 'c') {
     962:	2b63      	cmp	r3, #99	; 0x63
     964:	f000 80ae 	beq.w	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
	conv->unsupported |= unsupported;
     968:	f89d 3020 	ldrb.w	r3, [sp, #32]
     96c:	f3c3 0240 	ubfx	r2, r3, #1, #1
     970:	4317      	orrs	r7, r2
     972:	f367 0341 	bfi	r3, r7, #1, #1
     976:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     97a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     97e:	f013 0f01 	tst.w	r3, #1
     982:	f000 80da 	beq.w	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
			width = va_arg(ap, int);
     986:	9b03      	ldr	r3, [sp, #12]
     988:	1d1a      	adds	r2, r3, #4
     98a:	9203      	str	r2, [sp, #12]
     98c:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     98e:	2f00      	cmp	r7, #0
     990:	f2c0 80cb 	blt.w	b2a <CONFIG_ISR_STACK_SIZE+0x32a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     994:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     998:	f013 0f04 	tst.w	r3, #4
     99c:	f000 80df 	beq.w	b5e <CONFIG_ISR_STACK_SIZE+0x35e>
			int arg = va_arg(ap, int);
     9a0:	9b03      	ldr	r3, [sp, #12]
     9a2:	1d1a      	adds	r2, r3, #4
     9a4:	9203      	str	r2, [sp, #12]
     9a6:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     9aa:	f1bb 0f00 	cmp.w	fp, #0
     9ae:	f2c0 80cd 	blt.w	b4c <CONFIG_ISR_STACK_SIZE+0x34c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     9b2:	2300      	movs	r3, #0
     9b4:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     9b6:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     9b8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     9bc:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     9c0:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     9c4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     9c8:	2b01      	cmp	r3, #1
     9ca:	f000 80d1 	beq.w	b70 <CONFIG_ISR_STACK_SIZE+0x370>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     9ce:	2b02      	cmp	r3, #2
     9d0:	f000 8116 	beq.w	c00 <CONFIG_ISR_STACK_SIZE+0x400>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     9d4:	2b04      	cmp	r3, #4
     9d6:	f000 8167 	beq.w	ca8 <CONFIG_ISR_STACK_SIZE+0x4a8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     9da:	2b03      	cmp	r3, #3
     9dc:	f000 817e 	beq.w	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     9e0:	f89d 9020 	ldrb.w	r9, [sp, #32]
     9e4:	f019 0303 	ands.w	r3, r9, #3
     9e8:	9302      	str	r3, [sp, #8]
     9ea:	f040 817d 	bne.w	ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     9ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     9f2:	3b25      	subs	r3, #37	; 0x25
     9f4:	2b53      	cmp	r3, #83	; 0x53
     9f6:	f200 8233 	bhi.w	e60 <CONFIG_ISR_STACK_SIZE+0x660>
     9fa:	e8df f013 	tbh	[pc, r3, lsl #1]
     9fe:	0181      	.short	0x0181
     a00:	02310231 	.word	0x02310231
     a04:	02310231 	.word	0x02310231
     a08:	02310231 	.word	0x02310231
     a0c:	02310231 	.word	0x02310231
     a10:	02310231 	.word	0x02310231
     a14:	02310231 	.word	0x02310231
     a18:	02310231 	.word	0x02310231
     a1c:	02310231 	.word	0x02310231
     a20:	02310231 	.word	0x02310231
     a24:	02310231 	.word	0x02310231
     a28:	02310231 	.word	0x02310231
     a2c:	02310231 	.word	0x02310231
     a30:	02310231 	.word	0x02310231
     a34:	02310231 	.word	0x02310231
     a38:	02310231 	.word	0x02310231
     a3c:	02310231 	.word	0x02310231
     a40:	02310231 	.word	0x02310231
     a44:	02310231 	.word	0x02310231
     a48:	02310231 	.word	0x02310231
     a4c:	02310231 	.word	0x02310231
     a50:	02310231 	.word	0x02310231
     a54:	02310231 	.word	0x02310231
     a58:	02310231 	.word	0x02310231
     a5c:	02310231 	.word	0x02310231
     a60:	02310231 	.word	0x02310231
     a64:	023101c7 	.word	0x023101c7
     a68:	02310231 	.word	0x02310231
     a6c:	02310231 	.word	0x02310231
     a70:	02310231 	.word	0x02310231
     a74:	02310231 	.word	0x02310231
     a78:	01a10231 	.word	0x01a10231
     a7c:	023101ab 	.word	0x023101ab
     a80:	02310231 	.word	0x02310231
     a84:	01ab0231 	.word	0x01ab0231
     a88:	02310231 	.word	0x02310231
     a8c:	02310231 	.word	0x02310231
     a90:	01c70208 	.word	0x01c70208
     a94:	023101ea 	.word	0x023101ea
     a98:	018f0231 	.word	0x018f0231
     a9c:	01c70231 	.word	0x01c70231
     aa0:	02310231 	.word	0x02310231
     aa4:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     aa6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     aaa:	2102      	movs	r1, #2
     aac:	f361 0202 	bfi	r2, r1, #0, #3
     ab0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     ab4:	e74e      	b.n	954 <CONFIG_ISR_STACK_SIZE+0x154>
			conv->invalid = true;
     ab6:	f89d 1020 	ldrb.w	r1, [sp, #32]
     aba:	f041 0101 	orr.w	r1, r1, #1
     abe:	f88d 1020 	strb.w	r1, [sp, #32]
     ac2:	e74e      	b.n	962 <CONFIG_ISR_STACK_SIZE+0x162>
			unsupported = (conv->length_mod != LENGTH_NONE);
     ac4:	1e17      	subs	r7, r2, #0
     ac6:	bf18      	it	ne
     ac8:	2701      	movne	r7, #1
     aca:	e74d      	b.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
		conv->specifier_cat = SPECIFIER_FP;
     acc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ad0:	2204      	movs	r2, #4
     ad2:	f362 0302 	bfi	r3, r2, #0, #3
     ad6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     ada:	2701      	movs	r7, #1
			break;
     adc:	e744      	b.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
		conv->specifier_cat = SPECIFIER_PTR;
     ade:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ae2:	2203      	movs	r2, #3
     ae4:	f362 0302 	bfi	r3, r2, #0, #3
     ae8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     aec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     af0:	f003 0378 	and.w	r3, r3, #120	; 0x78
     af4:	2b40      	cmp	r3, #64	; 0x40
     af6:	f47f af37 	bne.w	968 <CONFIG_ISR_STACK_SIZE+0x168>
			unsupported = true;
     afa:	2701      	movs	r7, #1
     afc:	e734      	b.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
		conv->specifier_cat = SPECIFIER_PTR;
     afe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b02:	2203      	movs	r2, #3
     b04:	f362 0302 	bfi	r3, r2, #0, #3
     b08:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     b0c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b10:	f013 0f78 	tst.w	r3, #120	; 0x78
     b14:	f43f af28 	beq.w	968 <CONFIG_ISR_STACK_SIZE+0x168>
			unsupported = true;
     b18:	2701      	movs	r7, #1
     b1a:	e725      	b.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
		conv->invalid = true;
     b1c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b20:	f043 0301 	orr.w	r3, r3, #1
     b24:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     b28:	e71e      	b.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
				conv->flag_dash = true;
     b2a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b2e:	f043 0304 	orr.w	r3, r3, #4
     b32:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     b36:	427f      	negs	r7, r7
     b38:	e72c      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		} else if (conv->width_present) {
     b3a:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     b3e:	2b00      	cmp	r3, #0
     b40:	db02      	blt.n	b48 <CONFIG_ISR_STACK_SIZE+0x348>
		int width = -1;
     b42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     b46:	e725      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
			width = conv->width_value;
     b48:	9f09      	ldr	r7, [sp, #36]	; 0x24
     b4a:	e723      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
				conv->prec_present = false;
     b4c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b50:	f36f 0341 	bfc	r3, #1, #1
     b54:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     b58:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     b5c:	e729      	b.n	9b2 <CONFIG_ISR_STACK_SIZE+0x1b2>
		} else if (conv->prec_present) {
     b5e:	f013 0f02 	tst.w	r3, #2
     b62:	d002      	beq.n	b6a <CONFIG_ISR_STACK_SIZE+0x36a>
			precision = conv->prec_value;
     b64:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     b68:	e723      	b.n	9b2 <CONFIG_ISR_STACK_SIZE+0x1b2>
		int precision = -1;
     b6a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     b6e:	e720      	b.n	9b2 <CONFIG_ISR_STACK_SIZE+0x1b2>
			switch (length_mod) {
     b70:	1ecb      	subs	r3, r1, #3
     b72:	2b04      	cmp	r3, #4
     b74:	d804      	bhi.n	b80 <CONFIG_ISR_STACK_SIZE+0x380>
     b76:	e8df f003 	tbb	[pc, r3]
     b7a:	1d0b      	.short	0x1d0b
     b7c:	3529      	.short	0x3529
     b7e:	35          	.byte	0x35
     b7f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     b80:	9b03      	ldr	r3, [sp, #12]
     b82:	1d1a      	adds	r2, r3, #4
     b84:	9203      	str	r2, [sp, #12]
     b86:	681a      	ldr	r2, [r3, #0]
     b88:	17d3      	asrs	r3, r2, #31
     b8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     b8e:	e006      	b.n	b9e <CONFIG_ISR_STACK_SIZE+0x39e>
					value->sint = va_arg(ap, long);
     b90:	9b03      	ldr	r3, [sp, #12]
     b92:	1d1a      	adds	r2, r3, #4
     b94:	9203      	str	r2, [sp, #12]
     b96:	681a      	ldr	r2, [r3, #0]
     b98:	17d3      	asrs	r3, r2, #31
     b9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     b9e:	2901      	cmp	r1, #1
     ba0:	d028      	beq.n	bf4 <CONFIG_ISR_STACK_SIZE+0x3f4>
			} else if (length_mod == LENGTH_H) {
     ba2:	2902      	cmp	r1, #2
     ba4:	f47f af1c 	bne.w	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
				value->sint = (short)value->sint;
     ba8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     bac:	17d3      	asrs	r3, r2, #31
     bae:	e9cd 2306 	strd	r2, r3, [sp, #24]
     bb2:	e715      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
					(sint_value_type)va_arg(ap, long long);
     bb4:	9b03      	ldr	r3, [sp, #12]
     bb6:	3307      	adds	r3, #7
     bb8:	f023 0307 	bic.w	r3, r3, #7
     bbc:	f103 0208 	add.w	r2, r3, #8
     bc0:	9203      	str	r2, [sp, #12]
     bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     bc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     bca:	e7e8      	b.n	b9e <CONFIG_ISR_STACK_SIZE+0x39e>
					(sint_value_type)va_arg(ap, intmax_t);
     bcc:	9b03      	ldr	r3, [sp, #12]
     bce:	3307      	adds	r3, #7
     bd0:	f023 0307 	bic.w	r3, r3, #7
     bd4:	f103 0208 	add.w	r2, r3, #8
     bd8:	9203      	str	r2, [sp, #12]
     bda:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     bde:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     be2:	e7dc      	b.n	b9e <CONFIG_ISR_STACK_SIZE+0x39e>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     be4:	9b03      	ldr	r3, [sp, #12]
     be6:	1d1a      	adds	r2, r3, #4
     be8:	9203      	str	r2, [sp, #12]
     bea:	681a      	ldr	r2, [r3, #0]
     bec:	17d3      	asrs	r3, r2, #31
				value->sint =
     bee:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     bf2:	e7d4      	b.n	b9e <CONFIG_ISR_STACK_SIZE+0x39e>
				value->sint = (char)value->sint;
     bf4:	f89d 3018 	ldrb.w	r3, [sp, #24]
     bf8:	9306      	str	r3, [sp, #24]
     bfa:	2300      	movs	r3, #0
     bfc:	9307      	str	r3, [sp, #28]
     bfe:	e6ef      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
			switch (length_mod) {
     c00:	1ecb      	subs	r3, r1, #3
     c02:	2b04      	cmp	r3, #4
     c04:	d804      	bhi.n	c10 <CONFIG_ISR_STACK_SIZE+0x410>
     c06:	e8df f003 	tbb	[pc, r3]
     c0a:	1f0b      	.short	0x1f0b
     c0c:	4135      	.short	0x4135
     c0e:	41          	.byte	0x41
     c0f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     c10:	9b03      	ldr	r3, [sp, #12]
     c12:	1d1a      	adds	r2, r3, #4
     c14:	9203      	str	r2, [sp, #12]
     c16:	681b      	ldr	r3, [r3, #0]
     c18:	9306      	str	r3, [sp, #24]
     c1a:	2300      	movs	r3, #0
     c1c:	9307      	str	r3, [sp, #28]
				break;
     c1e:	e01e      	b.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
				    && (conv->specifier == 'c')) {
     c20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     c24:	2b63      	cmp	r3, #99	; 0x63
     c26:	d007      	beq.n	c38 <CONFIG_ISR_STACK_SIZE+0x438>
					value->uint = va_arg(ap, unsigned long);
     c28:	9b03      	ldr	r3, [sp, #12]
     c2a:	1d1a      	adds	r2, r3, #4
     c2c:	9203      	str	r2, [sp, #12]
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	9306      	str	r3, [sp, #24]
     c32:	2300      	movs	r3, #0
     c34:	9307      	str	r3, [sp, #28]
     c36:	e012      	b.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
					value->uint = (wchar_t)va_arg(ap,
     c38:	9b03      	ldr	r3, [sp, #12]
     c3a:	1d1a      	adds	r2, r3, #4
     c3c:	9203      	str	r2, [sp, #12]
     c3e:	681b      	ldr	r3, [r3, #0]
     c40:	9306      	str	r3, [sp, #24]
     c42:	2300      	movs	r3, #0
     c44:	9307      	str	r3, [sp, #28]
     c46:	e00a      	b.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
					(uint_value_type)va_arg(ap,
     c48:	9b03      	ldr	r3, [sp, #12]
     c4a:	3307      	adds	r3, #7
     c4c:	f023 0307 	bic.w	r3, r3, #7
     c50:	f103 0208 	add.w	r2, r3, #8
     c54:	9203      	str	r2, [sp, #12]
     c56:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     c5e:	2901      	cmp	r1, #1
     c60:	d01c      	beq.n	c9c <CONFIG_ISR_STACK_SIZE+0x49c>
			} else if (length_mod == LENGTH_H) {
     c62:	2902      	cmp	r1, #2
     c64:	f47f aebc 	bne.w	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
				value->uint = (unsigned short)value->uint;
     c68:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     c6c:	9306      	str	r3, [sp, #24]
     c6e:	2300      	movs	r3, #0
     c70:	9307      	str	r3, [sp, #28]
     c72:	e6b5      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
					(uint_value_type)va_arg(ap,
     c74:	9b03      	ldr	r3, [sp, #12]
     c76:	3307      	adds	r3, #7
     c78:	f023 0307 	bic.w	r3, r3, #7
     c7c:	f103 0208 	add.w	r2, r3, #8
     c80:	9203      	str	r2, [sp, #12]
     c82:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     c86:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c8a:	e7e8      	b.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
					(uint_value_type)va_arg(ap, size_t);
     c8c:	9b03      	ldr	r3, [sp, #12]
     c8e:	1d1a      	adds	r2, r3, #4
     c90:	9203      	str	r2, [sp, #12]
     c92:	681b      	ldr	r3, [r3, #0]
				value->uint =
     c94:	9306      	str	r3, [sp, #24]
     c96:	2300      	movs	r3, #0
     c98:	9307      	str	r3, [sp, #28]
				break;
     c9a:	e7e0      	b.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
				value->uint = (unsigned char)value->uint;
     c9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
     ca0:	9306      	str	r3, [sp, #24]
     ca2:	2300      	movs	r3, #0
     ca4:	9307      	str	r3, [sp, #28]
     ca6:	e69b      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
			if (length_mod == LENGTH_UPPER_L) {
     ca8:	2908      	cmp	r1, #8
     caa:	d00b      	beq.n	cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>
				value->dbl = va_arg(ap, double);
     cac:	9b03      	ldr	r3, [sp, #12]
     cae:	3307      	adds	r3, #7
     cb0:	f023 0307 	bic.w	r3, r3, #7
     cb4:	f103 0208 	add.w	r2, r3, #8
     cb8:	9203      	str	r2, [sp, #12]
     cba:	e9d3 2300 	ldrd	r2, r3, [r3]
     cbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
     cc2:	e68d      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
				value->ldbl = va_arg(ap, long double);
     cc4:	9b03      	ldr	r3, [sp, #12]
     cc6:	3307      	adds	r3, #7
     cc8:	f023 0307 	bic.w	r3, r3, #7
     ccc:	f103 0208 	add.w	r2, r3, #8
     cd0:	9203      	str	r2, [sp, #12]
     cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
     cd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
     cda:	e681      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
			value->ptr = va_arg(ap, void *);
     cdc:	9b03      	ldr	r3, [sp, #12]
     cde:	1d1a      	adds	r2, r3, #4
     ce0:	9203      	str	r2, [sp, #12]
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	9306      	str	r3, [sp, #24]
     ce6:	e67b      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
			OUTS(sp, fp);
     ce8:	4643      	mov	r3, r8
     cea:	4652      	mov	r2, sl
     cec:	4629      	mov	r1, r5
     cee:	4630      	mov	r0, r6
     cf0:	f004 fbaf 	bl	5452 <outs>
     cf4:	2800      	cmp	r0, #0
     cf6:	f2c0 814f 	blt.w	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     cfa:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     cfc:	46c2      	mov	sl, r8
			continue;
     cfe:	e46f      	b.n	5e0 <cbvprintf+0x10>
		case '%':
			OUTC('%');
     d00:	4629      	mov	r1, r5
     d02:	2025      	movs	r0, #37	; 0x25
     d04:	47b0      	blx	r6
     d06:	2800      	cmp	r0, #0
     d08:	f2c0 8146 	blt.w	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     d0c:	3401      	adds	r4, #1
		char sign = 0;
     d0e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     d12:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     d16:	f04f 0a00 	mov.w	sl, #0
			break;
     d1a:	e0a7      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
		case 's': {
			bps = (const char *)value->ptr;
     d1c:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
     d20:	f1bb 0f00 	cmp.w	fp, #0
     d24:	db08      	blt.n	d38 <CONFIG_ISR_STACK_SIZE+0x538>
				len = strnlen(bps, precision);
     d26:	4659      	mov	r1, fp
     d28:	4650      	mov	r0, sl
     d2a:	f004 fc8a 	bl	5642 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     d2e:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
     d32:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
     d36:	e099      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
				len = strlen(bps);
     d38:	4650      	mov	r0, sl
     d3a:	f004 fc7a 	bl	5632 <strlen>
     d3e:	e7f6      	b.n	d2e <CONFIG_ISR_STACK_SIZE+0x52e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d40:	9b06      	ldr	r3, [sp, #24]
     d42:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
     d46:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
     d4a:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
     d4e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
     d52:	e08b      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     d54:	f019 0f08 	tst.w	r9, #8
     d58:	d105      	bne.n	d66 <CONFIG_ISR_STACK_SIZE+0x566>
				sign = '+';
			} else if (conv->flag_space) {
     d5a:	f019 0910 	ands.w	r9, r9, #16
     d5e:	d004      	beq.n	d6a <CONFIG_ISR_STACK_SIZE+0x56a>
				sign = ' ';
     d60:	f04f 0920 	mov.w	r9, #32
     d64:	e001      	b.n	d6a <CONFIG_ISR_STACK_SIZE+0x56a>
				sign = '+';
     d66:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
     d6e:	2a00      	cmp	r2, #0
     d70:	f173 0100 	sbcs.w	r1, r3, #0
     d74:	db02      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     d76:	e9cd 2306 	strd	r2, r3, [sp, #24]
     d7a:	e009      	b.n	d90 <CONFIG_ISR_STACK_SIZE+0x590>
				value->uint = (uint_value_type)-sint;
     d7c:	4252      	negs	r2, r2
     d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     d82:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
     d86:	f04f 092d 	mov.w	r9, #45	; 0x2d
     d8a:	e001      	b.n	d90 <CONFIG_ISR_STACK_SIZE+0x590>
		switch (conv->specifier) {
     d8c:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     d90:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     d94:	9300      	str	r3, [sp, #0]
     d96:	ab0c      	add	r3, sp, #48	; 0x30
     d98:	aa08      	add	r2, sp, #32
     d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     d9e:	f004 faee 	bl	537e <encode_uint>
     da2:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     da4:	f1bb 0f00 	cmp.w	fp, #0
     da8:	f2c0 8090 	blt.w	ecc <CONFIG_ISR_STACK_SIZE+0x6cc>
				size_t len = bpe - bps;
     dac:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     db0:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     db4:	f89d 2020 	ldrb.w	r2, [sp, #32]
     db8:	f36f 1286 	bfc	r2, #6, #1
     dbc:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     dc0:	459b      	cmp	fp, r3
     dc2:	f240 8086 	bls.w	ed2 <CONFIG_ISR_STACK_SIZE+0x6d2>
					conv->pad0_value = precision - (int)len;
     dc6:	ebab 0303 	sub.w	r3, fp, r3
     dca:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
     dcc:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     dd0:	e04c      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     dd2:	9806      	ldr	r0, [sp, #24]
     dd4:	b930      	cbnz	r0, de4 <CONFIG_ISR_STACK_SIZE+0x5e4>
		char sign = 0;
     dd6:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     dda:	f8df b1c4 	ldr.w	fp, [pc, #452]	; fa0 <CONFIG_ISR_STACK_SIZE+0x7a0>
			bps = "(nil)";
     dde:	f1ab 0a05 	sub.w	sl, fp, #5
     de2:	e043      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     de4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     de8:	9300      	str	r3, [sp, #0]
     dea:	ab0c      	add	r3, sp, #48	; 0x30
     dec:	aa08      	add	r2, sp, #32
     dee:	2100      	movs	r1, #0
     df0:	f004 fac5 	bl	537e <encode_uint>
     df4:	4682      	mov	sl, r0
				conv->altform_0c = true;
     df6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     dfa:	f043 0310 	orr.w	r3, r3, #16
     dfe:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
     e02:	2378      	movs	r3, #120	; 0x78
     e04:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
     e08:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
     e0c:	e7ca      	b.n	da4 <CONFIG_ISR_STACK_SIZE+0x5a4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     e0e:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
     e10:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e14:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     e18:	2b07      	cmp	r3, #7
     e1a:	d806      	bhi.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     e1c:	e8df f003 	tbb	[pc, r3]
     e20:	100e0c04 	.word	0x100e0c04
     e24:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
     e28:	6014      	str	r4, [r2, #0]
		char sign = 0;
     e2a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     e2e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     e32:	f04f 0a00 	mov.w	sl, #0
}
     e36:	e019      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
		*(signed char *)dp = (signed char)count;
     e38:	7014      	strb	r4, [r2, #0]
		break;
     e3a:	e7f6      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		*(short *)dp = (short)count;
     e3c:	8014      	strh	r4, [r2, #0]
		break;
     e3e:	e7f4      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		*(long *)dp = (long)count;
     e40:	6014      	str	r4, [r2, #0]
		break;
     e42:	e7f2      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		*(long long *)dp = (long long)count;
     e44:	4620      	mov	r0, r4
     e46:	17e1      	asrs	r1, r4, #31
     e48:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     e4c:	e7ed      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		*(intmax_t *)dp = (intmax_t)count;
     e4e:	4620      	mov	r0, r4
     e50:	17e1      	asrs	r1, r4, #31
     e52:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     e56:	e7e8      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		*(size_t *)dp = (size_t)count;
     e58:	6014      	str	r4, [r2, #0]
		break;
     e5a:	e7e6      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e5c:	6014      	str	r4, [r2, #0]
		break;
     e5e:	e7e4      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		switch (conv->specifier) {
     e60:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e64:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     e68:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     e6c:	f1ba 0f00 	cmp.w	sl, #0
     e70:	f000 808e 	beq.w	f90 <CONFIG_ISR_STACK_SIZE+0x790>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     e74:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
     e78:	f1b9 0f00 	cmp.w	r9, #0
     e7c:	d000      	beq.n	e80 <CONFIG_ISR_STACK_SIZE+0x680>
			nj_len += 1U;
     e7e:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
     e80:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
     e84:	f011 0f10 	tst.w	r1, #16
     e88:	d026      	beq.n	ed8 <CONFIG_ISR_STACK_SIZE+0x6d8>
			nj_len += 2U;
     e8a:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e8e:	4413      	add	r3, r2
		if (conv->pad_fp) {
     e90:	f011 0f40 	tst.w	r1, #64	; 0x40
     e94:	d001      	beq.n	e9a <CONFIG_ISR_STACK_SIZE+0x69a>
			nj_len += conv->pad0_pre_exp;
     e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     e98:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     e9a:	2f00      	cmp	r7, #0
     e9c:	dd32      	ble.n	f04 <CONFIG_ISR_STACK_SIZE+0x704>
			width -= (int)nj_len;
     e9e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     ea0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ea4:	f013 0f04 	tst.w	r3, #4
     ea8:	d12c      	bne.n	f04 <CONFIG_ISR_STACK_SIZE+0x704>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     eaa:	f013 0f40 	tst.w	r3, #64	; 0x40
     eae:	d018      	beq.n	ee2 <CONFIG_ISR_STACK_SIZE+0x6e2>
					if (sign != 0) {
     eb0:	f1b9 0f00 	cmp.w	r9, #0
     eb4:	d018      	beq.n	ee8 <CONFIG_ISR_STACK_SIZE+0x6e8>
						OUTC(sign);
     eb6:	4629      	mov	r1, r5
     eb8:	4648      	mov	r0, r9
     eba:	47b0      	blx	r6
     ebc:	2800      	cmp	r0, #0
     ebe:	db6b      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     ec0:	3401      	adds	r4, #1
						sign = 0;
     ec2:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
     ec6:	2330      	movs	r3, #48	; 0x30
     ec8:	9302      	str	r3, [sp, #8]
     eca:	e00f      	b.n	eec <CONFIG_ISR_STACK_SIZE+0x6ec>
		const char *bpe = buf + sizeof(buf);
     ecc:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     ed0:	e7cc      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
     ed2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     ed6:	e7c9      	b.n	e6c <CONFIG_ISR_STACK_SIZE+0x66c>
		} else if (conv->altform_0) {
     ed8:	f011 0f08 	tst.w	r1, #8
     edc:	d0d6      	beq.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
			nj_len += 1U;
     ede:	3201      	adds	r2, #1
     ee0:	e7d4      	b.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
				char pad = ' ';
     ee2:	2320      	movs	r3, #32
     ee4:	9302      	str	r3, [sp, #8]
     ee6:	e001      	b.n	eec <CONFIG_ISR_STACK_SIZE+0x6ec>
					pad = '0';
     ee8:	2330      	movs	r3, #48	; 0x30
     eea:	9302      	str	r3, [sp, #8]
     eec:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     eee:	1e5f      	subs	r7, r3, #1
     ef0:	2b00      	cmp	r3, #0
     ef2:	dd07      	ble.n	f04 <CONFIG_ISR_STACK_SIZE+0x704>
					OUTC(pad);
     ef4:	4629      	mov	r1, r5
     ef6:	9802      	ldr	r0, [sp, #8]
     ef8:	47b0      	blx	r6
     efa:	2800      	cmp	r0, #0
     efc:	db4c      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     efe:	3401      	adds	r4, #1
				while (width-- > 0) {
     f00:	463b      	mov	r3, r7
     f02:	e7f4      	b.n	eee <CONFIG_ISR_STACK_SIZE+0x6ee>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     f04:	f1b9 0f00 	cmp.w	r9, #0
     f08:	d005      	beq.n	f16 <CONFIG_ISR_STACK_SIZE+0x716>
			OUTC(sign);
     f0a:	4629      	mov	r1, r5
     f0c:	4648      	mov	r0, r9
     f0e:	47b0      	blx	r6
     f10:	2800      	cmp	r0, #0
     f12:	db41      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     f14:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     f16:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f1a:	f3c3 1200 	ubfx	r2, r3, #4, #1
     f1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     f22:	4313      	orrs	r3, r2
     f24:	d005      	beq.n	f32 <CONFIG_ISR_STACK_SIZE+0x732>
				OUTC('0');
     f26:	4629      	mov	r1, r5
     f28:	2030      	movs	r0, #48	; 0x30
     f2a:	47b0      	blx	r6
     f2c:	2800      	cmp	r0, #0
     f2e:	db33      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     f30:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     f32:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f36:	f013 0f10 	tst.w	r3, #16
     f3a:	d006      	beq.n	f4a <CONFIG_ISR_STACK_SIZE+0x74a>
				OUTC(conv->specifier);
     f3c:	4629      	mov	r1, r5
     f3e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
     f42:	47b0      	blx	r6
     f44:	2800      	cmp	r0, #0
     f46:	db27      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     f48:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
     f4c:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
     f50:	2b00      	cmp	r3, #0
     f52:	dd07      	ble.n	f64 <CONFIG_ISR_STACK_SIZE+0x764>
				OUTC('0');
     f54:	4629      	mov	r1, r5
     f56:	2030      	movs	r0, #48	; 0x30
     f58:	47b0      	blx	r6
     f5a:	2800      	cmp	r0, #0
     f5c:	db1c      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     f5e:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     f60:	464b      	mov	r3, r9
     f62:	e7f3      	b.n	f4c <CONFIG_ISR_STACK_SIZE+0x74c>
			}

			OUTS(bps, bpe);
     f64:	465b      	mov	r3, fp
     f66:	4652      	mov	r2, sl
     f68:	4629      	mov	r1, r5
     f6a:	4630      	mov	r0, r6
     f6c:	f004 fa71 	bl	5452 <outs>
     f70:	2800      	cmp	r0, #0
     f72:	db11      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     f74:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     f76:	2f00      	cmp	r7, #0
     f78:	dd07      	ble.n	f8a <CONFIG_ISR_STACK_SIZE+0x78a>
			OUTC(' ');
     f7a:	4629      	mov	r1, r5
     f7c:	2020      	movs	r0, #32
     f7e:	47b0      	blx	r6
     f80:	2800      	cmp	r0, #0
     f82:	db09      	blt.n	f98 <CONFIG_ISR_STACK_SIZE+0x798>
     f84:	3401      	adds	r4, #1
			--width;
     f86:	3f01      	subs	r7, #1
     f88:	e7f5      	b.n	f76 <CONFIG_ISR_STACK_SIZE+0x776>
		fp = extract_conversion(conv, sp);
     f8a:	46c2      	mov	sl, r8
     f8c:	f7ff bb28 	b.w	5e0 <cbvprintf+0x10>
     f90:	46c2      	mov	sl, r8
     f92:	f7ff bb25 	b.w	5e0 <cbvprintf+0x10>
		}
	}

	return count;
     f96:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     f98:	b013      	add	sp, #76	; 0x4c
     f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f9e:	bf00      	nop
     fa0:	000065fd 	.word	0x000065fd

00000fa4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     fa4:	b508      	push	{r3, lr}
     fa6:	f04f 0220 	mov.w	r2, #32
     faa:	f3ef 8311 	mrs	r3, BASEPRI
     fae:	f382 8812 	msr	BASEPRI_MAX, r2
     fb2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     fb6:	f000 fdd5 	bl	1b64 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     fba:	4803      	ldr	r0, [pc, #12]	; (fc8 <sys_reboot+0x24>)
     fbc:	f004 f853 	bl	5066 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     fc0:	f000 fa00 	bl	13c4 <arch_cpu_idle>
     fc4:	e7fc      	b.n	fc0 <sys_reboot+0x1c>
     fc6:	bf00      	nop
     fc8:	00006600 	.word	0x00006600

00000fcc <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
     fcc:	b570      	push	{r4, r5, r6, lr}
     fce:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
     fd0:	4b2c      	ldr	r3, [pc, #176]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
     fd2:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fd4:	f004 031f 	and.w	r3, r4, #31
     fd8:	2201      	movs	r2, #1
     fda:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fdc:	0961      	lsrs	r1, r4, #5
     fde:	4b2a      	ldr	r3, [pc, #168]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
     fe0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     fe4:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fe6:	f3bf 8f5b 	dmb	ish
     fea:	e853 1f00 	ldrex	r1, [r3]
     fee:	ea01 0500 	and.w	r5, r1, r0
     ff2:	e843 5600 	strex	r6, r5, [r3]
     ff6:	2e00      	cmp	r6, #0
     ff8:	d1f7      	bne.n	fea <pm_system_resume+0x1e>
     ffa:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     ffe:	420a      	tst	r2, r1
    1000:	d03d      	beq.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
		exit_pos_ops(z_power_states[id]);
    1002:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1006:	009a      	lsls	r2, r3, #2
    1008:	4b20      	ldr	r3, [pc, #128]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    100a:	4413      	add	r3, r2
    100c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1010:	ab04      	add	r3, sp, #16
    1012:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1016:	4b1e      	ldr	r3, [pc, #120]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1018:	b163      	cbz	r3, 1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		pm_power_state_exit_post_ops(info);
    101a:	f004 fb73 	bl	5704 <pm_power_state_exit_post_ops>
    101e:	f04f 0320 	mov.w	r3, #32
    1022:	f3ef 8611 	mrs	r6, BASEPRI
    1026:	f383 8812 	msr	BASEPRI_MAX, r3
    102a:	f3bf 8f6f 	isb	sy
    102e:	4b19      	ldr	r3, [pc, #100]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    1030:	681d      	ldr	r5, [r3, #0]
    1032:	e00a      	b.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
	__asm__ volatile(
    1034:	2300      	movs	r3, #0
    1036:	f383 8811 	msr	BASEPRI, r3
    103a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    103e:	e7ee      	b.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1040:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1042:	b10d      	cbz	r5, 1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
	return node->next;
    1044:	682b      	ldr	r3, [r5, #0]
    1046:	b16b      	cbz	r3, 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
{
    1048:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    104a:	b15d      	cbz	r5, 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
			callback = notifier->state_exit;
    104c:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    104e:	2a00      	cmp	r2, #0
    1050:	d0f6      	beq.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
			callback(z_power_states[_current_cpu->id].state);
    1052:	4b0c      	ldr	r3, [pc, #48]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
    1054:	7d1b      	ldrb	r3, [r3, #20]
    1056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    105a:	0099      	lsls	r1, r3, #2
    105c:	4b0b      	ldr	r3, [pc, #44]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    105e:	5c58      	ldrb	r0, [r3, r1]
    1060:	4790      	blx	r2
    1062:	e7ed      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
	__asm__ volatile(
    1064:	f386 8811 	msr	BASEPRI, r6
    1068:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    106c:	4807      	ldr	r0, [pc, #28]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    106e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1072:	00a2      	lsls	r2, r4, #2
    1074:	1881      	adds	r1, r0, r2
    1076:	2300      	movs	r3, #0
    1078:	5083      	str	r3, [r0, r2]
    107a:	604b      	str	r3, [r1, #4]
    107c:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    107e:	b004      	add	sp, #16
    1080:	bd70      	pop	{r4, r5, r6, pc}
    1082:	bf00      	nop
    1084:	20000dbc 	.word	0x20000dbc
    1088:	20000330 	.word	0x20000330
    108c:	20000334 	.word	0x20000334
    1090:	00005705 	.word	0x00005705
    1094:	20000328 	.word	0x20000328

00001098 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1098:	b5f0      	push	{r4, r5, r6, r7, lr}
    109a:	b089      	sub	sp, #36	; 0x24
    109c:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    109e:	4b55      	ldr	r3, [pc, #340]	; (11f4 <pm_system_suspend+0x15c>)
    10a0:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    10a2:	f004 031f 	and.w	r3, r4, #31
    10a6:	2201      	movs	r2, #1
    10a8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    10aa:	0961      	lsrs	r1, r4, #5
    10ac:	4b52      	ldr	r3, [pc, #328]	; (11f8 <pm_system_suspend+0x160>)
    10ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    10b2:	f3bf 8f5b 	dmb	ish
    10b6:	e853 1f00 	ldrex	r1, [r3]
    10ba:	ea41 0002 	orr.w	r0, r1, r2
    10be:	e843 0600 	strex	r6, r0, [r3]
    10c2:	2e00      	cmp	r6, #0
    10c4:	d1f7      	bne.n	10b6 <pm_system_suspend+0x1e>
    10c6:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    10ca:	420a      	tst	r2, r1
    10cc:	d017      	beq.n	10fe <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    10ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    10d2:	4a4a      	ldr	r2, [pc, #296]	; (11fc <pm_system_suspend+0x164>)
    10d4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    10d8:	2b00      	cmp	r3, #0
    10da:	f000 8088 	beq.w	11ee <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    10de:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    10e2:	d11c      	bne.n	111e <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    10e4:	f003 f898 	bl	4218 <k_sched_lock>
	__asm__ volatile(
    10e8:	f04f 0320 	mov.w	r3, #32
    10ec:	f3ef 8611 	mrs	r6, BASEPRI
    10f0:	f383 8812 	msr	BASEPRI_MAX, r3
    10f4:	f3bf 8f6f 	isb	sy
	return list->head;
    10f8:	4b41      	ldr	r3, [pc, #260]	; (1200 <pm_system_suspend+0x168>)
    10fa:	681d      	ldr	r5, [r3, #0]
    10fc:	e02a      	b.n	1154 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    10fe:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1102:	4b3e      	ldr	r3, [pc, #248]	; (11fc <pm_system_suspend+0x164>)
    1104:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1108:	466f      	mov	r7, sp
    110a:	462a      	mov	r2, r5
    110c:	4621      	mov	r1, r4
    110e:	4638      	mov	r0, r7
    1110:	f004 f9ba 	bl	5488 <pm_policy_next_state>
    1114:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    1118:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    111c:	e7d7      	b.n	10ce <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    111e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1122:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1126:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1128:	0c59      	lsrs	r1, r3, #17
    112a:	03d8      	lsls	r0, r3, #15
    112c:	4e35      	ldr	r6, [pc, #212]	; (1204 <pm_system_suspend+0x16c>)
    112e:	4a36      	ldr	r2, [pc, #216]	; (1208 <pm_system_suspend+0x170>)
    1130:	2300      	movs	r3, #0
    1132:	1980      	adds	r0, r0, r6
    1134:	f04f 0600 	mov.w	r6, #0
    1138:	eb46 0101 	adc.w	r1, r6, r1
    113c:	f7fe ffe0 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1140:	2101      	movs	r1, #1
    1142:	1a28      	subs	r0, r5, r0
    1144:	f005 f8a9 	bl	629a <z_set_timeout_expiry>
    1148:	e7cc      	b.n	10e4 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    114a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    114c:	b10d      	cbz	r5, 1152 <pm_system_suspend+0xba>
	return node->next;
    114e:	682b      	ldr	r3, [r5, #0]
    1150:	b16b      	cbz	r3, 116e <pm_system_suspend+0xd6>
{
    1152:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1154:	b15d      	cbz	r5, 116e <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    1156:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    1158:	2a00      	cmp	r2, #0
    115a:	d0f6      	beq.n	114a <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    115c:	4b25      	ldr	r3, [pc, #148]	; (11f4 <pm_system_suspend+0x15c>)
    115e:	7d1b      	ldrb	r3, [r3, #20]
    1160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1164:	4925      	ldr	r1, [pc, #148]	; (11fc <pm_system_suspend+0x164>)
    1166:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    116a:	4790      	blx	r2
    116c:	e7ed      	b.n	114a <pm_system_suspend+0xb2>
	__asm__ volatile(
    116e:	f386 8811 	msr	BASEPRI, r6
    1172:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1176:	f004 031f 	and.w	r3, r4, #31
    117a:	2101      	movs	r1, #1
    117c:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    117e:	0963      	lsrs	r3, r4, #5
    1180:	4a22      	ldr	r2, [pc, #136]	; (120c <pm_system_suspend+0x174>)
    1182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1186:	f3bf 8f5b 	dmb	ish
    118a:	e853 2f00 	ldrex	r2, [r3]
    118e:	430a      	orrs	r2, r1
    1190:	e843 2000 	strex	r0, r2, [r3]
    1194:	2800      	cmp	r0, #0
    1196:	d1f8      	bne.n	118a <pm_system_suspend+0xf2>
    1198:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    119c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    11a0:	4a16      	ldr	r2, [pc, #88]	; (11fc <pm_system_suspend+0x164>)
    11a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    11a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    11aa:	ab08      	add	r3, sp, #32
    11ac:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    11b0:	4b17      	ldr	r3, [pc, #92]	; (1210 <pm_system_suspend+0x178>)
    11b2:	b10b      	cbz	r3, 11b8 <pm_system_suspend+0x120>
		pm_power_state_set(info);
    11b4:	f004 fa93 	bl	56de <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    11b8:	f7ff ff08 	bl	fcc <pm_system_resume>
	k_sched_unlock();
    11bc:	f003 fa2a 	bl	4614 <k_sched_unlock>
	bool ret = true;
    11c0:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    11c2:	f004 021f 	and.w	r2, r4, #31
    11c6:	2301      	movs	r3, #1
    11c8:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    11ca:	0964      	lsrs	r4, r4, #5
    11cc:	4a0a      	ldr	r2, [pc, #40]	; (11f8 <pm_system_suspend+0x160>)
    11ce:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    11d2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    11d4:	f3bf 8f5b 	dmb	ish
    11d8:	e854 2f00 	ldrex	r2, [r4]
    11dc:	401a      	ands	r2, r3
    11de:	e844 2100 	strex	r1, r2, [r4]
    11e2:	2900      	cmp	r1, #0
    11e4:	d1f8      	bne.n	11d8 <pm_system_suspend+0x140>
    11e6:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    11ea:	b009      	add	sp, #36	; 0x24
    11ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    11ee:	2000      	movs	r0, #0
    11f0:	e7e7      	b.n	11c2 <pm_system_suspend+0x12a>
    11f2:	bf00      	nop
    11f4:	20000dbc 	.word	0x20000dbc
    11f8:	20000340 	.word	0x20000340
    11fc:	20000334 	.word	0x20000334
    1200:	20000328 	.word	0x20000328
    1204:	000f423f 	.word	0x000f423f
    1208:	000f4240 	.word	0x000f4240
    120c:	20000330 	.word	0x20000330
    1210:	000056df 	.word	0x000056df

00001214 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1214:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    1216:	4802      	ldr	r0, [pc, #8]	; (1220 <nrf_cc3xx_platform_abort_init+0xc>)
    1218:	f003 fd54 	bl	4cc4 <nrf_cc3xx_platform_set_abort>
}
    121c:	bd08      	pop	{r3, pc}
    121e:	bf00      	nop
    1220:	0000662c 	.word	0x0000662c

00001224 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1224:	b1d0      	cbz	r0, 125c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1226:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1228:	6842      	ldr	r2, [r0, #4]
    122a:	2a04      	cmp	r2, #4
    122c:	d005      	beq.n	123a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    122e:	b1d2      	cbz	r2, 1266 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1230:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1232:	f002 fee1 	bl	3ff8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1236:	2000      	movs	r0, #0
    }
}
    1238:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    123a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    123c:	2200      	movs	r2, #0
    123e:	f3bf 8f5b 	dmb	ish
    1242:	e853 1f00 	ldrex	r1, [r3]
    1246:	2901      	cmp	r1, #1
    1248:	d103      	bne.n	1252 <mutex_unlock_platform+0x2e>
    124a:	e843 2000 	strex	r0, r2, [r3]
    124e:	2800      	cmp	r0, #0
    1250:	d1f7      	bne.n	1242 <mutex_unlock_platform+0x1e>
    1252:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1256:	d104      	bne.n	1262 <mutex_unlock_platform+0x3e>
    1258:	4610      	mov	r0, r2
    125a:	e7ed      	b.n	1238 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    125c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1260:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1262:	4802      	ldr	r0, [pc, #8]	; (126c <mutex_unlock_platform+0x48>)
    1264:	e7e8      	b.n	1238 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1266:	4802      	ldr	r0, [pc, #8]	; (1270 <mutex_unlock_platform+0x4c>)
    1268:	e7e6      	b.n	1238 <mutex_unlock_platform+0x14>
    126a:	bf00      	nop
    126c:	ffff8fe9 	.word	0xffff8fe9
    1270:	ffff8fea 	.word	0xffff8fea

00001274 <mutex_lock_platform>:
    if(mutex == NULL) {
    1274:	b320      	cbz	r0, 12c0 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1276:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1278:	6842      	ldr	r2, [r0, #4]
    127a:	2a04      	cmp	r2, #4
    127c:	d002      	beq.n	1284 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    127e:	b992      	cbnz	r2, 12a6 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1280:	4811      	ldr	r0, [pc, #68]	; (12c8 <mutex_lock_platform+0x54>)
    1282:	e00f      	b.n	12a4 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1284:	6803      	ldr	r3, [r0, #0]
    1286:	2201      	movs	r2, #1
    1288:	f3bf 8f5b 	dmb	ish
    128c:	e853 1f00 	ldrex	r1, [r3]
    1290:	2900      	cmp	r1, #0
    1292:	d103      	bne.n	129c <mutex_lock_platform+0x28>
    1294:	e843 2000 	strex	r0, r2, [r3]
    1298:	2800      	cmp	r0, #0
    129a:	d1f7      	bne.n	128c <mutex_lock_platform+0x18>
    129c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12a0:	d10c      	bne.n	12bc <mutex_lock_platform+0x48>
    12a2:	2000      	movs	r0, #0
}
    12a4:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    12a6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    12a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12b0:	f002 fe18 	bl	3ee4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    12b4:	2800      	cmp	r0, #0
    12b6:	d0f5      	beq.n	12a4 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    12b8:	4804      	ldr	r0, [pc, #16]	; (12cc <mutex_lock_platform+0x58>)
    12ba:	e7f3      	b.n	12a4 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12bc:	4803      	ldr	r0, [pc, #12]	; (12cc <mutex_lock_platform+0x58>)
    12be:	e7f1      	b.n	12a4 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    12c0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    12c4:	4770      	bx	lr
    12c6:	bf00      	nop
    12c8:	ffff8fea 	.word	0xffff8fea
    12cc:	ffff8fe9 	.word	0xffff8fe9

000012d0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12d0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    12d2:	4604      	mov	r4, r0
    12d4:	b188      	cbz	r0, 12fa <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12d6:	6863      	ldr	r3, [r4, #4]
    12d8:	2b04      	cmp	r3, #4
    12da:	d00d      	beq.n	12f8 <mutex_free_platform+0x28>
    12dc:	2b08      	cmp	r3, #8
    12de:	d00b      	beq.n	12f8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12e0:	b153      	cbz	r3, 12f8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    12e2:	f013 0f02 	tst.w	r3, #2
    12e6:	d00d      	beq.n	1304 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    12e8:	4621      	mov	r1, r4
    12ea:	4809      	ldr	r0, [pc, #36]	; (1310 <mutex_free_platform+0x40>)
    12ec:	f004 fe18 	bl	5f20 <k_mem_slab_free>
        mutex->mutex = NULL;
    12f0:	2300      	movs	r3, #0
    12f2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    12f4:	2300      	movs	r3, #0
    12f6:	6063      	str	r3, [r4, #4]
}
    12f8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    12fa:	4b06      	ldr	r3, [pc, #24]	; (1314 <mutex_free_platform+0x44>)
    12fc:	685b      	ldr	r3, [r3, #4]
    12fe:	4806      	ldr	r0, [pc, #24]	; (1318 <mutex_free_platform+0x48>)
    1300:	4798      	blx	r3
    1302:	e7e8      	b.n	12d6 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1304:	2214      	movs	r2, #20
    1306:	2100      	movs	r1, #0
    1308:	6820      	ldr	r0, [r4, #0]
    130a:	f004 f9c8 	bl	569e <memset>
    130e:	e7f1      	b.n	12f4 <mutex_free_platform+0x24>
    1310:	20000344 	.word	0x20000344
    1314:	200000dc 	.word	0x200000dc
    1318:	00006634 	.word	0x00006634

0000131c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    131c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    131e:	4604      	mov	r4, r0
    1320:	b178      	cbz	r0, 1342 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1322:	6863      	ldr	r3, [r4, #4]
    1324:	2b04      	cmp	r3, #4
    1326:	d00b      	beq.n	1340 <mutex_init_platform+0x24>
    1328:	2b08      	cmp	r3, #8
    132a:	d009      	beq.n	1340 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    132c:	b90b      	cbnz	r3, 1332 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    132e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1330:	b163      	cbz	r3, 134c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1332:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1334:	f004 fe63 	bl	5ffe <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1338:	6863      	ldr	r3, [r4, #4]
    133a:	f043 0301 	orr.w	r3, r3, #1
    133e:	6063      	str	r3, [r4, #4]
}
    1340:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1342:	4b0f      	ldr	r3, [pc, #60]	; (1380 <mutex_init_platform+0x64>)
    1344:	685b      	ldr	r3, [r3, #4]
    1346:	480f      	ldr	r0, [pc, #60]	; (1384 <mutex_init_platform+0x68>)
    1348:	4798      	blx	r3
    134a:	e7ea      	b.n	1322 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    134c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1354:	4621      	mov	r1, r4
    1356:	480c      	ldr	r0, [pc, #48]	; (1388 <mutex_init_platform+0x6c>)
    1358:	f002 fc92 	bl	3c80 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    135c:	b908      	cbnz	r0, 1362 <mutex_init_platform+0x46>
    135e:	6823      	ldr	r3, [r4, #0]
    1360:	b91b      	cbnz	r3, 136a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1362:	4b07      	ldr	r3, [pc, #28]	; (1380 <mutex_init_platform+0x64>)
    1364:	685b      	ldr	r3, [r3, #4]
    1366:	4809      	ldr	r0, [pc, #36]	; (138c <mutex_init_platform+0x70>)
    1368:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    136a:	2214      	movs	r2, #20
    136c:	2100      	movs	r1, #0
    136e:	6820      	ldr	r0, [r4, #0]
    1370:	f004 f995 	bl	569e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1374:	6863      	ldr	r3, [r4, #4]
    1376:	f043 0302 	orr.w	r3, r3, #2
    137a:	6063      	str	r3, [r4, #4]
    137c:	e7d9      	b.n	1332 <mutex_init_platform+0x16>
    137e:	bf00      	nop
    1380:	200000dc 	.word	0x200000dc
    1384:	00006634 	.word	0x00006634
    1388:	20000344 	.word	0x20000344
    138c:	0000665c 	.word	0x0000665c

00001390 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1390:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1392:	2340      	movs	r3, #64	; 0x40
    1394:	2214      	movs	r2, #20
    1396:	4904      	ldr	r1, [pc, #16]	; (13a8 <nrf_cc3xx_platform_mutex_init+0x18>)
    1398:	4804      	ldr	r0, [pc, #16]	; (13ac <nrf_cc3xx_platform_mutex_init+0x1c>)
    139a:	f004 fdb3 	bl	5f04 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    139e:	4904      	ldr	r1, [pc, #16]	; (13b0 <nrf_cc3xx_platform_mutex_init+0x20>)
    13a0:	4804      	ldr	r0, [pc, #16]	; (13b4 <nrf_cc3xx_platform_mutex_init+0x24>)
    13a2:	f003 fcf1 	bl	4d88 <nrf_cc3xx_platform_set_mutexes>
}
    13a6:	bd08      	pop	{r3, pc}
    13a8:	20000360 	.word	0x20000360
    13ac:	20000344 	.word	0x20000344
    13b0:	0000669c 	.word	0x0000669c
    13b4:	0000668c 	.word	0x0000668c

000013b8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    13b8:	4901      	ldr	r1, [pc, #4]	; (13c0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    13ba:	2210      	movs	r2, #16
	str	r2, [r1]
    13bc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    13be:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    13c0:	e000ed10 	.word	0xe000ed10

000013c4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    13c4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    13c6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    13c8:	f380 8811 	msr	BASEPRI, r0
	isb
    13cc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    13d0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    13d4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    13d6:	b662      	cpsie	i
	isb
    13d8:	f3bf 8f6f 	isb	sy

	bx	lr
    13dc:	4770      	bx	lr
    13de:	bf00      	nop

000013e0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    13e0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    13e2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    13e4:	f381 8811 	msr	BASEPRI, r1

	wfe
    13e8:	bf20      	wfe

	msr	BASEPRI, r0
    13ea:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    13ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop

000013f4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    13f4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    13f6:	2b00      	cmp	r3, #0
    13f8:	db08      	blt.n	140c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13fa:	f000 001f 	and.w	r0, r0, #31
    13fe:	095b      	lsrs	r3, r3, #5
    1400:	2201      	movs	r2, #1
    1402:	fa02 f000 	lsl.w	r0, r2, r0
    1406:	4a02      	ldr	r2, [pc, #8]	; (1410 <arch_irq_enable+0x1c>)
    1408:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    140c:	4770      	bx	lr
    140e:	bf00      	nop
    1410:	e000e100 	.word	0xe000e100

00001414 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1414:	0942      	lsrs	r2, r0, #5
    1416:	4b05      	ldr	r3, [pc, #20]	; (142c <arch_irq_is_enabled+0x18>)
    1418:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    141c:	f000 001f 	and.w	r0, r0, #31
    1420:	2301      	movs	r3, #1
    1422:	fa03 f000 	lsl.w	r0, r3, r0
}
    1426:	4010      	ands	r0, r2
    1428:	4770      	bx	lr
    142a:	bf00      	nop
    142c:	e000e100 	.word	0xe000e100

00001430 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1430:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1432:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1434:	2b00      	cmp	r3, #0
    1436:	db08      	blt.n	144a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1438:	0149      	lsls	r1, r1, #5
    143a:	b2c9      	uxtb	r1, r1
    143c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1440:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1444:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1448:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    144a:	f000 000f 	and.w	r0, r0, #15
    144e:	0149      	lsls	r1, r1, #5
    1450:	b2c9      	uxtb	r1, r1
    1452:	4b01      	ldr	r3, [pc, #4]	; (1458 <z_arm_irq_priority_set+0x28>)
    1454:	5419      	strb	r1, [r3, r0]
}
    1456:	4770      	bx	lr
    1458:	e000ed14 	.word	0xe000ed14

0000145c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    145c:	bf30      	wfi
    b z_SysNmiOnReset
    145e:	f7ff bffd 	b.w	145c <z_SysNmiOnReset>
    1462:	bf00      	nop

00001464 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1464:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1466:	4b0b      	ldr	r3, [pc, #44]	; (1494 <z_arm_prep_c+0x30>)
    1468:	4a0b      	ldr	r2, [pc, #44]	; (1498 <z_arm_prep_c+0x34>)
    146a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    146e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1470:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1474:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1478:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    147c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1484:	f002 fb9c 	bl	3bc0 <z_bss_zero>
	z_data_copy();
    1488:	f003 fa32 	bl	48f0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    148c:	f000 fa12 	bl	18b4 <z_arm_interrupt_init>
	z_cstart();
    1490:	f002 fba2 	bl	3bd8 <z_cstart>
    1494:	e000ed00 	.word	0xe000ed00
    1498:	00000000 	.word	0x00000000

0000149c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    149c:	4a0a      	ldr	r2, [pc, #40]	; (14c8 <arch_swap+0x2c>)
    149e:	6893      	ldr	r3, [r2, #8]
    14a0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    14a4:	4909      	ldr	r1, [pc, #36]	; (14cc <arch_swap+0x30>)
    14a6:	6809      	ldr	r1, [r1, #0]
    14a8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14ac:	4908      	ldr	r1, [pc, #32]	; (14d0 <arch_swap+0x34>)
    14ae:	684b      	ldr	r3, [r1, #4]
    14b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    14b4:	604b      	str	r3, [r1, #4]
    14b6:	2300      	movs	r3, #0
    14b8:	f383 8811 	msr	BASEPRI, r3
    14bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    14c0:	6893      	ldr	r3, [r2, #8]
}
    14c2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    14c6:	4770      	bx	lr
    14c8:	20000dbc 	.word	0x20000dbc
    14cc:	0000680c 	.word	0x0000680c
    14d0:	e000ed00 	.word	0xe000ed00

000014d4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    14d4:	4913      	ldr	r1, [pc, #76]	; (1524 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    14d6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    14d8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    14dc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    14de:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14e2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14e6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    14e8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    14ec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    14f0:	4f0d      	ldr	r7, [pc, #52]	; (1528 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14f2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    14f6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    14f8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    14fa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    14fc:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1500:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1502:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1506:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    150a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    150c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    150e:	f000 fa73 	bl	19f8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1512:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1516:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    151a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    151e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1522:	4770      	bx	lr
    ldr r1, =_kernel
    1524:	20000dbc 	.word	0x20000dbc
    ldr v4, =_SCS_ICSR
    1528:	e000ed04 	.word	0xe000ed04

0000152c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    152c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1530:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1532:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1536:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    153a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    153c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1540:	2902      	cmp	r1, #2
    beq _oops
    1542:	d0ff      	beq.n	1544 <_oops>

00001544 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1544:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1546:	f003 ffac 	bl	54a2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    154a:	bd01      	pop	{r0, pc}

0000154c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    154c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    154e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1552:	490d      	ldr	r1, [pc, #52]	; (1588 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1554:	f021 0101 	bic.w	r1, r1, #1
    1558:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    155c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1560:	9b01      	ldr	r3, [sp, #4]
    1562:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1566:	9b02      	ldr	r3, [sp, #8]
    1568:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    156c:	9b03      	ldr	r3, [sp, #12]
    156e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1576:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    157a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    157c:	2300      	movs	r3, #0
    157e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1582:	bc10      	pop	{r4}
    1584:	4770      	bx	lr
    1586:	bf00      	nop
    1588:	00005345 	.word	0x00005345

0000158c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    158c:	4b16      	ldr	r3, [pc, #88]	; (15e8 <z_check_thread_stack_fail+0x5c>)
    158e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    1590:	b1da      	cbz	r2, 15ca <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1592:	f110 0f16 	cmn.w	r0, #22
    1596:	d01a      	beq.n	15ce <z_check_thread_stack_fail+0x42>
{
    1598:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    159a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    159e:	f1a3 0420 	sub.w	r4, r3, #32
    15a2:	4284      	cmp	r4, r0
    15a4:	d805      	bhi.n	15b2 <z_check_thread_stack_fail+0x26>
    15a6:	4283      	cmp	r3, r0
    15a8:	d908      	bls.n	15bc <z_check_thread_stack_fail+0x30>
    15aa:	428b      	cmp	r3, r1
    15ac:	d808      	bhi.n	15c0 <z_check_thread_stack_fail+0x34>
    15ae:	2100      	movs	r1, #0
    15b0:	e000      	b.n	15b4 <z_check_thread_stack_fail+0x28>
    15b2:	2100      	movs	r1, #0
    15b4:	b931      	cbnz	r1, 15c4 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    15b6:	2000      	movs	r0, #0
}
    15b8:	bc10      	pop	{r4}
    15ba:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    15bc:	2100      	movs	r1, #0
    15be:	e7f9      	b.n	15b4 <z_check_thread_stack_fail+0x28>
    15c0:	2101      	movs	r1, #1
    15c2:	e7f7      	b.n	15b4 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    15c4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    15c8:	e7f6      	b.n	15b8 <z_check_thread_stack_fail+0x2c>
		return 0;
    15ca:	2000      	movs	r0, #0
    15cc:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    15ce:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    15d2:	428b      	cmp	r3, r1
    15d4:	bf94      	ite	ls
    15d6:	2100      	movls	r1, #0
    15d8:	2101      	movhi	r1, #1
    15da:	b909      	cbnz	r1, 15e0 <z_check_thread_stack_fail+0x54>
	return 0;
    15dc:	2000      	movs	r0, #0
}
    15de:	4770      	bx	lr
		return thread->stack_info.start;
    15e0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    15e4:	4770      	bx	lr
    15e6:	bf00      	nop
    15e8:	20000dbc 	.word	0x20000dbc

000015ec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    15ec:	b508      	push	{r3, lr}
    15ee:	460d      	mov	r5, r1
    15f0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    15f2:	4b08      	ldr	r3, [pc, #32]	; (1614 <arch_switch_to_main_thread+0x28>)
    15f4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    15f6:	f000 f9ff 	bl	19f8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    15fa:	4620      	mov	r0, r4
    15fc:	f385 8809 	msr	PSP, r5
    1600:	2100      	movs	r1, #0
    1602:	b663      	cpsie	if
    1604:	f381 8811 	msr	BASEPRI, r1
    1608:	f3bf 8f6f 	isb	sy
    160c:	2200      	movs	r2, #0
    160e:	2300      	movs	r3, #0
    1610:	f003 fe98 	bl	5344 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1614:	20000dbc 	.word	0x20000dbc

00001618 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1618:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    161a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    161c:	4a0b      	ldr	r2, [pc, #44]	; (164c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    161e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1620:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1622:	bf1e      	ittt	ne
	movne	r1, #0
    1624:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1626:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1628:	f004 fccd 	blne	5fc6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    162c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    162e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1632:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1636:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    163a:	4905      	ldr	r1, [pc, #20]	; (1650 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    163c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    163e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1640:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1642:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1646:	4903      	ldr	r1, [pc, #12]	; (1654 <_isr_wrapper+0x3c>)
	bx r1
    1648:	4708      	bx	r1
    164a:	0000      	.short	0x0000
	ldr r2, =_kernel
    164c:	20000dbc 	.word	0x20000dbc
	ldr r1, =_sw_isr_table
    1650:	000063e8 	.word	0x000063e8
	ldr r1, =z_arm_int_exit
    1654:	00001659 	.word	0x00001659

00001658 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1658:	4b04      	ldr	r3, [pc, #16]	; (166c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    165a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    165c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    165e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1660:	d003      	beq.n	166a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1662:	4903      	ldr	r1, [pc, #12]	; (1670 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1668:	600a      	str	r2, [r1, #0]

0000166a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    166a:	4770      	bx	lr
	ldr r3, =_kernel
    166c:	20000dbc 	.word	0x20000dbc
	ldr r1, =_SCS_ICSR
    1670:	e000ed04 	.word	0xe000ed04

00001674 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1674:	b510      	push	{r4, lr}
    1676:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1678:	4b12      	ldr	r3, [pc, #72]	; (16c4 <bus_fault+0x50>)
    167a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    167c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1680:	f413 7f00 	tst.w	r3, #512	; 0x200
    1684:	d00b      	beq.n	169e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1686:	4b0f      	ldr	r3, [pc, #60]	; (16c4 <bus_fault+0x50>)
    1688:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    168c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1690:	d005      	beq.n	169e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1692:	b121      	cbz	r1, 169e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1694:	4a0b      	ldr	r2, [pc, #44]	; (16c4 <bus_fault+0x50>)
    1696:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    169c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    169e:	4b09      	ldr	r3, [pc, #36]	; (16c4 <bus_fault+0x50>)
    16a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    16a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    16a8:	d101      	bne.n	16ae <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    16aa:	4b06      	ldr	r3, [pc, #24]	; (16c4 <bus_fault+0x50>)
    16ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    16ae:	4a05      	ldr	r2, [pc, #20]	; (16c4 <bus_fault+0x50>)
    16b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16b2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    16b8:	2101      	movs	r1, #1
    16ba:	f003 ff04 	bl	54c6 <memory_fault_recoverable>
    16be:	7020      	strb	r0, [r4, #0]

	return reason;
}
    16c0:	2000      	movs	r0, #0
    16c2:	bd10      	pop	{r4, pc}
    16c4:	e000ed00 	.word	0xe000ed00

000016c8 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <usage_fault+0x20>)
    16ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    16d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    16d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16d8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    16dc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    16e0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    16e2:	2000      	movs	r0, #0
    16e4:	4770      	bx	lr
    16e6:	bf00      	nop
    16e8:	e000ed00 	.word	0xe000ed00

000016ec <mem_manage_fault>:
{
    16ec:	b570      	push	{r4, r5, r6, lr}
    16ee:	4605      	mov	r5, r0
    16f0:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    16f2:	4b20      	ldr	r3, [pc, #128]	; (1774 <mem_manage_fault+0x88>)
    16f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    16f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16fa:	f013 0f02 	tst.w	r3, #2
    16fe:	d00c      	beq.n	171a <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    1700:	4b1c      	ldr	r3, [pc, #112]	; (1774 <mem_manage_fault+0x88>)
    1702:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1706:	f013 0f80 	tst.w	r3, #128	; 0x80
    170a:	d025      	beq.n	1758 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    170c:	b139      	cbz	r1, 171e <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    170e:	4a19      	ldr	r2, [pc, #100]	; (1774 <mem_manage_fault+0x88>)
    1710:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1716:	6293      	str	r3, [r2, #40]	; 0x28
    1718:	e001      	b.n	171e <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    171a:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    171e:	4b15      	ldr	r3, [pc, #84]	; (1774 <mem_manage_fault+0x88>)
    1720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1726:	f013 0f10 	tst.w	r3, #16
    172a:	d104      	bne.n	1736 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    172c:	4b11      	ldr	r3, [pc, #68]	; (1774 <mem_manage_fault+0x88>)
    172e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1730:	f014 0402 	ands.w	r4, r4, #2
    1734:	d004      	beq.n	1740 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1736:	4b0f      	ldr	r3, [pc, #60]	; (1774 <mem_manage_fault+0x88>)
    1738:	685c      	ldr	r4, [r3, #4]
    173a:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    173e:	d10e      	bne.n	175e <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1740:	4a0c      	ldr	r2, [pc, #48]	; (1774 <mem_manage_fault+0x88>)
    1742:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1744:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1748:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    174a:	2101      	movs	r1, #1
    174c:	4628      	mov	r0, r5
    174e:	f003 feba 	bl	54c6 <memory_fault_recoverable>
    1752:	7030      	strb	r0, [r6, #0]
}
    1754:	4620      	mov	r0, r4
    1756:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1758:	f06f 0015 	mvn.w	r0, #21
    175c:	e7df      	b.n	171e <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    175e:	4629      	mov	r1, r5
    1760:	f7ff ff14 	bl	158c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1764:	4604      	mov	r4, r0
    1766:	2800      	cmp	r0, #0
    1768:	d0ea      	beq.n	1740 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    176a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    176e:	2402      	movs	r4, #2
    1770:	e7e6      	b.n	1740 <mem_manage_fault+0x54>
    1772:	bf00      	nop
    1774:	e000ed00 	.word	0xe000ed00

00001778 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1778:	b510      	push	{r4, lr}
    177a:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    177c:	2300      	movs	r3, #0
    177e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1780:	4b1b      	ldr	r3, [pc, #108]	; (17f0 <hard_fault+0x78>)
    1782:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1784:	f010 0002 	ands.w	r0, r0, #2
    1788:	d12d      	bne.n	17e6 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    178c:	2b00      	cmp	r3, #0
    178e:	db2b      	blt.n	17e8 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1790:	4b17      	ldr	r3, [pc, #92]	; (17f0 <hard_fault+0x78>)
    1792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1794:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    1798:	d027      	beq.n	17ea <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    179a:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    179c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    17a0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    17a4:	429a      	cmp	r2, r3
    17a6:	d010      	beq.n	17ca <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    17a8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    17ac:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    17b0:	781b      	ldrb	r3, [r3, #0]
    17b2:	b963      	cbnz	r3, 17ce <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    17b4:	4b0f      	ldr	r3, [pc, #60]	; (17f4 <hard_fault+0x7c>)
    17b6:	781b      	ldrb	r3, [r3, #0]
    17b8:	b97b      	cbnz	r3, 17da <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    17ba:	4b0f      	ldr	r3, [pc, #60]	; (17f8 <hard_fault+0x80>)
    17bc:	881b      	ldrh	r3, [r3, #0]
    17be:	b29b      	uxth	r3, r3
    17c0:	b193      	cbz	r3, 17e8 <hard_fault+0x70>
			reason = usage_fault(esf);
    17c2:	4620      	mov	r0, r4
    17c4:	f7ff ff80 	bl	16c8 <usage_fault>
    17c8:	e00e      	b.n	17e8 <hard_fault+0x70>
			reason = esf->basic.r0;
    17ca:	6820      	ldr	r0, [r4, #0]
    17cc:	e00c      	b.n	17e8 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    17ce:	460a      	mov	r2, r1
    17d0:	2101      	movs	r1, #1
    17d2:	4620      	mov	r0, r4
    17d4:	f7ff ff8a 	bl	16ec <mem_manage_fault>
    17d8:	e006      	b.n	17e8 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    17da:	460a      	mov	r2, r1
    17dc:	2101      	movs	r1, #1
    17de:	4620      	mov	r0, r4
    17e0:	f7ff ff48 	bl	1674 <bus_fault>
    17e4:	e000      	b.n	17e8 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    17e6:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    17e8:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    17ea:	4618      	mov	r0, r3
	return reason;
    17ec:	e7fc      	b.n	17e8 <hard_fault+0x70>
    17ee:	bf00      	nop
    17f0:	e000ed00 	.word	0xe000ed00
    17f4:	e000ed29 	.word	0xe000ed29
    17f8:	e000ed2a 	.word	0xe000ed2a

000017fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    17fc:	b570      	push	{r4, r5, r6, lr}
    17fe:	b08a      	sub	sp, #40	; 0x28
    1800:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1802:	4b22      	ldr	r3, [pc, #136]	; (188c <z_arm_fault+0x90>)
    1804:	6859      	ldr	r1, [r3, #4]
    1806:	f3c1 0108 	ubfx	r1, r1, #0, #9
    180a:	2300      	movs	r3, #0
    180c:	f383 8811 	msr	BASEPRI, r3
    1810:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1814:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1818:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    181c:	d115      	bne.n	184a <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    181e:	f002 030c 	and.w	r3, r2, #12
    1822:	2b08      	cmp	r3, #8
    1824:	d014      	beq.n	1850 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1826:	f012 0f08 	tst.w	r2, #8
    182a:	d00b      	beq.n	1844 <z_arm_fault+0x48>
	*nested_exc = false;
    182c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    182e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1832:	4620      	mov	r0, r4
    1834:	f003 fe4c 	bl	54d0 <fault_handle>
    1838:	4605      	mov	r5, r0
	if (recoverable) {
    183a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    183e:	b153      	cbz	r3, 1856 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1840:	b00a      	add	sp, #40	; 0x28
    1842:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1844:	4604      	mov	r4, r0
			*nested_exc = true;
    1846:	2601      	movs	r6, #1
    1848:	e7f1      	b.n	182e <z_arm_fault+0x32>
	*nested_exc = false;
    184a:	2600      	movs	r6, #0
		return NULL;
    184c:	4634      	mov	r4, r6
    184e:	e7ee      	b.n	182e <z_arm_fault+0x32>
	*nested_exc = false;
    1850:	2600      	movs	r6, #0
		return NULL;
    1852:	4634      	mov	r4, r6
    1854:	e7eb      	b.n	182e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1856:	2220      	movs	r2, #32
    1858:	4621      	mov	r1, r4
    185a:	a801      	add	r0, sp, #4
    185c:	f003 fefb 	bl	5656 <memcpy>
	if (nested_exc) {
    1860:	b14e      	cbz	r6, 1876 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1862:	9b08      	ldr	r3, [sp, #32]
    1864:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1868:	b95a      	cbnz	r2, 1882 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    186a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    186e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1872:	9308      	str	r3, [sp, #32]
    1874:	e005      	b.n	1882 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1876:	9b08      	ldr	r3, [sp, #32]
    1878:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    187c:	f023 0301 	bic.w	r3, r3, #1
    1880:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1882:	a901      	add	r1, sp, #4
    1884:	4628      	mov	r0, r5
    1886:	f003 fe08 	bl	549a <z_arm_fatal_error>
    188a:	e7d9      	b.n	1840 <z_arm_fault+0x44>
    188c:	e000ed00 	.word	0xe000ed00

00001890 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1890:	4a02      	ldr	r2, [pc, #8]	; (189c <z_arm_fault_init+0xc>)
    1892:	6953      	ldr	r3, [r2, #20]
    1894:	f043 0310 	orr.w	r3, r3, #16
    1898:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    189a:	4770      	bx	lr
    189c:	e000ed00 	.word	0xe000ed00

000018a0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    18a0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    18a4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    18a8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    18aa:	4672      	mov	r2, lr
	bl z_arm_fault
    18ac:	f7ff ffa6 	bl	17fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    18b0:	bd01      	pop	{r0, pc}
    18b2:	bf00      	nop

000018b4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    18b4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    18b6:	e006      	b.n	18c6 <z_arm_interrupt_init+0x12>
    18b8:	f002 010f 	and.w	r1, r2, #15
    18bc:	4b09      	ldr	r3, [pc, #36]	; (18e4 <z_arm_interrupt_init+0x30>)
    18be:	440b      	add	r3, r1
    18c0:	2120      	movs	r1, #32
    18c2:	7619      	strb	r1, [r3, #24]
    18c4:	3201      	adds	r2, #1
    18c6:	2a2f      	cmp	r2, #47	; 0x2f
    18c8:	dc0a      	bgt.n	18e0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    18ca:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    18cc:	2b00      	cmp	r3, #0
    18ce:	dbf3      	blt.n	18b8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    18d4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    18d8:	2120      	movs	r1, #32
    18da:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    18de:	e7f1      	b.n	18c4 <z_arm_interrupt_init+0x10>
	}
}
    18e0:	4770      	bx	lr
    18e2:	bf00      	nop
    18e4:	e000ecfc 	.word	0xe000ecfc

000018e8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    18e8:	2000      	movs	r0, #0
    msr CONTROL, r0
    18ea:	f380 8814 	msr	CONTROL, r0
    isb
    18ee:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    18f2:	f004 fd07 	bl	6304 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    18f6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    18f8:	490d      	ldr	r1, [pc, #52]	; (1930 <__start+0x48>)
    str r0, [r1]
    18fa:	6008      	str	r0, [r1, #0]
    dsb
    18fc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1900:	480c      	ldr	r0, [pc, #48]	; (1934 <__start+0x4c>)
    msr msp, r0
    1902:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1906:	f000 f829 	bl	195c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    190a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    190c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1910:	4809      	ldr	r0, [pc, #36]	; (1938 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1912:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1916:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1918:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    191c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1920:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1922:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1924:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1928:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    192c:	f7ff fd9a 	bl	1464 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1930:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1934:	200013e0 	.word	0x200013e0
    ldr r0, =z_interrupt_stacks
    1938:	20001560 	.word	0x20001560

0000193c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    193c:	4b06      	ldr	r3, [pc, #24]	; (1958 <z_arm_clear_arm_mpu_config+0x1c>)
    193e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    1940:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1944:	2300      	movs	r3, #0
    1946:	4283      	cmp	r3, r0
    1948:	da05      	bge.n	1956 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    194a:	4a03      	ldr	r2, [pc, #12]	; (1958 <z_arm_clear_arm_mpu_config+0x1c>)
    194c:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    194e:	2100      	movs	r1, #0
    1950:	6111      	str	r1, [r2, #16]
    1952:	3301      	adds	r3, #1
    1954:	e7f7      	b.n	1946 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    1956:	4770      	bx	lr
    1958:	e000ed90 	.word	0xe000ed90

0000195c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    195c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    195e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1960:	2400      	movs	r4, #0
    1962:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1966:	f7ff ffe9 	bl	193c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    196a:	4623      	mov	r3, r4
    196c:	e008      	b.n	1980 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    196e:	f103 0120 	add.w	r1, r3, #32
    1972:	4a0e      	ldr	r2, [pc, #56]	; (19ac <z_arm_init_arch_hw_at_boot+0x50>)
    1974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1978:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    197c:	3301      	adds	r3, #1
    197e:	b2db      	uxtb	r3, r3
    1980:	2b07      	cmp	r3, #7
    1982:	d9f4      	bls.n	196e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1984:	2300      	movs	r3, #0
    1986:	e008      	b.n	199a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1988:	f103 0160 	add.w	r1, r3, #96	; 0x60
    198c:	4a07      	ldr	r2, [pc, #28]	; (19ac <z_arm_init_arch_hw_at_boot+0x50>)
    198e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1992:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1996:	3301      	adds	r3, #1
    1998:	b2db      	uxtb	r3, r3
    199a:	2b07      	cmp	r3, #7
    199c:	d9f4      	bls.n	1988 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    199e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    19a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19a4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    19a8:	bd10      	pop	{r4, pc}
    19aa:	bf00      	nop
    19ac:	e000e100 	.word	0xe000e100

000019b0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    19b0:	b508      	push	{r3, lr}
	if (_current == thread) {
    19b2:	4b08      	ldr	r3, [pc, #32]	; (19d4 <z_impl_k_thread_abort+0x24>)
    19b4:	689b      	ldr	r3, [r3, #8]
    19b6:	4283      	cmp	r3, r0
    19b8:	d002      	beq.n	19c0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    19ba:	f002 ff71 	bl	48a0 <z_thread_abort>
}
    19be:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    19c0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    19c4:	2b00      	cmp	r3, #0
    19c6:	d0f8      	beq.n	19ba <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    19c8:	4a03      	ldr	r2, [pc, #12]	; (19d8 <z_impl_k_thread_abort+0x28>)
    19ca:	6853      	ldr	r3, [r2, #4]
    19cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    19d0:	6053      	str	r3, [r2, #4]
    19d2:	e7f2      	b.n	19ba <z_impl_k_thread_abort+0xa>
    19d4:	20000dbc 	.word	0x20000dbc
    19d8:	e000ed00 	.word	0xe000ed00

000019dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    19dc:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    19de:	4b03      	ldr	r3, [pc, #12]	; (19ec <z_arm_configure_static_mpu_regions+0x10>)
    19e0:	4a03      	ldr	r2, [pc, #12]	; (19f0 <z_arm_configure_static_mpu_regions+0x14>)
    19e2:	2101      	movs	r1, #1
    19e4:	4803      	ldr	r0, [pc, #12]	; (19f4 <z_arm_configure_static_mpu_regions+0x18>)
    19e6:	f003 fdf9 	bl	55dc <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    19ea:	bd08      	pop	{r3, pc}
    19ec:	20040000 	.word	0x20040000
    19f0:	20000000 	.word	0x20000000
    19f4:	000066b0 	.word	0x000066b0

000019f8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    19f8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    19fa:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    19fe:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1a00:	4804      	ldr	r0, [pc, #16]	; (1a14 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1a02:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    1a04:	2320      	movs	r3, #32
    1a06:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1a08:	4b03      	ldr	r3, [pc, #12]	; (1a18 <z_arm_configure_dynamic_mpu_regions+0x20>)
    1a0a:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1a0c:	2101      	movs	r1, #1
    1a0e:	f003 fde9 	bl	55e4 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    1a12:	bd08      	pop	{r3, pc}
    1a14:	20000860 	.word	0x20000860
    1a18:	150b0000 	.word	0x150b0000

00001a1c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1a1c:	4a06      	ldr	r2, [pc, #24]	; (1a38 <region_init+0x1c>)
    1a1e:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a20:	680b      	ldr	r3, [r1, #0]
    1a22:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1a26:	4303      	orrs	r3, r0
    1a28:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a2c:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1a2e:	688b      	ldr	r3, [r1, #8]
    1a30:	f043 0301 	orr.w	r3, r3, #1
    1a34:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1a36:	4770      	bx	lr
    1a38:	e000ed90 	.word	0xe000ed90

00001a3c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1a3c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1a3e:	4c03      	ldr	r4, [pc, #12]	; (1a4c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1a40:	2301      	movs	r3, #1
    1a42:	7822      	ldrb	r2, [r4, #0]
    1a44:	f003 fda2 	bl	558c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1a48:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	20000e10 	.word	0x20000e10

00001a50 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1a50:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1a52:	2300      	movs	r3, #0
    1a54:	4a08      	ldr	r2, [pc, #32]	; (1a78 <mpu_configure_dynamic_mpu_regions+0x28>)
    1a56:	7812      	ldrb	r2, [r2, #0]
    1a58:	f003 fd98 	bl	558c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1a5c:	f110 0f16 	cmn.w	r0, #22
    1a60:	d008      	beq.n	1a74 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1a62:	4603      	mov	r3, r0
    1a64:	2b07      	cmp	r3, #7
    1a66:	dc05      	bgt.n	1a74 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    1a68:	4a04      	ldr	r2, [pc, #16]	; (1a7c <mpu_configure_dynamic_mpu_regions+0x2c>)
    1a6a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1a6c:	2100      	movs	r1, #0
    1a6e:	6111      	str	r1, [r2, #16]
    1a70:	3301      	adds	r3, #1
    1a72:	e7f7      	b.n	1a64 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1a74:	bd08      	pop	{r3, pc}
    1a76:	bf00      	nop
    1a78:	20000e10 	.word	0x20000e10
    1a7c:	e000ed90 	.word	0xe000ed90

00001a80 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1a80:	4b03      	ldr	r3, [pc, #12]	; (1a90 <arm_core_mpu_enable+0x10>)
    1a82:	2205      	movs	r2, #5
    1a84:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1a86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a8a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1a8e:	4770      	bx	lr
    1a90:	e000ed90 	.word	0xe000ed90

00001a94 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1a94:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1a98:	4b01      	ldr	r3, [pc, #4]	; (1aa0 <arm_core_mpu_disable+0xc>)
    1a9a:	2200      	movs	r2, #0
    1a9c:	605a      	str	r2, [r3, #4]
}
    1a9e:	4770      	bx	lr
    1aa0:	e000ed90 	.word	0xe000ed90

00001aa4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1aa4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1aa6:	4b0e      	ldr	r3, [pc, #56]	; (1ae0 <z_arm_mpu_init+0x3c>)
    1aa8:	681d      	ldr	r5, [r3, #0]
    1aaa:	2d08      	cmp	r5, #8
    1aac:	d815      	bhi.n	1ada <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1aae:	f7ff fff1 	bl	1a94 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1ab2:	2400      	movs	r4, #0
    1ab4:	42a5      	cmp	r5, r4
    1ab6:	d90a      	bls.n	1ace <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1ab8:	4b09      	ldr	r3, [pc, #36]	; (1ae0 <z_arm_mpu_init+0x3c>)
    1aba:	6859      	ldr	r1, [r3, #4]
    1abc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1ac0:	0093      	lsls	r3, r2, #2
    1ac2:	4419      	add	r1, r3
    1ac4:	4620      	mov	r0, r4
    1ac6:	f7ff ffa9 	bl	1a1c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1aca:	3401      	adds	r4, #1
    1acc:	e7f2      	b.n	1ab4 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1ace:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <z_arm_mpu_init+0x40>)
    1ad0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1ad2:	f7ff ffd5 	bl	1a80 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1ad6:	2000      	movs	r0, #0
}
    1ad8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ade:	e7fb      	b.n	1ad8 <z_arm_mpu_init+0x34>
    1ae0:	000066cc 	.word	0x000066cc
    1ae4:	20000e10 	.word	0x20000e10

00001ae8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1ae8:	4b01      	ldr	r3, [pc, #4]	; (1af0 <__stdout_hook_install+0x8>)
    1aea:	6018      	str	r0, [r3, #0]
}
    1aec:	4770      	bx	lr
    1aee:	bf00      	nop
    1af0:	20000024 	.word	0x20000024

00001af4 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <nrf52_errata_197+0x1c>)
    1af6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    1af8:	4a06      	ldr	r2, [pc, #24]	; (1b14 <nrf52_errata_197+0x20>)
    1afa:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    1afc:	2b08      	cmp	r3, #8
    1afe:	d001      	beq.n	1b04 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    1b00:	2000      	movs	r0, #0
    1b02:	4770      	bx	lr
                switch(var2)
    1b04:	2a02      	cmp	r2, #2
    1b06:	d001      	beq.n	1b0c <nrf52_errata_197+0x18>
                        return false;
    1b08:	2000      	movs	r0, #0
    1b0a:	4770      	bx	lr
                        return true;
    1b0c:	2001      	movs	r0, #1
    #endif
}
    1b0e:	4770      	bx	lr
    1b10:	10000130 	.word	0x10000130
    1b14:	10000134 	.word	0x10000134

00001b18 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    1b18:	b510      	push	{r4, lr}
	__asm__ volatile(
    1b1a:	f04f 0320 	mov.w	r3, #32
    1b1e:	f3ef 8411 	mrs	r4, BASEPRI
    1b22:	f383 8812 	msr	BASEPRI_MAX, r3
    1b26:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1b2a:	2301      	movs	r3, #1
    1b2c:	4a0b      	ldr	r2, [pc, #44]	; (1b5c <nordicsemi_nrf52_init+0x44>)
    1b2e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b36:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    1b3a:	f7ff ffdb 	bl	1af4 <nrf52_errata_197>
    1b3e:	b110      	cbz	r0, 1b46 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1b40:	4b07      	ldr	r3, [pc, #28]	; (1b60 <nordicsemi_nrf52_init+0x48>)
    1b42:	2201      	movs	r2, #1
    1b44:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    1b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b4a:	2201      	movs	r2, #1
    1b4c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1b50:	f384 8811 	msr	BASEPRI, r4
    1b54:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1b58:	2000      	movs	r0, #0
    1b5a:	bd10      	pop	{r4, pc}
    1b5c:	4001e000 	.word	0x4001e000
    1b60:	40000638 	.word	0x40000638

00001b64 <sys_arch_reboot>:
    *p_gpregret = val;
    1b64:	b2c0      	uxtb	r0, r0
    1b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b6a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1b6e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b72:	4905      	ldr	r1, [pc, #20]	; (1b88 <sys_arch_reboot+0x24>)
    1b74:	68ca      	ldr	r2, [r1, #12]
    1b76:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b7a:	4b04      	ldr	r3, [pc, #16]	; (1b8c <sys_arch_reboot+0x28>)
    1b7c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b7e:	60cb      	str	r3, [r1, #12]
    1b80:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1b84:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1b86:	e7fd      	b.n	1b84 <sys_arch_reboot+0x20>
    1b88:	e000ed00 	.word	0xe000ed00
    1b8c:	05fa0004 	.word	0x05fa0004

00001b90 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1b90:	b130      	cbz	r0, 1ba0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    1b92:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1b94:	0180      	lsls	r0, r0, #6
    1b96:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <arch_busy_wait+0x14>)
    1b98:	f043 0301 	orr.w	r3, r3, #1
    1b9c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1b9e:	bd08      	pop	{r3, pc}
    1ba0:	4770      	bx	lr
    1ba2:	bf00      	nop
    1ba4:	000065e0 	.word	0x000065e0

00001ba8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1ba8:	4800      	ldr	r0, [pc, #0]	; (1bac <get_hf_flags+0x4>)
    1baa:	4770      	bx	lr
    1bac:	200008bc 	.word	0x200008bc

00001bb0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1bb0:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <get_subsys+0x10>)
    1bb2:	1ac0      	subs	r0, r0, r3
    1bb4:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1bb6:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <get_subsys+0x14>)
    1bb8:	fb03 f000 	mul.w	r0, r3, r0
    1bbc:	4770      	bx	lr
    1bbe:	bf00      	nop
    1bc0:	2000087c 	.word	0x2000087c
    1bc4:	b6db6db7 	.word	0xb6db6db7

00001bc8 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1bc8:	b538      	push	{r3, r4, r5, lr}
    1bca:	4605      	mov	r5, r0
    1bcc:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1bce:	f7ff ffef 	bl	1bb0 <get_subsys>
    1bd2:	4601      	mov	r1, r0
    1bd4:	2240      	movs	r2, #64	; 0x40
    1bd6:	4803      	ldr	r0, [pc, #12]	; (1be4 <onoff_stop+0x1c>)
    1bd8:	f003 fe16 	bl	5808 <stop>
    1bdc:	4601      	mov	r1, r0
	notify(mgr, res);
    1bde:	4628      	mov	r0, r5
    1be0:	47a0      	blx	r4
}
    1be2:	bd38      	pop	{r3, r4, r5, pc}
    1be4:	00006370 	.word	0x00006370

00001be8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1be8:	b530      	push	{r4, r5, lr}
    1bea:	b083      	sub	sp, #12
    1bec:	4605      	mov	r5, r0
    1bee:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bf0:	f7ff ffde 	bl	1bb0 <get_subsys>
    1bf4:	4601      	mov	r1, r0
    1bf6:	2340      	movs	r3, #64	; 0x40
    1bf8:	9300      	str	r3, [sp, #0]
    1bfa:	4623      	mov	r3, r4
    1bfc:	4a05      	ldr	r2, [pc, #20]	; (1c14 <onoff_start+0x2c>)
    1bfe:	4806      	ldr	r0, [pc, #24]	; (1c18 <onoff_start+0x30>)
    1c00:	f003 fe1c 	bl	583c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1c04:	1e01      	subs	r1, r0, #0
    1c06:	db01      	blt.n	1c0c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1c08:	b003      	add	sp, #12
    1c0a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1c0c:	4628      	mov	r0, r5
    1c0e:	47a0      	blx	r4
}
    1c10:	e7fa      	b.n	1c08 <onoff_start+0x20>
    1c12:	bf00      	nop
    1c14:	00005885 	.word	0x00005885
    1c18:	00006370 	.word	0x00006370

00001c1c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1c1c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1c1e:	b110      	cbz	r0, 1c26 <clock_event_handler+0xa>
    1c20:	2801      	cmp	r0, #1
    1c22:	d00d      	beq.n	1c40 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1c24:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1c26:	2100      	movs	r1, #0
    1c28:	4808      	ldr	r0, [pc, #32]	; (1c4c <clock_event_handler+0x30>)
    1c2a:	f003 fd76 	bl	571a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1c2e:	6883      	ldr	r3, [r0, #8]
    1c30:	f013 0f07 	tst.w	r3, #7
    1c34:	d1f6      	bne.n	1c24 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1c36:	2100      	movs	r1, #0
    1c38:	4804      	ldr	r0, [pc, #16]	; (1c4c <clock_event_handler+0x30>)
    1c3a:	f003 fdd3 	bl	57e4 <clkstarted_handle>
    1c3e:	e7f1      	b.n	1c24 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1c40:	2101      	movs	r1, #1
    1c42:	4802      	ldr	r0, [pc, #8]	; (1c4c <clock_event_handler+0x30>)
    1c44:	f003 fdce 	bl	57e4 <clkstarted_handle>
}
    1c48:	e7ec      	b.n	1c24 <clock_event_handler+0x8>
    1c4a:	bf00      	nop
    1c4c:	00006370 	.word	0x00006370

00001c50 <generic_hfclk_start>:
{
    1c50:	b510      	push	{r4, lr}
	__asm__ volatile(
    1c52:	f04f 0320 	mov.w	r3, #32
    1c56:	f3ef 8411 	mrs	r4, BASEPRI
    1c5a:	f383 8812 	msr	BASEPRI_MAX, r3
    1c5e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1c62:	4a13      	ldr	r2, [pc, #76]	; (1cb0 <generic_hfclk_start+0x60>)
    1c64:	6813      	ldr	r3, [r2, #0]
    1c66:	f043 0302 	orr.w	r3, r3, #2
    1c6a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1c6c:	f013 0f01 	tst.w	r3, #1
    1c70:	d108      	bne.n	1c84 <generic_hfclk_start+0x34>
	bool already_started = false;
    1c72:	2300      	movs	r3, #0
	__asm__ volatile(
    1c74:	f384 8811 	msr	BASEPRI, r4
    1c78:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1c7c:	b99b      	cbnz	r3, 1ca6 <generic_hfclk_start+0x56>
	hfclk_start();
    1c7e:	f003 fe09 	bl	5894 <hfclk_start>
}
    1c82:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1c8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1c90:	f012 0f01 	tst.w	r2, #1
    1c94:	d101      	bne.n	1c9a <generic_hfclk_start+0x4a>
	bool already_started = false;
    1c96:	2300      	movs	r3, #0
    1c98:	e7ec      	b.n	1c74 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1c9a:	f7ff ff85 	bl	1ba8 <get_hf_flags>
    1c9e:	f003 fd8e 	bl	57be <set_on_state>
			already_started = true;
    1ca2:	2301      	movs	r3, #1
    1ca4:	e7e6      	b.n	1c74 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1ca6:	2100      	movs	r1, #0
    1ca8:	4802      	ldr	r0, [pc, #8]	; (1cb4 <generic_hfclk_start+0x64>)
    1caa:	f003 fd9b 	bl	57e4 <clkstarted_handle>
		return;
    1cae:	e7e8      	b.n	1c82 <generic_hfclk_start+0x32>
    1cb0:	200008cc 	.word	0x200008cc
    1cb4:	00006370 	.word	0x00006370

00001cb8 <generic_hfclk_stop>:
{
    1cb8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1cba:	4b0a      	ldr	r3, [pc, #40]	; (1ce4 <generic_hfclk_stop+0x2c>)
    1cbc:	f3bf 8f5b 	dmb	ish
    1cc0:	e853 2f00 	ldrex	r2, [r3]
    1cc4:	f022 0102 	bic.w	r1, r2, #2
    1cc8:	e843 1000 	strex	r0, r1, [r3]
    1ccc:	2800      	cmp	r0, #0
    1cce:	d1f7      	bne.n	1cc0 <generic_hfclk_stop+0x8>
    1cd0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1cd4:	f012 0f01 	tst.w	r2, #1
    1cd8:	d000      	beq.n	1cdc <generic_hfclk_stop+0x24>
}
    1cda:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1cdc:	f003 fde4 	bl	58a8 <hfclk_stop>
    1ce0:	e7fb      	b.n	1cda <generic_hfclk_stop+0x22>
    1ce2:	bf00      	nop
    1ce4:	200008cc 	.word	0x200008cc

00001ce8 <api_blocking_start>:
{
    1ce8:	b500      	push	{lr}
    1cea:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1cec:	f8cd d000 	str.w	sp, [sp]
    1cf0:	f8cd d004 	str.w	sp, [sp, #4]
    1cf4:	2300      	movs	r3, #0
    1cf6:	9302      	str	r3, [sp, #8]
    1cf8:	2301      	movs	r3, #1
    1cfa:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1cfc:	466b      	mov	r3, sp
    1cfe:	4a07      	ldr	r2, [pc, #28]	; (1d1c <api_blocking_start+0x34>)
    1d00:	f003 fdb8 	bl	5874 <api_start>
	if (err < 0) {
    1d04:	2800      	cmp	r0, #0
    1d06:	db05      	blt.n	1d14 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1d08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1d0c:	2300      	movs	r3, #0
    1d0e:	4668      	mov	r0, sp
    1d10:	f002 f9da 	bl	40c8 <z_impl_k_sem_take>
}
    1d14:	b005      	add	sp, #20
    1d16:	f85d fb04 	ldr.w	pc, [sp], #4
    1d1a:	bf00      	nop
    1d1c:	000058bd 	.word	0x000058bd

00001d20 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d24:	2200      	movs	r2, #0
    1d26:	2101      	movs	r1, #1
    1d28:	4610      	mov	r0, r2
    1d2a:	f7ff fb81 	bl	1430 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1d2e:	2000      	movs	r0, #0
    1d30:	f7ff fb60 	bl	13f4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1d34:	4811      	ldr	r0, [pc, #68]	; (1d7c <clk_init+0x5c>)
    1d36:	f001 f851 	bl	2ddc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1d3a:	4b11      	ldr	r3, [pc, #68]	; (1d80 <clk_init+0x60>)
    1d3c:	4298      	cmp	r0, r3
    1d3e:	d11a      	bne.n	1d76 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1d40:	f004 f873 	bl	5e2a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1d44:	2400      	movs	r4, #0
    1d46:	e003      	b.n	1d50 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d48:	2301      	movs	r3, #1
    1d4a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1d4c:	441c      	add	r4, r3
    1d4e:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    1d50:	2c01      	cmp	r4, #1
    1d52:	d80e      	bhi.n	1d72 <clk_init+0x52>
						get_sub_data(dev, i);
    1d54:	4621      	mov	r1, r4
    1d56:	4630      	mov	r0, r6
    1d58:	f003 fcdf 	bl	571a <get_sub_data>
    1d5c:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1d5e:	4621      	mov	r1, r4
    1d60:	4630      	mov	r0, r6
    1d62:	f003 fce5 	bl	5730 <get_onoff_manager>
    1d66:	4907      	ldr	r1, [pc, #28]	; (1d84 <clk_init+0x64>)
    1d68:	f003 fa74 	bl	5254 <onoff_manager_init>
		if (err < 0) {
    1d6c:	2800      	cmp	r0, #0
    1d6e:	daeb      	bge.n	1d48 <clk_init+0x28>
    1d70:	e000      	b.n	1d74 <clk_init+0x54>
	}

	return 0;
    1d72:	2000      	movs	r0, #0
}
    1d74:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1d76:	f06f 0004 	mvn.w	r0, #4
    1d7a:	e7fb      	b.n	1d74 <clk_init+0x54>
    1d7c:	00001c1d 	.word	0x00001c1d
    1d80:	0bad0000 	.word	0x0bad0000
    1d84:	0000671c 	.word	0x0000671c

00001d88 <lfclk_spinwait>:
{
    1d88:	b570      	push	{r4, r5, r6, lr}
    1d8a:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1d8c:	2801      	cmp	r0, #1
    1d8e:	d107      	bne.n	1da0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1d98:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1d9c:	2b01      	cmp	r3, #1
    1d9e:	d058      	beq.n	1e52 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1da0:	f004 f8fc 	bl	5f9c <k_is_in_isr>
    1da4:	b928      	cbnz	r0, 1db2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    1da6:	4b2e      	ldr	r3, [pc, #184]	; (1e60 <lfclk_spinwait+0xd8>)
    1da8:	781b      	ldrb	r3, [r3, #0]
    1daa:	2b00      	cmp	r3, #0
    1dac:	d041      	beq.n	1e32 <lfclk_spinwait+0xaa>
    1dae:	2300      	movs	r3, #0
    1db0:	e000      	b.n	1db4 <lfclk_spinwait+0x2c>
    1db2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1db4:	461c      	mov	r4, r3
    1db6:	2b00      	cmp	r3, #0
    1db8:	d03d      	beq.n	1e36 <lfclk_spinwait+0xae>
	__asm__ volatile(
    1dba:	f04f 0320 	mov.w	r3, #32
    1dbe:	f3ef 8611 	mrs	r6, BASEPRI
    1dc2:	f383 8812 	msr	BASEPRI_MAX, r3
    1dc6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    1dca:	b924      	cbnz	r4, 1dd6 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    1dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1dd0:	2202      	movs	r2, #2
    1dd2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1dda:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1dde:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1de2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1de6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    1dea:	d12b      	bne.n	1e44 <lfclk_spinwait+0xbc>
    return false;
    1dec:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1dee:	b11a      	cbz	r2, 1df8 <lfclk_spinwait+0x70>
    1df0:	2b01      	cmp	r3, #1
    1df2:	d029      	beq.n	1e48 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1df4:	2d01      	cmp	r5, #1
    1df6:	d027      	beq.n	1e48 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1df8:	b1fc      	cbz	r4, 1e3a <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1dfa:	4630      	mov	r0, r6
    1dfc:	f7ff faf0 	bl	13e0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e04:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d1e4      	bne.n	1dd6 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1e0c:	4b15      	ldr	r3, [pc, #84]	; (1e64 <lfclk_spinwait+0xdc>)
    1e0e:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1e10:	2b00      	cmp	r3, #0
    1e12:	d0e0      	beq.n	1dd6 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e14:	4b13      	ldr	r3, [pc, #76]	; (1e64 <lfclk_spinwait+0xdc>)
    1e16:	2200      	movs	r2, #0
    1e18:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1e1a:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1e1c:	2301      	movs	r3, #1
    1e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e22:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e26:	4a10      	ldr	r2, [pc, #64]	; (1e68 <lfclk_spinwait+0xe0>)
    1e28:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e2c:	4a0f      	ldr	r2, [pc, #60]	; (1e6c <lfclk_spinwait+0xe4>)
    1e2e:	6013      	str	r3, [r2, #0]
}
    1e30:	e7d1      	b.n	1dd6 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1e32:	2301      	movs	r3, #1
    1e34:	e7be      	b.n	1db4 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    1e36:	2600      	movs	r6, #0
    1e38:	e7c7      	b.n	1dca <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    1e3a:	2021      	movs	r0, #33	; 0x21
    1e3c:	2100      	movs	r1, #0
    1e3e:	f002 fcfd 	bl	483c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1e42:	e7dd      	b.n	1e00 <lfclk_spinwait+0x78>
                return true;
    1e44:	2201      	movs	r2, #1
    1e46:	e7d2      	b.n	1dee <lfclk_spinwait+0x66>
	if (isr_mode) {
    1e48:	b124      	cbz	r4, 1e54 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    1e4a:	f386 8811 	msr	BASEPRI, r6
    1e4e:	f3bf 8f6f 	isb	sy
}
    1e52:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    1e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e58:	2202      	movs	r2, #2
    1e5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1e5e:	e7f8      	b.n	1e52 <lfclk_spinwait+0xca>
    1e60:	20000e11 	.word	0x20000e11
    1e64:	40000104 	.word	0x40000104
    1e68:	e000e100 	.word	0xe000e100
    1e6c:	40000008 	.word	0x40000008

00001e70 <z_nrf_clock_control_lf_on>:
{
    1e70:	b510      	push	{r4, lr}
    1e72:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e74:	4b10      	ldr	r3, [pc, #64]	; (1eb8 <z_nrf_clock_control_lf_on+0x48>)
    1e76:	2101      	movs	r1, #1
    1e78:	f3bf 8f5b 	dmb	ish
    1e7c:	e853 2f00 	ldrex	r2, [r3]
    1e80:	e843 1000 	strex	r0, r1, [r3]
    1e84:	2800      	cmp	r0, #0
    1e86:	d1f9      	bne.n	1e7c <z_nrf_clock_control_lf_on+0xc>
    1e88:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1e8c:	b11a      	cbz	r2, 1e96 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1e8e:	1e63      	subs	r3, r4, #1
    1e90:	2b01      	cmp	r3, #1
    1e92:	d90c      	bls.n	1eae <z_nrf_clock_control_lf_on+0x3e>
}
    1e94:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1e96:	4809      	ldr	r0, [pc, #36]	; (1ebc <z_nrf_clock_control_lf_on+0x4c>)
    1e98:	f003 fc4a 	bl	5730 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1e9c:	4908      	ldr	r1, [pc, #32]	; (1ec0 <z_nrf_clock_control_lf_on+0x50>)
    1e9e:	2300      	movs	r3, #0
    1ea0:	604b      	str	r3, [r1, #4]
    1ea2:	60cb      	str	r3, [r1, #12]
    1ea4:	2301      	movs	r3, #1
    1ea6:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1ea8:	f003 f9f0 	bl	528c <onoff_request>
    1eac:	e7ef      	b.n	1e8e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1eae:	4620      	mov	r0, r4
    1eb0:	f7ff ff6a 	bl	1d88 <lfclk_spinwait>
		break;
    1eb4:	e7ee      	b.n	1e94 <z_nrf_clock_control_lf_on+0x24>
    1eb6:	bf00      	nop
    1eb8:	200008d0 	.word	0x200008d0
    1ebc:	00006370 	.word	0x00006370
    1ec0:	2000086c 	.word	0x2000086c

00001ec4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1ec4:	b510      	push	{r4, lr}
    1ec6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1ec8:	280a      	cmp	r0, #10
    1eca:	d007      	beq.n	1edc <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1ecc:	4b07      	ldr	r3, [pc, #28]	; (1eec <console_out+0x28>)
    1ece:	6818      	ldr	r0, [r3, #0]
    1ed0:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    1ed2:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	4798      	blx	r3

	return c;
}
    1ed8:	4620      	mov	r0, r4
    1eda:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1edc:	4b03      	ldr	r3, [pc, #12]	; (1eec <console_out+0x28>)
    1ede:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1ee0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1ee2:	685b      	ldr	r3, [r3, #4]
    1ee4:	210d      	movs	r1, #13
    1ee6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1ee8:	e7f0      	b.n	1ecc <console_out+0x8>
    1eea:	bf00      	nop
    1eec:	200008d4 	.word	0x200008d4

00001ef0 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    1ef0:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1ef2:	4c04      	ldr	r4, [pc, #16]	; (1f04 <uart_console_hook_install+0x14>)
    1ef4:	4620      	mov	r0, r4
    1ef6:	f7ff fdf7 	bl	1ae8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1efa:	4620      	mov	r0, r4
    1efc:	f7fe fa90 	bl	420 <__printk_hook_install>
#endif
}
    1f00:	bd10      	pop	{r4, pc}
    1f02:	bf00      	nop
    1f04:	00001ec5 	.word	0x00001ec5

00001f08 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1f08:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1f0a:	4806      	ldr	r0, [pc, #24]	; (1f24 <uart_console_init+0x1c>)
    1f0c:	4b06      	ldr	r3, [pc, #24]	; (1f28 <uart_console_init+0x20>)
    1f0e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1f10:	f003 ffba 	bl	5e88 <z_device_ready>
    1f14:	b118      	cbz	r0, 1f1e <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    1f16:	f7ff ffeb 	bl	1ef0 <uart_console_hook_install>

	return 0;
    1f1a:	2000      	movs	r0, #0
}
    1f1c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1f1e:	f06f 0012 	mvn.w	r0, #18
    1f22:	e7fb      	b.n	1f1c <uart_console_init+0x14>
    1f24:	000063d0 	.word	0x000063d0
    1f28:	200008d4 	.word	0x200008d4

00001f2c <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1f2c:	4b1f      	ldr	r3, [pc, #124]	; (1fac <get_drive+0x80>)
    1f2e:	4003      	ands	r3, r0
    1f30:	4a1f      	ldr	r2, [pc, #124]	; (1fb0 <get_drive+0x84>)
    1f32:	4293      	cmp	r3, r2
    1f34:	d032      	beq.n	1f9c <get_drive+0x70>
    1f36:	d816      	bhi.n	1f66 <get_drive+0x3a>
    1f38:	2b06      	cmp	r3, #6
    1f3a:	d02b      	beq.n	1f94 <get_drive+0x68>
    1f3c:	d906      	bls.n	1f4c <get_drive+0x20>
    1f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1f42:	d10d      	bne.n	1f60 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    1f44:	2301      	movs	r3, #1
    1f46:	700b      	strb	r3, [r1, #0]
	int err = 0;
    1f48:	2000      	movs	r0, #0
		break;
    1f4a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1f4c:	b1fb      	cbz	r3, 1f8e <get_drive+0x62>
    1f4e:	2b02      	cmp	r3, #2
    1f50:	d103      	bne.n	1f5a <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    1f52:	2304      	movs	r3, #4
    1f54:	700b      	strb	r3, [r1, #0]
	int err = 0;
    1f56:	2000      	movs	r0, #0
		break;
    1f58:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1f5a:	f06f 0015 	mvn.w	r0, #21
    1f5e:	4770      	bx	lr
    1f60:	f06f 0015 	mvn.w	r0, #21
    1f64:	4770      	bx	lr
    1f66:	4a13      	ldr	r2, [pc, #76]	; (1fb4 <get_drive+0x88>)
    1f68:	4293      	cmp	r3, r2
    1f6a:	d01b      	beq.n	1fa4 <get_drive+0x78>
    1f6c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1f70:	d103      	bne.n	1f7a <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    1f72:	2303      	movs	r3, #3
    1f74:	700b      	strb	r3, [r1, #0]
	int err = 0;
    1f76:	2000      	movs	r0, #0
		break;
    1f78:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1f7e:	d103      	bne.n	1f88 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    1f80:	2302      	movs	r3, #2
    1f82:	700b      	strb	r3, [r1, #0]
	int err = 0;
    1f84:	2000      	movs	r0, #0
		break;
    1f86:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1f88:	f06f 0015 	mvn.w	r0, #21
    1f8c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    1f8e:	2000      	movs	r0, #0
    1f90:	7008      	strb	r0, [r1, #0]
		break;
    1f92:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    1f94:	2306      	movs	r3, #6
    1f96:	700b      	strb	r3, [r1, #0]
	int err = 0;
    1f98:	2000      	movs	r0, #0
		break;
    1f9a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    1f9c:	2307      	movs	r3, #7
    1f9e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    1fa0:	2000      	movs	r0, #0
		break;
    1fa2:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    1fa4:	2305      	movs	r3, #5
    1fa6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    1fa8:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    1faa:	4770      	bx	lr
    1fac:	00f00006 	.word	0x00f00006
    1fb0:	00100006 	.word	0x00100006
    1fb4:	00400002 	.word	0x00400002

00001fb8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1fb8:	b128      	cbz	r0, 1fc6 <get_dev+0xe>
    1fba:	2801      	cmp	r0, #1
    1fbc:	d101      	bne.n	1fc2 <get_dev+0xa>
    1fbe:	4803      	ldr	r0, [pc, #12]	; (1fcc <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1fc0:	4770      	bx	lr
	const struct device *dev = NULL;
    1fc2:	2000      	movs	r0, #0
    1fc4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1fc6:	4802      	ldr	r0, [pc, #8]	; (1fd0 <get_dev+0x18>)
    1fc8:	4770      	bx	lr
    1fca:	bf00      	nop
    1fcc:	00006388 	.word	0x00006388
    1fd0:	000063a0 	.word	0x000063a0

00001fd4 <gpio_nrfx_pin_interrupt_configure>:
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	b085      	sub	sp, #20
    1fd8:	460e      	mov	r6, r1
    1fda:	4619      	mov	r1, r3
	return port->config;
    1fdc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1fde:	7b1b      	ldrb	r3, [r3, #12]
    1fe0:	f006 051f 	and.w	r5, r6, #31
    1fe4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1fe8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1fec:	d022      	beq.n	2034 <gpio_nrfx_pin_interrupt_configure+0x60>
    1fee:	4607      	mov	r7, r0
    1ff0:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1ff2:	2300      	movs	r3, #0
    1ff4:	9302      	str	r3, [sp, #8]
    1ff6:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    1ff8:	4610      	mov	r0, r2
    1ffa:	f003 fc97 	bl	592c <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1ffe:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    2002:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2004:	6899      	ldr	r1, [r3, #8]
    2006:	40f1      	lsrs	r1, r6
    2008:	f011 0f01 	tst.w	r1, #1
    200c:	d102      	bne.n	2014 <gpio_nrfx_pin_interrupt_configure+0x40>
    200e:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    2012:	d014      	beq.n	203e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2014:	2300      	movs	r3, #0
    2016:	aa02      	add	r2, sp, #8
    2018:	4619      	mov	r1, r3
    201a:	4628      	mov	r0, r5
    201c:	f001 f9f8 	bl	3410 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2020:	4b1b      	ldr	r3, [pc, #108]	; (2090 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2022:	4298      	cmp	r0, r3
    2024:	d131      	bne.n	208a <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2026:	2101      	movs	r1, #1
    2028:	4628      	mov	r0, r5
    202a:	f001 fbc9 	bl	37c0 <nrfx_gpiote_trigger_enable>
	return 0;
    202e:	2000      	movs	r0, #0
}
    2030:	b005      	add	sp, #20
    2032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2034:	4628      	mov	r0, r5
    2036:	f001 fc27 	bl	3888 <nrfx_gpiote_trigger_disable>
		return 0;
    203a:	2000      	movs	r0, #0
    203c:	e7f8      	b.n	2030 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    203e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    2042:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2044:	2a01      	cmp	r2, #1
    2046:	d014      	beq.n	2072 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    2048:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    204c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2054:	f013 0f01 	tst.w	r3, #1
    2058:	d1dc      	bne.n	2014 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    205a:	f10d 0107 	add.w	r1, sp, #7
    205e:	4628      	mov	r0, r5
    2060:	f001 fb52 	bl	3708 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2064:	4b0b      	ldr	r3, [pc, #44]	; (2094 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    2066:	4298      	cmp	r0, r3
    2068:	d005      	beq.n	2076 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    206a:	f10d 0307 	add.w	r3, sp, #7
    206e:	9303      	str	r3, [sp, #12]
    2070:	e7d0      	b.n	2014 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    2072:	4a09      	ldr	r2, [pc, #36]	; (2098 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2074:	e7ea      	b.n	204c <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    2076:	f10d 0007 	add.w	r0, sp, #7
    207a:	f001 fb99 	bl	37b0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    207e:	4b04      	ldr	r3, [pc, #16]	; (2090 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2080:	4298      	cmp	r0, r3
    2082:	d0f2      	beq.n	206a <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    2084:	f06f 000b 	mvn.w	r0, #11
    2088:	e7d2      	b.n	2030 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    208a:	f06f 0004 	mvn.w	r0, #4
    208e:	e7cf      	b.n	2030 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2090:	0bad0000 	.word	0x0bad0000
    2094:	0bad0004 	.word	0x0bad0004
    2098:	50000300 	.word	0x50000300

0000209c <pin_uninit>:
{
    209c:	b530      	push	{r4, r5, lr}
    209e:	b083      	sub	sp, #12
    20a0:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    20a2:	f10d 0107 	add.w	r1, sp, #7
    20a6:	f001 fb2f 	bl	3708 <nrfx_gpiote_channel_get>
    20aa:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    20ac:	4620      	mov	r0, r4
    20ae:	f001 fc1b 	bl	38e8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    20b2:	4b0b      	ldr	r3, [pc, #44]	; (20e0 <pin_uninit+0x44>)
    20b4:	4298      	cmp	r0, r3
    20b6:	d10f      	bne.n	20d8 <pin_uninit+0x3c>
	if (free_ch) {
    20b8:	429d      	cmp	r5, r3
    20ba:	d005      	beq.n	20c8 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    20bc:	4b08      	ldr	r3, [pc, #32]	; (20e0 <pin_uninit+0x44>)
    20be:	4298      	cmp	r0, r3
    20c0:	d107      	bne.n	20d2 <pin_uninit+0x36>
    20c2:	2000      	movs	r0, #0
}
    20c4:	b003      	add	sp, #12
    20c6:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    20c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    20cc:	f001 fb68 	bl	37a0 <nrfx_gpiote_channel_free>
    20d0:	e7f4      	b.n	20bc <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    20d2:	f06f 0004 	mvn.w	r0, #4
    20d6:	e7f5      	b.n	20c4 <pin_uninit+0x28>
		return -EIO;
    20d8:	f06f 0004 	mvn.w	r0, #4
    20dc:	e7f2      	b.n	20c4 <pin_uninit+0x28>
    20de:	bf00      	nop
    20e0:	0bad0000 	.word	0x0bad0000

000020e4 <gpio_nrfx_pin_configure>:
{
    20e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20e8:	b087      	sub	sp, #28
	return port->config;
    20ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    20ee:	f898 300c 	ldrb.w	r3, [r8, #12]
    20f2:	f001 051f 	and.w	r5, r1, #31
    20f6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    20fa:	2a00      	cmp	r2, #0
    20fc:	d044      	beq.n	2188 <gpio_nrfx_pin_configure+0xa4>
    20fe:	460c      	mov	r4, r1
    2100:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2102:	2600      	movs	r6, #0
    2104:	9603      	str	r6, [sp, #12]
    2106:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2108:	f10d 0117 	add.w	r1, sp, #23
    210c:	4620      	mov	r0, r4
    210e:	f001 fafb 	bl	3708 <nrfx_gpiote_channel_get>
    2112:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2114:	4633      	mov	r3, r6
    2116:	aa03      	add	r2, sp, #12
    2118:	4631      	mov	r1, r6
    211a:	4628      	mov	r0, r5
    211c:	f001 f978 	bl	3410 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2120:	4b30      	ldr	r3, [pc, #192]	; (21e4 <gpio_nrfx_pin_configure+0x100>)
    2122:	4298      	cmp	r0, r3
    2124:	d15b      	bne.n	21de <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    2126:	4599      	cmp	r9, r3
    2128:	d036      	beq.n	2198 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    212a:	f417 7f00 	tst.w	r7, #512	; 0x200
    212e:	d043      	beq.n	21b8 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    2130:	f10d 0103 	add.w	r1, sp, #3
    2134:	4638      	mov	r0, r7
    2136:	f7ff fef9 	bl	1f2c <get_drive>
		if (rv != 0) {
    213a:	4606      	mov	r6, r0
    213c:	bb40      	cbnz	r0, 2190 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    213e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2142:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2146:	f417 7f80 	tst.w	r7, #256	; 0x100
    214a:	bf0c      	ite	eq
    214c:	2301      	moveq	r3, #1
    214e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2150:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2154:	4638      	mov	r0, r7
    2156:	f003 fbb6 	bl	58c6 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    215a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    215e:	f417 6f00 	tst.w	r7, #2048	; 0x800
    2162:	d01e      	beq.n	21a2 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2164:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2168:	2101      	movs	r1, #1
    216a:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    216e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2172:	2200      	movs	r2, #0
    2174:	a901      	add	r1, sp, #4
    2176:	4628      	mov	r0, r5
    2178:	f001 fa00 	bl	357c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    217c:	4b19      	ldr	r3, [pc, #100]	; (21e4 <gpio_nrfx_pin_configure+0x100>)
    217e:	4298      	cmp	r0, r3
    2180:	d006      	beq.n	2190 <gpio_nrfx_pin_configure+0xac>
    2182:	f06f 0615 	mvn.w	r6, #21
    2186:	e003      	b.n	2190 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    2188:	4628      	mov	r0, r5
    218a:	f7ff ff87 	bl	209c <pin_uninit>
    218e:	4606      	mov	r6, r0
}
    2190:	4630      	mov	r0, r6
    2192:	b007      	add	sp, #28
    2194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    2198:	f89d 0017 	ldrb.w	r0, [sp, #23]
    219c:	f001 fb00 	bl	37a0 <nrfx_gpiote_channel_free>
    21a0:	e7c3      	b.n	212a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    21a2:	f417 6f80 	tst.w	r7, #1024	; 0x400
    21a6:	d0e4      	beq.n	2172 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    21a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    21ac:	2301      	movs	r3, #1
    21ae:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    21b2:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    21b6:	e7dc      	b.n	2172 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    21b8:	4638      	mov	r0, r7
    21ba:	f003 fb84 	bl	58c6 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    21be:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    21c2:	2300      	movs	r3, #0
    21c4:	461a      	mov	r2, r3
    21c6:	a902      	add	r1, sp, #8
    21c8:	4628      	mov	r0, r5
    21ca:	f001 f921 	bl	3410 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <gpio_nrfx_pin_configure+0x100>)
    21d0:	4298      	cmp	r0, r3
    21d2:	d101      	bne.n	21d8 <gpio_nrfx_pin_configure+0xf4>
    21d4:	2600      	movs	r6, #0
    21d6:	e7db      	b.n	2190 <gpio_nrfx_pin_configure+0xac>
    21d8:	f06f 0615 	mvn.w	r6, #21
    21dc:	e7d8      	b.n	2190 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    21de:	f06f 0615 	mvn.w	r6, #21
    21e2:	e7d5      	b.n	2190 <gpio_nrfx_pin_configure+0xac>
    21e4:	0bad0000 	.word	0x0bad0000

000021e8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    21e8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    21ea:	f001 facf 	bl	378c <nrfx_gpiote_is_init>
    21ee:	b108      	cbz	r0, 21f4 <gpio_nrfx_init+0xc>
		return 0;
    21f0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    21f2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    21f4:	f001 faa0 	bl	3738 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    21f8:	4b08      	ldr	r3, [pc, #32]	; (221c <gpio_nrfx_init+0x34>)
    21fa:	4298      	cmp	r0, r3
    21fc:	d10a      	bne.n	2214 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    21fe:	2100      	movs	r1, #0
    2200:	4807      	ldr	r0, [pc, #28]	; (2220 <gpio_nrfx_init+0x38>)
    2202:	f001 fa7b 	bl	36fc <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2206:	2200      	movs	r2, #0
    2208:	2105      	movs	r1, #5
    220a:	2006      	movs	r0, #6
    220c:	f7ff f910 	bl	1430 <z_arm_irq_priority_set>
	return 0;
    2210:	2000      	movs	r0, #0
    2212:	e7ee      	b.n	21f2 <gpio_nrfx_init+0xa>
		return -EIO;
    2214:	f06f 0004 	mvn.w	r0, #4
    2218:	e7eb      	b.n	21f2 <gpio_nrfx_init+0xa>
    221a:	bf00      	nop
    221c:	0bad0000 	.word	0x0bad0000
    2220:	000059bd 	.word	0x000059bd

00002224 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    2224:	b410      	push	{r4}
	return dev->config;
    2226:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    2228:	2900      	cmp	r1, #0
    222a:	d17e      	bne.n	232a <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    222c:	68da      	ldr	r2, [r3, #12]
    222e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    2232:	d017      	beq.n	2264 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
    2234:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2238:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    223a:	2a01      	cmp	r2, #1
    223c:	d065      	beq.n	230a <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
    223e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2242:	2201      	movs	r2, #1
    2244:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    2246:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    224a:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    224c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2250:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2252:	2a01      	cmp	r2, #1
    2254:	d05b      	beq.n	230e <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
    2256:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    225a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    225e:	2103      	movs	r1, #3
    2260:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2264:	691a      	ldr	r2, [r3, #16]
    2266:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    226a:	d00f      	beq.n	228c <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    226c:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    226e:	2900      	cmp	r1, #0
    2270:	d04f      	beq.n	2312 <uarte_nrfx_pins_configure+0xee>
    2272:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    2274:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2278:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    227a:	2a01      	cmp	r2, #1
    227c:	d04b      	beq.n	2316 <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
    227e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2282:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    2284:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    2288:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    228c:	695a      	ldr	r2, [r3, #20]
    228e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    2292:	d017      	beq.n	22c4 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
    2294:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2298:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    229a:	2a01      	cmp	r2, #1
    229c:	d03d      	beq.n	231a <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
    229e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    22a2:	2201      	movs	r2, #1
    22a4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    22a6:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    22aa:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    22ac:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    22b0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    22b2:	2a01      	cmp	r2, #1
    22b4:	d033      	beq.n	231e <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
    22b6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    22ba:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    22be:	2103      	movs	r1, #3
    22c0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    22c4:	699a      	ldr	r2, [r3, #24]
    22c6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    22ca:	d00e      	beq.n	22ea <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    22cc:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    22ce:	b341      	cbz	r1, 2322 <uarte_nrfx_pins_configure+0xfe>
    22d0:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    22d2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    22d6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    22d8:	2a01      	cmp	r2, #1
    22da:	d024      	beq.n	2326 <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
    22dc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    22e0:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    22e2:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    22e6:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    22ea:	681a      	ldr	r2, [r3, #0]
    22ec:	68d8      	ldr	r0, [r3, #12]
    22ee:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    22f0:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    22f4:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    22f8:	681a      	ldr	r2, [r3, #0]
    22fa:	6959      	ldr	r1, [r3, #20]
    22fc:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    22fe:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2302:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    2306:	bc10      	pop	{r4}
    2308:	4770      	bx	lr
        case 1: return NRF_P1;
    230a:	482c      	ldr	r0, [pc, #176]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    230c:	e799      	b.n	2242 <uarte_nrfx_pins_configure+0x1e>
    230e:	482b      	ldr	r0, [pc, #172]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    2310:	e7a3      	b.n	225a <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
    2312:	2000      	movs	r0, #0
    2314:	e7ae      	b.n	2274 <uarte_nrfx_pins_configure+0x50>
    2316:	4c29      	ldr	r4, [pc, #164]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    2318:	e7b3      	b.n	2282 <uarte_nrfx_pins_configure+0x5e>
    231a:	4828      	ldr	r0, [pc, #160]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    231c:	e7c1      	b.n	22a2 <uarte_nrfx_pins_configure+0x7e>
    231e:	4827      	ldr	r0, [pc, #156]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    2320:	e7cb      	b.n	22ba <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
    2322:	2000      	movs	r0, #0
    2324:	e7d5      	b.n	22d2 <uarte_nrfx_pins_configure+0xae>
    2326:	4c25      	ldr	r4, [pc, #148]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    2328:	e7da      	b.n	22e0 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    232a:	68da      	ldr	r2, [r3, #12]
    232c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    2330:	d00b      	beq.n	234a <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
    2332:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2336:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2338:	2a01      	cmp	r2, #1
    233a:	d037      	beq.n	23ac <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
    233c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2340:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    2344:	2102      	movs	r1, #2
    2346:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    234a:	691a      	ldr	r2, [r3, #16]
    234c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    2350:	d00b      	beq.n	236a <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
    2352:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2356:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2358:	2a01      	cmp	r2, #1
    235a:	d029      	beq.n	23b0 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
    235c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2360:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    2364:	2102      	movs	r1, #2
    2366:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    236a:	695a      	ldr	r2, [r3, #20]
    236c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    2370:	d00b      	beq.n	238a <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
    2372:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2376:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2378:	2a01      	cmp	r2, #1
    237a:	d01b      	beq.n	23b4 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
    237c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2380:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    2384:	2102      	movs	r1, #2
    2386:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    238a:	699a      	ldr	r2, [r3, #24]
    238c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    2390:	d0ab      	beq.n	22ea <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
    2392:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2396:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2398:	2a01      	cmp	r2, #1
    239a:	d00d      	beq.n	23b8 <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
    239c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    23a0:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    23a4:	2102      	movs	r1, #2
    23a6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
    23aa:	e79e      	b.n	22ea <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
    23ac:	4803      	ldr	r0, [pc, #12]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    23ae:	e7c7      	b.n	2340 <uarte_nrfx_pins_configure+0x11c>
    23b0:	4802      	ldr	r0, [pc, #8]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    23b2:	e7d5      	b.n	2360 <uarte_nrfx_pins_configure+0x13c>
    23b4:	4801      	ldr	r0, [pc, #4]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    23b6:	e7e3      	b.n	2380 <uarte_nrfx_pins_configure+0x15c>
    23b8:	4800      	ldr	r0, [pc, #0]	; (23bc <uarte_nrfx_pins_configure+0x198>)
    23ba:	e7f1      	b.n	23a0 <uarte_nrfx_pins_configure+0x17c>
    23bc:	50000300 	.word	0x50000300

000023c0 <baudrate_set>:
	return dev->config;
    23c0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    23c2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    23c4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    23c8:	d06f      	beq.n	24aa <baudrate_set+0xea>
    23ca:	d83a      	bhi.n	2442 <baudrate_set+0x82>
    23cc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    23d0:	d06e      	beq.n	24b0 <baudrate_set+0xf0>
    23d2:	d90a      	bls.n	23ea <baudrate_set+0x2a>
    23d4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    23d8:	d075      	beq.n	24c6 <baudrate_set+0x106>
    23da:	d924      	bls.n	2426 <baudrate_set+0x66>
    23dc:	f647 2312 	movw	r3, #31250	; 0x7a12
    23e0:	4299      	cmp	r1, r3
    23e2:	d12b      	bne.n	243c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    23e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    23e8:	e013      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    23ea:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    23ee:	d061      	beq.n	24b4 <baudrate_set+0xf4>
    23f0:	d907      	bls.n	2402 <baudrate_set+0x42>
    23f2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    23f6:	d063      	beq.n	24c0 <baudrate_set+0x100>
    23f8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    23fc:	d110      	bne.n	2420 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    23fe:	4b3c      	ldr	r3, [pc, #240]	; (24f0 <baudrate_set+0x130>)
    2400:	e007      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    2402:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2406:	d058      	beq.n	24ba <baudrate_set+0xfa>
    2408:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    240c:	d105      	bne.n	241a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    240e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2412:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2416:	2000      	movs	r0, #0
    2418:	4770      	bx	lr
	switch (baudrate) {
    241a:	f06f 0015 	mvn.w	r0, #21
    241e:	4770      	bx	lr
    2420:	f06f 0015 	mvn.w	r0, #21
    2424:	4770      	bx	lr
    2426:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    242a:	d04e      	beq.n	24ca <baudrate_set+0x10a>
    242c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2430:	d101      	bne.n	2436 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2432:	4b30      	ldr	r3, [pc, #192]	; (24f4 <baudrate_set+0x134>)
    2434:	e7ed      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    2436:	f06f 0015 	mvn.w	r0, #21
    243a:	4770      	bx	lr
    243c:	f06f 0015 	mvn.w	r0, #21
    2440:	4770      	bx	lr
    2442:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2446:	d042      	beq.n	24ce <baudrate_set+0x10e>
    2448:	d909      	bls.n	245e <baudrate_set+0x9e>
    244a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    244e:	d046      	beq.n	24de <baudrate_set+0x11e>
    2450:	d91f      	bls.n	2492 <baudrate_set+0xd2>
    2452:	4b29      	ldr	r3, [pc, #164]	; (24f8 <baudrate_set+0x138>)
    2454:	4299      	cmp	r1, r3
    2456:	d148      	bne.n	24ea <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    245c:	e7d9      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    245e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2462:	d037      	beq.n	24d4 <baudrate_set+0x114>
    2464:	d905      	bls.n	2472 <baudrate_set+0xb2>
    2466:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    246a:	d10f      	bne.n	248c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    246c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2470:	e7cf      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    2472:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2476:	4299      	cmp	r1, r3
    2478:	d02e      	beq.n	24d8 <baudrate_set+0x118>
    247a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    247e:	d102      	bne.n	2486 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2480:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2484:	e7c5      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    2486:	f06f 0015 	mvn.w	r0, #21
    248a:	4770      	bx	lr
    248c:	f06f 0015 	mvn.w	r0, #21
    2490:	4770      	bx	lr
    2492:	4b1a      	ldr	r3, [pc, #104]	; (24fc <baudrate_set+0x13c>)
    2494:	4299      	cmp	r1, r3
    2496:	d025      	beq.n	24e4 <baudrate_set+0x124>
    2498:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    249c:	d102      	bne.n	24a4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    249e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    24a2:	e7b6      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    24a4:	f06f 0015 	mvn.w	r0, #21
    24a8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    24aa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    24ae:	e7b0      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    24b0:	4b13      	ldr	r3, [pc, #76]	; (2500 <baudrate_set+0x140>)
    24b2:	e7ae      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    24b4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    24b8:	e7ab      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    24ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    24be:	e7a8      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    24c0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    24c4:	e7a5      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    24c6:	4b0f      	ldr	r3, [pc, #60]	; (2504 <baudrate_set+0x144>)
    24c8:	e7a3      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    24ca:	4b0f      	ldr	r3, [pc, #60]	; (2508 <baudrate_set+0x148>)
    24cc:	e7a1      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    24ce:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    24d2:	e79e      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    24d4:	4b0d      	ldr	r3, [pc, #52]	; (250c <baudrate_set+0x14c>)
    24d6:	e79c      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    24d8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    24dc:	e799      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    24de:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    24e2:	e796      	b.n	2412 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    24e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    24e8:	e793      	b.n	2412 <baudrate_set+0x52>
	switch (baudrate) {
    24ea:	f06f 0015 	mvn.w	r0, #21
}
    24ee:	4770      	bx	lr
    24f0:	0013b000 	.word	0x0013b000
    24f4:	004ea000 	.word	0x004ea000
    24f8:	000f4240 	.word	0x000f4240
    24fc:	0003d090 	.word	0x0003d090
    2500:	00275000 	.word	0x00275000
    2504:	0075c000 	.word	0x0075c000
    2508:	003af000 	.word	0x003af000
    250c:	013a9000 	.word	0x013a9000

00002510 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2514:	4605      	mov	r5, r0
    2516:	460f      	mov	r7, r1
	return dev->data;
    2518:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    251c:	f003 fd3e 	bl	5f9c <k_is_in_isr>
    2520:	b920      	cbnz	r0, 252c <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    2522:	4b16      	ldr	r3, [pc, #88]	; (257c <uarte_nrfx_poll_out+0x6c>)
    2524:	781b      	ldrb	r3, [r3, #0]
    2526:	b1ab      	cbz	r3, 2554 <uarte_nrfx_poll_out+0x44>
    2528:	2300      	movs	r3, #0
    252a:	e000      	b.n	252e <uarte_nrfx_poll_out+0x1e>
    252c:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    252e:	b19b      	cbz	r3, 2558 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    2530:	f04f 0320 	mov.w	r3, #32
    2534:	f3ef 8411 	mrs	r4, BASEPRI
    2538:	f383 8812 	msr	BASEPRI_MAX, r3
    253c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    2540:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    2542:	4628      	mov	r0, r5
    2544:	f003 fb04 	bl	5b50 <is_tx_ready>
    2548:	b950      	cbnz	r0, 2560 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    254a:	f384 8811 	msr	BASEPRI, r4
    254e:	f3bf 8f6f 	isb	sy
}
    2552:	e7ed      	b.n	2530 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2554:	2301      	movs	r3, #1
    2556:	e7ea      	b.n	252e <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2558:	4628      	mov	r0, r5
    255a:	f003 fb48 	bl	5bee <wait_tx_ready>
    255e:	4606      	mov	r6, r0
	}

	data->char_out = c;
    2560:	4641      	mov	r1, r8
    2562:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    2566:	2201      	movs	r2, #1
    2568:	4628      	mov	r0, r5
    256a:	f003 fb0b 	bl	5b84 <tx_start>
	__asm__ volatile(
    256e:	f386 8811 	msr	BASEPRI, r6
    2572:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    257a:	bf00      	nop
    257c:	20000e11 	.word	0x20000e11

00002580 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2580:	b538      	push	{r3, r4, r5, lr}
    2582:	4604      	mov	r4, r0
    2584:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2586:	f101 0012 	add.w	r0, r1, #18
    258a:	f001 fa01 	bl	3990 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    258e:	4b0c      	ldr	r3, [pc, #48]	; (25c0 <endtx_stoptx_ppi_init+0x40>)
    2590:	4298      	cmp	r0, r3
    2592:	d111      	bne.n	25b8 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2594:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2596:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    259a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    259c:	4a09      	ldr	r2, [pc, #36]	; (25c4 <endtx_stoptx_ppi_init+0x44>)
    259e:	33a2      	adds	r3, #162	; 0xa2
    25a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    25a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    25a8:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    25aa:	7ca9      	ldrb	r1, [r5, #18]
    25ac:	2301      	movs	r3, #1
    25ae:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    25b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    25b4:	2000      	movs	r0, #0
}
    25b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    25b8:	f06f 0004 	mvn.w	r0, #4
    25bc:	e7fb      	b.n	25b6 <endtx_stoptx_ppi_init+0x36>
    25be:	bf00      	nop
    25c0:	0bad0000 	.word	0x0bad0000
    25c4:	4001f000 	.word	0x4001f000

000025c8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    25c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    25cc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    25d0:	4b01      	ldr	r3, [pc, #4]	; (25d8 <set_comparator+0x10>)
    25d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    25d6:	4770      	bx	lr
    25d8:	40011000 	.word	0x40011000

000025dc <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    25dc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    25e0:	4b01      	ldr	r3, [pc, #4]	; (25e8 <get_comparator+0xc>)
    25e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    25e6:	4770      	bx	lr
    25e8:	40011000 	.word	0x40011000

000025ec <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    25f0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    25f2:	4a02      	ldr	r2, [pc, #8]	; (25fc <event_enable+0x10>)
    25f4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    25f8:	4770      	bx	lr
    25fa:	bf00      	nop
    25fc:	40011000 	.word	0x40011000

00002600 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2604:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2606:	4a02      	ldr	r2, [pc, #8]	; (2610 <event_disable+0x10>)
    2608:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    260c:	4770      	bx	lr
    260e:	bf00      	nop
    2610:	40011000 	.word	0x40011000

00002614 <counter>:
     return p_reg->COUNTER;
    2614:	4b01      	ldr	r3, [pc, #4]	; (261c <counter+0x8>)
    2616:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    261a:	4770      	bx	lr
    261c:	40011000 	.word	0x40011000

00002620 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    2620:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2622:	2301      	movs	r3, #1
    2624:	4083      	lsls	r3, r0
    2626:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2628:	4a10      	ldr	r2, [pc, #64]	; (266c <compare_int_lock+0x4c>)
    262a:	f3bf 8f5b 	dmb	ish
    262e:	e852 1f00 	ldrex	r1, [r2]
    2632:	ea01 0c04 	and.w	ip, r1, r4
    2636:	e842 ce00 	strex	lr, ip, [r2]
    263a:	f1be 0f00 	cmp.w	lr, #0
    263e:	d1f6      	bne.n	262e <compare_int_lock+0xe>
    2640:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2648:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    264c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2654:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2658:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    265c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2660:	420b      	tst	r3, r1
}
    2662:	bf14      	ite	ne
    2664:	2001      	movne	r0, #1
    2666:	2000      	moveq	r0, #0
    2668:	bd10      	pop	{r4, pc}
    266a:	bf00      	nop
    266c:	200008f4 	.word	0x200008f4

00002670 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2670:	b570      	push	{r4, r5, r6, lr}
    2672:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2674:	f003 fb5e 	bl	5d34 <full_int_lock>
    2678:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    267a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    267e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2680:	4a17      	ldr	r2, [pc, #92]	; (26e0 <channel_processing_check_and_clear+0x70>)
    2682:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2686:	4213      	tst	r3, r2
    2688:	d105      	bne.n	2696 <channel_processing_check_and_clear+0x26>
	bool result = false;
    268a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    268c:	4628      	mov	r0, r5
    268e:	f003 fb5a 	bl	5d46 <full_int_unlock>

	return result;
}
    2692:	4630      	mov	r0, r6
    2694:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2696:	2301      	movs	r3, #1
    2698:	40a3      	lsls	r3, r4
    269a:	43db      	mvns	r3, r3
    269c:	4a11      	ldr	r2, [pc, #68]	; (26e4 <channel_processing_check_and_clear+0x74>)
    269e:	f3bf 8f5b 	dmb	ish
    26a2:	e852 1f00 	ldrex	r1, [r2]
    26a6:	ea01 0003 	and.w	r0, r1, r3
    26aa:	e842 0600 	strex	r6, r0, [r2]
    26ae:	2e00      	cmp	r6, #0
    26b0:	d1f7      	bne.n	26a2 <channel_processing_check_and_clear+0x32>
    26b2:	f3bf 8f5b 	dmb	ish
    26b6:	b959      	cbnz	r1, 26d0 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    26b8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    26bc:	009b      	lsls	r3, r3, #2
    26be:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    26c4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    26c8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    26ca:	b113      	cbz	r3, 26d2 <channel_processing_check_and_clear+0x62>
    26cc:	2301      	movs	r3, #1
    26ce:	e000      	b.n	26d2 <channel_processing_check_and_clear+0x62>
    26d0:	2301      	movs	r3, #1
		if (result) {
    26d2:	461e      	mov	r6, r3
    26d4:	2b00      	cmp	r3, #0
    26d6:	d0d9      	beq.n	268c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    26d8:	4620      	mov	r0, r4
    26da:	f003 fb1c 	bl	5d16 <event_clear>
    26de:	e7d5      	b.n	268c <channel_processing_check_and_clear+0x1c>
    26e0:	40011000 	.word	0x40011000
    26e4:	200008f0 	.word	0x200008f0

000026e8 <compare_int_unlock>:
	if (key) {
    26e8:	b901      	cbnz	r1, 26ec <compare_int_unlock+0x4>
}
    26ea:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    26ec:	2301      	movs	r3, #1
    26ee:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26f0:	4a11      	ldr	r2, [pc, #68]	; (2738 <compare_int_unlock+0x50>)
    26f2:	f3bf 8f5b 	dmb	ish
    26f6:	e852 1f00 	ldrex	r1, [r2]
    26fa:	4319      	orrs	r1, r3
    26fc:	e842 1c00 	strex	ip, r1, [r2]
    2700:	f1bc 0f00 	cmp.w	ip, #0
    2704:	d1f7      	bne.n	26f6 <compare_int_unlock+0xe>
    2706:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    270a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    270e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2710:	4a0a      	ldr	r2, [pc, #40]	; (273c <compare_int_unlock+0x54>)
    2712:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2716:	f3bf 8f5b 	dmb	ish
    271a:	4b09      	ldr	r3, [pc, #36]	; (2740 <compare_int_unlock+0x58>)
    271c:	681b      	ldr	r3, [r3, #0]
    271e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2722:	fa23 f000 	lsr.w	r0, r3, r0
    2726:	f010 0f01 	tst.w	r0, #1
    272a:	d0de      	beq.n	26ea <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    272c:	4b05      	ldr	r3, [pc, #20]	; (2744 <compare_int_unlock+0x5c>)
    272e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2732:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2736:	e7d8      	b.n	26ea <compare_int_unlock+0x2>
    2738:	200008f4 	.word	0x200008f4
    273c:	40011000 	.word	0x40011000
    2740:	200008f0 	.word	0x200008f0
    2744:	e000e100 	.word	0xe000e100

00002748 <sys_clock_timeout_handler>:
{
    2748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    274a:	4607      	mov	r7, r0
    274c:	4614      	mov	r4, r2
    274e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2750:	4610      	mov	r0, r2
    2752:	4619      	mov	r1, r3
    2754:	f003 faeb 	bl	5d2e <absolute_time_to_cc>
    2758:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    275a:	4b15      	ldr	r3, [pc, #84]	; (27b0 <sys_clock_timeout_handler+0x68>)
    275c:	681a      	ldr	r2, [r3, #0]
    275e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    2760:	601c      	str	r4, [r3, #0]
    2762:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2764:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2768:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    276c:	d308      	bcc.n	2780 <sys_clock_timeout_handler+0x38>
	return false;
    276e:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2770:	f002 f9ca 	bl	4b08 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2774:	4638      	mov	r0, r7
    2776:	f7ff ff31 	bl	25dc <get_comparator>
    277a:	42a8      	cmp	r0, r5
    277c:	d00c      	beq.n	2798 <sys_clock_timeout_handler+0x50>
}
    277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2780:	4b0c      	ldr	r3, [pc, #48]	; (27b4 <sys_clock_timeout_handler+0x6c>)
    2782:	6819      	ldr	r1, [r3, #0]
    2784:	0a0b      	lsrs	r3, r1, #8
    2786:	060a      	lsls	r2, r1, #24
    2788:	1952      	adds	r2, r2, r5
    278a:	f143 0300 	adc.w	r3, r3, #0
    278e:	490a      	ldr	r1, [pc, #40]	; (27b8 <sys_clock_timeout_handler+0x70>)
    2790:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    2794:	2401      	movs	r4, #1
    2796:	e7eb      	b.n	2770 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    2798:	b11c      	cbz	r4, 27a2 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    279a:	4638      	mov	r0, r7
    279c:	f7ff ff26 	bl	25ec <event_enable>
}
    27a0:	e7ed      	b.n	277e <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    27a2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    27a6:	4638      	mov	r0, r7
    27a8:	f7ff ff0e 	bl	25c8 <set_comparator>
    27ac:	e7f5      	b.n	279a <sys_clock_timeout_handler+0x52>
    27ae:	bf00      	nop
    27b0:	200001b8 	.word	0x200001b8
    27b4:	200008f8 	.word	0x200008f8
    27b8:	200001a0 	.word	0x200001a0

000027bc <z_nrf_rtc_timer_read>:
{
    27bc:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    27be:	4b0d      	ldr	r3, [pc, #52]	; (27f4 <z_nrf_rtc_timer_read+0x38>)
    27c0:	681b      	ldr	r3, [r3, #0]
    27c2:	0a1d      	lsrs	r5, r3, #8
    27c4:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    27c6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    27ca:	f7ff ff23 	bl	2614 <counter>
    27ce:	4603      	mov	r3, r0
	val += cntr;
    27d0:	1820      	adds	r0, r4, r0
    27d2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    27d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    27da:	d20a      	bcs.n	27f2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    27dc:	4b06      	ldr	r3, [pc, #24]	; (27f8 <z_nrf_rtc_timer_read+0x3c>)
    27de:	e9d3 2300 	ldrd	r2, r3, [r3]
    27e2:	4299      	cmp	r1, r3
    27e4:	bf08      	it	eq
    27e6:	4290      	cmpeq	r0, r2
    27e8:	d203      	bcs.n	27f2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    27ea:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    27ee:	f141 0100 	adc.w	r1, r1, #0
}
    27f2:	bd38      	pop	{r3, r4, r5, pc}
    27f4:	200008f8 	.word	0x200008f8
    27f8:	200001a0 	.word	0x200001a0

000027fc <compare_set_nolocks>:
{
    27fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2800:	4606      	mov	r6, r0
    2802:	4614      	mov	r4, r2
    2804:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2806:	4610      	mov	r0, r2
    2808:	4619      	mov	r1, r3
    280a:	f003 fa90 	bl	5d2e <absolute_time_to_cc>
    280e:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2810:	f7ff ffd4 	bl	27bc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2814:	42a9      	cmp	r1, r5
    2816:	bf08      	it	eq
    2818:	42a0      	cmpeq	r0, r4
    281a:	d21e      	bcs.n	285a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    281c:	ebb4 0800 	subs.w	r8, r4, r0
    2820:	eb65 0901 	sbc.w	r9, r5, r1
    2824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2828:	2300      	movs	r3, #0
    282a:	454b      	cmp	r3, r9
    282c:	bf08      	it	eq
    282e:	4542      	cmpeq	r2, r8
    2830:	d32e      	bcc.n	2890 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    2832:	4b19      	ldr	r3, [pc, #100]	; (2898 <compare_set_nolocks+0x9c>)
    2834:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2838:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    283c:	42ab      	cmp	r3, r5
    283e:	bf08      	it	eq
    2840:	42a2      	cmpeq	r2, r4
    2842:	d018      	beq.n	2876 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2844:	4639      	mov	r1, r7
    2846:	4630      	mov	r0, r6
    2848:	f003 fa82 	bl	5d50 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    284c:	4639      	mov	r1, r7
    284e:	f003 fa5e 	bl	5d0e <counter_sub>
    2852:	1824      	adds	r4, r4, r0
    2854:	f145 0500 	adc.w	r5, r5, #0
    2858:	e00d      	b.n	2876 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    285a:	2301      	movs	r3, #1
    285c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    285e:	4a0f      	ldr	r2, [pc, #60]	; (289c <compare_set_nolocks+0xa0>)
    2860:	f3bf 8f5b 	dmb	ish
    2864:	e852 1f00 	ldrex	r1, [r2]
    2868:	4319      	orrs	r1, r3
    286a:	e842 1000 	strex	r0, r1, [r2]
    286e:	2800      	cmp	r0, #0
    2870:	d1f8      	bne.n	2864 <compare_set_nolocks+0x68>
    2872:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2876:	4b08      	ldr	r3, [pc, #32]	; (2898 <compare_set_nolocks+0x9c>)
    2878:	0132      	lsls	r2, r6, #4
    287a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    287e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2882:	9908      	ldr	r1, [sp, #32]
    2884:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2886:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2888:	6073      	str	r3, [r6, #4]
	return ret;
    288a:	2000      	movs	r0, #0
}
    288c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    2890:	f06f 0015 	mvn.w	r0, #21
    2894:	e7fa      	b.n	288c <compare_set_nolocks+0x90>
    2896:	bf00      	nop
    2898:	200001a8 	.word	0x200001a8
    289c:	200008f0 	.word	0x200008f0

000028a0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    28a0:	b530      	push	{r4, r5, lr}
    28a2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    28a4:	2300      	movs	r3, #0
    28a6:	4a1e      	ldr	r2, [pc, #120]	; (2920 <sys_clock_driver_init+0x80>)
    28a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    28ac:	2b00      	cmp	r3, #0
    28ae:	dd25      	ble.n	28fc <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    28b0:	4c1b      	ldr	r4, [pc, #108]	; (2920 <sys_clock_driver_init+0x80>)
    28b2:	2502      	movs	r5, #2
    28b4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28b8:	4b1a      	ldr	r3, [pc, #104]	; (2924 <sys_clock_driver_init+0x84>)
    28ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    28be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    28c2:	2200      	movs	r2, #0
    28c4:	2101      	movs	r1, #1
    28c6:	2011      	movs	r0, #17
    28c8:	f7fe fdb2 	bl	1430 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    28cc:	2011      	movs	r0, #17
    28ce:	f7fe fd91 	bl	13f4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    28d2:	2301      	movs	r3, #1
    28d4:	4a14      	ldr	r2, [pc, #80]	; (2928 <sys_clock_driver_init+0x88>)
    28d6:	6013      	str	r3, [r2, #0]
    28d8:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    28da:	4a14      	ldr	r2, [pc, #80]	; (292c <sys_clock_driver_init+0x8c>)
    28dc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    28de:	2400      	movs	r4, #0
    28e0:	9401      	str	r4, [sp, #4]
    28e2:	4b13      	ldr	r3, [pc, #76]	; (2930 <sys_clock_driver_init+0x90>)
    28e4:	9300      	str	r3, [sp, #0]
    28e6:	4a13      	ldr	r2, [pc, #76]	; (2934 <sys_clock_driver_init+0x94>)
    28e8:	2300      	movs	r3, #0
    28ea:	4620      	mov	r0, r4
    28ec:	f003 fa6b 	bl	5dc6 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    28f0:	4628      	mov	r0, r5
    28f2:	f7ff fabd 	bl	1e70 <z_nrf_clock_control_lf_on>

	return 0;
}
    28f6:	4620      	mov	r0, r4
    28f8:	b003      	add	sp, #12
    28fa:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    28fc:	4a0e      	ldr	r2, [pc, #56]	; (2938 <sys_clock_driver_init+0x98>)
    28fe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2906:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    290a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    290e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2912:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2914:	4902      	ldr	r1, [pc, #8]	; (2920 <sys_clock_driver_init+0x80>)
    2916:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    291a:	3301      	adds	r3, #1
    291c:	e7c6      	b.n	28ac <sys_clock_driver_init+0xc>
    291e:	bf00      	nop
    2920:	40011000 	.word	0x40011000
    2924:	e000e100 	.word	0xe000e100
    2928:	40011008 	.word	0x40011008
    292c:	200008f4 	.word	0x200008f4
    2930:	00002749 	.word	0x00002749
    2934:	007fffff 	.word	0x007fffff
    2938:	200001a8 	.word	0x200001a8

0000293c <process_channel>:
{
    293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2940:	b082      	sub	sp, #8
    2942:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2944:	f7ff fe94 	bl	2670 <channel_processing_check_and_clear>
    2948:	b910      	cbnz	r0, 2950 <process_channel+0x14>
}
    294a:	b002      	add	sp, #8
    294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2950:	f7ff ff34 	bl	27bc <z_nrf_rtc_timer_read>
    2954:	4606      	mov	r6, r0
    2956:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    2958:	f003 f9ec 	bl	5d34 <full_int_lock>
    295c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    295e:	4b13      	ldr	r3, [pc, #76]	; (29ac <process_channel+0x70>)
    2960:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2964:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2968:	454f      	cmp	r7, r9
    296a:	bf08      	it	eq
    296c:	4546      	cmpeq	r6, r8
    296e:	d20b      	bcs.n	2988 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2970:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2972:	4650      	mov	r0, sl
    2974:	f003 f9e7 	bl	5d46 <full_int_unlock>
		if (handler) {
    2978:	2e00      	cmp	r6, #0
    297a:	d0e6      	beq.n	294a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    297c:	9500      	str	r5, [sp, #0]
    297e:	4642      	mov	r2, r8
    2980:	464b      	mov	r3, r9
    2982:	4620      	mov	r0, r4
    2984:	47b0      	blx	r6
}
    2986:	e7e0      	b.n	294a <process_channel+0xe>
			handler = cc_data[chan].callback;
    2988:	4a08      	ldr	r2, [pc, #32]	; (29ac <process_channel+0x70>)
    298a:	0123      	lsls	r3, r4, #4
    298c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2990:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    2992:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    2994:	2000      	movs	r0, #0
    2996:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    299c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    29a4:	4620      	mov	r0, r4
    29a6:	f7ff fe2b 	bl	2600 <event_disable>
    29aa:	e7e2      	b.n	2972 <process_channel+0x36>
    29ac:	200001a8 	.word	0x200001a8

000029b0 <rtc_nrf_isr>:
{
    29b0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    29b2:	4b0d      	ldr	r3, [pc, #52]	; (29e8 <rtc_nrf_isr+0x38>)
    29b4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    29b8:	f013 0f02 	tst.w	r3, #2
    29bc:	d00a      	beq.n	29d4 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29be:	4b0b      	ldr	r3, [pc, #44]	; (29ec <rtc_nrf_isr+0x3c>)
    29c0:	681b      	ldr	r3, [r3, #0]
    29c2:	b13b      	cbz	r3, 29d4 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29c4:	4b09      	ldr	r3, [pc, #36]	; (29ec <rtc_nrf_isr+0x3c>)
    29c6:	2200      	movs	r2, #0
    29c8:	601a      	str	r2, [r3, #0]
    29ca:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    29cc:	4a08      	ldr	r2, [pc, #32]	; (29f0 <rtc_nrf_isr+0x40>)
    29ce:	6813      	ldr	r3, [r2, #0]
    29d0:	3301      	adds	r3, #1
    29d2:	6013      	str	r3, [r2, #0]
{
    29d4:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    29d6:	2c00      	cmp	r4, #0
    29d8:	dd00      	ble.n	29dc <rtc_nrf_isr+0x2c>
}
    29da:	bd10      	pop	{r4, pc}
		process_channel(chan);
    29dc:	4620      	mov	r0, r4
    29de:	f7ff ffad 	bl	293c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    29e2:	3401      	adds	r4, #1
    29e4:	e7f7      	b.n	29d6 <rtc_nrf_isr+0x26>
    29e6:	bf00      	nop
    29e8:	40011000 	.word	0x40011000
    29ec:	40011104 	.word	0x40011104
    29f0:	200008f8 	.word	0x200008f8

000029f4 <sys_clock_set_timeout>:
{
    29f4:	b510      	push	{r4, lr}
    29f6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    29f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    29fc:	d007      	beq.n	2a0e <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    29fe:	1e44      	subs	r4, r0, #1
    2a00:	2c00      	cmp	r4, #0
    2a02:	dd07      	ble.n	2a14 <sys_clock_set_timeout+0x20>
    2a04:	4b11      	ldr	r3, [pc, #68]	; (2a4c <sys_clock_set_timeout+0x58>)
    2a06:	429c      	cmp	r4, r3
    2a08:	dd05      	ble.n	2a16 <sys_clock_set_timeout+0x22>
    2a0a:	4c11      	ldr	r4, [pc, #68]	; (2a50 <sys_clock_set_timeout+0x5c>)
    2a0c:	e003      	b.n	2a16 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2a0e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    2a12:	e7f4      	b.n	29fe <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2a14:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2a16:	f7ff fed1 	bl	27bc <z_nrf_rtc_timer_read>
    2a1a:	4b0e      	ldr	r3, [pc, #56]	; (2a54 <sys_clock_set_timeout+0x60>)
    2a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a20:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2a22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2a26:	d300      	bcc.n	2a2a <sys_clock_set_timeout+0x36>
		ticks = 0;
    2a28:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2a2a:	4404      	add	r4, r0
    2a2c:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    2a2e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    2a32:	d300      	bcc.n	2a36 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2a34:	4c06      	ldr	r4, [pc, #24]	; (2a50 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2a36:	2000      	movs	r0, #0
    2a38:	9001      	str	r0, [sp, #4]
    2a3a:	4907      	ldr	r1, [pc, #28]	; (2a58 <sys_clock_set_timeout+0x64>)
    2a3c:	9100      	str	r1, [sp, #0]
    2a3e:	1912      	adds	r2, r2, r4
    2a40:	f143 0300 	adc.w	r3, r3, #0
    2a44:	f003 f9bf 	bl	5dc6 <compare_set>
}
    2a48:	b002      	add	sp, #8
    2a4a:	bd10      	pop	{r4, pc}
    2a4c:	007ffffe 	.word	0x007ffffe
    2a50:	007fffff 	.word	0x007fffff
    2a54:	200001b8 	.word	0x200001b8
    2a58:	00002749 	.word	0x00002749

00002a5c <sys_clock_elapsed>:
{
    2a5c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2a5e:	f7ff fead 	bl	27bc <z_nrf_rtc_timer_read>
    2a62:	4b02      	ldr	r3, [pc, #8]	; (2a6c <sys_clock_elapsed+0x10>)
    2a64:	681b      	ldr	r3, [r3, #0]
}
    2a66:	1ac0      	subs	r0, r0, r3
    2a68:	bd08      	pop	{r3, pc}
    2a6a:	bf00      	nop
    2a6c:	200001b8 	.word	0x200001b8

00002a70 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2a70:	4b03      	ldr	r3, [pc, #12]	; (2a80 <nrf52_errata_36+0x10>)
    2a72:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    2a74:	2b08      	cmp	r3, #8
    2a76:	d001      	beq.n	2a7c <nrf52_errata_36+0xc>
        return false;
    2a78:	2000      	movs	r0, #0
    2a7a:	4770      	bx	lr
                        return true;
    2a7c:	2001      	movs	r0, #1
}
    2a7e:	4770      	bx	lr
    2a80:	10000130 	.word	0x10000130

00002a84 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2a84:	4b03      	ldr	r3, [pc, #12]	; (2a94 <nrf52_errata_66+0x10>)
    2a86:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    2a88:	2b08      	cmp	r3, #8
    2a8a:	d001      	beq.n	2a90 <nrf52_errata_66+0xc>
        return false;
    2a8c:	2000      	movs	r0, #0
    2a8e:	4770      	bx	lr
                        return true;
    2a90:	2001      	movs	r0, #1
}
    2a92:	4770      	bx	lr
    2a94:	10000130 	.word	0x10000130

00002a98 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2a98:	4b08      	ldr	r3, [pc, #32]	; (2abc <nrf52_errata_98+0x24>)
    2a9a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2a9c:	3304      	adds	r3, #4
    2a9e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    2aa0:	2a08      	cmp	r2, #8
    2aa2:	d001      	beq.n	2aa8 <nrf52_errata_98+0x10>
        return false;
    2aa4:	2000      	movs	r0, #0
    2aa6:	4770      	bx	lr
                switch(var2)
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d804      	bhi.n	2ab6 <nrf52_errata_98+0x1e>
    2aac:	e8df f003 	tbb	[pc, r3]
    2ab0:	01          	.byte	0x01
    2ab1:	00          	.byte	0x00
            if (var1 == 0x08)
    2ab2:	2001      	movs	r0, #1
    2ab4:	4770      	bx	lr
                        return false;
    2ab6:	2000      	movs	r0, #0
}
    2ab8:	4770      	bx	lr
    2aba:	bf00      	nop
    2abc:	10000130 	.word	0x10000130

00002ac0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2ac0:	4b08      	ldr	r3, [pc, #32]	; (2ae4 <nrf52_errata_103+0x24>)
    2ac2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2ac4:	3304      	adds	r3, #4
    2ac6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    2ac8:	2a08      	cmp	r2, #8
    2aca:	d001      	beq.n	2ad0 <nrf52_errata_103+0x10>
        return false;
    2acc:	2000      	movs	r0, #0
    2ace:	4770      	bx	lr
                switch(var2)
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d804      	bhi.n	2ade <nrf52_errata_103+0x1e>
    2ad4:	e8df f003 	tbb	[pc, r3]
    2ad8:	01          	.byte	0x01
    2ad9:	00          	.byte	0x00
            if (var1 == 0x08)
    2ada:	2001      	movs	r0, #1
    2adc:	4770      	bx	lr
                        return false;
    2ade:	2000      	movs	r0, #0
}
    2ae0:	4770      	bx	lr
    2ae2:	bf00      	nop
    2ae4:	10000130 	.word	0x10000130

00002ae8 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2ae8:	4b08      	ldr	r3, [pc, #32]	; (2b0c <nrf52_errata_115+0x24>)
    2aea:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2aec:	3304      	adds	r3, #4
    2aee:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    2af0:	2a08      	cmp	r2, #8
    2af2:	d001      	beq.n	2af8 <nrf52_errata_115+0x10>
        return false;
    2af4:	2000      	movs	r0, #0
    2af6:	4770      	bx	lr
                switch(var2)
    2af8:	2b00      	cmp	r3, #0
    2afa:	d804      	bhi.n	2b06 <nrf52_errata_115+0x1e>
    2afc:	e8df f003 	tbb	[pc, r3]
    2b00:	01          	.byte	0x01
    2b01:	00          	.byte	0x00
            if (var1 == 0x08)
    2b02:	2001      	movs	r0, #1
    2b04:	4770      	bx	lr
                        return false;
    2b06:	2000      	movs	r0, #0
}
    2b08:	4770      	bx	lr
    2b0a:	bf00      	nop
    2b0c:	10000130 	.word	0x10000130

00002b10 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2b10:	4b08      	ldr	r3, [pc, #32]	; (2b34 <nrf52_errata_120+0x24>)
    2b12:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2b14:	3304      	adds	r3, #4
    2b16:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    2b18:	2a08      	cmp	r2, #8
    2b1a:	d001      	beq.n	2b20 <nrf52_errata_120+0x10>
        return false;
    2b1c:	2000      	movs	r0, #0
    2b1e:	4770      	bx	lr
                switch(var2)
    2b20:	2b00      	cmp	r3, #0
    2b22:	d804      	bhi.n	2b2e <nrf52_errata_120+0x1e>
    2b24:	e8df f003 	tbb	[pc, r3]
    2b28:	01          	.byte	0x01
    2b29:	00          	.byte	0x00
            if (var1 == 0x08)
    2b2a:	2001      	movs	r0, #1
    2b2c:	4770      	bx	lr
                        return false;
    2b2e:	2000      	movs	r0, #0
}
    2b30:	4770      	bx	lr
    2b32:	bf00      	nop
    2b34:	10000130 	.word	0x10000130

00002b38 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2b38:	4b03      	ldr	r3, [pc, #12]	; (2b48 <nrf52_errata_136+0x10>)
    2b3a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    2b3c:	2b08      	cmp	r3, #8
    2b3e:	d001      	beq.n	2b44 <nrf52_errata_136+0xc>
        return false;
    2b40:	2000      	movs	r0, #0
    2b42:	4770      	bx	lr
                        return true;
    2b44:	2001      	movs	r0, #1
}
    2b46:	4770      	bx	lr
    2b48:	10000130 	.word	0x10000130

00002b4c <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2b4c:	4b06      	ldr	r3, [pc, #24]	; (2b68 <nrf52_configuration_249+0x1c>)
    2b4e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2b50:	4a06      	ldr	r2, [pc, #24]	; (2b6c <nrf52_configuration_249+0x20>)
    2b52:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2b54:	2b08      	cmp	r3, #8
    2b56:	d001      	beq.n	2b5c <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    2b58:	2000      	movs	r0, #0
    2b5a:	4770      	bx	lr
                switch(var2)
    2b5c:	2a04      	cmp	r2, #4
    2b5e:	d801      	bhi.n	2b64 <nrf52_configuration_249+0x18>
    2b60:	2000      	movs	r0, #0
    2b62:	4770      	bx	lr
                        return true;
    2b64:	2001      	movs	r0, #1
    #endif
}
    2b66:	4770      	bx	lr
    2b68:	10000130 	.word	0x10000130
    2b6c:	10000134 	.word	0x10000134

00002b70 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2b70:	4b02      	ldr	r3, [pc, #8]	; (2b7c <nvmc_wait+0xc>)
    2b72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2b76:	2b00      	cmp	r3, #0
    2b78:	d0fa      	beq.n	2b70 <nvmc_wait>
}
    2b7a:	4770      	bx	lr
    2b7c:	4001e000 	.word	0x4001e000

00002b80 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2b80:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2b82:	4b03      	ldr	r3, [pc, #12]	; (2b90 <nvmc_config+0x10>)
    2b84:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    2b88:	f7ff fff2 	bl	2b70 <nvmc_wait>
}
    2b8c:	bd08      	pop	{r3, pc}
    2b8e:	bf00      	nop
    2b90:	4001e000 	.word	0x4001e000

00002b94 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2b94:	4b01      	ldr	r3, [pc, #4]	; (2b9c <SystemCoreClockUpdate+0x8>)
    2b96:	4a02      	ldr	r2, [pc, #8]	; (2ba0 <SystemCoreClockUpdate+0xc>)
    2b98:	601a      	str	r2, [r3, #0]
}
    2b9a:	4770      	bx	lr
    2b9c:	20000050 	.word	0x20000050
    2ba0:	03d09000 	.word	0x03d09000

00002ba4 <SystemInit>:

void SystemInit(void)
{
    2ba4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2ba6:	f7ff ff63 	bl	2a70 <nrf52_errata_36>
    2baa:	b140      	cbz	r0, 2bbe <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bb0:	2200      	movs	r2, #0
    2bb2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2bb6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2bba:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2bbe:	f7ff ff61 	bl	2a84 <nrf52_errata_66>
    2bc2:	2800      	cmp	r0, #0
    2bc4:	d046      	beq.n	2c54 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2bca:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2bce:	4b56      	ldr	r3, [pc, #344]	; (2d28 <SystemInit+0x184>)
    2bd0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2bd4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2bd8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2bdc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2be0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2be4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2be8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2bec:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2bf0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2bf4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2bf8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2bfc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2c00:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2c04:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2c08:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2c0c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2c10:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2c14:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2c18:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2c1c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2c20:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2c24:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2c28:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2c2c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2c30:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2c34:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2c38:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2c3c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2c40:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2c44:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2c48:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2c4c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2c50:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2c54:	f7ff ff20 	bl	2a98 <nrf52_errata_98>
    2c58:	b110      	cbz	r0, 2c60 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    2c5a:	4b34      	ldr	r3, [pc, #208]	; (2d2c <SystemInit+0x188>)
    2c5c:	4a34      	ldr	r2, [pc, #208]	; (2d30 <SystemInit+0x18c>)
    2c5e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2c60:	f7ff ff2e 	bl	2ac0 <nrf52_errata_103>
    2c64:	b118      	cbz	r0, 2c6e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2c66:	4b33      	ldr	r3, [pc, #204]	; (2d34 <SystemInit+0x190>)
    2c68:	22fb      	movs	r2, #251	; 0xfb
    2c6a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2c6e:	f7ff ff3b 	bl	2ae8 <nrf52_errata_115>
    2c72:	b148      	cbz	r0, 2c88 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    2c74:	4930      	ldr	r1, [pc, #192]	; (2d38 <SystemInit+0x194>)
    2c76:	680b      	ldr	r3, [r1, #0]
    2c78:	f023 030f 	bic.w	r3, r3, #15
    2c7c:	4a2f      	ldr	r2, [pc, #188]	; (2d3c <SystemInit+0x198>)
    2c7e:	6812      	ldr	r2, [r2, #0]
    2c80:	f002 020f 	and.w	r2, r2, #15
    2c84:	4313      	orrs	r3, r2
    2c86:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2c88:	f7ff ff42 	bl	2b10 <nrf52_errata_120>
    2c8c:	b118      	cbz	r0, 2c96 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    2c8e:	4b2c      	ldr	r3, [pc, #176]	; (2d40 <SystemInit+0x19c>)
    2c90:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c94:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2c96:	f7ff ff4f 	bl	2b38 <nrf52_errata_136>
    2c9a:	b160      	cbz	r0, 2cb6 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ca0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2ca4:	f013 0f01 	tst.w	r3, #1
    2ca8:	d005      	beq.n	2cb6 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cae:	f06f 0201 	mvn.w	r2, #1
    2cb2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2cb6:	f7ff ff49 	bl	2b4c <nrf52_configuration_249>
    2cba:	b138      	cbz	r0, 2ccc <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2cbc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2cc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cc8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2ccc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2cd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	db08      	blt.n	2cea <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2cd8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2cdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	db02      	blt.n	2cea <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    2ce4:	f7ff ff56 	bl	2b94 <SystemCoreClockUpdate>
}
    2ce8:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    2cea:	2001      	movs	r0, #1
    2cec:	f7ff ff48 	bl	2b80 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2cf0:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    2cf4:	2512      	movs	r5, #18
    2cf6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    2cfa:	f7ff ff39 	bl	2b70 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2cfe:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    2d02:	f7ff ff35 	bl	2b70 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    2d06:	2000      	movs	r0, #0
    2d08:	f7ff ff3a 	bl	2b80 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    2d0c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2d10:	490c      	ldr	r1, [pc, #48]	; (2d44 <SystemInit+0x1a0>)
    2d12:	68ca      	ldr	r2, [r1, #12]
    2d14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2d18:	4b0b      	ldr	r3, [pc, #44]	; (2d48 <SystemInit+0x1a4>)
    2d1a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2d1c:	60cb      	str	r3, [r1, #12]
    2d1e:	f3bf 8f4f 	dsb	sy
    __NOP();
    2d22:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2d24:	e7fd      	b.n	2d22 <SystemInit+0x17e>
    2d26:	bf00      	nop
    2d28:	4000c000 	.word	0x4000c000
    2d2c:	4000568c 	.word	0x4000568c
    2d30:	00038148 	.word	0x00038148
    2d34:	4000f000 	.word	0x4000f000
    2d38:	40000ee4 	.word	0x40000ee4
    2d3c:	10000258 	.word	0x10000258
    2d40:	40029640 	.word	0x40029640
    2d44:	e000ed00 	.word	0xe000ed00
    2d48:	05fa0004 	.word	0x05fa0004

00002d4c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2d4c:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2d4e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2d50:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    2d54:	f1d3 031f 	rsbs	r3, r3, #31
    2d58:	d415      	bmi.n	2d86 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2d5a:	2201      	movs	r2, #1
    2d5c:	409a      	lsls	r2, r3
    2d5e:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2d62:	f3bf 8f5b 	dmb	ish
    2d66:	e850 5f00 	ldrex	r5, [r0]
    2d6a:	42a5      	cmp	r5, r4
    2d6c:	d104      	bne.n	2d78 <nrfx_flag32_alloc+0x2c>
    2d6e:	e840 2c00 	strex	ip, r2, [r0]
    2d72:	f1bc 0f00 	cmp.w	ip, #0
    2d76:	d1f6      	bne.n	2d66 <nrfx_flag32_alloc+0x1a>
    2d78:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2d7c:	d1e7      	bne.n	2d4e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2d7e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    2d80:	4802      	ldr	r0, [pc, #8]	; (2d8c <nrfx_flag32_alloc+0x40>)
}
    2d82:	bc30      	pop	{r4, r5}
    2d84:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    2d86:	4802      	ldr	r0, [pc, #8]	; (2d90 <nrfx_flag32_alloc+0x44>)
    2d88:	e7fb      	b.n	2d82 <nrfx_flag32_alloc+0x36>
    2d8a:	bf00      	nop
    2d8c:	0bad0000 	.word	0x0bad0000
    2d90:	0bad0002 	.word	0x0bad0002

00002d94 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2d94:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2d96:	6803      	ldr	r3, [r0, #0]
    2d98:	460c      	mov	r4, r1
    2d9a:	fa23 f101 	lsr.w	r1, r3, r1
    2d9e:	f011 0f01 	tst.w	r1, #1
    2da2:	d114      	bne.n	2dce <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2da4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2da6:	2301      	movs	r3, #1
    2da8:	40a3      	lsls	r3, r4
    2daa:	4313      	orrs	r3, r2
    2dac:	f3bf 8f5b 	dmb	ish
    2db0:	e850 1f00 	ldrex	r1, [r0]
    2db4:	4291      	cmp	r1, r2
    2db6:	d104      	bne.n	2dc2 <nrfx_flag32_free+0x2e>
    2db8:	e840 3c00 	strex	ip, r3, [r0]
    2dbc:	f1bc 0f00 	cmp.w	ip, #0
    2dc0:	d1f6      	bne.n	2db0 <nrfx_flag32_free+0x1c>
    2dc2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2dc6:	d1ed      	bne.n	2da4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    2dc8:	4802      	ldr	r0, [pc, #8]	; (2dd4 <nrfx_flag32_free+0x40>)
}
    2dca:	bc10      	pop	{r4}
    2dcc:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    2dce:	4802      	ldr	r0, [pc, #8]	; (2dd8 <nrfx_flag32_free+0x44>)
    2dd0:	e7fb      	b.n	2dca <nrfx_flag32_free+0x36>
    2dd2:	bf00      	nop
    2dd4:	0bad0000 	.word	0x0bad0000
    2dd8:	0bad0004 	.word	0x0bad0004

00002ddc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2ddc:	4b06      	ldr	r3, [pc, #24]	; (2df8 <nrfx_clock_init+0x1c>)
    2dde:	791b      	ldrb	r3, [r3, #4]
    2de0:	b93b      	cbnz	r3, 2df2 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2de2:	4b05      	ldr	r3, [pc, #20]	; (2df8 <nrfx_clock_init+0x1c>)
    2de4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2de6:	2201      	movs	r2, #1
    2de8:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    2dea:	2200      	movs	r2, #0
    2dec:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2dee:	4803      	ldr	r0, [pc, #12]	; (2dfc <nrfx_clock_init+0x20>)
    2df0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2df2:	4803      	ldr	r0, [pc, #12]	; (2e00 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2df4:	4770      	bx	lr
    2df6:	bf00      	nop
    2df8:	200008fc 	.word	0x200008fc
    2dfc:	0bad0000 	.word	0x0bad0000
    2e00:	0bad000c 	.word	0x0bad000c

00002e04 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2e04:	b110      	cbz	r0, 2e0c <nrfx_clock_start+0x8>
    2e06:	2801      	cmp	r0, #1
    2e08:	d025      	beq.n	2e56 <nrfx_clock_start+0x52>
    2e0a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e10:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2e14:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e18:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2e1c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2e20:	d111      	bne.n	2e46 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e26:	2200      	movs	r2, #0
    2e28:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e2c:	4b0f      	ldr	r3, [pc, #60]	; (2e6c <nrfx_clock_start+0x68>)
    2e2e:	2200      	movs	r2, #0
    2e30:	601a      	str	r2, [r3, #0]
    2e32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e38:	2202      	movs	r2, #2
    2e3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e3e:	3308      	adds	r3, #8
    2e40:	2201      	movs	r2, #1
    2e42:	601a      	str	r2, [r3, #0]
}
    2e44:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2e46:	2b01      	cmp	r3, #1
    2e48:	d1eb      	bne.n	2e22 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e4e:	2201      	movs	r2, #1
    2e50:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    2e54:	e7ea      	b.n	2e2c <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e56:	4b06      	ldr	r3, [pc, #24]	; (2e70 <nrfx_clock_start+0x6c>)
    2e58:	2200      	movs	r2, #0
    2e5a:	601a      	str	r2, [r3, #0]
    2e5c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e62:	2201      	movs	r2, #1
    2e64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e68:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    2e6a:	4770      	bx	lr
    2e6c:	40000104 	.word	0x40000104
    2e70:	40000100 	.word	0x40000100

00002e74 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2e74:	b530      	push	{r4, r5, lr}
    2e76:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2e78:	4604      	mov	r4, r0
    2e7a:	b118      	cbz	r0, 2e84 <nrfx_clock_stop+0x10>
    2e7c:	2801      	cmp	r0, #1
    2e7e:	d013      	beq.n	2ea8 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2e80:	b003      	add	sp, #12
    2e82:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    2e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e88:	2202      	movs	r2, #2
    2e8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e8e:	f503 7382 	add.w	r3, r3, #260	; 0x104
    2e92:	2200      	movs	r2, #0
    2e94:	601a      	str	r2, [r3, #0]
    2e96:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e98:	4b39      	ldr	r3, [pc, #228]	; (2f80 <nrfx_clock_stop+0x10c>)
    2e9a:	2201      	movs	r2, #1
    2e9c:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2e9e:	2c01      	cmp	r4, #1
    2ea0:	d00f      	beq.n	2ec2 <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2ea2:	f242 7510 	movw	r5, #10000	; 0x2710
    2ea6:	e052      	b.n	2f4e <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    2ea8:	2301      	movs	r3, #1
    2eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2eae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2eb2:	f502 7280 	add.w	r2, r2, #256	; 0x100
    2eb6:	2100      	movs	r1, #0
    2eb8:	6011      	str	r1, [r2, #0]
    2eba:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ebc:	4a31      	ldr	r2, [pc, #196]	; (2f84 <nrfx_clock_stop+0x110>)
    2ebe:	6013      	str	r3, [r2, #0]
}
    2ec0:	e7ed      	b.n	2e9e <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2ec2:	2301      	movs	r3, #1
    2ec4:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    2ec8:	f242 7510 	movw	r5, #10000	; 0x2710
    2ecc:	e018      	b.n	2f00 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ed2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2ed6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2eda:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2ede:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    2ee2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2ee6:	d120      	bne.n	2f2a <nrfx_clock_stop+0xb6>
    return false;
    2ee8:	2300      	movs	r3, #0
    2eea:	2b00      	cmp	r3, #0
    2eec:	d042      	beq.n	2f74 <nrfx_clock_stop+0x100>
    2eee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2ef2:	2b01      	cmp	r3, #1
    2ef4:	d13e      	bne.n	2f74 <nrfx_clock_stop+0x100>
    2ef6:	2001      	movs	r0, #1
    2ef8:	f002 ff93 	bl	5e22 <nrfx_busy_wait>
    2efc:	3d01      	subs	r5, #1
    2efe:	d039      	beq.n	2f74 <nrfx_clock_stop+0x100>
    switch (domain)
    2f00:	2c00      	cmp	r4, #0
    2f02:	d0e4      	beq.n	2ece <nrfx_clock_stop+0x5a>
    2f04:	2c01      	cmp	r4, #1
    2f06:	d001      	beq.n	2f0c <nrfx_clock_stop+0x98>
    2f08:	2300      	movs	r3, #0
    2f0a:	e7ee      	b.n	2eea <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f10:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    2f14:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2f18:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2f1c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    2f20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2f24:	d103      	bne.n	2f2e <nrfx_clock_stop+0xba>
    return false;
    2f26:	2300      	movs	r3, #0
    2f28:	e7df      	b.n	2eea <nrfx_clock_stop+0x76>
                return true;
    2f2a:	2301      	movs	r3, #1
    2f2c:	e7dd      	b.n	2eea <nrfx_clock_stop+0x76>
                return true;
    2f2e:	2301      	movs	r3, #1
    2f30:	e7db      	b.n	2eea <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f36:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2f3a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2f3e:	d115      	bne.n	2f6c <nrfx_clock_stop+0xf8>
    return false;
    2f40:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2f42:	b1bb      	cbz	r3, 2f74 <nrfx_clock_stop+0x100>
    2f44:	2001      	movs	r0, #1
    2f46:	f002 ff6c 	bl	5e22 <nrfx_busy_wait>
    2f4a:	3d01      	subs	r5, #1
    2f4c:	d012      	beq.n	2f74 <nrfx_clock_stop+0x100>
    switch (domain)
    2f4e:	2c00      	cmp	r4, #0
    2f50:	d0ef      	beq.n	2f32 <nrfx_clock_stop+0xbe>
    2f52:	2c01      	cmp	r4, #1
    2f54:	d001      	beq.n	2f5a <nrfx_clock_stop+0xe6>
    2f56:	2300      	movs	r3, #0
    2f58:	e7f3      	b.n	2f42 <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2f62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2f66:	d103      	bne.n	2f70 <nrfx_clock_stop+0xfc>
    return false;
    2f68:	2300      	movs	r3, #0
    2f6a:	e7ea      	b.n	2f42 <nrfx_clock_stop+0xce>
                return true;
    2f6c:	2301      	movs	r3, #1
    2f6e:	e7e8      	b.n	2f42 <nrfx_clock_stop+0xce>
                return true;
    2f70:	2301      	movs	r3, #1
    2f72:	e7e6      	b.n	2f42 <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2f74:	2c01      	cmp	r4, #1
    2f76:	d183      	bne.n	2e80 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    2f78:	4b03      	ldr	r3, [pc, #12]	; (2f88 <nrfx_clock_stop+0x114>)
    2f7a:	2200      	movs	r2, #0
    2f7c:	715a      	strb	r2, [r3, #5]
    2f7e:	e77f      	b.n	2e80 <nrfx_clock_stop+0xc>
    2f80:	4000000c 	.word	0x4000000c
    2f84:	40000004 	.word	0x40000004
    2f88:	200008fc 	.word	0x200008fc

00002f8c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2f8c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2f8e:	4b1b      	ldr	r3, [pc, #108]	; (2ffc <nrfx_power_clock_irq_handler+0x70>)
    2f90:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2f92:	b183      	cbz	r3, 2fb6 <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f94:	4b19      	ldr	r3, [pc, #100]	; (2ffc <nrfx_power_clock_irq_handler+0x70>)
    2f96:	2200      	movs	r2, #0
    2f98:	601a      	str	r2, [r3, #0]
    2f9a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fa0:	2201      	movs	r2, #1
    2fa2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2fa6:	4b16      	ldr	r3, [pc, #88]	; (3000 <nrfx_power_clock_irq_handler+0x74>)
    2fa8:	795b      	ldrb	r3, [r3, #5]
    2faa:	b923      	cbnz	r3, 2fb6 <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    2fac:	4b14      	ldr	r3, [pc, #80]	; (3000 <nrfx_power_clock_irq_handler+0x74>)
    2fae:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2fb0:	681b      	ldr	r3, [r3, #0]
    2fb2:	2000      	movs	r0, #0
    2fb4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2fb6:	4b13      	ldr	r3, [pc, #76]	; (3004 <nrfx_power_clock_irq_handler+0x78>)
    2fb8:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2fba:	b19b      	cbz	r3, 2fe4 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fbc:	4b11      	ldr	r3, [pc, #68]	; (3004 <nrfx_power_clock_irq_handler+0x78>)
    2fbe:	2200      	movs	r2, #0
    2fc0:	601a      	str	r2, [r3, #0]
    2fc2:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fc8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2fcc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2fd0:	f012 0f03 	tst.w	r2, #3
    2fd4:	d107      	bne.n	2fe6 <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2fd6:	2301      	movs	r3, #1
    2fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2fdc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fe0:	3208      	adds	r2, #8
    2fe2:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2fe4:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    2fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fea:	2202      	movs	r2, #2
    2fec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2ff0:	4b03      	ldr	r3, [pc, #12]	; (3000 <nrfx_power_clock_irq_handler+0x74>)
    2ff2:	681b      	ldr	r3, [r3, #0]
    2ff4:	2001      	movs	r0, #1
    2ff6:	4798      	blx	r3
}
    2ff8:	e7f4      	b.n	2fe4 <nrfx_power_clock_irq_handler+0x58>
    2ffa:	bf00      	nop
    2ffc:	40000100 	.word	0x40000100
    3000:	200008fc 	.word	0x200008fc
    3004:	40000104 	.word	0x40000104

00003008 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3008:	3008      	adds	r0, #8
    300a:	4b03      	ldr	r3, [pc, #12]	; (3018 <pin_in_use+0x10>)
    300c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3010:	f000 0001 	and.w	r0, r0, #1
    3014:	4770      	bx	lr
    3016:	bf00      	nop
    3018:	20000054 	.word	0x20000054

0000301c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    301c:	3008      	adds	r0, #8
    301e:	4b03      	ldr	r3, [pc, #12]	; (302c <pin_in_use_by_te+0x10>)
    3020:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3024:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3028:	4770      	bx	lr
    302a:	bf00      	nop
    302c:	20000054 	.word	0x20000054

00003030 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3030:	3008      	adds	r0, #8
    3032:	4b04      	ldr	r3, [pc, #16]	; (3044 <pin_has_trigger+0x14>)
    3034:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3038:	f010 001c 	ands.w	r0, r0, #28
    303c:	bf18      	it	ne
    303e:	2001      	movne	r0, #1
    3040:	4770      	bx	lr
    3042:	bf00      	nop
    3044:	20000054 	.word	0x20000054

00003048 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3048:	3008      	adds	r0, #8
    304a:	4b03      	ldr	r3, [pc, #12]	; (3058 <pin_is_output+0x10>)
    304c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3050:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3054:	4770      	bx	lr
    3056:	bf00      	nop
    3058:	20000054 	.word	0x20000054

0000305c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    305c:	3008      	adds	r0, #8
    305e:	4b02      	ldr	r3, [pc, #8]	; (3068 <pin_te_get+0xc>)
    3060:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3064:	0b40      	lsrs	r0, r0, #13
    3066:	4770      	bx	lr
    3068:	20000054 	.word	0x20000054

0000306c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    306c:	2200      	movs	r2, #0
    306e:	e004      	b.n	307a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3074:	4283      	cmp	r3, r0
    3076:	d00f      	beq.n	3098 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3078:	3201      	adds	r2, #1
    307a:	2a2f      	cmp	r2, #47	; 0x2f
    307c:	d80a      	bhi.n	3094 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    307e:	f102 0308 	add.w	r3, r2, #8
    3082:	4906      	ldr	r1, [pc, #24]	; (309c <handler_in_use+0x30>)
    3084:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3088:	f413 7f80 	tst.w	r3, #256	; 0x100
    308c:	d0f0      	beq.n	3070 <handler_in_use+0x4>
    308e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3092:	e7ef      	b.n	3074 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    3094:	2000      	movs	r0, #0
    3096:	4770      	bx	lr
            return true;
    3098:	2001      	movs	r0, #1
}
    309a:	4770      	bx	lr
    309c:	20000054 	.word	0x20000054

000030a0 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    30a0:	2300      	movs	r3, #0
    30a2:	b113      	cbz	r3, 30aa <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    30a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    30a8:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    30aa:	4a07      	ldr	r2, [pc, #28]	; (30c8 <find_handler+0x28>)
    30ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    30b0:	4282      	cmp	r2, r0
    30b2:	d001      	beq.n	30b8 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    30b4:	3301      	adds	r3, #1
    30b6:	e7f4      	b.n	30a2 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    30b8:	4a03      	ldr	r2, [pc, #12]	; (30c8 <find_handler+0x28>)
    30ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    30be:	6852      	ldr	r2, [r2, #4]
    30c0:	428a      	cmp	r2, r1
    30c2:	d1f7      	bne.n	30b4 <find_handler+0x14>
            return i;
    30c4:	4618      	mov	r0, r3
    30c6:	4770      	bx	lr
    30c8:	20000054 	.word	0x20000054

000030cc <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30cc:	3008      	adds	r0, #8
    30ce:	4b06      	ldr	r3, [pc, #24]	; (30e8 <channel_handler_get+0x1c>)
    30d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    30d4:	f410 7f80 	tst.w	r0, #256	; 0x100
    30d8:	d004      	beq.n	30e4 <channel_handler_get+0x18>
    30da:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    30de:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    30e2:	4770      	bx	lr
        return NULL;
    30e4:	2000      	movs	r0, #0
}
    30e6:	4770      	bx	lr
    30e8:	20000054 	.word	0x20000054

000030ec <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    30ec:	b570      	push	{r4, r5, r6, lr}
    30ee:	4604      	mov	r4, r0
    30f0:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    30f2:	f7ff ffeb 	bl	30cc <channel_handler_get>

    if (handler)
    30f6:	b120      	cbz	r0, 3102 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    30f8:	6806      	ldr	r6, [r0, #0]
    30fa:	6842      	ldr	r2, [r0, #4]
    30fc:	4629      	mov	r1, r5
    30fe:	4620      	mov	r0, r4
    3100:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3102:	4b04      	ldr	r3, [pc, #16]	; (3114 <call_handler+0x28>)
    3104:	689b      	ldr	r3, [r3, #8]
    3106:	b123      	cbz	r3, 3112 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3108:	4a02      	ldr	r2, [pc, #8]	; (3114 <call_handler+0x28>)
    310a:	68d2      	ldr	r2, [r2, #12]
    310c:	4629      	mov	r1, r5
    310e:	4620      	mov	r0, r4
    3110:	4798      	blx	r3
    }
}
    3112:	bd70      	pop	{r4, r5, r6, pc}
    3114:	20000054 	.word	0x20000054

00003118 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    3118:	b570      	push	{r4, r5, r6, lr}
    311a:	4604      	mov	r4, r0
    311c:	460d      	mov	r5, r1
    311e:	4616      	mov	r6, r2
    if (is_level(trigger))
    3120:	4608      	mov	r0, r1
    3122:	f002 fea3 	bl	5e6c <is_level>
    3126:	b9d0      	cbnz	r0, 315e <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3128:	2e02      	cmp	r6, #2
    312a:	d03e      	beq.n	31aa <next_sense_cond_call_handler+0x92>
    312c:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    312e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3132:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3134:	2901      	cmp	r1, #1
    3136:	d03a      	beq.n	31ae <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
    3138:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    313c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3140:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3144:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3148:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    314c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3150:	2d03      	cmp	r5, #3
    3152:	d030      	beq.n	31b6 <next_sense_cond_call_handler+0x9e>
    3154:	2e02      	cmp	r6, #2
    3156:	d02c      	beq.n	31b2 <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3158:	2e03      	cmp	r6, #3
    315a:	d031      	beq.n	31c0 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    315c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    315e:	4629      	mov	r1, r5
    3160:	4620      	mov	r0, r4
    3162:	f7ff ffc3 	bl	30ec <call_handler>
    *p_pin = pin_number & 0x1F;
    3166:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    316a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    316c:	2c01      	cmp	r4, #1
    316e:	d01a      	beq.n	31a6 <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    3170:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3174:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
    3178:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    317c:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3180:	4296      	cmp	r6, r2
    3182:	d1eb      	bne.n	315c <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3184:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3188:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    318c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    3190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3194:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3198:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    319c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    31a0:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    31a4:	e7da      	b.n	315c <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    31a6:	4908      	ldr	r1, [pc, #32]	; (31c8 <next_sense_cond_call_handler+0xb0>)
    31a8:	e7e4      	b.n	3174 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    31aa:	2003      	movs	r0, #3
    31ac:	e7bf      	b.n	312e <next_sense_cond_call_handler+0x16>
    31ae:	4906      	ldr	r1, [pc, #24]	; (31c8 <next_sense_cond_call_handler+0xb0>)
    31b0:	e7c4      	b.n	313c <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    31b2:	2d01      	cmp	r5, #1
    31b4:	d1d0      	bne.n	3158 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    31b6:	4629      	mov	r1, r5
    31b8:	4620      	mov	r0, r4
    31ba:	f7ff ff97 	bl	30ec <call_handler>
}
    31be:	e7cd      	b.n	315c <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    31c0:	2d02      	cmp	r5, #2
    31c2:	d1cb      	bne.n	315c <next_sense_cond_call_handler+0x44>
    31c4:	e7f7      	b.n	31b6 <next_sense_cond_call_handler+0x9e>
    31c6:	bf00      	nop
    31c8:	50000300 	.word	0x50000300

000031cc <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    31cc:	b410      	push	{r4}
    31ce:	b083      	sub	sp, #12
    31d0:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    31d2:	4b12      	ldr	r3, [pc, #72]	; (321c <latch_pending_read_and_check+0x50>)
    31d4:	e893 0003 	ldmia.w	r3, {r0, r1}
    31d8:	ab02      	add	r3, sp, #8
    31da:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    31de:	4620      	mov	r0, r4
    31e0:	2300      	movs	r3, #0
    31e2:	e00b      	b.n	31fc <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    31e4:	aa02      	add	r2, sp, #8
    31e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    31ea:	f852 2c08 	ldr.w	r2, [r2, #-8]
    31ee:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    31f2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    31f6:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    31fa:	3301      	adds	r3, #1
    31fc:	2b01      	cmp	r3, #1
    31fe:	d9f1      	bls.n	31e4 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    3200:	2300      	movs	r3, #0
    3202:	2b01      	cmp	r3, #1
    3204:	d804      	bhi.n	3210 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    3206:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    320a:	b92a      	cbnz	r2, 3218 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    320c:	3301      	adds	r3, #1
    320e:	e7f8      	b.n	3202 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    3210:	2000      	movs	r0, #0
}
    3212:	b003      	add	sp, #12
    3214:	bc10      	pop	{r4}
    3216:	4770      	bx	lr
            return true;
    3218:	2001      	movs	r0, #1
    321a:	e7fa      	b.n	3212 <latch_pending_read_and_check+0x46>
    321c:	000065d0 	.word	0x000065d0

00003220 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3220:	f100 0208 	add.w	r2, r0, #8
    3224:	4b0e      	ldr	r3, [pc, #56]	; (3260 <release_handler+0x40>)
    3226:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    322a:	f413 7f80 	tst.w	r3, #256	; 0x100
    322e:	d016      	beq.n	325e <release_handler+0x3e>
{
    3230:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3232:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3236:	4610      	mov	r0, r2
    3238:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    323c:	4a08      	ldr	r2, [pc, #32]	; (3260 <release_handler+0x40>)
    323e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    3242:	4620      	mov	r0, r4
    3244:	f7ff ff12 	bl	306c <handler_in_use>
    3248:	b100      	cbz	r0, 324c <release_handler+0x2c>
}
    324a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    324c:	4804      	ldr	r0, [pc, #16]	; (3260 <release_handler+0x40>)
    324e:	2300      	movs	r3, #0
    3250:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3254:	4621      	mov	r1, r4
    3256:	3074      	adds	r0, #116	; 0x74
    3258:	f7ff fd9c 	bl	2d94 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    325c:	e7f5      	b.n	324a <release_handler+0x2a>
    325e:	4770      	bx	lr
    3260:	20000054 	.word	0x20000054

00003264 <pin_handler_trigger_uninit>:
{
    3264:	b510      	push	{r4, lr}
    3266:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3268:	f7ff fed8 	bl	301c <pin_in_use_by_te>
    326c:	b140      	cbz	r0, 3280 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    326e:	4620      	mov	r0, r4
    3270:	f7ff fef4 	bl	305c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3274:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3278:	4b06      	ldr	r3, [pc, #24]	; (3294 <pin_handler_trigger_uninit+0x30>)
    327a:	2200      	movs	r2, #0
    327c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3280:	4620      	mov	r0, r4
    3282:	f7ff ffcd 	bl	3220 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3286:	3408      	adds	r4, #8
    3288:	4b03      	ldr	r3, [pc, #12]	; (3298 <pin_handler_trigger_uninit+0x34>)
    328a:	2200      	movs	r2, #0
    328c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3290:	bd10      	pop	{r4, pc}
    3292:	bf00      	nop
    3294:	40006000 	.word	0x40006000
    3298:	20000054 	.word	0x20000054

0000329c <pin_handler_set>:
{
    329c:	b570      	push	{r4, r5, r6, lr}
    329e:	b082      	sub	sp, #8
    32a0:	4606      	mov	r6, r0
    32a2:	460c      	mov	r4, r1
    32a4:	4615      	mov	r5, r2
    release_handler(pin);
    32a6:	f7ff ffbb 	bl	3220 <release_handler>
    if (!handler)
    32aa:	b324      	cbz	r4, 32f6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    32ac:	4629      	mov	r1, r5
    32ae:	4620      	mov	r0, r4
    32b0:	f7ff fef6 	bl	30a0 <find_handler>
    if (handler_id < 0)
    32b4:	1e03      	subs	r3, r0, #0
    32b6:	db13      	blt.n	32e0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    32b8:	4a10      	ldr	r2, [pc, #64]	; (32fc <pin_handler_set+0x60>)
    32ba:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    32be:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    32c2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32c4:	025b      	lsls	r3, r3, #9
    32c6:	b29b      	uxth	r3, r3
    32c8:	f106 0008 	add.w	r0, r6, #8
    32cc:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    32d0:	430b      	orrs	r3, r1
    32d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    32d6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    32da:	4809      	ldr	r0, [pc, #36]	; (3300 <pin_handler_set+0x64>)
}
    32dc:	b002      	add	sp, #8
    32de:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    32e0:	f10d 0107 	add.w	r1, sp, #7
    32e4:	4807      	ldr	r0, [pc, #28]	; (3304 <pin_handler_set+0x68>)
    32e6:	f7ff fd31 	bl	2d4c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    32ea:	4b05      	ldr	r3, [pc, #20]	; (3300 <pin_handler_set+0x64>)
    32ec:	4298      	cmp	r0, r3
    32ee:	d1f5      	bne.n	32dc <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    32f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    32f4:	e7e0      	b.n	32b8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    32f6:	4802      	ldr	r0, [pc, #8]	; (3300 <pin_handler_set+0x64>)
    32f8:	e7f0      	b.n	32dc <pin_handler_set+0x40>
    32fa:	bf00      	nop
    32fc:	20000054 	.word	0x20000054
    3300:	0bad0000 	.word	0x0bad0000
    3304:	200000c8 	.word	0x200000c8

00003308 <port_event_handle>:

static void port_event_handle(void)
{
    3308:	b570      	push	{r4, r5, r6, lr}
    330a:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    330c:	4a2c      	ldr	r2, [pc, #176]	; (33c0 <port_event_handle+0xb8>)
    330e:	466b      	mov	r3, sp
    3310:	e892 0003 	ldmia.w	r2, {r0, r1}
    3314:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    3318:	2300      	movs	r3, #0
    331a:	a802      	add	r0, sp, #8
    331c:	e00b      	b.n	3336 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    331e:	aa04      	add	r2, sp, #16
    3320:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3324:	f852 2c10 	ldr.w	r2, [r2, #-16]
    3328:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    332c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    3330:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    3334:	3301      	adds	r3, #1
    3336:	2b01      	cmp	r3, #1
    3338:	d9f1      	bls.n	331e <port_event_handle+0x16>
    333a:	e03d      	b.n	33b8 <port_event_handle+0xb0>
        case 1: return NRF_P1;
    333c:	4e21      	ldr	r6, [pc, #132]	; (33c4 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    333e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    3342:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    3346:	f3c2 4201 	ubfx	r2, r2, #16, #2
    334a:	f7ff fee5 	bl	3118 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    334e:	2301      	movs	r3, #1
    3350:	40ab      	lsls	r3, r5
    3352:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    3356:	ab04      	add	r3, sp, #16
    3358:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    335c:	f853 0c08 	ldr.w	r0, [r3, #-8]
    3360:	b1f8      	cbz	r0, 33a2 <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
    3362:	fa90 f0a0 	rbit	r0, r0
    3366:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    336a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    336e:	f100 0208 	add.w	r2, r0, #8
    3372:	4b15      	ldr	r3, [pc, #84]	; (33c8 <port_event_handle+0xc0>)
    3374:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    3378:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    337c:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    337e:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3382:	ae02      	add	r6, sp, #8
    3384:	2301      	movs	r3, #1
    3386:	fa03 f202 	lsl.w	r2, r3, r2
    338a:	5d73      	ldrb	r3, [r6, r5]
    338c:	ea23 0302 	bic.w	r3, r3, r2
    3390:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    3392:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3396:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3398:	2b01      	cmp	r3, #1
    339a:	d0cf      	beq.n	333c <port_event_handle+0x34>
        case 0: return NRF_P0;
    339c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    33a0:	e7cd      	b.n	333e <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    33a2:	3401      	adds	r4, #1
    33a4:	2c01      	cmp	r4, #1
    33a6:	d9d6      	bls.n	3356 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33a8:	4b08      	ldr	r3, [pc, #32]	; (33cc <port_event_handle+0xc4>)
    33aa:	2200      	movs	r2, #0
    33ac:	601a      	str	r2, [r3, #0]
    33ae:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    33b0:	a802      	add	r0, sp, #8
    33b2:	f7ff ff0b 	bl	31cc <latch_pending_read_and_check>
    33b6:	b108      	cbz	r0, 33bc <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    33b8:	2400      	movs	r4, #0
    33ba:	e7f3      	b.n	33a4 <port_event_handle+0x9c>
}
    33bc:	b004      	add	sp, #16
    33be:	bd70      	pop	{r4, r5, r6, pc}
    33c0:	000065d0 	.word	0x000065d0
    33c4:	50000300 	.word	0x50000300
    33c8:	20000054 	.word	0x20000054
    33cc:	4000617c 	.word	0x4000617c

000033d0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    33d0:	b538      	push	{r3, r4, r5, lr}
    33d2:	4604      	mov	r4, r0
    while (mask)
    33d4:	b1cc      	cbz	r4, 340a <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    33d6:	fa94 f3a4 	rbit	r3, r4
    33da:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    33de:	2201      	movs	r2, #1
    33e0:	409a      	lsls	r2, r3
    33e2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    33e6:	4a09      	ldr	r2, [pc, #36]	; (340c <gpiote_evt_handle+0x3c>)
    33e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    33ec:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    33f0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    33f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    33f8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    33fc:	f002 fd34 	bl	5e68 <gpiote_polarity_to_trigger>
    3400:	4601      	mov	r1, r0
    3402:	4628      	mov	r0, r5
    3404:	f7ff fe72 	bl	30ec <call_handler>
    3408:	e7e4      	b.n	33d4 <gpiote_evt_handle+0x4>
    }
}
    340a:	bd38      	pop	{r3, r4, r5, pc}
    340c:	40006000 	.word	0x40006000

00003410 <nrfx_gpiote_input_configure>:
{
    3410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3414:	4604      	mov	r4, r0
    3416:	4615      	mov	r5, r2
    3418:	461e      	mov	r6, r3
    if (p_input_config)
    341a:	b361      	cbz	r1, 3476 <nrfx_gpiote_input_configure+0x66>
    341c:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    341e:	f002 fd0d 	bl	5e3c <pin_is_task_output>
    3422:	2800      	cmp	r0, #0
    3424:	f040 8097 	bne.w	3556 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    3428:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    342c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    342e:	2b01      	cmp	r3, #1
    3430:	d042      	beq.n	34b8 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
    3432:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3436:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    343a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    343e:	2f00      	cmp	r7, #0
    3440:	d03c      	beq.n	34bc <nrfx_gpiote_input_configure+0xac>
    3442:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3444:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    3448:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    344c:	2f00      	cmp	r7, #0
    344e:	d037      	beq.n	34c0 <nrfx_gpiote_input_configure+0xb0>
    3450:	7839      	ldrb	r1, [r7, #0]
    3452:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3454:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    3456:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    345a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    345e:	4a42      	ldr	r2, [pc, #264]	; (3568 <nrfx_gpiote_input_configure+0x158>)
    3460:	f104 0108 	add.w	r1, r4, #8
    3464:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3468:	f023 0302 	bic.w	r3, r3, #2
    346c:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    346e:	f043 0301 	orr.w	r3, r3, #1
    3472:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3476:	b1b5      	cbz	r5, 34a6 <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3478:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    347c:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    3480:	4620      	mov	r0, r4
    3482:	f7ff fde1 	bl	3048 <pin_is_output>
    3486:	b1e8      	cbz	r0, 34c4 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
    3488:	f1b9 0f00 	cmp.w	r9, #0
    348c:	d165      	bne.n	355a <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    348e:	4b36      	ldr	r3, [pc, #216]	; (3568 <nrfx_gpiote_input_configure+0x158>)
    3490:	f104 0208 	add.w	r2, r4, #8
    3494:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    3498:	f020 001c 	bic.w	r0, r0, #28
    349c:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    349e:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    34a2:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    34a6:	2e00      	cmp	r6, #0
    34a8:	d05b      	beq.n	3562 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    34aa:	6872      	ldr	r2, [r6, #4]
    34ac:	6831      	ldr	r1, [r6, #0]
    34ae:	4620      	mov	r0, r4
    34b0:	f7ff fef4 	bl	329c <pin_handler_set>
}
    34b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    34b8:	482c      	ldr	r0, [pc, #176]	; (356c <nrfx_gpiote_input_configure+0x15c>)
    34ba:	e7bc      	b.n	3436 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    34bc:	2100      	movs	r1, #0
    34be:	e7c1      	b.n	3444 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    34c0:	2100      	movs	r1, #0
    34c2:	e7c7      	b.n	3454 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    34c4:	4b28      	ldr	r3, [pc, #160]	; (3568 <nrfx_gpiote_input_configure+0x158>)
    34c6:	f104 0208 	add.w	r2, r4, #8
    34ca:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    34ce:	f027 0720 	bic.w	r7, r7, #32
    34d2:	04ff      	lsls	r7, r7, #19
    34d4:	0cff      	lsrs	r7, r7, #19
    34d6:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    34da:	f1b9 0f00 	cmp.w	r9, #0
    34de:	d0d6      	beq.n	348e <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
    34e0:	f1b8 0f03 	cmp.w	r8, #3
    34e4:	d83b      	bhi.n	355e <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    34e6:	686b      	ldr	r3, [r5, #4]
    34e8:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    34ea:	f1b8 0f00 	cmp.w	r8, #0
    34ee:	d106      	bne.n	34fe <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    34f0:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    34f4:	4b1e      	ldr	r3, [pc, #120]	; (3570 <nrfx_gpiote_input_configure+0x160>)
    34f6:	2200      	movs	r2, #0
    34f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    34fc:	e7c7      	b.n	348e <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    34fe:	4640      	mov	r0, r8
    3500:	f002 fcb3 	bl	5e6a <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3504:	4b1a      	ldr	r3, [pc, #104]	; (3570 <nrfx_gpiote_input_configure+0x160>)
    3506:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    350a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    350e:	f021 0103 	bic.w	r1, r1, #3
    3512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3516:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    351a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    351e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3526:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    352a:	0221      	lsls	r1, r4, #8
    352c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    3530:	0400      	lsls	r0, r0, #16
    3532:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3536:	4301      	orrs	r1, r0
    3538:	ea4c 0101 	orr.w	r1, ip, r1
    353c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3540:	036d      	lsls	r5, r5, #13
    3542:	b2ad      	uxth	r5, r5
    3544:	f104 0308 	add.w	r3, r4, #8
    3548:	432f      	orrs	r7, r5
    354a:	f047 0720 	orr.w	r7, r7, #32
    354e:	4a06      	ldr	r2, [pc, #24]	; (3568 <nrfx_gpiote_input_configure+0x158>)
    3550:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    3554:	e79b      	b.n	348e <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
    3556:	4807      	ldr	r0, [pc, #28]	; (3574 <nrfx_gpiote_input_configure+0x164>)
    3558:	e7ac      	b.n	34b4 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
    355a:	4806      	ldr	r0, [pc, #24]	; (3574 <nrfx_gpiote_input_configure+0x164>)
    355c:	e7aa      	b.n	34b4 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
    355e:	4805      	ldr	r0, [pc, #20]	; (3574 <nrfx_gpiote_input_configure+0x164>)
    3560:	e7a8      	b.n	34b4 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
    3562:	4805      	ldr	r0, [pc, #20]	; (3578 <nrfx_gpiote_input_configure+0x168>)
    3564:	e7a6      	b.n	34b4 <nrfx_gpiote_input_configure+0xa4>
    3566:	bf00      	nop
    3568:	20000054 	.word	0x20000054
    356c:	50000300 	.word	0x50000300
    3570:	40006000 	.word	0x40006000
    3574:	0bad0004 	.word	0x0bad0004
    3578:	0bad0000 	.word	0x0bad0000

0000357c <nrfx_gpiote_output_configure>:
{
    357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    357e:	4604      	mov	r4, r0
    3580:	4615      	mov	r5, r2
    if (p_config)
    3582:	2900      	cmp	r1, #0
    3584:	d052      	beq.n	362c <nrfx_gpiote_output_configure+0xb0>
    3586:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3588:	f002 fc67 	bl	5e5a <pin_is_input>
    358c:	b128      	cbz	r0, 359a <nrfx_gpiote_output_configure+0x1e>
    358e:	4620      	mov	r0, r4
    3590:	f7ff fd44 	bl	301c <pin_in_use_by_te>
    3594:	2800      	cmp	r0, #0
    3596:	f040 809d 	bne.w	36d4 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    359a:	4620      	mov	r0, r4
    359c:	f7ff fd48 	bl	3030 <pin_has_trigger>
    35a0:	b118      	cbz	r0, 35aa <nrfx_gpiote_output_configure+0x2e>
    35a2:	7873      	ldrb	r3, [r6, #1]
    35a4:	2b01      	cmp	r3, #1
    35a6:	f000 8097 	beq.w	36d8 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    35aa:	f106 0c01 	add.w	ip, r6, #1
    35ae:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    35b0:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    35b4:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35b6:	2b01      	cmp	r3, #1
    35b8:	d07c      	beq.n	36b4 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    35ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    35be:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    35c2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    35c6:	f1bc 0f00 	cmp.w	ip, #0
    35ca:	d075      	beq.n	36b8 <nrfx_gpiote_output_configure+0x13c>
    35cc:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    35ce:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    35d2:	2f00      	cmp	r7, #0
    35d4:	d072      	beq.n	36bc <nrfx_gpiote_output_configure+0x140>
    35d6:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    35da:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    35de:	2e00      	cmp	r6, #0
    35e0:	d06f      	beq.n	36c2 <nrfx_gpiote_output_configure+0x146>
    35e2:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    35e6:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    35ea:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    35ee:	f1bc 0f00 	cmp.w	ip, #0
    35f2:	d069      	beq.n	36c8 <nrfx_gpiote_output_configure+0x14c>
    35f4:	7873      	ldrb	r3, [r6, #1]
    35f6:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    35f8:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    35fc:	2f00      	cmp	r7, #0
    35fe:	d065      	beq.n	36cc <nrfx_gpiote_output_configure+0x150>
    3600:	78b7      	ldrb	r7, [r6, #2]
    3602:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3604:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3606:	2e00      	cmp	r6, #0
    3608:	d062      	beq.n	36d0 <nrfx_gpiote_output_configure+0x154>
    360a:	7836      	ldrb	r6, [r6, #0]
    360c:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    360e:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3610:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    3612:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3616:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    361a:	4a33      	ldr	r2, [pc, #204]	; (36e8 <nrfx_gpiote_output_configure+0x16c>)
    361c:	f104 0108 	add.w	r1, r4, #8
    3620:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3624:	f043 0303 	orr.w	r3, r3, #3
    3628:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    362c:	2d00      	cmp	r5, #0
    362e:	d055      	beq.n	36dc <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    3630:	4620      	mov	r0, r4
    3632:	f002 fc12 	bl	5e5a <pin_is_input>
    3636:	2800      	cmp	r0, #0
    3638:	d152      	bne.n	36e0 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    363a:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    363c:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    3640:	4b2a      	ldr	r3, [pc, #168]	; (36ec <nrfx_gpiote_output_configure+0x170>)
    3642:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3646:	4928      	ldr	r1, [pc, #160]	; (36e8 <nrfx_gpiote_output_configure+0x16c>)
    3648:	f104 0008 	add.w	r0, r4, #8
    364c:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    3650:	f023 0320 	bic.w	r3, r3, #32
    3654:	04db      	lsls	r3, r3, #19
    3656:	0cdb      	lsrs	r3, r3, #19
    3658:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    365c:	7869      	ldrb	r1, [r5, #1]
    365e:	2900      	cmp	r1, #0
    3660:	d040      	beq.n	36e4 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3662:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3666:	4d21      	ldr	r5, [pc, #132]	; (36ec <nrfx_gpiote_output_configure+0x170>)
    3668:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    366c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    3670:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    3674:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    3678:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    367c:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    3680:	0220      	lsls	r0, r4, #8
    3682:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3686:	0409      	lsls	r1, r1, #16
    3688:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    368c:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    368e:	ea4f 500c 	mov.w	r0, ip, lsl #20
    3692:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3696:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3698:	4339      	orrs	r1, r7
    369a:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    369e:	0352      	lsls	r2, r2, #13
    36a0:	b292      	uxth	r2, r2
    36a2:	3408      	adds	r4, #8
    36a4:	431a      	orrs	r2, r3
    36a6:	f042 0220 	orr.w	r2, r2, #32
    36aa:	4b0f      	ldr	r3, [pc, #60]	; (36e8 <nrfx_gpiote_output_configure+0x16c>)
    36ac:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    36b0:	480f      	ldr	r0, [pc, #60]	; (36f0 <nrfx_gpiote_output_configure+0x174>)
    36b2:	e014      	b.n	36de <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    36b4:	490f      	ldr	r1, [pc, #60]	; (36f4 <nrfx_gpiote_output_configure+0x178>)
    36b6:	e782      	b.n	35be <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    36b8:	2300      	movs	r3, #0
    36ba:	e788      	b.n	35ce <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    36bc:	f04f 0e00 	mov.w	lr, #0
    36c0:	e78b      	b.n	35da <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    36c2:	f04f 0e00 	mov.w	lr, #0
    36c6:	e78e      	b.n	35e6 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    36c8:	2300      	movs	r3, #0
    36ca:	e795      	b.n	35f8 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    36cc:	2700      	movs	r7, #0
    36ce:	e799      	b.n	3604 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    36d0:	2600      	movs	r6, #0
    36d2:	e79c      	b.n	360e <nrfx_gpiote_output_configure+0x92>
    36d4:	4808      	ldr	r0, [pc, #32]	; (36f8 <nrfx_gpiote_output_configure+0x17c>)
    36d6:	e002      	b.n	36de <nrfx_gpiote_output_configure+0x162>
    36d8:	4807      	ldr	r0, [pc, #28]	; (36f8 <nrfx_gpiote_output_configure+0x17c>)
    36da:	e000      	b.n	36de <nrfx_gpiote_output_configure+0x162>
    36dc:	4804      	ldr	r0, [pc, #16]	; (36f0 <nrfx_gpiote_output_configure+0x174>)
}
    36de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    36e0:	4805      	ldr	r0, [pc, #20]	; (36f8 <nrfx_gpiote_output_configure+0x17c>)
    36e2:	e7fc      	b.n	36de <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    36e4:	4802      	ldr	r0, [pc, #8]	; (36f0 <nrfx_gpiote_output_configure+0x174>)
    36e6:	e7fa      	b.n	36de <nrfx_gpiote_output_configure+0x162>
    36e8:	20000054 	.word	0x20000054
    36ec:	40006000 	.word	0x40006000
    36f0:	0bad0000 	.word	0x0bad0000
    36f4:	50000300 	.word	0x50000300
    36f8:	0bad0004 	.word	0x0bad0004

000036fc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    36fc:	4b01      	ldr	r3, [pc, #4]	; (3704 <nrfx_gpiote_global_callback_set+0x8>)
    36fe:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3700:	60d9      	str	r1, [r3, #12]
}
    3702:	4770      	bx	lr
    3704:	20000054 	.word	0x20000054

00003708 <nrfx_gpiote_channel_get>:
{
    3708:	b538      	push	{r3, r4, r5, lr}
    370a:	4604      	mov	r4, r0
    370c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    370e:	f7ff fc85 	bl	301c <pin_in_use_by_te>
    3712:	b140      	cbz	r0, 3726 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3714:	f104 0008 	add.w	r0, r4, #8
    3718:	4b04      	ldr	r3, [pc, #16]	; (372c <nrfx_gpiote_channel_get+0x24>)
    371a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    371e:	0b5b      	lsrs	r3, r3, #13
    3720:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3722:	4803      	ldr	r0, [pc, #12]	; (3730 <nrfx_gpiote_channel_get+0x28>)
}
    3724:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3726:	4803      	ldr	r0, [pc, #12]	; (3734 <nrfx_gpiote_channel_get+0x2c>)
    3728:	e7fc      	b.n	3724 <nrfx_gpiote_channel_get+0x1c>
    372a:	bf00      	nop
    372c:	20000054 	.word	0x20000054
    3730:	0bad0000 	.word	0x0bad0000
    3734:	0bad0004 	.word	0x0bad0004

00003738 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3738:	4b0f      	ldr	r3, [pc, #60]	; (3778 <nrfx_gpiote_init+0x40>)
    373a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    373e:	b10b      	cbz	r3, 3744 <nrfx_gpiote_init+0xc>
        return err_code;
    3740:	480e      	ldr	r0, [pc, #56]	; (377c <nrfx_gpiote_init+0x44>)
}
    3742:	4770      	bx	lr
{
    3744:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3746:	4c0c      	ldr	r4, [pc, #48]	; (3778 <nrfx_gpiote_init+0x40>)
    3748:	2260      	movs	r2, #96	; 0x60
    374a:	2100      	movs	r1, #0
    374c:	f104 0010 	add.w	r0, r4, #16
    3750:	f001 ffa5 	bl	569e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3754:	2006      	movs	r0, #6
    3756:	f7fd fe4d 	bl	13f4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    375a:	4b09      	ldr	r3, [pc, #36]	; (3780 <nrfx_gpiote_init+0x48>)
    375c:	2200      	movs	r2, #0
    375e:	601a      	str	r2, [r3, #0]
    3760:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3762:	4b08      	ldr	r3, [pc, #32]	; (3784 <nrfx_gpiote_init+0x4c>)
    3764:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3768:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    376c:	2301      	movs	r3, #1
    376e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3772:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    3774:	4804      	ldr	r0, [pc, #16]	; (3788 <nrfx_gpiote_init+0x50>)
}
    3776:	bd10      	pop	{r4, pc}
    3778:	20000054 	.word	0x20000054
    377c:	0bad0005 	.word	0x0bad0005
    3780:	4000617c 	.word	0x4000617c
    3784:	40006000 	.word	0x40006000
    3788:	0bad0000 	.word	0x0bad0000

0000378c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    378c:	4b03      	ldr	r3, [pc, #12]	; (379c <nrfx_gpiote_is_init+0x10>)
    378e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3792:	3800      	subs	r0, #0
    3794:	bf18      	it	ne
    3796:	2001      	movne	r0, #1
    3798:	4770      	bx	lr
    379a:	bf00      	nop
    379c:	20000054 	.word	0x20000054

000037a0 <nrfx_gpiote_channel_free>:
{
    37a0:	b508      	push	{r3, lr}
    37a2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    37a4:	4801      	ldr	r0, [pc, #4]	; (37ac <nrfx_gpiote_channel_free+0xc>)
    37a6:	f7ff faf5 	bl	2d94 <nrfx_flag32_free>
}
    37aa:	bd08      	pop	{r3, pc}
    37ac:	200000c4 	.word	0x200000c4

000037b0 <nrfx_gpiote_channel_alloc>:
{
    37b0:	b508      	push	{r3, lr}
    37b2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    37b4:	4801      	ldr	r0, [pc, #4]	; (37bc <nrfx_gpiote_channel_alloc+0xc>)
    37b6:	f7ff fac9 	bl	2d4c <nrfx_flag32_alloc>
}
    37ba:	bd08      	pop	{r3, pc}
    37bc:	200000c4 	.word	0x200000c4

000037c0 <nrfx_gpiote_trigger_enable>:
{
    37c0:	b538      	push	{r3, r4, r5, lr}
    37c2:	4604      	mov	r4, r0
    37c4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    37c6:	f7ff fc29 	bl	301c <pin_in_use_by_te>
    37ca:	b308      	cbz	r0, 3810 <nrfx_gpiote_trigger_enable+0x50>
    37cc:	4620      	mov	r0, r4
    37ce:	f002 fb44 	bl	5e5a <pin_is_input>
    37d2:	b1e8      	cbz	r0, 3810 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    37d4:	4620      	mov	r0, r4
    37d6:	f7ff fc41 	bl	305c <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    37da:	0083      	lsls	r3, r0, #2
    37dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    37e0:	b29b      	uxth	r3, r3
    37e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    37e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    37ea:	2200      	movs	r2, #0
    37ec:	601a      	str	r2, [r3, #0]
    37ee:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    37f0:	4a22      	ldr	r2, [pc, #136]	; (387c <nrfx_gpiote_trigger_enable+0xbc>)
    37f2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    37f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    37fa:	f043 0301 	orr.w	r3, r3, #1
    37fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3802:	b39d      	cbz	r5, 386c <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3804:	2301      	movs	r3, #1
    3806:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    380a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    380e:	e02d      	b.n	386c <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3810:	f104 0308 	add.w	r3, r4, #8
    3814:	4a1a      	ldr	r2, [pc, #104]	; (3880 <nrfx_gpiote_trigger_enable+0xc0>)
    3816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    381a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    381e:	2b04      	cmp	r3, #4
    3820:	d012      	beq.n	3848 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3822:	2b05      	cmp	r3, #5
    3824:	d023      	beq.n	386e <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    3826:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    382a:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    382c:	2b01      	cmp	r3, #1
    382e:	d009      	beq.n	3844 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    3830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    3834:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3838:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    383a:	f013 0f01 	tst.w	r3, #1
    383e:	d018      	beq.n	3872 <nrfx_gpiote_trigger_enable+0xb2>
    3840:	2003      	movs	r0, #3
    3842:	e002      	b.n	384a <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    3844:	4b0f      	ldr	r3, [pc, #60]	; (3884 <nrfx_gpiote_trigger_enable+0xc4>)
    3846:	e7f5      	b.n	3834 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3848:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    384a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    384e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3850:	2c01      	cmp	r4, #1
    3852:	d010      	beq.n	3876 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    3854:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3858:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    385c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3860:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3868:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    386c:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    386e:	2002      	movs	r0, #2
    3870:	e7eb      	b.n	384a <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3872:	2002      	movs	r0, #2
    3874:	e7e9      	b.n	384a <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    3876:	4903      	ldr	r1, [pc, #12]	; (3884 <nrfx_gpiote_trigger_enable+0xc4>)
    3878:	e7ee      	b.n	3858 <nrfx_gpiote_trigger_enable+0x98>
    387a:	bf00      	nop
    387c:	40006000 	.word	0x40006000
    3880:	20000054 	.word	0x20000054
    3884:	50000300 	.word	0x50000300

00003888 <nrfx_gpiote_trigger_disable>:
{
    3888:	b510      	push	{r4, lr}
    388a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    388c:	f7ff fbc6 	bl	301c <pin_in_use_by_te>
    3890:	b1a0      	cbz	r0, 38bc <nrfx_gpiote_trigger_disable+0x34>
    3892:	4620      	mov	r0, r4
    3894:	f002 fae1 	bl	5e5a <pin_is_input>
    3898:	b180      	cbz	r0, 38bc <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    389a:	4620      	mov	r0, r4
    389c:	f7ff fbde 	bl	305c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    38a0:	2201      	movs	r2, #1
    38a2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    38a4:	4b0e      	ldr	r3, [pc, #56]	; (38e0 <nrfx_gpiote_trigger_disable+0x58>)
    38a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    38aa:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    38ae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    38b2:	f022 0203 	bic.w	r2, r2, #3
    38b6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    38ba:	e00e      	b.n	38da <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    38bc:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    38c0:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38c2:	2c01      	cmp	r4, #1
    38c4:	d00a      	beq.n	38dc <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    38c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    38ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    38ce:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    38d2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    38d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    38da:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    38dc:	4901      	ldr	r1, [pc, #4]	; (38e4 <nrfx_gpiote_trigger_disable+0x5c>)
    38de:	e7f4      	b.n	38ca <nrfx_gpiote_trigger_disable+0x42>
    38e0:	40006000 	.word	0x40006000
    38e4:	50000300 	.word	0x50000300

000038e8 <nrfx_gpiote_pin_uninit>:
{
    38e8:	b510      	push	{r4, lr}
    38ea:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    38ec:	f7ff fb8c 	bl	3008 <pin_in_use>
    38f0:	b908      	cbnz	r0, 38f6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    38f2:	480c      	ldr	r0, [pc, #48]	; (3924 <nrfx_gpiote_pin_uninit+0x3c>)
}
    38f4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    38f6:	4620      	mov	r0, r4
    38f8:	f7ff ffc6 	bl	3888 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    38fc:	4620      	mov	r0, r4
    38fe:	f7ff fcb1 	bl	3264 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    3902:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3906:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3908:	2c01      	cmp	r4, #1
    390a:	d008      	beq.n	391e <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    390c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3910:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3914:	2102      	movs	r1, #2
    3916:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    391a:	4803      	ldr	r0, [pc, #12]	; (3928 <nrfx_gpiote_pin_uninit+0x40>)
    391c:	e7ea      	b.n	38f4 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    391e:	4a03      	ldr	r2, [pc, #12]	; (392c <nrfx_gpiote_pin_uninit+0x44>)
    3920:	e7f6      	b.n	3910 <nrfx_gpiote_pin_uninit+0x28>
    3922:	bf00      	nop
    3924:	0bad0004 	.word	0x0bad0004
    3928:	0bad0000 	.word	0x0bad0000
    392c:	50000300 	.word	0x50000300

00003930 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3930:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3932:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3934:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3938:	2100      	movs	r1, #0
    uint32_t status = 0;
    393a:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    393c:	e003      	b.n	3946 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    393e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3940:	3304      	adds	r3, #4
    3942:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3944:	3101      	adds	r1, #1
    3946:	2907      	cmp	r1, #7
    3948:	d814      	bhi.n	3974 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    394a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    394e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    3952:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3954:	2a00      	cmp	r2, #0
    3956:	d0f2      	beq.n	393e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3958:	4a0b      	ldr	r2, [pc, #44]	; (3988 <nrfx_gpiote_irq_handler+0x58>)
    395a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    395e:	4210      	tst	r0, r2
    3960:	d0ed      	beq.n	393e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3962:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3966:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    396a:	2400      	movs	r4, #0
    396c:	6014      	str	r4, [r2, #0]
    396e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3970:	4305      	orrs	r5, r0
    3972:	e7e4      	b.n	393e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3974:	4b05      	ldr	r3, [pc, #20]	; (398c <nrfx_gpiote_irq_handler+0x5c>)
    3976:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3978:	b91b      	cbnz	r3, 3982 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    397a:	4628      	mov	r0, r5
    397c:	f7ff fd28 	bl	33d0 <gpiote_evt_handle>
}
    3980:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3982:	f7ff fcc1 	bl	3308 <port_event_handle>
    3986:	e7f8      	b.n	397a <nrfx_gpiote_irq_handler+0x4a>
    3988:	40006000 	.word	0x40006000
    398c:	4000617c 	.word	0x4000617c

00003990 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3990:	b508      	push	{r3, lr}
    3992:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3994:	4801      	ldr	r0, [pc, #4]	; (399c <nrfx_ppi_channel_alloc+0xc>)
    3996:	f7ff f9d9 	bl	2d4c <nrfx_flag32_alloc>
}
    399a:	bd08      	pop	{r3, pc}
    399c:	200000d0 	.word	0x200000d0

000039a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    39a0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    39a2:	4c14      	ldr	r4, [pc, #80]	; (39f4 <_DoInit+0x54>)
    39a4:	2303      	movs	r3, #3
    39a6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    39a8:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    39aa:	4a13      	ldr	r2, [pc, #76]	; (39f8 <_DoInit+0x58>)
    39ac:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    39ae:	4b13      	ldr	r3, [pc, #76]	; (39fc <_DoInit+0x5c>)
    39b0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    39b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    39b6:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    39b8:	2300      	movs	r3, #0
    39ba:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    39bc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    39be:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    39c0:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    39c2:	4a0f      	ldr	r2, [pc, #60]	; (3a00 <_DoInit+0x60>)
    39c4:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    39c6:	2210      	movs	r2, #16
    39c8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    39ca:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    39cc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    39ce:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    39d0:	490c      	ldr	r1, [pc, #48]	; (3a04 <_DoInit+0x64>)
    39d2:	1de0      	adds	r0, r4, #7
    39d4:	f001 fe0a 	bl	55ec <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    39d8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    39dc:	490a      	ldr	r1, [pc, #40]	; (3a08 <_DoInit+0x68>)
    39de:	4620      	mov	r0, r4
    39e0:	f001 fe04 	bl	55ec <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    39e4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    39e8:	2320      	movs	r3, #32
    39ea:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    39ec:	f3bf 8f5f 	dmb	sy
}
    39f0:	bd10      	pop	{r4, pc}
    39f2:	bf00      	nop
    39f4:	20000904 	.word	0x20000904
    39f8:	000067e0 	.word	0x000067e0
    39fc:	200009bc 	.word	0x200009bc
    3a00:	200009ac 	.word	0x200009ac
    3a04:	000067ec 	.word	0x000067ec
    3a08:	000067f0 	.word	0x000067f0

00003a0c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3a0c:	4b03      	ldr	r3, [pc, #12]	; (3a1c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3a0e:	4a04      	ldr	r2, [pc, #16]	; (3a20 <z_device_state_init+0x14>)
    3a10:	4293      	cmp	r3, r2
    3a12:	d201      	bcs.n	3a18 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    3a14:	3318      	adds	r3, #24
    3a16:	e7fa      	b.n	3a0e <z_device_state_init+0x2>
	}
}
    3a18:	4770      	bx	lr
    3a1a:	bf00      	nop
    3a1c:	00006370 	.word	0x00006370
    3a20:	000063e8 	.word	0x000063e8

00003a24 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    3a24:	b570      	push	{r4, r5, r6, lr}
    3a26:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a28:	4b11      	ldr	r3, [pc, #68]	; (3a70 <z_sys_init_run_level+0x4c>)
    3a2a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3a2e:	e009      	b.n	3a44 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3a30:	4240      	negs	r0, r0
    3a32:	e017      	b.n	3a64 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3a34:	68eb      	ldr	r3, [r5, #12]
    3a36:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3a38:	68ea      	ldr	r2, [r5, #12]
    3a3a:	7853      	ldrb	r3, [r2, #1]
    3a3c:	f043 0301 	orr.w	r3, r3, #1
    3a40:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a42:	3408      	adds	r4, #8
    3a44:	1c73      	adds	r3, r6, #1
    3a46:	4a0a      	ldr	r2, [pc, #40]	; (3a70 <z_sys_init_run_level+0x4c>)
    3a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a4c:	42a3      	cmp	r3, r4
    3a4e:	d90d      	bls.n	3a6c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3a50:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3a52:	6823      	ldr	r3, [r4, #0]
    3a54:	4628      	mov	r0, r5
    3a56:	4798      	blx	r3
		if (dev != NULL) {
    3a58:	2d00      	cmp	r5, #0
    3a5a:	d0f2      	beq.n	3a42 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3a5c:	2800      	cmp	r0, #0
    3a5e:	d0eb      	beq.n	3a38 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3a60:	2800      	cmp	r0, #0
    3a62:	dbe5      	blt.n	3a30 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3a64:	28ff      	cmp	r0, #255	; 0xff
    3a66:	dde5      	ble.n	3a34 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3a68:	20ff      	movs	r0, #255	; 0xff
    3a6a:	e7e3      	b.n	3a34 <z_sys_init_run_level+0x10>
		}
	}
}
    3a6c:	bd70      	pop	{r4, r5, r6, pc}
    3a6e:	bf00      	nop
    3a70:	000067f8 	.word	0x000067f8

00003a74 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a76:	b089      	sub	sp, #36	; 0x24
    3a78:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    3a7a:	4b15      	ldr	r3, [pc, #84]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a7c:	25b0      	movs	r5, #176	; 0xb0
    3a7e:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    3a82:	4b14      	ldr	r3, [pc, #80]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a84:	f44f 76b0 	mov.w	r6, #352	; 0x160
    3a88:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    3a8c:	af06      	add	r7, sp, #24
    3a8e:	4603      	mov	r3, r0
    3a90:	4a11      	ldr	r2, [pc, #68]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a92:	2108      	movs	r1, #8
    3a94:	4638      	mov	r0, r7
    3a96:	f001 faf4 	bl	5082 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3a9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3a9e:	480f      	ldr	r0, [pc, #60]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3aa0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    3aa4:	9705      	str	r7, [sp, #20]
    3aa6:	2301      	movs	r3, #1
    3aa8:	9304      	str	r3, [sp, #16]
    3aaa:	230f      	movs	r3, #15
    3aac:	9303      	str	r3, [sp, #12]
    3aae:	2300      	movs	r3, #0
    3ab0:	9302      	str	r3, [sp, #8]
    3ab2:	9301      	str	r3, [sp, #4]
    3ab4:	9400      	str	r4, [sp, #0]
    3ab6:	4b0a      	ldr	r3, [pc, #40]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3ab8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3abc:	4631      	mov	r1, r6
    3abe:	4628      	mov	r0, r5
    3ac0:	f000 f946 	bl	3d50 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3ac4:	7b6b      	ldrb	r3, [r5, #13]
    3ac6:	f023 0304 	bic.w	r3, r3, #4
    3aca:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3acc:	b009      	add	sp, #36	; 0x24
    3ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad0:	200001c0 	.word	0x200001c0
    3ad4:	20001400 	.word	0x20001400
    3ad8:	00006810 	.word	0x00006810
    3adc:	20000dbc 	.word	0x20000dbc
    3ae0:	00003eb5 	.word	0x00003eb5

00003ae4 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    3ae4:	b570      	push	{r4, r5, r6, lr}
    3ae6:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    3ae8:	f000 fe08 	bl	46fc <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    3aec:	4d1b      	ldr	r5, [pc, #108]	; (3b5c <prepare_multithreading+0x78>)
    3aee:	4b1c      	ldr	r3, [pc, #112]	; (3b60 <prepare_multithreading+0x7c>)
    3af0:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3af2:	4b1c      	ldr	r3, [pc, #112]	; (3b64 <prepare_multithreading+0x80>)
    3af4:	9305      	str	r3, [sp, #20]
    3af6:	2301      	movs	r3, #1
    3af8:	9304      	str	r3, [sp, #16]
    3afa:	2400      	movs	r4, #0
    3afc:	9403      	str	r4, [sp, #12]
    3afe:	9402      	str	r4, [sp, #8]
    3b00:	9401      	str	r4, [sp, #4]
    3b02:	9400      	str	r4, [sp, #0]
    3b04:	4b18      	ldr	r3, [pc, #96]	; (3b68 <prepare_multithreading+0x84>)
    3b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3b0a:	4918      	ldr	r1, [pc, #96]	; (3b6c <prepare_multithreading+0x88>)
    3b0c:	4628      	mov	r0, r5
    3b0e:	f000 f91f 	bl	3d50 <z_setup_new_thread>
    3b12:	4606      	mov	r6, r0
    3b14:	7b6b      	ldrb	r3, [r5, #13]
    3b16:	f023 0304 	bic.w	r3, r3, #4
    3b1a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    3b1c:	4628      	mov	r0, r5
    3b1e:	f002 faa7 	bl	6070 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    3b22:	2c00      	cmp	r4, #0
    3b24:	dd02      	ble.n	3b2c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    3b26:	4630      	mov	r0, r6
    3b28:	b006      	add	sp, #24
    3b2a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    3b2c:	4620      	mov	r0, r4
    3b2e:	f7ff ffa1 	bl	3a74 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3b32:	4b0f      	ldr	r3, [pc, #60]	; (3b70 <prepare_multithreading+0x8c>)
    3b34:	22b0      	movs	r2, #176	; 0xb0
    3b36:	fb02 3204 	mla	r2, r2, r4, r3
    3b3a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3b3e:	4b08      	ldr	r3, [pc, #32]	; (3b60 <prepare_multithreading+0x7c>)
    3b40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3b44:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    3b46:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    3b48:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    3b4c:	4a09      	ldr	r2, [pc, #36]	; (3b74 <prepare_multithreading+0x90>)
    3b4e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    3b52:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    3b56:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    3b58:	3401      	adds	r4, #1
    3b5a:	e7e2      	b.n	3b22 <prepare_multithreading+0x3e>
    3b5c:	20000270 	.word	0x20000270
    3b60:	20000dbc 	.word	0x20000dbc
    3b64:	0000681c 	.word	0x0000681c
    3b68:	00003b79 	.word	0x00003b79
    3b6c:	20000fe0 	.word	0x20000fe0
    3b70:	200001c0 	.word	0x200001c0
    3b74:	20001560 	.word	0x20001560

00003b78 <bg_thread_main>:
{
    3b78:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3b7a:	4b0a      	ldr	r3, [pc, #40]	; (3ba4 <bg_thread_main+0x2c>)
    3b7c:	2201      	movs	r2, #1
    3b7e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3b80:	2002      	movs	r0, #2
    3b82:	f7ff ff4f 	bl	3a24 <z_sys_init_run_level>
	boot_banner();
    3b86:	f001 f841 	bl	4c0c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3b8a:	2003      	movs	r0, #3
    3b8c:	f7ff ff4a 	bl	3a24 <z_sys_init_run_level>
	z_init_static_threads();
    3b90:	f000 f942 	bl	3e18 <z_init_static_threads>
	main();
    3b94:	f7fc fc2e 	bl	3f4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3b98:	4a03      	ldr	r2, [pc, #12]	; (3ba8 <bg_thread_main+0x30>)
    3b9a:	7b13      	ldrb	r3, [r2, #12]
    3b9c:	f023 0301 	bic.w	r3, r3, #1
    3ba0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3ba2:	bd08      	pop	{r3, pc}
    3ba4:	20000e11 	.word	0x20000e11
    3ba8:	20000270 	.word	0x20000270

00003bac <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3bac:	b508      	push	{r3, lr}
    3bae:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3bb0:	4a01      	ldr	r2, [pc, #4]	; (3bb8 <switch_to_main_thread+0xc>)
    3bb2:	4802      	ldr	r0, [pc, #8]	; (3bbc <switch_to_main_thread+0x10>)
    3bb4:	f7fd fd1a 	bl	15ec <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3bb8:	00003b79 	.word	0x00003b79
    3bbc:	20000270 	.word	0x20000270

00003bc0 <z_bss_zero>:
{
    3bc0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3bc2:	4803      	ldr	r0, [pc, #12]	; (3bd0 <z_bss_zero+0x10>)
    3bc4:	4a03      	ldr	r2, [pc, #12]	; (3bd4 <z_bss_zero+0x14>)
    3bc6:	1a12      	subs	r2, r2, r0
    3bc8:	2100      	movs	r1, #0
    3bca:	f001 fd68 	bl	569e <memset>
}
    3bce:	bd08      	pop	{r3, pc}
    3bd0:	200001a0 	.word	0x200001a0
    3bd4:	20000fd0 	.word	0x20000fd0

00003bd8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3bd8:	b500      	push	{lr}
    3bda:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3bdc:	4b1c      	ldr	r3, [pc, #112]	; (3c50 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3bde:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3be2:	4c1c      	ldr	r4, [pc, #112]	; (3c54 <z_cstart+0x7c>)
    3be4:	6963      	ldr	r3, [r4, #20]
    3be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3bea:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3bec:	23e0      	movs	r3, #224	; 0xe0
    3bee:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3bf2:	2500      	movs	r5, #0
    3bf4:	77e5      	strb	r5, [r4, #31]
    3bf6:	7625      	strb	r5, [r4, #24]
    3bf8:	7665      	strb	r5, [r4, #25]
    3bfa:	76a5      	strb	r5, [r4, #26]
    3bfc:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c02:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3c06:	6263      	str	r3, [r4, #36]	; 0x24
    3c08:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3c0c:	f7fd fe40 	bl	1890 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3c10:	f7fd fbd2 	bl	13b8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c18:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3c1c:	f7fd ff42 	bl	1aa4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3c20:	f7fd fedc 	bl	19dc <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3c24:	2401      	movs	r4, #1
    3c26:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3c2a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3c2e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3c30:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3c32:	4b09      	ldr	r3, [pc, #36]	; (3c58 <z_cstart+0x80>)
    3c34:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3c38:	f7ff fee8 	bl	3a0c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3c3c:	4628      	mov	r0, r5
    3c3e:	f7ff fef1 	bl	3a24 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3c42:	4620      	mov	r0, r4
    3c44:	f7ff feee 	bl	3a24 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3c48:	f7ff ff4c 	bl	3ae4 <prepare_multithreading>
    3c4c:	f7ff ffae 	bl	3bac <switch_to_main_thread>
    3c50:	20001d80 	.word	0x20001d80
    3c54:	e000ed00 	.word	0xe000ed00
    3c58:	20000dbc 	.word	0x20000dbc

00003c5c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3c5c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c5e:	4c06      	ldr	r4, [pc, #24]	; (3c78 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3c60:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c62:	4b06      	ldr	r3, [pc, #24]	; (3c7c <init_mem_slab_module+0x20>)
    3c64:	429c      	cmp	r4, r3
    3c66:	d206      	bcs.n	3c76 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3c68:	4620      	mov	r0, r4
    3c6a:	f002 f934 	bl	5ed6 <create_free_list>
		if (rc < 0) {
    3c6e:	2800      	cmp	r0, #0
    3c70:	db01      	blt.n	3c76 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c72:	341c      	adds	r4, #28
    3c74:	e7f5      	b.n	3c62 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    3c76:	bd10      	pop	{r4, pc}
    3c78:	20000150 	.word	0x20000150
    3c7c:	20000150 	.word	0x20000150

00003c80 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c82:	b083      	sub	sp, #12
    3c84:	460c      	mov	r4, r1
    3c86:	461f      	mov	r7, r3
	__asm__ volatile(
    3c88:	f04f 0320 	mov.w	r3, #32
    3c8c:	f3ef 8111 	mrs	r1, BASEPRI
    3c90:	f383 8812 	msr	BASEPRI_MAX, r3
    3c94:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3c98:	6943      	ldr	r3, [r0, #20]
    3c9a:	b16b      	cbz	r3, 3cb8 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    3c9c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3c9e:	6943      	ldr	r3, [r0, #20]
    3ca0:	681b      	ldr	r3, [r3, #0]
    3ca2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3ca4:	6983      	ldr	r3, [r0, #24]
    3ca6:	3301      	adds	r3, #1
    3ca8:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3caa:	2000      	movs	r0, #0
	__asm__ volatile(
    3cac:	f381 8811 	msr	BASEPRI, r1
    3cb0:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3cb4:	b003      	add	sp, #12
    3cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cb8:	4616      	mov	r6, r2
    3cba:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3cbe:	ea56 0307 	orrs.w	r3, r6, r7
    3cc2:	d104      	bne.n	3cce <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    3cc4:	2300      	movs	r3, #0
    3cc6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    3cc8:	f06f 000b 	mvn.w	r0, #11
    3ccc:	e7ee      	b.n	3cac <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3cce:	e9cd 6700 	strd	r6, r7, [sp]
    3cd2:	4602      	mov	r2, r0
    3cd4:	4628      	mov	r0, r5
    3cd6:	f000 fbe7 	bl	44a8 <z_pend_curr>
		if (result == 0) {
    3cda:	2800      	cmp	r0, #0
    3cdc:	d1ea      	bne.n	3cb4 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    3cde:	4b02      	ldr	r3, [pc, #8]	; (3ce8 <k_mem_slab_alloc+0x68>)
    3ce0:	689b      	ldr	r3, [r3, #8]
    3ce2:	695b      	ldr	r3, [r3, #20]
    3ce4:	6023      	str	r3, [r4, #0]
		return result;
    3ce6:	e7e5      	b.n	3cb4 <k_mem_slab_alloc+0x34>
    3ce8:	20000dbc 	.word	0x20000dbc

00003cec <z_thread_monitor_exit>:
	__asm__ volatile(
    3cec:	f04f 0320 	mov.w	r3, #32
    3cf0:	f3ef 8111 	mrs	r1, BASEPRI
    3cf4:	f383 8812 	msr	BASEPRI_MAX, r3
    3cf8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3cfc:	4b0a      	ldr	r3, [pc, #40]	; (3d28 <z_thread_monitor_exit+0x3c>)
    3cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d00:	4283      	cmp	r3, r0
    3d02:	d104      	bne.n	3d0e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3d04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3d06:	4b08      	ldr	r3, [pc, #32]	; (3d28 <z_thread_monitor_exit+0x3c>)
    3d08:	629a      	str	r2, [r3, #40]	; 0x28
    3d0a:	e007      	b.n	3d1c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3d0c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3d0e:	b113      	cbz	r3, 3d16 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3d12:	4282      	cmp	r2, r0
    3d14:	d1fa      	bne.n	3d0c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3d16:	b10b      	cbz	r3, 3d1c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3d18:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3d1a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3d1c:	f381 8811 	msr	BASEPRI, r1
    3d20:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3d24:	4770      	bx	lr
    3d26:	bf00      	nop
    3d28:	20000dbc 	.word	0x20000dbc

00003d2c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3d2c:	b538      	push	{r3, r4, r5, lr}
    3d2e:	4614      	mov	r4, r2
    3d30:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3d32:	ea54 0305 	orrs.w	r3, r4, r5
    3d36:	d102      	bne.n	3d3e <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    3d38:	f002 f936 	bl	5fa8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3d3c:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3d3e:	462b      	mov	r3, r5
    3d40:	4902      	ldr	r1, [pc, #8]	; (3d4c <schedule_new_thread+0x20>)
    3d42:	3018      	adds	r0, #24
    3d44:	f000 fe36 	bl	49b4 <z_add_timeout>
    3d48:	e7f8      	b.n	3d3c <schedule_new_thread+0x10>
    3d4a:	bf00      	nop
    3d4c:	000060a9 	.word	0x000060a9

00003d50 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d54:	b085      	sub	sp, #20
    3d56:	4604      	mov	r4, r0
    3d58:	460f      	mov	r7, r1
    3d5a:	4615      	mov	r5, r2
    3d5c:	461e      	mov	r6, r3
    3d5e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3d62:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3d66:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3d6a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3d6e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3d72:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3d74:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3d78:	2204      	movs	r2, #4
    3d7a:	9911      	ldr	r1, [sp, #68]	; 0x44
    3d7c:	f002 f918 	bl	5fb0 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3d80:	462a      	mov	r2, r5
    3d82:	4639      	mov	r1, r7
    3d84:	4620      	mov	r0, r4
    3d86:	f002 f8f7 	bl	5f78 <setup_thread_stack>
    3d8a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d8c:	f8cd 8008 	str.w	r8, [sp, #8]
    3d90:	f8cd 9004 	str.w	r9, [sp, #4]
    3d94:	f8cd a000 	str.w	sl, [sp]
    3d98:	4633      	mov	r3, r6
    3d9a:	4602      	mov	r2, r0
    3d9c:	4639      	mov	r1, r7
    3d9e:	4620      	mov	r0, r4
    3da0:	f7fd fbd4 	bl	154c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3da4:	2300      	movs	r3, #0
    3da6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3da8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3daa:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3dae:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3db2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3db6:	f04f 0320 	mov.w	r3, #32
    3dba:	f3ef 8211 	mrs	r2, BASEPRI
    3dbe:	f383 8812 	msr	BASEPRI_MAX, r3
    3dc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3dc6:	4b13      	ldr	r3, [pc, #76]	; (3e14 <z_setup_new_thread+0xc4>)
    3dc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3dca:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    3dcc:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3dce:	f382 8811 	msr	BASEPRI, r2
    3dd2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3dd6:	f1bb 0f00 	cmp.w	fp, #0
    3dda:	d013      	beq.n	3e04 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3ddc:	221f      	movs	r2, #31
    3dde:	4659      	mov	r1, fp
    3de0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3de4:	f001 fc0b 	bl	55fe <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3de8:	2300      	movs	r3, #0
    3dea:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3dee:	4b09      	ldr	r3, [pc, #36]	; (3e14 <z_setup_new_thread+0xc4>)
    3df0:	689b      	ldr	r3, [r3, #8]
    3df2:	b15b      	cbz	r3, 3e0c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3df8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3dfc:	4628      	mov	r0, r5
    3dfe:	b005      	add	sp, #20
    3e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3e04:	2300      	movs	r3, #0
    3e06:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3e0a:	e7f0      	b.n	3dee <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3e0c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3e10:	e7f4      	b.n	3dfc <z_setup_new_thread+0xac>
    3e12:	bf00      	nop
    3e14:	20000dbc 	.word	0x20000dbc

00003e18 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3e18:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    3e1c:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3e1e:	4c23      	ldr	r4, [pc, #140]	; (3eac <z_init_static_threads+0x94>)
    3e20:	4b23      	ldr	r3, [pc, #140]	; (3eb0 <z_init_static_threads+0x98>)
    3e22:	429c      	cmp	r4, r3
    3e24:	d215      	bcs.n	3e52 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    3e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3e28:	9305      	str	r3, [sp, #20]
    3e2a:	6a23      	ldr	r3, [r4, #32]
    3e2c:	9304      	str	r3, [sp, #16]
    3e2e:	69e3      	ldr	r3, [r4, #28]
    3e30:	9303      	str	r3, [sp, #12]
    3e32:	69a3      	ldr	r3, [r4, #24]
    3e34:	9302      	str	r3, [sp, #8]
    3e36:	6963      	ldr	r3, [r4, #20]
    3e38:	9301      	str	r3, [sp, #4]
    3e3a:	6923      	ldr	r3, [r4, #16]
    3e3c:	9300      	str	r3, [sp, #0]
    3e3e:	68e3      	ldr	r3, [r4, #12]
    3e40:	68a2      	ldr	r2, [r4, #8]
    3e42:	6861      	ldr	r1, [r4, #4]
    3e44:	6820      	ldr	r0, [r4, #0]
    3e46:	f7ff ff83 	bl	3d50 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3e4a:	6823      	ldr	r3, [r4, #0]
    3e4c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3e4e:	3430      	adds	r4, #48	; 0x30
    3e50:	e7e6      	b.n	3e20 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3e52:	f000 f9e1 	bl	4218 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3e56:	4c15      	ldr	r4, [pc, #84]	; (3eac <z_init_static_threads+0x94>)
    3e58:	e01b      	b.n	3e92 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    3e5a:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3e5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3e60:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    3e64:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    3e68:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    3e6c:	03d8      	lsls	r0, r3, #15
    3e6e:	f240 35e7 	movw	r5, #999	; 0x3e7
    3e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e76:	2300      	movs	r3, #0
    3e78:	1940      	adds	r0, r0, r5
    3e7a:	f04f 0500 	mov.w	r5, #0
    3e7e:	eb45 0101 	adc.w	r1, r5, r1
    3e82:	f7fc f93d 	bl	100 <__aeabi_uldivmod>
    3e86:	4602      	mov	r2, r0
    3e88:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3e8a:	4630      	mov	r0, r6
    3e8c:	f7ff ff4e 	bl	3d2c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    3e90:	3430      	adds	r4, #48	; 0x30
    3e92:	4b07      	ldr	r3, [pc, #28]	; (3eb0 <z_init_static_threads+0x98>)
    3e94:	429c      	cmp	r4, r3
    3e96:	d204      	bcs.n	3ea2 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3e9e:	d0f7      	beq.n	3e90 <z_init_static_threads+0x78>
    3ea0:	e7db      	b.n	3e5a <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    3ea2:	f000 fbb7 	bl	4614 <k_sched_unlock>
}
    3ea6:	b006      	add	sp, #24
    3ea8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    3eac:	20000150 	.word	0x20000150
    3eb0:	20000150 	.word	0x20000150

00003eb4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3eb4:	b508      	push	{r3, lr}
    3eb6:	e001      	b.n	3ebc <idle+0x8>
	arch_cpu_idle();
    3eb8:	f7fd fa84 	bl	13c4 <arch_cpu_idle>
	__asm__ volatile(
    3ebc:	f04f 0220 	mov.w	r2, #32
    3ec0:	f3ef 8311 	mrs	r3, BASEPRI
    3ec4:	f382 8812 	msr	BASEPRI_MAX, r2
    3ec8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3ecc:	f002 f9cf 	bl	626e <z_get_next_timeout_expiry>
    3ed0:	4b03      	ldr	r3, [pc, #12]	; (3ee0 <idle+0x2c>)
    3ed2:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    3ed4:	f7fd f8e0 	bl	1098 <pm_system_suspend>
    3ed8:	2800      	cmp	r0, #0
    3eda:	d1ef      	bne.n	3ebc <idle+0x8>
    3edc:	e7ec      	b.n	3eb8 <idle+0x4>
    3ede:	bf00      	nop
    3ee0:	20000dbc 	.word	0x20000dbc

00003ee4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3ee8:	b083      	sub	sp, #12
    3eea:	4604      	mov	r4, r0
    3eec:	461d      	mov	r5, r3
    3eee:	f04f 0320 	mov.w	r3, #32
    3ef2:	f3ef 8711 	mrs	r7, BASEPRI
    3ef6:	f383 8812 	msr	BASEPRI_MAX, r3
    3efa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3efe:	68c1      	ldr	r1, [r0, #12]
    3f00:	b999      	cbnz	r1, 3f2a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3f02:	2900      	cmp	r1, #0
    3f04:	d14f      	bne.n	3fa6 <z_impl_k_mutex_lock+0xc2>
    3f06:	4b3a      	ldr	r3, [pc, #232]	; (3ff0 <z_impl_k_mutex_lock+0x10c>)
    3f08:	689b      	ldr	r3, [r3, #8]
    3f0a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3f0e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3f10:	3101      	adds	r1, #1
    3f12:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3f14:	4b36      	ldr	r3, [pc, #216]	; (3ff0 <z_impl_k_mutex_lock+0x10c>)
    3f16:	689b      	ldr	r3, [r3, #8]
    3f18:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    3f1a:	f387 8811 	msr	BASEPRI, r7
    3f1e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3f22:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3f24:	b003      	add	sp, #12
    3f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f2a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3f2c:	6882      	ldr	r2, [r0, #8]
    3f2e:	4b30      	ldr	r3, [pc, #192]	; (3ff0 <z_impl_k_mutex_lock+0x10c>)
    3f30:	689b      	ldr	r3, [r3, #8]
    3f32:	429a      	cmp	r2, r3
    3f34:	d0e5      	beq.n	3f02 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3f36:	ea55 0106 	orrs.w	r1, r5, r6
    3f3a:	bf0c      	ite	eq
    3f3c:	f04f 0801 	moveq.w	r8, #1
    3f40:	f04f 0800 	movne.w	r8, #0
    3f44:	d031      	beq.n	3faa <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    3f46:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3f4a:	4649      	mov	r1, r9
    3f4c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3f50:	f002 f83f 	bl	5fd2 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3f54:	4581      	cmp	r9, r0
    3f56:	dc2f      	bgt.n	3fb8 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    3f58:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3f5c:	9600      	str	r6, [sp, #0]
    3f5e:	9501      	str	r5, [sp, #4]
    3f60:	4622      	mov	r2, r4
    3f62:	4639      	mov	r1, r7
    3f64:	4823      	ldr	r0, [pc, #140]	; (3ff4 <z_impl_k_mutex_lock+0x110>)
    3f66:	f000 fa9f 	bl	44a8 <z_pend_curr>
	if (got_mutex == 0) {
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d0da      	beq.n	3f24 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    3f6e:	f04f 0320 	mov.w	r3, #32
    3f72:	f3ef 8511 	mrs	r5, BASEPRI
    3f76:	f383 8812 	msr	BASEPRI_MAX, r3
    3f7a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3f7e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f80:	429c      	cmp	r4, r3
    3f82:	d01f      	beq.n	3fc4 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3f84:	b1f3      	cbz	r3, 3fc4 <z_impl_k_mutex_lock+0xe0>
    3f86:	6921      	ldr	r1, [r4, #16]
    3f88:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3f8c:	f002 f821 	bl	5fd2 <new_prio_for_inheritance>
    3f90:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3f92:	4620      	mov	r0, r4
    3f94:	f002 f828 	bl	5fe8 <adjust_owner_prio>
    3f98:	b9b0      	cbnz	r0, 3fc8 <z_impl_k_mutex_lock+0xe4>
    3f9a:	f1b9 0f00 	cmp.w	r9, #0
    3f9e:	d015      	beq.n	3fcc <z_impl_k_mutex_lock+0xe8>
    3fa0:	f04f 0801 	mov.w	r8, #1
    3fa4:	e012      	b.n	3fcc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    3fa6:	6923      	ldr	r3, [r4, #16]
    3fa8:	e7b1      	b.n	3f0e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    3faa:	f387 8811 	msr	BASEPRI, r7
    3fae:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3fb2:	f06f 000f 	mvn.w	r0, #15
    3fb6:	e7b5      	b.n	3f24 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    3fb8:	4601      	mov	r1, r0
    3fba:	4620      	mov	r0, r4
    3fbc:	f002 f814 	bl	5fe8 <adjust_owner_prio>
    3fc0:	4681      	mov	r9, r0
    3fc2:	e7cb      	b.n	3f5c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3fc4:	6921      	ldr	r1, [r4, #16]
    3fc6:	e7e4      	b.n	3f92 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3fc8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    3fcc:	f1b8 0f00 	cmp.w	r8, #0
    3fd0:	d106      	bne.n	3fe0 <z_impl_k_mutex_lock+0xfc>
    3fd2:	f385 8811 	msr	BASEPRI, r5
    3fd6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3fda:	f06f 000a 	mvn.w	r0, #10
    3fde:	e7a1      	b.n	3f24 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    3fe0:	4629      	mov	r1, r5
    3fe2:	4804      	ldr	r0, [pc, #16]	; (3ff4 <z_impl_k_mutex_lock+0x110>)
    3fe4:	f000 f8fc 	bl	41e0 <z_reschedule>
	return -EAGAIN;
    3fe8:	f06f 000a 	mvn.w	r0, #10
    3fec:	e79a      	b.n	3f24 <z_impl_k_mutex_lock+0x40>
    3fee:	bf00      	nop
    3ff0:	20000dbc 	.word	0x20000dbc
    3ff4:	20000de8 	.word	0x20000de8

00003ff8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3ff8:	6882      	ldr	r2, [r0, #8]
    3ffa:	2a00      	cmp	r2, #0
    3ffc:	d035      	beq.n	406a <z_impl_k_mutex_unlock+0x72>
{
    3ffe:	b538      	push	{r3, r4, r5, lr}
    4000:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4002:	4b1d      	ldr	r3, [pc, #116]	; (4078 <z_impl_k_mutex_unlock+0x80>)
    4004:	689b      	ldr	r3, [r3, #8]
    4006:	429a      	cmp	r2, r3
    4008:	d132      	bne.n	4070 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    400a:	7bda      	ldrb	r2, [r3, #15]
    400c:	3a01      	subs	r2, #1
    400e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4010:	68c3      	ldr	r3, [r0, #12]
    4012:	2b01      	cmp	r3, #1
    4014:	d905      	bls.n	4022 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4016:	3b01      	subs	r3, #1
    4018:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    401a:	f000 fafb 	bl	4614 <k_sched_unlock>

	return 0;
    401e:	2000      	movs	r0, #0
}
    4020:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4022:	f04f 0320 	mov.w	r3, #32
    4026:	f3ef 8511 	mrs	r5, BASEPRI
    402a:	f383 8812 	msr	BASEPRI_MAX, r3
    402e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4032:	6901      	ldr	r1, [r0, #16]
    4034:	f001 ffd8 	bl	5fe8 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4038:	4620      	mov	r0, r4
    403a:	f002 f8b4 	bl	61a6 <z_unpend_first_thread>
	mutex->owner = new_owner;
    403e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4040:	b160      	cbz	r0, 405c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4042:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4046:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4048:	2300      	movs	r3, #0
    404a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    404e:	f002 f80f 	bl	6070 <z_ready_thread>
		z_reschedule(&lock, key);
    4052:	4629      	mov	r1, r5
    4054:	4809      	ldr	r0, [pc, #36]	; (407c <z_impl_k_mutex_unlock+0x84>)
    4056:	f000 f8c3 	bl	41e0 <z_reschedule>
    405a:	e7de      	b.n	401a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    405c:	2300      	movs	r3, #0
    405e:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    4060:	f385 8811 	msr	BASEPRI, r5
    4064:	f3bf 8f6f 	isb	sy
    4068:	e7d7      	b.n	401a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    406a:	f06f 0015 	mvn.w	r0, #21
}
    406e:	4770      	bx	lr
		return -EPERM;
    4070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4074:	e7d4      	b.n	4020 <z_impl_k_mutex_unlock+0x28>
    4076:	bf00      	nop
    4078:	20000dbc 	.word	0x20000dbc
    407c:	20000de8 	.word	0x20000de8

00004080 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4080:	b538      	push	{r3, r4, r5, lr}
    4082:	4604      	mov	r4, r0
	__asm__ volatile(
    4084:	f04f 0320 	mov.w	r3, #32
    4088:	f3ef 8511 	mrs	r5, BASEPRI
    408c:	f383 8812 	msr	BASEPRI_MAX, r3
    4090:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4094:	f002 f887 	bl	61a6 <z_unpend_first_thread>

	if (thread != NULL) {
    4098:	b148      	cbz	r0, 40ae <z_impl_k_sem_give+0x2e>
    409a:	2200      	movs	r2, #0
    409c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    40a0:	f001 ffe6 	bl	6070 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    40a4:	4629      	mov	r1, r5
    40a6:	4807      	ldr	r0, [pc, #28]	; (40c4 <z_impl_k_sem_give+0x44>)
    40a8:	f000 f89a 	bl	41e0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    40ac:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    40ae:	68a3      	ldr	r3, [r4, #8]
    40b0:	68e2      	ldr	r2, [r4, #12]
    40b2:	4293      	cmp	r3, r2
    40b4:	d003      	beq.n	40be <z_impl_k_sem_give+0x3e>
    40b6:	2201      	movs	r2, #1
    40b8:	4413      	add	r3, r2
    40ba:	60a3      	str	r3, [r4, #8]
}
    40bc:	e7f2      	b.n	40a4 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    40be:	2200      	movs	r2, #0
    40c0:	e7fa      	b.n	40b8 <z_impl_k_sem_give+0x38>
    40c2:	bf00      	nop
    40c4:	20000de8 	.word	0x20000de8

000040c8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    40c8:	b530      	push	{r4, r5, lr}
    40ca:	b083      	sub	sp, #12
    40cc:	461d      	mov	r5, r3
    40ce:	f04f 0320 	mov.w	r3, #32
    40d2:	f3ef 8111 	mrs	r1, BASEPRI
    40d6:	f383 8812 	msr	BASEPRI_MAX, r3
    40da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    40de:	6883      	ldr	r3, [r0, #8]
    40e0:	b143      	cbz	r3, 40f4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    40e2:	3b01      	subs	r3, #1
    40e4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    40e6:	f381 8811 	msr	BASEPRI, r1
    40ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    40ee:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    40f0:	b003      	add	sp, #12
    40f2:	bd30      	pop	{r4, r5, pc}
    40f4:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    40f6:	ea54 0305 	orrs.w	r3, r4, r5
    40fa:	d006      	beq.n	410a <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    40fc:	e9cd 4500 	strd	r4, r5, [sp]
    4100:	4602      	mov	r2, r0
    4102:	4805      	ldr	r0, [pc, #20]	; (4118 <z_impl_k_sem_take+0x50>)
    4104:	f000 f9d0 	bl	44a8 <z_pend_curr>
	return ret;
    4108:	e7f2      	b.n	40f0 <z_impl_k_sem_take+0x28>
    410a:	f381 8811 	msr	BASEPRI, r1
    410e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4112:	f06f 000f 	mvn.w	r0, #15
    4116:	e7eb      	b.n	40f0 <z_impl_k_sem_take+0x28>
    4118:	20000de8 	.word	0x20000de8

0000411c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    411c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    411e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4122:	bf08      	it	eq
    4124:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    4128:	d100      	bne.n	412c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    412a:	bd38      	pop	{r3, r4, r5, pc}
    412c:	4902      	ldr	r1, [pc, #8]	; (4138 <add_thread_timeout+0x1c>)
    412e:	3018      	adds	r0, #24
    4130:	f000 fc40 	bl	49b4 <z_add_timeout>
    4134:	e7f9      	b.n	412a <add_thread_timeout+0xe>
    4136:	bf00      	nop
    4138:	000060a9 	.word	0x000060a9

0000413c <z_reset_time_slice>:
{
    413c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    413e:	4b08      	ldr	r3, [pc, #32]	; (4160 <z_reset_time_slice+0x24>)
    4140:	681b      	ldr	r3, [r3, #0]
    4142:	b903      	cbnz	r3, 4146 <z_reset_time_slice+0xa>
}
    4144:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4146:	f7fe fc89 	bl	2a5c <sys_clock_elapsed>
    414a:	4603      	mov	r3, r0
    414c:	4a04      	ldr	r2, [pc, #16]	; (4160 <z_reset_time_slice+0x24>)
    414e:	6810      	ldr	r0, [r2, #0]
    4150:	4403      	add	r3, r0
    4152:	4a04      	ldr	r2, [pc, #16]	; (4164 <z_reset_time_slice+0x28>)
    4154:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4156:	2100      	movs	r1, #0
    4158:	f002 f89f 	bl	629a <z_set_timeout_expiry>
}
    415c:	e7f2      	b.n	4144 <z_reset_time_slice+0x8>
    415e:	bf00      	nop
    4160:	20000df0 	.word	0x20000df0
    4164:	20000dbc 	.word	0x20000dbc

00004168 <k_sched_time_slice_set>:
{
    4168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    416c:	4606      	mov	r6, r0
    416e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    4170:	2300      	movs	r3, #0
	__asm__ volatile(
    4172:	f04f 0220 	mov.w	r2, #32
    4176:	f3ef 8711 	mrs	r7, BASEPRI
    417a:	f382 8812 	msr	BASEPRI_MAX, r2
    417e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4182:	e009      	b.n	4198 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    4184:	4b13      	ldr	r3, [pc, #76]	; (41d4 <k_sched_time_slice_set+0x6c>)
    4186:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    418a:	f7ff ffd7 	bl	413c <z_reset_time_slice>
	__asm__ volatile(
    418e:	f387 8811 	msr	BASEPRI, r7
    4192:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4196:	2301      	movs	r3, #1
    4198:	b9cb      	cbnz	r3, 41ce <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    419a:	2300      	movs	r3, #0
    419c:	4a0e      	ldr	r2, [pc, #56]	; (41d8 <k_sched_time_slice_set+0x70>)
    419e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    41a0:	0c75      	lsrs	r5, r6, #17
    41a2:	03f4      	lsls	r4, r6, #15
    41a4:	f240 30e7 	movw	r0, #999	; 0x3e7
    41a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41ac:	2300      	movs	r3, #0
    41ae:	1820      	adds	r0, r4, r0
    41b0:	f04f 0100 	mov.w	r1, #0
    41b4:	eb45 0101 	adc.w	r1, r5, r1
    41b8:	f7fb ffa2 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    41bc:	4b07      	ldr	r3, [pc, #28]	; (41dc <k_sched_time_slice_set+0x74>)
    41be:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    41c0:	2e00      	cmp	r6, #0
    41c2:	dddf      	ble.n	4184 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    41c4:	2802      	cmp	r0, #2
    41c6:	bfb8      	it	lt
    41c8:	2002      	movlt	r0, #2
    41ca:	6018      	str	r0, [r3, #0]
    41cc:	e7da      	b.n	4184 <k_sched_time_slice_set+0x1c>
}
    41ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41d2:	bf00      	nop
    41d4:	20000dec 	.word	0x20000dec
    41d8:	20000dbc 	.word	0x20000dbc
    41dc:	20000df0 	.word	0x20000df0

000041e0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    41e0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    41e2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    41e4:	b921      	cbnz	r1, 41f0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    41e6:	f3ef 8305 	mrs	r3, IPSR
    41ea:	b913      	cbnz	r3, 41f2 <z_reschedule+0x12>
    41ec:	2101      	movs	r1, #1
    41ee:	e000      	b.n	41f2 <z_reschedule+0x12>
    41f0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    41f2:	f011 0f01 	tst.w	r1, #1
    41f6:	d007      	beq.n	4208 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    41f8:	4b06      	ldr	r3, [pc, #24]	; (4214 <z_reschedule+0x34>)
    41fa:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    41fc:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    41fe:	429a      	cmp	r2, r3
    4200:	d002      	beq.n	4208 <z_reschedule+0x28>
	ret = arch_swap(key);
    4202:	f7fd f94b 	bl	149c <arch_swap>
		z_swap(lock, key);
    4206:	e003      	b.n	4210 <z_reschedule+0x30>
    4208:	f380 8811 	msr	BASEPRI, r0
    420c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4210:	bd08      	pop	{r3, pc}
    4212:	bf00      	nop
    4214:	20000dbc 	.word	0x20000dbc

00004218 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4218:	2300      	movs	r3, #0
	__asm__ volatile(
    421a:	f04f 0220 	mov.w	r2, #32
    421e:	f3ef 8111 	mrs	r1, BASEPRI
    4222:	f382 8812 	msr	BASEPRI_MAX, r2
    4226:	f3bf 8f6f 	isb	sy
    422a:	b953      	cbnz	r3, 4242 <k_sched_lock+0x2a>
    422c:	4b05      	ldr	r3, [pc, #20]	; (4244 <k_sched_lock+0x2c>)
    422e:	689a      	ldr	r2, [r3, #8]
    4230:	7bd3      	ldrb	r3, [r2, #15]
    4232:	3b01      	subs	r3, #1
    4234:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4236:	f381 8811 	msr	BASEPRI, r1
    423a:	f3bf 8f6f 	isb	sy
    423e:	2301      	movs	r3, #1
    4240:	e7f3      	b.n	422a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4242:	4770      	bx	lr
    4244:	20000dbc 	.word	0x20000dbc

00004248 <update_cache>:
{
    4248:	b538      	push	{r3, r4, r5, lr}
    424a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    424c:	480f      	ldr	r0, [pc, #60]	; (428c <update_cache+0x44>)
    424e:	f001 ff08 	bl	6062 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4252:	4605      	mov	r5, r0
    4254:	b170      	cbz	r0, 4274 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4256:	b984      	cbnz	r4, 427a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4258:	4b0d      	ldr	r3, [pc, #52]	; (4290 <update_cache+0x48>)
    425a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    425c:	7b5a      	ldrb	r2, [r3, #13]
    425e:	f012 0f1f 	tst.w	r2, #31
    4262:	d10a      	bne.n	427a <update_cache+0x32>
	return node->next != NULL;
    4264:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4266:	b942      	cbnz	r2, 427a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4268:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    426a:	2a7f      	cmp	r2, #127	; 0x7f
    426c:	d905      	bls.n	427a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    426e:	4a08      	ldr	r2, [pc, #32]	; (4290 <update_cache+0x48>)
    4270:	61d3      	str	r3, [r2, #28]
    4272:	e00a      	b.n	428a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4274:	4b06      	ldr	r3, [pc, #24]	; (4290 <update_cache+0x48>)
    4276:	68dd      	ldr	r5, [r3, #12]
    4278:	e7ed      	b.n	4256 <update_cache+0xe>
		if (thread != _current) {
    427a:	4b05      	ldr	r3, [pc, #20]	; (4290 <update_cache+0x48>)
    427c:	689b      	ldr	r3, [r3, #8]
    427e:	42ab      	cmp	r3, r5
    4280:	d001      	beq.n	4286 <update_cache+0x3e>
			z_reset_time_slice();
    4282:	f7ff ff5b 	bl	413c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4286:	4b02      	ldr	r3, [pc, #8]	; (4290 <update_cache+0x48>)
    4288:	61dd      	str	r5, [r3, #28]
}
    428a:	bd38      	pop	{r3, r4, r5, pc}
    428c:	20000ddc 	.word	0x20000ddc
    4290:	20000dbc 	.word	0x20000dbc

00004294 <move_thread_to_end_of_prio_q>:
{
    4294:	b538      	push	{r3, r4, r5, lr}
    4296:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4298:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    429a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    429e:	2b00      	cmp	r3, #0
    42a0:	db28      	blt.n	42f4 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    42a2:	7b6b      	ldrb	r3, [r5, #13]
    42a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    42a8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    42aa:	4b1a      	ldr	r3, [pc, #104]	; (4314 <move_thread_to_end_of_prio_q+0x80>)
    42ac:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42b0:	429c      	cmp	r4, r3
    42b2:	d02d      	beq.n	4310 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42b4:	b16c      	cbz	r4, 42d2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    42b6:	4621      	mov	r1, r4
    42b8:	4628      	mov	r0, r5
    42ba:	f001 feab 	bl	6014 <z_sched_prio_cmp>
    42be:	2800      	cmp	r0, #0
    42c0:	dc20      	bgt.n	4304 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42c2:	b134      	cbz	r4, 42d2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    42c4:	4b13      	ldr	r3, [pc, #76]	; (4314 <move_thread_to_end_of_prio_q+0x80>)
    42c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42c8:	429c      	cmp	r4, r3
    42ca:	d002      	beq.n	42d2 <move_thread_to_end_of_prio_q+0x3e>
    42cc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42ce:	2c00      	cmp	r4, #0
    42d0:	d1f0      	bne.n	42b4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    42d2:	4b10      	ldr	r3, [pc, #64]	; (4314 <move_thread_to_end_of_prio_q+0x80>)
    42d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    42d6:	f103 0120 	add.w	r1, r3, #32
    42da:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    42dc:	606a      	str	r2, [r5, #4]

	tail->next = node;
    42de:	6015      	str	r5, [r2, #0]
	list->tail = node;
    42e0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    42e2:	4b0c      	ldr	r3, [pc, #48]	; (4314 <move_thread_to_end_of_prio_q+0x80>)
    42e4:	6898      	ldr	r0, [r3, #8]
    42e6:	42a8      	cmp	r0, r5
    42e8:	bf14      	ite	ne
    42ea:	2000      	movne	r0, #0
    42ec:	2001      	moveq	r0, #1
    42ee:	f7ff ffab 	bl	4248 <update_cache>
}
    42f2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    42f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    42f8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    42fa:	4601      	mov	r1, r0
    42fc:	4806      	ldr	r0, [pc, #24]	; (4318 <move_thread_to_end_of_prio_q+0x84>)
    42fe:	f001 fea8 	bl	6052 <z_priq_dumb_remove>
}
    4302:	e7ce      	b.n	42a2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4304:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4306:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4308:	602c      	str	r4, [r5, #0]
	prev->next = node;
    430a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    430c:	6065      	str	r5, [r4, #4]
}
    430e:	e7e8      	b.n	42e2 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4310:	2400      	movs	r4, #0
    4312:	e7cf      	b.n	42b4 <move_thread_to_end_of_prio_q+0x20>
    4314:	20000dbc 	.word	0x20000dbc
    4318:	20000ddc 	.word	0x20000ddc

0000431c <z_time_slice>:
{
    431c:	b510      	push	{r4, lr}
	__asm__ volatile(
    431e:	f04f 0320 	mov.w	r3, #32
    4322:	f3ef 8411 	mrs	r4, BASEPRI
    4326:	f383 8812 	msr	BASEPRI_MAX, r3
    432a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    432e:	4b1c      	ldr	r3, [pc, #112]	; (43a0 <z_time_slice+0x84>)
    4330:	689b      	ldr	r3, [r3, #8]
    4332:	4a1c      	ldr	r2, [pc, #112]	; (43a4 <z_time_slice+0x88>)
    4334:	6812      	ldr	r2, [r2, #0]
    4336:	4293      	cmp	r3, r2
    4338:	d01d      	beq.n	4376 <z_time_slice+0x5a>
	pending_current = NULL;
    433a:	4a1a      	ldr	r2, [pc, #104]	; (43a4 <z_time_slice+0x88>)
    433c:	2100      	movs	r1, #0
    433e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4340:	4a19      	ldr	r2, [pc, #100]	; (43a8 <z_time_slice+0x8c>)
    4342:	6812      	ldr	r2, [r2, #0]
    4344:	b322      	cbz	r2, 4390 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4346:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    4348:	2a7f      	cmp	r2, #127	; 0x7f
    434a:	d821      	bhi.n	4390 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    434c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    434e:	f012 0f1f 	tst.w	r2, #31
    4352:	d11d      	bne.n	4390 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4354:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4358:	4a14      	ldr	r2, [pc, #80]	; (43ac <z_time_slice+0x90>)
    435a:	6812      	ldr	r2, [r2, #0]
    435c:	4291      	cmp	r1, r2
    435e:	db17      	blt.n	4390 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    4360:	4a13      	ldr	r2, [pc, #76]	; (43b0 <z_time_slice+0x94>)
    4362:	4293      	cmp	r3, r2
    4364:	d014      	beq.n	4390 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    4366:	4a0e      	ldr	r2, [pc, #56]	; (43a0 <z_time_slice+0x84>)
    4368:	6912      	ldr	r2, [r2, #16]
    436a:	4282      	cmp	r2, r0
    436c:	dd0a      	ble.n	4384 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    436e:	1a10      	subs	r0, r2, r0
    4370:	4b0b      	ldr	r3, [pc, #44]	; (43a0 <z_time_slice+0x84>)
    4372:	6118      	str	r0, [r3, #16]
    4374:	e00f      	b.n	4396 <z_time_slice+0x7a>
		z_reset_time_slice();
    4376:	f7ff fee1 	bl	413c <z_reset_time_slice>
	__asm__ volatile(
    437a:	f384 8811 	msr	BASEPRI, r4
    437e:	f3bf 8f6f 	isb	sy
		return;
    4382:	e00c      	b.n	439e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    4384:	4618      	mov	r0, r3
    4386:	f7ff ff85 	bl	4294 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    438a:	f7ff fed7 	bl	413c <z_reset_time_slice>
    438e:	e002      	b.n	4396 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    4390:	4b03      	ldr	r3, [pc, #12]	; (43a0 <z_time_slice+0x84>)
    4392:	2200      	movs	r2, #0
    4394:	611a      	str	r2, [r3, #16]
    4396:	f384 8811 	msr	BASEPRI, r4
    439a:	f3bf 8f6f 	isb	sy
}
    439e:	bd10      	pop	{r4, pc}
    43a0:	20000dbc 	.word	0x20000dbc
    43a4:	20000de8 	.word	0x20000de8
    43a8:	20000df0 	.word	0x20000df0
    43ac:	20000dec 	.word	0x20000dec
    43b0:	200001c0 	.word	0x200001c0

000043b4 <ready_thread>:
{
    43b4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    43b6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    43b8:	f990 200d 	ldrsb.w	r2, [r0, #13]
    43bc:	2a00      	cmp	r2, #0
    43be:	db2d      	blt.n	441c <ready_thread+0x68>
    43c0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    43c2:	f013 0f1f 	tst.w	r3, #31
    43c6:	d105      	bne.n	43d4 <ready_thread+0x20>
	return node->next != NULL;
    43c8:	6982      	ldr	r2, [r0, #24]
    43ca:	b10a      	cbz	r2, 43d0 <ready_thread+0x1c>
    43cc:	2200      	movs	r2, #0
    43ce:	e002      	b.n	43d6 <ready_thread+0x22>
    43d0:	2201      	movs	r2, #1
    43d2:	e000      	b.n	43d6 <ready_thread+0x22>
    43d4:	2200      	movs	r2, #0
    43d6:	b30a      	cbz	r2, 441c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    43d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43dc:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    43de:	4b14      	ldr	r3, [pc, #80]	; (4430 <ready_thread+0x7c>)
    43e0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43e4:	429d      	cmp	r5, r3
    43e6:	d020      	beq.n	442a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43e8:	b16d      	cbz	r5, 4406 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    43ea:	4629      	mov	r1, r5
    43ec:	4620      	mov	r0, r4
    43ee:	f001 fe11 	bl	6014 <z_sched_prio_cmp>
    43f2:	2800      	cmp	r0, #0
    43f4:	dc13      	bgt.n	441e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    43f6:	b135      	cbz	r5, 4406 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    43f8:	4b0d      	ldr	r3, [pc, #52]	; (4430 <ready_thread+0x7c>)
    43fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43fc:	429d      	cmp	r5, r3
    43fe:	d002      	beq.n	4406 <ready_thread+0x52>
    4400:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4402:	2d00      	cmp	r5, #0
    4404:	d1f0      	bne.n	43e8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    4406:	4b0a      	ldr	r3, [pc, #40]	; (4430 <ready_thread+0x7c>)
    4408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    440a:	f103 0120 	add.w	r1, r3, #32
    440e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4410:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4412:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4414:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4416:	2000      	movs	r0, #0
    4418:	f7ff ff16 	bl	4248 <update_cache>
}
    441c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    441e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4420:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4422:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4424:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4426:	606c      	str	r4, [r5, #4]
}
    4428:	e7f5      	b.n	4416 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    442a:	2500      	movs	r5, #0
    442c:	e7dc      	b.n	43e8 <ready_thread+0x34>
    442e:	bf00      	nop
    4430:	20000dbc 	.word	0x20000dbc

00004434 <z_sched_start>:
{
    4434:	b510      	push	{r4, lr}
	__asm__ volatile(
    4436:	f04f 0320 	mov.w	r3, #32
    443a:	f3ef 8411 	mrs	r4, BASEPRI
    443e:	f383 8812 	msr	BASEPRI_MAX, r3
    4442:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4446:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4448:	f013 0f04 	tst.w	r3, #4
    444c:	d104      	bne.n	4458 <z_sched_start+0x24>
	__asm__ volatile(
    444e:	f384 8811 	msr	BASEPRI, r4
    4452:	f3bf 8f6f 	isb	sy
}
    4456:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4458:	f023 0304 	bic.w	r3, r3, #4
    445c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    445e:	f7ff ffa9 	bl	43b4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4462:	4621      	mov	r1, r4
    4464:	4801      	ldr	r0, [pc, #4]	; (446c <z_sched_start+0x38>)
    4466:	f7ff febb 	bl	41e0 <z_reschedule>
    446a:	e7f4      	b.n	4456 <z_sched_start+0x22>
    446c:	20000dec 	.word	0x20000dec

00004470 <unready_thread>:
{
    4470:	b510      	push	{r4, lr}
    4472:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4474:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4476:	f990 300d 	ldrsb.w	r3, [r0, #13]
    447a:	2b00      	cmp	r3, #0
    447c:	db08      	blt.n	4490 <unready_thread+0x20>
	update_cache(thread == _current);
    447e:	4b08      	ldr	r3, [pc, #32]	; (44a0 <unready_thread+0x30>)
    4480:	6898      	ldr	r0, [r3, #8]
    4482:	42a0      	cmp	r0, r4
    4484:	bf14      	ite	ne
    4486:	2000      	movne	r0, #0
    4488:	2001      	moveq	r0, #1
    448a:	f7ff fedd 	bl	4248 <update_cache>
}
    448e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4490:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4494:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4496:	4601      	mov	r1, r0
    4498:	4802      	ldr	r0, [pc, #8]	; (44a4 <unready_thread+0x34>)
    449a:	f001 fdda 	bl	6052 <z_priq_dumb_remove>
}
    449e:	e7ee      	b.n	447e <unready_thread+0xe>
    44a0:	20000dbc 	.word	0x20000dbc
    44a4:	20000ddc 	.word	0x20000ddc

000044a8 <z_pend_curr>:
{
    44a8:	b510      	push	{r4, lr}
    44aa:	460c      	mov	r4, r1
    44ac:	4611      	mov	r1, r2
	pending_current = _current;
    44ae:	4b06      	ldr	r3, [pc, #24]	; (44c8 <z_pend_curr+0x20>)
    44b0:	6898      	ldr	r0, [r3, #8]
    44b2:	4b06      	ldr	r3, [pc, #24]	; (44cc <z_pend_curr+0x24>)
    44b4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    44b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    44ba:	f001 fe53 	bl	6164 <pend>
    44be:	4620      	mov	r0, r4
    44c0:	f7fc ffec 	bl	149c <arch_swap>
}
    44c4:	bd10      	pop	{r4, pc}
    44c6:	bf00      	nop
    44c8:	20000dbc 	.word	0x20000dbc
    44cc:	20000de8 	.word	0x20000de8

000044d0 <z_set_prio>:
{
    44d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44d4:	4604      	mov	r4, r0
    44d6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    44d8:	2300      	movs	r3, #0
	__asm__ volatile(
    44da:	f04f 0220 	mov.w	r2, #32
    44de:	f3ef 8611 	mrs	r6, BASEPRI
    44e2:	f382 8812 	msr	BASEPRI_MAX, r2
    44e6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    44ea:	4698      	mov	r8, r3
    44ec:	e008      	b.n	4500 <z_set_prio+0x30>
		if (need_sched) {
    44ee:	f012 0801 	ands.w	r8, r2, #1
    44f2:	d111      	bne.n	4518 <z_set_prio+0x48>
			thread->base.prio = prio;
    44f4:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    44f6:	f386 8811 	msr	BASEPRI, r6
    44fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    44fe:	2301      	movs	r3, #1
    4500:	461a      	mov	r2, r3
    4502:	2b00      	cmp	r3, #0
    4504:	d13d      	bne.n	4582 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    4506:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4508:	f013 0f1f 	tst.w	r3, #31
    450c:	d1ef      	bne.n	44ee <z_set_prio+0x1e>
	return node->next != NULL;
    450e:	69a1      	ldr	r1, [r4, #24]
    4510:	2900      	cmp	r1, #0
    4512:	d1ec      	bne.n	44ee <z_set_prio+0x1e>
    4514:	2201      	movs	r2, #1
    4516:	e7ea      	b.n	44ee <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    451c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    451e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 458c <z_set_prio+0xbc>
    4522:	4621      	mov	r1, r4
    4524:	4648      	mov	r0, r9
    4526:	f001 fd94 	bl	6052 <z_priq_dumb_remove>
				thread->base.prio = prio;
    452a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    452c:	7b63      	ldrb	r3, [r4, #13]
    452e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4532:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    4534:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4538:	454d      	cmp	r5, r9
    453a:	d020      	beq.n	457e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    453c:	b16d      	cbz	r5, 455a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    453e:	4629      	mov	r1, r5
    4540:	4620      	mov	r0, r4
    4542:	f001 fd67 	bl	6014 <z_sched_prio_cmp>
    4546:	2800      	cmp	r0, #0
    4548:	dc13      	bgt.n	4572 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    454a:	b135      	cbz	r5, 455a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    454c:	4b0e      	ldr	r3, [pc, #56]	; (4588 <z_set_prio+0xb8>)
    454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4550:	429d      	cmp	r5, r3
    4552:	d002      	beq.n	455a <z_set_prio+0x8a>
    4554:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4556:	2d00      	cmp	r5, #0
    4558:	d1f0      	bne.n	453c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    455a:	4b0b      	ldr	r3, [pc, #44]	; (4588 <z_set_prio+0xb8>)
    455c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    455e:	f103 0120 	add.w	r1, r3, #32
    4562:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4564:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4566:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4568:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    456a:	2001      	movs	r0, #1
    456c:	f7ff fe6c 	bl	4248 <update_cache>
    4570:	e7c1      	b.n	44f6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    4572:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4574:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4576:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4578:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    457a:	606c      	str	r4, [r5, #4]
}
    457c:	e7f5      	b.n	456a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    457e:	2500      	movs	r5, #0
    4580:	e7dc      	b.n	453c <z_set_prio+0x6c>
}
    4582:	4640      	mov	r0, r8
    4584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4588:	20000dbc 	.word	0x20000dbc
    458c:	20000ddc 	.word	0x20000ddc

00004590 <z_impl_k_thread_suspend>:
{
    4590:	b538      	push	{r3, r4, r5, lr}
    4592:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4594:	3018      	adds	r0, #24
    4596:	f001 fe4c 	bl	6232 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    459a:	2300      	movs	r3, #0
	__asm__ volatile(
    459c:	f04f 0220 	mov.w	r2, #32
    45a0:	f3ef 8511 	mrs	r5, BASEPRI
    45a4:	f382 8812 	msr	BASEPRI_MAX, r2
    45a8:	f3bf 8f6f 	isb	sy
    45ac:	e010      	b.n	45d0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    45ae:	7b63      	ldrb	r3, [r4, #13]
    45b0:	f043 0310 	orr.w	r3, r3, #16
    45b4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    45b6:	4b15      	ldr	r3, [pc, #84]	; (460c <z_impl_k_thread_suspend+0x7c>)
    45b8:	6898      	ldr	r0, [r3, #8]
    45ba:	42a0      	cmp	r0, r4
    45bc:	bf14      	ite	ne
    45be:	2000      	movne	r0, #0
    45c0:	2001      	moveq	r0, #1
    45c2:	f7ff fe41 	bl	4248 <update_cache>
	__asm__ volatile(
    45c6:	f385 8811 	msr	BASEPRI, r5
    45ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    45ce:	2301      	movs	r3, #1
    45d0:	b963      	cbnz	r3, 45ec <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    45d2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    45d4:	f994 300d 	ldrsb.w	r3, [r4, #13]
    45d8:	2b00      	cmp	r3, #0
    45da:	dae8      	bge.n	45ae <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    45dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    45e0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    45e2:	4621      	mov	r1, r4
    45e4:	480a      	ldr	r0, [pc, #40]	; (4610 <z_impl_k_thread_suspend+0x80>)
    45e6:	f001 fd34 	bl	6052 <z_priq_dumb_remove>
}
    45ea:	e7e0      	b.n	45ae <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    45ec:	4b07      	ldr	r3, [pc, #28]	; (460c <z_impl_k_thread_suspend+0x7c>)
    45ee:	689b      	ldr	r3, [r3, #8]
    45f0:	42a3      	cmp	r3, r4
    45f2:	d000      	beq.n	45f6 <z_impl_k_thread_suspend+0x66>
}
    45f4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    45f6:	f04f 0320 	mov.w	r3, #32
    45fa:	f3ef 8011 	mrs	r0, BASEPRI
    45fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4602:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4606:	f001 fd0f 	bl	6028 <z_reschedule_irqlock>
    460a:	e7f3      	b.n	45f4 <z_impl_k_thread_suspend+0x64>
    460c:	20000dbc 	.word	0x20000dbc
    4610:	20000ddc 	.word	0x20000ddc

00004614 <k_sched_unlock>:

void k_sched_unlock(void)
{
    4614:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    4616:	2300      	movs	r3, #0
    4618:	f04f 0220 	mov.w	r2, #32
    461c:	f3ef 8411 	mrs	r4, BASEPRI
    4620:	f382 8812 	msr	BASEPRI_MAX, r2
    4624:	f3bf 8f6f 	isb	sy
    4628:	b96b      	cbnz	r3, 4646 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    462a:	4b0c      	ldr	r3, [pc, #48]	; (465c <k_sched_unlock+0x48>)
    462c:	689a      	ldr	r2, [r3, #8]
    462e:	7bd3      	ldrb	r3, [r2, #15]
    4630:	3301      	adds	r3, #1
    4632:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4634:	2000      	movs	r0, #0
    4636:	f7ff fe07 	bl	4248 <update_cache>
	__asm__ volatile(
    463a:	f384 8811 	msr	BASEPRI, r4
    463e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4642:	2301      	movs	r3, #1
    4644:	e7f0      	b.n	4628 <k_sched_unlock+0x14>
	__asm__ volatile(
    4646:	f04f 0320 	mov.w	r3, #32
    464a:	f3ef 8011 	mrs	r0, BASEPRI
    464e:	f383 8812 	msr	BASEPRI_MAX, r3
    4652:	f3bf 8f6f 	isb	sy
    4656:	f001 fce7 	bl	6028 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    465a:	bd10      	pop	{r4, pc}
    465c:	20000dbc 	.word	0x20000dbc

00004660 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    4660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    4662:	7b43      	ldrb	r3, [r0, #13]
    4664:	f013 0f08 	tst.w	r3, #8
    4668:	d145      	bne.n	46f6 <end_thread+0x96>
    466a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    466c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4670:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4674:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4676:	f013 0f80 	tst.w	r3, #128	; 0x80
    467a:	d114      	bne.n	46a6 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    467c:	68ab      	ldr	r3, [r5, #8]
    467e:	b15b      	cbz	r3, 4698 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4680:	4628      	mov	r0, r5
    4682:	f001 fcc5 	bl	6010 <pended_on_thread>
    4686:	4629      	mov	r1, r5
    4688:	f001 fce3 	bl	6052 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    468c:	7b6b      	ldrb	r3, [r5, #13]
    468e:	f023 0302 	bic.w	r3, r3, #2
    4692:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    4694:	2300      	movs	r3, #0
    4696:	60ab      	str	r3, [r5, #8]
    4698:	f105 0018 	add.w	r0, r5, #24
    469c:	f001 fdc9 	bl	6232 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    46a0:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    46a4:	e01c      	b.n	46e0 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    46a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    46aa:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    46ac:	4601      	mov	r1, r0
    46ae:	4812      	ldr	r0, [pc, #72]	; (46f8 <end_thread+0x98>)
    46b0:	f001 fccf 	bl	6052 <z_priq_dumb_remove>
}
    46b4:	e7e2      	b.n	467c <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    46b6:	4620      	mov	r0, r4
    46b8:	f001 fcaa 	bl	6010 <pended_on_thread>
    46bc:	4621      	mov	r1, r4
    46be:	f001 fcc8 	bl	6052 <z_priq_dumb_remove>
    46c2:	7b63      	ldrb	r3, [r4, #13]
    46c4:	f023 0302 	bic.w	r3, r3, #2
    46c8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    46ca:	2600      	movs	r6, #0
    46cc:	60a6      	str	r6, [r4, #8]
    46ce:	f104 0018 	add.w	r0, r4, #24
    46d2:	f001 fdae 	bl	6232 <z_abort_timeout>
    46d6:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    46da:	4620      	mov	r0, r4
    46dc:	f7ff fe6a 	bl	43b4 <ready_thread>
	return list->head == list;
    46e0:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46e2:	42bc      	cmp	r4, r7
    46e4:	d001      	beq.n	46ea <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    46e6:	2c00      	cmp	r4, #0
    46e8:	d1e5      	bne.n	46b6 <end_thread+0x56>
		update_cache(1);
    46ea:	2001      	movs	r0, #1
    46ec:	f7ff fdac 	bl	4248 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    46f0:	4628      	mov	r0, r5
    46f2:	f7ff fafb 	bl	3cec <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    46f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46f8:	20000ddc 	.word	0x20000ddc

000046fc <z_sched_init>:
{
    46fc:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    46fe:	4804      	ldr	r0, [pc, #16]	; (4710 <z_sched_init+0x14>)
    4700:	f001 fd7c 	bl	61fc <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4704:	2100      	movs	r1, #0
    4706:	4608      	mov	r0, r1
    4708:	f7ff fd2e 	bl	4168 <k_sched_time_slice_set>
}
    470c:	bd08      	pop	{r3, pc}
    470e:	bf00      	nop
    4710:	20000dd8 	.word	0x20000dd8

00004714 <z_impl_k_yield>:
{
    4714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4716:	f04f 0320 	mov.w	r3, #32
    471a:	f3ef 8611 	mrs	r6, BASEPRI
    471e:	f383 8812 	msr	BASEPRI_MAX, r3
    4722:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    4726:	4c1c      	ldr	r4, [pc, #112]	; (4798 <z_impl_k_yield+0x84>)
    4728:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    472a:	7b4b      	ldrb	r3, [r1, #13]
    472c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4730:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4732:	f104 0720 	add.w	r7, r4, #32
    4736:	4638      	mov	r0, r7
    4738:	f001 fc8b 	bl	6052 <z_priq_dumb_remove>
	queue_thread(_current);
    473c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    473e:	7b6b      	ldrb	r3, [r5, #13]
    4740:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4744:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4746:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4748:	42bc      	cmp	r4, r7
    474a:	d023      	beq.n	4794 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    474c:	b16c      	cbz	r4, 476a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    474e:	4621      	mov	r1, r4
    4750:	4628      	mov	r0, r5
    4752:	f001 fc5f 	bl	6014 <z_sched_prio_cmp>
    4756:	2800      	cmp	r0, #0
    4758:	dc16      	bgt.n	4788 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    475a:	b134      	cbz	r4, 476a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    475c:	4b0e      	ldr	r3, [pc, #56]	; (4798 <z_impl_k_yield+0x84>)
    475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4760:	429c      	cmp	r4, r3
    4762:	d002      	beq.n	476a <z_impl_k_yield+0x56>
    4764:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4766:	2c00      	cmp	r4, #0
    4768:	d1f0      	bne.n	474c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    476a:	4b0b      	ldr	r3, [pc, #44]	; (4798 <z_impl_k_yield+0x84>)
    476c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    476e:	f103 0120 	add.w	r1, r3, #32
    4772:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4774:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4776:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4778:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    477a:	2001      	movs	r0, #1
    477c:	f7ff fd64 	bl	4248 <update_cache>
    4780:	4630      	mov	r0, r6
    4782:	f7fc fe8b 	bl	149c <arch_swap>
}
    4786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    4788:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    478a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    478c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    478e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4790:	6065      	str	r5, [r4, #4]
}
    4792:	e7f2      	b.n	477a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4794:	2400      	movs	r4, #0
    4796:	e7d9      	b.n	474c <z_impl_k_yield+0x38>
    4798:	20000dbc 	.word	0x20000dbc

0000479c <z_tick_sleep>:
{
    479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47a0:	4604      	mov	r4, r0
    47a2:	460d      	mov	r5, r1
	if (ticks == 0) {
    47a4:	ea54 0105 	orrs.w	r1, r4, r5
    47a8:	d037      	beq.n	481a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    47aa:	f06f 0101 	mvn.w	r1, #1
    47ae:	1a0a      	subs	r2, r1, r0
    47b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    47b4:	eb61 0305 	sbc.w	r3, r1, r5
    47b8:	2a01      	cmp	r2, #1
    47ba:	f173 0300 	sbcs.w	r3, r3, #0
    47be:	db30      	blt.n	4822 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    47c0:	f06f 0601 	mvn.w	r6, #1
    47c4:	1a36      	subs	r6, r6, r0
    47c6:	f04f 0320 	mov.w	r3, #32
    47ca:	f3ef 8811 	mrs	r8, BASEPRI
    47ce:	f383 8812 	msr	BASEPRI_MAX, r3
    47d2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    47d6:	4f16      	ldr	r7, [pc, #88]	; (4830 <z_tick_sleep+0x94>)
    47d8:	68b8      	ldr	r0, [r7, #8]
    47da:	4b16      	ldr	r3, [pc, #88]	; (4834 <z_tick_sleep+0x98>)
    47dc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    47de:	f7ff fe47 	bl	4470 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    47e2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    47e4:	4622      	mov	r2, r4
    47e6:	462b      	mov	r3, r5
    47e8:	4913      	ldr	r1, [pc, #76]	; (4838 <z_tick_sleep+0x9c>)
    47ea:	3018      	adds	r0, #24
    47ec:	f000 f8e2 	bl	49b4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    47f0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    47f2:	7b53      	ldrb	r3, [r2, #13]
    47f4:	f043 0310 	orr.w	r3, r3, #16
    47f8:	7353      	strb	r3, [r2, #13]
    47fa:	4640      	mov	r0, r8
    47fc:	f7fc fe4e 	bl	149c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4800:	2500      	movs	r5, #0
    4802:	f001 fd75 	bl	62f0 <sys_clock_tick_get_32>
    4806:	1a34      	subs	r4, r6, r0
    4808:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    480c:	2c01      	cmp	r4, #1
    480e:	f175 0300 	sbcs.w	r3, r5, #0
    4812:	da0a      	bge.n	482a <z_tick_sleep+0x8e>
	return 0;
    4814:	2000      	movs	r0, #0
}
    4816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    481a:	f7ff ff7b 	bl	4714 <z_impl_k_yield>
		return 0;
    481e:	2000      	movs	r0, #0
    4820:	e7f9      	b.n	4816 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4822:	f001 fd65 	bl	62f0 <sys_clock_tick_get_32>
    4826:	1906      	adds	r6, r0, r4
    4828:	e7cd      	b.n	47c6 <z_tick_sleep+0x2a>
		return ticks;
    482a:	4620      	mov	r0, r4
    482c:	e7f3      	b.n	4816 <z_tick_sleep+0x7a>
    482e:	bf00      	nop
    4830:	20000dbc 	.word	0x20000dbc
    4834:	20000de8 	.word	0x20000de8
    4838:	000060a9 	.word	0x000060a9

0000483c <z_impl_k_sleep>:
{
    483c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    483e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4842:	bf08      	it	eq
    4844:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    4848:	d01a      	beq.n	4880 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    484a:	f7ff ffa7 	bl	479c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    484e:	4604      	mov	r4, r0
    4850:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    4852:	0169      	lsls	r1, r5, #5
    4854:	0143      	lsls	r3, r0, #5
    4856:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    485a:	1a18      	subs	r0, r3, r0
    485c:	eb62 0305 	sbc.w	r3, r2, r5
    4860:	009a      	lsls	r2, r3, #2
    4862:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    4866:	0081      	lsls	r1, r0, #2
    4868:	4613      	mov	r3, r2
    486a:	1908      	adds	r0, r1, r4
    486c:	eb45 0303 	adc.w	r3, r5, r3
    4870:	00da      	lsls	r2, r3, #3
    4872:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    4876:	00c1      	lsls	r1, r0, #3
    4878:	0bc8      	lsrs	r0, r1, #15
    487a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    487e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    4880:	4b03      	ldr	r3, [pc, #12]	; (4890 <z_impl_k_sleep+0x54>)
    4882:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4884:	f7ff fe84 	bl	4590 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    488c:	e7f7      	b.n	487e <z_impl_k_sleep+0x42>
    488e:	bf00      	nop
    4890:	20000dbc 	.word	0x20000dbc

00004894 <z_impl_z_current_get>:
}
    4894:	4b01      	ldr	r3, [pc, #4]	; (489c <z_impl_z_current_get+0x8>)
    4896:	6898      	ldr	r0, [r3, #8]
    4898:	4770      	bx	lr
    489a:	bf00      	nop
    489c:	20000dbc 	.word	0x20000dbc

000048a0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    48a0:	b538      	push	{r3, r4, r5, lr}
    48a2:	f04f 0320 	mov.w	r3, #32
    48a6:	f3ef 8511 	mrs	r5, BASEPRI
    48aa:	f383 8812 	msr	BASEPRI_MAX, r3
    48ae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    48b2:	7b43      	ldrb	r3, [r0, #13]
    48b4:	f013 0f08 	tst.w	r3, #8
    48b8:	d004      	beq.n	48c4 <z_thread_abort+0x24>
	__asm__ volatile(
    48ba:	f385 8811 	msr	BASEPRI, r5
    48be:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    48c2:	bd38      	pop	{r3, r4, r5, pc}
    48c4:	4604      	mov	r4, r0
	end_thread(thread);
    48c6:	f7ff fecb 	bl	4660 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    48ca:	4b08      	ldr	r3, [pc, #32]	; (48ec <z_thread_abort+0x4c>)
    48cc:	689b      	ldr	r3, [r3, #8]
    48ce:	42a3      	cmp	r3, r4
    48d0:	d004      	beq.n	48dc <z_thread_abort+0x3c>
    48d2:	f385 8811 	msr	BASEPRI, r5
    48d6:	f3bf 8f6f 	isb	sy
    48da:	e7f2      	b.n	48c2 <z_thread_abort+0x22>
    48dc:	f3ef 8305 	mrs	r3, IPSR
    48e0:	2b00      	cmp	r3, #0
    48e2:	d1f6      	bne.n	48d2 <z_thread_abort+0x32>
    48e4:	4628      	mov	r0, r5
    48e6:	f7fc fdd9 	bl	149c <arch_swap>
	return ret;
    48ea:	e7f2      	b.n	48d2 <z_thread_abort+0x32>
    48ec:	20000dbc 	.word	0x20000dbc

000048f0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    48f0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    48f2:	4806      	ldr	r0, [pc, #24]	; (490c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    48f4:	4a06      	ldr	r2, [pc, #24]	; (4910 <z_data_copy+0x20>)
    48f6:	1a12      	subs	r2, r2, r0
    48f8:	4906      	ldr	r1, [pc, #24]	; (4914 <z_data_copy+0x24>)
    48fa:	f000 feac 	bl	5656 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    48fe:	4a06      	ldr	r2, [pc, #24]	; (4918 <z_data_copy+0x28>)
    4900:	4906      	ldr	r1, [pc, #24]	; (491c <z_data_copy+0x2c>)
    4902:	4807      	ldr	r0, [pc, #28]	; (4920 <z_data_copy+0x30>)
    4904:	f000 fea7 	bl	5656 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4908:	bd08      	pop	{r3, pc}
    490a:	bf00      	nop
    490c:	20000000 	.word	0x20000000
    4910:	200001a0 	.word	0x200001a0
    4914:	000068e4 	.word	0x000068e4
    4918:	00000000 	.word	0x00000000
    491c:	000068e4 	.word	0x000068e4
    4920:	20000000 	.word	0x20000000

00004924 <first>:
	return list->head == list;
    4924:	4b03      	ldr	r3, [pc, #12]	; (4934 <first+0x10>)
    4926:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4928:	4298      	cmp	r0, r3
    492a:	d000      	beq.n	492e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    492c:	4770      	bx	lr
    492e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4930:	e7fc      	b.n	492c <first+0x8>
    4932:	bf00      	nop
    4934:	200000d4 	.word	0x200000d4

00004938 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4938:	b130      	cbz	r0, 4948 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    493a:	4a04      	ldr	r2, [pc, #16]	; (494c <next+0x14>)
    493c:	6852      	ldr	r2, [r2, #4]
    493e:	4290      	cmp	r0, r2
    4940:	d001      	beq.n	4946 <next+0xe>
    4942:	6800      	ldr	r0, [r0, #0]
    4944:	4770      	bx	lr
    4946:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4948:	4770      	bx	lr
    494a:	bf00      	nop
    494c:	200000d4 	.word	0x200000d4

00004950 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4950:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4952:	4b04      	ldr	r3, [pc, #16]	; (4964 <elapsed+0x14>)
    4954:	681b      	ldr	r3, [r3, #0]
    4956:	b10b      	cbz	r3, 495c <elapsed+0xc>
    4958:	2000      	movs	r0, #0
}
    495a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    495c:	f7fe f87e 	bl	2a5c <sys_clock_elapsed>
    4960:	e7fb      	b.n	495a <elapsed+0xa>
    4962:	bf00      	nop
    4964:	20000df4 	.word	0x20000df4

00004968 <next_timeout>:

static int32_t next_timeout(void)
{
    4968:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    496a:	f7ff ffdb 	bl	4924 <first>
    496e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4970:	f7ff ffee 	bl	4950 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    4974:	b18c      	cbz	r4, 499a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4976:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    497a:	1a12      	subs	r2, r2, r0
    497c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4980:	2a01      	cmp	r2, #1
    4982:	f173 0100 	sbcs.w	r1, r3, #0
    4986:	db11      	blt.n	49ac <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4988:	4610      	mov	r0, r2
    498a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    498e:	f173 0300 	sbcs.w	r3, r3, #0
    4992:	db04      	blt.n	499e <next_timeout+0x36>
    4994:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4998:	e001      	b.n	499e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    499a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    499e:	4b04      	ldr	r3, [pc, #16]	; (49b0 <next_timeout+0x48>)
    49a0:	691b      	ldr	r3, [r3, #16]
    49a2:	b113      	cbz	r3, 49aa <next_timeout+0x42>
    49a4:	4283      	cmp	r3, r0
    49a6:	da00      	bge.n	49aa <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    49a8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    49aa:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    49ac:	2000      	movs	r0, #0
    49ae:	e7f6      	b.n	499e <next_timeout+0x36>
    49b0:	20000dbc 	.word	0x20000dbc

000049b4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    49b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49b8:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    49ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    49be:	bf08      	it	eq
    49c0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    49c4:	f000 8096 	beq.w	4af4 <z_add_timeout+0x140>
    49c8:	4682      	mov	sl, r0
    49ca:	4614      	mov	r4, r2
    49cc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    49ce:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    49d0:	2300      	movs	r3, #0
	__asm__ volatile(
    49d2:	f04f 0220 	mov.w	r2, #32
    49d6:	f3ef 8b11 	mrs	fp, BASEPRI
    49da:	f382 8812 	msr	BASEPRI_MAX, r2
    49de:	f3bf 8f6f 	isb	sy
    49e2:	e02e      	b.n	4a42 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    49e4:	2201      	movs	r2, #1
    49e6:	2300      	movs	r3, #0
    49e8:	e04b      	b.n	4a82 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    49ea:	f7ff ffb1 	bl	4950 <elapsed>
    49ee:	1822      	adds	r2, r4, r0
    49f0:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    49f4:	3201      	adds	r2, #1
    49f6:	f143 0300 	adc.w	r3, r3, #0
    49fa:	f8ca 2010 	str.w	r2, [sl, #16]
    49fe:	f8ca 3014 	str.w	r3, [sl, #20]
    4a02:	e042      	b.n	4a8a <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4a04:	9b00      	ldr	r3, [sp, #0]
    4a06:	1ac2      	subs	r2, r0, r3
    4a08:	9b01      	ldr	r3, [sp, #4]
    4a0a:	eb61 0303 	sbc.w	r3, r1, r3
    4a0e:	f8cc 2010 	str.w	r2, [ip, #16]
    4a12:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    4a16:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    4a1a:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    4a1e:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    4a22:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    4a26:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4a2a:	f1bc 0f00 	cmp.w	ip, #0
    4a2e:	d049      	beq.n	4ac4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4a30:	f7ff ff78 	bl	4924 <first>
    4a34:	4582      	cmp	sl, r0
    4a36:	d050      	beq.n	4ada <z_add_timeout+0x126>
	__asm__ volatile(
    4a38:	f38b 8811 	msr	BASEPRI, fp
    4a3c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4a40:	2301      	movs	r3, #1
    4a42:	2b00      	cmp	r3, #0
    4a44:	d156      	bne.n	4af4 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4a46:	f06f 0301 	mvn.w	r3, #1
    4a4a:	ebb3 0804 	subs.w	r8, r3, r4
    4a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4a52:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4a56:	f1b8 0f00 	cmp.w	r8, #0
    4a5a:	f179 0300 	sbcs.w	r3, r9, #0
    4a5e:	dbc4      	blt.n	49ea <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4a60:	4a26      	ldr	r2, [pc, #152]	; (4afc <z_add_timeout+0x148>)
    4a62:	6813      	ldr	r3, [r2, #0]
    4a64:	6852      	ldr	r2, [r2, #4]
    4a66:	18e3      	adds	r3, r4, r3
    4a68:	eb45 0202 	adc.w	r2, r5, r2
    4a6c:	f06f 0101 	mvn.w	r1, #1
    4a70:	1ace      	subs	r6, r1, r3
    4a72:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    4a76:	4632      	mov	r2, r6
    4a78:	463b      	mov	r3, r7
    4a7a:	2e01      	cmp	r6, #1
    4a7c:	f177 0100 	sbcs.w	r1, r7, #0
    4a80:	dbb0      	blt.n	49e4 <z_add_timeout+0x30>
    4a82:	f8ca 2010 	str.w	r2, [sl, #16]
    4a86:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4a8a:	f7ff ff4b 	bl	4924 <first>
    4a8e:	4684      	mov	ip, r0
    4a90:	f1bc 0f00 	cmp.w	ip, #0
    4a94:	d0c9      	beq.n	4a2a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    4a96:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    4a9a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    4a9e:	e9cd 2300 	strd	r2, r3, [sp]
    4aa2:	4282      	cmp	r2, r0
    4aa4:	418b      	sbcs	r3, r1
    4aa6:	dbad      	blt.n	4a04 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    4aa8:	9b00      	ldr	r3, [sp, #0]
    4aaa:	1a1a      	subs	r2, r3, r0
    4aac:	9b01      	ldr	r3, [sp, #4]
    4aae:	eb63 0301 	sbc.w	r3, r3, r1
    4ab2:	f8ca 2010 	str.w	r2, [sl, #16]
    4ab6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4aba:	4660      	mov	r0, ip
    4abc:	f7ff ff3c 	bl	4938 <next>
    4ac0:	4684      	mov	ip, r0
    4ac2:	e7e5      	b.n	4a90 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    4ac4:	4b0e      	ldr	r3, [pc, #56]	; (4b00 <z_add_timeout+0x14c>)
    4ac6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4ac8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    4acc:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    4ad0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    4ad4:	f8c3 a004 	str.w	sl, [r3, #4]
}
    4ad8:	e7aa      	b.n	4a30 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4ada:	f7ff ff45 	bl	4968 <next_timeout>

			if (next_time == 0 ||
    4ade:	4603      	mov	r3, r0
    4ae0:	b118      	cbz	r0, 4aea <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    4ae2:	4a08      	ldr	r2, [pc, #32]	; (4b04 <z_add_timeout+0x150>)
    4ae4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4ae6:	4282      	cmp	r2, r0
    4ae8:	d0a6      	beq.n	4a38 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    4aea:	2100      	movs	r1, #0
    4aec:	4618      	mov	r0, r3
    4aee:	f7fd ff81 	bl	29f4 <sys_clock_set_timeout>
    4af2:	e7a1      	b.n	4a38 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4af4:	b003      	add	sp, #12
    4af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4afa:	bf00      	nop
    4afc:	20000320 	.word	0x20000320
    4b00:	200000d4 	.word	0x200000d4
    4b04:	20000dbc 	.word	0x20000dbc

00004b08 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b0a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4b0c:	f7ff fc06 	bl	431c <z_time_slice>
	__asm__ volatile(
    4b10:	f04f 0320 	mov.w	r3, #32
    4b14:	f3ef 8511 	mrs	r5, BASEPRI
    4b18:	f383 8812 	msr	BASEPRI_MAX, r3
    4b1c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4b20:	4b28      	ldr	r3, [pc, #160]	; (4bc4 <sys_clock_announce+0xbc>)
    4b22:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4b24:	f7ff fefe 	bl	4924 <first>
    4b28:	4604      	mov	r4, r0
    4b2a:	b350      	cbz	r0, 4b82 <sys_clock_announce+0x7a>
    4b2c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4b30:	4b24      	ldr	r3, [pc, #144]	; (4bc4 <sys_clock_announce+0xbc>)
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	17d9      	asrs	r1, r3, #31
    4b36:	42b3      	cmp	r3, r6
    4b38:	eb71 0207 	sbcs.w	r2, r1, r7
    4b3c:	db21      	blt.n	4b82 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4b3e:	4a22      	ldr	r2, [pc, #136]	; (4bc8 <sys_clock_announce+0xc0>)
    4b40:	e9d2 0100 	ldrd	r0, r1, [r2]
    4b44:	1980      	adds	r0, r0, r6
    4b46:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    4b4a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    4b4e:	1b9b      	subs	r3, r3, r6
    4b50:	4a1c      	ldr	r2, [pc, #112]	; (4bc4 <sys_clock_announce+0xbc>)
    4b52:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    4b54:	2200      	movs	r2, #0
    4b56:	2300      	movs	r3, #0
    4b58:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4b5c:	4620      	mov	r0, r4
    4b5e:	f001 fb51 	bl	6204 <remove_timeout>
	__asm__ volatile(
    4b62:	f385 8811 	msr	BASEPRI, r5
    4b66:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4b6a:	68a3      	ldr	r3, [r4, #8]
    4b6c:	4620      	mov	r0, r4
    4b6e:	4798      	blx	r3
	__asm__ volatile(
    4b70:	f04f 0320 	mov.w	r3, #32
    4b74:	f3ef 8511 	mrs	r5, BASEPRI
    4b78:	f383 8812 	msr	BASEPRI_MAX, r3
    4b7c:	f3bf 8f6f 	isb	sy
    4b80:	e7d0      	b.n	4b24 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    4b82:	b144      	cbz	r4, 4b96 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4b84:	4b0f      	ldr	r3, [pc, #60]	; (4bc4 <sys_clock_announce+0xbc>)
    4b86:	6819      	ldr	r1, [r3, #0]
    4b88:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4b8c:	1a52      	subs	r2, r2, r1
    4b8e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    4b92:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    4b96:	480c      	ldr	r0, [pc, #48]	; (4bc8 <sys_clock_announce+0xc0>)
    4b98:	490a      	ldr	r1, [pc, #40]	; (4bc4 <sys_clock_announce+0xbc>)
    4b9a:	680c      	ldr	r4, [r1, #0]
    4b9c:	e9d0 2300 	ldrd	r2, r3, [r0]
    4ba0:	1912      	adds	r2, r2, r4
    4ba2:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    4ba6:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    4baa:	2400      	movs	r4, #0
    4bac:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4bae:	f7ff fedb 	bl	4968 <next_timeout>
    4bb2:	4621      	mov	r1, r4
    4bb4:	f7fd ff1e 	bl	29f4 <sys_clock_set_timeout>
	__asm__ volatile(
    4bb8:	f385 8811 	msr	BASEPRI, r5
    4bbc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bc2:	bf00      	nop
    4bc4:	20000df4 	.word	0x20000df4
    4bc8:	20000320 	.word	0x20000320

00004bcc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4bcc:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4bce:	2100      	movs	r1, #0
	__asm__ volatile(
    4bd0:	f04f 0320 	mov.w	r3, #32
    4bd4:	f3ef 8411 	mrs	r4, BASEPRI
    4bd8:	f383 8812 	msr	BASEPRI_MAX, r3
    4bdc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4be0:	2200      	movs	r2, #0
    4be2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    4be4:	b969      	cbnz	r1, 4c02 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    4be6:	f7fd ff39 	bl	2a5c <sys_clock_elapsed>
    4bea:	4b07      	ldr	r3, [pc, #28]	; (4c08 <sys_clock_tick_get+0x3c>)
    4bec:	e9d3 2300 	ldrd	r2, r3, [r3]
    4bf0:	1812      	adds	r2, r2, r0
    4bf2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    4bf6:	f384 8811 	msr	BASEPRI, r4
    4bfa:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4bfe:	2101      	movs	r1, #1
    4c00:	e7f0      	b.n	4be4 <sys_clock_tick_get+0x18>
	}
	return t;
}
    4c02:	4610      	mov	r0, r2
    4c04:	4619      	mov	r1, r3
    4c06:	bd10      	pop	{r4, pc}
    4c08:	20000320 	.word	0x20000320

00004c0c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    4c0c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4c0e:	4a03      	ldr	r2, [pc, #12]	; (4c1c <boot_banner+0x10>)
    4c10:	4903      	ldr	r1, [pc, #12]	; (4c20 <boot_banner+0x14>)
    4c12:	4804      	ldr	r0, [pc, #16]	; (4c24 <boot_banner+0x18>)
    4c14:	f000 fa27 	bl	5066 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    4c18:	bd08      	pop	{r3, pc}
    4c1a:	bf00      	nop
    4c1c:	00006628 	.word	0x00006628
    4c20:	00006824 	.word	0x00006824
    4c24:	00006834 	.word	0x00006834

00004c28 <nrf_cc3xx_platform_init_no_rng>:
    4c28:	b510      	push	{r4, lr}
    4c2a:	4c0a      	ldr	r4, [pc, #40]	; (4c54 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4c2c:	6823      	ldr	r3, [r4, #0]
    4c2e:	b11b      	cbz	r3, 4c38 <nrf_cc3xx_platform_init_no_rng+0x10>
    4c30:	2301      	movs	r3, #1
    4c32:	6023      	str	r3, [r4, #0]
    4c34:	2000      	movs	r0, #0
    4c36:	bd10      	pop	{r4, pc}
    4c38:	f000 f8d6 	bl	4de8 <CC_LibInitNoRng>
    4c3c:	2800      	cmp	r0, #0
    4c3e:	d0f7      	beq.n	4c30 <nrf_cc3xx_platform_init_no_rng+0x8>
    4c40:	3801      	subs	r0, #1
    4c42:	2806      	cmp	r0, #6
    4c44:	d803      	bhi.n	4c4e <nrf_cc3xx_platform_init_no_rng+0x26>
    4c46:	4b04      	ldr	r3, [pc, #16]	; (4c58 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4c48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4c4c:	bd10      	pop	{r4, pc}
    4c4e:	4803      	ldr	r0, [pc, #12]	; (4c5c <nrf_cc3xx_platform_init_no_rng+0x34>)
    4c50:	bd10      	pop	{r4, pc}
    4c52:	bf00      	nop
    4c54:	20000df8 	.word	0x20000df8
    4c58:	0000685c 	.word	0x0000685c
    4c5c:	ffff8ffe 	.word	0xffff8ffe

00004c60 <nrf_cc3xx_platform_abort>:
    4c60:	f3bf 8f4f 	dsb	sy
    4c64:	4905      	ldr	r1, [pc, #20]	; (4c7c <nrf_cc3xx_platform_abort+0x1c>)
    4c66:	4b06      	ldr	r3, [pc, #24]	; (4c80 <nrf_cc3xx_platform_abort+0x20>)
    4c68:	68ca      	ldr	r2, [r1, #12]
    4c6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4c6e:	4313      	orrs	r3, r2
    4c70:	60cb      	str	r3, [r1, #12]
    4c72:	f3bf 8f4f 	dsb	sy
    4c76:	bf00      	nop
    4c78:	e7fd      	b.n	4c76 <nrf_cc3xx_platform_abort+0x16>
    4c7a:	bf00      	nop
    4c7c:	e000ed00 	.word	0xe000ed00
    4c80:	05fa0004 	.word	0x05fa0004

00004c84 <CC_PalAbort>:
    4c84:	b4f0      	push	{r4, r5, r6, r7}
    4c86:	4f09      	ldr	r7, [pc, #36]	; (4cac <CC_PalAbort+0x28>)
    4c88:	4e09      	ldr	r6, [pc, #36]	; (4cb0 <CC_PalAbort+0x2c>)
    4c8a:	4c0a      	ldr	r4, [pc, #40]	; (4cb4 <CC_PalAbort+0x30>)
    4c8c:	4a0a      	ldr	r2, [pc, #40]	; (4cb8 <CC_PalAbort+0x34>)
    4c8e:	4d0b      	ldr	r5, [pc, #44]	; (4cbc <CC_PalAbort+0x38>)
    4c90:	490b      	ldr	r1, [pc, #44]	; (4cc0 <CC_PalAbort+0x3c>)
    4c92:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    4c96:	603b      	str	r3, [r7, #0]
    4c98:	6852      	ldr	r2, [r2, #4]
    4c9a:	6033      	str	r3, [r6, #0]
    4c9c:	6023      	str	r3, [r4, #0]
    4c9e:	2400      	movs	r4, #0
    4ca0:	602b      	str	r3, [r5, #0]
    4ca2:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    4ca6:	bcf0      	pop	{r4, r5, r6, r7}
    4ca8:	4710      	bx	r2
    4caa:	bf00      	nop
    4cac:	5002b400 	.word	0x5002b400
    4cb0:	5002b404 	.word	0x5002b404
    4cb4:	5002b408 	.word	0x5002b408
    4cb8:	200000dc 	.word	0x200000dc
    4cbc:	5002b40c 	.word	0x5002b40c
    4cc0:	5002a000 	.word	0x5002a000

00004cc4 <nrf_cc3xx_platform_set_abort>:
    4cc4:	e9d0 1200 	ldrd	r1, r2, [r0]
    4cc8:	4b01      	ldr	r3, [pc, #4]	; (4cd0 <nrf_cc3xx_platform_set_abort+0xc>)
    4cca:	e9c3 1200 	strd	r1, r2, [r3]
    4cce:	4770      	bx	lr
    4cd0:	200000dc 	.word	0x200000dc

00004cd4 <mutex_free>:
    4cd4:	b510      	push	{r4, lr}
    4cd6:	4604      	mov	r4, r0
    4cd8:	b130      	cbz	r0, 4ce8 <mutex_free+0x14>
    4cda:	6863      	ldr	r3, [r4, #4]
    4cdc:	06db      	lsls	r3, r3, #27
    4cde:	d502      	bpl.n	4ce6 <mutex_free+0x12>
    4ce0:	2300      	movs	r3, #0
    4ce2:	6023      	str	r3, [r4, #0]
    4ce4:	6063      	str	r3, [r4, #4]
    4ce6:	bd10      	pop	{r4, pc}
    4ce8:	4b02      	ldr	r3, [pc, #8]	; (4cf4 <mutex_free+0x20>)
    4cea:	4803      	ldr	r0, [pc, #12]	; (4cf8 <mutex_free+0x24>)
    4cec:	685b      	ldr	r3, [r3, #4]
    4cee:	4798      	blx	r3
    4cf0:	e7f3      	b.n	4cda <mutex_free+0x6>
    4cf2:	bf00      	nop
    4cf4:	200000dc 	.word	0x200000dc
    4cf8:	00006878 	.word	0x00006878

00004cfc <mutex_unlock>:
    4cfc:	b168      	cbz	r0, 4d1a <mutex_unlock+0x1e>
    4cfe:	6843      	ldr	r3, [r0, #4]
    4d00:	b13b      	cbz	r3, 4d12 <mutex_unlock+0x16>
    4d02:	06db      	lsls	r3, r3, #27
    4d04:	d507      	bpl.n	4d16 <mutex_unlock+0x1a>
    4d06:	f3bf 8f5f 	dmb	sy
    4d0a:	2300      	movs	r3, #0
    4d0c:	6003      	str	r3, [r0, #0]
    4d0e:	4618      	mov	r0, r3
    4d10:	4770      	bx	lr
    4d12:	4803      	ldr	r0, [pc, #12]	; (4d20 <mutex_unlock+0x24>)
    4d14:	4770      	bx	lr
    4d16:	4803      	ldr	r0, [pc, #12]	; (4d24 <mutex_unlock+0x28>)
    4d18:	4770      	bx	lr
    4d1a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4d1e:	4770      	bx	lr
    4d20:	ffff8fea 	.word	0xffff8fea
    4d24:	ffff8fe9 	.word	0xffff8fe9

00004d28 <mutex_init>:
    4d28:	b510      	push	{r4, lr}
    4d2a:	4604      	mov	r4, r0
    4d2c:	b120      	cbz	r0, 4d38 <mutex_init+0x10>
    4d2e:	2200      	movs	r2, #0
    4d30:	2311      	movs	r3, #17
    4d32:	6022      	str	r2, [r4, #0]
    4d34:	6063      	str	r3, [r4, #4]
    4d36:	bd10      	pop	{r4, pc}
    4d38:	4801      	ldr	r0, [pc, #4]	; (4d40 <mutex_init+0x18>)
    4d3a:	f7ff ffa3 	bl	4c84 <CC_PalAbort>
    4d3e:	e7f6      	b.n	4d2e <mutex_init+0x6>
    4d40:	000068a0 	.word	0x000068a0

00004d44 <mutex_lock>:
    4d44:	b1c0      	cbz	r0, 4d78 <mutex_lock+0x34>
    4d46:	6843      	ldr	r3, [r0, #4]
    4d48:	b1a3      	cbz	r3, 4d74 <mutex_lock+0x30>
    4d4a:	06db      	lsls	r3, r3, #27
    4d4c:	d510      	bpl.n	4d70 <mutex_lock+0x2c>
    4d4e:	2201      	movs	r2, #1
    4d50:	f3bf 8f5b 	dmb	ish
    4d54:	e850 3f00 	ldrex	r3, [r0]
    4d58:	e840 2100 	strex	r1, r2, [r0]
    4d5c:	2900      	cmp	r1, #0
    4d5e:	d1f9      	bne.n	4d54 <mutex_lock+0x10>
    4d60:	f3bf 8f5b 	dmb	ish
    4d64:	2b01      	cmp	r3, #1
    4d66:	d0f3      	beq.n	4d50 <mutex_lock+0xc>
    4d68:	f3bf 8f5f 	dmb	sy
    4d6c:	2000      	movs	r0, #0
    4d6e:	4770      	bx	lr
    4d70:	4803      	ldr	r0, [pc, #12]	; (4d80 <mutex_lock+0x3c>)
    4d72:	4770      	bx	lr
    4d74:	4803      	ldr	r0, [pc, #12]	; (4d84 <mutex_lock+0x40>)
    4d76:	4770      	bx	lr
    4d78:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4d7c:	4770      	bx	lr
    4d7e:	bf00      	nop
    4d80:	ffff8fe9 	.word	0xffff8fe9
    4d84:	ffff8fea 	.word	0xffff8fea

00004d88 <nrf_cc3xx_platform_set_mutexes>:
    4d88:	b570      	push	{r4, r5, r6, lr}
    4d8a:	e9d0 2300 	ldrd	r2, r3, [r0]
    4d8e:	4c13      	ldr	r4, [pc, #76]	; (4ddc <nrf_cc3xx_platform_set_mutexes+0x54>)
    4d90:	4d13      	ldr	r5, [pc, #76]	; (4de0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    4d92:	e9c4 2300 	strd	r2, r3, [r4]
    4d96:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    4d9a:	e9c4 6302 	strd	r6, r3, [r4, #8]
    4d9e:	4b11      	ldr	r3, [pc, #68]	; (4de4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    4da0:	6808      	ldr	r0, [r1, #0]
    4da2:	6018      	str	r0, [r3, #0]
    4da4:	6848      	ldr	r0, [r1, #4]
    4da6:	6058      	str	r0, [r3, #4]
    4da8:	6888      	ldr	r0, [r1, #8]
    4daa:	6098      	str	r0, [r3, #8]
    4dac:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    4db0:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    4db4:	60de      	str	r6, [r3, #12]
    4db6:	6118      	str	r0, [r3, #16]
    4db8:	06cb      	lsls	r3, r1, #27
    4dba:	d50d      	bpl.n	4dd8 <nrf_cc3xx_platform_set_mutexes+0x50>
    4dbc:	2300      	movs	r3, #0
    4dbe:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    4dc2:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    4dc6:	f505 7088 	add.w	r0, r5, #272	; 0x110
    4dca:	4790      	blx	r2
    4dcc:	6823      	ldr	r3, [r4, #0]
    4dce:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    4dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4dd6:	4718      	bx	r3
    4dd8:	bd70      	pop	{r4, r5, r6, pc}
    4dda:	bf00      	nop
    4ddc:	200000ec 	.word	0x200000ec
    4de0:	20000e14 	.word	0x20000e14
    4de4:	200000fc 	.word	0x200000fc

00004de8 <CC_LibInitNoRng>:
    4de8:	b510      	push	{r4, lr}
    4dea:	f000 f833 	bl	4e54 <CC_HalInit>
    4dee:	b120      	cbz	r0, 4dfa <CC_LibInitNoRng+0x12>
    4df0:	2403      	movs	r4, #3
    4df2:	f000 f867 	bl	4ec4 <CC_PalTerminate>
    4df6:	4620      	mov	r0, r4
    4df8:	bd10      	pop	{r4, pc}
    4dfa:	f000 f835 	bl	4e68 <CC_PalInit>
    4dfe:	b990      	cbnz	r0, 4e26 <CC_LibInitNoRng+0x3e>
    4e00:	f000 f8b0 	bl	4f64 <CC_PalPowerSaveModeSelect>
    4e04:	b990      	cbnz	r0, 4e2c <CC_LibInitNoRng+0x44>
    4e06:	4b0f      	ldr	r3, [pc, #60]	; (4e44 <CC_LibInitNoRng+0x5c>)
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	0e1b      	lsrs	r3, r3, #24
    4e0c:	2bf0      	cmp	r3, #240	; 0xf0
    4e0e:	d108      	bne.n	4e22 <CC_LibInitNoRng+0x3a>
    4e10:	4a0d      	ldr	r2, [pc, #52]	; (4e48 <CC_LibInitNoRng+0x60>)
    4e12:	4b0e      	ldr	r3, [pc, #56]	; (4e4c <CC_LibInitNoRng+0x64>)
    4e14:	6812      	ldr	r2, [r2, #0]
    4e16:	429a      	cmp	r2, r3
    4e18:	d00a      	beq.n	4e30 <CC_LibInitNoRng+0x48>
    4e1a:	2407      	movs	r4, #7
    4e1c:	f000 f81c 	bl	4e58 <CC_HalTerminate>
    4e20:	e7e7      	b.n	4df2 <CC_LibInitNoRng+0xa>
    4e22:	2406      	movs	r4, #6
    4e24:	e7fa      	b.n	4e1c <CC_LibInitNoRng+0x34>
    4e26:	2404      	movs	r4, #4
    4e28:	4620      	mov	r0, r4
    4e2a:	bd10      	pop	{r4, pc}
    4e2c:	2400      	movs	r4, #0
    4e2e:	e7f5      	b.n	4e1c <CC_LibInitNoRng+0x34>
    4e30:	2001      	movs	r0, #1
    4e32:	f000 f897 	bl	4f64 <CC_PalPowerSaveModeSelect>
    4e36:	4604      	mov	r4, r0
    4e38:	2800      	cmp	r0, #0
    4e3a:	d1f7      	bne.n	4e2c <CC_LibInitNoRng+0x44>
    4e3c:	4b04      	ldr	r3, [pc, #16]	; (4e50 <CC_LibInitNoRng+0x68>)
    4e3e:	6018      	str	r0, [r3, #0]
    4e40:	e7d9      	b.n	4df6 <CC_LibInitNoRng+0xe>
    4e42:	bf00      	nop
    4e44:	5002b928 	.word	0x5002b928
    4e48:	5002ba24 	.word	0x5002ba24
    4e4c:	20e00000 	.word	0x20e00000
    4e50:	5002ba0c 	.word	0x5002ba0c

00004e54 <CC_HalInit>:
    4e54:	2000      	movs	r0, #0
    4e56:	4770      	bx	lr

00004e58 <CC_HalTerminate>:
    4e58:	2000      	movs	r0, #0
    4e5a:	4770      	bx	lr

00004e5c <CC_HalMaskInterrupt>:
    4e5c:	4b01      	ldr	r3, [pc, #4]	; (4e64 <CC_HalMaskInterrupt+0x8>)
    4e5e:	6018      	str	r0, [r3, #0]
    4e60:	4770      	bx	lr
    4e62:	bf00      	nop
    4e64:	5002ba04 	.word	0x5002ba04

00004e68 <CC_PalInit>:
    4e68:	b510      	push	{r4, lr}
    4e6a:	4811      	ldr	r0, [pc, #68]	; (4eb0 <CC_PalInit+0x48>)
    4e6c:	f000 f848 	bl	4f00 <CC_PalMutexCreate>
    4e70:	b100      	cbz	r0, 4e74 <CC_PalInit+0xc>
    4e72:	bd10      	pop	{r4, pc}
    4e74:	480f      	ldr	r0, [pc, #60]	; (4eb4 <CC_PalInit+0x4c>)
    4e76:	f000 f843 	bl	4f00 <CC_PalMutexCreate>
    4e7a:	2800      	cmp	r0, #0
    4e7c:	d1f9      	bne.n	4e72 <CC_PalInit+0xa>
    4e7e:	4c0e      	ldr	r4, [pc, #56]	; (4eb8 <CC_PalInit+0x50>)
    4e80:	4620      	mov	r0, r4
    4e82:	f000 f83d 	bl	4f00 <CC_PalMutexCreate>
    4e86:	2800      	cmp	r0, #0
    4e88:	d1f3      	bne.n	4e72 <CC_PalInit+0xa>
    4e8a:	4b0c      	ldr	r3, [pc, #48]	; (4ebc <CC_PalInit+0x54>)
    4e8c:	480c      	ldr	r0, [pc, #48]	; (4ec0 <CC_PalInit+0x58>)
    4e8e:	601c      	str	r4, [r3, #0]
    4e90:	f000 f836 	bl	4f00 <CC_PalMutexCreate>
    4e94:	4601      	mov	r1, r0
    4e96:	2800      	cmp	r0, #0
    4e98:	d1eb      	bne.n	4e72 <CC_PalInit+0xa>
    4e9a:	f000 f82d 	bl	4ef8 <CC_PalDmaInit>
    4e9e:	4604      	mov	r4, r0
    4ea0:	b108      	cbz	r0, 4ea6 <CC_PalInit+0x3e>
    4ea2:	4620      	mov	r0, r4
    4ea4:	bd10      	pop	{r4, pc}
    4ea6:	f000 f83f 	bl	4f28 <CC_PalPowerSaveModeInit>
    4eaa:	4620      	mov	r0, r4
    4eac:	e7fa      	b.n	4ea4 <CC_PalInit+0x3c>
    4eae:	bf00      	nop
    4eb0:	20000134 	.word	0x20000134
    4eb4:	20000128 	.word	0x20000128
    4eb8:	20000130 	.word	0x20000130
    4ebc:	20000138 	.word	0x20000138
    4ec0:	2000012c 	.word	0x2000012c

00004ec4 <CC_PalTerminate>:
    4ec4:	b508      	push	{r3, lr}
    4ec6:	4808      	ldr	r0, [pc, #32]	; (4ee8 <CC_PalTerminate+0x24>)
    4ec8:	f000 f824 	bl	4f14 <CC_PalMutexDestroy>
    4ecc:	4807      	ldr	r0, [pc, #28]	; (4eec <CC_PalTerminate+0x28>)
    4ece:	f000 f821 	bl	4f14 <CC_PalMutexDestroy>
    4ed2:	4807      	ldr	r0, [pc, #28]	; (4ef0 <CC_PalTerminate+0x2c>)
    4ed4:	f000 f81e 	bl	4f14 <CC_PalMutexDestroy>
    4ed8:	4806      	ldr	r0, [pc, #24]	; (4ef4 <CC_PalTerminate+0x30>)
    4eda:	f000 f81b 	bl	4f14 <CC_PalMutexDestroy>
    4ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4ee2:	f000 b80b 	b.w	4efc <CC_PalDmaTerminate>
    4ee6:	bf00      	nop
    4ee8:	20000134 	.word	0x20000134
    4eec:	20000128 	.word	0x20000128
    4ef0:	20000130 	.word	0x20000130
    4ef4:	2000012c 	.word	0x2000012c

00004ef8 <CC_PalDmaInit>:
    4ef8:	2000      	movs	r0, #0
    4efa:	4770      	bx	lr

00004efc <CC_PalDmaTerminate>:
    4efc:	4770      	bx	lr
    4efe:	bf00      	nop

00004f00 <CC_PalMutexCreate>:
    4f00:	b508      	push	{r3, lr}
    4f02:	4b03      	ldr	r3, [pc, #12]	; (4f10 <CC_PalMutexCreate+0x10>)
    4f04:	6802      	ldr	r2, [r0, #0]
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	6810      	ldr	r0, [r2, #0]
    4f0a:	4798      	blx	r3
    4f0c:	2000      	movs	r0, #0
    4f0e:	bd08      	pop	{r3, pc}
    4f10:	200000ec 	.word	0x200000ec

00004f14 <CC_PalMutexDestroy>:
    4f14:	b508      	push	{r3, lr}
    4f16:	4b03      	ldr	r3, [pc, #12]	; (4f24 <CC_PalMutexDestroy+0x10>)
    4f18:	6802      	ldr	r2, [r0, #0]
    4f1a:	685b      	ldr	r3, [r3, #4]
    4f1c:	6810      	ldr	r0, [r2, #0]
    4f1e:	4798      	blx	r3
    4f20:	2000      	movs	r0, #0
    4f22:	bd08      	pop	{r3, pc}
    4f24:	200000ec 	.word	0x200000ec

00004f28 <CC_PalPowerSaveModeInit>:
    4f28:	b570      	push	{r4, r5, r6, lr}
    4f2a:	4c09      	ldr	r4, [pc, #36]	; (4f50 <CC_PalPowerSaveModeInit+0x28>)
    4f2c:	4d09      	ldr	r5, [pc, #36]	; (4f54 <CC_PalPowerSaveModeInit+0x2c>)
    4f2e:	6920      	ldr	r0, [r4, #16]
    4f30:	68ab      	ldr	r3, [r5, #8]
    4f32:	4798      	blx	r3
    4f34:	b118      	cbz	r0, 4f3e <CC_PalPowerSaveModeInit+0x16>
    4f36:	4b08      	ldr	r3, [pc, #32]	; (4f58 <CC_PalPowerSaveModeInit+0x30>)
    4f38:	4808      	ldr	r0, [pc, #32]	; (4f5c <CC_PalPowerSaveModeInit+0x34>)
    4f3a:	685b      	ldr	r3, [r3, #4]
    4f3c:	4798      	blx	r3
    4f3e:	4a08      	ldr	r2, [pc, #32]	; (4f60 <CC_PalPowerSaveModeInit+0x38>)
    4f40:	68eb      	ldr	r3, [r5, #12]
    4f42:	6920      	ldr	r0, [r4, #16]
    4f44:	2100      	movs	r1, #0
    4f46:	6011      	str	r1, [r2, #0]
    4f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f4c:	4718      	bx	r3
    4f4e:	bf00      	nop
    4f50:	200000fc 	.word	0x200000fc
    4f54:	200000ec 	.word	0x200000ec
    4f58:	200000dc 	.word	0x200000dc
    4f5c:	000068c4 	.word	0x000068c4
    4f60:	20000e0c 	.word	0x20000e0c

00004f64 <CC_PalPowerSaveModeSelect>:
    4f64:	b570      	push	{r4, r5, r6, lr}
    4f66:	4d1a      	ldr	r5, [pc, #104]	; (4fd0 <CC_PalPowerSaveModeSelect+0x6c>)
    4f68:	4e1a      	ldr	r6, [pc, #104]	; (4fd4 <CC_PalPowerSaveModeSelect+0x70>)
    4f6a:	4604      	mov	r4, r0
    4f6c:	68b2      	ldr	r2, [r6, #8]
    4f6e:	6928      	ldr	r0, [r5, #16]
    4f70:	4790      	blx	r2
    4f72:	b9f0      	cbnz	r0, 4fb2 <CC_PalPowerSaveModeSelect+0x4e>
    4f74:	b15c      	cbz	r4, 4f8e <CC_PalPowerSaveModeSelect+0x2a>
    4f76:	4c18      	ldr	r4, [pc, #96]	; (4fd8 <CC_PalPowerSaveModeSelect+0x74>)
    4f78:	6823      	ldr	r3, [r4, #0]
    4f7a:	b1ab      	cbz	r3, 4fa8 <CC_PalPowerSaveModeSelect+0x44>
    4f7c:	2b01      	cmp	r3, #1
    4f7e:	d01a      	beq.n	4fb6 <CC_PalPowerSaveModeSelect+0x52>
    4f80:	3b01      	subs	r3, #1
    4f82:	6023      	str	r3, [r4, #0]
    4f84:	6928      	ldr	r0, [r5, #16]
    4f86:	68f3      	ldr	r3, [r6, #12]
    4f88:	4798      	blx	r3
    4f8a:	2000      	movs	r0, #0
    4f8c:	bd70      	pop	{r4, r5, r6, pc}
    4f8e:	4c12      	ldr	r4, [pc, #72]	; (4fd8 <CC_PalPowerSaveModeSelect+0x74>)
    4f90:	6821      	ldr	r1, [r4, #0]
    4f92:	b939      	cbnz	r1, 4fa4 <CC_PalPowerSaveModeSelect+0x40>
    4f94:	4b11      	ldr	r3, [pc, #68]	; (4fdc <CC_PalPowerSaveModeSelect+0x78>)
    4f96:	4a12      	ldr	r2, [pc, #72]	; (4fe0 <CC_PalPowerSaveModeSelect+0x7c>)
    4f98:	2001      	movs	r0, #1
    4f9a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    4f9e:	6813      	ldr	r3, [r2, #0]
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d1fc      	bne.n	4f9e <CC_PalPowerSaveModeSelect+0x3a>
    4fa4:	3101      	adds	r1, #1
    4fa6:	6021      	str	r1, [r4, #0]
    4fa8:	68f3      	ldr	r3, [r6, #12]
    4faa:	6928      	ldr	r0, [r5, #16]
    4fac:	4798      	blx	r3
    4fae:	2000      	movs	r0, #0
    4fb0:	bd70      	pop	{r4, r5, r6, pc}
    4fb2:	480c      	ldr	r0, [pc, #48]	; (4fe4 <CC_PalPowerSaveModeSelect+0x80>)
    4fb4:	bd70      	pop	{r4, r5, r6, pc}
    4fb6:	4a0a      	ldr	r2, [pc, #40]	; (4fe0 <CC_PalPowerSaveModeSelect+0x7c>)
    4fb8:	6813      	ldr	r3, [r2, #0]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d1fc      	bne.n	4fb8 <CC_PalPowerSaveModeSelect+0x54>
    4fbe:	4a07      	ldr	r2, [pc, #28]	; (4fdc <CC_PalPowerSaveModeSelect+0x78>)
    4fc0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4fc4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4fc8:	f7ff ff48 	bl	4e5c <CC_HalMaskInterrupt>
    4fcc:	6823      	ldr	r3, [r4, #0]
    4fce:	e7d7      	b.n	4f80 <CC_PalPowerSaveModeSelect+0x1c>
    4fd0:	200000fc 	.word	0x200000fc
    4fd4:	200000ec 	.word	0x200000ec
    4fd8:	20000e0c 	.word	0x20000e0c
    4fdc:	5002a000 	.word	0x5002a000
    4fe0:	5002b910 	.word	0x5002b910
    4fe4:	ffff8fe9 	.word	0xffff8fe9

00004fe8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4fe8:	4770      	bx	lr

00004fea <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4fea:	4602      	mov	r2, r0
    4fec:	b158      	cbz	r0, 5006 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4fee:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4ff0:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4ff4:	2b01      	cmp	r3, #1
    4ff6:	d003      	beq.n	5000 <sys_notify_validate+0x16>
    4ff8:	2b03      	cmp	r3, #3
    4ffa:	d107      	bne.n	500c <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4ffc:	6803      	ldr	r3, [r0, #0]
    4ffe:	b143      	cbz	r3, 5012 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5000:	2000      	movs	r0, #0
    5002:	6090      	str	r0, [r2, #8]
    5004:	4770      	bx	lr
		return -EINVAL;
    5006:	f06f 0015 	mvn.w	r0, #21
    500a:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    500c:	f06f 0015 	mvn.w	r0, #21
    5010:	4770      	bx	lr
			rv = -EINVAL;
    5012:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5016:	4770      	bx	lr

00005018 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5018:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    501a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    501c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5020:	6081      	str	r1, [r0, #8]
	switch (method) {
    5022:	2a03      	cmp	r2, #3
    5024:	d103      	bne.n	502e <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5026:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5028:	2200      	movs	r2, #0
    502a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    502c:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    502e:	2000      	movs	r0, #0
    5030:	e7fa      	b.n	5028 <sys_notify_finalize+0x10>

00005032 <arch_printk_char_out>:
}
    5032:	2000      	movs	r0, #0
    5034:	4770      	bx	lr

00005036 <str_out>:
{
    5036:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5038:	680c      	ldr	r4, [r1, #0]
    503a:	b154      	cbz	r4, 5052 <str_out+0x1c>
    503c:	688a      	ldr	r2, [r1, #8]
    503e:	684b      	ldr	r3, [r1, #4]
    5040:	429a      	cmp	r2, r3
    5042:	da06      	bge.n	5052 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    5044:	3b01      	subs	r3, #1
    5046:	429a      	cmp	r2, r3
    5048:	d008      	beq.n	505c <str_out+0x26>
		ctx->str[ctx->count++] = c;
    504a:	1c53      	adds	r3, r2, #1
    504c:	608b      	str	r3, [r1, #8]
    504e:	54a0      	strb	r0, [r4, r2]
    5050:	e002      	b.n	5058 <str_out+0x22>
		ctx->count++;
    5052:	688b      	ldr	r3, [r1, #8]
    5054:	3301      	adds	r3, #1
    5056:	608b      	str	r3, [r1, #8]
}
    5058:	bc10      	pop	{r4}
    505a:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    505c:	1c53      	adds	r3, r2, #1
    505e:	608b      	str	r3, [r1, #8]
    5060:	2300      	movs	r3, #0
    5062:	54a3      	strb	r3, [r4, r2]
    5064:	e7f8      	b.n	5058 <str_out+0x22>

00005066 <printk>:
{
    5066:	b40f      	push	{r0, r1, r2, r3}
    5068:	b500      	push	{lr}
    506a:	b083      	sub	sp, #12
    506c:	a904      	add	r1, sp, #16
    506e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5072:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    5074:	f7fb f9da 	bl	42c <vprintk>
}
    5078:	b003      	add	sp, #12
    507a:	f85d eb04 	ldr.w	lr, [sp], #4
    507e:	b004      	add	sp, #16
    5080:	4770      	bx	lr

00005082 <snprintk>:
{
    5082:	b40c      	push	{r2, r3}
    5084:	b500      	push	{lr}
    5086:	b083      	sub	sp, #12
    5088:	ab04      	add	r3, sp, #16
    508a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    508e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    5090:	f7fb f9dc 	bl	44c <vsnprintk>
}
    5094:	b003      	add	sp, #12
    5096:	f85d eb04 	ldr.w	lr, [sp], #4
    509a:	b002      	add	sp, #8
    509c:	4770      	bx	lr

0000509e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    509e:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    50a2:	8b01      	ldrh	r1, [r0, #24]
    50a4:	f021 0107 	bic.w	r1, r1, #7
    50a8:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    50aa:	8301      	strh	r1, [r0, #24]
}
    50ac:	4770      	bx	lr

000050ae <notify_monitors>:
{
    50ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50b2:	4606      	mov	r6, r0
    50b4:	460f      	mov	r7, r1
    50b6:	4690      	mov	r8, r2
	return list->head;
    50b8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    50ba:	b119      	cbz	r1, 50c4 <notify_monitors+0x16>
    50bc:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    50be:	b131      	cbz	r1, 50ce <notify_monitors+0x20>
	return node->next;
    50c0:	680c      	ldr	r4, [r1, #0]
    50c2:	e004      	b.n	50ce <notify_monitors+0x20>
    50c4:	460c      	mov	r4, r1
    50c6:	e002      	b.n	50ce <notify_monitors+0x20>
    50c8:	4623      	mov	r3, r4
    50ca:	4621      	mov	r1, r4
    50cc:	461c      	mov	r4, r3
    50ce:	b159      	cbz	r1, 50e8 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    50d0:	684d      	ldr	r5, [r1, #4]
    50d2:	4643      	mov	r3, r8
    50d4:	463a      	mov	r2, r7
    50d6:	4630      	mov	r0, r6
    50d8:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    50da:	2c00      	cmp	r4, #0
    50dc:	d0f4      	beq.n	50c8 <notify_monitors+0x1a>
    50de:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    50e0:	2c00      	cmp	r4, #0
    50e2:	d0f2      	beq.n	50ca <notify_monitors+0x1c>
	return node->next;
    50e4:	6823      	ldr	r3, [r4, #0]
    50e6:	e7f0      	b.n	50ca <notify_monitors+0x1c>
}
    50e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000050ec <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    50ec:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    50ee:	f013 0307 	ands.w	r3, r3, #7
    50f2:	d103      	bne.n	50fc <process_recheck+0x10>
	return list->head;
    50f4:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    50f6:	b10a      	cbz	r2, 50fc <process_recheck+0x10>
		evt = EVT_START;
    50f8:	2003      	movs	r0, #3
    50fa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    50fc:	2b02      	cmp	r3, #2
    50fe:	d003      	beq.n	5108 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    5100:	2b01      	cmp	r3, #1
    5102:	d006      	beq.n	5112 <process_recheck+0x26>
	int evt = EVT_NOP;
    5104:	2000      	movs	r0, #0
    5106:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    5108:	8b42      	ldrh	r2, [r0, #26]
    510a:	2a00      	cmp	r2, #0
    510c:	d1f8      	bne.n	5100 <process_recheck+0x14>
		evt = EVT_STOP;
    510e:	2004      	movs	r0, #4
    5110:	4770      	bx	lr
    5112:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    5114:	b10b      	cbz	r3, 511a <process_recheck+0x2e>
		evt = EVT_RESET;
    5116:	2005      	movs	r0, #5
}
    5118:	4770      	bx	lr
	int evt = EVT_NOP;
    511a:	2000      	movs	r0, #0
    511c:	4770      	bx	lr

0000511e <process_complete>:
{
    511e:	b538      	push	{r3, r4, r5, lr}
    5120:	4604      	mov	r4, r0
    5122:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5124:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    5126:	2a00      	cmp	r2, #0
    5128:	db07      	blt.n	513a <process_complete+0x1c>
    512a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    512e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    5130:	2a01      	cmp	r2, #1
    5132:	d90e      	bls.n	5152 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    5134:	2b04      	cmp	r3, #4
    5136:	d032      	beq.n	519e <process_complete+0x80>
}
    5138:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    513a:	e9d0 0100 	ldrd	r0, r1, [r0]
    513e:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    5142:	2300      	movs	r3, #0
    5144:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    5146:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    5148:	2101      	movs	r1, #1
    514a:	4620      	mov	r0, r4
    514c:	f7ff ffa7 	bl	509e <set_state>
    5150:	e7f2      	b.n	5138 <process_complete+0x1a>
		*clients = mgr->clients;
    5152:	e9d0 0100 	ldrd	r0, r1, [r0]
    5156:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    515a:	2200      	movs	r2, #0
    515c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    515e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    5160:	2b06      	cmp	r3, #6
    5162:	d117      	bne.n	5194 <process_complete+0x76>
	return list->head;
    5164:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5166:	b13b      	cbz	r3, 5178 <process_complete+0x5a>
				mgr->refs += 1U;
    5168:	8b62      	ldrh	r2, [r4, #26]
    516a:	3201      	adds	r2, #1
    516c:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    516e:	2b00      	cmp	r3, #0
    5170:	d0f9      	beq.n	5166 <process_complete+0x48>
	return node->next;
    5172:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5174:	2b00      	cmp	r3, #0
    5176:	d1f6      	bne.n	5166 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    5178:	2102      	movs	r1, #2
    517a:	4620      	mov	r0, r4
    517c:	f7ff ff8f 	bl	509e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5180:	4620      	mov	r0, r4
    5182:	f7ff ffb3 	bl	50ec <process_recheck>
    5186:	2800      	cmp	r0, #0
    5188:	d0d6      	beq.n	5138 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    518a:	8b23      	ldrh	r3, [r4, #24]
    518c:	f043 0320 	orr.w	r3, r3, #32
    5190:	8323      	strh	r3, [r4, #24]
    5192:	e7d1      	b.n	5138 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    5194:	2100      	movs	r1, #0
    5196:	4620      	mov	r0, r4
    5198:	f7ff ff81 	bl	509e <set_state>
    519c:	e7f0      	b.n	5180 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    519e:	2100      	movs	r1, #0
    51a0:	f7ff ff7d 	bl	509e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    51a4:	4620      	mov	r0, r4
    51a6:	f7ff ffa1 	bl	50ec <process_recheck>
    51aa:	2800      	cmp	r0, #0
    51ac:	d0c4      	beq.n	5138 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    51ae:	8b23      	ldrh	r3, [r4, #24]
    51b0:	f043 0320 	orr.w	r3, r3, #32
    51b4:	8323      	strh	r3, [r4, #24]
}
    51b6:	e7bf      	b.n	5138 <process_complete+0x1a>

000051b8 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    51b8:	b158      	cbz	r0, 51d2 <validate_args+0x1a>
{
    51ba:	b510      	push	{r4, lr}
    51bc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    51be:	b159      	cbz	r1, 51d8 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    51c0:	1d08      	adds	r0, r1, #4
    51c2:	f7ff ff12 	bl	4fea <sys_notify_validate>
	if ((rv == 0)
    51c6:	b918      	cbnz	r0, 51d0 <validate_args+0x18>
	    && ((cli->notify.flags
    51c8:	68a3      	ldr	r3, [r4, #8]
    51ca:	f033 0303 	bics.w	r3, r3, #3
    51ce:	d106      	bne.n	51de <validate_args+0x26>
}
    51d0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    51d2:	f06f 0015 	mvn.w	r0, #21
}
    51d6:	4770      	bx	lr
		return -EINVAL;
    51d8:	f06f 0015 	mvn.w	r0, #21
    51dc:	e7f8      	b.n	51d0 <validate_args+0x18>
		rv = -EINVAL;
    51de:	f06f 0015 	mvn.w	r0, #21
    51e2:	e7f5      	b.n	51d0 <validate_args+0x18>

000051e4 <notify_one>:
{
    51e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51e8:	4607      	mov	r7, r0
    51ea:	460c      	mov	r4, r1
    51ec:	4616      	mov	r6, r2
    51ee:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    51f0:	4619      	mov	r1, r3
    51f2:	1d20      	adds	r0, r4, #4
    51f4:	f7ff ff10 	bl	5018 <sys_notify_finalize>
	if (cb) {
    51f8:	b128      	cbz	r0, 5206 <notify_one+0x22>
    51fa:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    51fc:	462b      	mov	r3, r5
    51fe:	4632      	mov	r2, r6
    5200:	4621      	mov	r1, r4
    5202:	4638      	mov	r0, r7
    5204:	47c0      	blx	r8
}
    5206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000520a <notify_all>:
{
    520a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    520e:	4681      	mov	r9, r0
    5210:	460c      	mov	r4, r1
    5212:	4690      	mov	r8, r2
    5214:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    5216:	e005      	b.n	5224 <notify_all+0x1a>
	list->tail = node;
    5218:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    521a:	463b      	mov	r3, r7
    521c:	4642      	mov	r2, r8
    521e:	4648      	mov	r0, r9
    5220:	f7ff ffe0 	bl	51e4 <notify_one>
	return list->head;
    5224:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    5226:	b129      	cbz	r1, 5234 <notify_all+0x2a>
	return node->next;
    5228:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    522a:	6025      	str	r5, [r4, #0]
	return list->tail;
    522c:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    522e:	428e      	cmp	r6, r1
    5230:	d1f3      	bne.n	521a <notify_all+0x10>
    5232:	e7f1      	b.n	5218 <notify_all+0xe>
}
    5234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005238 <transition_complete>:
{
    5238:	b510      	push	{r4, lr}
	__asm__ volatile(
    523a:	f04f 0420 	mov.w	r4, #32
    523e:	f3ef 8211 	mrs	r2, BASEPRI
    5242:	f384 8812 	msr	BASEPRI_MAX, r4
    5246:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    524a:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    524c:	2101      	movs	r1, #1
    524e:	f7fb f913 	bl	478 <process_event>
}
    5252:	bd10      	pop	{r4, pc}

00005254 <onoff_manager_init>:
	if ((mgr == NULL)
    5254:	4603      	mov	r3, r0
    5256:	b168      	cbz	r0, 5274 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5258:	b179      	cbz	r1, 527a <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    525a:	680a      	ldr	r2, [r1, #0]
    525c:	b182      	cbz	r2, 5280 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    525e:	684a      	ldr	r2, [r1, #4]
    5260:	b18a      	cbz	r2, 5286 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5262:	2000      	movs	r0, #0
    5264:	6018      	str	r0, [r3, #0]
    5266:	6058      	str	r0, [r3, #4]
    5268:	6098      	str	r0, [r3, #8]
    526a:	60d8      	str	r0, [r3, #12]
    526c:	6158      	str	r0, [r3, #20]
    526e:	6198      	str	r0, [r3, #24]
    5270:	6119      	str	r1, [r3, #16]
	return 0;
    5272:	4770      	bx	lr
		return -EINVAL;
    5274:	f06f 0015 	mvn.w	r0, #21
    5278:	4770      	bx	lr
    527a:	f06f 0015 	mvn.w	r0, #21
    527e:	4770      	bx	lr
    5280:	f06f 0015 	mvn.w	r0, #21
    5284:	4770      	bx	lr
    5286:	f06f 0015 	mvn.w	r0, #21
}
    528a:	4770      	bx	lr

0000528c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    528e:	4604      	mov	r4, r0
    5290:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5292:	f7ff ff91 	bl	51b8 <validate_args>

	if (rv < 0) {
    5296:	1e06      	subs	r6, r0, #0
    5298:	db37      	blt.n	530a <onoff_request+0x7e>
    529a:	f04f 0320 	mov.w	r3, #32
    529e:	f3ef 8211 	mrs	r2, BASEPRI
    52a2:	f383 8812 	msr	BASEPRI_MAX, r3
    52a6:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    52aa:	8b25      	ldrh	r5, [r4, #24]
    52ac:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    52b0:	8b63      	ldrh	r3, [r4, #26]
    52b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    52b6:	428b      	cmp	r3, r1
    52b8:	d02f      	beq.n	531a <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    52ba:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    52bc:	2d02      	cmp	r5, #2
    52be:	d00c      	beq.n	52da <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    52c0:	b18d      	cbz	r5, 52e6 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    52c2:	2d04      	cmp	r5, #4
    52c4:	d00f      	beq.n	52e6 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    52c6:	2d06      	cmp	r5, #6
    52c8:	d00d      	beq.n	52e6 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    52ca:	2d05      	cmp	r5, #5
    52cc:	d01f      	beq.n	530e <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    52ce:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    52d2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    52d4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    52d6:	4608      	mov	r0, r1
    52d8:	e00a      	b.n	52f0 <onoff_request+0x64>
		mgr->refs += 1U;
    52da:	3301      	adds	r3, #1
    52dc:	8363      	strh	r3, [r4, #26]
		notify = true;
    52de:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    52e0:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    52e2:	4618      	mov	r0, r3
    52e4:	e004      	b.n	52f0 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    52e6:	fab5 f385 	clz	r3, r5
    52ea:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    52ec:	2100      	movs	r1, #0
		add_client = true;
    52ee:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    52f0:	b128      	cbz	r0, 52fe <onoff_request+0x72>
	parent->next = child;
    52f2:	2000      	movs	r0, #0
    52f4:	6038      	str	r0, [r7, #0]
	return list->tail;
    52f6:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    52f8:	b1a8      	cbz	r0, 5326 <onoff_request+0x9a>
	parent->next = child;
    52fa:	6007      	str	r7, [r0, #0]
	list->tail = node;
    52fc:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    52fe:	b9ab      	cbnz	r3, 532c <onoff_request+0xa0>
	__asm__ volatile(
    5300:	f382 8811 	msr	BASEPRI, r2
    5304:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5308:	b9a9      	cbnz	r1, 5336 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    530a:	4630      	mov	r0, r6
    530c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    530e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    5312:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5314:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5316:	4608      	mov	r0, r1
    5318:	e7ea      	b.n	52f0 <onoff_request+0x64>
		rv = -EAGAIN;
    531a:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    531e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5320:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5322:	4608      	mov	r0, r1
    5324:	e7e4      	b.n	52f0 <onoff_request+0x64>
    5326:	6067      	str	r7, [r4, #4]
	list->head = node;
    5328:	6027      	str	r7, [r4, #0]
}
    532a:	e7e8      	b.n	52fe <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    532c:	2102      	movs	r1, #2
    532e:	4620      	mov	r0, r4
    5330:	f7fb f8a2 	bl	478 <process_event>
    5334:	e7e9      	b.n	530a <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    5336:	2300      	movs	r3, #0
    5338:	462a      	mov	r2, r5
    533a:	4639      	mov	r1, r7
    533c:	4620      	mov	r0, r4
    533e:	f7ff ff51 	bl	51e4 <notify_one>
    5342:	e7e2      	b.n	530a <onoff_request+0x7e>

00005344 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5344:	b508      	push	{r3, lr}
    5346:	4604      	mov	r4, r0
    5348:	4608      	mov	r0, r1
    534a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    534c:	461a      	mov	r2, r3
    534e:	47a0      	blx	r4
	return z_impl_z_current_get();
    5350:	f7ff faa0 	bl	4894 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5354:	f7fc fb2c 	bl	19b0 <z_impl_k_thread_abort>

00005358 <extract_decimal>:
{
    5358:	b410      	push	{r4}
    535a:	4604      	mov	r4, r0
	const char *sp = *str;
    535c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    535e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    5360:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5362:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5366:	2909      	cmp	r1, #9
    5368:	d806      	bhi.n	5378 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    536a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    536e:	3201      	adds	r2, #1
    5370:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5374:	3830      	subs	r0, #48	; 0x30
    5376:	e7f3      	b.n	5360 <extract_decimal+0x8>
	*str = sp;
    5378:	6022      	str	r2, [r4, #0]
}
    537a:	bc10      	pop	{r4}
    537c:	4770      	bx	lr

0000537e <encode_uint>:
{
    537e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5382:	b083      	sub	sp, #12
    5384:	4604      	mov	r4, r0
    5386:	460d      	mov	r5, r1
    5388:	9201      	str	r2, [sp, #4]
    538a:	469a      	mov	sl, r3
    538c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    5390:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5392:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5396:	2b6f      	cmp	r3, #111	; 0x6f
    5398:	d00f      	beq.n	53ba <encode_uint+0x3c>
    539a:	d906      	bls.n	53aa <encode_uint+0x2c>
    539c:	2b70      	cmp	r3, #112	; 0x70
    539e:	d00f      	beq.n	53c0 <encode_uint+0x42>
    53a0:	2b78      	cmp	r3, #120	; 0x78
    53a2:	d110      	bne.n	53c6 <encode_uint+0x48>
		return 16;
    53a4:	f04f 0910 	mov.w	r9, #16
    53a8:	e026      	b.n	53f8 <encode_uint+0x7a>
	switch (specifier) {
    53aa:	2b58      	cmp	r3, #88	; 0x58
    53ac:	d002      	beq.n	53b4 <encode_uint+0x36>
    53ae:	f04f 090a 	mov.w	r9, #10
    53b2:	e021      	b.n	53f8 <encode_uint+0x7a>
		return 16;
    53b4:	f04f 0910 	mov.w	r9, #16
    53b8:	e01e      	b.n	53f8 <encode_uint+0x7a>
		return 8;
    53ba:	f04f 0908 	mov.w	r9, #8
    53be:	e01b      	b.n	53f8 <encode_uint+0x7a>
		return 16;
    53c0:	f04f 0910 	mov.w	r9, #16
    53c4:	e018      	b.n	53f8 <encode_uint+0x7a>
	switch (specifier) {
    53c6:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    53ca:	e015      	b.n	53f8 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    53cc:	f1bb 0f19 	cmp.w	fp, #25
    53d0:	d820      	bhi.n	5414 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    53d2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    53d4:	3237      	adds	r2, #55	; 0x37
    53d6:	b2d2      	uxtb	r2, r2
    53d8:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    53dc:	4632      	mov	r2, r6
    53de:	463b      	mov	r3, r7
    53e0:	4620      	mov	r0, r4
    53e2:	4629      	mov	r1, r5
    53e4:	f7fa fe8c 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    53e8:	42bd      	cmp	r5, r7
    53ea:	bf08      	it	eq
    53ec:	42b4      	cmpeq	r4, r6
    53ee:	d315      	bcc.n	541c <encode_uint+0x9e>
    53f0:	45d0      	cmp	r8, sl
    53f2:	d913      	bls.n	541c <encode_uint+0x9e>
		value /= radix;
    53f4:	4604      	mov	r4, r0
    53f6:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    53f8:	464e      	mov	r6, r9
    53fa:	2700      	movs	r7, #0
    53fc:	464a      	mov	r2, r9
    53fe:	463b      	mov	r3, r7
    5400:	4620      	mov	r0, r4
    5402:	4629      	mov	r1, r5
    5404:	f7fa fe7c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5408:	2a09      	cmp	r2, #9
    540a:	d8df      	bhi.n	53cc <encode_uint+0x4e>
    540c:	b2d2      	uxtb	r2, r2
    540e:	3230      	adds	r2, #48	; 0x30
    5410:	b2d2      	uxtb	r2, r2
    5412:	e7e1      	b.n	53d8 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5414:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5416:	3257      	adds	r2, #87	; 0x57
    5418:	b2d2      	uxtb	r2, r2
    541a:	e7dd      	b.n	53d8 <encode_uint+0x5a>
	if (conv->flag_hash) {
    541c:	9b01      	ldr	r3, [sp, #4]
    541e:	781b      	ldrb	r3, [r3, #0]
    5420:	f013 0f20 	tst.w	r3, #32
    5424:	d005      	beq.n	5432 <encode_uint+0xb4>
		if (radix == 8) {
    5426:	f1b9 0f08 	cmp.w	r9, #8
    542a:	d006      	beq.n	543a <encode_uint+0xbc>
		} else if (radix == 16) {
    542c:	f1b9 0f10 	cmp.w	r9, #16
    5430:	d009      	beq.n	5446 <encode_uint+0xc8>
}
    5432:	4640      	mov	r0, r8
    5434:	b003      	add	sp, #12
    5436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    543a:	9a01      	ldr	r2, [sp, #4]
    543c:	7893      	ldrb	r3, [r2, #2]
    543e:	f043 0308 	orr.w	r3, r3, #8
    5442:	7093      	strb	r3, [r2, #2]
    5444:	e7f5      	b.n	5432 <encode_uint+0xb4>
			conv->altform_0c = true;
    5446:	9a01      	ldr	r2, [sp, #4]
    5448:	7893      	ldrb	r3, [r2, #2]
    544a:	f043 0310 	orr.w	r3, r3, #16
    544e:	7093      	strb	r3, [r2, #2]
    5450:	e7ef      	b.n	5432 <encode_uint+0xb4>

00005452 <outs>:
{
    5452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5456:	4607      	mov	r7, r0
    5458:	460e      	mov	r6, r1
    545a:	4614      	mov	r4, r2
    545c:	4698      	mov	r8, r3
	size_t count = 0;
    545e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5460:	e006      	b.n	5470 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    5462:	4631      	mov	r1, r6
    5464:	f814 0b01 	ldrb.w	r0, [r4], #1
    5468:	47b8      	blx	r7
		if (rc < 0) {
    546a:	2800      	cmp	r0, #0
    546c:	db09      	blt.n	5482 <outs+0x30>
		++count;
    546e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5470:	4544      	cmp	r4, r8
    5472:	d3f6      	bcc.n	5462 <outs+0x10>
    5474:	f1b8 0f00 	cmp.w	r8, #0
    5478:	d102      	bne.n	5480 <outs+0x2e>
    547a:	7823      	ldrb	r3, [r4, #0]
    547c:	2b00      	cmp	r3, #0
    547e:	d1f0      	bne.n	5462 <outs+0x10>
	return (int)count;
    5480:	4628      	mov	r0, r5
}
    5482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005486 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5486:	4770      	bx	lr

00005488 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    5488:	2200      	movs	r2, #0
    548a:	6002      	str	r2, [r0, #0]
    548c:	6042      	str	r2, [r0, #4]
    548e:	6082      	str	r2, [r0, #8]
}
    5490:	4770      	bx	lr

00005492 <abort_function>:
{
    5492:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5494:	2000      	movs	r0, #0
    5496:	f7fb fd85 	bl	fa4 <sys_reboot>

0000549a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    549a:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    549c:	f000 fd01 	bl	5ea2 <z_fatal_error>
}
    54a0:	bd08      	pop	{r3, pc}

000054a2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    54a2:	b508      	push	{r3, lr}
    54a4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    54a6:	6800      	ldr	r0, [r0, #0]
    54a8:	f7ff fff7 	bl	549a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    54ac:	bd08      	pop	{r3, pc}

000054ae <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    54ae:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    54b0:	2100      	movs	r1, #0
    54b2:	2001      	movs	r0, #1
    54b4:	f7ff fff1 	bl	549a <z_arm_fatal_error>
}
    54b8:	bd08      	pop	{r3, pc}

000054ba <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    54ba:	b508      	push	{r3, lr}
	handler();
    54bc:	f7fb ffce 	bl	145c <z_SysNmiOnReset>
	z_arm_int_exit();
    54c0:	f7fc f8ca 	bl	1658 <z_arm_exc_exit>
}
    54c4:	bd08      	pop	{r3, pc}

000054c6 <memory_fault_recoverable>:
}
    54c6:	2000      	movs	r0, #0
    54c8:	4770      	bx	lr

000054ca <debug_monitor>:
	*recoverable = false;
    54ca:	2300      	movs	r3, #0
    54cc:	700b      	strb	r3, [r1, #0]
}
    54ce:	4770      	bx	lr

000054d0 <fault_handle>:
{
    54d0:	b508      	push	{r3, lr}
	*recoverable = false;
    54d2:	2300      	movs	r3, #0
    54d4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    54d6:	1ecb      	subs	r3, r1, #3
    54d8:	2b09      	cmp	r3, #9
    54da:	d81a      	bhi.n	5512 <fault_handle+0x42>
    54dc:	e8df f003 	tbb	[pc, r3]
    54e0:	110d0905 	.word	0x110d0905
    54e4:	19191919 	.word	0x19191919
    54e8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    54ea:	4611      	mov	r1, r2
    54ec:	f7fc f944 	bl	1778 <hard_fault>
		break;
    54f0:	e010      	b.n	5514 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    54f2:	2100      	movs	r1, #0
    54f4:	f7fc f8fa 	bl	16ec <mem_manage_fault>
		break;
    54f8:	e00c      	b.n	5514 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    54fa:	2100      	movs	r1, #0
    54fc:	f7fc f8ba 	bl	1674 <bus_fault>
		break;
    5500:	e008      	b.n	5514 <fault_handle+0x44>
		reason = usage_fault(esf);
    5502:	f7fc f8e1 	bl	16c8 <usage_fault>
		break;
    5506:	e005      	b.n	5514 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    5508:	4611      	mov	r1, r2
    550a:	f7ff ffde 	bl	54ca <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    550e:	2000      	movs	r0, #0
		break;
    5510:	e000      	b.n	5514 <fault_handle+0x44>
	*recoverable = false;
    5512:	2000      	movs	r0, #0
}
    5514:	bd08      	pop	{r3, pc}

00005516 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    5516:	6843      	ldr	r3, [r0, #4]
    5518:	1e5a      	subs	r2, r3, #1
		&&
    551a:	4213      	tst	r3, r2
    551c:	d106      	bne.n	552c <mpu_partition_is_valid+0x16>
		&&
    551e:	2b1f      	cmp	r3, #31
    5520:	d906      	bls.n	5530 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    5522:	6803      	ldr	r3, [r0, #0]
		&&
    5524:	421a      	tst	r2, r3
    5526:	d005      	beq.n	5534 <mpu_partition_is_valid+0x1e>
    5528:	2000      	movs	r0, #0
    552a:	4770      	bx	lr
    552c:	2000      	movs	r0, #0
    552e:	4770      	bx	lr
    5530:	2000      	movs	r0, #0
    5532:	4770      	bx	lr
    5534:	2001      	movs	r0, #1
}
    5536:	4770      	bx	lr

00005538 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    5538:	2807      	cmp	r0, #7
    553a:	d805      	bhi.n	5548 <region_allocate_and_init+0x10>
{
    553c:	b510      	push	{r4, lr}
    553e:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5540:	f7fc fa6c 	bl	1a1c <region_init>
	return index;
    5544:	4620      	mov	r0, r4
}
    5546:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5548:	f06f 0015 	mvn.w	r0, #21
}
    554c:	4770      	bx	lr

0000554e <mpu_configure_region>:
{
    554e:	b500      	push	{lr}
    5550:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    5552:	680b      	ldr	r3, [r1, #0]
    5554:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    5556:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5558:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    555a:	2b20      	cmp	r3, #32
    555c:	d912      	bls.n	5584 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    555e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5562:	d811      	bhi.n	5588 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5564:	3b01      	subs	r3, #1
    5566:	fab3 f383 	clz	r3, r3
    556a:	f1c3 031f 	rsb	r3, r3, #31
    556e:	005b      	lsls	r3, r3, #1
    5570:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5574:	4313      	orrs	r3, r2
    5576:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5578:	a901      	add	r1, sp, #4
    557a:	f7ff ffdd 	bl	5538 <region_allocate_and_init>
}
    557e:	b005      	add	sp, #20
    5580:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    5584:	2308      	movs	r3, #8
    5586:	e7f5      	b.n	5574 <mpu_configure_region+0x26>
		return REGION_4G;
    5588:	233e      	movs	r3, #62	; 0x3e
    558a:	e7f3      	b.n	5574 <mpu_configure_region+0x26>

0000558c <mpu_configure_regions>:
{
    558c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5590:	4680      	mov	r8, r0
    5592:	460f      	mov	r7, r1
    5594:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    5596:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    5598:	2500      	movs	r5, #0
    559a:	e009      	b.n	55b0 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    559c:	4621      	mov	r1, r4
    559e:	b2f0      	uxtb	r0, r6
    55a0:	f7ff ffd5 	bl	554e <mpu_configure_region>
    55a4:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    55a6:	f110 0f16 	cmn.w	r0, #22
    55aa:	d014      	beq.n	55d6 <mpu_configure_regions+0x4a>
		reg_index++;
    55ac:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    55ae:	3501      	adds	r5, #1
    55b0:	42bd      	cmp	r5, r7
    55b2:	da10      	bge.n	55d6 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    55b4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    55b8:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    55bc:	6862      	ldr	r2, [r4, #4]
    55be:	2a00      	cmp	r2, #0
    55c0:	d0f5      	beq.n	55ae <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    55c2:	f1b9 0f00 	cmp.w	r9, #0
    55c6:	d0e9      	beq.n	559c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    55c8:	4620      	mov	r0, r4
    55ca:	f7ff ffa4 	bl	5516 <mpu_partition_is_valid>
		if (do_sanity_check &&
    55ce:	2800      	cmp	r0, #0
    55d0:	d1e4      	bne.n	559c <mpu_configure_regions+0x10>
			return -EINVAL;
    55d2:	f06f 0615 	mvn.w	r6, #21
}
    55d6:	4630      	mov	r0, r6
    55d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000055dc <arm_core_mpu_configure_static_mpu_regions>:
{
    55dc:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    55de:	f7fc fa2d 	bl	1a3c <mpu_configure_static_mpu_regions>
}
    55e2:	bd08      	pop	{r3, pc}

000055e4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    55e4:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    55e6:	f7fc fa33 	bl	1a50 <mpu_configure_dynamic_mpu_regions>
}
    55ea:	bd08      	pop	{r3, pc}

000055ec <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    55ec:	4602      	mov	r2, r0
    55ee:	780b      	ldrb	r3, [r1, #0]
    55f0:	b11b      	cbz	r3, 55fa <strcpy+0xe>
		*d = *s;
    55f2:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    55f6:	3101      	adds	r1, #1
    55f8:	e7f9      	b.n	55ee <strcpy+0x2>
	}

	*d = '\0';
    55fa:	7013      	strb	r3, [r2, #0]

	return dest;
}
    55fc:	4770      	bx	lr

000055fe <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    55fe:	4603      	mov	r3, r0
    5600:	b1a2      	cbz	r2, 562c <strncpy+0x2e>
{
    5602:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5604:	780c      	ldrb	r4, [r1, #0]
    5606:	b12c      	cbz	r4, 5614 <strncpy+0x16>
		*d = *s;
    5608:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    560c:	3101      	adds	r1, #1
		d++;
		n--;
    560e:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    5610:	2a00      	cmp	r2, #0
    5612:	d1f7      	bne.n	5604 <strncpy+0x6>
	}

	while (n > 0) {
    5614:	b122      	cbz	r2, 5620 <strncpy+0x22>
		*d = '\0';
    5616:	2100      	movs	r1, #0
    5618:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    561c:	3a01      	subs	r2, #1
    561e:	e7f9      	b.n	5614 <strncpy+0x16>
	}

	return dest;
}
    5620:	bc10      	pop	{r4}
    5622:	4770      	bx	lr
		*d = '\0';
    5624:	2100      	movs	r1, #0
    5626:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    562a:	3a01      	subs	r2, #1
	while (n > 0) {
    562c:	2a00      	cmp	r2, #0
    562e:	d1f9      	bne.n	5624 <strncpy+0x26>
    5630:	4770      	bx	lr

00005632 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5632:	4603      	mov	r3, r0
	size_t n = 0;
    5634:	2000      	movs	r0, #0

	while (*s != '\0') {
    5636:	781a      	ldrb	r2, [r3, #0]
    5638:	b112      	cbz	r2, 5640 <strlen+0xe>
		s++;
    563a:	3301      	adds	r3, #1
		n++;
    563c:	3001      	adds	r0, #1
    563e:	e7fa      	b.n	5636 <strlen+0x4>
	}

	return n;
}
    5640:	4770      	bx	lr

00005642 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5642:	4603      	mov	r3, r0
	size_t n = 0;
    5644:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5646:	781a      	ldrb	r2, [r3, #0]
    5648:	b122      	cbz	r2, 5654 <strnlen+0x12>
    564a:	4288      	cmp	r0, r1
    564c:	d202      	bcs.n	5654 <strnlen+0x12>
		s++;
    564e:	3301      	adds	r3, #1
		n++;
    5650:	3001      	adds	r0, #1
    5652:	e7f8      	b.n	5646 <strnlen+0x4>
	}

	return n;
}
    5654:	4770      	bx	lr

00005656 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5656:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5658:	ea80 0301 	eor.w	r3, r0, r1
    565c:	f013 0f03 	tst.w	r3, #3
    5660:	d001      	beq.n	5666 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    5662:	4603      	mov	r3, r0
    5664:	e017      	b.n	5696 <memcpy+0x40>
    5666:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5668:	f013 0f03 	tst.w	r3, #3
    566c:	d00b      	beq.n	5686 <memcpy+0x30>
			if (n == 0) {
    566e:	b1a2      	cbz	r2, 569a <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5670:	f811 4b01 	ldrb.w	r4, [r1], #1
    5674:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    5678:	3a01      	subs	r2, #1
    567a:	e7f5      	b.n	5668 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    567c:	f851 4b04 	ldr.w	r4, [r1], #4
    5680:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5684:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5686:	2a03      	cmp	r2, #3
    5688:	d8f8      	bhi.n	567c <memcpy+0x26>
    568a:	e004      	b.n	5696 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    568c:	f811 4b01 	ldrb.w	r4, [r1], #1
    5690:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    5694:	3a01      	subs	r2, #1
	while (n > 0) {
    5696:	2a00      	cmp	r2, #0
    5698:	d1f8      	bne.n	568c <memcpy+0x36>
	}

	return d;
}
    569a:	bc10      	pop	{r4}
    569c:	4770      	bx	lr

0000569e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    569e:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    56a0:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    56a2:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    56a4:	f013 0f03 	tst.w	r3, #3
    56a8:	d004      	beq.n	56b4 <memset+0x16>
		if (n == 0) {
    56aa:	b19a      	cbz	r2, 56d4 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    56ac:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    56b0:	3a01      	subs	r2, #1
    56b2:	e7f7      	b.n	56a4 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    56b4:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    56b6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    56ba:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    56be:	2a03      	cmp	r2, #3
    56c0:	d906      	bls.n	56d0 <memset+0x32>
		*(d_word++) = c_word;
    56c2:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    56c6:	3a04      	subs	r2, #4
    56c8:	e7f9      	b.n	56be <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    56ca:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    56ce:	3a01      	subs	r2, #1
	while (n > 0) {
    56d0:	2a00      	cmp	r2, #0
    56d2:	d1fa      	bne.n	56ca <memset+0x2c>
	}

	return buf;
}
    56d4:	bc10      	pop	{r4}
    56d6:	4770      	bx	lr

000056d8 <_stdout_hook_default>:
}
    56d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    56dc:	4770      	bx	lr

000056de <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    56de:	b084      	sub	sp, #16
    56e0:	ab04      	add	r3, sp, #16
    56e2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    56e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    56ea:	2b06      	cmp	r3, #6
    56ec:	d001      	beq.n	56f2 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    56ee:	b004      	add	sp, #16
    56f0:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    56f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56f6:	2201      	movs	r2, #1
    56f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    56fc:	f3bf 8f4f 	dsb	sy
        __WFE();
    5700:	bf20      	wfe
    while (true)
    5702:	e7fd      	b.n	5700 <pm_power_state_set+0x22>

00005704 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    5704:	b084      	sub	sp, #16
    5706:	ab04      	add	r3, sp, #16
    5708:	e903 0007 	stmdb	r3, {r0, r1, r2}
    570c:	2300      	movs	r3, #0
    570e:	f383 8811 	msr	BASEPRI, r3
    5712:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5716:	b004      	add	sp, #16
    5718:	4770      	bx	lr

0000571a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    571a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    571c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5720:	0089      	lsls	r1, r1, #2
    5722:	3138      	adds	r1, #56	; 0x38
}
    5724:	4408      	add	r0, r1
    5726:	4770      	bx	lr

00005728 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    5728:	6840      	ldr	r0, [r0, #4]
}
    572a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    572e:	4770      	bx	lr

00005730 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5730:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5732:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    5736:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    573a:	4770      	bx	lr

0000573c <get_status>:
{
    573c:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    573e:	b2c9      	uxtb	r1, r1
    5740:	f7ff ffeb 	bl	571a <get_sub_data>
    5744:	6880      	ldr	r0, [r0, #8]
}
    5746:	f000 0007 	and.w	r0, r0, #7
    574a:	bd08      	pop	{r3, pc}

0000574c <set_off_state>:
	__asm__ volatile(
    574c:	f04f 0320 	mov.w	r3, #32
    5750:	f3ef 8211 	mrs	r2, BASEPRI
    5754:	f383 8812 	msr	BASEPRI_MAX, r3
    5758:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    575c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    575e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5762:	d001      	beq.n	5768 <set_off_state+0x1c>
    5764:	428b      	cmp	r3, r1
    5766:	d107      	bne.n	5778 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5768:	2301      	movs	r3, #1
    576a:	6003      	str	r3, [r0, #0]
	int err = 0;
    576c:	2000      	movs	r0, #0
	__asm__ volatile(
    576e:	f382 8811 	msr	BASEPRI, r2
    5772:	f3bf 8f6f 	isb	sy
}
    5776:	4770      	bx	lr
		err = -EPERM;
    5778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    577c:	e7f7      	b.n	576e <set_off_state+0x22>

0000577e <set_starting_state>:
{
    577e:	b410      	push	{r4}
	__asm__ volatile(
    5780:	f04f 0320 	mov.w	r3, #32
    5784:	f3ef 8211 	mrs	r2, BASEPRI
    5788:	f383 8812 	msr	BASEPRI_MAX, r3
    578c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5790:	6803      	ldr	r3, [r0, #0]
    5792:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5796:	f003 0307 	and.w	r3, r3, #7
    579a:	2b01      	cmp	r3, #1
    579c:	d009      	beq.n	57b2 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    579e:	428c      	cmp	r4, r1
    57a0:	d00a      	beq.n	57b8 <set_starting_state+0x3a>
		err = -EPERM;
    57a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    57a6:	f382 8811 	msr	BASEPRI, r2
    57aa:	f3bf 8f6f 	isb	sy
}
    57ae:	bc10      	pop	{r4}
    57b0:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    57b2:	6001      	str	r1, [r0, #0]
	int err = 0;
    57b4:	2000      	movs	r0, #0
    57b6:	e7f6      	b.n	57a6 <set_starting_state+0x28>
		err = -EALREADY;
    57b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    57bc:	e7f3      	b.n	57a6 <set_starting_state+0x28>

000057be <set_on_state>:
	__asm__ volatile(
    57be:	f04f 0320 	mov.w	r3, #32
    57c2:	f3ef 8211 	mrs	r2, BASEPRI
    57c6:	f383 8812 	msr	BASEPRI_MAX, r3
    57ca:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    57ce:	6803      	ldr	r3, [r0, #0]
    57d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    57d4:	f043 0302 	orr.w	r3, r3, #2
    57d8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    57da:	f382 8811 	msr	BASEPRI, r2
    57de:	f3bf 8f6f 	isb	sy
}
    57e2:	4770      	bx	lr

000057e4 <clkstarted_handle>:
{
    57e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57e6:	4606      	mov	r6, r0
    57e8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    57ea:	f7ff ff96 	bl	571a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    57ee:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    57f0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    57f2:	2300      	movs	r3, #0
    57f4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    57f8:	f7ff ffe1 	bl	57be <set_on_state>
	if (callback) {
    57fc:	b11d      	cbz	r5, 5806 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    57fe:	463a      	mov	r2, r7
    5800:	4621      	mov	r1, r4
    5802:	4630      	mov	r0, r6
    5804:	47a8      	blx	r5
}
    5806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005808 <stop>:
{
    5808:	b570      	push	{r4, r5, r6, lr}
    580a:	4606      	mov	r6, r0
    580c:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    580e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5810:	4621      	mov	r1, r4
    5812:	f7ff ff82 	bl	571a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    5816:	4629      	mov	r1, r5
    5818:	3008      	adds	r0, #8
    581a:	f7ff ff97 	bl	574c <set_off_state>
	if (err < 0) {
    581e:	2800      	cmp	r0, #0
    5820:	db06      	blt.n	5830 <stop+0x28>
	get_sub_config(dev, type)->stop();
    5822:	4621      	mov	r1, r4
    5824:	4630      	mov	r0, r6
    5826:	f7ff ff7f 	bl	5728 <get_sub_config>
    582a:	6843      	ldr	r3, [r0, #4]
    582c:	4798      	blx	r3
	return 0;
    582e:	2000      	movs	r0, #0
}
    5830:	bd70      	pop	{r4, r5, r6, pc}

00005832 <api_stop>:
{
    5832:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5834:	2280      	movs	r2, #128	; 0x80
    5836:	f7ff ffe7 	bl	5808 <stop>
}
    583a:	bd08      	pop	{r3, pc}

0000583c <async_start>:
{
    583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5840:	4606      	mov	r6, r0
    5842:	4690      	mov	r8, r2
    5844:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5846:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5848:	4629      	mov	r1, r5
    584a:	f7ff ff66 	bl	571a <get_sub_data>
    584e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5850:	9906      	ldr	r1, [sp, #24]
    5852:	3008      	adds	r0, #8
    5854:	f7ff ff93 	bl	577e <set_starting_state>
	if (err < 0) {
    5858:	2800      	cmp	r0, #0
    585a:	db09      	blt.n	5870 <async_start+0x34>
	subdata->cb = cb;
    585c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5860:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5862:	4629      	mov	r1, r5
    5864:	4630      	mov	r0, r6
    5866:	f7ff ff5f 	bl	5728 <get_sub_config>
    586a:	6803      	ldr	r3, [r0, #0]
    586c:	4798      	blx	r3
	return 0;
    586e:	2000      	movs	r0, #0
}
    5870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005874 <api_start>:
{
    5874:	b510      	push	{r4, lr}
    5876:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5878:	2480      	movs	r4, #128	; 0x80
    587a:	9400      	str	r4, [sp, #0]
    587c:	f7ff ffde 	bl	583c <async_start>
}
    5880:	b002      	add	sp, #8
    5882:	bd10      	pop	{r4, pc}

00005884 <onoff_started_callback>:
{
    5884:	b510      	push	{r4, lr}
    5886:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    5888:	b2c9      	uxtb	r1, r1
    588a:	f7ff ff51 	bl	5730 <get_onoff_manager>
	notify(mgr, 0);
    588e:	2100      	movs	r1, #0
    5890:	47a0      	blx	r4
}
    5892:	bd10      	pop	{r4, pc}

00005894 <hfclk_start>:
{
    5894:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5896:	2001      	movs	r0, #1
    5898:	f7fd fab4 	bl	2e04 <nrfx_clock_start>
}
    589c:	bd08      	pop	{r3, pc}

0000589e <lfclk_start>:
{
    589e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    58a0:	2000      	movs	r0, #0
    58a2:	f7fd faaf 	bl	2e04 <nrfx_clock_start>
}
    58a6:	bd08      	pop	{r3, pc}

000058a8 <hfclk_stop>:
{
    58a8:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    58aa:	2001      	movs	r0, #1
    58ac:	f7fd fae2 	bl	2e74 <nrfx_clock_stop>
}
    58b0:	bd08      	pop	{r3, pc}

000058b2 <lfclk_stop>:
{
    58b2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    58b4:	2000      	movs	r0, #0
    58b6:	f7fd fadd 	bl	2e74 <nrfx_clock_stop>
}
    58ba:	bd08      	pop	{r3, pc}

000058bc <blocking_start_callback>:
{
    58bc:	b508      	push	{r3, lr}
    58be:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    58c0:	f7fe fbde 	bl	4080 <z_impl_k_sem_give>
}
    58c4:	bd08      	pop	{r3, pc}

000058c6 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    58c6:	f010 0f10 	tst.w	r0, #16
    58ca:	d104      	bne.n	58d6 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    58cc:	f010 0f20 	tst.w	r0, #32
    58d0:	d103      	bne.n	58da <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    58d2:	2000      	movs	r0, #0
    58d4:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    58d6:	2003      	movs	r0, #3
    58d8:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    58da:	2001      	movs	r0, #1
}
    58dc:	4770      	bx	lr

000058de <gpio_nrfx_port_get_raw>:
	return port->config;
    58de:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    58e0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    58e2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    58e6:	600b      	str	r3, [r1, #0]
}
    58e8:	2000      	movs	r0, #0
    58ea:	4770      	bx	lr

000058ec <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    58ec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    58ee:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    58f0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    58f4:	4042      	eors	r2, r0
    58f6:	400a      	ands	r2, r1
    58f8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    58fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    58fe:	2000      	movs	r0, #0
    5900:	4770      	bx	lr

00005902 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    5902:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5904:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5906:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    590a:	2000      	movs	r0, #0
    590c:	4770      	bx	lr

0000590e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    590e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5910:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5912:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    5916:	2000      	movs	r0, #0
    5918:	4770      	bx	lr

0000591a <gpio_nrfx_port_toggle_bits>:
	return port->config;
    591a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    591c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    591e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5922:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5924:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5928:	2000      	movs	r0, #0
    592a:	4770      	bx	lr

0000592c <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    592c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    5930:	d007      	beq.n	5942 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5932:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    5936:	d00d      	beq.n	5954 <get_trigger+0x28>
    5938:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    593c:	d008      	beq.n	5950 <get_trigger+0x24>
    593e:	2001      	movs	r0, #1
}
    5940:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5942:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    5946:	d001      	beq.n	594c <get_trigger+0x20>
    5948:	2005      	movs	r0, #5
    594a:	4770      	bx	lr
    594c:	2004      	movs	r0, #4
    594e:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5950:	2002      	movs	r0, #2
    5952:	4770      	bx	lr
    5954:	2003      	movs	r0, #3
    5956:	4770      	bx	lr

00005958 <gpio_nrfx_manage_callback>:
{
    5958:	b470      	push	{r4, r5, r6}
	return port->data;
    595a:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    595c:	1d05      	adds	r5, r0, #4
	return list->head;
    595e:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5960:	b1db      	cbz	r3, 599a <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5962:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5964:	2400      	movs	r4, #0
    5966:	e00a      	b.n	597e <gpio_nrfx_manage_callback+0x26>
	return node->next;
    5968:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    596a:	6043      	str	r3, [r0, #4]
	return list->tail;
    596c:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    596e:	42a1      	cmp	r1, r4
    5970:	d10f      	bne.n	5992 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    5972:	606b      	str	r3, [r5, #4]
}
    5974:	e00d      	b.n	5992 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    5976:	606c      	str	r4, [r5, #4]
}
    5978:	e00b      	b.n	5992 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    597a:	461c      	mov	r4, r3
    597c:	681b      	ldr	r3, [r3, #0]
    597e:	b15b      	cbz	r3, 5998 <gpio_nrfx_manage_callback+0x40>
    5980:	429e      	cmp	r6, r3
    5982:	d1fa      	bne.n	597a <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    5984:	2c00      	cmp	r4, #0
    5986:	d0ef      	beq.n	5968 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    5988:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    598a:	6023      	str	r3, [r4, #0]
	return list->tail;
    598c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    598e:	4299      	cmp	r1, r3
    5990:	d0f1      	beq.n	5976 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    5992:	2300      	movs	r3, #0
    5994:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5996:	e000      	b.n	599a <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    5998:	b152      	cbz	r2, 59b0 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    599a:	b162      	cbz	r2, 59b6 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    599c:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    599e:	600b      	str	r3, [r1, #0]
	list->head = node;
    59a0:	6041      	str	r1, [r0, #4]
	return list->tail;
    59a2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    59a4:	b10b      	cbz	r3, 59aa <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    59a6:	2000      	movs	r0, #0
    59a8:	e006      	b.n	59b8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    59aa:	6069      	str	r1, [r5, #4]
    59ac:	2000      	movs	r0, #0
}
    59ae:	e003      	b.n	59b8 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    59b0:	f06f 0015 	mvn.w	r0, #21
    59b4:	e000      	b.n	59b8 <gpio_nrfx_manage_callback+0x60>
	return 0;
    59b6:	2000      	movs	r0, #0
}
    59b8:	bc70      	pop	{r4, r5, r6}
    59ba:	4770      	bx	lr

000059bc <nrfx_gpio_handler>:
{
    59bc:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    59be:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    59c2:	0940      	lsrs	r0, r0, #5
    59c4:	f7fc faf8 	bl	1fb8 <get_dev>
	if (port == NULL) {
    59c8:	b1d8      	cbz	r0, 5a02 <nrfx_gpio_handler+0x46>
    59ca:	4606      	mov	r6, r0
	return port->data;
    59cc:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    59ce:	2501      	movs	r5, #1
    59d0:	40a5      	lsls	r5, r4
	return list->head;
    59d2:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    59d4:	b119      	cbz	r1, 59de <nrfx_gpio_handler+0x22>
    59d6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    59d8:	b149      	cbz	r1, 59ee <nrfx_gpio_handler+0x32>
	return node->next;
    59da:	680c      	ldr	r4, [r1, #0]
    59dc:	e007      	b.n	59ee <nrfx_gpio_handler+0x32>
    59de:	460c      	mov	r4, r1
    59e0:	e005      	b.n	59ee <nrfx_gpio_handler+0x32>
    59e2:	b164      	cbz	r4, 59fe <nrfx_gpio_handler+0x42>
    59e4:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    59e6:	b104      	cbz	r4, 59ea <nrfx_gpio_handler+0x2e>
	return node->next;
    59e8:	6823      	ldr	r3, [r4, #0]
    59ea:	4621      	mov	r1, r4
    59ec:	461c      	mov	r4, r3
    59ee:	b141      	cbz	r1, 5a02 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    59f0:	688a      	ldr	r2, [r1, #8]
    59f2:	402a      	ands	r2, r5
    59f4:	d0f5      	beq.n	59e2 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    59f6:	684b      	ldr	r3, [r1, #4]
    59f8:	4630      	mov	r0, r6
    59fa:	4798      	blx	r3
    59fc:	e7f1      	b.n	59e2 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    59fe:	4623      	mov	r3, r4
    5a00:	e7f3      	b.n	59ea <nrfx_gpio_handler+0x2e>
}
    5a02:	bd70      	pop	{r4, r5, r6, pc}

00005a04 <endtx_isr>:
	return dev->config;
    5a04:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5a06:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    5a08:	f04f 0120 	mov.w	r1, #32
    5a0c:	f3ef 8211 	mrs	r2, BASEPRI
    5a10:	f381 8812 	msr	BASEPRI_MAX, r1
    5a14:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a18:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5a1c:	b131      	cbz	r1, 5a2c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a1e:	2100      	movs	r1, #0
    5a20:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5a24:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a28:	2101      	movs	r1, #1
    5a2a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5a2c:	f382 8811 	msr	BASEPRI, r2
    5a30:	f3bf 8f6f 	isb	sy
}
    5a34:	4770      	bx	lr

00005a36 <uarte_nrfx_isr_int>:
{
    5a36:	b538      	push	{r3, r4, r5, lr}
    5a38:	4604      	mov	r4, r0
	return dev->config;
    5a3a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5a3c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    5a3e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5a42:	f413 7f80 	tst.w	r3, #256	; 0x100
    5a46:	d002      	beq.n	5a4e <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a48:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    5a4c:	b9db      	cbnz	r3, 5a86 <uarte_nrfx_isr_int+0x50>
	return dev->config;
    5a4e:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5a50:	685b      	ldr	r3, [r3, #4]
    5a52:	f013 0f10 	tst.w	r3, #16
    5a56:	d015      	beq.n	5a84 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    5a58:	f04f 0220 	mov.w	r2, #32
    5a5c:	f3ef 8311 	mrs	r3, BASEPRI
    5a60:	f382 8812 	msr	BASEPRI_MAX, r2
    5a64:	f3bf 8f6f 	isb	sy
    5a68:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5a6c:	b112      	cbz	r2, 5a74 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5a6e:	2200      	movs	r2, #0
    5a70:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5a74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5a78:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    5a7c:	f383 8811 	msr	BASEPRI, r3
    5a80:	f3bf 8f6f 	isb	sy
}
    5a84:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5a86:	f7ff ffbd 	bl	5a04 <endtx_isr>
    5a8a:	e7e0      	b.n	5a4e <uarte_nrfx_isr_int+0x18>

00005a8c <uarte_nrfx_configure>:
{
    5a8c:	b570      	push	{r4, r5, r6, lr}
    5a8e:	b082      	sub	sp, #8
    5a90:	4605      	mov	r5, r0
    5a92:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    5a94:	794b      	ldrb	r3, [r1, #5]
    5a96:	2b01      	cmp	r3, #1
    5a98:	d006      	beq.n	5aa8 <uarte_nrfx_configure+0x1c>
    5a9a:	2b03      	cmp	r3, #3
    5a9c:	d011      	beq.n	5ac2 <uarte_nrfx_configure+0x36>
    5a9e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    5aa2:	4618      	mov	r0, r3
    5aa4:	b002      	add	sp, #8
    5aa6:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5aa8:	2300      	movs	r3, #0
    5aaa:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5aae:	79a3      	ldrb	r3, [r4, #6]
    5ab0:	2b03      	cmp	r3, #3
    5ab2:	d138      	bne.n	5b26 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    5ab4:	79e3      	ldrb	r3, [r4, #7]
    5ab6:	b143      	cbz	r3, 5aca <uarte_nrfx_configure+0x3e>
    5ab8:	2b01      	cmp	r3, #1
    5aba:	d010      	beq.n	5ade <uarte_nrfx_configure+0x52>
    5abc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5ac0:	e7ef      	b.n	5aa2 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5ac2:	2310      	movs	r3, #16
    5ac4:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    5ac8:	e7f1      	b.n	5aae <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5aca:	2300      	movs	r3, #0
    5acc:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    5ad0:	7923      	ldrb	r3, [r4, #4]
    5ad2:	b143      	cbz	r3, 5ae6 <uarte_nrfx_configure+0x5a>
    5ad4:	2b02      	cmp	r3, #2
    5ad6:	d022      	beq.n	5b1e <uarte_nrfx_configure+0x92>
    5ad8:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5adc:	e7e1      	b.n	5aa2 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5ade:	2301      	movs	r3, #1
    5ae0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    5ae4:	e7f4      	b.n	5ad0 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5ae6:	2300      	movs	r3, #0
    5ae8:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5aec:	6821      	ldr	r1, [r4, #0]
    5aee:	4628      	mov	r0, r5
    5af0:	f7fc fc66 	bl	23c0 <baudrate_set>
    5af4:	4603      	mov	r3, r0
    5af6:	b9c8      	cbnz	r0, 5b2c <uarte_nrfx_configure+0xa0>
	return dev->config;
    5af8:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    5afa:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5afc:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    5b00:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    5b04:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5b08:	4331      	orrs	r1, r6
    5b0a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b0c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    5b10:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    5b12:	3204      	adds	r2, #4
    5b14:	e894 0003 	ldmia.w	r4, {r0, r1}
    5b18:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    5b1c:	e7c1      	b.n	5aa2 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5b1e:	230e      	movs	r3, #14
    5b20:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    5b24:	e7e2      	b.n	5aec <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    5b26:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b2a:	e7ba      	b.n	5aa2 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    5b2c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b30:	e7b7      	b.n	5aa2 <uarte_nrfx_configure+0x16>

00005b32 <uarte_nrfx_config_get>:
{
    5b32:	460b      	mov	r3, r1
	return dev->data;
    5b34:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    5b36:	6891      	ldr	r1, [r2, #8]
    5b38:	6850      	ldr	r0, [r2, #4]
    5b3a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5b3e:	2000      	movs	r0, #0
    5b40:	4770      	bx	lr

00005b42 <uarte_nrfx_err_check>:
	return dev->config;
    5b42:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5b44:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5b46:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5b4a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5b4e:	4770      	bx	lr

00005b50 <is_tx_ready>:
	return dev->config;
    5b50:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5b52:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5b54:	685b      	ldr	r3, [r3, #4]
    5b56:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b5a:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5b5e:	b929      	cbnz	r1, 5b6c <is_tx_ready+0x1c>
    5b60:	b933      	cbnz	r3, 5b70 <is_tx_ready+0x20>
    5b62:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5b66:	b92b      	cbnz	r3, 5b74 <is_tx_ready+0x24>
    5b68:	2000      	movs	r0, #0
    5b6a:	4770      	bx	lr
    5b6c:	2001      	movs	r0, #1
    5b6e:	4770      	bx	lr
    5b70:	2000      	movs	r0, #0
    5b72:	4770      	bx	lr
    5b74:	2001      	movs	r0, #1
}
    5b76:	4770      	bx	lr

00005b78 <uarte_enable>:
	return dev->config;
    5b78:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5b7a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5b7c:	2208      	movs	r2, #8
    5b7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5b82:	4770      	bx	lr

00005b84 <tx_start>:
{
    5b84:	b510      	push	{r4, lr}
	return dev->config;
    5b86:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5b88:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5b8a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5b8e:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b92:	2300      	movs	r3, #0
    5b94:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    5b98:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    5b9c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    5ba0:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    5ba4:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5ba6:	685b      	ldr	r3, [r3, #4]
    5ba8:	f013 0f10 	tst.w	r3, #16
    5bac:	d102      	bne.n	5bb4 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5bae:	2301      	movs	r3, #1
    5bb0:	60a3      	str	r3, [r4, #8]
}
    5bb2:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5bb4:	2101      	movs	r1, #1
    5bb6:	f7ff ffdf 	bl	5b78 <uarte_enable>
    p_reg->INTENSET = mask;
    5bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5bbe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5bc2:	e7f4      	b.n	5bae <tx_start+0x2a>

00005bc4 <uarte_nrfx_poll_in>:
{
    5bc4:	b410      	push	{r4}
	return dev->data;
    5bc6:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    5bc8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bca:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bcc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5bd0:	b152      	cbz	r2, 5be8 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    5bd2:	7c62      	ldrb	r2, [r4, #17]
    5bd4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bd6:	2000      	movs	r0, #0
    5bd8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5bdc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5be0:	2201      	movs	r2, #1
    5be2:	601a      	str	r2, [r3, #0]
}
    5be4:	bc10      	pop	{r4}
    5be6:	4770      	bx	lr
		return -1;
    5be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5bec:	e7fa      	b.n	5be4 <uarte_nrfx_poll_in+0x20>

00005bee <wait_tx_ready>:
{
    5bee:	b570      	push	{r4, r5, r6, lr}
    5bf0:	4606      	mov	r6, r0
    5bf2:	e014      	b.n	5c1e <wait_tx_ready+0x30>
		if (res) {
    5bf4:	b17d      	cbz	r5, 5c16 <wait_tx_ready+0x28>
	__asm__ volatile(
    5bf6:	f04f 0320 	mov.w	r3, #32
    5bfa:	f3ef 8411 	mrs	r4, BASEPRI
    5bfe:	f383 8812 	msr	BASEPRI_MAX, r3
    5c02:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5c06:	4630      	mov	r0, r6
    5c08:	f7ff ffa2 	bl	5b50 <is_tx_ready>
    5c0c:	b9a0      	cbnz	r0, 5c38 <wait_tx_ready+0x4a>
	__asm__ volatile(
    5c0e:	f384 8811 	msr	BASEPRI, r4
    5c12:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    5c16:	2021      	movs	r0, #33	; 0x21
    5c18:	2100      	movs	r1, #0
    5c1a:	f7fe fe0f 	bl	483c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5c1e:	2464      	movs	r4, #100	; 0x64
    5c20:	4630      	mov	r0, r6
    5c22:	f7ff ff95 	bl	5b50 <is_tx_ready>
    5c26:	4605      	mov	r5, r0
    5c28:	2800      	cmp	r0, #0
    5c2a:	d1e3      	bne.n	5bf4 <wait_tx_ready+0x6>
    5c2c:	2001      	movs	r0, #1
    5c2e:	f000 f8f8 	bl	5e22 <nrfx_busy_wait>
    5c32:	3c01      	subs	r4, #1
    5c34:	d1f4      	bne.n	5c20 <wait_tx_ready+0x32>
    5c36:	e7dd      	b.n	5bf4 <wait_tx_ready+0x6>
}
    5c38:	4620      	mov	r0, r4
    5c3a:	bd70      	pop	{r4, r5, r6, pc}

00005c3c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c3e:	4604      	mov	r4, r0
	return dev->config;
    5c40:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    5c42:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    5c44:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5c46:	2100      	movs	r1, #0
    5c48:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5c4c:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    5c4e:	f7fc fae9 	bl	2224 <uarte_nrfx_pins_configure>
	return dev->data;
    5c52:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5c54:	3104      	adds	r1, #4
    5c56:	4620      	mov	r0, r4
    5c58:	f7ff ff18 	bl	5a8c <uarte_nrfx_configure>
	if (err) {
    5c5c:	4604      	mov	r4, r0
    5c5e:	bb68      	cbnz	r0, 5cbc <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5c60:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5c62:	f013 0f02 	tst.w	r3, #2
    5c66:	d12b      	bne.n	5cc0 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5c68:	2308      	movs	r3, #8
    5c6a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5c6e:	7a33      	ldrb	r3, [r6, #8]
    5c70:	b95b      	cbnz	r3, 5c8a <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c72:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5c76:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5c7a:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5c7e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5c82:	2301      	movs	r3, #1
    5c84:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c88:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5c8a:	6873      	ldr	r3, [r6, #4]
    5c8c:	f013 0f02 	tst.w	r3, #2
    5c90:	d103      	bne.n	5c9a <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    5c92:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c96:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c9a:	6873      	ldr	r3, [r6, #4]
    5c9c:	f013 0f10 	tst.w	r3, #16
    5ca0:	d003      	beq.n	5caa <uarte_instance_init+0x6e>
    5ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5ca6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5caa:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5cac:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5cb0:	2300      	movs	r3, #0
    5cb2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cb6:	2301      	movs	r3, #1
    5cb8:	60ab      	str	r3, [r5, #8]
    5cba:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5cbc:	4620      	mov	r0, r4
    5cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5cc0:	4639      	mov	r1, r7
    5cc2:	4628      	mov	r0, r5
    5cc4:	f7fc fc5c 	bl	2580 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5cc8:	2800      	cmp	r0, #0
    5cca:	dacd      	bge.n	5c68 <uarte_instance_init+0x2c>
			return err;
    5ccc:	4604      	mov	r4, r0
    5cce:	e7f5      	b.n	5cbc <uarte_instance_init+0x80>

00005cd0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5cd0:	b510      	push	{r4, lr}
    5cd2:	4604      	mov	r4, r0
    5cd4:	2200      	movs	r2, #0
    5cd6:	2101      	movs	r1, #1
    5cd8:	2002      	movs	r0, #2
    5cda:	f7fb fba9 	bl	1430 <z_arm_irq_priority_set>
    5cde:	2002      	movs	r0, #2
    5ce0:	f7fb fb88 	bl	13f4 <arch_irq_enable>
    5ce4:	2100      	movs	r1, #0
    5ce6:	4620      	mov	r0, r4
    5ce8:	f7ff ffa8 	bl	5c3c <uarte_instance_init>
    5cec:	bd10      	pop	{r4, pc}

00005cee <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5cee:	b510      	push	{r4, lr}
    5cf0:	4604      	mov	r4, r0
    5cf2:	2200      	movs	r2, #0
    5cf4:	2101      	movs	r1, #1
    5cf6:	2028      	movs	r0, #40	; 0x28
    5cf8:	f7fb fb9a 	bl	1430 <z_arm_irq_priority_set>
    5cfc:	2028      	movs	r0, #40	; 0x28
    5cfe:	f7fb fb79 	bl	13f4 <arch_irq_enable>
    5d02:	2100      	movs	r1, #0
    5d04:	4620      	mov	r0, r4
    5d06:	f7ff ff99 	bl	5c3c <uarte_instance_init>
    5d0a:	bd10      	pop	{r4, pc}

00005d0c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5d0c:	4770      	bx	lr

00005d0e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5d0e:	1a40      	subs	r0, r0, r1
}
    5d10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5d14:	4770      	bx	lr

00005d16 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5d16:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5d1a:	009b      	lsls	r3, r3, #2
    5d1c:	b29b      	uxth	r3, r3
    5d1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5d22:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5d26:	2200      	movs	r2, #0
    5d28:	601a      	str	r2, [r3, #0]
    5d2a:	681b      	ldr	r3, [r3, #0]
}
    5d2c:	4770      	bx	lr

00005d2e <absolute_time_to_cc>:
}
    5d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5d32:	4770      	bx	lr

00005d34 <full_int_lock>:
	__asm__ volatile(
    5d34:	f04f 0320 	mov.w	r3, #32
    5d38:	f3ef 8011 	mrs	r0, BASEPRI
    5d3c:	f383 8812 	msr	BASEPRI_MAX, r3
    5d40:	f3bf 8f6f 	isb	sy
}
    5d44:	4770      	bx	lr

00005d46 <full_int_unlock>:
	__asm__ volatile(
    5d46:	f380 8811 	msr	BASEPRI, r0
    5d4a:	f3bf 8f6f 	isb	sy
}
    5d4e:	4770      	bx	lr

00005d50 <set_absolute_alarm>:
{
    5d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d52:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5d54:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5d58:	f7fc fc40 	bl	25dc <get_comparator>
    5d5c:	4607      	mov	r7, r0
    5d5e:	e019      	b.n	5d94 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5d60:	2013      	movs	r0, #19
    5d62:	f000 fac9 	bl	62f8 <z_impl_k_busy_wait>
}
    5d66:	e022      	b.n	5dae <set_absolute_alarm+0x5e>
		event_clear(chan);
    5d68:	4630      	mov	r0, r6
    5d6a:	f7ff ffd4 	bl	5d16 <event_clear>
		event_enable(chan);
    5d6e:	4630      	mov	r0, r6
    5d70:	f7fc fc3c 	bl	25ec <event_enable>
		set_comparator(chan, cc_val);
    5d74:	4629      	mov	r1, r5
    5d76:	4630      	mov	r0, r6
    5d78:	f7fc fc26 	bl	25c8 <set_comparator>
		now2 = counter();
    5d7c:	f7fc fc4a 	bl	2614 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5d80:	4284      	cmp	r4, r0
    5d82:	d01e      	beq.n	5dc2 <set_absolute_alarm+0x72>
    5d84:	1c81      	adds	r1, r0, #2
    5d86:	4628      	mov	r0, r5
    5d88:	f7ff ffc1 	bl	5d0e <counter_sub>
	} while ((now2 != now) &&
    5d8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5d90:	d917      	bls.n	5dc2 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5d92:	462f      	mov	r7, r5
		now = counter();
    5d94:	f7fc fc3e 	bl	2614 <counter>
    5d98:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5d9a:	4601      	mov	r1, r0
    5d9c:	4630      	mov	r0, r6
    5d9e:	f7fc fc13 	bl	25c8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5da2:	4621      	mov	r1, r4
    5da4:	4638      	mov	r0, r7
    5da6:	f7ff ffb2 	bl	5d0e <counter_sub>
    5daa:	2801      	cmp	r0, #1
    5dac:	d0d8      	beq.n	5d60 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5dae:	1ca7      	adds	r7, r4, #2
    5db0:	4639      	mov	r1, r7
    5db2:	4628      	mov	r0, r5
    5db4:	f7ff ffab 	bl	5d0e <counter_sub>
    5db8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5dbc:	d9d4      	bls.n	5d68 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5dbe:	463d      	mov	r5, r7
    5dc0:	e7d2      	b.n	5d68 <set_absolute_alarm+0x18>
}
    5dc2:	4628      	mov	r0, r5
    5dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005dc6 <compare_set>:
{
    5dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dc8:	b083      	sub	sp, #12
    5dca:	4604      	mov	r4, r0
    5dcc:	4617      	mov	r7, r2
    5dce:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5dd0:	f7fc fc26 	bl	2620 <compare_int_lock>
    5dd4:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5dd8:	9301      	str	r3, [sp, #4]
    5dda:	9b08      	ldr	r3, [sp, #32]
    5ddc:	9300      	str	r3, [sp, #0]
    5dde:	463a      	mov	r2, r7
    5de0:	462b      	mov	r3, r5
    5de2:	4620      	mov	r0, r4
    5de4:	f7fc fd0a 	bl	27fc <compare_set_nolocks>
    5de8:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5dea:	4631      	mov	r1, r6
    5dec:	4620      	mov	r0, r4
    5dee:	f7fc fc7b 	bl	26e8 <compare_int_unlock>
}
    5df2:	4628      	mov	r0, r5
    5df4:	b003      	add	sp, #12
    5df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005df8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5df8:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5dfa:	2000      	movs	r0, #0
    5dfc:	f7fb feb2 	bl	1b64 <sys_arch_reboot>

00005e00 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5e00:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5e02:	f7fe ff11 	bl	4c28 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5e06:	bd08      	pop	{r3, pc}

00005e08 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5e08:	b510      	push	{r4, lr}
    5e0a:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5e0c:	f7fb fa02 	bl	1214 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5e10:	f7fb fabe 	bl	1390 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5e14:	4620      	mov	r0, r4
    5e16:	f7ff fff3 	bl	5e00 <hw_cc3xx_init_internal>
	return res;
}
    5e1a:	bd10      	pop	{r4, pc}

00005e1c <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    5e1c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    5e1e:	4780      	blx	r0
}
    5e20:	bd08      	pop	{r3, pc}

00005e22 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    5e22:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    5e24:	f000 fa68 	bl	62f8 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    5e28:	bd08      	pop	{r3, pc}

00005e2a <nrfx_clock_enable>:
{
    5e2a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5e2c:	2000      	movs	r0, #0
    5e2e:	f7fb faf1 	bl	1414 <arch_irq_is_enabled>
    5e32:	b100      	cbz	r0, 5e36 <nrfx_clock_enable+0xc>
}
    5e34:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5e36:	f7fb fadd 	bl	13f4 <arch_irq_enable>
    5e3a:	e7fb      	b.n	5e34 <nrfx_clock_enable+0xa>

00005e3c <pin_is_task_output>:
{
    5e3c:	b510      	push	{r4, lr}
    5e3e:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5e40:	f7fd f902 	bl	3048 <pin_is_output>
    5e44:	b128      	cbz	r0, 5e52 <pin_is_task_output+0x16>
    5e46:	4620      	mov	r0, r4
    5e48:	f7fd f8e8 	bl	301c <pin_in_use_by_te>
    5e4c:	b118      	cbz	r0, 5e56 <pin_is_task_output+0x1a>
    5e4e:	2001      	movs	r0, #1
    5e50:	e000      	b.n	5e54 <pin_is_task_output+0x18>
    5e52:	2000      	movs	r0, #0
}
    5e54:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5e56:	2000      	movs	r0, #0
    5e58:	e7fc      	b.n	5e54 <pin_is_task_output+0x18>

00005e5a <pin_is_input>:
{
    5e5a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    5e5c:	f7fd f8f4 	bl	3048 <pin_is_output>
    5e60:	f080 0001 	eor.w	r0, r0, #1
}
    5e64:	b2c0      	uxtb	r0, r0
    5e66:	bd08      	pop	{r3, pc}

00005e68 <gpiote_polarity_to_trigger>:
}
    5e68:	4770      	bx	lr

00005e6a <gpiote_trigger_to_polarity>:
}
    5e6a:	4770      	bx	lr

00005e6c <is_level>:
}
    5e6c:	2803      	cmp	r0, #3
    5e6e:	bf94      	ite	ls
    5e70:	2000      	movls	r0, #0
    5e72:	2001      	movhi	r0, #1
    5e74:	4770      	bx	lr

00005e76 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    5e76:	b508      	push	{r3, lr}
  _DoInit();
    5e78:	f7fd fd92 	bl	39a0 <_DoInit>
}
    5e7c:	bd08      	pop	{r3, pc}

00005e7e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    5e7e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5e80:	f7ff fff9 	bl	5e76 <SEGGER_RTT_Init>

	return 0;
}
    5e84:	2000      	movs	r0, #0
    5e86:	bd08      	pop	{r3, pc}

00005e88 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5e88:	b148      	cbz	r0, 5e9e <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5e8a:	68c3      	ldr	r3, [r0, #12]
    5e8c:	8818      	ldrh	r0, [r3, #0]
    5e8e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    5e92:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    5e96:	bf14      	ite	ne
    5e98:	2000      	movne	r0, #0
    5e9a:	2001      	moveq	r0, #1
    5e9c:	4770      	bx	lr
		return false;
    5e9e:	2000      	movs	r0, #0
}
    5ea0:	4770      	bx	lr

00005ea2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ea4:	4605      	mov	r5, r0
    5ea6:	460e      	mov	r6, r1
	__asm__ volatile(
    5ea8:	f04f 0320 	mov.w	r3, #32
    5eac:	f3ef 8711 	mrs	r7, BASEPRI
    5eb0:	f383 8812 	msr	BASEPRI_MAX, r3
    5eb4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5eb8:	f7fe fcec 	bl	4894 <z_impl_z_current_get>
    5ebc:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5ebe:	4631      	mov	r1, r6
    5ec0:	4628      	mov	r0, r5
    5ec2:	f7ff ff99 	bl	5df8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5ec6:	f387 8811 	msr	BASEPRI, r7
    5eca:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5ece:	4620      	mov	r0, r4
    5ed0:	f7fb fd6e 	bl	19b0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005ed6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5ed6:	68c2      	ldr	r2, [r0, #12]
    5ed8:	6903      	ldr	r3, [r0, #16]
    5eda:	431a      	orrs	r2, r3
    5edc:	f012 0203 	ands.w	r2, r2, #3
    5ee0:	d10d      	bne.n	5efe <create_free_list+0x28>
	slab->free_list = NULL;
    5ee2:	2100      	movs	r1, #0
    5ee4:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5ee6:	e005      	b.n	5ef4 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    5ee8:	6941      	ldr	r1, [r0, #20]
    5eea:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    5eec:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    5eee:	68c1      	ldr	r1, [r0, #12]
    5ef0:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    5ef2:	3201      	adds	r2, #1
    5ef4:	6881      	ldr	r1, [r0, #8]
    5ef6:	4291      	cmp	r1, r2
    5ef8:	d8f6      	bhi.n	5ee8 <create_free_list+0x12>
	return 0;
    5efa:	2000      	movs	r0, #0
    5efc:	4770      	bx	lr
		return -EINVAL;
    5efe:	f06f 0015 	mvn.w	r0, #21
}
    5f02:	4770      	bx	lr

00005f04 <k_mem_slab_init>:
{
    5f04:	b510      	push	{r4, lr}
    5f06:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    5f08:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    5f0a:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    5f0c:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    5f0e:	2300      	movs	r3, #0
    5f10:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    5f12:	f7ff ffe0 	bl	5ed6 <create_free_list>
	if (rc < 0) {
    5f16:	2800      	cmp	r0, #0
    5f18:	db01      	blt.n	5f1e <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    5f1a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    5f1c:	6064      	str	r4, [r4, #4]
}
    5f1e:	bd10      	pop	{r4, pc}

00005f20 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f22:	4604      	mov	r4, r0
    5f24:	460d      	mov	r5, r1
	__asm__ volatile(
    5f26:	f04f 0320 	mov.w	r3, #32
    5f2a:	f3ef 8611 	mrs	r6, BASEPRI
    5f2e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f32:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5f36:	6943      	ldr	r3, [r0, #20]
    5f38:	b163      	cbz	r3, 5f54 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    5f3a:	682b      	ldr	r3, [r5, #0]
    5f3c:	6962      	ldr	r2, [r4, #20]
    5f3e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5f40:	682b      	ldr	r3, [r5, #0]
    5f42:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    5f44:	69a3      	ldr	r3, [r4, #24]
    5f46:	3b01      	subs	r3, #1
    5f48:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    5f4a:	f386 8811 	msr	BASEPRI, r6
    5f4e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f54:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5f58:	f000 f925 	bl	61a6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5f5c:	2800      	cmp	r0, #0
    5f5e:	d0ec      	beq.n	5f3a <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5f60:	682a      	ldr	r2, [r5, #0]
    5f62:	2100      	movs	r1, #0
    5f64:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5f68:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    5f6a:	f000 f881 	bl	6070 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5f6e:	4631      	mov	r1, r6
    5f70:	4638      	mov	r0, r7
    5f72:	f7fe f935 	bl	41e0 <z_reschedule>
			return;
    5f76:	e7ec      	b.n	5f52 <k_mem_slab_free+0x32>

00005f78 <setup_thread_stack>:
{
    5f78:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5f7a:	3207      	adds	r2, #7
    5f7c:	f022 0207 	bic.w	r2, r2, #7
    5f80:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5f84:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    5f88:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    5f8c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    5f90:	2200      	movs	r2, #0
    5f92:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    5f96:	18c8      	adds	r0, r1, r3
    5f98:	bc10      	pop	{r4}
    5f9a:	4770      	bx	lr

00005f9c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5f9c:	f3ef 8005 	mrs	r0, IPSR
}
    5fa0:	3800      	subs	r0, #0
    5fa2:	bf18      	it	ne
    5fa4:	2001      	movne	r0, #1
    5fa6:	4770      	bx	lr

00005fa8 <z_impl_k_thread_start>:
{
    5fa8:	b508      	push	{r3, lr}
	z_sched_start(thread);
    5faa:	f7fe fa43 	bl	4434 <z_sched_start>
}
    5fae:	bd08      	pop	{r3, pc}

00005fb0 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    5fb0:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    5fb2:	2400      	movs	r4, #0
    5fb4:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    5fb6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5fb8:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    5fba:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    5fbc:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    5fbe:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    5fc0:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    5fc2:	bc10      	pop	{r4}
    5fc4:	4770      	bx	lr

00005fc6 <z_pm_save_idle_exit>:
{
    5fc6:	b508      	push	{r3, lr}
	pm_system_resume();
    5fc8:	f7fb f800 	bl	fcc <pm_system_resume>
	sys_clock_idle_exit();
    5fcc:	f7ff fe9e 	bl	5d0c <sys_clock_idle_exit>
}
    5fd0:	bd08      	pop	{r3, pc}

00005fd2 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    5fd2:	4288      	cmp	r0, r1
    5fd4:	da00      	bge.n	5fd8 <new_prio_for_inheritance+0x6>
    5fd6:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5fd8:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    5fdc:	db01      	blt.n	5fe2 <new_prio_for_inheritance+0x10>
    5fde:	4608      	mov	r0, r1
    5fe0:	4770      	bx	lr
    5fe2:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    5fe6:	4770      	bx	lr

00005fe8 <adjust_owner_prio>:
{
    5fe8:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    5fea:	6880      	ldr	r0, [r0, #8]
    5fec:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5ff0:	428b      	cmp	r3, r1
    5ff2:	d101      	bne.n	5ff8 <adjust_owner_prio+0x10>
	return false;
    5ff4:	2000      	movs	r0, #0
}
    5ff6:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    5ff8:	f7fe fa6a 	bl	44d0 <z_set_prio>
    5ffc:	e7fb      	b.n	5ff6 <adjust_owner_prio+0xe>

00005ffe <z_impl_k_mutex_init>:
{
    5ffe:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6000:	2000      	movs	r0, #0
    6002:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    6004:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    6006:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    6008:	605b      	str	r3, [r3, #4]
}
    600a:	4770      	bx	lr

0000600c <thread_active_elsewhere>:
}
    600c:	2000      	movs	r0, #0
    600e:	4770      	bx	lr

00006010 <pended_on_thread>:
}
    6010:	6880      	ldr	r0, [r0, #8]
    6012:	4770      	bx	lr

00006014 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    6014:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    6018:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    601c:	4283      	cmp	r3, r0
    601e:	d001      	beq.n	6024 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    6020:	1ac0      	subs	r0, r0, r3
    6022:	4770      	bx	lr
	return 0;
    6024:	2000      	movs	r0, #0
}
    6026:	4770      	bx	lr

00006028 <z_reschedule_irqlock>:
{
    6028:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    602a:	4603      	mov	r3, r0
    602c:	b920      	cbnz	r0, 6038 <z_reschedule_irqlock+0x10>
    602e:	f3ef 8205 	mrs	r2, IPSR
    6032:	b942      	cbnz	r2, 6046 <z_reschedule_irqlock+0x1e>
    6034:	2201      	movs	r2, #1
    6036:	e000      	b.n	603a <z_reschedule_irqlock+0x12>
    6038:	2200      	movs	r2, #0
	if (resched(key)) {
    603a:	b932      	cbnz	r2, 604a <z_reschedule_irqlock+0x22>
    603c:	f383 8811 	msr	BASEPRI, r3
    6040:	f3bf 8f6f 	isb	sy
}
    6044:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6046:	2200      	movs	r2, #0
    6048:	e7f7      	b.n	603a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    604a:	4618      	mov	r0, r3
    604c:	f7fb fa26 	bl	149c <arch_swap>
	return ret;
    6050:	e7f8      	b.n	6044 <z_reschedule_irqlock+0x1c>

00006052 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6052:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6054:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6056:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6058:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    605a:	2300      	movs	r3, #0
    605c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    605e:	604b      	str	r3, [r1, #4]
}
    6060:	4770      	bx	lr

00006062 <z_priq_dumb_best>:
{
    6062:	4603      	mov	r3, r0
	return list->head == list;
    6064:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6066:	4283      	cmp	r3, r0
    6068:	d000      	beq.n	606c <z_priq_dumb_best+0xa>
}
    606a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    606c:	2000      	movs	r0, #0
	return thread;
    606e:	e7fc      	b.n	606a <z_priq_dumb_best+0x8>

00006070 <z_ready_thread>:
{
    6070:	b538      	push	{r3, r4, r5, lr}
    6072:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6074:	2300      	movs	r3, #0
	__asm__ volatile(
    6076:	f04f 0220 	mov.w	r2, #32
    607a:	f3ef 8511 	mrs	r5, BASEPRI
    607e:	f382 8812 	msr	BASEPRI_MAX, r2
    6082:	f3bf 8f6f 	isb	sy
    6086:	e007      	b.n	6098 <z_ready_thread+0x28>
			ready_thread(thread);
    6088:	4620      	mov	r0, r4
    608a:	f7fe f993 	bl	43b4 <ready_thread>
	__asm__ volatile(
    608e:	f385 8811 	msr	BASEPRI, r5
    6092:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6096:	2301      	movs	r3, #1
    6098:	b92b      	cbnz	r3, 60a6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    609a:	4620      	mov	r0, r4
    609c:	f7ff ffb6 	bl	600c <thread_active_elsewhere>
    60a0:	2800      	cmp	r0, #0
    60a2:	d1f4      	bne.n	608e <z_ready_thread+0x1e>
    60a4:	e7f0      	b.n	6088 <z_ready_thread+0x18>
}
    60a6:	bd38      	pop	{r3, r4, r5, pc}

000060a8 <z_thread_timeout>:
{
    60a8:	b570      	push	{r4, r5, r6, lr}
    60aa:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    60ac:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    60b0:	2300      	movs	r3, #0
	__asm__ volatile(
    60b2:	f04f 0220 	mov.w	r2, #32
    60b6:	f3ef 8611 	mrs	r6, BASEPRI
    60ba:	f382 8812 	msr	BASEPRI_MAX, r2
    60be:	f3bf 8f6f 	isb	sy
    60c2:	e019      	b.n	60f8 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    60c4:	4628      	mov	r0, r5
    60c6:	f7ff ffa3 	bl	6010 <pended_on_thread>
    60ca:	4629      	mov	r1, r5
    60cc:	f7ff ffc1 	bl	6052 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    60d0:	7b6b      	ldrb	r3, [r5, #13]
    60d2:	f023 0302 	bic.w	r3, r3, #2
    60d6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    60d8:	2300      	movs	r3, #0
    60da:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    60dc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    60e0:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    60e4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    60e8:	4628      	mov	r0, r5
    60ea:	f7fe f963 	bl	43b4 <ready_thread>
	__asm__ volatile(
    60ee:	f386 8811 	msr	BASEPRI, r6
    60f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    60f6:	2301      	movs	r3, #1
    60f8:	b94b      	cbnz	r3, 610e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    60fa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    60fe:	f013 0f28 	tst.w	r3, #40	; 0x28
    6102:	d1f4      	bne.n	60ee <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    6104:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6108:	2b00      	cmp	r3, #0
    610a:	d1db      	bne.n	60c4 <z_thread_timeout+0x1c>
    610c:	e7e6      	b.n	60dc <z_thread_timeout+0x34>
}
    610e:	bd70      	pop	{r4, r5, r6, pc}

00006110 <add_to_waitq_locked>:
{
    6110:	b570      	push	{r4, r5, r6, lr}
    6112:	4605      	mov	r5, r0
    6114:	460e      	mov	r6, r1
	unready_thread(thread);
    6116:	f7fe f9ab 	bl	4470 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    611a:	7b6b      	ldrb	r3, [r5, #13]
    611c:	f043 0302 	orr.w	r3, r3, #2
    6120:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    6122:	b1b6      	cbz	r6, 6152 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    6124:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    6126:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6128:	42a6      	cmp	r6, r4
    612a:	d019      	beq.n	6160 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    612c:	b164      	cbz	r4, 6148 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    612e:	4621      	mov	r1, r4
    6130:	4628      	mov	r0, r5
    6132:	f7ff ff6f 	bl	6014 <z_sched_prio_cmp>
    6136:	2800      	cmp	r0, #0
    6138:	dc0c      	bgt.n	6154 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    613a:	b12c      	cbz	r4, 6148 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    613c:	6873      	ldr	r3, [r6, #4]
    613e:	429c      	cmp	r4, r3
    6140:	d002      	beq.n	6148 <add_to_waitq_locked+0x38>
    6142:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6144:	2c00      	cmp	r4, #0
    6146:	d1f1      	bne.n	612c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    6148:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    614a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    614c:	606b      	str	r3, [r5, #4]
	tail->next = node;
    614e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6150:	6075      	str	r5, [r6, #4]
}
    6152:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    6154:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6156:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6158:	602c      	str	r4, [r5, #0]
	prev->next = node;
    615a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    615c:	6065      	str	r5, [r4, #4]
}
    615e:	e7f8      	b.n	6152 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6160:	2400      	movs	r4, #0
    6162:	e7e3      	b.n	612c <add_to_waitq_locked+0x1c>

00006164 <pend>:
{
    6164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6168:	4605      	mov	r5, r0
    616a:	460f      	mov	r7, r1
    616c:	4691      	mov	r9, r2
    616e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    6170:	2400      	movs	r4, #0
	__asm__ volatile(
    6172:	f04f 0320 	mov.w	r3, #32
    6176:	f3ef 8611 	mrs	r6, BASEPRI
    617a:	f383 8812 	msr	BASEPRI_MAX, r3
    617e:	f3bf 8f6f 	isb	sy
    6182:	b94c      	cbnz	r4, 6198 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    6184:	4639      	mov	r1, r7
    6186:	4628      	mov	r0, r5
    6188:	f7ff ffc2 	bl	6110 <add_to_waitq_locked>
	__asm__ volatile(
    618c:	f386 8811 	msr	BASEPRI, r6
    6190:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6194:	2401      	movs	r4, #1
    6196:	e7f4      	b.n	6182 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    6198:	464a      	mov	r2, r9
    619a:	4643      	mov	r3, r8
    619c:	4628      	mov	r0, r5
    619e:	f7fd ffbd 	bl	411c <add_thread_timeout>
}
    61a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000061a6 <z_unpend_first_thread>:
{
    61a6:	b570      	push	{r4, r5, r6, lr}
    61a8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    61aa:	2300      	movs	r3, #0
	__asm__ volatile(
    61ac:	f04f 0220 	mov.w	r2, #32
    61b0:	f3ef 8511 	mrs	r5, BASEPRI
    61b4:	f382 8812 	msr	BASEPRI_MAX, r2
    61b8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    61bc:	461c      	mov	r4, r3
    61be:	e013      	b.n	61e8 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    61c0:	f7ff ff26 	bl	6010 <pended_on_thread>
    61c4:	4621      	mov	r1, r4
    61c6:	f7ff ff44 	bl	6052 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    61ca:	7b63      	ldrb	r3, [r4, #13]
    61cc:	f023 0302 	bic.w	r3, r3, #2
    61d0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    61d2:	2300      	movs	r3, #0
    61d4:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    61d6:	f104 0018 	add.w	r0, r4, #24
    61da:	f000 f82a 	bl	6232 <z_abort_timeout>
	__asm__ volatile(
    61de:	f385 8811 	msr	BASEPRI, r5
    61e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    61e6:	2301      	movs	r3, #1
    61e8:	b933      	cbnz	r3, 61f8 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    61ea:	4630      	mov	r0, r6
    61ec:	f7ff ff39 	bl	6062 <z_priq_dumb_best>
		if (thread != NULL) {
    61f0:	4604      	mov	r4, r0
    61f2:	2800      	cmp	r0, #0
    61f4:	d1e4      	bne.n	61c0 <z_unpend_first_thread+0x1a>
    61f6:	e7f2      	b.n	61de <z_unpend_first_thread+0x38>
}
    61f8:	4620      	mov	r0, r4
    61fa:	bd70      	pop	{r4, r5, r6, pc}

000061fc <init_ready_q>:
	sys_dlist_init(&rq->runq);
    61fc:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    61fe:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    6200:	6083      	str	r3, [r0, #8]
}
    6202:	4770      	bx	lr

00006204 <remove_timeout>:
{
    6204:	b538      	push	{r3, r4, r5, lr}
    6206:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    6208:	f7fe fb96 	bl	4938 <next>
    620c:	b148      	cbz	r0, 6222 <remove_timeout+0x1e>
    620e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    6210:	6920      	ldr	r0, [r4, #16]
    6212:	6965      	ldr	r5, [r4, #20]
    6214:	6913      	ldr	r3, [r2, #16]
    6216:	6951      	ldr	r1, [r2, #20]
    6218:	181b      	adds	r3, r3, r0
    621a:	eb45 0101 	adc.w	r1, r5, r1
    621e:	6113      	str	r3, [r2, #16]
    6220:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    6222:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6224:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    6226:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6228:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    622a:	2300      	movs	r3, #0
    622c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    622e:	6063      	str	r3, [r4, #4]
}
    6230:	bd38      	pop	{r3, r4, r5, pc}

00006232 <z_abort_timeout>:
{
    6232:	b570      	push	{r4, r5, r6, lr}
    6234:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    6236:	2300      	movs	r3, #0
	__asm__ volatile(
    6238:	f04f 0220 	mov.w	r2, #32
    623c:	f3ef 8611 	mrs	r6, BASEPRI
    6240:	f382 8812 	msr	BASEPRI_MAX, r2
    6244:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6248:	f06f 0015 	mvn.w	r0, #21
    624c:	e008      	b.n	6260 <z_abort_timeout+0x2e>
			remove_timeout(to);
    624e:	4620      	mov	r0, r4
    6250:	f7ff ffd8 	bl	6204 <remove_timeout>
			ret = 0;
    6254:	4628      	mov	r0, r5
	__asm__ volatile(
    6256:	f386 8811 	msr	BASEPRI, r6
    625a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    625e:	2301      	movs	r3, #1
    6260:	461d      	mov	r5, r3
    6262:	b91b      	cbnz	r3, 626c <z_abort_timeout+0x3a>
	return node->next != NULL;
    6264:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    6266:	2b00      	cmp	r3, #0
    6268:	d1f1      	bne.n	624e <z_abort_timeout+0x1c>
    626a:	e7f4      	b.n	6256 <z_abort_timeout+0x24>
}
    626c:	bd70      	pop	{r4, r5, r6, pc}

0000626e <z_get_next_timeout_expiry>:
{
    626e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    6270:	2300      	movs	r3, #0
	__asm__ volatile(
    6272:	f04f 0220 	mov.w	r2, #32
    6276:	f3ef 8411 	mrs	r4, BASEPRI
    627a:	f382 8812 	msr	BASEPRI_MAX, r2
    627e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    6282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	LOCKED(&timeout_lock) {
    6286:	b93b      	cbnz	r3, 6298 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    6288:	f7fe fb6e 	bl	4968 <next_timeout>
	__asm__ volatile(
    628c:	f384 8811 	msr	BASEPRI, r4
    6290:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6294:	2301      	movs	r3, #1
    6296:	e7f6      	b.n	6286 <z_get_next_timeout_expiry+0x18>
}
    6298:	bd10      	pop	{r4, pc}

0000629a <z_set_timeout_expiry>:
{
    629a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    629c:	4606      	mov	r6, r0
    629e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    62a0:	2300      	movs	r3, #0
	__asm__ volatile(
    62a2:	f04f 0220 	mov.w	r2, #32
    62a6:	f3ef 8511 	mrs	r5, BASEPRI
    62aa:	f382 8812 	msr	BASEPRI_MAX, r2
    62ae:	f3bf 8f6f 	isb	sy
    62b2:	e00a      	b.n	62ca <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    62b4:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    62b6:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    62ba:	2801      	cmp	r0, #1
    62bc:	dd00      	ble.n	62c0 <z_set_timeout_expiry+0x26>
    62be:	b97c      	cbnz	r4, 62e0 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    62c0:	f385 8811 	msr	BASEPRI, r5
    62c4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    62c8:	2301      	movs	r3, #1
    62ca:	461c      	mov	r4, r3
    62cc:	b97b      	cbnz	r3, 62ee <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    62ce:	f7fe fb4b 	bl	4968 <next_timeout>
			      || (ticks <= next_to);
    62d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    62d6:	d0ed      	beq.n	62b4 <z_set_timeout_expiry+0x1a>
    62d8:	42b0      	cmp	r0, r6
    62da:	dbec      	blt.n	62b6 <z_set_timeout_expiry+0x1c>
    62dc:	2401      	movs	r4, #1
    62de:	e7ea      	b.n	62b6 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    62e0:	4639      	mov	r1, r7
    62e2:	42b0      	cmp	r0, r6
    62e4:	bfa8      	it	ge
    62e6:	4630      	movge	r0, r6
    62e8:	f7fc fb84 	bl	29f4 <sys_clock_set_timeout>
    62ec:	e7e8      	b.n	62c0 <z_set_timeout_expiry+0x26>
}
    62ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000062f0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    62f0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    62f2:	f7fe fc6b 	bl	4bcc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    62f6:	bd08      	pop	{r3, pc}

000062f8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    62f8:	b900      	cbnz	r0, 62fc <z_impl_k_busy_wait+0x4>
    62fa:	4770      	bx	lr
{
    62fc:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    62fe:	f7fb fc47 	bl	1b90 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6302:	bd08      	pop	{r3, pc}

00006304 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6304:	f7fc bc4e 	b.w	2ba4 <SystemInit>
