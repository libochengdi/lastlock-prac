
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200018c0 	.word	0x200018c0
}
   4:	00002f61 	.word	0x00002f61
   8:	000076e9 	.word	0x000076e9
   c:	00002f19 	.word	0x00002f19
  10:	00002f19 	.word	0x00002f19
  14:	00002f19 	.word	0x00002f19
  18:	00002f19 	.word	0x00002f19
	...
  2c:	0000265d 	.word	0x0000265d
  30:	00002f19 	.word	0x00002f19
  34:	00000000 	.word	0x00000000
  38:	00002605 	.word	0x00002605
  3c:	00002f19 	.word	0x00002f19

00000040 <_irq_vector_table>:
  40:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  50:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  60:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  70:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  80:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  90:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  a0:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  b0:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  c0:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  d0:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  e0:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..
  f0:	00002749 00002749 00002749 00002749     I'..I'..I'..I'..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <button_pressed>:
LOG_MODULE_REGISTER(Less4_Exer2,LOG_LEVEL_DBG);

/* STEP 7 - Replace the callback function button_pressed() */
void button_pressed(const struct device *dev, struct gpio_callback *cb,
            uint32_t pins)
{
     3f4:	b538      	push	{r3, r4, r5, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
     3f6:	4b17      	ldr	r3, [pc, #92]	; (454 <CONFIG_FLASH_SIZE+0x54>)
     3f8:	4a17      	ldr	r2, [pc, #92]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     3fa:	1a9b      	subs	r3, r3, r2
     3fc:	08db      	lsrs	r3, r3, #3
  int i;
  int j;
  long int factorial;
  LOG_INF("Calculating the factorials of numbers 1 to %d:",MAX_NUMBER_FACT);
     3fe:	f04f 0200 	mov.w	r2, #0
     402:	2103      	movs	r1, #3
     404:	f361 0202 	bfi	r2, r1, #0, #3
     408:	f36f 02c5 	bfc	r2, #3, #3
     40c:	f363 128f 	bfi	r2, r3, #6, #10
     410:	210a      	movs	r1, #10
     412:	4812      	ldr	r0, [pc, #72]	; (45c <CONFIG_FLASH_SIZE+0x5c>)
     414:	f001 f982 	bl	171c <log_1>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     418:	2401      	movs	r4, #1
     41a:	e015      	b.n	448 <CONFIG_FLASH_SIZE+0x48>
       factorial =1;
        for (j=1;j<=i;j++){
            factorial = factorial*j;
     41c:	fb03 f202 	mul.w	r2, r3, r2
        for (j=1;j<=i;j++){
     420:	3301      	adds	r3, #1
     422:	429c      	cmp	r4, r3
     424:	dafa      	bge.n	41c <CONFIG_FLASH_SIZE+0x1c>
     426:	4b0b      	ldr	r3, [pc, #44]	; (454 <CONFIG_FLASH_SIZE+0x54>)
     428:	490b      	ldr	r1, [pc, #44]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     42a:	1a5b      	subs	r3, r3, r1
     42c:	08db      	lsrs	r3, r3, #3
        }
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     42e:	2103      	movs	r1, #3
     430:	f361 0502 	bfi	r5, r1, #0, #3
     434:	f36f 05c5 	bfc	r5, #3, #3
     438:	f363 158f 	bfi	r5, r3, #6, #10
     43c:	462b      	mov	r3, r5
     43e:	4621      	mov	r1, r4
     440:	4807      	ldr	r0, [pc, #28]	; (460 <CONFIG_FLASH_SIZE+0x60>)
     442:	f001 f9a1 	bl	1788 <log_2>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     446:	3401      	adds	r4, #1
     448:	2c0a      	cmp	r4, #10
     44a:	dc02      	bgt.n	452 <CONFIG_FLASH_SIZE+0x52>
       factorial =1;
     44c:	2201      	movs	r2, #1
        for (j=1;j<=i;j++){
     44e:	4613      	mov	r3, r2
     450:	e7e7      	b.n	422 <CONFIG_FLASH_SIZE+0x22>
  }
  /*Important note! 
  Code in ISR runs at a high priority, therefore, it should be written with timing in mind.
  Too lengthy or too complex tasks should not be performed by an ISR, they should be deferred to a thread 
  */
}
     452:	bd38      	pop	{r3, r4, r5, pc}
     454:	0000883c 	.word	0x0000883c
     458:	0000883c 	.word	0x0000883c
     45c:	00008938 	.word	0x00008938
     460:	00008968 	.word	0x00008968

00000464 <main>:

static struct gpio_callback button_cb_data;

void main(void)
{
     464:	b530      	push	{r4, r5, lr}
     466:	b085      	sub	sp, #20
	const struct device *dev;
	int ret;
	/* STEP 6 - Write some logs */
    int exercise_num=2;
    uint8_t data[] = {0x00, 0x01, 0x02, 0x03,
     468:	4b4d      	ldr	r3, [pc, #308]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     46a:	466c      	mov	r4, sp
     46c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     46e:	c407      	stmia	r4!, {r0, r1, r2}
     470:	7023      	strb	r3, [r4, #0]
     472:	4c4c      	ldr	r4, [pc, #304]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     474:	4b4c      	ldr	r3, [pc, #304]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     476:	1ae4      	subs	r4, r4, r3
     478:	08e4      	lsrs	r4, r4, #3
                      0x04, 0x05, 0x06, 0x07,
                      'H', 'e', 'l', 'l','o'};
    //Printf-like messages
    LOG_INF("nRF Connect SDK Fundamentals");
     47a:	2503      	movs	r5, #3
     47c:	f04f 0100 	mov.w	r1, #0
     480:	f365 0102 	bfi	r1, r5, #0, #3
     484:	f36f 01c5 	bfc	r1, #3, #3
     488:	f364 118f 	bfi	r1, r4, #6, #10
     48c:	4847      	ldr	r0, [pc, #284]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     48e:	f001 f9d9 	bl	1844 <log_0>
    LOG_INF("Exercise %d",exercise_num);    
     492:	f04f 0200 	mov.w	r2, #0
     496:	f365 0202 	bfi	r2, r5, #0, #3
     49a:	f36f 02c5 	bfc	r2, #3, #3
     49e:	f364 128f 	bfi	r2, r4, #6, #10
     4a2:	2102      	movs	r1, #2
     4a4:	4842      	ldr	r0, [pc, #264]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     4a6:	f001 f939 	bl	171c <log_1>
    LOG_DBG("A log message in debug level");
     4aa:	f04f 0200 	mov.w	r2, #0
     4ae:	2304      	movs	r3, #4
     4b0:	f363 0202 	bfi	r2, r3, #0, #3
     4b4:	f36f 02c5 	bfc	r2, #3, #3
     4b8:	f364 128f 	bfi	r2, r4, #6, #10
     4bc:	493d      	ldr	r1, [pc, #244]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     4be:	483e      	ldr	r0, [pc, #248]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     4c0:	f001 f92c 	bl	171c <log_1>
    LOG_WRN("A log message in warning level!");
     4c4:	f04f 0100 	mov.w	r1, #0
     4c8:	2302      	movs	r3, #2
     4ca:	f363 0102 	bfi	r1, r3, #0, #3
     4ce:	f36f 01c5 	bfc	r1, #3, #3
     4d2:	f364 118f 	bfi	r1, r4, #6, #10
     4d6:	4839      	ldr	r0, [pc, #228]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     4d8:	f001 f9b4 	bl	1844 <log_0>
    LOG_ERR("A log message in Error level!");
     4dc:	f04f 0100 	mov.w	r1, #0
     4e0:	2301      	movs	r3, #1
     4e2:	f363 0102 	bfi	r1, r3, #0, #3
     4e6:	f36f 01c5 	bfc	r1, #3, #3
     4ea:	f364 118f 	bfi	r1, r4, #6, #10
     4ee:	4834      	ldr	r0, [pc, #208]	; (5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>)
     4f0:	f001 f9a8 	bl	1844 <log_0>
    //Hexdump some data
    LOG_HEXDUMP_INF(data, sizeof(data),"Sample Data!"); 
     4f4:	f04f 0300 	mov.w	r3, #0
     4f8:	f365 0302 	bfi	r3, r5, #0, #3
     4fc:	f36f 03c5 	bfc	r3, #3, #3
     500:	f364 138f 	bfi	r3, r4, #6, #10
     504:	220d      	movs	r2, #13
     506:	4669      	mov	r1, sp
     508:	482e      	ldr	r0, [pc, #184]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     50a:	f001 f979 	bl	1800 <log_hexdump>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     50e:	482e      	ldr	r0, [pc, #184]	; (5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>)
     510:	f004 feee 	bl	52f0 <z_impl_device_get_binding>

	dev = device_get_binding(LED0);
	if (dev == NULL) {
     514:	2800      	cmp	r0, #0
     516:	d041      	beq.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
     518:	4604      	mov	r4, r0

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
     51a:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     51c:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     51e:	6813      	ldr	r3, [r2, #0]
     520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     524:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     526:	680b      	ldr	r3, [r1, #0]
     528:	f240 6201 	movw	r2, #1537	; 0x601
     52c:	210d      	movs	r1, #13
     52e:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
     530:	2800      	cmp	r0, #0
     532:	db33      	blt.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
	const struct gpio_driver_api *api =
     534:	68a1      	ldr	r1, [r4, #8]
	struct gpio_driver_data *data =
     536:	6922      	ldr	r2, [r4, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
     538:	6813      	ldr	r3, [r2, #0]
     53a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     53e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     540:	680b      	ldr	r3, [r1, #0]
     542:	f240 1211 	movw	r2, #273	; 0x111
     546:	210b      	movs	r1, #11
     548:	4620      	mov	r0, r4
     54a:	4798      	blx	r3
		return;
	}
    ret = gpio_pin_configure(dev, SW0_GPIO_PIN, GPIO_INPUT | SW0_GPIO_FLAGS);
    if (ret < 0) {
     54c:	2800      	cmp	r0, #0
     54e:	db25      	blt.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
	const struct gpio_driver_api *api =
     550:	68a3      	ldr	r3, [r4, #8]
	const struct gpio_driver_data *const data =
     552:	6922      	ldr	r2, [r4, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     554:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     556:	f412 6f00 	tst.w	r2, #2048	; 0x800
     55a:	d11c      	bne.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
     55c:	f44f 225c 	mov.w	r2, #901120	; 0xdc000
	return api->pin_interrupt_configure(port, pin, mode, trig);
     560:	699d      	ldr	r5, [r3, #24]
     562:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
     566:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
     56a:	210b      	movs	r1, #11
     56c:	4620      	mov	r0, r4
     56e:	47a8      	blx	r5
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     570:	4b16      	ldr	r3, [pc, #88]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     572:	4a17      	ldr	r2, [pc, #92]	; (5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>)
     574:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
     576:	f44f 6200 	mov.w	r2, #2048	; 0x800
     57a:	609a      	str	r2, [r3, #8]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
     57c:	68a3      	ldr	r3, [r4, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     57e:	69db      	ldr	r3, [r3, #28]
     580:	b11b      	cbz	r3, 58a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa2>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     582:	2201      	movs	r2, #1
     584:	4911      	ldr	r1, [pc, #68]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     586:	4620      	mov	r0, r4
     588:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     58a:	f04f 7096 	mov.w	r0, #19660800	; 0x12c0000
     58e:	2100      	movs	r1, #0
     590:	f005 fe76 	bl	6280 <z_impl_k_sleep>
     594:	e7f9      	b.n	58a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa2>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     596:	f44f 223c 	mov.w	r2, #770048	; 0xbc000
     59a:	e7e1      	b.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>

	gpio_add_callback(dev, &button_cb_data);	
	while (1) {
        k_msleep(SLEEP_TIME_MS); 
	}
     59c:	b005      	add	sp, #20
     59e:	bd30      	pop	{r4, r5, pc}
     5a0:	00008910 	.word	0x00008910
     5a4:	0000883c 	.word	0x0000883c
     5a8:	0000883c 	.word	0x0000883c
     5ac:	00008984 	.word	0x00008984
     5b0:	000089a4 	.word	0x000089a4
     5b4:	00008a38 	.word	0x00008a38
     5b8:	000089b0 	.word	0x000089b0
     5bc:	000089d4 	.word	0x000089d4
     5c0:	000089f4 	.word	0x000089f4
     5c4:	00008a14 	.word	0x00008a14
     5c8:	00008a24 	.word	0x00008a24
     5cc:	20000438 	.word	0x20000438
     5d0:	000003f5 	.word	0x000003f5

000005d4 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     5d4:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5d6:	680b      	ldr	r3, [r1, #0]
     5d8:	3301      	adds	r3, #1
     5da:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5dc:	4b01      	ldr	r3, [pc, #4]	; (5e4 <char_out+0x10>)
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	4798      	blx	r3
}
     5e2:	bd08      	pop	{r3, pc}
     5e4:	20000000 	.word	0x20000000

000005e8 <__printk_hook_install>:
	_char_out = fn;
     5e8:	4b01      	ldr	r3, [pc, #4]	; (5f0 <__printk_hook_install+0x8>)
     5ea:	6018      	str	r0, [r3, #0]
}
     5ec:	4770      	bx	lr
     5ee:	bf00      	nop
     5f0:	20000000 	.word	0x20000000

000005f4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     5f4:	b500      	push	{lr}
     5f6:	b083      	sub	sp, #12
     5f8:	4602      	mov	r2, r0
     5fa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     5fc:	2100      	movs	r1, #0
     5fe:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     600:	a901      	add	r1, sp, #4
     602:	4803      	ldr	r0, [pc, #12]	; (610 <vprintk+0x1c>)
     604:	f000 f8c8 	bl	798 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     608:	b003      	add	sp, #12
     60a:	f85d fb04 	ldr.w	pc, [sp], #4
     60e:	bf00      	nop
     610:	000005d5 	.word	0x000005d5

00000614 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     614:	b510      	push	{r4, lr}
     616:	b084      	sub	sp, #16
     618:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     61a:	9001      	str	r0, [sp, #4]
     61c:	9102      	str	r1, [sp, #8]
     61e:	2100      	movs	r1, #0
     620:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     622:	a901      	add	r1, sp, #4
     624:	4805      	ldr	r0, [pc, #20]	; (63c <vsnprintk+0x28>)
     626:	f000 f8b7 	bl	798 <cbvprintf>

	if (ctx.count < ctx.max) {
     62a:	9b03      	ldr	r3, [sp, #12]
     62c:	9a02      	ldr	r2, [sp, #8]
     62e:	4293      	cmp	r3, r2
     630:	da01      	bge.n	636 <vsnprintk+0x22>
		str[ctx.count] = '\0';
     632:	2200      	movs	r2, #0
     634:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     636:	9803      	ldr	r0, [sp, #12]
     638:	b004      	add	sp, #16
     63a:	bd10      	pop	{r4, pc}
     63c:	00006bef 	.word	0x00006bef

00000640 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     644:	b083      	sub	sp, #12
     646:	4604      	mov	r4, r0
     648:	4608      	mov	r0, r1
     64a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     64c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     64e:	f013 0f08 	tst.w	r3, #8
     652:	d105      	bne.n	660 <process_event+0x20>
     654:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     658:	2300      	movs	r3, #0
     65a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     65c:	9301      	str	r3, [sp, #4]
}
     65e:	e069      	b.n	734 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     660:	2901      	cmp	r1, #1
     662:	d009      	beq.n	678 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     664:	f043 0320 	orr.w	r3, r3, #32
     668:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     66a:	f385 8811 	msr	BASEPRI, r5
     66e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     672:	b003      	add	sp, #12
     674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     678:	f043 0310 	orr.w	r3, r3, #16
     67c:	8323      	strh	r3, [r4, #24]
     67e:	e7f4      	b.n	66a <process_event+0x2a>
			evt = process_recheck(mgr);
     680:	4620      	mov	r0, r4
     682:	f006 fb0f 	bl	6ca4 <process_recheck>
     686:	e057      	b.n	738 <process_event+0xf8>
			res = mgr->last_res;
     688:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     68c:	464a      	mov	r2, r9
     68e:	4669      	mov	r1, sp
     690:	4620      	mov	r0, r4
     692:	f006 fb20 	bl	6cd6 <process_complete>
		onoff_transition_fn transit = NULL;
     696:	2700      	movs	r7, #0
     698:	e05a      	b.n	750 <process_event+0x110>
			transit = mgr->transitions->start;
     69a:	6923      	ldr	r3, [r4, #16]
     69c:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     69e:	2106      	movs	r1, #6
     6a0:	4620      	mov	r0, r4
     6a2:	f006 fad8 	bl	6c56 <set_state>
		res = 0;
     6a6:	f04f 0900 	mov.w	r9, #0
     6aa:	e051      	b.n	750 <process_event+0x110>
			transit = mgr->transitions->stop;
     6ac:	6923      	ldr	r3, [r4, #16]
     6ae:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     6b0:	2104      	movs	r1, #4
     6b2:	4620      	mov	r0, r4
     6b4:	f006 facf 	bl	6c56 <set_state>
		res = 0;
     6b8:	f04f 0900 	mov.w	r9, #0
     6bc:	e048      	b.n	750 <process_event+0x110>
			transit = mgr->transitions->reset;
     6be:	6923      	ldr	r3, [r4, #16]
     6c0:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     6c2:	2105      	movs	r1, #5
     6c4:	4620      	mov	r0, r4
     6c6:	f006 fac6 	bl	6c56 <set_state>
		res = 0;
     6ca:	f04f 0900 	mov.w	r9, #0
     6ce:	e03f      	b.n	750 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     6d0:	2200      	movs	r2, #0
     6d2:	e046      	b.n	762 <process_event+0x122>
     6d4:	2200      	movs	r2, #0
     6d6:	e044      	b.n	762 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6d8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     6dc:	8323      	strh	r3, [r4, #24]
     6de:	f385 8811 	msr	BASEPRI, r5
     6e2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6e6:	2900      	cmp	r1, #0
     6e8:	d144      	bne.n	774 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     6ea:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     6ec:	b12b      	cbz	r3, 6fa <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     6ee:	464b      	mov	r3, r9
     6f0:	4642      	mov	r2, r8
     6f2:	4669      	mov	r1, sp
     6f4:	4620      	mov	r0, r4
     6f6:	f006 fb64 	bl	6dc2 <notify_all>
			if (transit != NULL) {
     6fa:	b117      	cbz	r7, 702 <process_event+0xc2>
				transit(mgr, transition_complete);
     6fc:	4925      	ldr	r1, [pc, #148]	; (794 <process_event+0x154>)
     6fe:	4620      	mov	r0, r4
     700:	47b8      	blx	r7
	__asm__ volatile(
     702:	f04f 0320 	mov.w	r3, #32
     706:	f3ef 8511 	mrs	r5, BASEPRI
     70a:	f383 8812 	msr	BASEPRI_MAX, r3
     70e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     712:	8b23      	ldrh	r3, [r4, #24]
     714:	f023 0308 	bic.w	r3, r3, #8
     718:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     71a:	8b23      	ldrh	r3, [r4, #24]
     71c:	f013 0f10 	tst.w	r3, #16
     720:	d02e      	beq.n	780 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     722:	f023 0310 	bic.w	r3, r3, #16
     726:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     728:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     72a:	8b26      	ldrh	r6, [r4, #24]
     72c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     730:	2800      	cmp	r0, #0
     732:	d09a      	beq.n	66a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     734:	2802      	cmp	r0, #2
     736:	d0a3      	beq.n	680 <process_event+0x40>
		if (evt == EVT_NOP) {
     738:	2800      	cmp	r0, #0
     73a:	d096      	beq.n	66a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     73c:	2801      	cmp	r0, #1
     73e:	d0a3      	beq.n	688 <process_event+0x48>
		} else if (evt == EVT_START) {
     740:	2803      	cmp	r0, #3
     742:	d0aa      	beq.n	69a <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     744:	2804      	cmp	r0, #4
     746:	d0b1      	beq.n	6ac <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     748:	2805      	cmp	r0, #5
     74a:	d0b8      	beq.n	6be <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     74c:	2700      	movs	r7, #0
		res = 0;
     74e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     750:	8b23      	ldrh	r3, [r4, #24]
     752:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     756:	45b0      	cmp	r8, r6
     758:	d0ba      	beq.n	6d0 <process_event+0x90>
     75a:	68a2      	ldr	r2, [r4, #8]
     75c:	2a00      	cmp	r2, #0
     75e:	d0b9      	beq.n	6d4 <process_event+0x94>
     760:	2201      	movs	r2, #1
		if (do_monitors
     762:	4611      	mov	r1, r2
     764:	2a00      	cmp	r2, #0
     766:	d1b7      	bne.n	6d8 <process_event+0x98>
     768:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     76a:	2a00      	cmp	r2, #0
     76c:	d1b4      	bne.n	6d8 <process_event+0x98>
		    || (transit != NULL)) {
     76e:	2f00      	cmp	r7, #0
     770:	d1b2      	bne.n	6d8 <process_event+0x98>
     772:	e7d2      	b.n	71a <process_event+0xda>
				notify_monitors(mgr, state, res);
     774:	464a      	mov	r2, r9
     776:	4641      	mov	r1, r8
     778:	4620      	mov	r0, r4
     77a:	f006 fa74 	bl	6c66 <notify_monitors>
     77e:	e7b4      	b.n	6ea <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     780:	f013 0f20 	tst.w	r3, #32
     784:	d004      	beq.n	790 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     786:	f023 0320 	bic.w	r3, r3, #32
     78a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     78c:	2002      	movs	r0, #2
     78e:	e7cc      	b.n	72a <process_event+0xea>
		evt = EVT_NOP;
     790:	2000      	movs	r0, #0
     792:	e7ca      	b.n	72a <process_event+0xea>
     794:	00006df1 	.word	0x00006df1

00000798 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     79c:	b093      	sub	sp, #76	; 0x4c
     79e:	4606      	mov	r6, r0
     7a0:	460d      	mov	r5, r1
     7a2:	4692      	mov	sl, r2
     7a4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7a6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7a8:	f89a 0000 	ldrb.w	r0, [sl]
     7ac:	2800      	cmp	r0, #0
     7ae:	f000 84d6 	beq.w	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
		if (*fp != '%') {
     7b2:	2825      	cmp	r0, #37	; 0x25
     7b4:	d008      	beq.n	7c8 <cbvprintf+0x30>
			OUTC(*fp++);
     7b6:	f10a 0a01 	add.w	sl, sl, #1
     7ba:	4629      	mov	r1, r5
     7bc:	47b0      	blx	r6
     7be:	2800      	cmp	r0, #0
     7c0:	f2c0 84ce 	blt.w	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
     7c4:	3401      	adds	r4, #1
			continue;
     7c6:	e7ef      	b.n	7a8 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     7c8:	2300      	movs	r3, #0
     7ca:	9306      	str	r3, [sp, #24]
     7cc:	9307      	str	r3, [sp, #28]
     7ce:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     7d0:	9308      	str	r3, [sp, #32]
     7d2:	9309      	str	r3, [sp, #36]	; 0x24
     7d4:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     7d6:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     7da:	f89a 3001 	ldrb.w	r3, [sl, #1]
     7de:	2b25      	cmp	r3, #37	; 0x25
     7e0:	d001      	beq.n	7e6 <cbvprintf+0x4e>
	bool loop = true;
     7e2:	2701      	movs	r7, #1
     7e4:	e02c      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
		conv->specifier = *sp++;
     7e6:	f10a 0802 	add.w	r8, sl, #2
     7ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     7ee:	e1a8      	b.n	b42 <CONFIG_ISR_STACK_SIZE+0x342>
			conv->flag_dash = true;
     7f0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7f4:	f043 0304 	orr.w	r3, r3, #4
     7f8:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     7fc:	b1ff      	cbz	r7, 83e <CONFIG_ISR_STACK_SIZE+0x3e>
			++sp;
     7fe:	f108 0801 	add.w	r8, r8, #1
     802:	e01c      	b.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
			conv->flag_plus = true;
     804:	f89d 3020 	ldrb.w	r3, [sp, #32]
     808:	f043 0308 	orr.w	r3, r3, #8
     80c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     810:	e7f4      	b.n	7fc <cbvprintf+0x64>
			conv->flag_space = true;
     812:	f89d 3020 	ldrb.w	r3, [sp, #32]
     816:	f043 0310 	orr.w	r3, r3, #16
     81a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     81e:	e7ed      	b.n	7fc <cbvprintf+0x64>
			conv->flag_hash = true;
     820:	f89d 3020 	ldrb.w	r3, [sp, #32]
     824:	f043 0320 	orr.w	r3, r3, #32
     828:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     82c:	e7e6      	b.n	7fc <cbvprintf+0x64>
			conv->flag_zero = true;
     82e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     836:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     83a:	e7df      	b.n	7fc <cbvprintf+0x64>
		switch (*sp) {
     83c:	2700      	movs	r7, #0
	} while (loop);
     83e:	b34f      	cbz	r7, 894 <CONFIG_ISR_STACK_SIZE+0x94>
		switch (*sp) {
     840:	f898 3000 	ldrb.w	r3, [r8]
     844:	3b20      	subs	r3, #32
     846:	2b10      	cmp	r3, #16
     848:	d8f8      	bhi.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     84a:	a201      	add	r2, pc, #4	; (adr r2, 850 <CONFIG_ISR_STACK_SIZE+0x50>)
     84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     850:	00000813 	.word	0x00000813
     854:	0000083d 	.word	0x0000083d
     858:	0000083d 	.word	0x0000083d
     85c:	00000821 	.word	0x00000821
     860:	0000083d 	.word	0x0000083d
     864:	0000083d 	.word	0x0000083d
     868:	0000083d 	.word	0x0000083d
     86c:	0000083d 	.word	0x0000083d
     870:	0000083d 	.word	0x0000083d
     874:	0000083d 	.word	0x0000083d
     878:	0000083d 	.word	0x0000083d
     87c:	00000805 	.word	0x00000805
     880:	0000083d 	.word	0x0000083d
     884:	000007f1 	.word	0x000007f1
     888:	0000083d 	.word	0x0000083d
     88c:	0000083d 	.word	0x0000083d
     890:	0000082f 	.word	0x0000082f
	if (conv->flag_zero && conv->flag_dash) {
     894:	f89d 3020 	ldrb.w	r3, [sp, #32]
     898:	f003 0344 	and.w	r3, r3, #68	; 0x44
     89c:	2b44      	cmp	r3, #68	; 0x44
     89e:	d06d      	beq.n	97c <CONFIG_ISR_STACK_SIZE+0x17c>
	sp = extract_width(conv, sp);
     8a0:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     8a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     8ac:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     8b0:	f898 3000 	ldrb.w	r3, [r8]
     8b4:	2b2a      	cmp	r3, #42	; 0x2a
     8b6:	d068      	beq.n	98a <CONFIG_ISR_STACK_SIZE+0x18a>
	size_t width = extract_decimal(&sp);
     8b8:	a805      	add	r0, sp, #20
     8ba:	f006 fb29 	bl	6f10 <extract_decimal>
	if (sp != wp) {
     8be:	9b05      	ldr	r3, [sp, #20]
     8c0:	4598      	cmp	r8, r3
     8c2:	d012      	beq.n	8ea <CONFIG_ISR_STACK_SIZE+0xea>
		conv->width_present = true;
     8c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     8cc:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     8d0:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     8d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     8d6:	2800      	cmp	r0, #0
     8d8:	db60      	blt.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
     8da:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     8dc:	4313      	orrs	r3, r2
     8de:	f89d 2020 	ldrb.w	r2, [sp, #32]
     8e2:	f363 0241 	bfi	r2, r3, #1, #1
     8e6:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     8ea:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     8ec:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     8ee:	781b      	ldrb	r3, [r3, #0]
     8f0:	2b2e      	cmp	r3, #46	; 0x2e
     8f2:	bf14      	ite	ne
     8f4:	2300      	movne	r3, #0
     8f6:	2301      	moveq	r3, #1
     8f8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     8fc:	f363 0241 	bfi	r2, r3, #1, #1
     900:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     904:	2b00      	cmp	r3, #0
     906:	d04b      	beq.n	9a0 <CONFIG_ISR_STACK_SIZE+0x1a0>
	++sp;
     908:	9b05      	ldr	r3, [sp, #20]
     90a:	1c5a      	adds	r2, r3, #1
     90c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     90e:	785b      	ldrb	r3, [r3, #1]
     910:	2b2a      	cmp	r3, #42	; 0x2a
     912:	d048      	beq.n	9a6 <CONFIG_ISR_STACK_SIZE+0x1a6>
	size_t prec = extract_decimal(&sp);
     914:	a805      	add	r0, sp, #20
     916:	f006 fafb 	bl	6f10 <extract_decimal>
	conv->prec_value = prec;
     91a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     91c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     920:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     924:	2800      	cmp	r0, #0
     926:	db47      	blt.n	9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>
     928:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     92a:	4313      	orrs	r3, r2
     92c:	f89d 2020 	ldrb.w	r2, [sp, #32]
     930:	f363 0241 	bfi	r2, r3, #1, #1
     934:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     938:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     93c:	f898 3000 	ldrb.w	r3, [r8]
     940:	3b4c      	subs	r3, #76	; 0x4c
     942:	2b2e      	cmp	r3, #46	; 0x2e
     944:	f200 80dc 	bhi.w	b00 <CONFIG_ISR_STACK_SIZE+0x300>
     948:	e8df f003 	tbb	[pc, r3]
     94c:	dadadaca 	.word	0xdadadaca
     950:	dadadada 	.word	0xdadadada
     954:	dadadada 	.word	0xdadadada
     958:	dadadada 	.word	0xdadadada
     95c:	dadadada 	.word	0xdadadada
     960:	dadadada 	.word	0xdadadada
     964:	dadadada 	.word	0xdadadada
     968:	da6ada38 	.word	0xda6ada38
     96c:	dadada51 	.word	0xdadada51
     970:	dadadada 	.word	0xdadadada
     974:	dadadac0 	.word	0xdadadac0
     978:	dada      	.short	0xdada
     97a:	b6          	.byte	0xb6
     97b:	00          	.byte	0x00
		conv->flag_zero = false;
     97c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     980:	f36f 1386 	bfc	r3, #6, #1
     984:	f88d 3020 	strb.w	r3, [sp, #32]
     988:	e78a      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
		conv->width_star = true;
     98a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     98e:	f043 0301 	orr.w	r3, r3, #1
     992:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     996:	4643      	mov	r3, r8
     998:	3301      	adds	r3, #1
     99a:	e7a7      	b.n	8ec <CONFIG_ISR_STACK_SIZE+0xec>
				      || (width != (size_t)conv->width_value));
     99c:	2201      	movs	r2, #1
     99e:	e79d      	b.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
		return sp;
     9a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
     9a4:	e7ca      	b.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
		conv->prec_star = true;
     9a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9aa:	f043 0304 	orr.w	r3, r3, #4
     9ae:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     9b2:	f102 0801 	add.w	r8, r2, #1
     9b6:	e7c1      	b.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
			      || (prec != (size_t)conv->prec_value));
     9b8:	2201      	movs	r2, #1
     9ba:	e7b6      	b.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
		if (*++sp == 'h') {
     9bc:	f108 0201 	add.w	r2, r8, #1
     9c0:	f898 3001 	ldrb.w	r3, [r8, #1]
     9c4:	2b68      	cmp	r3, #104	; 0x68
     9c6:	d008      	beq.n	9da <CONFIG_ISR_STACK_SIZE+0x1da>
			conv->length_mod = LENGTH_H;
     9c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9cc:	2102      	movs	r1, #2
     9ce:	f361 03c6 	bfi	r3, r1, #3, #4
     9d2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     9d6:	4690      	mov	r8, r2
     9d8:	e02b      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
			conv->length_mod = LENGTH_HH;
     9da:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9de:	2201      	movs	r2, #1
     9e0:	f362 03c6 	bfi	r3, r2, #3, #4
     9e4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     9e8:	f108 0802 	add.w	r8, r8, #2
     9ec:	e021      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		if (*++sp == 'l') {
     9ee:	f108 0201 	add.w	r2, r8, #1
     9f2:	f898 3001 	ldrb.w	r3, [r8, #1]
     9f6:	2b6c      	cmp	r3, #108	; 0x6c
     9f8:	d008      	beq.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
			conv->length_mod = LENGTH_L;
     9fa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9fe:	2103      	movs	r1, #3
     a00:	f361 03c6 	bfi	r3, r1, #3, #4
     a04:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     a08:	4690      	mov	r8, r2
     a0a:	e012      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
			conv->length_mod = LENGTH_LL;
     a0c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a10:	2204      	movs	r2, #4
     a12:	f362 03c6 	bfi	r3, r2, #3, #4
     a16:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     a1a:	f108 0802 	add.w	r8, r8, #2
     a1e:	e008      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		conv->length_mod = LENGTH_J;
     a20:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a24:	2205      	movs	r2, #5
     a26:	f362 03c6 	bfi	r3, r2, #3, #4
     a2a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a2e:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     a32:	f818 3b01 	ldrb.w	r3, [r8], #1
     a36:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     a3a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     a3e:	2a37      	cmp	r2, #55	; 0x37
     a40:	f200 8150 	bhi.w	ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
     a44:	e8df f012 	tbh	[pc, r2, lsl #1]
     a48:	014e0126 	.word	0x014e0126
     a4c:	014e014e 	.word	0x014e014e
     a50:	01260126 	.word	0x01260126
     a54:	014e0126 	.word	0x014e0126
     a58:	014e014e 	.word	0x014e014e
     a5c:	014e014e 	.word	0x014e014e
     a60:	014e014e 	.word	0x014e014e
     a64:	014e014e 	.word	0x014e014e
     a68:	014e014e 	.word	0x014e014e
     a6c:	014e014e 	.word	0x014e014e
     a70:	014e014e 	.word	0x014e014e
     a74:	0113014e 	.word	0x0113014e
     a78:	014e014e 	.word	0x014e014e
     a7c:	014e014e 	.word	0x014e014e
     a80:	014e014e 	.word	0x014e014e
     a84:	014e014e 	.word	0x014e014e
     a88:	014e0126 	.word	0x014e0126
     a8c:	00630113 	.word	0x00630113
     a90:	01260126 	.word	0x01260126
     a94:	014e0126 	.word	0x014e0126
     a98:	014e0063 	.word	0x014e0063
     a9c:	014e014e 	.word	0x014e014e
     aa0:	012f014e 	.word	0x012f014e
     aa4:	013f0113 	.word	0x013f0113
     aa8:	014e014e 	.word	0x014e014e
     aac:	014e013f 	.word	0x014e013f
     ab0:	014e0113 	.word	0x014e0113
     ab4:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     ab8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     abc:	2206      	movs	r2, #6
     abe:	f362 03c6 	bfi	r3, r2, #3, #4
     ac2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     ac6:	f108 0801 	add.w	r8, r8, #1
		break;
     aca:	e7b2      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		conv->length_mod = LENGTH_T;
     acc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ad0:	2207      	movs	r2, #7
     ad2:	f362 03c6 	bfi	r3, r2, #3, #4
     ad6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     ada:	f108 0801 	add.w	r8, r8, #1
		break;
     ade:	e7a8      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		conv->length_mod = LENGTH_UPPER_L;
     ae0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ae4:	2208      	movs	r2, #8
     ae6:	f362 03c6 	bfi	r3, r2, #3, #4
     aea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     aee:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     af2:	f89d 3020 	ldrb.w	r3, [sp, #32]
     af6:	f043 0302 	orr.w	r3, r3, #2
     afa:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     afe:	e798      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		conv->length_mod = LENGTH_NONE;
     b00:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b04:	f36f 03c6 	bfc	r3, #3, #4
     b08:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     b0c:	e791      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		conv->specifier_cat = SPECIFIER_SINT;
     b0e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     b12:	2101      	movs	r1, #1
     b14:	f361 0202 	bfi	r2, r1, #0, #3
     b18:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     b1c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     b20:	f002 0278 	and.w	r2, r2, #120	; 0x78
     b24:	2a40      	cmp	r2, #64	; 0x40
     b26:	f000 80aa 	beq.w	c7e <CONFIG_ISR_STACK_SIZE+0x47e>
		if (conv->specifier == 'c') {
     b2a:	2b63      	cmp	r3, #99	; 0x63
     b2c:	f000 80ae 	beq.w	c8c <CONFIG_ISR_STACK_SIZE+0x48c>
	conv->unsupported |= unsupported;
     b30:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b34:	f3c3 0240 	ubfx	r2, r3, #1, #1
     b38:	4317      	orrs	r7, r2
     b3a:	f367 0341 	bfi	r3, r7, #1, #1
     b3e:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     b42:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b46:	f013 0f01 	tst.w	r3, #1
     b4a:	f000 80da 	beq.w	d02 <CONFIG_ISR_STACK_SIZE+0x502>
			width = va_arg(ap, int);
     b4e:	9b03      	ldr	r3, [sp, #12]
     b50:	1d1a      	adds	r2, r3, #4
     b52:	9203      	str	r2, [sp, #12]
     b54:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     b56:	2f00      	cmp	r7, #0
     b58:	f2c0 80cb 	blt.w	cf2 <CONFIG_ISR_STACK_SIZE+0x4f2>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     b5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b60:	f013 0f04 	tst.w	r3, #4
     b64:	f000 80df 	beq.w	d26 <CONFIG_ISR_STACK_SIZE+0x526>
			int arg = va_arg(ap, int);
     b68:	9b03      	ldr	r3, [sp, #12]
     b6a:	1d1a      	adds	r2, r3, #4
     b6c:	9203      	str	r2, [sp, #12]
     b6e:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     b72:	f1bb 0f00 	cmp.w	fp, #0
     b76:	f2c0 80cd 	blt.w	d14 <CONFIG_ISR_STACK_SIZE+0x514>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     b7a:	2300      	movs	r3, #0
     b7c:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     b7e:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     b80:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b84:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     b88:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     b8c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     b90:	2b01      	cmp	r3, #1
     b92:	f000 80d1 	beq.w	d38 <CONFIG_ISR_STACK_SIZE+0x538>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     b96:	2b02      	cmp	r3, #2
     b98:	f000 8116 	beq.w	dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     b9c:	2b04      	cmp	r3, #4
     b9e:	f000 8167 	beq.w	e70 <CONFIG_ISR_STACK_SIZE+0x670>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     ba2:	2b03      	cmp	r3, #3
     ba4:	f000 817e 	beq.w	ea4 <CONFIG_ISR_STACK_SIZE+0x6a4>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     ba8:	f89d 9020 	ldrb.w	r9, [sp, #32]
     bac:	f019 0303 	ands.w	r3, r9, #3
     bb0:	9302      	str	r3, [sp, #8]
     bb2:	f040 817d 	bne.w	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     bb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     bba:	3b25      	subs	r3, #37	; 0x25
     bbc:	2b53      	cmp	r3, #83	; 0x53
     bbe:	f200 8233 	bhi.w	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     bc2:	e8df f013 	tbh	[pc, r3, lsl #1]
     bc6:	0181      	.short	0x0181
     bc8:	02310231 	.word	0x02310231
     bcc:	02310231 	.word	0x02310231
     bd0:	02310231 	.word	0x02310231
     bd4:	02310231 	.word	0x02310231
     bd8:	02310231 	.word	0x02310231
     bdc:	02310231 	.word	0x02310231
     be0:	02310231 	.word	0x02310231
     be4:	02310231 	.word	0x02310231
     be8:	02310231 	.word	0x02310231
     bec:	02310231 	.word	0x02310231
     bf0:	02310231 	.word	0x02310231
     bf4:	02310231 	.word	0x02310231
     bf8:	02310231 	.word	0x02310231
     bfc:	02310231 	.word	0x02310231
     c00:	02310231 	.word	0x02310231
     c04:	02310231 	.word	0x02310231
     c08:	02310231 	.word	0x02310231
     c0c:	02310231 	.word	0x02310231
     c10:	02310231 	.word	0x02310231
     c14:	02310231 	.word	0x02310231
     c18:	02310231 	.word	0x02310231
     c1c:	02310231 	.word	0x02310231
     c20:	02310231 	.word	0x02310231
     c24:	02310231 	.word	0x02310231
     c28:	02310231 	.word	0x02310231
     c2c:	023101c7 	.word	0x023101c7
     c30:	02310231 	.word	0x02310231
     c34:	02310231 	.word	0x02310231
     c38:	02310231 	.word	0x02310231
     c3c:	02310231 	.word	0x02310231
     c40:	01a10231 	.word	0x01a10231
     c44:	023101ab 	.word	0x023101ab
     c48:	02310231 	.word	0x02310231
     c4c:	01ab0231 	.word	0x01ab0231
     c50:	02310231 	.word	0x02310231
     c54:	02310231 	.word	0x02310231
     c58:	01c70208 	.word	0x01c70208
     c5c:	023101ea 	.word	0x023101ea
     c60:	018f0231 	.word	0x018f0231
     c64:	01c70231 	.word	0x01c70231
     c68:	02310231 	.word	0x02310231
     c6c:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     c6e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     c72:	2102      	movs	r1, #2
     c74:	f361 0202 	bfi	r2, r1, #0, #3
     c78:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     c7c:	e74e      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
			conv->invalid = true;
     c7e:	f89d 1020 	ldrb.w	r1, [sp, #32]
     c82:	f041 0101 	orr.w	r1, r1, #1
     c86:	f88d 1020 	strb.w	r1, [sp, #32]
     c8a:	e74e      	b.n	b2a <CONFIG_ISR_STACK_SIZE+0x32a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     c8c:	1e17      	subs	r7, r2, #0
     c8e:	bf18      	it	ne
     c90:	2701      	movne	r7, #1
     c92:	e74d      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
		conv->specifier_cat = SPECIFIER_FP;
     c94:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c98:	2204      	movs	r2, #4
     c9a:	f362 0302 	bfi	r3, r2, #0, #3
     c9e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     ca2:	2701      	movs	r7, #1
			break;
     ca4:	e744      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
		conv->specifier_cat = SPECIFIER_PTR;
     ca6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     caa:	2203      	movs	r2, #3
     cac:	f362 0302 	bfi	r3, r2, #0, #3
     cb0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     cb4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     cb8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     cbc:	2b40      	cmp	r3, #64	; 0x40
     cbe:	f47f af37 	bne.w	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			unsupported = true;
     cc2:	2701      	movs	r7, #1
     cc4:	e734      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
		conv->specifier_cat = SPECIFIER_PTR;
     cc6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     cca:	2203      	movs	r2, #3
     ccc:	f362 0302 	bfi	r3, r2, #0, #3
     cd0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     cd4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     cd8:	f013 0f78 	tst.w	r3, #120	; 0x78
     cdc:	f43f af28 	beq.w	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			unsupported = true;
     ce0:	2701      	movs	r7, #1
     ce2:	e725      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
		conv->invalid = true;
     ce4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ce8:	f043 0301 	orr.w	r3, r3, #1
     cec:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     cf0:	e71e      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
				conv->flag_dash = true;
     cf2:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cf6:	f043 0304 	orr.w	r3, r3, #4
     cfa:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     cfe:	427f      	negs	r7, r7
     d00:	e72c      	b.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
		} else if (conv->width_present) {
     d02:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     d06:	2b00      	cmp	r3, #0
     d08:	db02      	blt.n	d10 <CONFIG_ISR_STACK_SIZE+0x510>
		int width = -1;
     d0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     d0e:	e725      	b.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
			width = conv->width_value;
     d10:	9f09      	ldr	r7, [sp, #36]	; 0x24
     d12:	e723      	b.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
				conv->prec_present = false;
     d14:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d18:	f36f 0341 	bfc	r3, #1, #1
     d1c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     d20:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     d24:	e729      	b.n	b7a <CONFIG_ISR_STACK_SIZE+0x37a>
		} else if (conv->prec_present) {
     d26:	f013 0f02 	tst.w	r3, #2
     d2a:	d002      	beq.n	d32 <CONFIG_ISR_STACK_SIZE+0x532>
			precision = conv->prec_value;
     d2c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     d30:	e723      	b.n	b7a <CONFIG_ISR_STACK_SIZE+0x37a>
		int precision = -1;
     d32:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     d36:	e720      	b.n	b7a <CONFIG_ISR_STACK_SIZE+0x37a>
			switch (length_mod) {
     d38:	1ecb      	subs	r3, r1, #3
     d3a:	2b04      	cmp	r3, #4
     d3c:	d804      	bhi.n	d48 <CONFIG_ISR_STACK_SIZE+0x548>
     d3e:	e8df f003 	tbb	[pc, r3]
     d42:	1d0b      	.short	0x1d0b
     d44:	3529      	.short	0x3529
     d46:	35          	.byte	0x35
     d47:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     d48:	9b03      	ldr	r3, [sp, #12]
     d4a:	1d1a      	adds	r2, r3, #4
     d4c:	9203      	str	r2, [sp, #12]
     d4e:	681a      	ldr	r2, [r3, #0]
     d50:	17d3      	asrs	r3, r2, #31
     d52:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d56:	e006      	b.n	d66 <CONFIG_ISR_STACK_SIZE+0x566>
					value->sint = va_arg(ap, long);
     d58:	9b03      	ldr	r3, [sp, #12]
     d5a:	1d1a      	adds	r2, r3, #4
     d5c:	9203      	str	r2, [sp, #12]
     d5e:	681a      	ldr	r2, [r3, #0]
     d60:	17d3      	asrs	r3, r2, #31
     d62:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     d66:	2901      	cmp	r1, #1
     d68:	d028      	beq.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
			} else if (length_mod == LENGTH_H) {
     d6a:	2902      	cmp	r1, #2
     d6c:	f47f af1c 	bne.w	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
				value->sint = (short)value->sint;
     d70:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     d74:	17d3      	asrs	r3, r2, #31
     d76:	e9cd 2306 	strd	r2, r3, [sp, #24]
     d7a:	e715      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
					(sint_value_type)va_arg(ap, long long);
     d7c:	9b03      	ldr	r3, [sp, #12]
     d7e:	3307      	adds	r3, #7
     d80:	f023 0307 	bic.w	r3, r3, #7
     d84:	f103 0208 	add.w	r2, r3, #8
     d88:	9203      	str	r2, [sp, #12]
     d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     d8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d92:	e7e8      	b.n	d66 <CONFIG_ISR_STACK_SIZE+0x566>
					(sint_value_type)va_arg(ap, intmax_t);
     d94:	9b03      	ldr	r3, [sp, #12]
     d96:	3307      	adds	r3, #7
     d98:	f023 0307 	bic.w	r3, r3, #7
     d9c:	f103 0208 	add.w	r2, r3, #8
     da0:	9203      	str	r2, [sp, #12]
     da2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     da6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     daa:	e7dc      	b.n	d66 <CONFIG_ISR_STACK_SIZE+0x566>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     dac:	9b03      	ldr	r3, [sp, #12]
     dae:	1d1a      	adds	r2, r3, #4
     db0:	9203      	str	r2, [sp, #12]
     db2:	681a      	ldr	r2, [r3, #0]
     db4:	17d3      	asrs	r3, r2, #31
				value->sint =
     db6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     dba:	e7d4      	b.n	d66 <CONFIG_ISR_STACK_SIZE+0x566>
				value->sint = (char)value->sint;
     dbc:	f89d 3018 	ldrb.w	r3, [sp, #24]
     dc0:	9306      	str	r3, [sp, #24]
     dc2:	2300      	movs	r3, #0
     dc4:	9307      	str	r3, [sp, #28]
     dc6:	e6ef      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			switch (length_mod) {
     dc8:	1ecb      	subs	r3, r1, #3
     dca:	2b04      	cmp	r3, #4
     dcc:	d804      	bhi.n	dd8 <CONFIG_ISR_STACK_SIZE+0x5d8>
     dce:	e8df f003 	tbb	[pc, r3]
     dd2:	1f0b      	.short	0x1f0b
     dd4:	4135      	.short	0x4135
     dd6:	41          	.byte	0x41
     dd7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     dd8:	9b03      	ldr	r3, [sp, #12]
     dda:	1d1a      	adds	r2, r3, #4
     ddc:	9203      	str	r2, [sp, #12]
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	9306      	str	r3, [sp, #24]
     de2:	2300      	movs	r3, #0
     de4:	9307      	str	r3, [sp, #28]
				break;
     de6:	e01e      	b.n	e26 <CONFIG_ISR_STACK_SIZE+0x626>
				    && (conv->specifier == 'c')) {
     de8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     dec:	2b63      	cmp	r3, #99	; 0x63
     dee:	d007      	beq.n	e00 <CONFIG_ISR_STACK_SIZE+0x600>
					value->uint = va_arg(ap, unsigned long);
     df0:	9b03      	ldr	r3, [sp, #12]
     df2:	1d1a      	adds	r2, r3, #4
     df4:	9203      	str	r2, [sp, #12]
     df6:	681b      	ldr	r3, [r3, #0]
     df8:	9306      	str	r3, [sp, #24]
     dfa:	2300      	movs	r3, #0
     dfc:	9307      	str	r3, [sp, #28]
     dfe:	e012      	b.n	e26 <CONFIG_ISR_STACK_SIZE+0x626>
					value->uint = (wchar_t)va_arg(ap,
     e00:	9b03      	ldr	r3, [sp, #12]
     e02:	1d1a      	adds	r2, r3, #4
     e04:	9203      	str	r2, [sp, #12]
     e06:	681b      	ldr	r3, [r3, #0]
     e08:	9306      	str	r3, [sp, #24]
     e0a:	2300      	movs	r3, #0
     e0c:	9307      	str	r3, [sp, #28]
     e0e:	e00a      	b.n	e26 <CONFIG_ISR_STACK_SIZE+0x626>
					(uint_value_type)va_arg(ap,
     e10:	9b03      	ldr	r3, [sp, #12]
     e12:	3307      	adds	r3, #7
     e14:	f023 0307 	bic.w	r3, r3, #7
     e18:	f103 0208 	add.w	r2, r3, #8
     e1c:	9203      	str	r2, [sp, #12]
     e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     e22:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     e26:	2901      	cmp	r1, #1
     e28:	d01c      	beq.n	e64 <CONFIG_ISR_STACK_SIZE+0x664>
			} else if (length_mod == LENGTH_H) {
     e2a:	2902      	cmp	r1, #2
     e2c:	f47f aebc 	bne.w	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
				value->uint = (unsigned short)value->uint;
     e30:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     e34:	9306      	str	r3, [sp, #24]
     e36:	2300      	movs	r3, #0
     e38:	9307      	str	r3, [sp, #28]
     e3a:	e6b5      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
					(uint_value_type)va_arg(ap,
     e3c:	9b03      	ldr	r3, [sp, #12]
     e3e:	3307      	adds	r3, #7
     e40:	f023 0307 	bic.w	r3, r3, #7
     e44:	f103 0208 	add.w	r2, r3, #8
     e48:	9203      	str	r2, [sp, #12]
     e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     e4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     e52:	e7e8      	b.n	e26 <CONFIG_ISR_STACK_SIZE+0x626>
					(uint_value_type)va_arg(ap, size_t);
     e54:	9b03      	ldr	r3, [sp, #12]
     e56:	1d1a      	adds	r2, r3, #4
     e58:	9203      	str	r2, [sp, #12]
     e5a:	681b      	ldr	r3, [r3, #0]
				value->uint =
     e5c:	9306      	str	r3, [sp, #24]
     e5e:	2300      	movs	r3, #0
     e60:	9307      	str	r3, [sp, #28]
				break;
     e62:	e7e0      	b.n	e26 <CONFIG_ISR_STACK_SIZE+0x626>
				value->uint = (unsigned char)value->uint;
     e64:	f89d 3018 	ldrb.w	r3, [sp, #24]
     e68:	9306      	str	r3, [sp, #24]
     e6a:	2300      	movs	r3, #0
     e6c:	9307      	str	r3, [sp, #28]
     e6e:	e69b      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			if (length_mod == LENGTH_UPPER_L) {
     e70:	2908      	cmp	r1, #8
     e72:	d00b      	beq.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
				value->dbl = va_arg(ap, double);
     e74:	9b03      	ldr	r3, [sp, #12]
     e76:	3307      	adds	r3, #7
     e78:	f023 0307 	bic.w	r3, r3, #7
     e7c:	f103 0208 	add.w	r2, r3, #8
     e80:	9203      	str	r2, [sp, #12]
     e82:	e9d3 2300 	ldrd	r2, r3, [r3]
     e86:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e8a:	e68d      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
				value->ldbl = va_arg(ap, long double);
     e8c:	9b03      	ldr	r3, [sp, #12]
     e8e:	3307      	adds	r3, #7
     e90:	f023 0307 	bic.w	r3, r3, #7
     e94:	f103 0208 	add.w	r2, r3, #8
     e98:	9203      	str	r2, [sp, #12]
     e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
     e9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
     ea2:	e681      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			value->ptr = va_arg(ap, void *);
     ea4:	9b03      	ldr	r3, [sp, #12]
     ea6:	1d1a      	adds	r2, r3, #4
     ea8:	9203      	str	r2, [sp, #12]
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	9306      	str	r3, [sp, #24]
     eae:	e67b      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			OUTS(sp, fp);
     eb0:	4643      	mov	r3, r8
     eb2:	4652      	mov	r2, sl
     eb4:	4629      	mov	r1, r5
     eb6:	4630      	mov	r0, r6
     eb8:	f006 f8a7 	bl	700a <outs>
     ebc:	2800      	cmp	r0, #0
     ebe:	f2c0 814f 	blt.w	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
     ec2:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     ec4:	46c2      	mov	sl, r8
			continue;
     ec6:	e46f      	b.n	7a8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
     ec8:	4629      	mov	r1, r5
     eca:	2025      	movs	r0, #37	; 0x25
     ecc:	47b0      	blx	r6
     ece:	2800      	cmp	r0, #0
     ed0:	f2c0 8146 	blt.w	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
     ed4:	3401      	adds	r4, #1
		char sign = 0;
     ed6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     eda:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     ede:	f04f 0a00 	mov.w	sl, #0
			break;
     ee2:	e0a7      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		case 's': {
			bps = (const char *)value->ptr;
     ee4:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
     ee8:	f1bb 0f00 	cmp.w	fp, #0
     eec:	db08      	blt.n	f00 <CONFIG_ISR_STACK_SIZE+0x700>
				len = strnlen(bps, precision);
     eee:	4659      	mov	r1, fp
     ef0:	4650      	mov	r0, sl
     ef2:	f006 fc89 	bl	7808 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     ef6:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
     efa:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
     efe:	e099      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
				len = strlen(bps);
     f00:	4650      	mov	r0, sl
     f02:	f006 fc79 	bl	77f8 <strlen>
     f06:	e7f6      	b.n	ef6 <CONFIG_ISR_STACK_SIZE+0x6f6>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f08:	9b06      	ldr	r3, [sp, #24]
     f0a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
     f0e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
     f12:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
     f16:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
     f1a:	e08b      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     f1c:	f019 0f08 	tst.w	r9, #8
     f20:	d105      	bne.n	f2e <CONFIG_ISR_STACK_SIZE+0x72e>
				sign = '+';
			} else if (conv->flag_space) {
     f22:	f019 0910 	ands.w	r9, r9, #16
     f26:	d004      	beq.n	f32 <CONFIG_ISR_STACK_SIZE+0x732>
				sign = ' ';
     f28:	f04f 0920 	mov.w	r9, #32
     f2c:	e001      	b.n	f32 <CONFIG_ISR_STACK_SIZE+0x732>
				sign = '+';
     f2e:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
     f36:	2a00      	cmp	r2, #0
     f38:	f173 0100 	sbcs.w	r1, r3, #0
     f3c:	db02      	blt.n	f44 <CONFIG_ISR_STACK_SIZE+0x744>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     f3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
     f42:	e009      	b.n	f58 <CONFIG_ISR_STACK_SIZE+0x758>
				value->uint = (uint_value_type)-sint;
     f44:	4252      	negs	r2, r2
     f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
     f4e:	f04f 092d 	mov.w	r9, #45	; 0x2d
     f52:	e001      	b.n	f58 <CONFIG_ISR_STACK_SIZE+0x758>
		switch (conv->specifier) {
     f54:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     f58:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     f5c:	9300      	str	r3, [sp, #0]
     f5e:	ab0c      	add	r3, sp, #48	; 0x30
     f60:	aa08      	add	r2, sp, #32
     f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     f66:	f005 ffe6 	bl	6f36 <encode_uint>
     f6a:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     f6c:	f1bb 0f00 	cmp.w	fp, #0
     f70:	f2c0 8090 	blt.w	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
				size_t len = bpe - bps;
     f74:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     f78:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     f7c:	f89d 2020 	ldrb.w	r2, [sp, #32]
     f80:	f36f 1286 	bfc	r2, #6, #1
     f84:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     f88:	459b      	cmp	fp, r3
     f8a:	f240 8086 	bls.w	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
					conv->pad0_value = precision - (int)len;
     f8e:	ebab 0303 	sub.w	r3, fp, r3
     f92:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
     f94:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f98:	e04c      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     f9a:	9806      	ldr	r0, [sp, #24]
     f9c:	b930      	cbnz	r0, fac <CONFIG_ISR_STACK_SIZE+0x7ac>
		char sign = 0;
     f9e:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     fa2:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
			bps = "(nil)";
     fa6:	f1ab 0a05 	sub.w	sl, fp, #5
     faa:	e043      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     fac:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     fb0:	9300      	str	r3, [sp, #0]
     fb2:	ab0c      	add	r3, sp, #48	; 0x30
     fb4:	aa08      	add	r2, sp, #32
     fb6:	2100      	movs	r1, #0
     fb8:	f005 ffbd 	bl	6f36 <encode_uint>
     fbc:	4682      	mov	sl, r0
				conv->altform_0c = true;
     fbe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     fc2:	f043 0310 	orr.w	r3, r3, #16
     fc6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
     fca:	2378      	movs	r3, #120	; 0x78
     fcc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
     fd0:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
     fd4:	e7ca      	b.n	f6c <CONFIG_ISR_STACK_SIZE+0x76c>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     fd6:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
     fd8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     fdc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     fe0:	2b07      	cmp	r3, #7
     fe2:	d806      	bhi.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
     fe4:	e8df f003 	tbb	[pc, r3]
     fe8:	100e0c04 	.word	0x100e0c04
     fec:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
     ff0:	6014      	str	r4, [r2, #0]
		char sign = 0;
     ff2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     ff6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     ffa:	f04f 0a00 	mov.w	sl, #0
}
     ffe:	e019      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		*(signed char *)dp = (signed char)count;
    1000:	7014      	strb	r4, [r2, #0]
		break;
    1002:	e7f6      	b.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
		*(short *)dp = (short)count;
    1004:	8014      	strh	r4, [r2, #0]
		break;
    1006:	e7f4      	b.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
		*(long *)dp = (long)count;
    1008:	6014      	str	r4, [r2, #0]
		break;
    100a:	e7f2      	b.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
		*(long long *)dp = (long long)count;
    100c:	4620      	mov	r0, r4
    100e:	17e1      	asrs	r1, r4, #31
    1010:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    1014:	e7ed      	b.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
		*(intmax_t *)dp = (intmax_t)count;
    1016:	4620      	mov	r0, r4
    1018:	17e1      	asrs	r1, r4, #31
    101a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    101e:	e7e8      	b.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
		*(size_t *)dp = (size_t)count;
    1020:	6014      	str	r4, [r2, #0]
		break;
    1022:	e7e6      	b.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1024:	6014      	str	r4, [r2, #0]
		break;
    1026:	e7e4      	b.n	ff2 <CONFIG_ISR_STACK_SIZE+0x7f2>
		switch (conv->specifier) {
    1028:	f8dd 9008 	ldr.w	r9, [sp, #8]
    102c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1030:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1034:	f1ba 0f00 	cmp.w	sl, #0
    1038:	f000 808e 	beq.w	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    103c:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    1040:	f1b9 0f00 	cmp.w	r9, #0
    1044:	d000      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
			nj_len += 1U;
    1046:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    1048:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    104c:	f011 0f10 	tst.w	r1, #16
    1050:	d026      	beq.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
			nj_len += 2U;
    1052:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1054:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1056:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1058:	f011 0f40 	tst.w	r1, #64	; 0x40
    105c:	d001      	beq.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
			nj_len += conv->pad0_pre_exp;
    105e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1060:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1062:	2f00      	cmp	r7, #0
    1064:	dd32      	ble.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
			width -= (int)nj_len;
    1066:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1068:	f89d 3020 	ldrb.w	r3, [sp, #32]
    106c:	f013 0f04 	tst.w	r3, #4
    1070:	d12c      	bne.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1072:	f013 0f40 	tst.w	r3, #64	; 0x40
    1076:	d018      	beq.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
					if (sign != 0) {
    1078:	f1b9 0f00 	cmp.w	r9, #0
    107c:	d018      	beq.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
						OUTC(sign);
    107e:	4629      	mov	r1, r5
    1080:	4648      	mov	r0, r9
    1082:	47b0      	blx	r6
    1084:	2800      	cmp	r0, #0
    1086:	db6b      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    1088:	3401      	adds	r4, #1
						sign = 0;
    108a:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    108e:	2330      	movs	r3, #48	; 0x30
    1090:	9302      	str	r3, [sp, #8]
    1092:	e00f      	b.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
		const char *bpe = buf + sizeof(buf);
    1094:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1098:	e7cc      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    109a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    109e:	e7c9      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		} else if (conv->altform_0) {
    10a0:	f011 0f08 	tst.w	r1, #8
    10a4:	d0d6      	beq.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
			nj_len += 1U;
    10a6:	3201      	adds	r2, #1
    10a8:	e7d4      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
				char pad = ' ';
    10aa:	2320      	movs	r3, #32
    10ac:	9302      	str	r3, [sp, #8]
    10ae:	e001      	b.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
					pad = '0';
    10b0:	2330      	movs	r3, #48	; 0x30
    10b2:	9302      	str	r3, [sp, #8]
    10b4:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    10b6:	1e5f      	subs	r7, r3, #1
    10b8:	2b00      	cmp	r3, #0
    10ba:	dd07      	ble.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
					OUTC(pad);
    10bc:	4629      	mov	r1, r5
    10be:	9802      	ldr	r0, [sp, #8]
    10c0:	47b0      	blx	r6
    10c2:	2800      	cmp	r0, #0
    10c4:	db4c      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    10c6:	3401      	adds	r4, #1
				while (width-- > 0) {
    10c8:	463b      	mov	r3, r7
    10ca:	e7f4      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    10cc:	f1b9 0f00 	cmp.w	r9, #0
    10d0:	d005      	beq.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
			OUTC(sign);
    10d2:	4629      	mov	r1, r5
    10d4:	4648      	mov	r0, r9
    10d6:	47b0      	blx	r6
    10d8:	2800      	cmp	r0, #0
    10da:	db41      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    10dc:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    10de:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10e2:	f3c3 1200 	ubfx	r2, r3, #4, #1
    10e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    10ea:	4313      	orrs	r3, r2
    10ec:	d005      	beq.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
				OUTC('0');
    10ee:	4629      	mov	r1, r5
    10f0:	2030      	movs	r0, #48	; 0x30
    10f2:	47b0      	blx	r6
    10f4:	2800      	cmp	r0, #0
    10f6:	db33      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    10f8:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    10fa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10fe:	f013 0f10 	tst.w	r3, #16
    1102:	d006      	beq.n	1112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
				OUTC(conv->specifier);
    1104:	4629      	mov	r1, r5
    1106:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    110a:	47b0      	blx	r6
    110c:	2800      	cmp	r0, #0
    110e:	db27      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    1110:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1112:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    1114:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    1118:	2b00      	cmp	r3, #0
    111a:	dd07      	ble.n	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
				OUTC('0');
    111c:	4629      	mov	r1, r5
    111e:	2030      	movs	r0, #48	; 0x30
    1120:	47b0      	blx	r6
    1122:	2800      	cmp	r0, #0
    1124:	db1c      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    1126:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1128:	464b      	mov	r3, r9
    112a:	e7f3      	b.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
			}

			OUTS(bps, bpe);
    112c:	465b      	mov	r3, fp
    112e:	4652      	mov	r2, sl
    1130:	4629      	mov	r1, r5
    1132:	4630      	mov	r0, r6
    1134:	f005 ff69 	bl	700a <outs>
    1138:	2800      	cmp	r0, #0
    113a:	db11      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    113c:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    113e:	2f00      	cmp	r7, #0
    1140:	dd07      	ble.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
			OUTC(' ');
    1142:	4629      	mov	r1, r5
    1144:	2020      	movs	r0, #32
    1146:	47b0      	blx	r6
    1148:	2800      	cmp	r0, #0
    114a:	db09      	blt.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    114c:	3401      	adds	r4, #1
			--width;
    114e:	3f01      	subs	r7, #1
    1150:	e7f5      	b.n	113e <CONFIG_FPROTECT_BLOCK_SIZE+0x13e>
		fp = extract_conversion(conv, sp);
    1152:	46c2      	mov	sl, r8
    1154:	f7ff bb28 	b.w	7a8 <cbvprintf+0x10>
    1158:	46c2      	mov	sl, r8
    115a:	f7ff bb25 	b.w	7a8 <cbvprintf+0x10>
		}
	}

	return count;
    115e:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1160:	b013      	add	sp, #76	; 0x4c
    1162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1166:	bf00      	nop
    1168:	00008a45 	.word	0x00008a45

0000116c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    116c:	b508      	push	{r3, lr}
    116e:	f04f 0220 	mov.w	r2, #32
    1172:	f3ef 8311 	mrs	r3, BASEPRI
    1176:	f382 8812 	msr	BASEPRI_MAX, r2
    117a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    117e:	f002 f88f 	bl	32a0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1182:	4803      	ldr	r0, [pc, #12]	; (1190 <sys_reboot+0x24>)
    1184:	f005 fd4b 	bl	6c1e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1188:	f001 f966 	bl	2458 <arch_cpu_idle>
    118c:	e7fc      	b.n	1188 <sys_reboot+0x1c>
    118e:	bf00      	nop
    1190:	00008a48 	.word	0x00008a48

00001194 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1194:	4b05      	ldr	r3, [pc, #20]	; (11ac <is_rodata+0x18>)
    1196:	4298      	cmp	r0, r3
    1198:	d304      	bcc.n	11a4 <is_rodata+0x10>
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <is_rodata+0x1c>)
    119c:	4298      	cmp	r0, r3
    119e:	d303      	bcc.n	11a8 <is_rodata+0x14>
    11a0:	2000      	movs	r0, #0
    11a2:	4770      	bx	lr
    11a4:	2000      	movs	r0, #0
    11a6:	4770      	bx	lr
    11a8:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    11aa:	4770      	bx	lr
    11ac:	000085dc 	.word	0x000085dc
    11b0:	00009498 	.word	0x00009498

000011b4 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    11b4:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    11b6:	4b06      	ldr	r3, [pc, #24]	; (11d0 <thread_set+0x1c>)
    11b8:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    11ba:	b118      	cbz	r0, 11c4 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    11bc:	4b05      	ldr	r3, [pc, #20]	; (11d4 <thread_set+0x20>)
    11be:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    11c0:	2b09      	cmp	r3, #9
    11c2:	dc00      	bgt.n	11c6 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    11c4:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    11c6:	4804      	ldr	r0, [pc, #16]	; (11d8 <thread_set+0x24>)
    11c8:	f004 fc7c 	bl	5ac4 <z_impl_k_sem_give>
}
    11cc:	e7fa      	b.n	11c4 <thread_set+0x10>
    11ce:	bf00      	nop
    11d0:	20000474 	.word	0x20000474
    11d4:	20000444 	.word	0x20000444
    11d8:	200001b8 	.word	0x200001b8

000011dc <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    11dc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    11de:	4802      	ldr	r0, [pc, #8]	; (11e8 <log_process_thread_timer_expiry_fn+0xc>)
    11e0:	f004 fc70 	bl	5ac4 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    11e4:	bd08      	pop	{r3, pc}
    11e6:	bf00      	nop
    11e8:	200001b8 	.word	0x200001b8

000011ec <next_pending>:
{
    11ec:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    11ee:	4803      	ldr	r0, [pc, #12]	; (11fc <next_pending+0x10>)
    11f0:	f005 ff34 	bl	705c <log_list_head_peek>
}
    11f4:	3800      	subs	r0, #0
    11f6:	bf18      	it	ne
    11f8:	2001      	movne	r0, #1
    11fa:	bd08      	pop	{r3, pc}
    11fc:	20000450 	.word	0x20000450

00001200 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1200:	b530      	push	{r4, r5, lr}
    1202:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1204:	2200      	movs	r2, #0
    1206:	490f      	ldr	r1, [pc, #60]	; (1244 <enable_logger+0x44>)
    1208:	480f      	ldr	r0, [pc, #60]	; (1248 <enable_logger+0x48>)
    120a:	f007 f9ba 	bl	8582 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    120e:	4d0f      	ldr	r5, [pc, #60]	; (124c <enable_logger+0x4c>)
    1210:	2200      	movs	r2, #0
    1212:	2300      	movs	r3, #0
    1214:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1218:	2400      	movs	r4, #0
    121a:	9404      	str	r4, [sp, #16]
    121c:	230e      	movs	r3, #14
    121e:	9303      	str	r3, [sp, #12]
    1220:	9402      	str	r4, [sp, #8]
    1222:	9401      	str	r4, [sp, #4]
    1224:	9400      	str	r4, [sp, #0]
    1226:	4b0a      	ldr	r3, [pc, #40]	; (1250 <enable_logger+0x50>)
    1228:	f44f 7240 	mov.w	r2, #768	; 0x300
    122c:	4909      	ldr	r1, [pc, #36]	; (1254 <enable_logger+0x54>)
    122e:	4628      	mov	r0, r5
    1230:	f006 ffa0 	bl	8174 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1234:	4908      	ldr	r1, [pc, #32]	; (1258 <enable_logger+0x58>)
    1236:	4628      	mov	r0, r5
    1238:	f004 fa88 	bl	574c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    123c:	4620      	mov	r0, r4
    123e:	b009      	add	sp, #36	; 0x24
    1240:	bd30      	pop	{r4, r5, pc}
    1242:	bf00      	nop
    1244:	000011dd 	.word	0x000011dd
    1248:	200001c8 	.word	0x200001c8
    124c:	20000200 	.word	0x20000200
    1250:	000018fd 	.word	0x000018fd
    1254:	200011a0 	.word	0x200011a0
    1258:	00008a74 	.word	0x00008a74

0000125c <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    125c:	4b18      	ldr	r3, [pc, #96]	; (12c0 <log_init+0x64>)
    125e:	f3bf 8f5b 	dmb	ish
    1262:	e853 2f00 	ldrex	r2, [r3]
    1266:	1c51      	adds	r1, r2, #1
    1268:	e843 1000 	strex	r0, r1, [r3]
    126c:	2800      	cmp	r0, #0
    126e:	d1f8      	bne.n	1262 <log_init+0x6>
    1270:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1274:	bb1a      	cbnz	r2, 12be <log_init+0x62>
{
    1276:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    1278:	2400      	movs	r4, #0
    127a:	e009      	b.n	1290 <log_init+0x34>
					   backend->cb->ctx,
    127c:	4b11      	ldr	r3, [pc, #68]	; (12c4 <log_init+0x68>)
    127e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    1282:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1284:	2204      	movs	r2, #4
    1286:	6819      	ldr	r1, [r3, #0]
    1288:	4628      	mov	r0, r5
    128a:	f000 fb7b 	bl	1984 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    128e:	3401      	adds	r4, #1
    1290:	4b0d      	ldr	r3, [pc, #52]	; (12c8 <log_init+0x6c>)
    1292:	4a0c      	ldr	r2, [pc, #48]	; (12c4 <log_init+0x68>)
    1294:	1a9b      	subs	r3, r3, r2
    1296:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    129a:	da0f      	bge.n	12bc <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    129c:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    129e:	4d09      	ldr	r5, [pc, #36]	; (12c4 <log_init+0x68>)
    12a0:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    12a4:	7b2b      	ldrb	r3, [r5, #12]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d0f1      	beq.n	128e <log_init+0x32>
			if (backend->api->init != NULL) {
    12aa:	0123      	lsls	r3, r4, #4
    12ac:	4a05      	ldr	r2, [pc, #20]	; (12c4 <log_init+0x68>)
    12ae:	58d3      	ldr	r3, [r2, r3]
    12b0:	699b      	ldr	r3, [r3, #24]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d0e2      	beq.n	127c <log_init+0x20>
				backend->api->init(backend);
    12b6:	4628      	mov	r0, r5
    12b8:	4798      	blx	r3
    12ba:	e7df      	b.n	127c <log_init+0x20>
}
    12bc:	bd70      	pop	{r4, r5, r6, pc}
    12be:	4770      	bx	lr
    12c0:	2000044c 	.word	0x2000044c
    12c4:	0000888c 	.word	0x0000888c
    12c8:	000088ac 	.word	0x000088ac

000012cc <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    12cc:	b138      	cbz	r0, 12de <log_set_timestamp_func+0x12>
{
    12ce:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    12d0:	4a04      	ldr	r2, [pc, #16]	; (12e4 <log_set_timestamp_func+0x18>)
    12d2:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    12d4:	4608      	mov	r0, r1
    12d6:	f000 fdcd 	bl	1e74 <log_output_timestamp_freq_set>
	return 0;
    12da:	2000      	movs	r0, #0
}
    12dc:	bd08      	pop	{r3, pc}
		return -EINVAL;
    12de:	f06f 0015 	mvn.w	r0, #21
}
    12e2:	4770      	bx	lr
    12e4:	20000004 	.word	0x20000004

000012e8 <log_core_init>:
{
    12e8:	b508      	push	{r3, lr}
	panic_mode = false;
    12ea:	2300      	movs	r3, #0
    12ec:	4a0a      	ldr	r2, [pc, #40]	; (1318 <log_core_init+0x30>)
    12ee:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    12f0:	4a0a      	ldr	r2, [pc, #40]	; (131c <log_core_init+0x34>)
    12f2:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    12f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    12f8:	4809      	ldr	r0, [pc, #36]	; (1320 <log_core_init+0x38>)
    12fa:	f7ff ffe7 	bl	12cc <log_set_timestamp_func>
		log_msg_pool_init();
    12fe:	f000 fb63 	bl	19c8 <log_msg_pool_init>
		log_list_init(&list);
    1302:	4808      	ldr	r0, [pc, #32]	; (1324 <log_core_init+0x3c>)
    1304:	f005 fe9c 	bl	7040 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1308:	2304      	movs	r3, #4
    130a:	2228      	movs	r2, #40	; 0x28
    130c:	4906      	ldr	r1, [pc, #24]	; (1328 <log_core_init+0x40>)
    130e:	4807      	ldr	r0, [pc, #28]	; (132c <log_core_init+0x44>)
    1310:	f006 fecd 	bl	80ae <k_mem_slab_init>
}
    1314:	bd08      	pop	{r3, pc}
    1316:	bf00      	nop
    1318:	20000fc5 	.word	0x20000fc5
    131c:	20000448 	.word	0x20000448
    1320:	00007075 	.word	0x00007075
    1324:	20000450 	.word	0x20000450
    1328:	20002260 	.word	0x20002260
    132c:	20000458 	.word	0x20000458

00001330 <get_msg>:
{
    1330:	b510      	push	{r4, lr}
    1332:	f04f 0320 	mov.w	r3, #32
    1336:	f3ef 8411 	mrs	r4, BASEPRI
    133a:	f383 8812 	msr	BASEPRI_MAX, r3
    133e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    1342:	4804      	ldr	r0, [pc, #16]	; (1354 <get_msg+0x24>)
    1344:	f005 fe8c 	bl	7060 <log_list_head_get>
	__asm__ volatile(
    1348:	f384 8811 	msr	BASEPRI, r4
    134c:	f3bf 8f6f 	isb	sy
}
    1350:	bd10      	pop	{r4, pc}
    1352:	bf00      	nop
    1354:	20000450 	.word	0x20000450

00001358 <z_log_notify_backend_enabled>:
{
    1358:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    135a:	4b05      	ldr	r3, [pc, #20]	; (1370 <z_log_notify_backend_enabled+0x18>)
    135c:	781b      	ldrb	r3, [r3, #0]
    135e:	b11b      	cbz	r3, 1368 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1360:	4b03      	ldr	r3, [pc, #12]	; (1370 <z_log_notify_backend_enabled+0x18>)
    1362:	2201      	movs	r2, #1
    1364:	701a      	strb	r2, [r3, #0]
}
    1366:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    1368:	4802      	ldr	r0, [pc, #8]	; (1374 <z_log_notify_backend_enabled+0x1c>)
    136a:	f004 fbab 	bl	5ac4 <z_impl_k_sem_give>
}
    136e:	e7f7      	b.n	1360 <z_log_notify_backend_enabled+0x8>
    1370:	20000fc4 	.word	0x20000fc4
    1374:	200001b8 	.word	0x200001b8

00001378 <z_log_dropped>:
    1378:	4b0c      	ldr	r3, [pc, #48]	; (13ac <z_log_dropped+0x34>)
    137a:	f3bf 8f5b 	dmb	ish
    137e:	e853 2f00 	ldrex	r2, [r3]
    1382:	3201      	adds	r2, #1
    1384:	e843 2100 	strex	r1, r2, [r3]
    1388:	2900      	cmp	r1, #0
    138a:	d1f8      	bne.n	137e <z_log_dropped+0x6>
    138c:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1390:	4b07      	ldr	r3, [pc, #28]	; (13b0 <z_log_dropped+0x38>)
    1392:	f3bf 8f5b 	dmb	ish
    1396:	e853 2f00 	ldrex	r2, [r3]
    139a:	3a01      	subs	r2, #1
    139c:	e843 2100 	strex	r1, r2, [r3]
    13a0:	2900      	cmp	r1, #0
    13a2:	d1f8      	bne.n	1396 <z_log_dropped+0x1e>
    13a4:	f3bf 8f5b 	dmb	ish
}
    13a8:	4770      	bx	lr
    13aa:	bf00      	nop
    13ac:	20000448 	.word	0x20000448
    13b0:	20000444 	.word	0x20000444

000013b4 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    13b4:	4b06      	ldr	r3, [pc, #24]	; (13d0 <z_log_dropped_read_and_clear+0x1c>)
}
    13b6:	2000      	movs	r0, #0
    13b8:	4602      	mov	r2, r0
    13ba:	f3bf 8f5b 	dmb	ish
    13be:	e853 0f00 	ldrex	r0, [r3]
    13c2:	e843 2100 	strex	r1, r2, [r3]
    13c6:	2900      	cmp	r1, #0
    13c8:	d1f9      	bne.n	13be <z_log_dropped_read_and_clear+0xa>
    13ca:	f3bf 8f5b 	dmb	ish
    13ce:	4770      	bx	lr
    13d0:	20000448 	.word	0x20000448

000013d4 <dropped_notify>:
{
    13d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    13d6:	f7ff ffed 	bl	13b4 <z_log_dropped_read_and_clear>
    13da:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    13dc:	2400      	movs	r4, #0
    13de:	e000      	b.n	13e2 <dropped_notify+0xe>
    13e0:	3401      	adds	r4, #1
    13e2:	4b0b      	ldr	r3, [pc, #44]	; (1410 <dropped_notify+0x3c>)
    13e4:	4a0b      	ldr	r2, [pc, #44]	; (1414 <dropped_notify+0x40>)
    13e6:	1a9b      	subs	r3, r3, r2
    13e8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    13ec:	da0f      	bge.n	140e <dropped_notify+0x3a>
    13ee:	4809      	ldr	r0, [pc, #36]	; (1414 <dropped_notify+0x40>)
    13f0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    13f4:	6843      	ldr	r3, [r0, #4]
    13f6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    13f8:	2b00      	cmp	r3, #0
    13fa:	d0f1      	beq.n	13e0 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    13fc:	0123      	lsls	r3, r4, #4
    13fe:	4a05      	ldr	r2, [pc, #20]	; (1414 <dropped_notify+0x40>)
    1400:	58d3      	ldr	r3, [r2, r3]
    1402:	691b      	ldr	r3, [r3, #16]
    1404:	2b00      	cmp	r3, #0
    1406:	d0eb      	beq.n	13e0 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1408:	4629      	mov	r1, r5
    140a:	4798      	blx	r3
    140c:	e7e8      	b.n	13e0 <dropped_notify+0xc>
}
    140e:	bd38      	pop	{r3, r4, r5, pc}
    1410:	000088ac 	.word	0x000088ac
    1414:	0000888c 	.word	0x0000888c

00001418 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1418:	4b03      	ldr	r3, [pc, #12]	; (1428 <z_log_dropped_pending+0x10>)
    141a:	6818      	ldr	r0, [r3, #0]
}
    141c:	2800      	cmp	r0, #0
    141e:	bfd4      	ite	le
    1420:	2000      	movle	r0, #0
    1422:	2001      	movgt	r0, #1
    1424:	4770      	bx	lr
    1426:	bf00      	nop
    1428:	20000448 	.word	0x20000448

0000142c <z_log_strdup>:
{
    142c:	b510      	push	{r4, lr}
    142e:	b082      	sub	sp, #8
    1430:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    1432:	f7ff feaf 	bl	1194 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1436:	bb10      	cbnz	r0, 147e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1438:	2200      	movs	r2, #0
    143a:	2300      	movs	r3, #0
    143c:	a901      	add	r1, sp, #4
    143e:	4811      	ldr	r0, [pc, #68]	; (1484 <z_log_strdup+0x58>)
    1440:	f004 f92e 	bl	56a0 <k_mem_slab_alloc>
	if (err != 0) {
    1444:	b108      	cbz	r0, 144a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    1446:	4c10      	ldr	r4, [pc, #64]	; (1488 <z_log_strdup+0x5c>)
    1448:	e019      	b.n	147e <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    144a:	9b01      	ldr	r3, [sp, #4]
    144c:	2201      	movs	r2, #1
    144e:	f3bf 8f5b 	dmb	ish
    1452:	e853 1f00 	ldrex	r1, [r3]
    1456:	e843 2000 	strex	r0, r2, [r3]
    145a:	2800      	cmp	r0, #0
    145c:	d1f9      	bne.n	1452 <z_log_strdup+0x26>
    145e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    1462:	221f      	movs	r2, #31
    1464:	4621      	mov	r1, r4
    1466:	9801      	ldr	r0, [sp, #4]
    1468:	3004      	adds	r0, #4
    146a:	f006 f9ab 	bl	77c4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    146e:	9c01      	ldr	r4, [sp, #4]
    1470:	237e      	movs	r3, #126	; 0x7e
    1472:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1476:	2300      	movs	r3, #0
    1478:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    147c:	3404      	adds	r4, #4
}
    147e:	4620      	mov	r0, r4
    1480:	b002      	add	sp, #8
    1482:	bd10      	pop	{r4, pc}
    1484:	20000458 	.word	0x20000458
    1488:	00008a7c 	.word	0x00008a7c

0000148c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    148c:	b138      	cbz	r0, 149e <log_is_strdup+0x12>
    148e:	4a07      	ldr	r2, [pc, #28]	; (14ac <log_is_strdup+0x20>)
    1490:	4290      	cmp	r0, r2
    1492:	d306      	bcc.n	14a2 <log_is_strdup+0x16>
    1494:	32a0      	adds	r2, #160	; 0xa0
    1496:	4290      	cmp	r0, r2
    1498:	d305      	bcc.n	14a6 <log_is_strdup+0x1a>
    149a:	2000      	movs	r0, #0
    149c:	4770      	bx	lr
    149e:	2000      	movs	r0, #0
    14a0:	4770      	bx	lr
    14a2:	2000      	movs	r0, #0
    14a4:	4770      	bx	lr
    14a6:	2001      	movs	r0, #1
}
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop
    14ac:	20002260 	.word	0x20002260

000014b0 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    14b0:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    14b2:	f013 0f01 	tst.w	r3, #1
    14b6:	d000      	beq.n	14ba <detect_missed_strdup+0xa>
    14b8:	4770      	bx	lr
{
    14ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14be:	b083      	sub	sp, #12
    14c0:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    14c2:	f005 fe93 	bl	71ec <log_msg_str_get>
    14c6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    14c8:	4630      	mov	r0, r6
    14ca:	f005 fe7a 	bl	71c2 <log_msg_nargs_get>
    14ce:	4601      	mov	r1, r0
    14d0:	4638      	mov	r0, r7
    14d2:	f005 fdd3 	bl	707c <z_log_get_s_mask>
    14d6:	4605      	mov	r5, r0
	while (mask) {
    14d8:	e004      	b.n	14e4 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    14da:	2301      	movs	r3, #1
    14dc:	fa03 f404 	lsl.w	r4, r3, r4
    14e0:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    14e4:	b36d      	cbz	r5, 1542 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    14e6:	fab5 f485 	clz	r4, r5
    14ea:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    14ee:	4621      	mov	r1, r4
    14f0:	4630      	mov	r0, r6
    14f2:	f005 fe69 	bl	71c8 <log_msg_arg_get>
    14f6:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    14f8:	f7ff fe4c 	bl	1194 <is_rodata>
    14fc:	2800      	cmp	r0, #0
    14fe:	d1ec      	bne.n	14da <detect_missed_strdup+0x2a>
    1500:	4648      	mov	r0, r9
    1502:	f7ff ffc3 	bl	148c <log_is_strdup>
    1506:	2800      	cmp	r0, #0
    1508:	d1e7      	bne.n	14da <detect_missed_strdup+0x2a>
    150a:	4b0f      	ldr	r3, [pc, #60]	; (1548 <detect_missed_strdup+0x98>)
    150c:	4599      	cmp	r9, r3
    150e:	d0e4      	beq.n	14da <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    1510:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    1512:	f3c1 1189 	ubfx	r1, r1, #6, #10
    1516:	f000 fa25 	bl	1964 <log_source_name_get>
    151a:	4602      	mov	r2, r0
    151c:	4b0b      	ldr	r3, [pc, #44]	; (154c <detect_missed_strdup+0x9c>)
    151e:	490c      	ldr	r1, [pc, #48]	; (1550 <detect_missed_strdup+0xa0>)
    1520:	1a5b      	subs	r3, r3, r1
    1522:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    1524:	2101      	movs	r1, #1
    1526:	f361 0802 	bfi	r8, r1, #0, #3
    152a:	f36f 08c5 	bfc	r8, #3, #3
    152e:	f363 188f 	bfi	r8, r3, #6, #10
    1532:	f8ad 8000 	strh.w	r8, [sp]
    1536:	463b      	mov	r3, r7
    1538:	4621      	mov	r1, r4
    153a:	4806      	ldr	r0, [pc, #24]	; (1554 <detect_missed_strdup+0xa4>)
    153c:	f000 f8b0 	bl	16a0 <log_3>
    1540:	e7cb      	b.n	14da <detect_missed_strdup+0x2a>
}
    1542:	b003      	add	sp, #12
    1544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1548:	00008a7c 	.word	0x00008a7c
    154c:	00008854 	.word	0x00008854
    1550:	0000883c 	.word	0x0000883c
    1554:	00008a98 	.word	0x00008a98

00001558 <msg_process>:
{
    1558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    155a:	4606      	mov	r6, r0
	if (!bypass) {
    155c:	bb19      	cbnz	r1, 15a6 <msg_process+0x4e>
		    !panic_mode) {
    155e:	4b14      	ldr	r3, [pc, #80]	; (15b0 <msg_process+0x58>)
    1560:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    1562:	b10b      	cbz	r3, 1568 <msg_process+0x10>
{
    1564:	2400      	movs	r4, #0
    1566:	e003      	b.n	1570 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    1568:	f7ff ffa2 	bl	14b0 <detect_missed_strdup>
    156c:	e7fa      	b.n	1564 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    156e:	3401      	adds	r4, #1
    1570:	4b10      	ldr	r3, [pc, #64]	; (15b4 <msg_process+0x5c>)
    1572:	4a11      	ldr	r2, [pc, #68]	; (15b8 <msg_process+0x60>)
    1574:	1a9b      	subs	r3, r3, r2
    1576:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    157a:	da14      	bge.n	15a6 <msg_process+0x4e>
	return &__log_backends_start[idx];
    157c:	4d0e      	ldr	r5, [pc, #56]	; (15b8 <msg_process+0x60>)
    157e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    1582:	686b      	ldr	r3, [r5, #4]
    1584:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    1586:	2b00      	cmp	r3, #0
    1588:	d0f1      	beq.n	156e <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    158a:	4631      	mov	r1, r6
    158c:	4628      	mov	r0, r5
    158e:	f005 fd6f 	bl	7070 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    1592:	2800      	cmp	r0, #0
    1594:	d0eb      	beq.n	156e <msg_process+0x16>
	backend->api->put(backend, msg);
    1596:	0127      	lsls	r7, r4, #4
    1598:	4b07      	ldr	r3, [pc, #28]	; (15b8 <msg_process+0x60>)
    159a:	59db      	ldr	r3, [r3, r7]
    159c:	685b      	ldr	r3, [r3, #4]
    159e:	4631      	mov	r1, r6
    15a0:	4628      	mov	r0, r5
    15a2:	4798      	blx	r3
}
    15a4:	e7e3      	b.n	156e <msg_process+0x16>
			log_msg_put(msg.msg);
    15a6:	4630      	mov	r0, r6
    15a8:	f005 fe22 	bl	71f0 <log_msg_put>
}
    15ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15ae:	bf00      	nop
    15b0:	20000fc5 	.word	0x20000fc5
    15b4:	000088ac 	.word	0x000088ac
    15b8:	0000888c 	.word	0x0000888c

000015bc <z_impl_log_process>:
{
    15bc:	b510      	push	{r4, lr}
    15be:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    15c0:	4b11      	ldr	r3, [pc, #68]	; (1608 <z_impl_log_process+0x4c>)
    15c2:	781b      	ldrb	r3, [r3, #0]
    15c4:	b903      	cbnz	r3, 15c8 <z_impl_log_process+0xc>
    15c6:	b1d0      	cbz	r0, 15fe <z_impl_log_process+0x42>
	msg = get_msg();
    15c8:	f7ff feb2 	bl	1330 <get_msg>
	if (msg.msg) {
    15cc:	4603      	mov	r3, r0
    15ce:	b180      	cbz	r0, 15f2 <z_impl_log_process+0x36>
		if (!bypass) {
    15d0:	b95c      	cbnz	r4, 15ea <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    15d2:	4a0e      	ldr	r2, [pc, #56]	; (160c <z_impl_log_process+0x50>)
    15d4:	f3bf 8f5b 	dmb	ish
    15d8:	e852 1f00 	ldrex	r1, [r2]
    15dc:	3901      	subs	r1, #1
    15de:	e842 1000 	strex	r0, r1, [r2]
    15e2:	2800      	cmp	r0, #0
    15e4:	d1f8      	bne.n	15d8 <z_impl_log_process+0x1c>
    15e6:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    15ea:	4621      	mov	r1, r4
    15ec:	4618      	mov	r0, r3
    15ee:	f7ff ffb3 	bl	1558 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    15f2:	b914      	cbnz	r4, 15fa <z_impl_log_process+0x3e>
    15f4:	f7ff ff10 	bl	1418 <z_log_dropped_pending>
    15f8:	b910      	cbnz	r0, 1600 <z_impl_log_process+0x44>
	return next_pending();
    15fa:	f7ff fdf7 	bl	11ec <next_pending>
}
    15fe:	bd10      	pop	{r4, pc}
		dropped_notify();
    1600:	f7ff fee8 	bl	13d4 <dropped_notify>
    1604:	e7f9      	b.n	15fa <z_impl_log_process+0x3e>
    1606:	bf00      	nop
    1608:	20000fc4 	.word	0x20000fc4
    160c:	20000444 	.word	0x20000444

00001610 <z_log_msg_post_finalize>:
{
    1610:	b510      	push	{r4, lr}
    1612:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1614:	4b1d      	ldr	r3, [pc, #116]	; (168c <z_log_msg_post_finalize+0x7c>)
    1616:	f3bf 8f5b 	dmb	ish
    161a:	e853 2f00 	ldrex	r2, [r3]
    161e:	1c51      	adds	r1, r2, #1
    1620:	e843 1000 	strex	r0, r1, [r3]
    1624:	2800      	cmp	r0, #0
    1626:	d1f8      	bne.n	161a <z_log_msg_post_finalize+0xa>
    1628:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    162c:	4b18      	ldr	r3, [pc, #96]	; (1690 <z_log_msg_post_finalize+0x80>)
    162e:	781b      	ldrb	r3, [r3, #0]
    1630:	b93b      	cbnz	r3, 1642 <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
    1632:	4b18      	ldr	r3, [pc, #96]	; (1694 <z_log_msg_post_finalize+0x84>)
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	b103      	cbz	r3, 163a <z_log_msg_post_finalize+0x2a>
    1638:	b19a      	cbz	r2, 1662 <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    163a:	2a0a      	cmp	r2, #10
    163c:	d01c      	beq.n	1678 <z_log_msg_post_finalize+0x68>
}
    163e:	b002      	add	sp, #8
    1640:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    1642:	f04f 0320 	mov.w	r3, #32
    1646:	f3ef 8411 	mrs	r4, BASEPRI
    164a:	f383 8812 	msr	BASEPRI_MAX, r3
    164e:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1652:	2000      	movs	r0, #0
    1654:	f7ff ffb2 	bl	15bc <z_impl_log_process>
	__asm__ volatile(
    1658:	f384 8811 	msr	BASEPRI, r4
    165c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1660:	e7ed      	b.n	163e <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
    1662:	2200      	movs	r2, #0
    1664:	2300      	movs	r3, #0
    1666:	e9cd 2300 	strd	r2, r3, [sp]
    166a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    166e:	2300      	movs	r3, #0
    1670:	4809      	ldr	r0, [pc, #36]	; (1698 <z_log_msg_post_finalize+0x88>)
    1672:	f005 f837 	bl	66e4 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    1676:	e7e2      	b.n	163e <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1678:	2b00      	cmp	r3, #0
    167a:	d0e0      	beq.n	163e <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
    167c:	4806      	ldr	r0, [pc, #24]	; (1698 <z_log_msg_post_finalize+0x88>)
    167e:	f006 ff8c 	bl	859a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1682:	4806      	ldr	r0, [pc, #24]	; (169c <z_log_msg_post_finalize+0x8c>)
    1684:	f004 fa1e 	bl	5ac4 <z_impl_k_sem_give>
}
    1688:	e7d9      	b.n	163e <z_log_msg_post_finalize+0x2e>
    168a:	bf00      	nop
    168c:	20000444 	.word	0x20000444
    1690:	20000fc5 	.word	0x20000fc5
    1694:	20000474 	.word	0x20000474
    1698:	200001c8 	.word	0x200001c8
    169c:	200001b8 	.word	0x200001b8

000016a0 <log_3>:
{
    16a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16a4:	4680      	mov	r8, r0
    16a6:	460f      	mov	r7, r1
    16a8:	4616      	mov	r6, r2
    16aa:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    16ac:	f000 f9b0 	bl	1a10 <log_msg_chunk_alloc>

	if (msg != NULL) {
    16b0:	4604      	mov	r4, r0
    16b2:	b140      	cbz	r0, 16c6 <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    16b4:	2301      	movs	r3, #1
    16b6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    16b8:	2200      	movs	r2, #0
    16ba:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    16bc:	f04f 0300 	mov.w	r3, #0
    16c0:	f362 0300 	bfi	r3, r2, #0, #1
    16c4:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    16c6:	b14c      	cbz	r4, 16dc <log_3+0x3c>
		msg->str = str;
    16c8:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    16cc:	7a63      	ldrb	r3, [r4, #9]
    16ce:	2203      	movs	r2, #3
    16d0:	f362 1307 	bfi	r3, r2, #4, #4
    16d4:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    16d6:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    16d8:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    16da:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    16dc:	b1c4      	cbz	r4, 1710 <log_3+0x70>
	msg->hdr.ids = src_level;
    16de:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    16e2:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    16e4:	4b0b      	ldr	r3, [pc, #44]	; (1714 <log_3+0x74>)
    16e6:	681b      	ldr	r3, [r3, #0]
    16e8:	4798      	blx	r3
    16ea:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    16ec:	f04f 0320 	mov.w	r3, #32
    16f0:	f3ef 8511 	mrs	r5, BASEPRI
    16f4:	f383 8812 	msr	BASEPRI_MAX, r3
    16f8:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    16fc:	4621      	mov	r1, r4
    16fe:	4806      	ldr	r0, [pc, #24]	; (1718 <log_3+0x78>)
    1700:	f005 fca2 	bl	7048 <log_list_add_tail>
	__asm__ volatile(
    1704:	f385 8811 	msr	BASEPRI, r5
    1708:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    170c:	f7ff ff80 	bl	1610 <z_log_msg_post_finalize>
}
    1710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1714:	20000004 	.word	0x20000004
    1718:	20000450 	.word	0x20000450

0000171c <log_1>:
{
    171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    171e:	4606      	mov	r6, r0
    1720:	460d      	mov	r5, r1
    1722:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1724:	f000 f974 	bl	1a10 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1728:	4604      	mov	r4, r0
    172a:	b140      	cbz	r0, 173e <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    172c:	2301      	movs	r3, #1
    172e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1730:	2100      	movs	r1, #0
    1732:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1734:	f04f 0300 	mov.w	r3, #0
    1738:	f361 0300 	bfi	r3, r1, #0, #1
    173c:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    173e:	b134      	cbz	r4, 174e <log_1+0x32>
		msg->str = str;
    1740:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    1742:	7a63      	ldrb	r3, [r4, #9]
    1744:	2201      	movs	r2, #1
    1746:	f362 1307 	bfi	r3, r2, #4, #4
    174a:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    174c:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    174e:	b1b4      	cbz	r4, 177e <log_1+0x62>
	msg->hdr.ids = src_level;
    1750:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1752:	4b0b      	ldr	r3, [pc, #44]	; (1780 <log_1+0x64>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	4798      	blx	r3
    1758:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    175a:	f04f 0320 	mov.w	r3, #32
    175e:	f3ef 8511 	mrs	r5, BASEPRI
    1762:	f383 8812 	msr	BASEPRI_MAX, r3
    1766:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    176a:	4621      	mov	r1, r4
    176c:	4805      	ldr	r0, [pc, #20]	; (1784 <log_1+0x68>)
    176e:	f005 fc6b 	bl	7048 <log_list_add_tail>
	__asm__ volatile(
    1772:	f385 8811 	msr	BASEPRI, r5
    1776:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    177a:	f7ff ff49 	bl	1610 <z_log_msg_post_finalize>
}
    177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1780:	20000004 	.word	0x20000004
    1784:	20000450 	.word	0x20000450

00001788 <log_2>:
{
    1788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    178c:	4607      	mov	r7, r0
    178e:	460e      	mov	r6, r1
    1790:	4615      	mov	r5, r2
    1792:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1794:	f000 f93c 	bl	1a10 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1798:	4604      	mov	r4, r0
    179a:	b140      	cbz	r0, 17ae <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    179c:	2301      	movs	r3, #1
    179e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    17a0:	2200      	movs	r2, #0
    17a2:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    17a4:	f04f 0300 	mov.w	r3, #0
    17a8:	f362 0300 	bfi	r3, r2, #0, #1
    17ac:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    17ae:	b13c      	cbz	r4, 17c0 <log_2+0x38>
		msg->str = str;
    17b0:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    17b2:	7a63      	ldrb	r3, [r4, #9]
    17b4:	2202      	movs	r2, #2
    17b6:	f362 1307 	bfi	r3, r2, #4, #4
    17ba:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    17bc:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    17be:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    17c0:	b1bc      	cbz	r4, 17f2 <log_2+0x6a>
	msg->hdr.ids = src_level;
    17c2:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    17c6:	4b0c      	ldr	r3, [pc, #48]	; (17f8 <log_2+0x70>)
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	4798      	blx	r3
    17cc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    17ce:	f04f 0320 	mov.w	r3, #32
    17d2:	f3ef 8511 	mrs	r5, BASEPRI
    17d6:	f383 8812 	msr	BASEPRI_MAX, r3
    17da:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    17de:	4621      	mov	r1, r4
    17e0:	4806      	ldr	r0, [pc, #24]	; (17fc <log_2+0x74>)
    17e2:	f005 fc31 	bl	7048 <log_list_add_tail>
	__asm__ volatile(
    17e6:	f385 8811 	msr	BASEPRI, r5
    17ea:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    17ee:	f7ff ff0f 	bl	1610 <z_log_msg_post_finalize>
}
    17f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17f6:	bf00      	nop
    17f8:	20000004 	.word	0x20000004
    17fc:	20000450 	.word	0x20000450

00001800 <log_hexdump>:
{
    1800:	b538      	push	{r3, r4, r5, lr}
    1802:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
    1804:	f005 fd07 	bl	7216 <log_msg_hexdump_create>
		if (msg == NULL) {
    1808:	b1b8      	cbz	r0, 183a <log_hexdump+0x3a>
    180a:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    180c:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    180e:	4b0b      	ldr	r3, [pc, #44]	; (183c <log_hexdump+0x3c>)
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	4798      	blx	r3
    1814:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    1816:	f04f 0320 	mov.w	r3, #32
    181a:	f3ef 8411 	mrs	r4, BASEPRI
    181e:	f383 8812 	msr	BASEPRI_MAX, r3
    1822:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1826:	4629      	mov	r1, r5
    1828:	4805      	ldr	r0, [pc, #20]	; (1840 <log_hexdump+0x40>)
    182a:	f005 fc0d 	bl	7048 <log_list_add_tail>
	__asm__ volatile(
    182e:	f384 8811 	msr	BASEPRI, r4
    1832:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1836:	f7ff feeb 	bl	1610 <z_log_msg_post_finalize>
}
    183a:	bd38      	pop	{r3, r4, r5, pc}
    183c:	20000004 	.word	0x20000004
    1840:	20000450 	.word	0x20000450

00001844 <log_0>:
{
    1844:	b570      	push	{r4, r5, r6, lr}
    1846:	4605      	mov	r5, r0
    1848:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    184a:	f000 f8e1 	bl	1a10 <log_msg_chunk_alloc>
	if (msg != NULL) {
    184e:	4604      	mov	r4, r0
    1850:	b140      	cbz	r0, 1864 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    1852:	2301      	movs	r3, #1
    1854:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1856:	2200      	movs	r2, #0
    1858:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    185a:	f04f 0300 	mov.w	r3, #0
    185e:	f362 0300 	bfi	r3, r2, #0, #1
    1862:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1864:	b104      	cbz	r4, 1868 <log_0+0x24>
		msg->str = str;
    1866:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    1868:	b1b4      	cbz	r4, 1898 <log_0+0x54>
	msg->hdr.ids = src_level;
    186a:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    186c:	4b0b      	ldr	r3, [pc, #44]	; (189c <log_0+0x58>)
    186e:	681b      	ldr	r3, [r3, #0]
    1870:	4798      	blx	r3
    1872:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1874:	f04f 0320 	mov.w	r3, #32
    1878:	f3ef 8511 	mrs	r5, BASEPRI
    187c:	f383 8812 	msr	BASEPRI_MAX, r3
    1880:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1884:	4621      	mov	r1, r4
    1886:	4806      	ldr	r0, [pc, #24]	; (18a0 <log_0+0x5c>)
    1888:	f005 fbde 	bl	7048 <log_list_add_tail>
	__asm__ volatile(
    188c:	f385 8811 	msr	BASEPRI, r5
    1890:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1894:	f7ff febc 	bl	1610 <z_log_msg_post_finalize>
}
    1898:	bd70      	pop	{r4, r5, r6, pc}
    189a:	bf00      	nop
    189c:	20000004 	.word	0x20000004
    18a0:	20000450 	.word	0x20000450

000018a4 <z_impl_log_panic>:
	if (panic_mode) {
    18a4:	4b12      	ldr	r3, [pc, #72]	; (18f0 <z_impl_log_panic+0x4c>)
    18a6:	781b      	ldrb	r3, [r3, #0]
    18a8:	b103      	cbz	r3, 18ac <z_impl_log_panic+0x8>
    18aa:	4770      	bx	lr
{
    18ac:	b510      	push	{r4, lr}
	log_init();
    18ae:	f7ff fcd5 	bl	125c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    18b2:	2400      	movs	r4, #0
    18b4:	e000      	b.n	18b8 <z_impl_log_panic+0x14>
    18b6:	3401      	adds	r4, #1
    18b8:	4b0e      	ldr	r3, [pc, #56]	; (18f4 <z_impl_log_panic+0x50>)
    18ba:	4a0f      	ldr	r2, [pc, #60]	; (18f8 <z_impl_log_panic+0x54>)
    18bc:	1a9b      	subs	r3, r3, r2
    18be:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    18c2:	da0c      	bge.n	18de <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    18c4:	480c      	ldr	r0, [pc, #48]	; (18f8 <z_impl_log_panic+0x54>)
    18c6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    18ca:	6843      	ldr	r3, [r0, #4]
    18cc:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    18ce:	2b00      	cmp	r3, #0
    18d0:	d0f1      	beq.n	18b6 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    18d2:	0123      	lsls	r3, r4, #4
    18d4:	4a08      	ldr	r2, [pc, #32]	; (18f8 <z_impl_log_panic+0x54>)
    18d6:	58d3      	ldr	r3, [r2, r3]
    18d8:	695b      	ldr	r3, [r3, #20]
    18da:	4798      	blx	r3
}
    18dc:	e7eb      	b.n	18b6 <z_impl_log_panic+0x12>
    18de:	2000      	movs	r0, #0
    18e0:	f7ff fe6c 	bl	15bc <z_impl_log_process>
		while (log_process(false) == true) {
    18e4:	2800      	cmp	r0, #0
    18e6:	d1fa      	bne.n	18de <z_impl_log_panic+0x3a>
	panic_mode = true;
    18e8:	4b01      	ldr	r3, [pc, #4]	; (18f0 <z_impl_log_panic+0x4c>)
    18ea:	2201      	movs	r2, #1
    18ec:	701a      	strb	r2, [r3, #0]
}
    18ee:	bd10      	pop	{r4, pc}
    18f0:	20000fc5 	.word	0x20000fc5
    18f4:	000088ac 	.word	0x000088ac
    18f8:	0000888c 	.word	0x0000888c

000018fc <log_process_thread_func>:
{
    18fc:	b508      	push	{r3, lr}
	log_init();
    18fe:	f7ff fcad 	bl	125c <log_init>
	return z_impl_z_current_get();
    1902:	f004 fce9 	bl	62d8 <z_impl_z_current_get>
	thread_set(k_current_get());
    1906:	f7ff fc55 	bl	11b4 <thread_set>
    190a:	e006      	b.n	191a <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    190c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1914:	4804      	ldr	r0, [pc, #16]	; (1928 <log_process_thread_func+0x2c>)
    1916:	f004 f8f9 	bl	5b0c <z_impl_k_sem_take>
    191a:	2000      	movs	r0, #0
    191c:	f7ff fe4e 	bl	15bc <z_impl_log_process>
		if (log_process(false) == false) {
    1920:	2800      	cmp	r0, #0
    1922:	d1fa      	bne.n	191a <log_process_thread_func+0x1e>
    1924:	e7f2      	b.n	190c <log_process_thread_func+0x10>
    1926:	bf00      	nop
    1928:	200001b8 	.word	0x200001b8

0000192c <z_log_free>:
{
    192c:	b500      	push	{lr}
    192e:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1930:	3804      	subs	r0, #4
    1932:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1934:	f3bf 8f5b 	dmb	ish
    1938:	e850 3f00 	ldrex	r3, [r0]
    193c:	1e5a      	subs	r2, r3, #1
    193e:	e840 2100 	strex	r1, r2, [r0]
    1942:	2900      	cmp	r1, #0
    1944:	d1f8      	bne.n	1938 <z_log_free+0xc>
    1946:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    194a:	2b01      	cmp	r3, #1
    194c:	d002      	beq.n	1954 <z_log_free+0x28>
}
    194e:	b003      	add	sp, #12
    1950:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1954:	a901      	add	r1, sp, #4
    1956:	4802      	ldr	r0, [pc, #8]	; (1960 <z_log_free+0x34>)
    1958:	f006 fbb7 	bl	80ca <k_mem_slab_free>
}
    195c:	e7f7      	b.n	194e <z_log_free+0x22>
    195e:	bf00      	nop
    1960:	20000458 	.word	0x20000458

00001964 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1964:	4b05      	ldr	r3, [pc, #20]	; (197c <log_source_name_get+0x18>)
    1966:	4a06      	ldr	r2, [pc, #24]	; (1980 <log_source_name_get+0x1c>)
    1968:	1a9b      	subs	r3, r3, r2
    196a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    196e:	d202      	bcs.n	1976 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1970:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1974:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1976:	2000      	movs	r0, #0
}
    1978:	4770      	bx	lr
    197a:	bf00      	nop
    197c:	0000888c 	.word	0x0000888c
    1980:	0000883c 	.word	0x0000883c

00001984 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1984:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1986:	4b07      	ldr	r3, [pc, #28]	; (19a4 <log_backend_enable+0x20>)
    1988:	1ac3      	subs	r3, r0, r3
    198a:	111b      	asrs	r3, r3, #4
    198c:	3301      	adds	r3, #1
	backend->cb->id = id;
    198e:	6842      	ldr	r2, [r0, #4]
    1990:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1992:	6843      	ldr	r3, [r0, #4]
    1994:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1996:	6843      	ldr	r3, [r0, #4]
    1998:	2201      	movs	r2, #1
    199a:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    199c:	f7ff fcdc 	bl	1358 <z_log_notify_backend_enabled>
}
    19a0:	bd08      	pop	{r3, pc}
    19a2:	bf00      	nop
    19a4:	0000888c 	.word	0x0000888c

000019a8 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    19a8:	b510      	push	{r4, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    19ae:	9b01      	ldr	r3, [sp, #4]
    19b0:	b133      	cbz	r3, 19c0 <cont_free+0x18>
		next = cont->next;
    19b2:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    19b4:	a901      	add	r1, sp, #4
    19b6:	4803      	ldr	r0, [pc, #12]	; (19c4 <cont_free+0x1c>)
    19b8:	f006 fb87 	bl	80ca <k_mem_slab_free>
		cont = next;
    19bc:	9401      	str	r4, [sp, #4]
    19be:	e7f6      	b.n	19ae <cont_free+0x6>
	}
}
    19c0:	b002      	add	sp, #8
    19c2:	bd10      	pop	{r4, pc}
    19c4:	20000478 	.word	0x20000478

000019c8 <log_msg_pool_init>:
{
    19c8:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    19ca:	2320      	movs	r3, #32
    19cc:	461a      	mov	r2, r3
    19ce:	4902      	ldr	r1, [pc, #8]	; (19d8 <log_msg_pool_init+0x10>)
    19d0:	4802      	ldr	r0, [pc, #8]	; (19dc <log_msg_pool_init+0x14>)
    19d2:	f006 fb6c 	bl	80ae <k_mem_slab_init>
}
    19d6:	bd08      	pop	{r3, pc}
    19d8:	20002300 	.word	0x20002300
    19dc:	20000478 	.word	0x20000478

000019e0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    19e0:	b510      	push	{r4, lr}
    19e2:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    19e4:	2300      	movs	r3, #0
    19e6:	9301      	str	r3, [sp, #4]
    19e8:	2001      	movs	r0, #1
    19ea:	f7ff fde7 	bl	15bc <z_impl_log_process>
    19ee:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    19f0:	f7ff fcc2 	bl	1378 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    19f4:	2200      	movs	r2, #0
    19f6:	2300      	movs	r3, #0
    19f8:	a901      	add	r1, sp, #4
    19fa:	4804      	ldr	r0, [pc, #16]	; (1a0c <log_msg_no_space_handle+0x2c>)
    19fc:	f003 fe50 	bl	56a0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1a00:	b108      	cbz	r0, 1a06 <log_msg_no_space_handle+0x26>
    1a02:	2c00      	cmp	r4, #0
    1a04:	d1f0      	bne.n	19e8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    1a06:	9801      	ldr	r0, [sp, #4]
    1a08:	b002      	add	sp, #8
    1a0a:	bd10      	pop	{r4, pc}
    1a0c:	20000478 	.word	0x20000478

00001a10 <log_msg_chunk_alloc>:
{
    1a10:	b500      	push	{lr}
    1a12:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    1a14:	2300      	movs	r3, #0
    1a16:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    1a18:	f005 fb53 	bl	70c2 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1a1c:	b150      	cbz	r0, 1a34 <log_msg_chunk_alloc+0x24>
    1a1e:	2200      	movs	r2, #0
    1a20:	2300      	movs	r3, #0
    1a22:	a901      	add	r1, sp, #4
    1a24:	4807      	ldr	r0, [pc, #28]	; (1a44 <log_msg_chunk_alloc+0x34>)
    1a26:	f003 fe3b 	bl	56a0 <k_mem_slab_alloc>
	if (err != 0) {
    1a2a:	b930      	cbnz	r0, 1a3a <log_msg_chunk_alloc+0x2a>
}
    1a2c:	9801      	ldr	r0, [sp, #4]
    1a2e:	b003      	add	sp, #12
    1a30:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1a34:	2200      	movs	r2, #0
    1a36:	2300      	movs	r3, #0
    1a38:	e7f3      	b.n	1a22 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    1a3a:	f7ff ffd1 	bl	19e0 <log_msg_no_space_handle>
    1a3e:	9001      	str	r0, [sp, #4]
    1a40:	e7f4      	b.n	1a2c <log_msg_chunk_alloc+0x1c>
    1a42:	bf00      	nop
    1a44:	20000478 	.word	0x20000478

00001a48 <msg_free>:
{
    1a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a4a:	b083      	sub	sp, #12
    1a4c:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    1a4e:	4604      	mov	r4, r0
    1a50:	f005 fbb7 	bl	71c2 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1a54:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    1a56:	f013 0f01 	tst.w	r3, #1
    1a5a:	d101      	bne.n	1a60 <msg_free+0x18>
    1a5c:	4606      	mov	r6, r0
    1a5e:	bb50      	cbnz	r0, 1ab6 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    1a60:	9b01      	ldr	r3, [sp, #4]
    1a62:	7a1a      	ldrb	r2, [r3, #8]
    1a64:	f012 0f02 	tst.w	r2, #2
    1a68:	d128      	bne.n	1abc <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1a6a:	a901      	add	r1, sp, #4
    1a6c:	4815      	ldr	r0, [pc, #84]	; (1ac4 <msg_free+0x7c>)
    1a6e:	f006 fb2c 	bl	80ca <k_mem_slab_free>
}
    1a72:	b003      	add	sp, #12
    1a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    1a76:	9801      	ldr	r0, [sp, #4]
    1a78:	f005 fbb8 	bl	71ec <log_msg_str_get>
    1a7c:	4631      	mov	r1, r6
    1a7e:	f005 fafd 	bl	707c <z_log_get_s_mask>
					if (smask == 0U) {
    1a82:	4607      	mov	r7, r0
    1a84:	b988      	cbnz	r0, 1aaa <msg_free+0x62>
    1a86:	e7eb      	b.n	1a60 <msg_free+0x18>
					z_log_free(buf);
    1a88:	4628      	mov	r0, r5
    1a8a:	f7ff ff4f 	bl	192c <z_log_free>
		for (i = 0U; i < nargs; i++) {
    1a8e:	3401      	adds	r4, #1
    1a90:	42b4      	cmp	r4, r6
    1a92:	d2e5      	bcs.n	1a60 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    1a94:	4621      	mov	r1, r4
    1a96:	9801      	ldr	r0, [sp, #4]
    1a98:	f005 fb96 	bl	71c8 <log_msg_arg_get>
    1a9c:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    1a9e:	f7ff fcf5 	bl	148c <log_is_strdup>
    1aa2:	2800      	cmp	r0, #0
    1aa4:	d0f3      	beq.n	1a8e <msg_free+0x46>
				if (smask == 0U) {
    1aa6:	2f00      	cmp	r7, #0
    1aa8:	d0e5      	beq.n	1a76 <msg_free+0x2e>
				if (smask & BIT(i)) {
    1aaa:	fa27 f304 	lsr.w	r3, r7, r4
    1aae:	f013 0f01 	tst.w	r3, #1
    1ab2:	d0ec      	beq.n	1a8e <msg_free+0x46>
    1ab4:	e7e8      	b.n	1a88 <msg_free+0x40>
		uint32_t smask = 0U;
    1ab6:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    1ab8:	463c      	mov	r4, r7
    1aba:	e7e9      	b.n	1a90 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    1abc:	6958      	ldr	r0, [r3, #20]
    1abe:	f7ff ff73 	bl	19a8 <cont_free>
    1ac2:	e7d2      	b.n	1a6a <msg_free+0x22>
    1ac4:	20000478 	.word	0x20000478

00001ac8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1ac8:	b40e      	push	{r1, r2, r3}
    1aca:	b500      	push	{lr}
    1acc:	b082      	sub	sp, #8
    1ace:	4601      	mov	r1, r0
    1ad0:	ab03      	add	r3, sp, #12
    1ad2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1ad6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ad8:	4803      	ldr	r0, [pc, #12]	; (1ae8 <print_formatted+0x20>)
    1ada:	f7fe fe5d 	bl	798 <cbvprintf>
	va_end(args);

	return length;
}
    1ade:	b002      	add	sp, #8
    1ae0:	f85d eb04 	ldr.w	lr, [sp], #4
    1ae4:	b003      	add	sp, #12
    1ae6:	4770      	bx	lr
    1ae8:	000075f1 	.word	0x000075f1

00001aec <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    1aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aee:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1af0:	f011 0f44 	tst.w	r1, #68	; 0x44
    1af4:	d005      	beq.n	1b02 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1af6:	4b1a      	ldr	r3, [pc, #104]	; (1b60 <timestamp_print+0x74>)
    1af8:	681c      	ldr	r4, [r3, #0]
    1afa:	b934      	cbnz	r4, 1b0a <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1afc:	2000      	movs	r0, #0
	}

	return length;
}
    1afe:	b005      	add	sp, #20
    1b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1b02:	4918      	ldr	r1, [pc, #96]	; (1b64 <timestamp_print+0x78>)
    1b04:	f7ff ffe0 	bl	1ac8 <print_formatted>
    1b08:	e7f9      	b.n	1afe <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1b0a:	4b17      	ldr	r3, [pc, #92]	; (1b68 <timestamp_print+0x7c>)
    1b0c:	6819      	ldr	r1, [r3, #0]
    1b0e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1b12:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    1b16:	4a15      	ldr	r2, [pc, #84]	; (1b6c <timestamp_print+0x80>)
    1b18:	fba2 3205 	umull	r3, r2, r2, r5
    1b1c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1b1e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1b22:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    1b26:	4b12      	ldr	r3, [pc, #72]	; (1b70 <timestamp_print+0x84>)
    1b28:	fba3 7306 	umull	r7, r3, r3, r6
    1b2c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1b2e:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    1b32:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1b36:	fb05 f101 	mul.w	r1, r5, r1
    1b3a:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1b3e:	fb07 1114 	mls	r1, r7, r4, r1
    1b42:	fb05 f101 	mul.w	r1, r5, r1
    1b46:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    1b4a:	9402      	str	r4, [sp, #8]
    1b4c:	9701      	str	r7, [sp, #4]
    1b4e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1b52:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    1b56:	9100      	str	r1, [sp, #0]
    1b58:	4906      	ldr	r1, [pc, #24]	; (1b74 <timestamp_print+0x88>)
    1b5a:	f7ff ffb5 	bl	1ac8 <print_formatted>
    1b5e:	e7ce      	b.n	1afe <timestamp_print+0x12>
    1b60:	20000494 	.word	0x20000494
    1b64:	00008adc 	.word	0x00008adc
    1b68:	20000498 	.word	0x20000498
    1b6c:	91a2b3c5 	.word	0x91a2b3c5
    1b70:	88888889 	.word	0x88888889
    1b74:	00008ae8 	.word	0x00008ae8

00001b78 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1b78:	b161      	cbz	r1, 1b94 <color_print+0x1c>
{
    1b7a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1b7c:	b12a      	cbz	r2, 1b8a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1b7e:	4a06      	ldr	r2, [pc, #24]	; (1b98 <color_print+0x20>)
    1b80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1b84:	b912      	cbnz	r2, 1b8c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1b86:	4a05      	ldr	r2, [pc, #20]	; (1b9c <color_print+0x24>)
    1b88:	e000      	b.n	1b8c <color_print+0x14>
    1b8a:	4a04      	ldr	r2, [pc, #16]	; (1b9c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1b8c:	4904      	ldr	r1, [pc, #16]	; (1ba0 <color_print+0x28>)
    1b8e:	f7ff ff9b 	bl	1ac8 <print_formatted>
	}
}
    1b92:	bd08      	pop	{r3, pc}
    1b94:	4770      	bx	lr
    1b96:	bf00      	nop
    1b98:	00008b64 	.word	0x00008b64
    1b9c:	00008b04 	.word	0x00008b04
    1ba0:	00008b0c 	.word	0x00008b0c

00001ba4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1ba4:	f011 0f10 	tst.w	r1, #16
    1ba8:	d10b      	bne.n	1bc2 <newline_print+0x1e>
{
    1baa:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1bac:	f011 0f20 	tst.w	r1, #32
    1bb0:	d003      	beq.n	1bba <newline_print+0x16>
		print_formatted(ctx, "\n");
    1bb2:	4904      	ldr	r1, [pc, #16]	; (1bc4 <newline_print+0x20>)
    1bb4:	f7ff ff88 	bl	1ac8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1bb8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1bba:	4903      	ldr	r1, [pc, #12]	; (1bc8 <newline_print+0x24>)
    1bbc:	f7ff ff84 	bl	1ac8 <print_formatted>
    1bc0:	e7fa      	b.n	1bb8 <newline_print+0x14>
    1bc2:	4770      	bx	lr
    1bc4:	00009104 	.word	0x00009104
    1bc8:	00009474 	.word	0x00009474

00001bcc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bd0:	4605      	mov	r5, r0
    1bd2:	460f      	mov	r7, r1
    1bd4:	4616      	mov	r6, r2
    1bd6:	4698      	mov	r8, r3
	newline_print(output, flags);
    1bd8:	9906      	ldr	r1, [sp, #24]
    1bda:	f7ff ffe3 	bl	1ba4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1bde:	2400      	movs	r4, #0
    1be0:	4544      	cmp	r4, r8
    1be2:	da05      	bge.n	1bf0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    1be4:	4923      	ldr	r1, [pc, #140]	; (1c74 <hexdump_line_print+0xa8>)
    1be6:	4628      	mov	r0, r5
    1be8:	f7ff ff6e 	bl	1ac8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1bec:	3401      	adds	r4, #1
    1bee:	e7f7      	b.n	1be0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1bf0:	2400      	movs	r4, #0
    1bf2:	e009      	b.n	1c08 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1bf4:	491f      	ldr	r1, [pc, #124]	; (1c74 <hexdump_line_print+0xa8>)
    1bf6:	4628      	mov	r0, r5
    1bf8:	f7ff ff66 	bl	1ac8 <print_formatted>
    1bfc:	e00b      	b.n	1c16 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1bfe:	491e      	ldr	r1, [pc, #120]	; (1c78 <hexdump_line_print+0xac>)
    1c00:	4628      	mov	r0, r5
    1c02:	f7ff ff61 	bl	1ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c06:	3401      	adds	r4, #1
    1c08:	2c0f      	cmp	r4, #15
    1c0a:	dc0c      	bgt.n	1c26 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1c0c:	2c00      	cmp	r4, #0
    1c0e:	dd02      	ble.n	1c16 <hexdump_line_print+0x4a>
    1c10:	f014 0f07 	tst.w	r4, #7
    1c14:	d0ee      	beq.n	1bf4 <hexdump_line_print+0x28>
		if (i < length) {
    1c16:	42b4      	cmp	r4, r6
    1c18:	d2f1      	bcs.n	1bfe <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    1c1a:	5d3a      	ldrb	r2, [r7, r4]
    1c1c:	4917      	ldr	r1, [pc, #92]	; (1c7c <hexdump_line_print+0xb0>)
    1c1e:	4628      	mov	r0, r5
    1c20:	f7ff ff52 	bl	1ac8 <print_formatted>
    1c24:	e7ef      	b.n	1c06 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    1c26:	4916      	ldr	r1, [pc, #88]	; (1c80 <hexdump_line_print+0xb4>)
    1c28:	4628      	mov	r0, r5
    1c2a:	f7ff ff4d 	bl	1ac8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c2e:	2400      	movs	r4, #0
    1c30:	e009      	b.n	1c46 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1c32:	4910      	ldr	r1, [pc, #64]	; (1c74 <hexdump_line_print+0xa8>)
    1c34:	4628      	mov	r0, r5
    1c36:	f7ff ff47 	bl	1ac8 <print_formatted>
    1c3a:	e00b      	b.n	1c54 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    1c3c:	4911      	ldr	r1, [pc, #68]	; (1c84 <hexdump_line_print+0xb8>)
    1c3e:	4628      	mov	r0, r5
    1c40:	f7ff ff42 	bl	1ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c44:	3401      	adds	r4, #1
    1c46:	2c0f      	cmp	r4, #15
    1c48:	dc12      	bgt.n	1c70 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1c4a:	2c00      	cmp	r4, #0
    1c4c:	dd02      	ble.n	1c54 <hexdump_line_print+0x88>
    1c4e:	f014 0f07 	tst.w	r4, #7
    1c52:	d0ee      	beq.n	1c32 <hexdump_line_print+0x66>
		if (i < length) {
    1c54:	42b4      	cmp	r4, r6
    1c56:	d206      	bcs.n	1c66 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1c58:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1c5a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    1c5e:	2b5e      	cmp	r3, #94	; 0x5e
    1c60:	d9ec      	bls.n	1c3c <hexdump_line_print+0x70>
    1c62:	222e      	movs	r2, #46	; 0x2e
    1c64:	e7ea      	b.n	1c3c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1c66:	4903      	ldr	r1, [pc, #12]	; (1c74 <hexdump_line_print+0xa8>)
    1c68:	4628      	mov	r0, r5
    1c6a:	f7ff ff2d 	bl	1ac8 <print_formatted>
    1c6e:	e7e9      	b.n	1c44 <hexdump_line_print+0x78>
		}
	}
}
    1c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c74:	00008b34 	.word	0x00008b34
    1c78:	00008b18 	.word	0x00008b18
    1c7c:	00008b10 	.word	0x00008b10
    1c80:	00008b1c 	.word	0x00008b1c
    1c84:	00008b20 	.word	0x00008b20

00001c88 <ids_print>:
{
    1c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c8c:	4680      	mov	r8, r0
    1c8e:	4616      	mov	r6, r2
    1c90:	461d      	mov	r5, r3
    1c92:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    1c96:	b959      	cbnz	r1, 1cb0 <ids_print+0x28>
	int total = 0;
    1c98:	2400      	movs	r4, #0
	if (source_id >= 0) {
    1c9a:	2f00      	cmp	r7, #0
    1c9c:	db1c      	blt.n	1cd8 <ids_print+0x50>
		total += print_formatted(output,
    1c9e:	b186      	cbz	r6, 1cc2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1ca0:	2301      	movs	r3, #1
    1ca2:	9a07      	ldr	r2, [sp, #28]
    1ca4:	4093      	lsls	r3, r2
				(func_on &&
    1ca6:	f013 0f10 	tst.w	r3, #16
    1caa:	d118      	bne.n	1cde <ids_print+0x56>
		total += print_formatted(output,
    1cac:	4e0d      	ldr	r6, [pc, #52]	; (1ce4 <ids_print+0x5c>)
    1cae:	e009      	b.n	1cc4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1cb0:	4b0d      	ldr	r3, [pc, #52]	; (1ce8 <ids_print+0x60>)
    1cb2:	9a07      	ldr	r2, [sp, #28]
    1cb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1cb8:	490c      	ldr	r1, [pc, #48]	; (1cec <ids_print+0x64>)
    1cba:	f7ff ff05 	bl	1ac8 <print_formatted>
    1cbe:	4604      	mov	r4, r0
    1cc0:	e7eb      	b.n	1c9a <ids_print+0x12>
		total += print_formatted(output,
    1cc2:	4e08      	ldr	r6, [pc, #32]	; (1ce4 <ids_print+0x5c>)
    1cc4:	4639      	mov	r1, r7
    1cc6:	4628      	mov	r0, r5
    1cc8:	f7ff fe4c 	bl	1964 <log_source_name_get>
    1ccc:	4602      	mov	r2, r0
    1cce:	4631      	mov	r1, r6
    1cd0:	4640      	mov	r0, r8
    1cd2:	f7ff fef9 	bl	1ac8 <print_formatted>
    1cd6:	4404      	add	r4, r0
}
    1cd8:	4620      	mov	r0, r4
    1cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    1cde:	4e04      	ldr	r6, [pc, #16]	; (1cf0 <ids_print+0x68>)
    1ce0:	e7f0      	b.n	1cc4 <ids_print+0x3c>
    1ce2:	bf00      	nop
    1ce4:	00008b24 	.word	0x00008b24
    1ce8:	00008ba0 	.word	0x00008ba0
    1cec:	00008b30 	.word	0x00008b30
    1cf0:	00008b2c 	.word	0x00008b2c

00001cf4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cf8:	b085      	sub	sp, #20
    1cfa:	4605      	mov	r5, r0
    1cfc:	460c      	mov	r4, r1
    1cfe:	4616      	mov	r6, r2
    1d00:	9303      	str	r3, [sp, #12]
    1d02:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1d06:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1d0a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1d0e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    1d12:	f005 f9d4 	bl	70be <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1d16:	b1e8      	cbz	r0, 1d54 <prefix_print+0x60>
    1d18:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    1d1a:	4913      	ldr	r1, [pc, #76]	; (1d68 <prefix_print+0x74>)
    1d1c:	4628      	mov	r0, r5
    1d1e:	f7ff fed3 	bl	1ac8 <print_formatted>
    1d22:	4607      	mov	r7, r0
	}

	if (stamp) {
    1d24:	f1bb 0f00 	cmp.w	fp, #0
    1d28:	d116      	bne.n	1d58 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    1d2a:	4642      	mov	r2, r8
    1d2c:	4651      	mov	r1, sl
    1d2e:	4628      	mov	r0, r5
    1d30:	f005 fade 	bl	72f0 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    1d34:	f8cd 8004 	str.w	r8, [sp, #4]
    1d38:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    1d3c:	9300      	str	r3, [sp, #0]
    1d3e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    1d42:	4632      	mov	r2, r6
    1d44:	4649      	mov	r1, r9
    1d46:	4628      	mov	r0, r5
    1d48:	f7ff ff9e 	bl	1c88 <ids_print>
			domain_id, source_id, level);


	return length;
}
    1d4c:	4438      	add	r0, r7
    1d4e:	b005      	add	sp, #20
    1d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1d54:	2700      	movs	r7, #0
    1d56:	e7e5      	b.n	1d24 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    1d58:	9a03      	ldr	r2, [sp, #12]
    1d5a:	4621      	mov	r1, r4
    1d5c:	4628      	mov	r0, r5
    1d5e:	f7ff fec5 	bl	1aec <timestamp_print>
    1d62:	4407      	add	r7, r0
    1d64:	e7e1      	b.n	1d2a <prefix_print+0x36>
    1d66:	bf00      	nop
    1d68:	00008b38 	.word	0x00008b38

00001d6c <hexdump_print>:
{
    1d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d70:	b089      	sub	sp, #36	; 0x24
    1d72:	4607      	mov	r7, r0
    1d74:	460e      	mov	r6, r1
    1d76:	4691      	mov	r9, r2
    1d78:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
    1d7a:	f005 fa37 	bl	71ec <log_msg_str_get>
    1d7e:	4602      	mov	r2, r0
    1d80:	490e      	ldr	r1, [pc, #56]	; (1dbc <hexdump_print+0x50>)
    1d82:	4630      	mov	r0, r6
    1d84:	f7ff fea0 	bl	1ac8 <print_formatted>
	uint32_t offset = 0U;
    1d88:	2400      	movs	r4, #0
		length = sizeof(buf);
    1d8a:	2510      	movs	r5, #16
    1d8c:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1d8e:	4623      	mov	r3, r4
    1d90:	aa03      	add	r2, sp, #12
    1d92:	eb0d 0105 	add.w	r1, sp, r5
    1d96:	4638      	mov	r0, r7
    1d98:	f005 fa95 	bl	72c6 <log_msg_hexdump_data_get>
		if (length) {
    1d9c:	9a03      	ldr	r2, [sp, #12]
    1d9e:	b152      	cbz	r2, 1db6 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    1da0:	f8cd 8000 	str.w	r8, [sp]
    1da4:	464b      	mov	r3, r9
    1da6:	eb0d 0105 	add.w	r1, sp, r5
    1daa:	4630      	mov	r0, r6
    1dac:	f7ff ff0e 	bl	1bcc <hexdump_line_print>
			offset += length;
    1db0:	9d03      	ldr	r5, [sp, #12]
    1db2:	442c      	add	r4, r5
		length = sizeof(buf);
    1db4:	e7e9      	b.n	1d8a <hexdump_print+0x1e>
}
    1db6:	b009      	add	sp, #36	; 0x24
    1db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1dbc:	00008b0c 	.word	0x00008b0c

00001dc0 <raw_string_print>:
{
    1dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dc2:	b083      	sub	sp, #12
    1dc4:	4606      	mov	r6, r0
    1dc6:	460c      	mov	r4, r1
	bool eol = false;
    1dc8:	2700      	movs	r7, #0
	size_t offset = 0;
    1dca:	463d      	mov	r5, r7
    1dcc:	e00d      	b.n	1dea <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
    1dce:	68a2      	ldr	r2, [r4, #8]
    1dd0:	4413      	add	r3, r2
    1dd2:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    1dd6:	2f0a      	cmp	r7, #10
    1dd8:	bf14      	ite	ne
    1dda:	2700      	movne	r7, #0
    1ddc:	2701      	moveq	r7, #1
		log_output_flush(output);
    1dde:	4620      	mov	r0, r4
    1de0:	f005 fbf9 	bl	75d6 <log_output_flush>
		offset += length;
    1de4:	9b01      	ldr	r3, [sp, #4]
    1de6:	441d      	add	r5, r3
	} while (length > 0);
    1de8:	b173      	cbz	r3, 1e08 <raw_string_print+0x48>
		length = output->size;
    1dea:	68e3      	ldr	r3, [r4, #12]
    1dec:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    1dee:	462b      	mov	r3, r5
    1df0:	aa01      	add	r2, sp, #4
    1df2:	68a1      	ldr	r1, [r4, #8]
    1df4:	4630      	mov	r0, r6
    1df6:	f005 fa66 	bl	72c6 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    1dfa:	6863      	ldr	r3, [r4, #4]
    1dfc:	9a01      	ldr	r2, [sp, #4]
    1dfe:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1e00:	9b01      	ldr	r3, [sp, #4]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d0eb      	beq.n	1dde <raw_string_print+0x1e>
    1e06:	e7e2      	b.n	1dce <raw_string_print+0xe>
	if (eol) {
    1e08:	b90f      	cbnz	r7, 1e0e <raw_string_print+0x4e>
}
    1e0a:	b003      	add	sp, #12
    1e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    1e0e:	4902      	ldr	r1, [pc, #8]	; (1e18 <raw_string_print+0x58>)
    1e10:	4620      	mov	r0, r4
    1e12:	f7ff fe59 	bl	1ac8 <print_formatted>
}
    1e16:	e7f8      	b.n	1e0a <raw_string_print+0x4a>
    1e18:	00008b3c 	.word	0x00008b3c

00001e1c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	b082      	sub	sp, #8
    1e20:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    1e22:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1e24:	f242 730f 	movw	r3, #9999	; 0x270f
    1e28:	428b      	cmp	r3, r1
    1e2a:	bf28      	it	cs
    1e2c:	460b      	movcs	r3, r1
    1e2e:	4a0e      	ldr	r2, [pc, #56]	; (1e68 <log_output_dropped_process+0x4c>)
    1e30:	2105      	movs	r1, #5
    1e32:	4668      	mov	r0, sp
    1e34:	f004 ff01 	bl	6c3a <snprintk>
    1e38:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    1e3a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1e3c:	685b      	ldr	r3, [r3, #4]
    1e3e:	220b      	movs	r2, #11
    1e40:	490a      	ldr	r1, [pc, #40]	; (1e6c <log_output_dropped_process+0x50>)
    1e42:	4628      	mov	r0, r5
    1e44:	f005 fa47 	bl	72d6 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    1e48:	6863      	ldr	r3, [r4, #4]
    1e4a:	685b      	ldr	r3, [r3, #4]
    1e4c:	4632      	mov	r2, r6
    1e4e:	4669      	mov	r1, sp
    1e50:	4628      	mov	r0, r5
    1e52:	f005 fa40 	bl	72d6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    1e56:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1e58:	685b      	ldr	r3, [r3, #4]
    1e5a:	221b      	movs	r2, #27
    1e5c:	4904      	ldr	r1, [pc, #16]	; (1e70 <log_output_dropped_process+0x54>)
    1e5e:	4628      	mov	r0, r5
    1e60:	f005 fa39 	bl	72d6 <buffer_write>
}
    1e64:	b002      	add	sp, #8
    1e66:	bd70      	pop	{r4, r5, r6, pc}
    1e68:	00008b40 	.word	0x00008b40
    1e6c:	00008b94 	.word	0x00008b94
    1e70:	00008b78 	.word	0x00008b78

00001e74 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1e74:	4b07      	ldr	r3, [pc, #28]	; (1e94 <log_output_timestamp_freq_set+0x20>)
    1e76:	2201      	movs	r2, #1
    1e78:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1e7a:	4b07      	ldr	r3, [pc, #28]	; (1e98 <log_output_timestamp_freq_set+0x24>)
    1e7c:	4298      	cmp	r0, r3
    1e7e:	d905      	bls.n	1e8c <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    1e80:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1e82:	4a04      	ldr	r2, [pc, #16]	; (1e94 <log_output_timestamp_freq_set+0x20>)
    1e84:	6813      	ldr	r3, [r2, #0]
    1e86:	005b      	lsls	r3, r3, #1
    1e88:	6013      	str	r3, [r2, #0]
    1e8a:	e7f6      	b.n	1e7a <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    1e8c:	4b03      	ldr	r3, [pc, #12]	; (1e9c <log_output_timestamp_freq_set+0x28>)
    1e8e:	6018      	str	r0, [r3, #0]
}
    1e90:	4770      	bx	lr
    1e92:	bf00      	nop
    1e94:	20000498 	.word	0x20000498
    1e98:	000f4240 	.word	0x000f4240
    1e9c:	20000494 	.word	0x20000494

00001ea0 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1ea0:	b570      	push	{r4, r5, r6, lr}
    1ea2:	4606      	mov	r6, r0
    1ea4:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    1ea6:	2400      	movs	r4, #0
    1ea8:	42ac      	cmp	r4, r5
    1eaa:	d207      	bcs.n	1ebc <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
    1eac:	4b04      	ldr	r3, [pc, #16]	; (1ec0 <char_out+0x20>)
    1eae:	6818      	ldr	r0, [r3, #0]
    1eb0:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    1eb2:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1eb4:	685b      	ldr	r3, [r3, #4]
    1eb6:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1eb8:	3401      	adds	r4, #1
    1eba:	e7f5      	b.n	1ea8 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1ebc:	4628      	mov	r0, r5
    1ebe:	bd70      	pop	{r4, r5, r6, pc}
    1ec0:	200004b0 	.word	0x200004b0

00001ec4 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1ec4:	4b01      	ldr	r3, [pc, #4]	; (1ecc <log_backend_uart_init+0x8>)
    1ec6:	4a02      	ldr	r2, [pc, #8]	; (1ed0 <log_backend_uart_init+0xc>)
    1ec8:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    1eca:	4770      	bx	lr
    1ecc:	200004b0 	.word	0x200004b0
    1ed0:	000086a4 	.word	0x000086a4

00001ed4 <panic>:

static void panic(struct log_backend const *const backend)
{
    1ed4:	b508      	push	{r3, lr}
	in_panic = true;
    1ed6:	4b03      	ldr	r3, [pc, #12]	; (1ee4 <panic+0x10>)
    1ed8:	2201      	movs	r2, #1
    1eda:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1edc:	4802      	ldr	r0, [pc, #8]	; (1ee8 <panic+0x14>)
    1ede:	f005 fb7a 	bl	75d6 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    1ee2:	bd08      	pop	{r3, pc}
    1ee4:	20000fc6 	.word	0x20000fc6
    1ee8:	00008bf0 	.word	0x00008bf0

00001eec <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    1eec:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1eee:	4802      	ldr	r0, [pc, #8]	; (1ef8 <dropped+0xc>)
    1ef0:	f7ff ff94 	bl	1e1c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    1ef4:	bd08      	pop	{r3, pc}
    1ef6:	bf00      	nop
    1ef8:	00008bf0 	.word	0x00008bf0

00001efc <put>:
{
    1efc:	b510      	push	{r4, lr}
    1efe:	460c      	mov	r4, r1
	log_msg_get(msg);
    1f00:	4608      	mov	r0, r1
    1f02:	f005 f951 	bl	71a8 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    1f06:	220f      	movs	r2, #15
    1f08:	4621      	mov	r1, r4
    1f0a:	4803      	ldr	r0, [pc, #12]	; (1f18 <put+0x1c>)
    1f0c:	f005 fb8c 	bl	7628 <log_output_msg_process>
	log_msg_put(msg);
    1f10:	4620      	mov	r0, r4
    1f12:	f005 f96d 	bl	71f0 <log_msg_put>
}
    1f16:	bd10      	pop	{r4, pc}
    1f18:	00008bf0 	.word	0x00008bf0

00001f1c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1f1c:	4b01      	ldr	r3, [pc, #4]	; (1f24 <log_backend_rtt_init+0x8>)
    1f1e:	2201      	movs	r2, #1
    1f20:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1f22:	4770      	bx	lr
    1f24:	20000fc7 	.word	0x20000fc7

00001f28 <on_failed_write>:
{
    1f28:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    1f2a:	b918      	cbnz	r0, 1f34 <on_failed_write+0xc>
		host_present = false;
    1f2c:	4b08      	ldr	r3, [pc, #32]	; (1f50 <on_failed_write+0x28>)
    1f2e:	2200      	movs	r2, #0
    1f30:	701a      	strb	r2, [r3, #0]
}
    1f32:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    1f34:	4b07      	ldr	r3, [pc, #28]	; (1f54 <on_failed_write+0x2c>)
    1f36:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    1f38:	b123      	cbz	r3, 1f44 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    1f3a:	f241 3088 	movw	r0, #5000	; 0x1388
    1f3e:	f006 fb1a 	bl	8576 <z_impl_k_busy_wait>
}
    1f42:	e7f6      	b.n	1f32 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    1f44:	20a4      	movs	r0, #164	; 0xa4
    1f46:	2100      	movs	r1, #0
    1f48:	f004 f99a 	bl	6280 <z_impl_k_sleep>
}
    1f4c:	e7f1      	b.n	1f32 <on_failed_write+0xa>
    1f4e:	bf00      	nop
    1f50:	20000fc7 	.word	0x20000fc7
    1f54:	20000fc8 	.word	0x20000fc8

00001f58 <on_write>:
{
    1f58:	b538      	push	{r3, r4, r5, lr}
    1f5a:	4604      	mov	r4, r0
	host_present = true;
    1f5c:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <on_write+0x30>)
    1f5e:	2201      	movs	r2, #1
    1f60:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    1f62:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <on_write+0x34>)
    1f64:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    1f66:	b903      	cbnz	r3, 1f6a <on_write+0x12>
}
    1f68:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1f6a:	2000      	movs	r0, #0
    1f6c:	f003 f97c 	bl	5268 <SEGGER_RTT_HasDataUp>
    1f70:	2800      	cmp	r0, #0
    1f72:	d0f9      	beq.n	1f68 <on_write+0x10>
    1f74:	4b04      	ldr	r3, [pc, #16]	; (1f88 <on_write+0x30>)
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d0f5      	beq.n	1f68 <on_write+0x10>
			on_failed_write(retry_cnt--);
    1f7c:	1e65      	subs	r5, r4, #1
    1f7e:	4620      	mov	r0, r4
    1f80:	f7ff ffd2 	bl	1f28 <on_failed_write>
    1f84:	462c      	mov	r4, r5
    1f86:	e7f0      	b.n	1f6a <on_write+0x12>
    1f88:	20000fc7 	.word	0x20000fc7
    1f8c:	20000fc8 	.word	0x20000fc8

00001f90 <data_out_block_mode>:
{
    1f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f94:	4606      	mov	r6, r0
    1f96:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1f98:	2704      	movs	r7, #4
    1f9a:	e00d      	b.n	1fb8 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1f9c:	462a      	mov	r2, r5
    1f9e:	4631      	mov	r1, r6
    1fa0:	2000      	movs	r0, #0
    1fa2:	f003 f8fd 	bl	51a0 <SEGGER_RTT_WriteSkipNoLock>
    1fa6:	4604      	mov	r4, r0
    1fa8:	e01c      	b.n	1fe4 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    1faa:	4638      	mov	r0, r7
    1fac:	f7ff ffd4 	bl	1f58 <on_write>
	} while ((ret == 0) && host_present);
    1fb0:	bb1c      	cbnz	r4, 1ffa <data_out_block_mode+0x6a>
    1fb2:	4b16      	ldr	r3, [pc, #88]	; (200c <data_out_block_mode+0x7c>)
    1fb4:	781b      	ldrb	r3, [r3, #0]
    1fb6:	b303      	cbz	r3, 1ffa <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    1fb8:	4b15      	ldr	r3, [pc, #84]	; (2010 <data_out_block_mode+0x80>)
    1fba:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d1ed      	bne.n	1f9c <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    1fc0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2014 <data_out_block_mode+0x84>
    1fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fcc:	4640      	mov	r0, r8
    1fce:	f003 fcab 	bl	5928 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1fd2:	462a      	mov	r2, r5
    1fd4:	4631      	mov	r1, r6
    1fd6:	2000      	movs	r0, #0
    1fd8:	f003 f8e2 	bl	51a0 <SEGGER_RTT_WriteSkipNoLock>
    1fdc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1fde:	4640      	mov	r0, r8
    1fe0:	f003 fd2c 	bl	5a3c <z_impl_k_mutex_unlock>
		if (ret) {
    1fe4:	2c00      	cmp	r4, #0
    1fe6:	d1e0      	bne.n	1faa <data_out_block_mode+0x1a>
		} else if (host_present) {
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <data_out_block_mode+0x7c>)
    1fea:	781b      	ldrb	r3, [r3, #0]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d0df      	beq.n	1fb0 <data_out_block_mode+0x20>
			retry_cnt--;
    1ff0:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    1ff2:	4638      	mov	r0, r7
    1ff4:	f7ff ff98 	bl	1f28 <on_failed_write>
    1ff8:	e7da      	b.n	1fb0 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    1ffa:	b914      	cbnz	r4, 2002 <data_out_block_mode+0x72>
    1ffc:	4b03      	ldr	r3, [pc, #12]	; (200c <data_out_block_mode+0x7c>)
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	b903      	cbnz	r3, 2004 <data_out_block_mode+0x74>
    2002:	462c      	mov	r4, r5
}
    2004:	4620      	mov	r0, r4
    2006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    200a:	bf00      	nop
    200c:	20000fc7 	.word	0x20000fc7
    2010:	20000fc8 	.word	0x20000fc8
    2014:	20000190 	.word	0x20000190

00002018 <panic>:

static void panic(struct log_backend const *const backend)
{
    2018:	b508      	push	{r3, lr}
	panic_mode = true;
    201a:	4b03      	ldr	r3, [pc, #12]	; (2028 <panic+0x10>)
    201c:	2201      	movs	r2, #1
    201e:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    2020:	4802      	ldr	r0, [pc, #8]	; (202c <panic+0x14>)
    2022:	f005 fad8 	bl	75d6 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    2026:	bd08      	pop	{r3, pc}
    2028:	20000fc8 	.word	0x20000fc8
    202c:	00008c2c 	.word	0x00008c2c

00002030 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2030:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    2032:	4802      	ldr	r0, [pc, #8]	; (203c <dropped+0xc>)
    2034:	f7ff fef2 	bl	1e1c <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    2038:	bd08      	pop	{r3, pc}
    203a:	bf00      	nop
    203c:	00008c2c 	.word	0x00008c2c

00002040 <put>:
{
    2040:	b510      	push	{r4, lr}
    2042:	460c      	mov	r4, r1
	log_msg_get(msg);
    2044:	4608      	mov	r0, r1
    2046:	f005 f8af 	bl	71a8 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    204a:	220f      	movs	r2, #15
    204c:	4621      	mov	r1, r4
    204e:	4803      	ldr	r0, [pc, #12]	; (205c <put+0x1c>)
    2050:	f005 faea 	bl	7628 <log_output_msg_process>
	log_msg_put(msg);
    2054:	4620      	mov	r0, r4
    2056:	f005 f8cb 	bl	71f0 <log_msg_put>
}
    205a:	bd10      	pop	{r4, pc}
    205c:	00008c2c 	.word	0x00008c2c

00002060 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    2060:	b570      	push	{r4, r5, r6, lr}
    2062:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    2064:	4b2c      	ldr	r3, [pc, #176]	; (2118 <pm_system_resume+0xb8>)
    2066:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2068:	f004 031f 	and.w	r3, r4, #31
    206c:	2201      	movs	r2, #1
    206e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2070:	0961      	lsrs	r1, r4, #5
    2072:	4b2a      	ldr	r3, [pc, #168]	; (211c <pm_system_resume+0xbc>)
    2074:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2078:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    207a:	f3bf 8f5b 	dmb	ish
    207e:	e853 1f00 	ldrex	r1, [r3]
    2082:	ea01 0500 	and.w	r5, r1, r0
    2086:	e843 5600 	strex	r6, r5, [r3]
    208a:	2e00      	cmp	r6, #0
    208c:	d1f7      	bne.n	207e <pm_system_resume+0x1e>
    208e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2092:	420a      	tst	r2, r1
    2094:	d03d      	beq.n	2112 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
    2096:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    209a:	009a      	lsls	r2, r3, #2
    209c:	4b20      	ldr	r3, [pc, #128]	; (2120 <pm_system_resume+0xc0>)
    209e:	4413      	add	r3, r2
    20a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    20a4:	ab04      	add	r3, sp, #16
    20a6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    20aa:	4b1e      	ldr	r3, [pc, #120]	; (2124 <pm_system_resume+0xc4>)
    20ac:	b163      	cbz	r3, 20c8 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
    20ae:	f005 fc16 	bl	78de <pm_power_state_exit_post_ops>
	__asm__ volatile(
    20b2:	f04f 0320 	mov.w	r3, #32
    20b6:	f3ef 8611 	mrs	r6, BASEPRI
    20ba:	f383 8812 	msr	BASEPRI_MAX, r3
    20be:	f3bf 8f6f 	isb	sy
    20c2:	4b19      	ldr	r3, [pc, #100]	; (2128 <pm_system_resume+0xc8>)
    20c4:	681d      	ldr	r5, [r3, #0]
    20c6:	e00a      	b.n	20de <pm_system_resume+0x7e>
	__asm__ volatile(
    20c8:	2300      	movs	r3, #0
    20ca:	f383 8811 	msr	BASEPRI, r3
    20ce:	f3bf 8f6f 	isb	sy
}
    20d2:	e7ee      	b.n	20b2 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    20d4:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    20d6:	b10d      	cbz	r5, 20dc <pm_system_resume+0x7c>
	return node->next;
    20d8:	682b      	ldr	r3, [r5, #0]
    20da:	b16b      	cbz	r3, 20f8 <pm_system_resume+0x98>
{
    20dc:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    20de:	b15d      	cbz	r5, 20f8 <pm_system_resume+0x98>
			callback = notifier->state_exit;
    20e0:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    20e2:	2a00      	cmp	r2, #0
    20e4:	d0f6      	beq.n	20d4 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
    20e6:	4b0c      	ldr	r3, [pc, #48]	; (2118 <pm_system_resume+0xb8>)
    20e8:	7d1b      	ldrb	r3, [r3, #20]
    20ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    20ee:	0099      	lsls	r1, r3, #2
    20f0:	4b0b      	ldr	r3, [pc, #44]	; (2120 <pm_system_resume+0xc0>)
    20f2:	5c58      	ldrb	r0, [r3, r1]
    20f4:	4790      	blx	r2
    20f6:	e7ed      	b.n	20d4 <pm_system_resume+0x74>
	__asm__ volatile(
    20f8:	f386 8811 	msr	BASEPRI, r6
    20fc:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2100:	4807      	ldr	r0, [pc, #28]	; (2120 <pm_system_resume+0xc0>)
    2102:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2106:	00a2      	lsls	r2, r4, #2
    2108:	1881      	adds	r1, r0, r2
    210a:	2300      	movs	r3, #0
    210c:	5083      	str	r3, [r0, r2]
    210e:	604b      	str	r3, [r1, #4]
    2110:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    2112:	b004      	add	sp, #16
    2114:	bd70      	pop	{r4, r5, r6, pc}
    2116:	bf00      	nop
    2118:	20000f70 	.word	0x20000f70
    211c:	200004e4 	.word	0x200004e4
    2120:	200004e8 	.word	0x200004e8
    2124:	000078df 	.word	0x000078df
    2128:	200004dc 	.word	0x200004dc

0000212c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    212c:	b5f0      	push	{r4, r5, r6, r7, lr}
    212e:	b089      	sub	sp, #36	; 0x24
    2130:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2132:	4b55      	ldr	r3, [pc, #340]	; (2288 <pm_system_suspend+0x15c>)
    2134:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2136:	f004 031f 	and.w	r3, r4, #31
    213a:	2201      	movs	r2, #1
    213c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    213e:	0961      	lsrs	r1, r4, #5
    2140:	4b52      	ldr	r3, [pc, #328]	; (228c <pm_system_suspend+0x160>)
    2142:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2146:	f3bf 8f5b 	dmb	ish
    214a:	e853 1f00 	ldrex	r1, [r3]
    214e:	ea41 0002 	orr.w	r0, r1, r2
    2152:	e843 0600 	strex	r6, r0, [r3]
    2156:	2e00      	cmp	r6, #0
    2158:	d1f7      	bne.n	214a <pm_system_suspend+0x1e>
    215a:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    215e:	420a      	tst	r2, r1
    2160:	d017      	beq.n	2192 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    2162:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2166:	4a4a      	ldr	r2, [pc, #296]	; (2290 <pm_system_suspend+0x164>)
    2168:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    216c:	2b00      	cmp	r3, #0
    216e:	f000 8088 	beq.w	2282 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2172:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    2176:	d11c      	bne.n	21b2 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2178:	f003 fd70 	bl	5c5c <k_sched_lock>
	__asm__ volatile(
    217c:	f04f 0320 	mov.w	r3, #32
    2180:	f3ef 8611 	mrs	r6, BASEPRI
    2184:	f383 8812 	msr	BASEPRI_MAX, r3
    2188:	f3bf 8f6f 	isb	sy
	return list->head;
    218c:	4b41      	ldr	r3, [pc, #260]	; (2294 <pm_system_suspend+0x168>)
    218e:	681d      	ldr	r5, [r3, #0]
    2190:	e02a      	b.n	21e8 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2192:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    2196:	4b3e      	ldr	r3, [pc, #248]	; (2290 <pm_system_suspend+0x164>)
    2198:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    219c:	466f      	mov	r7, sp
    219e:	462a      	mov	r2, r5
    21a0:	4621      	mov	r1, r4
    21a2:	4638      	mov	r0, r7
    21a4:	f005 fa7f 	bl	76a6 <pm_policy_next_state>
    21a8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    21ac:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    21b0:	e7d7      	b.n	2162 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    21b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    21b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    21ba:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    21bc:	0c59      	lsrs	r1, r3, #17
    21be:	03d8      	lsls	r0, r3, #15
    21c0:	4e35      	ldr	r6, [pc, #212]	; (2298 <pm_system_suspend+0x16c>)
    21c2:	4a36      	ldr	r2, [pc, #216]	; (229c <pm_system_suspend+0x170>)
    21c4:	2300      	movs	r3, #0
    21c6:	1980      	adds	r0, r0, r6
    21c8:	f04f 0600 	mov.w	r6, #0
    21cc:	eb46 0101 	adc.w	r1, r6, r1
    21d0:	f7fd ff96 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    21d4:	2101      	movs	r1, #1
    21d6:	1a28      	subs	r0, r5, r0
    21d8:	f006 f99e 	bl	8518 <z_set_timeout_expiry>
    21dc:	e7cc      	b.n	2178 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21de:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    21e0:	b10d      	cbz	r5, 21e6 <pm_system_suspend+0xba>
	return node->next;
    21e2:	682b      	ldr	r3, [r5, #0]
    21e4:	b16b      	cbz	r3, 2202 <pm_system_suspend+0xd6>
{
    21e6:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21e8:	b15d      	cbz	r5, 2202 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    21ea:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    21ec:	2a00      	cmp	r2, #0
    21ee:	d0f6      	beq.n	21de <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    21f0:	4b25      	ldr	r3, [pc, #148]	; (2288 <pm_system_suspend+0x15c>)
    21f2:	7d1b      	ldrb	r3, [r3, #20]
    21f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    21f8:	4925      	ldr	r1, [pc, #148]	; (2290 <pm_system_suspend+0x164>)
    21fa:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    21fe:	4790      	blx	r2
    2200:	e7ed      	b.n	21de <pm_system_suspend+0xb2>
	__asm__ volatile(
    2202:	f386 8811 	msr	BASEPRI, r6
    2206:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    220a:	f004 031f 	and.w	r3, r4, #31
    220e:	2101      	movs	r1, #1
    2210:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2212:	0963      	lsrs	r3, r4, #5
    2214:	4a22      	ldr	r2, [pc, #136]	; (22a0 <pm_system_suspend+0x174>)
    2216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    221a:	f3bf 8f5b 	dmb	ish
    221e:	e853 2f00 	ldrex	r2, [r3]
    2222:	430a      	orrs	r2, r1
    2224:	e843 2000 	strex	r0, r2, [r3]
    2228:	2800      	cmp	r0, #0
    222a:	d1f8      	bne.n	221e <pm_system_suspend+0xf2>
    222c:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2230:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2234:	4a16      	ldr	r2, [pc, #88]	; (2290 <pm_system_suspend+0x164>)
    2236:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    223a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    223e:	ab08      	add	r3, sp, #32
    2240:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2244:	4b17      	ldr	r3, [pc, #92]	; (22a4 <pm_system_suspend+0x178>)
    2246:	b10b      	cbz	r3, 224c <pm_system_suspend+0x120>
		pm_power_state_set(info);
    2248:	f005 fb36 	bl	78b8 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    224c:	f7ff ff08 	bl	2060 <pm_system_resume>
	k_sched_unlock();
    2250:	f003 ff02 	bl	6058 <k_sched_unlock>
	bool ret = true;
    2254:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    2256:	f004 021f 	and.w	r2, r4, #31
    225a:	2301      	movs	r3, #1
    225c:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    225e:	0964      	lsrs	r4, r4, #5
    2260:	4a0a      	ldr	r2, [pc, #40]	; (228c <pm_system_suspend+0x160>)
    2262:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    2266:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2268:	f3bf 8f5b 	dmb	ish
    226c:	e854 2f00 	ldrex	r2, [r4]
    2270:	401a      	ands	r2, r3
    2272:	e844 2100 	strex	r1, r2, [r4]
    2276:	2900      	cmp	r1, #0
    2278:	d1f8      	bne.n	226c <pm_system_suspend+0x140>
    227a:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    227e:	b009      	add	sp, #36	; 0x24
    2280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    2282:	2000      	movs	r0, #0
    2284:	e7e7      	b.n	2256 <pm_system_suspend+0x12a>
    2286:	bf00      	nop
    2288:	20000f70 	.word	0x20000f70
    228c:	200004f4 	.word	0x200004f4
    2290:	200004e8 	.word	0x200004e8
    2294:	200004dc 	.word	0x200004dc
    2298:	000f423f 	.word	0x000f423f
    229c:	000f4240 	.word	0x000f4240
    22a0:	200004e4 	.word	0x200004e4
    22a4:	000078b9 	.word	0x000078b9

000022a8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    22a8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    22aa:	4802      	ldr	r0, [pc, #8]	; (22b4 <nrf_cc3xx_platform_abort_init+0xc>)
    22ac:	f004 fae6 	bl	687c <nrf_cc3xx_platform_set_abort>
}
    22b0:	bd08      	pop	{r3, pc}
    22b2:	bf00      	nop
    22b4:	00008c40 	.word	0x00008c40

000022b8 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    22b8:	b1d0      	cbz	r0, 22f0 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    22ba:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    22bc:	6842      	ldr	r2, [r0, #4]
    22be:	2a04      	cmp	r2, #4
    22c0:	d005      	beq.n	22ce <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    22c2:	b1d2      	cbz	r2, 22fa <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    22c4:	6800      	ldr	r0, [r0, #0]
    22c6:	f003 fbb9 	bl	5a3c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    22ca:	2000      	movs	r0, #0
    }
}
    22cc:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    22ce:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    22d0:	2200      	movs	r2, #0
    22d2:	f3bf 8f5b 	dmb	ish
    22d6:	e853 1f00 	ldrex	r1, [r3]
    22da:	2901      	cmp	r1, #1
    22dc:	d103      	bne.n	22e6 <mutex_unlock_platform+0x2e>
    22de:	e843 2000 	strex	r0, r2, [r3]
    22e2:	2800      	cmp	r0, #0
    22e4:	d1f7      	bne.n	22d6 <mutex_unlock_platform+0x1e>
    22e6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    22ea:	d104      	bne.n	22f6 <mutex_unlock_platform+0x3e>
    22ec:	4610      	mov	r0, r2
    22ee:	e7ed      	b.n	22cc <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    22f0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    22f4:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    22f6:	4802      	ldr	r0, [pc, #8]	; (2300 <mutex_unlock_platform+0x48>)
    22f8:	e7e8      	b.n	22cc <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    22fa:	4802      	ldr	r0, [pc, #8]	; (2304 <mutex_unlock_platform+0x4c>)
    22fc:	e7e6      	b.n	22cc <mutex_unlock_platform+0x14>
    22fe:	bf00      	nop
    2300:	ffff8fe9 	.word	0xffff8fe9
    2304:	ffff8fea 	.word	0xffff8fea

00002308 <mutex_lock_platform>:
    if(mutex == NULL) {
    2308:	b320      	cbz	r0, 2354 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    230a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    230c:	6842      	ldr	r2, [r0, #4]
    230e:	2a04      	cmp	r2, #4
    2310:	d002      	beq.n	2318 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2312:	b992      	cbnz	r2, 233a <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2314:	4811      	ldr	r0, [pc, #68]	; (235c <mutex_lock_platform+0x54>)
    2316:	e00f      	b.n	2338 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2318:	6803      	ldr	r3, [r0, #0]
    231a:	2201      	movs	r2, #1
    231c:	f3bf 8f5b 	dmb	ish
    2320:	e853 1f00 	ldrex	r1, [r3]
    2324:	2900      	cmp	r1, #0
    2326:	d103      	bne.n	2330 <mutex_lock_platform+0x28>
    2328:	e843 2000 	strex	r0, r2, [r3]
    232c:	2800      	cmp	r0, #0
    232e:	d1f7      	bne.n	2320 <mutex_lock_platform+0x18>
    2330:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2334:	d10c      	bne.n	2350 <mutex_lock_platform+0x48>
    2336:	2000      	movs	r0, #0
}
    2338:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    233a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    233c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2344:	f003 faf0 	bl	5928 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2348:	2800      	cmp	r0, #0
    234a:	d0f5      	beq.n	2338 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    234c:	4804      	ldr	r0, [pc, #16]	; (2360 <mutex_lock_platform+0x58>)
    234e:	e7f3      	b.n	2338 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2350:	4803      	ldr	r0, [pc, #12]	; (2360 <mutex_lock_platform+0x58>)
    2352:	e7f1      	b.n	2338 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2354:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2358:	4770      	bx	lr
    235a:	bf00      	nop
    235c:	ffff8fea 	.word	0xffff8fea
    2360:	ffff8fe9 	.word	0xffff8fe9

00002364 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2364:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2366:	4604      	mov	r4, r0
    2368:	b188      	cbz	r0, 238e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    236a:	6863      	ldr	r3, [r4, #4]
    236c:	2b04      	cmp	r3, #4
    236e:	d00d      	beq.n	238c <mutex_free_platform+0x28>
    2370:	2b08      	cmp	r3, #8
    2372:	d00b      	beq.n	238c <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2374:	b153      	cbz	r3, 238c <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2376:	f013 0f02 	tst.w	r3, #2
    237a:	d00d      	beq.n	2398 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    237c:	4621      	mov	r1, r4
    237e:	4809      	ldr	r0, [pc, #36]	; (23a4 <mutex_free_platform+0x40>)
    2380:	f005 fea3 	bl	80ca <k_mem_slab_free>
        mutex->mutex = NULL;
    2384:	2300      	movs	r3, #0
    2386:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2388:	2300      	movs	r3, #0
    238a:	6063      	str	r3, [r4, #4]
}
    238c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    238e:	4b06      	ldr	r3, [pc, #24]	; (23a8 <mutex_free_platform+0x44>)
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	4806      	ldr	r0, [pc, #24]	; (23ac <mutex_free_platform+0x48>)
    2394:	4798      	blx	r3
    2396:	e7e8      	b.n	236a <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2398:	2214      	movs	r2, #20
    239a:	2100      	movs	r1, #0
    239c:	6820      	ldr	r0, [r4, #0]
    239e:	f005 fa6b 	bl	7878 <memset>
    23a2:	e7f1      	b.n	2388 <mutex_free_platform+0x24>
    23a4:	200004f8 	.word	0x200004f8
    23a8:	200000e0 	.word	0x200000e0
    23ac:	00008c48 	.word	0x00008c48

000023b0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23b0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    23b2:	4604      	mov	r4, r0
    23b4:	b178      	cbz	r0, 23d6 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    23b6:	6863      	ldr	r3, [r4, #4]
    23b8:	2b04      	cmp	r3, #4
    23ba:	d00b      	beq.n	23d4 <mutex_init_platform+0x24>
    23bc:	2b08      	cmp	r3, #8
    23be:	d009      	beq.n	23d4 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    23c0:	b90b      	cbnz	r3, 23c6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    23c2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    23c4:	b163      	cbz	r3, 23e0 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    23c6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    23c8:	f005 ff12 	bl	81f0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    23cc:	6863      	ldr	r3, [r4, #4]
    23ce:	f043 0301 	orr.w	r3, r3, #1
    23d2:	6063      	str	r3, [r4, #4]
}
    23d4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    23d6:	4b0f      	ldr	r3, [pc, #60]	; (2414 <mutex_init_platform+0x64>)
    23d8:	685b      	ldr	r3, [r3, #4]
    23da:	480f      	ldr	r0, [pc, #60]	; (2418 <mutex_init_platform+0x68>)
    23dc:	4798      	blx	r3
    23de:	e7ea      	b.n	23b6 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    23e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    23e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    23e8:	4621      	mov	r1, r4
    23ea:	480c      	ldr	r0, [pc, #48]	; (241c <mutex_init_platform+0x6c>)
    23ec:	f003 f958 	bl	56a0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    23f0:	b908      	cbnz	r0, 23f6 <mutex_init_platform+0x46>
    23f2:	6823      	ldr	r3, [r4, #0]
    23f4:	b91b      	cbnz	r3, 23fe <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    23f6:	4b07      	ldr	r3, [pc, #28]	; (2414 <mutex_init_platform+0x64>)
    23f8:	685b      	ldr	r3, [r3, #4]
    23fa:	4809      	ldr	r0, [pc, #36]	; (2420 <mutex_init_platform+0x70>)
    23fc:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    23fe:	2214      	movs	r2, #20
    2400:	2100      	movs	r1, #0
    2402:	6820      	ldr	r0, [r4, #0]
    2404:	f005 fa38 	bl	7878 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2408:	6863      	ldr	r3, [r4, #4]
    240a:	f043 0302 	orr.w	r3, r3, #2
    240e:	6063      	str	r3, [r4, #4]
    2410:	e7d9      	b.n	23c6 <mutex_init_platform+0x16>
    2412:	bf00      	nop
    2414:	200000e0 	.word	0x200000e0
    2418:	00008c48 	.word	0x00008c48
    241c:	200004f8 	.word	0x200004f8
    2420:	00008c70 	.word	0x00008c70

00002424 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2424:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2426:	2340      	movs	r3, #64	; 0x40
    2428:	2214      	movs	r2, #20
    242a:	4904      	ldr	r1, [pc, #16]	; (243c <nrf_cc3xx_platform_mutex_init+0x18>)
    242c:	4804      	ldr	r0, [pc, #16]	; (2440 <nrf_cc3xx_platform_mutex_init+0x1c>)
    242e:	f005 fe3e 	bl	80ae <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2432:	4904      	ldr	r1, [pc, #16]	; (2444 <nrf_cc3xx_platform_mutex_init+0x20>)
    2434:	4804      	ldr	r0, [pc, #16]	; (2448 <nrf_cc3xx_platform_mutex_init+0x24>)
    2436:	f004 fa83 	bl	6940 <nrf_cc3xx_platform_set_mutexes>
}
    243a:	bd08      	pop	{r3, pc}
    243c:	20000514 	.word	0x20000514
    2440:	200004f8 	.word	0x200004f8
    2444:	00008cb0 	.word	0x00008cb0
    2448:	00008ca0 	.word	0x00008ca0

0000244c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    244c:	4901      	ldr	r1, [pc, #4]	; (2454 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    244e:	2210      	movs	r2, #16
	str	r2, [r1]
    2450:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2452:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2454:	e000ed10 	.word	0xe000ed10

00002458 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2458:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    245a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    245c:	f380 8811 	msr	BASEPRI, r0
	isb
    2460:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2464:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2468:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    246a:	b662      	cpsie	i
	isb
    246c:	f3bf 8f6f 	isb	sy

	bx	lr
    2470:	4770      	bx	lr
    2472:	bf00      	nop

00002474 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2474:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2476:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2478:	f381 8811 	msr	BASEPRI, r1

	wfe
    247c:	bf20      	wfe

	msr	BASEPRI, r0
    247e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2482:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2484:	4770      	bx	lr
    2486:	bf00      	nop

00002488 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    2488:	b570      	push	{r4, r5, r6, lr}
    248a:	b082      	sub	sp, #8
    248c:	4604      	mov	r4, r0
    248e:	4d1f      	ldr	r5, [pc, #124]	; (250c <esf_dump+0x84>)
    2490:	4b1f      	ldr	r3, [pc, #124]	; (2510 <esf_dump+0x88>)
    2492:	1aed      	subs	r5, r5, r3
    2494:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2496:	2601      	movs	r6, #1
    2498:	f04f 0300 	mov.w	r3, #0
    249c:	f366 0302 	bfi	r3, r6, #0, #3
    24a0:	f36f 03c5 	bfc	r3, #3, #3
    24a4:	f365 138f 	bfi	r3, r5, #6, #10
    24a8:	f8ad 3000 	strh.w	r3, [sp]
    24ac:	6883      	ldr	r3, [r0, #8]
    24ae:	6842      	ldr	r2, [r0, #4]
    24b0:	6801      	ldr	r1, [r0, #0]
    24b2:	4818      	ldr	r0, [pc, #96]	; (2514 <esf_dump+0x8c>)
    24b4:	f7ff f8f4 	bl	16a0 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    24b8:	f04f 0300 	mov.w	r3, #0
    24bc:	f366 0302 	bfi	r3, r6, #0, #3
    24c0:	f36f 03c5 	bfc	r3, #3, #3
    24c4:	f365 138f 	bfi	r3, r5, #6, #10
    24c8:	f8ad 3000 	strh.w	r3, [sp]
    24cc:	6963      	ldr	r3, [r4, #20]
    24ce:	6922      	ldr	r2, [r4, #16]
    24d0:	68e1      	ldr	r1, [r4, #12]
    24d2:	4811      	ldr	r0, [pc, #68]	; (2518 <esf_dump+0x90>)
    24d4:	f7ff f8e4 	bl	16a0 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    24d8:	f04f 0200 	mov.w	r2, #0
    24dc:	f366 0202 	bfi	r2, r6, #0, #3
    24e0:	f36f 02c5 	bfc	r2, #3, #3
    24e4:	f365 128f 	bfi	r2, r5, #6, #10
    24e8:	69e1      	ldr	r1, [r4, #28]
    24ea:	480c      	ldr	r0, [pc, #48]	; (251c <esf_dump+0x94>)
    24ec:	f7ff f916 	bl	171c <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    24f0:	f04f 0200 	mov.w	r2, #0
    24f4:	f366 0202 	bfi	r2, r6, #0, #3
    24f8:	f36f 02c5 	bfc	r2, #3, #3
    24fc:	f365 128f 	bfi	r2, r5, #6, #10
    2500:	69a1      	ldr	r1, [r4, #24]
    2502:	4807      	ldr	r0, [pc, #28]	; (2520 <esf_dump+0x98>)
    2504:	f7ff f90a 	bl	171c <log_1>
		esf->basic.pc);
}
    2508:	b002      	add	sp, #8
    250a:	bd70      	pop	{r4, r5, r6, pc}
    250c:	0000886c 	.word	0x0000886c
    2510:	0000883c 	.word	0x0000883c
    2514:	00008cc4 	.word	0x00008cc4
    2518:	00008cf4 	.word	0x00008cf4
    251c:	00008d24 	.word	0x00008d24
    2520:	00008d34 	.word	0x00008d34

00002524 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2524:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2526:	2b00      	cmp	r3, #0
    2528:	db08      	blt.n	253c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    252a:	f000 001f 	and.w	r0, r0, #31
    252e:	095b      	lsrs	r3, r3, #5
    2530:	2201      	movs	r2, #1
    2532:	fa02 f000 	lsl.w	r0, r2, r0
    2536:	4a02      	ldr	r2, [pc, #8]	; (2540 <arch_irq_enable+0x1c>)
    2538:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    253c:	4770      	bx	lr
    253e:	bf00      	nop
    2540:	e000e100 	.word	0xe000e100

00002544 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2544:	0942      	lsrs	r2, r0, #5
    2546:	4b05      	ldr	r3, [pc, #20]	; (255c <arch_irq_is_enabled+0x18>)
    2548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    254c:	f000 001f 	and.w	r0, r0, #31
    2550:	2301      	movs	r3, #1
    2552:	fa03 f000 	lsl.w	r0, r3, r0
}
    2556:	4010      	ands	r0, r2
    2558:	4770      	bx	lr
    255a:	bf00      	nop
    255c:	e000e100 	.word	0xe000e100

00002560 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2560:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2562:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2564:	2b00      	cmp	r3, #0
    2566:	db08      	blt.n	257a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2568:	0149      	lsls	r1, r1, #5
    256a:	b2c9      	uxtb	r1, r1
    256c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2570:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2574:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2578:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    257a:	f000 000f 	and.w	r0, r0, #15
    257e:	0149      	lsls	r1, r1, #5
    2580:	b2c9      	uxtb	r1, r1
    2582:	4b01      	ldr	r3, [pc, #4]	; (2588 <z_arm_irq_priority_set+0x28>)
    2584:	5419      	strb	r1, [r3, r0]
}
    2586:	4770      	bx	lr
    2588:	e000ed14 	.word	0xe000ed14

0000258c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    258c:	bf30      	wfi
    b z_SysNmiOnReset
    258e:	f7ff bffd 	b.w	258c <z_SysNmiOnReset>
    2592:	bf00      	nop

00002594 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2594:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2596:	4b0b      	ldr	r3, [pc, #44]	; (25c4 <z_arm_prep_c+0x30>)
    2598:	4a0b      	ldr	r2, [pc, #44]	; (25c8 <z_arm_prep_c+0x34>)
    259a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    259e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    25a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    25a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    25ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    25b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    25b4:	f003 f812 	bl	55dc <z_bss_zero>
	z_data_copy();
    25b8:	f003 febc 	bl	6334 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    25bc:	f000 fcb6 	bl	2f2c <z_arm_interrupt_init>
	z_cstart();
    25c0:	f003 f818 	bl	55f4 <z_cstart>
    25c4:	e000ed00 	.word	0xe000ed00
    25c8:	00000000 	.word	0x00000000

000025cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    25cc:	4a0a      	ldr	r2, [pc, #40]	; (25f8 <arch_swap+0x2c>)
    25ce:	6893      	ldr	r3, [r2, #8]
    25d0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    25d4:	4909      	ldr	r1, [pc, #36]	; (25fc <arch_swap+0x30>)
    25d6:	6809      	ldr	r1, [r1, #0]
    25d8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    25dc:	4908      	ldr	r1, [pc, #32]	; (2600 <arch_swap+0x34>)
    25de:	684b      	ldr	r3, [r1, #4]
    25e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    25e4:	604b      	str	r3, [r1, #4]
    25e6:	2300      	movs	r3, #0
    25e8:	f383 8811 	msr	BASEPRI, r3
    25ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    25f0:	6893      	ldr	r3, [r2, #8]
}
    25f2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    25f6:	4770      	bx	lr
    25f8:	20000f70 	.word	0x20000f70
    25fc:	000092f0 	.word	0x000092f0
    2600:	e000ed00 	.word	0xe000ed00

00002604 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2604:	4913      	ldr	r1, [pc, #76]	; (2654 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2606:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2608:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    260c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    260e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2612:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2616:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2618:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    261c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2620:	4f0d      	ldr	r7, [pc, #52]	; (2658 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2622:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2626:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2628:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    262a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    262c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2630:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2632:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2636:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    263a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    263c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    263e:	f000 fd17 	bl	3070 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2642:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2646:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    264a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    264e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2652:	4770      	bx	lr
    ldr r1, =_kernel
    2654:	20000f70 	.word	0x20000f70
    ldr v4, =_SCS_ICSR
    2658:	e000ed04 	.word	0xe000ed04

0000265c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    265c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2660:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2662:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2666:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    266a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    266c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2670:	2902      	cmp	r1, #2
    beq _oops
    2672:	d0ff      	beq.n	2674 <_oops>

00002674 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2674:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2676:	f005 f82b 	bl	76d0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    267a:	bd01      	pop	{r0, pc}

0000267c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    267c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    267e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2682:	490d      	ldr	r1, [pc, #52]	; (26b8 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2684:	f021 0101 	bic.w	r1, r1, #1
    2688:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    268c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2690:	9b01      	ldr	r3, [sp, #4]
    2692:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2696:	9b02      	ldr	r3, [sp, #8]
    2698:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    269c:	9b03      	ldr	r3, [sp, #12]
    269e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    26a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    26a6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    26aa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    26ac:	2300      	movs	r3, #0
    26ae:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    26b2:	bc10      	pop	{r4}
    26b4:	4770      	bx	lr
    26b6:	bf00      	nop
    26b8:	00006efd 	.word	0x00006efd

000026bc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    26bc:	4b16      	ldr	r3, [pc, #88]	; (2718 <z_check_thread_stack_fail+0x5c>)
    26be:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    26c0:	b1da      	cbz	r2, 26fa <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    26c2:	f110 0f16 	cmn.w	r0, #22
    26c6:	d01a      	beq.n	26fe <z_check_thread_stack_fail+0x42>
{
    26c8:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    26ca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    26ce:	f1a3 0420 	sub.w	r4, r3, #32
    26d2:	4284      	cmp	r4, r0
    26d4:	d805      	bhi.n	26e2 <z_check_thread_stack_fail+0x26>
    26d6:	4283      	cmp	r3, r0
    26d8:	d908      	bls.n	26ec <z_check_thread_stack_fail+0x30>
    26da:	428b      	cmp	r3, r1
    26dc:	d808      	bhi.n	26f0 <z_check_thread_stack_fail+0x34>
    26de:	2100      	movs	r1, #0
    26e0:	e000      	b.n	26e4 <z_check_thread_stack_fail+0x28>
    26e2:	2100      	movs	r1, #0
    26e4:	b931      	cbnz	r1, 26f4 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    26e6:	2000      	movs	r0, #0
}
    26e8:	bc10      	pop	{r4}
    26ea:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    26ec:	2100      	movs	r1, #0
    26ee:	e7f9      	b.n	26e4 <z_check_thread_stack_fail+0x28>
    26f0:	2101      	movs	r1, #1
    26f2:	e7f7      	b.n	26e4 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    26f4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    26f8:	e7f6      	b.n	26e8 <z_check_thread_stack_fail+0x2c>
		return 0;
    26fa:	2000      	movs	r0, #0
    26fc:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    26fe:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2702:	428b      	cmp	r3, r1
    2704:	bf94      	ite	ls
    2706:	2100      	movls	r1, #0
    2708:	2101      	movhi	r1, #1
    270a:	b909      	cbnz	r1, 2710 <z_check_thread_stack_fail+0x54>
	return 0;
    270c:	2000      	movs	r0, #0
}
    270e:	4770      	bx	lr
		return thread->stack_info.start;
    2710:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2714:	4770      	bx	lr
    2716:	bf00      	nop
    2718:	20000f70 	.word	0x20000f70

0000271c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    271c:	b508      	push	{r3, lr}
    271e:	460d      	mov	r5, r1
    2720:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2722:	4b08      	ldr	r3, [pc, #32]	; (2744 <arch_switch_to_main_thread+0x28>)
    2724:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2726:	f000 fca3 	bl	3070 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    272a:	4620      	mov	r0, r4
    272c:	f385 8809 	msr	PSP, r5
    2730:	2100      	movs	r1, #0
    2732:	b663      	cpsie	if
    2734:	f381 8811 	msr	BASEPRI, r1
    2738:	f3bf 8f6f 	isb	sy
    273c:	2200      	movs	r2, #0
    273e:	2300      	movs	r3, #0
    2740:	f004 fbdc 	bl	6efc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2744:	20000f70 	.word	0x20000f70

00002748 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2748:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    274a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    274c:	4a0b      	ldr	r2, [pc, #44]	; (277c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    274e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2750:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2752:	bf1e      	ittt	ne
	movne	r1, #0
    2754:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2756:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2758:	f005 fd2e 	blne	81b8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    275c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    275e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2762:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2766:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    276a:	4905      	ldr	r1, [pc, #20]	; (2780 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    276c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    276e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2770:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2772:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2776:	4903      	ldr	r1, [pc, #12]	; (2784 <_isr_wrapper+0x3c>)
	bx r1
    2778:	4708      	bx	r1
    277a:	0000      	.short	0x0000
	ldr r2, =_kernel
    277c:	20000f70 	.word	0x20000f70
	ldr r1, =_sw_isr_table
    2780:	000086bc 	.word	0x000086bc
	ldr r1, =z_arm_int_exit
    2784:	00002789 	.word	0x00002789

00002788 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2788:	4b04      	ldr	r3, [pc, #16]	; (279c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    278a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    278c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    278e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2790:	d003      	beq.n	279a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2792:	4903      	ldr	r1, [pc, #12]	; (27a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2798:	600a      	str	r2, [r1, #0]

0000279a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    279a:	4770      	bx	lr
	ldr r3, =_kernel
    279c:	20000f70 	.word	0x20000f70
	ldr r1, =_SCS_ICSR
    27a0:	e000ed04 	.word	0xe000ed04

000027a4 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    27a4:	b508      	push	{r3, lr}
    27a6:	4b4e      	ldr	r3, [pc, #312]	; (28e0 <usage_fault+0x13c>)
    27a8:	4a4e      	ldr	r2, [pc, #312]	; (28e4 <usage_fault+0x140>)
    27aa:	1a9b      	subs	r3, r3, r2
    27ac:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    27ae:	f04f 0100 	mov.w	r1, #0
    27b2:	2201      	movs	r2, #1
    27b4:	f362 0102 	bfi	r1, r2, #0, #3
    27b8:	f36f 01c5 	bfc	r1, #3, #3
    27bc:	f363 118f 	bfi	r1, r3, #6, #10
    27c0:	4849      	ldr	r0, [pc, #292]	; (28e8 <usage_fault+0x144>)
    27c2:	f7ff f83f 	bl	1844 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    27c6:	4b49      	ldr	r3, [pc, #292]	; (28ec <usage_fault+0x148>)
    27c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    27ce:	d121      	bne.n	2814 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    27d0:	4b46      	ldr	r3, [pc, #280]	; (28ec <usage_fault+0x148>)
    27d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    27d8:	d12d      	bne.n	2836 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    27da:	4b44      	ldr	r3, [pc, #272]	; (28ec <usage_fault+0x148>)
    27dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    27e2:	d139      	bne.n	2858 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    27e4:	4b41      	ldr	r3, [pc, #260]	; (28ec <usage_fault+0x148>)
    27e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27e8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    27ec:	d145      	bne.n	287a <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    27ee:	4b3f      	ldr	r3, [pc, #252]	; (28ec <usage_fault+0x148>)
    27f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    27f6:	d151      	bne.n	289c <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    27f8:	4b3c      	ldr	r3, [pc, #240]	; (28ec <usage_fault+0x148>)
    27fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2800:	d15d      	bne.n	28be <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2802:	4a3a      	ldr	r2, [pc, #232]	; (28ec <usage_fault+0x148>)
    2804:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2806:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    280a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    280e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2810:	2000      	movs	r0, #0
    2812:	bd08      	pop	{r3, pc}
    2814:	4b32      	ldr	r3, [pc, #200]	; (28e0 <usage_fault+0x13c>)
    2816:	4a33      	ldr	r2, [pc, #204]	; (28e4 <usage_fault+0x140>)
    2818:	1a9b      	subs	r3, r3, r2
    281a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    281c:	f04f 0100 	mov.w	r1, #0
    2820:	2201      	movs	r2, #1
    2822:	f362 0102 	bfi	r1, r2, #0, #3
    2826:	f36f 01c5 	bfc	r1, #3, #3
    282a:	f363 118f 	bfi	r1, r3, #6, #10
    282e:	4830      	ldr	r0, [pc, #192]	; (28f0 <usage_fault+0x14c>)
    2830:	f7ff f808 	bl	1844 <log_0>
    2834:	e7cc      	b.n	27d0 <usage_fault+0x2c>
    2836:	4b2a      	ldr	r3, [pc, #168]	; (28e0 <usage_fault+0x13c>)
    2838:	4a2a      	ldr	r2, [pc, #168]	; (28e4 <usage_fault+0x140>)
    283a:	1a9b      	subs	r3, r3, r2
    283c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    283e:	f04f 0100 	mov.w	r1, #0
    2842:	2201      	movs	r2, #1
    2844:	f362 0102 	bfi	r1, r2, #0, #3
    2848:	f36f 01c5 	bfc	r1, #3, #3
    284c:	f363 118f 	bfi	r1, r3, #6, #10
    2850:	4828      	ldr	r0, [pc, #160]	; (28f4 <usage_fault+0x150>)
    2852:	f7fe fff7 	bl	1844 <log_0>
    2856:	e7c0      	b.n	27da <usage_fault+0x36>
    2858:	4b21      	ldr	r3, [pc, #132]	; (28e0 <usage_fault+0x13c>)
    285a:	4a22      	ldr	r2, [pc, #136]	; (28e4 <usage_fault+0x140>)
    285c:	1a9b      	subs	r3, r3, r2
    285e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    2860:	f04f 0100 	mov.w	r1, #0
    2864:	2201      	movs	r2, #1
    2866:	f362 0102 	bfi	r1, r2, #0, #3
    286a:	f36f 01c5 	bfc	r1, #3, #3
    286e:	f363 118f 	bfi	r1, r3, #6, #10
    2872:	4821      	ldr	r0, [pc, #132]	; (28f8 <usage_fault+0x154>)
    2874:	f7fe ffe6 	bl	1844 <log_0>
    2878:	e7b4      	b.n	27e4 <usage_fault+0x40>
    287a:	4b19      	ldr	r3, [pc, #100]	; (28e0 <usage_fault+0x13c>)
    287c:	4a19      	ldr	r2, [pc, #100]	; (28e4 <usage_fault+0x140>)
    287e:	1a9b      	subs	r3, r3, r2
    2880:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2882:	f04f 0100 	mov.w	r1, #0
    2886:	2201      	movs	r2, #1
    2888:	f362 0102 	bfi	r1, r2, #0, #3
    288c:	f36f 01c5 	bfc	r1, #3, #3
    2890:	f363 118f 	bfi	r1, r3, #6, #10
    2894:	4819      	ldr	r0, [pc, #100]	; (28fc <usage_fault+0x158>)
    2896:	f7fe ffd5 	bl	1844 <log_0>
    289a:	e7a8      	b.n	27ee <usage_fault+0x4a>
    289c:	4b10      	ldr	r3, [pc, #64]	; (28e0 <usage_fault+0x13c>)
    289e:	4a11      	ldr	r2, [pc, #68]	; (28e4 <usage_fault+0x140>)
    28a0:	1a9b      	subs	r3, r3, r2
    28a2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    28a4:	f04f 0100 	mov.w	r1, #0
    28a8:	2201      	movs	r2, #1
    28aa:	f362 0102 	bfi	r1, r2, #0, #3
    28ae:	f36f 01c5 	bfc	r1, #3, #3
    28b2:	f363 118f 	bfi	r1, r3, #6, #10
    28b6:	4812      	ldr	r0, [pc, #72]	; (2900 <usage_fault+0x15c>)
    28b8:	f7fe ffc4 	bl	1844 <log_0>
    28bc:	e79c      	b.n	27f8 <usage_fault+0x54>
    28be:	4b08      	ldr	r3, [pc, #32]	; (28e0 <usage_fault+0x13c>)
    28c0:	4a08      	ldr	r2, [pc, #32]	; (28e4 <usage_fault+0x140>)
    28c2:	1a9b      	subs	r3, r3, r2
    28c4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    28c6:	f04f 0100 	mov.w	r1, #0
    28ca:	2201      	movs	r2, #1
    28cc:	f362 0102 	bfi	r1, r2, #0, #3
    28d0:	f36f 01c5 	bfc	r1, #3, #3
    28d4:	f363 118f 	bfi	r1, r3, #6, #10
    28d8:	480a      	ldr	r0, [pc, #40]	; (2904 <usage_fault+0x160>)
    28da:	f7fe ffb3 	bl	1844 <log_0>
    28de:	e790      	b.n	2802 <usage_fault+0x5e>
    28e0:	0000886c 	.word	0x0000886c
    28e4:	0000883c 	.word	0x0000883c
    28e8:	00008d64 	.word	0x00008d64
    28ec:	e000ed00 	.word	0xe000ed00
    28f0:	00008d7c 	.word	0x00008d7c
    28f4:	00008d90 	.word	0x00008d90
    28f8:	00008dac 	.word	0x00008dac
    28fc:	00008dcc 	.word	0x00008dcc
    2900:	00008df4 	.word	0x00008df4
    2904:	00008e10 	.word	0x00008e10

00002908 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    2908:	b508      	push	{r3, lr}
	*recoverable = false;
    290a:	2200      	movs	r2, #0
    290c:	700a      	strb	r2, [r1, #0]
    290e:	4b08      	ldr	r3, [pc, #32]	; (2930 <debug_monitor+0x28>)
    2910:	4908      	ldr	r1, [pc, #32]	; (2934 <debug_monitor+0x2c>)
    2912:	1a5b      	subs	r3, r3, r1
    2914:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    2916:	f04f 0100 	mov.w	r1, #0
    291a:	2001      	movs	r0, #1
    291c:	f360 0102 	bfi	r1, r0, #0, #3
    2920:	f362 01c5 	bfi	r1, r2, #3, #3
    2924:	f363 118f 	bfi	r1, r3, #6, #10
    2928:	4803      	ldr	r0, [pc, #12]	; (2938 <debug_monitor+0x30>)
    292a:	f7fe ff8b 	bl	1844 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    292e:	bd08      	pop	{r3, pc}
    2930:	0000886c 	.word	0x0000886c
    2934:	0000883c 	.word	0x0000883c
    2938:	00008e3c 	.word	0x00008e3c

0000293c <bus_fault>:
{
    293c:	b570      	push	{r4, r5, r6, lr}
    293e:	4605      	mov	r5, r0
    2940:	460e      	mov	r6, r1
    2942:	4614      	mov	r4, r2
    2944:	4b5e      	ldr	r3, [pc, #376]	; (2ac0 <bus_fault+0x184>)
    2946:	4a5f      	ldr	r2, [pc, #380]	; (2ac4 <bus_fault+0x188>)
    2948:	1a9b      	subs	r3, r3, r2
    294a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    294c:	f04f 0100 	mov.w	r1, #0
    2950:	2201      	movs	r2, #1
    2952:	f362 0102 	bfi	r1, r2, #0, #3
    2956:	f36f 01c5 	bfc	r1, #3, #3
    295a:	f363 118f 	bfi	r1, r3, #6, #10
    295e:	485a      	ldr	r0, [pc, #360]	; (2ac8 <bus_fault+0x18c>)
    2960:	f7fe ff70 	bl	1844 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2964:	4b59      	ldr	r3, [pc, #356]	; (2acc <bus_fault+0x190>)
    2966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2968:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    296c:	d124      	bne.n	29b8 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    296e:	4b57      	ldr	r3, [pc, #348]	; (2acc <bus_fault+0x190>)
    2970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2972:	f413 6f00 	tst.w	r3, #2048	; 0x800
    2976:	d130      	bne.n	29da <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2978:	4b54      	ldr	r3, [pc, #336]	; (2acc <bus_fault+0x190>)
    297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    297c:	f413 7f00 	tst.w	r3, #512	; 0x200
    2980:	d13c      	bne.n	29fc <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2982:	4b52      	ldr	r3, [pc, #328]	; (2acc <bus_fault+0x190>)
    2984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2986:	f413 6f80 	tst.w	r3, #1024	; 0x400
    298a:	d165      	bne.n	2a58 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    298c:	4b4f      	ldr	r3, [pc, #316]	; (2acc <bus_fault+0x190>)
    298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2990:	f413 7f80 	tst.w	r3, #256	; 0x100
    2994:	d171      	bne.n	2a7a <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2996:	4b4d      	ldr	r3, [pc, #308]	; (2acc <bus_fault+0x190>)
    2998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    299a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    299e:	d17d      	bne.n	2a9c <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    29a0:	4a4a      	ldr	r2, [pc, #296]	; (2acc <bus_fault+0x190>)
    29a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    29a4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    29a8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    29aa:	2101      	movs	r1, #1
    29ac:	4628      	mov	r0, r5
    29ae:	f004 fea1 	bl	76f4 <memory_fault_recoverable>
    29b2:	7020      	strb	r0, [r4, #0]
}
    29b4:	2000      	movs	r0, #0
    29b6:	bd70      	pop	{r4, r5, r6, pc}
    29b8:	4b41      	ldr	r3, [pc, #260]	; (2ac0 <bus_fault+0x184>)
    29ba:	4a42      	ldr	r2, [pc, #264]	; (2ac4 <bus_fault+0x188>)
    29bc:	1a9b      	subs	r3, r3, r2
    29be:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    29c0:	f04f 0100 	mov.w	r1, #0
    29c4:	2201      	movs	r2, #1
    29c6:	f362 0102 	bfi	r1, r2, #0, #3
    29ca:	f36f 01c5 	bfc	r1, #3, #3
    29ce:	f363 118f 	bfi	r1, r3, #6, #10
    29d2:	483f      	ldr	r0, [pc, #252]	; (2ad0 <bus_fault+0x194>)
    29d4:	f7fe ff36 	bl	1844 <log_0>
    29d8:	e7c9      	b.n	296e <bus_fault+0x32>
    29da:	4b39      	ldr	r3, [pc, #228]	; (2ac0 <bus_fault+0x184>)
    29dc:	4a39      	ldr	r2, [pc, #228]	; (2ac4 <bus_fault+0x188>)
    29de:	1a9b      	subs	r3, r3, r2
    29e0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    29e2:	f04f 0100 	mov.w	r1, #0
    29e6:	2201      	movs	r2, #1
    29e8:	f362 0102 	bfi	r1, r2, #0, #3
    29ec:	f36f 01c5 	bfc	r1, #3, #3
    29f0:	f363 118f 	bfi	r1, r3, #6, #10
    29f4:	4837      	ldr	r0, [pc, #220]	; (2ad4 <bus_fault+0x198>)
    29f6:	f7fe ff25 	bl	1844 <log_0>
    29fa:	e7bd      	b.n	2978 <bus_fault+0x3c>
    29fc:	4b30      	ldr	r3, [pc, #192]	; (2ac0 <bus_fault+0x184>)
    29fe:	4a31      	ldr	r2, [pc, #196]	; (2ac4 <bus_fault+0x188>)
    2a00:	1a9b      	subs	r3, r3, r2
    2a02:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    2a04:	f04f 0100 	mov.w	r1, #0
    2a08:	2201      	movs	r2, #1
    2a0a:	f362 0102 	bfi	r1, r2, #0, #3
    2a0e:	f36f 01c5 	bfc	r1, #3, #3
    2a12:	f363 118f 	bfi	r1, r3, #6, #10
    2a16:	4830      	ldr	r0, [pc, #192]	; (2ad8 <bus_fault+0x19c>)
    2a18:	f7fe ff14 	bl	1844 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    2a1c:	4b2b      	ldr	r3, [pc, #172]	; (2acc <bus_fault+0x190>)
    2a1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2a26:	d0ac      	beq.n	2982 <bus_fault+0x46>
    2a28:	4b25      	ldr	r3, [pc, #148]	; (2ac0 <bus_fault+0x184>)
    2a2a:	4a26      	ldr	r2, [pc, #152]	; (2ac4 <bus_fault+0x188>)
    2a2c:	1a9b      	subs	r3, r3, r2
    2a2e:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2a30:	f04f 0200 	mov.w	r2, #0
    2a34:	2001      	movs	r0, #1
    2a36:	f360 0202 	bfi	r2, r0, #0, #3
    2a3a:	f36f 02c5 	bfc	r2, #3, #3
    2a3e:	f363 128f 	bfi	r2, r3, #6, #10
    2a42:	4826      	ldr	r0, [pc, #152]	; (2adc <bus_fault+0x1a0>)
    2a44:	f7fe fe6a 	bl	171c <log_1>
			if (from_hard_fault != 0) {
    2a48:	2e00      	cmp	r6, #0
    2a4a:	d09a      	beq.n	2982 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2a4c:	4a1f      	ldr	r2, [pc, #124]	; (2acc <bus_fault+0x190>)
    2a4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2a54:	6293      	str	r3, [r2, #40]	; 0x28
    2a56:	e794      	b.n	2982 <bus_fault+0x46>
    2a58:	4b19      	ldr	r3, [pc, #100]	; (2ac0 <bus_fault+0x184>)
    2a5a:	4a1a      	ldr	r2, [pc, #104]	; (2ac4 <bus_fault+0x188>)
    2a5c:	1a9b      	subs	r3, r3, r2
    2a5e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    2a60:	f04f 0100 	mov.w	r1, #0
    2a64:	2201      	movs	r2, #1
    2a66:	f362 0102 	bfi	r1, r2, #0, #3
    2a6a:	f36f 01c5 	bfc	r1, #3, #3
    2a6e:	f363 118f 	bfi	r1, r3, #6, #10
    2a72:	481b      	ldr	r0, [pc, #108]	; (2ae0 <bus_fault+0x1a4>)
    2a74:	f7fe fee6 	bl	1844 <log_0>
    2a78:	e788      	b.n	298c <bus_fault+0x50>
    2a7a:	4b11      	ldr	r3, [pc, #68]	; (2ac0 <bus_fault+0x184>)
    2a7c:	4a11      	ldr	r2, [pc, #68]	; (2ac4 <bus_fault+0x188>)
    2a7e:	1a9b      	subs	r3, r3, r2
    2a80:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    2a82:	f04f 0100 	mov.w	r1, #0
    2a86:	2201      	movs	r2, #1
    2a88:	f362 0102 	bfi	r1, r2, #0, #3
    2a8c:	f36f 01c5 	bfc	r1, #3, #3
    2a90:	f363 118f 	bfi	r1, r3, #6, #10
    2a94:	4813      	ldr	r0, [pc, #76]	; (2ae4 <bus_fault+0x1a8>)
    2a96:	f7fe fed5 	bl	1844 <log_0>
    2a9a:	e781      	b.n	29a0 <bus_fault+0x64>
    2a9c:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <bus_fault+0x184>)
    2a9e:	4a09      	ldr	r2, [pc, #36]	; (2ac4 <bus_fault+0x188>)
    2aa0:	1a9b      	subs	r3, r3, r2
    2aa2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2aa4:	f04f 0100 	mov.w	r1, #0
    2aa8:	2201      	movs	r2, #1
    2aaa:	f362 0102 	bfi	r1, r2, #0, #3
    2aae:	f36f 01c5 	bfc	r1, #3, #3
    2ab2:	f363 118f 	bfi	r1, r3, #6, #10
    2ab6:	480c      	ldr	r0, [pc, #48]	; (2ae8 <bus_fault+0x1ac>)
    2ab8:	f7fe fec4 	bl	1844 <log_0>
    2abc:	e770      	b.n	29a0 <bus_fault+0x64>
    2abe:	bf00      	nop
    2ac0:	0000886c 	.word	0x0000886c
    2ac4:	0000883c 	.word	0x0000883c
    2ac8:	00008e60 	.word	0x00008e60
    2acc:	e000ed00 	.word	0xe000ed00
    2ad0:	00008e78 	.word	0x00008e78
    2ad4:	00008e8c 	.word	0x00008e8c
    2ad8:	00008ea0 	.word	0x00008ea0
    2adc:	00008ebc 	.word	0x00008ebc
    2ae0:	00008ed4 	.word	0x00008ed4
    2ae4:	00008ef0 	.word	0x00008ef0
    2ae8:	00008f08 	.word	0x00008f08

00002aec <mem_manage_fault>:
{
    2aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aee:	4605      	mov	r5, r0
    2af0:	460c      	mov	r4, r1
    2af2:	4616      	mov	r6, r2
    2af4:	4b64      	ldr	r3, [pc, #400]	; (2c88 <mem_manage_fault+0x19c>)
    2af6:	4a65      	ldr	r2, [pc, #404]	; (2c8c <mem_manage_fault+0x1a0>)
    2af8:	1a9b      	subs	r3, r3, r2
    2afa:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    2afc:	f04f 0100 	mov.w	r1, #0
    2b00:	2201      	movs	r2, #1
    2b02:	f362 0102 	bfi	r1, r2, #0, #3
    2b06:	f36f 01c5 	bfc	r1, #3, #3
    2b0a:	f363 118f 	bfi	r1, r3, #6, #10
    2b0e:	4860      	ldr	r0, [pc, #384]	; (2c90 <mem_manage_fault+0x1a4>)
    2b10:	f7fe fe98 	bl	1844 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b14:	4b5f      	ldr	r3, [pc, #380]	; (2c94 <mem_manage_fault+0x1a8>)
    2b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b18:	f013 0f10 	tst.w	r3, #16
    2b1c:	d132      	bne.n	2b84 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2b1e:	4b5d      	ldr	r3, [pc, #372]	; (2c94 <mem_manage_fault+0x1a8>)
    2b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b22:	f013 0f08 	tst.w	r3, #8
    2b26:	d13e      	bne.n	2ba6 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2b28:	4b5a      	ldr	r3, [pc, #360]	; (2c94 <mem_manage_fault+0x1a8>)
    2b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b2c:	f013 0f02 	tst.w	r3, #2
    2b30:	d14a      	bne.n	2bc8 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    2b32:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2b36:	4b57      	ldr	r3, [pc, #348]	; (2c94 <mem_manage_fault+0x1a8>)
    2b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b3a:	f013 0f01 	tst.w	r3, #1
    2b3e:	d175      	bne.n	2c2c <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2b40:	4b54      	ldr	r3, [pc, #336]	; (2c94 <mem_manage_fault+0x1a8>)
    2b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b44:	f013 0f20 	tst.w	r3, #32
    2b48:	f040 8081 	bne.w	2c4e <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b4c:	4b51      	ldr	r3, [pc, #324]	; (2c94 <mem_manage_fault+0x1a8>)
    2b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b50:	f013 0f10 	tst.w	r3, #16
    2b54:	d104      	bne.n	2b60 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2b56:	4b4f      	ldr	r3, [pc, #316]	; (2c94 <mem_manage_fault+0x1a8>)
    2b58:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b5a:	f014 0402 	ands.w	r4, r4, #2
    2b5e:	d005      	beq.n	2b6c <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2b60:	4b4c      	ldr	r3, [pc, #304]	; (2c94 <mem_manage_fault+0x1a8>)
    2b62:	685c      	ldr	r4, [r3, #4]
    2b64:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    2b68:	f040 8082 	bne.w	2c70 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2b6c:	4a49      	ldr	r2, [pc, #292]	; (2c94 <mem_manage_fault+0x1a8>)
    2b6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b70:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2b74:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b76:	2101      	movs	r1, #1
    2b78:	4628      	mov	r0, r5
    2b7a:	f004 fdbb 	bl	76f4 <memory_fault_recoverable>
    2b7e:	7030      	strb	r0, [r6, #0]
}
    2b80:	4620      	mov	r0, r4
    2b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b84:	4b40      	ldr	r3, [pc, #256]	; (2c88 <mem_manage_fault+0x19c>)
    2b86:	4a41      	ldr	r2, [pc, #260]	; (2c8c <mem_manage_fault+0x1a0>)
    2b88:	1a9b      	subs	r3, r3, r2
    2b8a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    2b8c:	f04f 0100 	mov.w	r1, #0
    2b90:	2201      	movs	r2, #1
    2b92:	f362 0102 	bfi	r1, r2, #0, #3
    2b96:	f36f 01c5 	bfc	r1, #3, #3
    2b9a:	f363 118f 	bfi	r1, r3, #6, #10
    2b9e:	483e      	ldr	r0, [pc, #248]	; (2c98 <mem_manage_fault+0x1ac>)
    2ba0:	f7fe fe50 	bl	1844 <log_0>
    2ba4:	e7bb      	b.n	2b1e <mem_manage_fault+0x32>
    2ba6:	4b38      	ldr	r3, [pc, #224]	; (2c88 <mem_manage_fault+0x19c>)
    2ba8:	4a38      	ldr	r2, [pc, #224]	; (2c8c <mem_manage_fault+0x1a0>)
    2baa:	1a9b      	subs	r3, r3, r2
    2bac:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    2bae:	f04f 0100 	mov.w	r1, #0
    2bb2:	2201      	movs	r2, #1
    2bb4:	f362 0102 	bfi	r1, r2, #0, #3
    2bb8:	f36f 01c5 	bfc	r1, #3, #3
    2bbc:	f363 118f 	bfi	r1, r3, #6, #10
    2bc0:	4836      	ldr	r0, [pc, #216]	; (2c9c <mem_manage_fault+0x1b0>)
    2bc2:	f7fe fe3f 	bl	1844 <log_0>
    2bc6:	e7af      	b.n	2b28 <mem_manage_fault+0x3c>
    2bc8:	4b2f      	ldr	r3, [pc, #188]	; (2c88 <mem_manage_fault+0x19c>)
    2bca:	4a30      	ldr	r2, [pc, #192]	; (2c8c <mem_manage_fault+0x1a0>)
    2bcc:	1a9b      	subs	r3, r3, r2
    2bce:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    2bd0:	f04f 0100 	mov.w	r1, #0
    2bd4:	2201      	movs	r2, #1
    2bd6:	f362 0102 	bfi	r1, r2, #0, #3
    2bda:	f36f 01c5 	bfc	r1, #3, #3
    2bde:	f363 118f 	bfi	r1, r3, #6, #10
    2be2:	482f      	ldr	r0, [pc, #188]	; (2ca0 <mem_manage_fault+0x1b4>)
    2be4:	f7fe fe2e 	bl	1844 <log_0>
		uint32_t temp = SCB->MMFAR;
    2be8:	4b2a      	ldr	r3, [pc, #168]	; (2c94 <mem_manage_fault+0x1a8>)
    2bea:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bee:	f013 0f80 	tst.w	r3, #128	; 0x80
    2bf2:	d102      	bne.n	2bfa <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    2bf4:	f06f 0715 	mvn.w	r7, #21
    2bf8:	e79d      	b.n	2b36 <mem_manage_fault+0x4a>
    2bfa:	4b23      	ldr	r3, [pc, #140]	; (2c88 <mem_manage_fault+0x19c>)
    2bfc:	4a23      	ldr	r2, [pc, #140]	; (2c8c <mem_manage_fault+0x1a0>)
    2bfe:	1a9b      	subs	r3, r3, r2
    2c00:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2c02:	f04f 0200 	mov.w	r2, #0
    2c06:	2101      	movs	r1, #1
    2c08:	f361 0202 	bfi	r2, r1, #0, #3
    2c0c:	f36f 02c5 	bfc	r2, #3, #3
    2c10:	f363 128f 	bfi	r2, r3, #6, #10
    2c14:	4639      	mov	r1, r7
    2c16:	4823      	ldr	r0, [pc, #140]	; (2ca4 <mem_manage_fault+0x1b8>)
    2c18:	f7fe fd80 	bl	171c <log_1>
			if (from_hard_fault != 0) {
    2c1c:	2c00      	cmp	r4, #0
    2c1e:	d08a      	beq.n	2b36 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2c20:	4a1c      	ldr	r2, [pc, #112]	; (2c94 <mem_manage_fault+0x1a8>)
    2c22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2c28:	6293      	str	r3, [r2, #40]	; 0x28
    2c2a:	e784      	b.n	2b36 <mem_manage_fault+0x4a>
    2c2c:	4b16      	ldr	r3, [pc, #88]	; (2c88 <mem_manage_fault+0x19c>)
    2c2e:	4a17      	ldr	r2, [pc, #92]	; (2c8c <mem_manage_fault+0x1a0>)
    2c30:	1a9b      	subs	r3, r3, r2
    2c32:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    2c34:	f04f 0100 	mov.w	r1, #0
    2c38:	2201      	movs	r2, #1
    2c3a:	f362 0102 	bfi	r1, r2, #0, #3
    2c3e:	f36f 01c5 	bfc	r1, #3, #3
    2c42:	f363 118f 	bfi	r1, r3, #6, #10
    2c46:	4818      	ldr	r0, [pc, #96]	; (2ca8 <mem_manage_fault+0x1bc>)
    2c48:	f7fe fdfc 	bl	1844 <log_0>
    2c4c:	e778      	b.n	2b40 <mem_manage_fault+0x54>
    2c4e:	4b0e      	ldr	r3, [pc, #56]	; (2c88 <mem_manage_fault+0x19c>)
    2c50:	4a0e      	ldr	r2, [pc, #56]	; (2c8c <mem_manage_fault+0x1a0>)
    2c52:	1a9b      	subs	r3, r3, r2
    2c54:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    2c56:	f04f 0100 	mov.w	r1, #0
    2c5a:	2201      	movs	r2, #1
    2c5c:	f362 0102 	bfi	r1, r2, #0, #3
    2c60:	f36f 01c5 	bfc	r1, #3, #3
    2c64:	f363 118f 	bfi	r1, r3, #6, #10
    2c68:	4810      	ldr	r0, [pc, #64]	; (2cac <mem_manage_fault+0x1c0>)
    2c6a:	f7fe fdeb 	bl	1844 <log_0>
    2c6e:	e76d      	b.n	2b4c <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2c70:	4629      	mov	r1, r5
    2c72:	4638      	mov	r0, r7
    2c74:	f7ff fd22 	bl	26bc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2c78:	4604      	mov	r4, r0
    2c7a:	2800      	cmp	r0, #0
    2c7c:	f43f af76 	beq.w	2b6c <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2c80:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2c84:	2402      	movs	r4, #2
    2c86:	e771      	b.n	2b6c <mem_manage_fault+0x80>
    2c88:	0000886c 	.word	0x0000886c
    2c8c:	0000883c 	.word	0x0000883c
    2c90:	00008f38 	.word	0x00008f38
    2c94:	e000ed00 	.word	0xe000ed00
    2c98:	00008f50 	.word	0x00008f50
    2c9c:	00008e8c 	.word	0x00008e8c
    2ca0:	00008f84 	.word	0x00008f84
    2ca4:	00008f9c 	.word	0x00008f9c
    2ca8:	00008fb4 	.word	0x00008fb4
    2cac:	00008f08 	.word	0x00008f08

00002cb0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    2cb0:	b570      	push	{r4, r5, r6, lr}
    2cb2:	4605      	mov	r5, r0
    2cb4:	460c      	mov	r4, r1
    2cb6:	4b47      	ldr	r3, [pc, #284]	; (2dd4 <hard_fault+0x124>)
    2cb8:	4a47      	ldr	r2, [pc, #284]	; (2dd8 <hard_fault+0x128>)
    2cba:	1a9b      	subs	r3, r3, r2
    2cbc:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    2cbe:	f04f 0100 	mov.w	r1, #0
    2cc2:	2201      	movs	r2, #1
    2cc4:	f362 0102 	bfi	r1, r2, #0, #3
    2cc8:	f36f 01c5 	bfc	r1, #3, #3
    2ccc:	f363 118f 	bfi	r1, r3, #6, #10
    2cd0:	4842      	ldr	r0, [pc, #264]	; (2ddc <hard_fault+0x12c>)
    2cd2:	f7fe fdb7 	bl	1844 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    2cd6:	2300      	movs	r3, #0
    2cd8:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cda:	4b41      	ldr	r3, [pc, #260]	; (2de0 <hard_fault+0x130>)
    2cdc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    2cde:	f016 0602 	ands.w	r6, r6, #2
    2ce2:	d109      	bne.n	2cf8 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2ce4:	4b3e      	ldr	r3, [pc, #248]	; (2de0 <hard_fault+0x130>)
    2ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ce8:	2b00      	cmp	r3, #0
    2cea:	db17      	blt.n	2d1c <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2cec:	4b3c      	ldr	r3, [pc, #240]	; (2de0 <hard_fault+0x130>)
    2cee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2cf0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    2cf4:	d124      	bne.n	2d40 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    2cf6:	bd70      	pop	{r4, r5, r6, pc}
    2cf8:	4b36      	ldr	r3, [pc, #216]	; (2dd4 <hard_fault+0x124>)
    2cfa:	4a37      	ldr	r2, [pc, #220]	; (2dd8 <hard_fault+0x128>)
    2cfc:	1a9b      	subs	r3, r3, r2
    2cfe:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    2d00:	f04f 0100 	mov.w	r1, #0
    2d04:	2201      	movs	r2, #1
    2d06:	f362 0102 	bfi	r1, r2, #0, #3
    2d0a:	f36f 01c5 	bfc	r1, #3, #3
    2d0e:	f363 118f 	bfi	r1, r3, #6, #10
    2d12:	4834      	ldr	r0, [pc, #208]	; (2de4 <hard_fault+0x134>)
    2d14:	f7fe fd96 	bl	1844 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2d18:	2000      	movs	r0, #0
    2d1a:	e7ec      	b.n	2cf6 <hard_fault+0x46>
    2d1c:	4b2d      	ldr	r3, [pc, #180]	; (2dd4 <hard_fault+0x124>)
    2d1e:	4a2e      	ldr	r2, [pc, #184]	; (2dd8 <hard_fault+0x128>)
    2d20:	1a9b      	subs	r3, r3, r2
    2d22:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    2d24:	f04f 0100 	mov.w	r1, #0
    2d28:	2201      	movs	r2, #1
    2d2a:	f362 0102 	bfi	r1, r2, #0, #3
    2d2e:	f36f 01c5 	bfc	r1, #3, #3
    2d32:	f363 118f 	bfi	r1, r3, #6, #10
    2d36:	482c      	ldr	r0, [pc, #176]	; (2de8 <hard_fault+0x138>)
    2d38:	f7fe fd84 	bl	1844 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2d3c:	4630      	mov	r0, r6
    2d3e:	e7da      	b.n	2cf6 <hard_fault+0x46>
    2d40:	4b24      	ldr	r3, [pc, #144]	; (2dd4 <hard_fault+0x124>)
    2d42:	4a25      	ldr	r2, [pc, #148]	; (2dd8 <hard_fault+0x128>)
    2d44:	1a9b      	subs	r3, r3, r2
    2d46:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    2d48:	f04f 0100 	mov.w	r1, #0
    2d4c:	2201      	movs	r2, #1
    2d4e:	f362 0102 	bfi	r1, r2, #0, #3
    2d52:	f36f 01c5 	bfc	r1, #3, #3
    2d56:	f363 118f 	bfi	r1, r3, #6, #10
    2d5a:	4824      	ldr	r0, [pc, #144]	; (2dec <hard_fault+0x13c>)
    2d5c:	f7fe fd72 	bl	1844 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2d60:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    2d62:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2d66:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2d6a:	429a      	cmp	r2, r3
    2d6c:	d00e      	beq.n	2d8c <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    2d6e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2d72:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2d76:	781b      	ldrb	r3, [r3, #0]
    2d78:	b9db      	cbnz	r3, 2db2 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    2d7a:	4b1d      	ldr	r3, [pc, #116]	; (2df0 <hard_fault+0x140>)
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	b9f3      	cbnz	r3, 2dbe <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    2d80:	4b1c      	ldr	r3, [pc, #112]	; (2df4 <hard_fault+0x144>)
    2d82:	881b      	ldrh	r3, [r3, #0]
    2d84:	b29b      	uxth	r3, r3
    2d86:	bb03      	cbnz	r3, 2dca <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2d88:	4630      	mov	r0, r6
	return reason;
    2d8a:	e7b4      	b.n	2cf6 <hard_fault+0x46>
    2d8c:	4b11      	ldr	r3, [pc, #68]	; (2dd4 <hard_fault+0x124>)
    2d8e:	4a12      	ldr	r2, [pc, #72]	; (2dd8 <hard_fault+0x128>)
    2d90:	1a9b      	subs	r3, r3, r2
    2d92:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2d94:	f04f 0200 	mov.w	r2, #0
    2d98:	2101      	movs	r1, #1
    2d9a:	f361 0202 	bfi	r2, r1, #0, #3
    2d9e:	f36f 02c5 	bfc	r2, #3, #3
    2da2:	f363 128f 	bfi	r2, r3, #6, #10
    2da6:	6829      	ldr	r1, [r5, #0]
    2da8:	4813      	ldr	r0, [pc, #76]	; (2df8 <hard_fault+0x148>)
    2daa:	f7fe fcb7 	bl	171c <log_1>
			reason = esf->basic.r0;
    2dae:	6828      	ldr	r0, [r5, #0]
    2db0:	e7a1      	b.n	2cf6 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    2db2:	4622      	mov	r2, r4
    2db4:	2101      	movs	r1, #1
    2db6:	4628      	mov	r0, r5
    2db8:	f7ff fe98 	bl	2aec <mem_manage_fault>
    2dbc:	e79b      	b.n	2cf6 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    2dbe:	4622      	mov	r2, r4
    2dc0:	2101      	movs	r1, #1
    2dc2:	4628      	mov	r0, r5
    2dc4:	f7ff fdba 	bl	293c <bus_fault>
    2dc8:	e795      	b.n	2cf6 <hard_fault+0x46>
			reason = usage_fault(esf);
    2dca:	4628      	mov	r0, r5
    2dcc:	f7ff fcea 	bl	27a4 <usage_fault>
    2dd0:	e791      	b.n	2cf6 <hard_fault+0x46>
    2dd2:	bf00      	nop
    2dd4:	0000886c 	.word	0x0000886c
    2dd8:	0000883c 	.word	0x0000883c
    2ddc:	00008fd4 	.word	0x00008fd4
    2de0:	e000ed00 	.word	0xe000ed00
    2de4:	00008fec 	.word	0x00008fec
    2de8:	00009010 	.word	0x00009010
    2dec:	00009020 	.word	0x00009020
    2df0:	e000ed29 	.word	0xe000ed29
    2df4:	e000ed2a 	.word	0xe000ed2a
    2df8:	00009040 	.word	0x00009040

00002dfc <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    2dfc:	b508      	push	{r3, lr}
    2dfe:	460a      	mov	r2, r1
    2e00:	480b      	ldr	r0, [pc, #44]	; (2e30 <reserved_exception+0x34>)
    2e02:	4b0c      	ldr	r3, [pc, #48]	; (2e34 <reserved_exception+0x38>)
    2e04:	1ac0      	subs	r0, r0, r3
    2e06:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    2e08:	f04f 0300 	mov.w	r3, #0
    2e0c:	2101      	movs	r1, #1
    2e0e:	f361 0302 	bfi	r3, r1, #0, #3
    2e12:	f36f 03c5 	bfc	r3, #3, #3
    2e16:	f360 138f 	bfi	r3, r0, #6, #10
    2e1a:	2a0f      	cmp	r2, #15
    2e1c:	dc05      	bgt.n	2e2a <reserved_exception+0x2e>
    2e1e:	4906      	ldr	r1, [pc, #24]	; (2e38 <reserved_exception+0x3c>)
    2e20:	3a10      	subs	r2, #16
    2e22:	4806      	ldr	r0, [pc, #24]	; (2e3c <reserved_exception+0x40>)
    2e24:	f7fe fcb0 	bl	1788 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    2e28:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    2e2a:	4905      	ldr	r1, [pc, #20]	; (2e40 <reserved_exception+0x44>)
    2e2c:	e7f8      	b.n	2e20 <reserved_exception+0x24>
    2e2e:	bf00      	nop
    2e30:	0000886c 	.word	0x0000886c
    2e34:	0000883c 	.word	0x0000883c
    2e38:	0000905c 	.word	0x0000905c
    2e3c:	00009090 	.word	0x00009090
    2e40:	00009074 	.word	0x00009074

00002e44 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2e44:	b570      	push	{r4, r5, r6, lr}
    2e46:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2e48:	4b2b      	ldr	r3, [pc, #172]	; (2ef8 <z_arm_fault+0xb4>)
    2e4a:	685d      	ldr	r5, [r3, #4]
    2e4c:	f3c5 0508 	ubfx	r5, r5, #0, #9
    2e50:	2300      	movs	r3, #0
    2e52:	f383 8811 	msr	BASEPRI, r3
    2e56:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2e5a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2e5e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2e62:	d12a      	bne.n	2eba <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2e64:	f002 030c 	and.w	r3, r2, #12
    2e68:	2b08      	cmp	r3, #8
    2e6a:	d010      	beq.n	2e8e <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2e6c:	f012 0f08 	tst.w	r2, #8
    2e70:	d020      	beq.n	2eb4 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    2e72:	460c      	mov	r4, r1
	*nested_exc = false;
    2e74:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    2e76:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    2e7a:	4629      	mov	r1, r5
    2e7c:	4620      	mov	r0, r4
    2e7e:	f004 fc3b 	bl	76f8 <fault_handle>
    2e82:	4605      	mov	r5, r0
	if (recoverable) {
    2e84:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2e88:	b1d3      	cbz	r3, 2ec0 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    2e8a:	b00a      	add	sp, #40	; 0x28
    2e8c:	bd70      	pop	{r4, r5, r6, pc}
    2e8e:	4b1b      	ldr	r3, [pc, #108]	; (2efc <z_arm_fault+0xb8>)
    2e90:	4a1b      	ldr	r2, [pc, #108]	; (2f00 <z_arm_fault+0xbc>)
    2e92:	1a9b      	subs	r3, r3, r2
    2e94:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2e96:	f04f 0100 	mov.w	r1, #0
    2e9a:	2201      	movs	r2, #1
    2e9c:	f362 0102 	bfi	r1, r2, #0, #3
    2ea0:	f36f 01c5 	bfc	r1, #3, #3
    2ea4:	f363 118f 	bfi	r1, r3, #6, #10
    2ea8:	4816      	ldr	r0, [pc, #88]	; (2f04 <z_arm_fault+0xc0>)
    2eaa:	f7fe fccb 	bl	1844 <log_0>
	*nested_exc = false;
    2eae:	2600      	movs	r6, #0
		return NULL;
    2eb0:	4634      	mov	r4, r6
    2eb2:	e7e0      	b.n	2e76 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    2eb4:	4604      	mov	r4, r0
			*nested_exc = true;
    2eb6:	2601      	movs	r6, #1
    2eb8:	e7dd      	b.n	2e76 <z_arm_fault+0x32>
	*nested_exc = false;
    2eba:	2600      	movs	r6, #0
		return NULL;
    2ebc:	4634      	mov	r4, r6
    2ebe:	e7da      	b.n	2e76 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2ec0:	2220      	movs	r2, #32
    2ec2:	4621      	mov	r1, r4
    2ec4:	a801      	add	r0, sp, #4
    2ec6:	f004 fcb3 	bl	7830 <memcpy>
	if (nested_exc) {
    2eca:	b14e      	cbz	r6, 2ee0 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2ecc:	9b08      	ldr	r3, [sp, #32]
    2ece:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2ed2:	b95a      	cbnz	r2, 2eec <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2ed4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2ed8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2edc:	9308      	str	r3, [sp, #32]
    2ede:	e005      	b.n	2eec <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2ee0:	9b08      	ldr	r3, [sp, #32]
    2ee2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2ee6:	f023 0301 	bic.w	r3, r3, #1
    2eea:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    2eec:	a901      	add	r1, sp, #4
    2eee:	4628      	mov	r0, r5
    2ef0:	f004 fbe2 	bl	76b8 <z_arm_fatal_error>
    2ef4:	e7c9      	b.n	2e8a <z_arm_fault+0x46>
    2ef6:	bf00      	nop
    2ef8:	e000ed00 	.word	0xe000ed00
    2efc:	0000886c 	.word	0x0000886c
    2f00:	0000883c 	.word	0x0000883c
    2f04:	000090a4 	.word	0x000090a4

00002f08 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2f08:	4a02      	ldr	r2, [pc, #8]	; (2f14 <z_arm_fault_init+0xc>)
    2f0a:	6953      	ldr	r3, [r2, #20]
    2f0c:	f043 0310 	orr.w	r3, r3, #16
    2f10:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2f12:	4770      	bx	lr
    2f14:	e000ed00 	.word	0xe000ed00

00002f18 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2f18:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2f1c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2f20:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2f22:	4672      	mov	r2, lr
	bl z_arm_fault
    2f24:	f7ff ff8e 	bl	2e44 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2f28:	bd01      	pop	{r0, pc}
    2f2a:	bf00      	nop

00002f2c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2f2c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2f2e:	e006      	b.n	2f3e <z_arm_interrupt_init+0x12>
    2f30:	f002 010f 	and.w	r1, r2, #15
    2f34:	4b09      	ldr	r3, [pc, #36]	; (2f5c <z_arm_interrupt_init+0x30>)
    2f36:	440b      	add	r3, r1
    2f38:	2120      	movs	r1, #32
    2f3a:	7619      	strb	r1, [r3, #24]
    2f3c:	3201      	adds	r2, #1
    2f3e:	2a2f      	cmp	r2, #47	; 0x2f
    2f40:	dc0a      	bgt.n	2f58 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    2f42:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2f44:	2b00      	cmp	r3, #0
    2f46:	dbf3      	blt.n	2f30 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f48:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2f4c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2f50:	2120      	movs	r1, #32
    2f52:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2f56:	e7f1      	b.n	2f3c <z_arm_interrupt_init+0x10>
	}
}
    2f58:	4770      	bx	lr
    2f5a:	bf00      	nop
    2f5c:	e000ecfc 	.word	0xe000ecfc

00002f60 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2f60:	2000      	movs	r0, #0
    msr CONTROL, r0
    2f62:	f380 8814 	msr	CONTROL, r0
    isb
    2f66:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2f6a:	f005 fb31 	bl	85d0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2f6e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2f70:	490d      	ldr	r1, [pc, #52]	; (2fa8 <__start+0x48>)
    str r0, [r1]
    2f72:	6008      	str	r0, [r1, #0]
    dsb
    2f74:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2f78:	480c      	ldr	r0, [pc, #48]	; (2fac <__start+0x4c>)
    msr msp, r0
    2f7a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2f7e:	f000 f829 	bl	2fd4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2f82:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2f84:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2f88:	4809      	ldr	r0, [pc, #36]	; (2fb0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2f8a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2f8e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2f90:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2f94:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2f98:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2f9a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2f9c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2fa0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2fa4:	f7ff faf6 	bl	2594 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2fa8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2fac:	200018c0 	.word	0x200018c0
    ldr r0, =z_interrupt_stacks
    2fb0:	20001a40 	.word	0x20001a40

00002fb4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2fb4:	4b06      	ldr	r3, [pc, #24]	; (2fd0 <z_arm_clear_arm_mpu_config+0x1c>)
    2fb6:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    2fb8:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    2fbc:	2300      	movs	r3, #0
    2fbe:	4283      	cmp	r3, r0
    2fc0:	da05      	bge.n	2fce <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    2fc2:	4a03      	ldr	r2, [pc, #12]	; (2fd0 <z_arm_clear_arm_mpu_config+0x1c>)
    2fc4:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2fc6:	2100      	movs	r1, #0
    2fc8:	6111      	str	r1, [r2, #16]
    2fca:	3301      	adds	r3, #1
    2fcc:	e7f7      	b.n	2fbe <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    2fce:	4770      	bx	lr
    2fd0:	e000ed90 	.word	0xe000ed90

00002fd4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2fd4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2fd6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2fd8:	2400      	movs	r4, #0
    2fda:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2fde:	f7ff ffe9 	bl	2fb4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2fe2:	4623      	mov	r3, r4
    2fe4:	e008      	b.n	2ff8 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    2fe6:	f103 0120 	add.w	r1, r3, #32
    2fea:	4a0e      	ldr	r2, [pc, #56]	; (3024 <z_arm_init_arch_hw_at_boot+0x50>)
    2fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ff0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2ff4:	3301      	adds	r3, #1
    2ff6:	b2db      	uxtb	r3, r3
    2ff8:	2b07      	cmp	r3, #7
    2ffa:	d9f4      	bls.n	2fe6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2ffc:	2300      	movs	r3, #0
    2ffe:	e008      	b.n	3012 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3000:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3004:	4a07      	ldr	r2, [pc, #28]	; (3024 <z_arm_init_arch_hw_at_boot+0x50>)
    3006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    300a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    300e:	3301      	adds	r3, #1
    3010:	b2db      	uxtb	r3, r3
    3012:	2b07      	cmp	r3, #7
    3014:	d9f4      	bls.n	3000 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3016:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    301c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3020:	bd10      	pop	{r4, pc}
    3022:	bf00      	nop
    3024:	e000e100 	.word	0xe000e100

00003028 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3028:	b508      	push	{r3, lr}
	if (_current == thread) {
    302a:	4b08      	ldr	r3, [pc, #32]	; (304c <z_impl_k_thread_abort+0x24>)
    302c:	689b      	ldr	r3, [r3, #8]
    302e:	4283      	cmp	r3, r0
    3030:	d002      	beq.n	3038 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    3032:	f003 f957 	bl	62e4 <z_thread_abort>
}
    3036:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3038:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    303c:	2b00      	cmp	r3, #0
    303e:	d0f8      	beq.n	3032 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3040:	4a03      	ldr	r2, [pc, #12]	; (3050 <z_impl_k_thread_abort+0x28>)
    3042:	6853      	ldr	r3, [r2, #4]
    3044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3048:	6053      	str	r3, [r2, #4]
    304a:	e7f2      	b.n	3032 <z_impl_k_thread_abort+0xa>
    304c:	20000f70 	.word	0x20000f70
    3050:	e000ed00 	.word	0xe000ed00

00003054 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3054:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3056:	4b03      	ldr	r3, [pc, #12]	; (3064 <z_arm_configure_static_mpu_regions+0x10>)
    3058:	4a03      	ldr	r2, [pc, #12]	; (3068 <z_arm_configure_static_mpu_regions+0x14>)
    305a:	2101      	movs	r1, #1
    305c:	4803      	ldr	r0, [pc, #12]	; (306c <z_arm_configure_static_mpu_regions+0x18>)
    305e:	f004 fba0 	bl	77a2 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3062:	bd08      	pop	{r3, pc}
    3064:	20040000 	.word	0x20040000
    3068:	20000000 	.word	0x20000000
    306c:	000090d4 	.word	0x000090d4

00003070 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3070:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3072:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    3076:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3078:	4804      	ldr	r0, [pc, #16]	; (308c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    307a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    307c:	2320      	movs	r3, #32
    307e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3080:	4b03      	ldr	r3, [pc, #12]	; (3090 <z_arm_configure_dynamic_mpu_regions+0x20>)
    3082:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3084:	2101      	movs	r1, #1
    3086:	f004 fb90 	bl	77aa <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    308a:	bd08      	pop	{r3, pc}
    308c:	20000a14 	.word	0x20000a14
    3090:	150b0000 	.word	0x150b0000

00003094 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3094:	4a06      	ldr	r2, [pc, #24]	; (30b0 <region_init+0x1c>)
    3096:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3098:	680b      	ldr	r3, [r1, #0]
    309a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    309e:	4303      	orrs	r3, r0
    30a0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    30a4:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    30a6:	688b      	ldr	r3, [r1, #8]
    30a8:	f043 0301 	orr.w	r3, r3, #1
    30ac:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    30ae:	4770      	bx	lr
    30b0:	e000ed90 	.word	0xe000ed90

000030b4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    30b4:	b510      	push	{r4, lr}
    30b6:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    30b8:	2807      	cmp	r0, #7
    30ba:	d803      	bhi.n	30c4 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    30bc:	f7ff ffea 	bl	3094 <region_init>

	return index;
    30c0:	4620      	mov	r0, r4
}
    30c2:	bd10      	pop	{r4, pc}
    30c4:	4b09      	ldr	r3, [pc, #36]	; (30ec <region_allocate_and_init+0x38>)
    30c6:	4a0a      	ldr	r2, [pc, #40]	; (30f0 <region_allocate_and_init+0x3c>)
    30c8:	1a9b      	subs	r3, r3, r2
    30ca:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    30cc:	f04f 0200 	mov.w	r2, #0
    30d0:	2101      	movs	r1, #1
    30d2:	f361 0202 	bfi	r2, r1, #0, #3
    30d6:	f36f 02c5 	bfc	r2, #3, #3
    30da:	f363 128f 	bfi	r2, r3, #6, #10
    30de:	4601      	mov	r1, r0
    30e0:	4804      	ldr	r0, [pc, #16]	; (30f4 <region_allocate_and_init+0x40>)
    30e2:	f7fe fb1b 	bl	171c <log_1>
		return -EINVAL;
    30e6:	f06f 0015 	mvn.w	r0, #21
    30ea:	e7ea      	b.n	30c2 <region_allocate_and_init+0xe>
    30ec:	00008864 	.word	0x00008864
    30f0:	0000883c 	.word	0x0000883c
    30f4:	000090e0 	.word	0x000090e0

000030f8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    30f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30fc:	4680      	mov	r8, r0
    30fe:	460f      	mov	r7, r1
    3100:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    3102:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    3104:	2400      	movs	r4, #0
    3106:	e009      	b.n	311c <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3108:	4629      	mov	r1, r5
    310a:	b2f0      	uxtb	r0, r6
    310c:	f004 fb2a 	bl	7764 <mpu_configure_region>
    3110:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    3112:	f110 0f16 	cmn.w	r0, #22
    3116:	d025      	beq.n	3164 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3118:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    311a:	3401      	adds	r4, #1
    311c:	42bc      	cmp	r4, r7
    311e:	da21      	bge.n	3164 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    3120:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    3124:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    3128:	686a      	ldr	r2, [r5, #4]
    312a:	2a00      	cmp	r2, #0
    312c:	d0f5      	beq.n	311a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    312e:	f1ba 0f00 	cmp.w	sl, #0
    3132:	d0e9      	beq.n	3108 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    3134:	4628      	mov	r0, r5
    3136:	f004 fb04 	bl	7742 <mpu_partition_is_valid>
		if (do_sanity_check &&
    313a:	2800      	cmp	r0, #0
    313c:	d1e4      	bne.n	3108 <mpu_configure_regions+0x10>
    313e:	4b0b      	ldr	r3, [pc, #44]	; (316c <mpu_configure_regions+0x74>)
    3140:	4a0b      	ldr	r2, [pc, #44]	; (3170 <mpu_configure_regions+0x78>)
    3142:	1a9b      	subs	r3, r3, r2
    3144:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    3146:	f04f 0200 	mov.w	r2, #0
    314a:	2101      	movs	r1, #1
    314c:	f361 0202 	bfi	r2, r1, #0, #3
    3150:	f36f 02c5 	bfc	r2, #3, #3
    3154:	f363 128f 	bfi	r2, r3, #6, #10
    3158:	4621      	mov	r1, r4
    315a:	4806      	ldr	r0, [pc, #24]	; (3174 <mpu_configure_regions+0x7c>)
    315c:	f7fe fade 	bl	171c <log_1>
			return -EINVAL;
    3160:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    3164:	4630      	mov	r0, r6
    3166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    316a:	bf00      	nop
    316c:	00008864 	.word	0x00008864
    3170:	0000883c 	.word	0x0000883c
    3174:	00009108 	.word	0x00009108

00003178 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    3178:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    317a:	4c03      	ldr	r4, [pc, #12]	; (3188 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    317c:	2301      	movs	r3, #1
    317e:	7822      	ldrb	r2, [r4, #0]
    3180:	f7ff ffba 	bl	30f8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3184:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    3186:	bd10      	pop	{r4, pc}
    3188:	20000fc9 	.word	0x20000fc9

0000318c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    318c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    318e:	2300      	movs	r3, #0
    3190:	4a08      	ldr	r2, [pc, #32]	; (31b4 <mpu_configure_dynamic_mpu_regions+0x28>)
    3192:	7812      	ldrb	r2, [r2, #0]
    3194:	f7ff ffb0 	bl	30f8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3198:	f110 0f16 	cmn.w	r0, #22
    319c:	d008      	beq.n	31b0 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    319e:	4603      	mov	r3, r0
    31a0:	2b07      	cmp	r3, #7
    31a2:	dc05      	bgt.n	31b0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    31a4:	4a04      	ldr	r2, [pc, #16]	; (31b8 <mpu_configure_dynamic_mpu_regions+0x2c>)
    31a6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    31a8:	2100      	movs	r1, #0
    31aa:	6111      	str	r1, [r2, #16]
    31ac:	3301      	adds	r3, #1
    31ae:	e7f7      	b.n	31a0 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    31b0:	bd08      	pop	{r3, pc}
    31b2:	bf00      	nop
    31b4:	20000fc9 	.word	0x20000fc9
    31b8:	e000ed90 	.word	0xe000ed90

000031bc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    31bc:	4b03      	ldr	r3, [pc, #12]	; (31cc <arm_core_mpu_enable+0x10>)
    31be:	2205      	movs	r2, #5
    31c0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    31c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31c6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    31ca:	4770      	bx	lr
    31cc:	e000ed90 	.word	0xe000ed90

000031d0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    31d0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    31d4:	4b01      	ldr	r3, [pc, #4]	; (31dc <arm_core_mpu_disable+0xc>)
    31d6:	2200      	movs	r2, #0
    31d8:	605a      	str	r2, [r3, #4]
}
    31da:	4770      	bx	lr
    31dc:	e000ed90 	.word	0xe000ed90

000031e0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    31e0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    31e2:	4b0e      	ldr	r3, [pc, #56]	; (321c <z_arm_mpu_init+0x3c>)
    31e4:	681d      	ldr	r5, [r3, #0]
    31e6:	2d08      	cmp	r5, #8
    31e8:	d815      	bhi.n	3216 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    31ea:	f7ff fff1 	bl	31d0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    31ee:	2400      	movs	r4, #0
    31f0:	42a5      	cmp	r5, r4
    31f2:	d90a      	bls.n	320a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    31f4:	4b09      	ldr	r3, [pc, #36]	; (321c <z_arm_mpu_init+0x3c>)
    31f6:	6859      	ldr	r1, [r3, #4]
    31f8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    31fc:	0093      	lsls	r3, r2, #2
    31fe:	4419      	add	r1, r3
    3200:	4620      	mov	r0, r4
    3202:	f7ff ff47 	bl	3094 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3206:	3401      	adds	r4, #1
    3208:	e7f2      	b.n	31f0 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    320a:	4b05      	ldr	r3, [pc, #20]	; (3220 <z_arm_mpu_init+0x40>)
    320c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    320e:	f7ff ffd5 	bl	31bc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3212:	2000      	movs	r0, #0
}
    3214:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    3216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    321a:	e7fb      	b.n	3214 <z_arm_mpu_init+0x34>
    321c:	0000913c 	.word	0x0000913c
    3220:	20000fc9 	.word	0x20000fc9

00003224 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3224:	4b01      	ldr	r3, [pc, #4]	; (322c <__stdout_hook_install+0x8>)
    3226:	6018      	str	r0, [r3, #0]
}
    3228:	4770      	bx	lr
    322a:	bf00      	nop
    322c:	20000028 	.word	0x20000028

00003230 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3230:	4b06      	ldr	r3, [pc, #24]	; (324c <nrf52_errata_197+0x1c>)
    3232:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3234:	4a06      	ldr	r2, [pc, #24]	; (3250 <nrf52_errata_197+0x20>)
    3236:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3238:	2b08      	cmp	r3, #8
    323a:	d001      	beq.n	3240 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    323c:	2000      	movs	r0, #0
    323e:	4770      	bx	lr
                switch(var2)
    3240:	2a02      	cmp	r2, #2
    3242:	d001      	beq.n	3248 <nrf52_errata_197+0x18>
                        return false;
    3244:	2000      	movs	r0, #0
    3246:	4770      	bx	lr
                        return true;
    3248:	2001      	movs	r0, #1
    #endif
}
    324a:	4770      	bx	lr
    324c:	10000130 	.word	0x10000130
    3250:	10000134 	.word	0x10000134

00003254 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3254:	b510      	push	{r4, lr}
	__asm__ volatile(
    3256:	f04f 0320 	mov.w	r3, #32
    325a:	f3ef 8411 	mrs	r4, BASEPRI
    325e:	f383 8812 	msr	BASEPRI_MAX, r3
    3262:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3266:	2301      	movs	r3, #1
    3268:	4a0b      	ldr	r2, [pc, #44]	; (3298 <nordicsemi_nrf52_init+0x44>)
    326a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    326e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3272:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3276:	f7ff ffdb 	bl	3230 <nrf52_errata_197>
    327a:	b110      	cbz	r0, 3282 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    327c:	4b07      	ldr	r3, [pc, #28]	; (329c <nordicsemi_nrf52_init+0x48>)
    327e:	2201      	movs	r2, #1
    3280:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3286:	2201      	movs	r2, #1
    3288:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    328c:	f384 8811 	msr	BASEPRI, r4
    3290:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3294:	2000      	movs	r0, #0
    3296:	bd10      	pop	{r4, pc}
    3298:	4001e000 	.word	0x4001e000
    329c:	40000638 	.word	0x40000638

000032a0 <sys_arch_reboot>:
    *p_gpregret = val;
    32a0:	b2c0      	uxtb	r0, r0
    32a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32a6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    32aa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    32ae:	4905      	ldr	r1, [pc, #20]	; (32c4 <sys_arch_reboot+0x24>)
    32b0:	68ca      	ldr	r2, [r1, #12]
    32b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    32b6:	4b04      	ldr	r3, [pc, #16]	; (32c8 <sys_arch_reboot+0x28>)
    32b8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    32ba:	60cb      	str	r3, [r1, #12]
    32bc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    32c0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    32c2:	e7fd      	b.n	32c0 <sys_arch_reboot+0x20>
    32c4:	e000ed00 	.word	0xe000ed00
    32c8:	05fa0004 	.word	0x05fa0004

000032cc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    32cc:	b130      	cbz	r0, 32dc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    32ce:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    32d0:	0180      	lsls	r0, r0, #6
    32d2:	4b03      	ldr	r3, [pc, #12]	; (32e0 <arch_busy_wait+0x14>)
    32d4:	f043 0301 	orr.w	r3, r3, #1
    32d8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    32da:	bd08      	pop	{r3, pc}
    32dc:	4770      	bx	lr
    32de:	bf00      	nop
    32e0:	00008930 	.word	0x00008930

000032e4 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    32e4:	4800      	ldr	r0, [pc, #0]	; (32e8 <get_hf_flags+0x4>)
    32e6:	4770      	bx	lr
    32e8:	20000a70 	.word	0x20000a70

000032ec <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    32ec:	4b03      	ldr	r3, [pc, #12]	; (32fc <get_subsys+0x10>)
    32ee:	1ac0      	subs	r0, r0, r3
    32f0:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    32f2:	4b03      	ldr	r3, [pc, #12]	; (3300 <get_subsys+0x14>)
    32f4:	fb03 f000 	mul.w	r0, r3, r0
    32f8:	4770      	bx	lr
    32fa:	bf00      	nop
    32fc:	20000a30 	.word	0x20000a30
    3300:	b6db6db7 	.word	0xb6db6db7

00003304 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3304:	b538      	push	{r3, r4, r5, lr}
    3306:	4605      	mov	r5, r0
    3308:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    330a:	f7ff ffef 	bl	32ec <get_subsys>
    330e:	4601      	mov	r1, r0
    3310:	2240      	movs	r2, #64	; 0x40
    3312:	4803      	ldr	r0, [pc, #12]	; (3320 <onoff_stop+0x1c>)
    3314:	f004 fb67 	bl	79e6 <stop>
    3318:	4601      	mov	r1, r0
	notify(mgr, res);
    331a:	4628      	mov	r0, r5
    331c:	47a0      	blx	r4
}
    331e:	bd38      	pop	{r3, r4, r5, pc}
    3320:	00008644 	.word	0x00008644

00003324 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3324:	b530      	push	{r4, r5, lr}
    3326:	b083      	sub	sp, #12
    3328:	4605      	mov	r5, r0
    332a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    332c:	f7ff ffde 	bl	32ec <get_subsys>
    3330:	4601      	mov	r1, r0
    3332:	2340      	movs	r3, #64	; 0x40
    3334:	9300      	str	r3, [sp, #0]
    3336:	4623      	mov	r3, r4
    3338:	4a05      	ldr	r2, [pc, #20]	; (3350 <onoff_start+0x2c>)
    333a:	4806      	ldr	r0, [pc, #24]	; (3354 <onoff_start+0x30>)
    333c:	f004 fb6d 	bl	7a1a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3340:	1e01      	subs	r1, r0, #0
    3342:	db01      	blt.n	3348 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3344:	b003      	add	sp, #12
    3346:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3348:	4628      	mov	r0, r5
    334a:	47a0      	blx	r4
}
    334c:	e7fa      	b.n	3344 <onoff_start+0x20>
    334e:	bf00      	nop
    3350:	00007a63 	.word	0x00007a63
    3354:	00008644 	.word	0x00008644

00003358 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3358:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    335a:	b110      	cbz	r0, 3362 <clock_event_handler+0xa>
    335c:	2801      	cmp	r0, #1
    335e:	d00d      	beq.n	337c <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    3360:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3362:	2100      	movs	r1, #0
    3364:	4808      	ldr	r0, [pc, #32]	; (3388 <clock_event_handler+0x30>)
    3366:	f004 fac5 	bl	78f4 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    336a:	6883      	ldr	r3, [r0, #8]
    336c:	f013 0f07 	tst.w	r3, #7
    3370:	d1f6      	bne.n	3360 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3372:	2100      	movs	r1, #0
    3374:	4804      	ldr	r0, [pc, #16]	; (3388 <clock_event_handler+0x30>)
    3376:	f004 fb24 	bl	79c2 <clkstarted_handle>
    337a:	e7f1      	b.n	3360 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    337c:	2101      	movs	r1, #1
    337e:	4802      	ldr	r0, [pc, #8]	; (3388 <clock_event_handler+0x30>)
    3380:	f004 fb1f 	bl	79c2 <clkstarted_handle>
}
    3384:	e7ec      	b.n	3360 <clock_event_handler+0x8>
    3386:	bf00      	nop
    3388:	00008644 	.word	0x00008644

0000338c <generic_hfclk_start>:
{
    338c:	b510      	push	{r4, lr}
	__asm__ volatile(
    338e:	f04f 0320 	mov.w	r3, #32
    3392:	f3ef 8411 	mrs	r4, BASEPRI
    3396:	f383 8812 	msr	BASEPRI_MAX, r3
    339a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    339e:	4a13      	ldr	r2, [pc, #76]	; (33ec <generic_hfclk_start+0x60>)
    33a0:	6813      	ldr	r3, [r2, #0]
    33a2:	f043 0302 	orr.w	r3, r3, #2
    33a6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    33a8:	f013 0f01 	tst.w	r3, #1
    33ac:	d108      	bne.n	33c0 <generic_hfclk_start+0x34>
	bool already_started = false;
    33ae:	2300      	movs	r3, #0
	__asm__ volatile(
    33b0:	f384 8811 	msr	BASEPRI, r4
    33b4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    33b8:	b99b      	cbnz	r3, 33e2 <generic_hfclk_start+0x56>
	hfclk_start();
    33ba:	f004 fb5a 	bl	7a72 <hfclk_start>
}
    33be:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    33c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    33c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    33cc:	f012 0f01 	tst.w	r2, #1
    33d0:	d101      	bne.n	33d6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    33d2:	2300      	movs	r3, #0
    33d4:	e7ec      	b.n	33b0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    33d6:	f7ff ff85 	bl	32e4 <get_hf_flags>
    33da:	f004 fadf 	bl	799c <set_on_state>
			already_started = true;
    33de:	2301      	movs	r3, #1
    33e0:	e7e6      	b.n	33b0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    33e2:	2100      	movs	r1, #0
    33e4:	4802      	ldr	r0, [pc, #8]	; (33f0 <generic_hfclk_start+0x64>)
    33e6:	f004 faec 	bl	79c2 <clkstarted_handle>
		return;
    33ea:	e7e8      	b.n	33be <generic_hfclk_start+0x32>
    33ec:	20000a80 	.word	0x20000a80
    33f0:	00008644 	.word	0x00008644

000033f4 <generic_hfclk_stop>:
{
    33f4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    33f6:	4b0a      	ldr	r3, [pc, #40]	; (3420 <generic_hfclk_stop+0x2c>)
    33f8:	f3bf 8f5b 	dmb	ish
    33fc:	e853 2f00 	ldrex	r2, [r3]
    3400:	f022 0102 	bic.w	r1, r2, #2
    3404:	e843 1000 	strex	r0, r1, [r3]
    3408:	2800      	cmp	r0, #0
    340a:	d1f7      	bne.n	33fc <generic_hfclk_stop+0x8>
    340c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3410:	f012 0f01 	tst.w	r2, #1
    3414:	d000      	beq.n	3418 <generic_hfclk_stop+0x24>
}
    3416:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3418:	f004 fb35 	bl	7a86 <hfclk_stop>
    341c:	e7fb      	b.n	3416 <generic_hfclk_stop+0x22>
    341e:	bf00      	nop
    3420:	20000a80 	.word	0x20000a80

00003424 <api_blocking_start>:
{
    3424:	b500      	push	{lr}
    3426:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3428:	f8cd d000 	str.w	sp, [sp]
    342c:	f8cd d004 	str.w	sp, [sp, #4]
    3430:	2300      	movs	r3, #0
    3432:	9302      	str	r3, [sp, #8]
    3434:	2301      	movs	r3, #1
    3436:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3438:	466b      	mov	r3, sp
    343a:	4a07      	ldr	r2, [pc, #28]	; (3458 <api_blocking_start+0x34>)
    343c:	f004 fb09 	bl	7a52 <api_start>
	if (err < 0) {
    3440:	2800      	cmp	r0, #0
    3442:	db05      	blt.n	3450 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    3444:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3448:	2300      	movs	r3, #0
    344a:	4668      	mov	r0, sp
    344c:	f002 fb5e 	bl	5b0c <z_impl_k_sem_take>
}
    3450:	b005      	add	sp, #20
    3452:	f85d fb04 	ldr.w	pc, [sp], #4
    3456:	bf00      	nop
    3458:	00007a9b 	.word	0x00007a9b

0000345c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    345c:	b570      	push	{r4, r5, r6, lr}
    345e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3460:	2200      	movs	r2, #0
    3462:	2101      	movs	r1, #1
    3464:	4610      	mov	r0, r2
    3466:	f7ff f87b 	bl	2560 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    346a:	2000      	movs	r0, #0
    346c:	f7ff f85a 	bl	2524 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3470:	4811      	ldr	r0, [pc, #68]	; (34b8 <clk_init+0x5c>)
    3472:	f001 f883 	bl	457c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3476:	4b11      	ldr	r3, [pc, #68]	; (34bc <clk_init+0x60>)
    3478:	4298      	cmp	r0, r3
    347a:	d11a      	bne.n	34b2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    347c:	f004 fdc4 	bl	8008 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3480:	2400      	movs	r4, #0
    3482:	e003      	b.n	348c <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3484:	2301      	movs	r3, #1
    3486:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3488:	441c      	add	r4, r3
    348a:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    348c:	2c01      	cmp	r4, #1
    348e:	d80e      	bhi.n	34ae <clk_init+0x52>
						get_sub_data(dev, i);
    3490:	4621      	mov	r1, r4
    3492:	4630      	mov	r0, r6
    3494:	f004 fa2e 	bl	78f4 <get_sub_data>
    3498:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    349a:	4621      	mov	r1, r4
    349c:	4630      	mov	r0, r6
    349e:	f004 fa36 	bl	790e <get_onoff_manager>
    34a2:	4907      	ldr	r1, [pc, #28]	; (34c0 <clk_init+0x64>)
    34a4:	f003 fcb2 	bl	6e0c <onoff_manager_init>
		if (err < 0) {
    34a8:	2800      	cmp	r0, #0
    34aa:	daeb      	bge.n	3484 <clk_init+0x28>
    34ac:	e000      	b.n	34b0 <clk_init+0x54>
	}

	return 0;
    34ae:	2000      	movs	r0, #0
}
    34b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    34b2:	f06f 0004 	mvn.w	r0, #4
    34b6:	e7fb      	b.n	34b0 <clk_init+0x54>
    34b8:	00003359 	.word	0x00003359
    34bc:	0bad0000 	.word	0x0bad0000
    34c0:	000091b8 	.word	0x000091b8

000034c4 <lfclk_spinwait>:
{
    34c4:	b570      	push	{r4, r5, r6, lr}
    34c6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    34c8:	2801      	cmp	r0, #1
    34ca:	d107      	bne.n	34dc <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    34cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34d0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    34d4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    34d8:	2b01      	cmp	r3, #1
    34da:	d058      	beq.n	358e <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    34dc:	f004 fe33 	bl	8146 <k_is_in_isr>
    34e0:	b928      	cbnz	r0, 34ee <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    34e2:	4b2e      	ldr	r3, [pc, #184]	; (359c <lfclk_spinwait+0xd8>)
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d041      	beq.n	356e <lfclk_spinwait+0xaa>
    34ea:	2300      	movs	r3, #0
    34ec:	e000      	b.n	34f0 <lfclk_spinwait+0x2c>
    34ee:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    34f0:	461c      	mov	r4, r3
    34f2:	2b00      	cmp	r3, #0
    34f4:	d03d      	beq.n	3572 <lfclk_spinwait+0xae>
	__asm__ volatile(
    34f6:	f04f 0320 	mov.w	r3, #32
    34fa:	f3ef 8611 	mrs	r6, BASEPRI
    34fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3502:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3506:	b924      	cbnz	r4, 3512 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    350c:	2202      	movs	r2, #2
    350e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3516:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    351a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    351e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3522:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3526:	d12b      	bne.n	3580 <lfclk_spinwait+0xbc>
    return false;
    3528:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    352a:	b11a      	cbz	r2, 3534 <lfclk_spinwait+0x70>
    352c:	2b01      	cmp	r3, #1
    352e:	d029      	beq.n	3584 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3530:	2d01      	cmp	r5, #1
    3532:	d027      	beq.n	3584 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3534:	b1fc      	cbz	r4, 3576 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3536:	4630      	mov	r0, r6
    3538:	f7fe ff9c 	bl	2474 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    353c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3540:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3544:	2b00      	cmp	r3, #0
    3546:	d1e4      	bne.n	3512 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3548:	4b15      	ldr	r3, [pc, #84]	; (35a0 <lfclk_spinwait+0xdc>)
    354a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    354c:	2b00      	cmp	r3, #0
    354e:	d0e0      	beq.n	3512 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3550:	4b13      	ldr	r3, [pc, #76]	; (35a0 <lfclk_spinwait+0xdc>)
    3552:	2200      	movs	r2, #0
    3554:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3556:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3558:	2301      	movs	r3, #1
    355a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    355e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3562:	4a10      	ldr	r2, [pc, #64]	; (35a4 <lfclk_spinwait+0xe0>)
    3564:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3568:	4a0f      	ldr	r2, [pc, #60]	; (35a8 <lfclk_spinwait+0xe4>)
    356a:	6013      	str	r3, [r2, #0]
}
    356c:	e7d1      	b.n	3512 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    356e:	2301      	movs	r3, #1
    3570:	e7be      	b.n	34f0 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    3572:	2600      	movs	r6, #0
    3574:	e7c7      	b.n	3506 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    3576:	2021      	movs	r0, #33	; 0x21
    3578:	2100      	movs	r1, #0
    357a:	f002 fe81 	bl	6280 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    357e:	e7dd      	b.n	353c <lfclk_spinwait+0x78>
                return true;
    3580:	2201      	movs	r2, #1
    3582:	e7d2      	b.n	352a <lfclk_spinwait+0x66>
	if (isr_mode) {
    3584:	b124      	cbz	r4, 3590 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    3586:	f386 8811 	msr	BASEPRI, r6
    358a:	f3bf 8f6f 	isb	sy
}
    358e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    3590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3594:	2202      	movs	r2, #2
    3596:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    359a:	e7f8      	b.n	358e <lfclk_spinwait+0xca>
    359c:	20000fca 	.word	0x20000fca
    35a0:	40000104 	.word	0x40000104
    35a4:	e000e100 	.word	0xe000e100
    35a8:	40000008 	.word	0x40000008

000035ac <z_nrf_clock_control_lf_on>:
{
    35ac:	b510      	push	{r4, lr}
    35ae:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    35b0:	4b10      	ldr	r3, [pc, #64]	; (35f4 <z_nrf_clock_control_lf_on+0x48>)
    35b2:	2101      	movs	r1, #1
    35b4:	f3bf 8f5b 	dmb	ish
    35b8:	e853 2f00 	ldrex	r2, [r3]
    35bc:	e843 1000 	strex	r0, r1, [r3]
    35c0:	2800      	cmp	r0, #0
    35c2:	d1f9      	bne.n	35b8 <z_nrf_clock_control_lf_on+0xc>
    35c4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    35c8:	b11a      	cbz	r2, 35d2 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    35ca:	1e63      	subs	r3, r4, #1
    35cc:	2b01      	cmp	r3, #1
    35ce:	d90c      	bls.n	35ea <z_nrf_clock_control_lf_on+0x3e>
}
    35d0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    35d2:	4809      	ldr	r0, [pc, #36]	; (35f8 <z_nrf_clock_control_lf_on+0x4c>)
    35d4:	f004 f99b 	bl	790e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    35d8:	4908      	ldr	r1, [pc, #32]	; (35fc <z_nrf_clock_control_lf_on+0x50>)
    35da:	2300      	movs	r3, #0
    35dc:	604b      	str	r3, [r1, #4]
    35de:	60cb      	str	r3, [r1, #12]
    35e0:	2301      	movs	r3, #1
    35e2:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    35e4:	f003 fc2e 	bl	6e44 <onoff_request>
    35e8:	e7ef      	b.n	35ca <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    35ea:	4620      	mov	r0, r4
    35ec:	f7ff ff6a 	bl	34c4 <lfclk_spinwait>
		break;
    35f0:	e7ee      	b.n	35d0 <z_nrf_clock_control_lf_on+0x24>
    35f2:	bf00      	nop
    35f4:	20000a84 	.word	0x20000a84
    35f8:	00008644 	.word	0x00008644
    35fc:	20000a20 	.word	0x20000a20

00003600 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    3600:	b510      	push	{r4, lr}
    3602:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    3604:	280a      	cmp	r0, #10
    3606:	d007      	beq.n	3618 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    3608:	4b07      	ldr	r3, [pc, #28]	; (3628 <console_out+0x28>)
    360a:	6818      	ldr	r0, [r3, #0]
    360c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    360e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    3610:	685b      	ldr	r3, [r3, #4]
    3612:	4798      	blx	r3

	return c;
}
    3614:	4620      	mov	r0, r4
    3616:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    3618:	4b03      	ldr	r3, [pc, #12]	; (3628 <console_out+0x28>)
    361a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    361c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    361e:	685b      	ldr	r3, [r3, #4]
    3620:	210d      	movs	r1, #13
    3622:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    3624:	e7f0      	b.n	3608 <console_out+0x8>
    3626:	bf00      	nop
    3628:	20000a88 	.word	0x20000a88

0000362c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    362c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    362e:	4c04      	ldr	r4, [pc, #16]	; (3640 <uart_console_hook_install+0x14>)
    3630:	4620      	mov	r0, r4
    3632:	f7ff fdf7 	bl	3224 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    3636:	4620      	mov	r0, r4
    3638:	f7fc ffd6 	bl	5e8 <__printk_hook_install>
#endif
}
    363c:	bd10      	pop	{r4, pc}
    363e:	bf00      	nop
    3640:	00003601 	.word	0x00003601

00003644 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3644:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3646:	4806      	ldr	r0, [pc, #24]	; (3660 <uart_console_init+0x1c>)
    3648:	4b06      	ldr	r3, [pc, #24]	; (3664 <uart_console_init+0x20>)
    364a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    364c:	f004 fd0b 	bl	8066 <z_device_ready>
    3650:	b118      	cbz	r0, 365a <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    3652:	f7ff ffeb 	bl	362c <uart_console_hook_install>

	return 0;
    3656:	2000      	movs	r0, #0
}
    3658:	bd08      	pop	{r3, pc}
		return -ENODEV;
    365a:	f06f 0012 	mvn.w	r0, #18
    365e:	e7fb      	b.n	3658 <uart_console_init+0x14>
    3660:	000086a4 	.word	0x000086a4
    3664:	20000a88 	.word	0x20000a88

00003668 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3668:	4b1f      	ldr	r3, [pc, #124]	; (36e8 <get_drive+0x80>)
    366a:	4003      	ands	r3, r0
    366c:	4a1f      	ldr	r2, [pc, #124]	; (36ec <get_drive+0x84>)
    366e:	4293      	cmp	r3, r2
    3670:	d032      	beq.n	36d8 <get_drive+0x70>
    3672:	d816      	bhi.n	36a2 <get_drive+0x3a>
    3674:	2b06      	cmp	r3, #6
    3676:	d02b      	beq.n	36d0 <get_drive+0x68>
    3678:	d906      	bls.n	3688 <get_drive+0x20>
    367a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    367e:	d10d      	bne.n	369c <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    3680:	2301      	movs	r3, #1
    3682:	700b      	strb	r3, [r1, #0]
	int err = 0;
    3684:	2000      	movs	r0, #0
		break;
    3686:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3688:	b1fb      	cbz	r3, 36ca <get_drive+0x62>
    368a:	2b02      	cmp	r3, #2
    368c:	d103      	bne.n	3696 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    368e:	2304      	movs	r3, #4
    3690:	700b      	strb	r3, [r1, #0]
	int err = 0;
    3692:	2000      	movs	r0, #0
		break;
    3694:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3696:	f06f 0015 	mvn.w	r0, #21
    369a:	4770      	bx	lr
    369c:	f06f 0015 	mvn.w	r0, #21
    36a0:	4770      	bx	lr
    36a2:	4a13      	ldr	r2, [pc, #76]	; (36f0 <get_drive+0x88>)
    36a4:	4293      	cmp	r3, r2
    36a6:	d01b      	beq.n	36e0 <get_drive+0x78>
    36a8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    36ac:	d103      	bne.n	36b6 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    36ae:	2303      	movs	r3, #3
    36b0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    36b2:	2000      	movs	r0, #0
		break;
    36b4:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    36ba:	d103      	bne.n	36c4 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    36bc:	2302      	movs	r3, #2
    36be:	700b      	strb	r3, [r1, #0]
	int err = 0;
    36c0:	2000      	movs	r0, #0
		break;
    36c2:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36c4:	f06f 0015 	mvn.w	r0, #21
    36c8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    36ca:	2000      	movs	r0, #0
    36cc:	7008      	strb	r0, [r1, #0]
		break;
    36ce:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    36d0:	2306      	movs	r3, #6
    36d2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    36d4:	2000      	movs	r0, #0
		break;
    36d6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    36d8:	2307      	movs	r3, #7
    36da:	700b      	strb	r3, [r1, #0]
	int err = 0;
    36dc:	2000      	movs	r0, #0
		break;
    36de:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    36e0:	2305      	movs	r3, #5
    36e2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    36e4:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    36e6:	4770      	bx	lr
    36e8:	00f00006 	.word	0x00f00006
    36ec:	00100006 	.word	0x00100006
    36f0:	00400002 	.word	0x00400002

000036f4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    36f4:	b128      	cbz	r0, 3702 <get_dev+0xe>
    36f6:	2801      	cmp	r0, #1
    36f8:	d101      	bne.n	36fe <get_dev+0xa>
    36fa:	4803      	ldr	r0, [pc, #12]	; (3708 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    36fc:	4770      	bx	lr
	const struct device *dev = NULL;
    36fe:	2000      	movs	r0, #0
    3700:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3702:	4802      	ldr	r0, [pc, #8]	; (370c <get_dev+0x18>)
    3704:	4770      	bx	lr
    3706:	bf00      	nop
    3708:	0000865c 	.word	0x0000865c
    370c:	00008674 	.word	0x00008674

00003710 <gpio_nrfx_pin_interrupt_configure>:
{
    3710:	b5f0      	push	{r4, r5, r6, r7, lr}
    3712:	b085      	sub	sp, #20
    3714:	460e      	mov	r6, r1
    3716:	4619      	mov	r1, r3
	return port->config;
    3718:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    371a:	7b1b      	ldrb	r3, [r3, #12]
    371c:	f006 051f 	and.w	r5, r6, #31
    3720:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3724:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3728:	d022      	beq.n	3770 <gpio_nrfx_pin_interrupt_configure+0x60>
    372a:	4607      	mov	r7, r0
    372c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    372e:	2300      	movs	r3, #0
    3730:	9302      	str	r3, [sp, #8]
    3732:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    3734:	4610      	mov	r0, r2
    3736:	f004 f9e8 	bl	7b0a <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    373a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    373e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3740:	6899      	ldr	r1, [r3, #8]
    3742:	40f1      	lsrs	r1, r6
    3744:	f011 0f01 	tst.w	r1, #1
    3748:	d102      	bne.n	3750 <gpio_nrfx_pin_interrupt_configure+0x40>
    374a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    374e:	d014      	beq.n	377a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3750:	2300      	movs	r3, #0
    3752:	aa02      	add	r2, sp, #8
    3754:	4619      	mov	r1, r3
    3756:	4628      	mov	r0, r5
    3758:	f001 fa2a 	bl	4bb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    375c:	4b1b      	ldr	r3, [pc, #108]	; (37cc <gpio_nrfx_pin_interrupt_configure+0xbc>)
    375e:	4298      	cmp	r0, r3
    3760:	d131      	bne.n	37c6 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3762:	2101      	movs	r1, #1
    3764:	4628      	mov	r0, r5
    3766:	f001 fbfb 	bl	4f60 <nrfx_gpiote_trigger_enable>
	return 0;
    376a:	2000      	movs	r0, #0
}
    376c:	b005      	add	sp, #20
    376e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    3770:	4628      	mov	r0, r5
    3772:	f001 fc59 	bl	5028 <nrfx_gpiote_trigger_disable>
		return 0;
    3776:	2000      	movs	r0, #0
    3778:	e7f8      	b.n	376c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    377a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    377e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3780:	2a01      	cmp	r2, #1
    3782:	d014      	beq.n	37ae <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    3784:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3788:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3790:	f013 0f01 	tst.w	r3, #1
    3794:	d1dc      	bne.n	3750 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3796:	f10d 0107 	add.w	r1, sp, #7
    379a:	4628      	mov	r0, r5
    379c:	f001 fb84 	bl	4ea8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    37a0:	4b0b      	ldr	r3, [pc, #44]	; (37d0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    37a2:	4298      	cmp	r0, r3
    37a4:	d005      	beq.n	37b2 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    37a6:	f10d 0307 	add.w	r3, sp, #7
    37aa:	9303      	str	r3, [sp, #12]
    37ac:	e7d0      	b.n	3750 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    37ae:	4a09      	ldr	r2, [pc, #36]	; (37d4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    37b0:	e7ea      	b.n	3788 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    37b2:	f10d 0007 	add.w	r0, sp, #7
    37b6:	f001 fbcb 	bl	4f50 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    37ba:	4b04      	ldr	r3, [pc, #16]	; (37cc <gpio_nrfx_pin_interrupt_configure+0xbc>)
    37bc:	4298      	cmp	r0, r3
    37be:	d0f2      	beq.n	37a6 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    37c0:	f06f 000b 	mvn.w	r0, #11
    37c4:	e7d2      	b.n	376c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    37c6:	f06f 0004 	mvn.w	r0, #4
    37ca:	e7cf      	b.n	376c <gpio_nrfx_pin_interrupt_configure+0x5c>
    37cc:	0bad0000 	.word	0x0bad0000
    37d0:	0bad0004 	.word	0x0bad0004
    37d4:	50000300 	.word	0x50000300

000037d8 <pin_uninit>:
{
    37d8:	b530      	push	{r4, r5, lr}
    37da:	b083      	sub	sp, #12
    37dc:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    37de:	f10d 0107 	add.w	r1, sp, #7
    37e2:	f001 fb61 	bl	4ea8 <nrfx_gpiote_channel_get>
    37e6:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    37e8:	4620      	mov	r0, r4
    37ea:	f001 fc4d 	bl	5088 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    37ee:	4b0b      	ldr	r3, [pc, #44]	; (381c <pin_uninit+0x44>)
    37f0:	4298      	cmp	r0, r3
    37f2:	d10f      	bne.n	3814 <pin_uninit+0x3c>
	if (free_ch) {
    37f4:	429d      	cmp	r5, r3
    37f6:	d005      	beq.n	3804 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    37f8:	4b08      	ldr	r3, [pc, #32]	; (381c <pin_uninit+0x44>)
    37fa:	4298      	cmp	r0, r3
    37fc:	d107      	bne.n	380e <pin_uninit+0x36>
    37fe:	2000      	movs	r0, #0
}
    3800:	b003      	add	sp, #12
    3802:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    3804:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3808:	f001 fb9a 	bl	4f40 <nrfx_gpiote_channel_free>
    380c:	e7f4      	b.n	37f8 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    380e:	f06f 0004 	mvn.w	r0, #4
    3812:	e7f5      	b.n	3800 <pin_uninit+0x28>
		return -EIO;
    3814:	f06f 0004 	mvn.w	r0, #4
    3818:	e7f2      	b.n	3800 <pin_uninit+0x28>
    381a:	bf00      	nop
    381c:	0bad0000 	.word	0x0bad0000

00003820 <gpio_nrfx_pin_configure>:
{
    3820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3824:	b087      	sub	sp, #28
	return port->config;
    3826:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    382a:	f898 300c 	ldrb.w	r3, [r8, #12]
    382e:	f001 051f 	and.w	r5, r1, #31
    3832:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3836:	2a00      	cmp	r2, #0
    3838:	d044      	beq.n	38c4 <gpio_nrfx_pin_configure+0xa4>
    383a:	460c      	mov	r4, r1
    383c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    383e:	2600      	movs	r6, #0
    3840:	9603      	str	r6, [sp, #12]
    3842:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3844:	f10d 0117 	add.w	r1, sp, #23
    3848:	4620      	mov	r0, r4
    384a:	f001 fb2d 	bl	4ea8 <nrfx_gpiote_channel_get>
    384e:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3850:	4633      	mov	r3, r6
    3852:	aa03      	add	r2, sp, #12
    3854:	4631      	mov	r1, r6
    3856:	4628      	mov	r0, r5
    3858:	f001 f9aa 	bl	4bb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    385c:	4b30      	ldr	r3, [pc, #192]	; (3920 <gpio_nrfx_pin_configure+0x100>)
    385e:	4298      	cmp	r0, r3
    3860:	d15b      	bne.n	391a <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    3862:	4599      	cmp	r9, r3
    3864:	d036      	beq.n	38d4 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    3866:	f417 7f00 	tst.w	r7, #512	; 0x200
    386a:	d043      	beq.n	38f4 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    386c:	f10d 0103 	add.w	r1, sp, #3
    3870:	4638      	mov	r0, r7
    3872:	f7ff fef9 	bl	3668 <get_drive>
		if (rv != 0) {
    3876:	4606      	mov	r6, r0
    3878:	bb40      	cbnz	r0, 38cc <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    387a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    387e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3882:	f417 7f80 	tst.w	r7, #256	; 0x100
    3886:	bf0c      	ite	eq
    3888:	2301      	moveq	r3, #1
    388a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    388c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    3890:	4638      	mov	r0, r7
    3892:	f004 f907 	bl	7aa4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    3896:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    389a:	f417 6f00 	tst.w	r7, #2048	; 0x800
    389e:	d01e      	beq.n	38de <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    38a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    38a4:	2101      	movs	r1, #1
    38a6:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    38aa:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    38ae:	2200      	movs	r2, #0
    38b0:	a901      	add	r1, sp, #4
    38b2:	4628      	mov	r0, r5
    38b4:	f001 fa32 	bl	4d1c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    38b8:	4b19      	ldr	r3, [pc, #100]	; (3920 <gpio_nrfx_pin_configure+0x100>)
    38ba:	4298      	cmp	r0, r3
    38bc:	d006      	beq.n	38cc <gpio_nrfx_pin_configure+0xac>
    38be:	f06f 0615 	mvn.w	r6, #21
    38c2:	e003      	b.n	38cc <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    38c4:	4628      	mov	r0, r5
    38c6:	f7ff ff87 	bl	37d8 <pin_uninit>
    38ca:	4606      	mov	r6, r0
}
    38cc:	4630      	mov	r0, r6
    38ce:	b007      	add	sp, #28
    38d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    38d4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    38d8:	f001 fb32 	bl	4f40 <nrfx_gpiote_channel_free>
    38dc:	e7c3      	b.n	3866 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    38de:	f417 6f80 	tst.w	r7, #1024	; 0x400
    38e2:	d0e4      	beq.n	38ae <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    38e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    38e8:	2301      	movs	r3, #1
    38ea:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    38ee:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    38f2:	e7dc      	b.n	38ae <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    38f4:	4638      	mov	r0, r7
    38f6:	f004 f8d5 	bl	7aa4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    38fa:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    38fe:	2300      	movs	r3, #0
    3900:	461a      	mov	r2, r3
    3902:	a902      	add	r1, sp, #8
    3904:	4628      	mov	r0, r5
    3906:	f001 f953 	bl	4bb0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    390a:	4b05      	ldr	r3, [pc, #20]	; (3920 <gpio_nrfx_pin_configure+0x100>)
    390c:	4298      	cmp	r0, r3
    390e:	d101      	bne.n	3914 <gpio_nrfx_pin_configure+0xf4>
    3910:	2600      	movs	r6, #0
    3912:	e7db      	b.n	38cc <gpio_nrfx_pin_configure+0xac>
    3914:	f06f 0615 	mvn.w	r6, #21
    3918:	e7d8      	b.n	38cc <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    391a:	f06f 0615 	mvn.w	r6, #21
    391e:	e7d5      	b.n	38cc <gpio_nrfx_pin_configure+0xac>
    3920:	0bad0000 	.word	0x0bad0000

00003924 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3924:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3926:	f001 fb01 	bl	4f2c <nrfx_gpiote_is_init>
    392a:	b108      	cbz	r0, 3930 <gpio_nrfx_init+0xc>
		return 0;
    392c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    392e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    3930:	f001 fad2 	bl	4ed8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3934:	4b08      	ldr	r3, [pc, #32]	; (3958 <gpio_nrfx_init+0x34>)
    3936:	4298      	cmp	r0, r3
    3938:	d10a      	bne.n	3950 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    393a:	2100      	movs	r1, #0
    393c:	4807      	ldr	r0, [pc, #28]	; (395c <gpio_nrfx_init+0x38>)
    393e:	f001 faad 	bl	4e9c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3942:	2200      	movs	r2, #0
    3944:	2105      	movs	r1, #5
    3946:	2006      	movs	r0, #6
    3948:	f7fe fe0a 	bl	2560 <z_arm_irq_priority_set>
	return 0;
    394c:	2000      	movs	r0, #0
    394e:	e7ee      	b.n	392e <gpio_nrfx_init+0xa>
		return -EIO;
    3950:	f06f 0004 	mvn.w	r0, #4
    3954:	e7eb      	b.n	392e <gpio_nrfx_init+0xa>
    3956:	bf00      	nop
    3958:	0bad0000 	.word	0x0bad0000
    395c:	00007b9b 	.word	0x00007b9b

00003960 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    3960:	b410      	push	{r4}
	return dev->config;
    3962:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    3964:	2900      	cmp	r1, #0
    3966:	d17e      	bne.n	3a66 <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3968:	68da      	ldr	r2, [r3, #12]
    396a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    396e:	d017      	beq.n	39a0 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
    3970:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3974:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3976:	2a01      	cmp	r2, #1
    3978:	d065      	beq.n	3a46 <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
    397a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    397e:	2201      	movs	r2, #1
    3980:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    3982:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    3986:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    3988:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    398c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    398e:	2a01      	cmp	r2, #1
    3990:	d05b      	beq.n	3a4a <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
    3992:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3996:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    399a:	2103      	movs	r1, #3
    399c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    39a0:	691a      	ldr	r2, [r3, #16]
    39a2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    39a6:	d00f      	beq.n	39c8 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    39a8:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    39aa:	2900      	cmp	r1, #0
    39ac:	d04f      	beq.n	3a4e <uarte_nrfx_pins_configure+0xee>
    39ae:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    39b0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    39b4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39b6:	2a01      	cmp	r2, #1
    39b8:	d04b      	beq.n	3a52 <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
    39ba:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    39be:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    39c0:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    39c4:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    39c8:	695a      	ldr	r2, [r3, #20]
    39ca:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    39ce:	d017      	beq.n	3a00 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
    39d0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    39d4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39d6:	2a01      	cmp	r2, #1
    39d8:	d03d      	beq.n	3a56 <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
    39da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39de:	2201      	movs	r2, #1
    39e0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    39e2:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    39e6:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    39e8:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    39ec:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39ee:	2a01      	cmp	r2, #1
    39f0:	d033      	beq.n	3a5a <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
    39f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    39f6:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    39fa:	2103      	movs	r1, #3
    39fc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a00:	699a      	ldr	r2, [r3, #24]
    3a02:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    3a06:	d00e      	beq.n	3a26 <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    3a08:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    3a0a:	b341      	cbz	r1, 3a5e <uarte_nrfx_pins_configure+0xfe>
    3a0c:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    3a0e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3a12:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a14:	2a01      	cmp	r2, #1
    3a16:	d024      	beq.n	3a62 <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
    3a18:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a1c:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    3a1e:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    3a22:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3a26:	681a      	ldr	r2, [r3, #0]
    3a28:	68d8      	ldr	r0, [r3, #12]
    3a2a:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    3a2c:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3a30:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3a34:	681a      	ldr	r2, [r3, #0]
    3a36:	6959      	ldr	r1, [r3, #20]
    3a38:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    3a3a:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3a3e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    3a42:	bc10      	pop	{r4}
    3a44:	4770      	bx	lr
        case 1: return NRF_P1;
    3a46:	482c      	ldr	r0, [pc, #176]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a48:	e799      	b.n	397e <uarte_nrfx_pins_configure+0x1e>
    3a4a:	482b      	ldr	r0, [pc, #172]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a4c:	e7a3      	b.n	3996 <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3a4e:	2000      	movs	r0, #0
    3a50:	e7ae      	b.n	39b0 <uarte_nrfx_pins_configure+0x50>
    3a52:	4c29      	ldr	r4, [pc, #164]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a54:	e7b3      	b.n	39be <uarte_nrfx_pins_configure+0x5e>
    3a56:	4828      	ldr	r0, [pc, #160]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a58:	e7c1      	b.n	39de <uarte_nrfx_pins_configure+0x7e>
    3a5a:	4827      	ldr	r0, [pc, #156]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a5c:	e7cb      	b.n	39f6 <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3a5e:	2000      	movs	r0, #0
    3a60:	e7d5      	b.n	3a0e <uarte_nrfx_pins_configure+0xae>
    3a62:	4c25      	ldr	r4, [pc, #148]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a64:	e7da      	b.n	3a1c <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a66:	68da      	ldr	r2, [r3, #12]
    3a68:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    3a6c:	d00b      	beq.n	3a86 <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
    3a6e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3a72:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a74:	2a01      	cmp	r2, #1
    3a76:	d037      	beq.n	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
        case 0: return NRF_P0;
    3a78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3a7c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    3a80:	2102      	movs	r1, #2
    3a82:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a86:	691a      	ldr	r2, [r3, #16]
    3a88:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    3a8c:	d00b      	beq.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
    *p_pin = pin_number & 0x1F;
    3a8e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3a92:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a94:	2a01      	cmp	r2, #1
    3a96:	d029      	beq.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
        case 0: return NRF_P0;
    3a98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3a9c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    3aa0:	2102      	movs	r1, #2
    3aa2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3aa6:	695a      	ldr	r2, [r3, #20]
    3aa8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    3aac:	d00b      	beq.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    *p_pin = pin_number & 0x1F;
    3aae:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3ab2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ab4:	2a01      	cmp	r2, #1
    3ab6:	d01b      	beq.n	3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
        case 0: return NRF_P0;
    3ab8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3abc:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    3ac0:	2102      	movs	r1, #2
    3ac2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3ac6:	699a      	ldr	r2, [r3, #24]
    3ac8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    3acc:	d0ab      	beq.n	3a26 <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
    3ace:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3ad2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ad4:	2a01      	cmp	r2, #1
    3ad6:	d00d      	beq.n	3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
        case 0: return NRF_P0;
    3ad8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3adc:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    3ae0:	2102      	movs	r1, #2
    3ae2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
    3ae6:	e79e      	b.n	3a26 <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
    3ae8:	4803      	ldr	r0, [pc, #12]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3aea:	e7c7      	b.n	3a7c <uarte_nrfx_pins_configure+0x11c>
    3aec:	4802      	ldr	r0, [pc, #8]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3aee:	e7d5      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3af0:	4801      	ldr	r0, [pc, #4]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3af2:	e7e3      	b.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
    3af4:	4800      	ldr	r0, [pc, #0]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3af6:	e7f1      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
    3af8:	50000300 	.word	0x50000300

00003afc <baudrate_set>:
	return dev->config;
    3afc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    3afe:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    3b00:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    3b04:	d06f      	beq.n	3be6 <baudrate_set+0xea>
    3b06:	d83a      	bhi.n	3b7e <baudrate_set+0x82>
    3b08:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    3b0c:	d06e      	beq.n	3bec <baudrate_set+0xf0>
    3b0e:	d90a      	bls.n	3b26 <baudrate_set+0x2a>
    3b10:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    3b14:	d075      	beq.n	3c02 <baudrate_set+0x106>
    3b16:	d924      	bls.n	3b62 <baudrate_set+0x66>
    3b18:	f647 2312 	movw	r3, #31250	; 0x7a12
    3b1c:	4299      	cmp	r1, r3
    3b1e:	d12b      	bne.n	3b78 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3b20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3b24:	e013      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3b26:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    3b2a:	d061      	beq.n	3bf0 <baudrate_set+0xf4>
    3b2c:	d907      	bls.n	3b3e <baudrate_set+0x42>
    3b2e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    3b32:	d063      	beq.n	3bfc <baudrate_set+0x100>
    3b34:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    3b38:	d110      	bne.n	3b5c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3b3a:	4b3c      	ldr	r3, [pc, #240]	; (3c2c <baudrate_set+0x130>)
    3b3c:	e007      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3b3e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    3b42:	d058      	beq.n	3bf6 <baudrate_set+0xfa>
    3b44:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    3b48:	d105      	bne.n	3b56 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    3b4a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3b4e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    3b52:	2000      	movs	r0, #0
    3b54:	4770      	bx	lr
	switch (baudrate) {
    3b56:	f06f 0015 	mvn.w	r0, #21
    3b5a:	4770      	bx	lr
    3b5c:	f06f 0015 	mvn.w	r0, #21
    3b60:	4770      	bx	lr
    3b62:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    3b66:	d04e      	beq.n	3c06 <baudrate_set+0x10a>
    3b68:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    3b6c:	d101      	bne.n	3b72 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3b6e:	4b30      	ldr	r3, [pc, #192]	; (3c30 <baudrate_set+0x134>)
    3b70:	e7ed      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3b72:	f06f 0015 	mvn.w	r0, #21
    3b76:	4770      	bx	lr
    3b78:	f06f 0015 	mvn.w	r0, #21
    3b7c:	4770      	bx	lr
    3b7e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    3b82:	d042      	beq.n	3c0a <baudrate_set+0x10e>
    3b84:	d909      	bls.n	3b9a <baudrate_set+0x9e>
    3b86:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    3b8a:	d046      	beq.n	3c1a <baudrate_set+0x11e>
    3b8c:	d91f      	bls.n	3bce <baudrate_set+0xd2>
    3b8e:	4b29      	ldr	r3, [pc, #164]	; (3c34 <baudrate_set+0x138>)
    3b90:	4299      	cmp	r1, r3
    3b92:	d148      	bne.n	3c26 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3b98:	e7d9      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3b9a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    3b9e:	d037      	beq.n	3c10 <baudrate_set+0x114>
    3ba0:	d905      	bls.n	3bae <baudrate_set+0xb2>
    3ba2:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    3ba6:	d10f      	bne.n	3bc8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3ba8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3bac:	e7cf      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3bae:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    3bb2:	4299      	cmp	r1, r3
    3bb4:	d02e      	beq.n	3c14 <baudrate_set+0x118>
    3bb6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    3bba:	d102      	bne.n	3bc2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3bbc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3bc0:	e7c5      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3bc2:	f06f 0015 	mvn.w	r0, #21
    3bc6:	4770      	bx	lr
    3bc8:	f06f 0015 	mvn.w	r0, #21
    3bcc:	4770      	bx	lr
    3bce:	4b1a      	ldr	r3, [pc, #104]	; (3c38 <baudrate_set+0x13c>)
    3bd0:	4299      	cmp	r1, r3
    3bd2:	d025      	beq.n	3c20 <baudrate_set+0x124>
    3bd4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    3bd8:	d102      	bne.n	3be0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3bda:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3bde:	e7b6      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3be0:	f06f 0015 	mvn.w	r0, #21
    3be4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3be6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3bea:	e7b0      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3bec:	4b13      	ldr	r3, [pc, #76]	; (3c3c <baudrate_set+0x140>)
    3bee:	e7ae      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3bf0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3bf4:	e7ab      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3bf6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3bfa:	e7a8      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3bfc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3c00:	e7a5      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3c02:	4b0f      	ldr	r3, [pc, #60]	; (3c40 <baudrate_set+0x144>)
    3c04:	e7a3      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3c06:	4b0f      	ldr	r3, [pc, #60]	; (3c44 <baudrate_set+0x148>)
    3c08:	e7a1      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3c0a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3c0e:	e79e      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3c10:	4b0d      	ldr	r3, [pc, #52]	; (3c48 <baudrate_set+0x14c>)
    3c12:	e79c      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3c14:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3c18:	e799      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3c1a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3c1e:	e796      	b.n	3b4e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3c20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3c24:	e793      	b.n	3b4e <baudrate_set+0x52>
	switch (baudrate) {
    3c26:	f06f 0015 	mvn.w	r0, #21
}
    3c2a:	4770      	bx	lr
    3c2c:	0013b000 	.word	0x0013b000
    3c30:	004ea000 	.word	0x004ea000
    3c34:	000f4240 	.word	0x000f4240
    3c38:	0003d090 	.word	0x0003d090
    3c3c:	00275000 	.word	0x00275000
    3c40:	0075c000 	.word	0x0075c000
    3c44:	003af000 	.word	0x003af000
    3c48:	013a9000 	.word	0x013a9000

00003c4c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c50:	4605      	mov	r5, r0
    3c52:	460f      	mov	r7, r1
	return dev->data;
    3c54:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3c58:	f004 fa75 	bl	8146 <k_is_in_isr>
    3c5c:	b920      	cbnz	r0, 3c68 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    3c5e:	4b16      	ldr	r3, [pc, #88]	; (3cb8 <uarte_nrfx_poll_out+0x6c>)
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	b1ab      	cbz	r3, 3c90 <uarte_nrfx_poll_out+0x44>
    3c64:	2300      	movs	r3, #0
    3c66:	e000      	b.n	3c6a <uarte_nrfx_poll_out+0x1e>
    3c68:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    3c6a:	b19b      	cbz	r3, 3c94 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    3c6c:	f04f 0320 	mov.w	r3, #32
    3c70:	f3ef 8411 	mrs	r4, BASEPRI
    3c74:	f383 8812 	msr	BASEPRI_MAX, r3
    3c78:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    3c7c:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    3c7e:	4628      	mov	r0, r5
    3c80:	f004 f855 	bl	7d2e <is_tx_ready>
    3c84:	b950      	cbnz	r0, 3c9c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    3c86:	f384 8811 	msr	BASEPRI, r4
    3c8a:	f3bf 8f6f 	isb	sy
}
    3c8e:	e7ed      	b.n	3c6c <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3c90:	2301      	movs	r3, #1
    3c92:	e7ea      	b.n	3c6a <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    3c94:	4628      	mov	r0, r5
    3c96:	f004 f899 	bl	7dcc <wait_tx_ready>
    3c9a:	4606      	mov	r6, r0
	}

	data->char_out = c;
    3c9c:	4641      	mov	r1, r8
    3c9e:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    3ca2:	2201      	movs	r2, #1
    3ca4:	4628      	mov	r0, r5
    3ca6:	f004 f85c 	bl	7d62 <tx_start>
	__asm__ volatile(
    3caa:	f386 8811 	msr	BASEPRI, r6
    3cae:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cb6:	bf00      	nop
    3cb8:	20000fca 	.word	0x20000fca

00003cbc <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    3cbc:	b538      	push	{r3, r4, r5, lr}
    3cbe:	4604      	mov	r4, r0
    3cc0:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3cc2:	f101 0012 	add.w	r0, r1, #18
    3cc6:	f001 fa33 	bl	5130 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3cca:	4b14      	ldr	r3, [pc, #80]	; (3d1c <endtx_stoptx_ppi_init+0x60>)
    3ccc:	4298      	cmp	r0, r3
    3cce:	d111      	bne.n	3cf4 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3cd0:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3cd2:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    3cd6:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3cd8:	4a11      	ldr	r2, [pc, #68]	; (3d20 <endtx_stoptx_ppi_init+0x64>)
    3cda:	33a2      	adds	r3, #162	; 0xa2
    3cdc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3ce0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3ce4:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3ce6:	7ca9      	ldrb	r1, [r5, #18]
    3ce8:	2301      	movs	r3, #1
    3cea:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    3cec:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    3cf0:	2000      	movs	r0, #0
}
    3cf2:	bd38      	pop	{r3, r4, r5, pc}
    3cf4:	4b0b      	ldr	r3, [pc, #44]	; (3d24 <endtx_stoptx_ppi_init+0x68>)
    3cf6:	4a0c      	ldr	r2, [pc, #48]	; (3d28 <endtx_stoptx_ppi_init+0x6c>)
    3cf8:	1a9b      	subs	r3, r3, r2
    3cfa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    3cfc:	f04f 0100 	mov.w	r1, #0
    3d00:	2201      	movs	r2, #1
    3d02:	f362 0102 	bfi	r1, r2, #0, #3
    3d06:	f36f 01c5 	bfc	r1, #3, #3
    3d0a:	f363 118f 	bfi	r1, r3, #6, #10
    3d0e:	4807      	ldr	r0, [pc, #28]	; (3d2c <endtx_stoptx_ppi_init+0x70>)
    3d10:	f7fd fd98 	bl	1844 <log_0>
		return -EIO;
    3d14:	f06f 0004 	mvn.w	r0, #4
    3d18:	e7eb      	b.n	3cf2 <endtx_stoptx_ppi_init+0x36>
    3d1a:	bf00      	nop
    3d1c:	0bad0000 	.word	0x0bad0000
    3d20:	4001f000 	.word	0x4001f000
    3d24:	00008884 	.word	0x00008884
    3d28:	0000883c 	.word	0x0000883c
    3d2c:	00009210 	.word	0x00009210

00003d30 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d30:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3d34:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3d38:	4b01      	ldr	r3, [pc, #4]	; (3d40 <set_comparator+0x10>)
    3d3a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    3d3e:	4770      	bx	lr
    3d40:	40011000 	.word	0x40011000

00003d44 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3d44:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3d48:	4b01      	ldr	r3, [pc, #4]	; (3d50 <get_comparator+0xc>)
    3d4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    3d4e:	4770      	bx	lr
    3d50:	40011000 	.word	0x40011000

00003d54 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3d58:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3d5a:	4a02      	ldr	r2, [pc, #8]	; (3d64 <event_enable+0x10>)
    3d5c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop
    3d64:	40011000 	.word	0x40011000

00003d68 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3d6c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3d6e:	4a02      	ldr	r2, [pc, #8]	; (3d78 <event_disable+0x10>)
    3d70:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    3d74:	4770      	bx	lr
    3d76:	bf00      	nop
    3d78:	40011000 	.word	0x40011000

00003d7c <counter>:
     return p_reg->COUNTER;
    3d7c:	4b01      	ldr	r3, [pc, #4]	; (3d84 <counter+0x8>)
    3d7e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    3d82:	4770      	bx	lr
    3d84:	40011000 	.word	0x40011000

00003d88 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    3d88:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3d8a:	2301      	movs	r3, #1
    3d8c:	4083      	lsls	r3, r0
    3d8e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d90:	4a10      	ldr	r2, [pc, #64]	; (3dd4 <compare_int_lock+0x4c>)
    3d92:	f3bf 8f5b 	dmb	ish
    3d96:	e852 1f00 	ldrex	r1, [r2]
    3d9a:	ea01 0c04 	and.w	ip, r1, r4
    3d9e:	e842 ce00 	strex	lr, ip, [r2]
    3da2:	f1be 0f00 	cmp.w	lr, #0
    3da6:	d1f6      	bne.n	3d96 <compare_int_lock+0xe>
    3da8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3dac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3db0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3db4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3dbc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3dc0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3dc4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3dc8:	420b      	tst	r3, r1
}
    3dca:	bf14      	ite	ne
    3dcc:	2001      	movne	r0, #1
    3dce:	2000      	moveq	r0, #0
    3dd0:	bd10      	pop	{r4, pc}
    3dd2:	bf00      	nop
    3dd4:	20000aa8 	.word	0x20000aa8

00003dd8 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    3dd8:	b570      	push	{r4, r5, r6, lr}
    3dda:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    3ddc:	f004 f899 	bl	7f12 <full_int_lock>
    3de0:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3de6:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    3de8:	4a17      	ldr	r2, [pc, #92]	; (3e48 <channel_processing_check_and_clear+0x70>)
    3dea:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3dee:	4213      	tst	r3, r2
    3df0:	d105      	bne.n	3dfe <channel_processing_check_and_clear+0x26>
	bool result = false;
    3df2:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    3df4:	4628      	mov	r0, r5
    3df6:	f004 f895 	bl	7f24 <full_int_unlock>

	return result;
}
    3dfa:	4630      	mov	r0, r6
    3dfc:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3dfe:	2301      	movs	r3, #1
    3e00:	40a3      	lsls	r3, r4
    3e02:	43db      	mvns	r3, r3
    3e04:	4a11      	ldr	r2, [pc, #68]	; (3e4c <channel_processing_check_and_clear+0x74>)
    3e06:	f3bf 8f5b 	dmb	ish
    3e0a:	e852 1f00 	ldrex	r1, [r2]
    3e0e:	ea01 0003 	and.w	r0, r1, r3
    3e12:	e842 0600 	strex	r6, r0, [r2]
    3e16:	2e00      	cmp	r6, #0
    3e18:	d1f7      	bne.n	3e0a <channel_processing_check_and_clear+0x32>
    3e1a:	f3bf 8f5b 	dmb	ish
    3e1e:	b959      	cbnz	r1, 3e38 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3e20:	f104 0350 	add.w	r3, r4, #80	; 0x50
    3e24:	009b      	lsls	r3, r3, #2
    3e26:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3e2c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3e30:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3e32:	b113      	cbz	r3, 3e3a <channel_processing_check_and_clear+0x62>
    3e34:	2301      	movs	r3, #1
    3e36:	e000      	b.n	3e3a <channel_processing_check_and_clear+0x62>
    3e38:	2301      	movs	r3, #1
		if (result) {
    3e3a:	461e      	mov	r6, r3
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d0d9      	beq.n	3df4 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    3e40:	4620      	mov	r0, r4
    3e42:	f004 f857 	bl	7ef4 <event_clear>
    3e46:	e7d5      	b.n	3df4 <channel_processing_check_and_clear+0x1c>
    3e48:	40011000 	.word	0x40011000
    3e4c:	20000aa4 	.word	0x20000aa4

00003e50 <compare_int_unlock>:
	if (key) {
    3e50:	b901      	cbnz	r1, 3e54 <compare_int_unlock+0x4>
}
    3e52:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    3e54:	2301      	movs	r3, #1
    3e56:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3e58:	4a11      	ldr	r2, [pc, #68]	; (3ea0 <compare_int_unlock+0x50>)
    3e5a:	f3bf 8f5b 	dmb	ish
    3e5e:	e852 1f00 	ldrex	r1, [r2]
    3e62:	4319      	orrs	r1, r3
    3e64:	e842 1c00 	strex	ip, r1, [r2]
    3e68:	f1bc 0f00 	cmp.w	ip, #0
    3e6c:	d1f7      	bne.n	3e5e <compare_int_unlock+0xe>
    3e6e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3e76:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3e78:	4a0a      	ldr	r2, [pc, #40]	; (3ea4 <compare_int_unlock+0x54>)
    3e7a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3e7e:	f3bf 8f5b 	dmb	ish
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <compare_int_unlock+0x58>)
    3e84:	681b      	ldr	r3, [r3, #0]
    3e86:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3e8a:	fa23 f000 	lsr.w	r0, r3, r0
    3e8e:	f010 0f01 	tst.w	r0, #1
    3e92:	d0de      	beq.n	3e52 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e94:	4b05      	ldr	r3, [pc, #20]	; (3eac <compare_int_unlock+0x5c>)
    3e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3e9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    3e9e:	e7d8      	b.n	3e52 <compare_int_unlock+0x2>
    3ea0:	20000aa8 	.word	0x20000aa8
    3ea4:	40011000 	.word	0x40011000
    3ea8:	20000aa4 	.word	0x20000aa4
    3eac:	e000e100 	.word	0xe000e100

00003eb0 <sys_clock_timeout_handler>:
{
    3eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eb2:	4607      	mov	r7, r0
    3eb4:	4614      	mov	r4, r2
    3eb6:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    3eb8:	4610      	mov	r0, r2
    3eba:	4619      	mov	r1, r3
    3ebc:	f004 f826 	bl	7f0c <absolute_time_to_cc>
    3ec0:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3ec2:	4b15      	ldr	r3, [pc, #84]	; (3f18 <sys_clock_timeout_handler+0x68>)
    3ec4:	681a      	ldr	r2, [r3, #0]
    3ec6:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    3ec8:	601c      	str	r4, [r3, #0]
    3eca:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3ecc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3ed0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3ed4:	d308      	bcc.n	3ee8 <sys_clock_timeout_handler+0x38>
	return false;
    3ed6:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3ed8:	f002 fb38 	bl	654c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    3edc:	4638      	mov	r0, r7
    3ede:	f7ff ff31 	bl	3d44 <get_comparator>
    3ee2:	42a8      	cmp	r0, r5
    3ee4:	d00c      	beq.n	3f00 <sys_clock_timeout_handler+0x50>
}
    3ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3ee8:	4b0c      	ldr	r3, [pc, #48]	; (3f1c <sys_clock_timeout_handler+0x6c>)
    3eea:	6819      	ldr	r1, [r3, #0]
    3eec:	0a0b      	lsrs	r3, r1, #8
    3eee:	060a      	lsls	r2, r1, #24
    3ef0:	1952      	adds	r2, r2, r5
    3ef2:	f143 0300 	adc.w	r3, r3, #0
    3ef6:	490a      	ldr	r1, [pc, #40]	; (3f20 <sys_clock_timeout_handler+0x70>)
    3ef8:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3efc:	2401      	movs	r4, #1
    3efe:	e7eb      	b.n	3ed8 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    3f00:	b11c      	cbz	r4, 3f0a <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    3f02:	4638      	mov	r0, r7
    3f04:	f7ff ff26 	bl	3d54 <event_enable>
}
    3f08:	e7ed      	b.n	3ee6 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    3f0a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    3f0e:	4638      	mov	r0, r7
    3f10:	f7ff ff0e 	bl	3d30 <set_comparator>
    3f14:	e7f5      	b.n	3f02 <sys_clock_timeout_handler+0x52>
    3f16:	bf00      	nop
    3f18:	200002c8 	.word	0x200002c8
    3f1c:	20000aac 	.word	0x20000aac
    3f20:	200002b0 	.word	0x200002b0

00003f24 <z_nrf_rtc_timer_read>:
{
    3f24:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3f26:	4b0d      	ldr	r3, [pc, #52]	; (3f5c <z_nrf_rtc_timer_read+0x38>)
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	0a1d      	lsrs	r5, r3, #8
    3f2c:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3f2e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    3f32:	f7ff ff23 	bl	3d7c <counter>
    3f36:	4603      	mov	r3, r0
	val += cntr;
    3f38:	1820      	adds	r0, r4, r0
    3f3a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3f42:	d20a      	bcs.n	3f5a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    3f44:	4b06      	ldr	r3, [pc, #24]	; (3f60 <z_nrf_rtc_timer_read+0x3c>)
    3f46:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f4a:	4299      	cmp	r1, r3
    3f4c:	bf08      	it	eq
    3f4e:	4290      	cmpeq	r0, r2
    3f50:	d203      	bcs.n	3f5a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    3f52:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3f56:	f141 0100 	adc.w	r1, r1, #0
}
    3f5a:	bd38      	pop	{r3, r4, r5, pc}
    3f5c:	20000aac 	.word	0x20000aac
    3f60:	200002b0 	.word	0x200002b0

00003f64 <compare_set_nolocks>:
{
    3f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f68:	4606      	mov	r6, r0
    3f6a:	4614      	mov	r4, r2
    3f6c:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    3f6e:	4610      	mov	r0, r2
    3f70:	4619      	mov	r1, r3
    3f72:	f003 ffcb 	bl	7f0c <absolute_time_to_cc>
    3f76:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3f78:	f7ff ffd4 	bl	3f24 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3f7c:	42a9      	cmp	r1, r5
    3f7e:	bf08      	it	eq
    3f80:	42a0      	cmpeq	r0, r4
    3f82:	d21e      	bcs.n	3fc2 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    3f84:	ebb4 0800 	subs.w	r8, r4, r0
    3f88:	eb65 0901 	sbc.w	r9, r5, r1
    3f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3f90:	2300      	movs	r3, #0
    3f92:	454b      	cmp	r3, r9
    3f94:	bf08      	it	eq
    3f96:	4542      	cmpeq	r2, r8
    3f98:	d32e      	bcc.n	3ff8 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    3f9a:	4b19      	ldr	r3, [pc, #100]	; (4000 <compare_set_nolocks+0x9c>)
    3f9c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    3fa0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3fa4:	42ab      	cmp	r3, r5
    3fa6:	bf08      	it	eq
    3fa8:	42a2      	cmpeq	r2, r4
    3faa:	d018      	beq.n	3fde <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    3fac:	4639      	mov	r1, r7
    3fae:	4630      	mov	r0, r6
    3fb0:	f003 ffbd 	bl	7f2e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    3fb4:	4639      	mov	r1, r7
    3fb6:	f003 ff99 	bl	7eec <counter_sub>
    3fba:	1824      	adds	r4, r4, r0
    3fbc:	f145 0500 	adc.w	r5, r5, #0
    3fc0:	e00d      	b.n	3fde <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    3fc2:	2301      	movs	r3, #1
    3fc4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3fc6:	4a0f      	ldr	r2, [pc, #60]	; (4004 <compare_set_nolocks+0xa0>)
    3fc8:	f3bf 8f5b 	dmb	ish
    3fcc:	e852 1f00 	ldrex	r1, [r2]
    3fd0:	4319      	orrs	r1, r3
    3fd2:	e842 1000 	strex	r0, r1, [r2]
    3fd6:	2800      	cmp	r0, #0
    3fd8:	d1f8      	bne.n	3fcc <compare_set_nolocks+0x68>
    3fda:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3fde:	4b08      	ldr	r3, [pc, #32]	; (4000 <compare_set_nolocks+0x9c>)
    3fe0:	0132      	lsls	r2, r6, #4
    3fe2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    3fe6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    3fea:	9908      	ldr	r1, [sp, #32]
    3fec:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    3fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ff0:	6073      	str	r3, [r6, #4]
	return ret;
    3ff2:	2000      	movs	r0, #0
}
    3ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    3ff8:	f06f 0015 	mvn.w	r0, #21
    3ffc:	e7fa      	b.n	3ff4 <compare_set_nolocks+0x90>
    3ffe:	bf00      	nop
    4000:	200002b8 	.word	0x200002b8
    4004:	20000aa4 	.word	0x20000aa4

00004008 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4008:	b530      	push	{r4, r5, lr}
    400a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    400c:	2300      	movs	r3, #0
    400e:	4a1e      	ldr	r2, [pc, #120]	; (4088 <sys_clock_driver_init+0x80>)
    4010:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4014:	2b00      	cmp	r3, #0
    4016:	dd25      	ble.n	4064 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    4018:	4c1b      	ldr	r4, [pc, #108]	; (4088 <sys_clock_driver_init+0x80>)
    401a:	2502      	movs	r5, #2
    401c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4020:	4b1a      	ldr	r3, [pc, #104]	; (408c <sys_clock_driver_init+0x84>)
    4022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4026:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    402a:	2200      	movs	r2, #0
    402c:	2101      	movs	r1, #1
    402e:	2011      	movs	r0, #17
    4030:	f7fe fa96 	bl	2560 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4034:	2011      	movs	r0, #17
    4036:	f7fe fa75 	bl	2524 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    403a:	2301      	movs	r3, #1
    403c:	4a14      	ldr	r2, [pc, #80]	; (4090 <sys_clock_driver_init+0x88>)
    403e:	6013      	str	r3, [r2, #0]
    4040:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4042:	4a14      	ldr	r2, [pc, #80]	; (4094 <sys_clock_driver_init+0x8c>)
    4044:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4046:	2400      	movs	r4, #0
    4048:	9401      	str	r4, [sp, #4]
    404a:	4b13      	ldr	r3, [pc, #76]	; (4098 <sys_clock_driver_init+0x90>)
    404c:	9300      	str	r3, [sp, #0]
    404e:	4a13      	ldr	r2, [pc, #76]	; (409c <sys_clock_driver_init+0x94>)
    4050:	2300      	movs	r3, #0
    4052:	4620      	mov	r0, r4
    4054:	f003 ffa6 	bl	7fa4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4058:	4628      	mov	r0, r5
    405a:	f7ff faa7 	bl	35ac <z_nrf_clock_control_lf_on>

	return 0;
}
    405e:	4620      	mov	r0, r4
    4060:	b003      	add	sp, #12
    4062:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4064:	4a0e      	ldr	r2, [pc, #56]	; (40a0 <sys_clock_driver_init+0x98>)
    4066:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    406a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    406e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4072:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4076:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    407a:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    407c:	4902      	ldr	r1, [pc, #8]	; (4088 <sys_clock_driver_init+0x80>)
    407e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4082:	3301      	adds	r3, #1
    4084:	e7c6      	b.n	4014 <sys_clock_driver_init+0xc>
    4086:	bf00      	nop
    4088:	40011000 	.word	0x40011000
    408c:	e000e100 	.word	0xe000e100
    4090:	40011008 	.word	0x40011008
    4094:	20000aa8 	.word	0x20000aa8
    4098:	00003eb1 	.word	0x00003eb1
    409c:	007fffff 	.word	0x007fffff
    40a0:	200002b8 	.word	0x200002b8

000040a4 <process_channel>:
{
    40a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40a8:	b082      	sub	sp, #8
    40aa:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    40ac:	f7ff fe94 	bl	3dd8 <channel_processing_check_and_clear>
    40b0:	b910      	cbnz	r0, 40b8 <process_channel+0x14>
}
    40b2:	b002      	add	sp, #8
    40b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    40b8:	f7ff ff34 	bl	3f24 <z_nrf_rtc_timer_read>
    40bc:	4606      	mov	r6, r0
    40be:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    40c0:	f003 ff27 	bl	7f12 <full_int_lock>
    40c4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    40c6:	4b13      	ldr	r3, [pc, #76]	; (4114 <process_channel+0x70>)
    40c8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    40cc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    40d0:	454f      	cmp	r7, r9
    40d2:	bf08      	it	eq
    40d4:	4546      	cmpeq	r6, r8
    40d6:	d20b      	bcs.n	40f0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    40d8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    40da:	4650      	mov	r0, sl
    40dc:	f003 ff22 	bl	7f24 <full_int_unlock>
		if (handler) {
    40e0:	2e00      	cmp	r6, #0
    40e2:	d0e6      	beq.n	40b2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    40e4:	9500      	str	r5, [sp, #0]
    40e6:	4642      	mov	r2, r8
    40e8:	464b      	mov	r3, r9
    40ea:	4620      	mov	r0, r4
    40ec:	47b0      	blx	r6
}
    40ee:	e7e0      	b.n	40b2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    40f0:	4a08      	ldr	r2, [pc, #32]	; (4114 <process_channel+0x70>)
    40f2:	0123      	lsls	r3, r4, #4
    40f4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    40f8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    40fa:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    40fc:	2000      	movs	r0, #0
    40fe:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4108:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    410c:	4620      	mov	r0, r4
    410e:	f7ff fe2b 	bl	3d68 <event_disable>
    4112:	e7e2      	b.n	40da <process_channel+0x36>
    4114:	200002b8 	.word	0x200002b8

00004118 <rtc_nrf_isr>:
{
    4118:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    411a:	4b0d      	ldr	r3, [pc, #52]	; (4150 <rtc_nrf_isr+0x38>)
    411c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4120:	f013 0f02 	tst.w	r3, #2
    4124:	d00a      	beq.n	413c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4126:	4b0b      	ldr	r3, [pc, #44]	; (4154 <rtc_nrf_isr+0x3c>)
    4128:	681b      	ldr	r3, [r3, #0]
    412a:	b13b      	cbz	r3, 413c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    412c:	4b09      	ldr	r3, [pc, #36]	; (4154 <rtc_nrf_isr+0x3c>)
    412e:	2200      	movs	r2, #0
    4130:	601a      	str	r2, [r3, #0]
    4132:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    4134:	4a08      	ldr	r2, [pc, #32]	; (4158 <rtc_nrf_isr+0x40>)
    4136:	6813      	ldr	r3, [r2, #0]
    4138:	3301      	adds	r3, #1
    413a:	6013      	str	r3, [r2, #0]
{
    413c:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    413e:	2c00      	cmp	r4, #0
    4140:	dd00      	ble.n	4144 <rtc_nrf_isr+0x2c>
}
    4142:	bd10      	pop	{r4, pc}
		process_channel(chan);
    4144:	4620      	mov	r0, r4
    4146:	f7ff ffad 	bl	40a4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    414a:	3401      	adds	r4, #1
    414c:	e7f7      	b.n	413e <rtc_nrf_isr+0x26>
    414e:	bf00      	nop
    4150:	40011000 	.word	0x40011000
    4154:	40011104 	.word	0x40011104
    4158:	20000aac 	.word	0x20000aac

0000415c <sys_clock_set_timeout>:
{
    415c:	b510      	push	{r4, lr}
    415e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4160:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4164:	d007      	beq.n	4176 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4166:	1e44      	subs	r4, r0, #1
    4168:	2c00      	cmp	r4, #0
    416a:	dd07      	ble.n	417c <sys_clock_set_timeout+0x20>
    416c:	4b11      	ldr	r3, [pc, #68]	; (41b4 <sys_clock_set_timeout+0x58>)
    416e:	429c      	cmp	r4, r3
    4170:	dd05      	ble.n	417e <sys_clock_set_timeout+0x22>
    4172:	4c11      	ldr	r4, [pc, #68]	; (41b8 <sys_clock_set_timeout+0x5c>)
    4174:	e003      	b.n	417e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4176:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    417a:	e7f4      	b.n	4166 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    417c:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    417e:	f7ff fed1 	bl	3f24 <z_nrf_rtc_timer_read>
    4182:	4b0e      	ldr	r3, [pc, #56]	; (41bc <sys_clock_set_timeout+0x60>)
    4184:	e9d3 2300 	ldrd	r2, r3, [r3]
    4188:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    418a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    418e:	d300      	bcc.n	4192 <sys_clock_set_timeout+0x36>
		ticks = 0;
    4190:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4192:	4404      	add	r4, r0
    4194:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    4196:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    419a:	d300      	bcc.n	419e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    419c:	4c06      	ldr	r4, [pc, #24]	; (41b8 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    419e:	2000      	movs	r0, #0
    41a0:	9001      	str	r0, [sp, #4]
    41a2:	4907      	ldr	r1, [pc, #28]	; (41c0 <sys_clock_set_timeout+0x64>)
    41a4:	9100      	str	r1, [sp, #0]
    41a6:	1912      	adds	r2, r2, r4
    41a8:	f143 0300 	adc.w	r3, r3, #0
    41ac:	f003 fefa 	bl	7fa4 <compare_set>
}
    41b0:	b002      	add	sp, #8
    41b2:	bd10      	pop	{r4, pc}
    41b4:	007ffffe 	.word	0x007ffffe
    41b8:	007fffff 	.word	0x007fffff
    41bc:	200002c8 	.word	0x200002c8
    41c0:	00003eb1 	.word	0x00003eb1

000041c4 <sys_clock_elapsed>:
{
    41c4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    41c6:	f7ff fead 	bl	3f24 <z_nrf_rtc_timer_read>
    41ca:	4b02      	ldr	r3, [pc, #8]	; (41d4 <sys_clock_elapsed+0x10>)
    41cc:	681b      	ldr	r3, [r3, #0]
}
    41ce:	1ac0      	subs	r0, r0, r3
    41d0:	bd08      	pop	{r3, pc}
    41d2:	bf00      	nop
    41d4:	200002c8 	.word	0x200002c8

000041d8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    41d8:	b508      	push	{r3, lr}
	z_impl_log_panic();
    41da:	f7fd fb63 	bl	18a4 <z_impl_log_panic>
    41de:	4b09      	ldr	r3, [pc, #36]	; (4204 <k_sys_fatal_error_handler+0x2c>)
    41e0:	4a09      	ldr	r2, [pc, #36]	; (4208 <k_sys_fatal_error_handler+0x30>)
    41e2:	1a9b      	subs	r3, r3, r2
    41e4:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    41e6:	f04f 0100 	mov.w	r1, #0
    41ea:	2201      	movs	r2, #1
    41ec:	f362 0102 	bfi	r1, r2, #0, #3
    41f0:	f36f 01c5 	bfc	r1, #3, #3
    41f4:	f363 118f 	bfi	r1, r3, #6, #10
    41f8:	4804      	ldr	r0, [pc, #16]	; (420c <k_sys_fatal_error_handler+0x34>)
    41fa:	f7fd fb23 	bl	1844 <log_0>
		sys_arch_reboot(0);
    41fe:	2000      	movs	r0, #0
    4200:	f7ff f84e 	bl	32a0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4204:	0000884c 	.word	0x0000884c
    4208:	0000883c 	.word	0x0000883c
    420c:	000092a4 	.word	0x000092a4

00004210 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4210:	4b03      	ldr	r3, [pc, #12]	; (4220 <nrf52_errata_36+0x10>)
    4212:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4214:	2b08      	cmp	r3, #8
    4216:	d001      	beq.n	421c <nrf52_errata_36+0xc>
        return false;
    4218:	2000      	movs	r0, #0
    421a:	4770      	bx	lr
                        return true;
    421c:	2001      	movs	r0, #1
}
    421e:	4770      	bx	lr
    4220:	10000130 	.word	0x10000130

00004224 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4224:	4b03      	ldr	r3, [pc, #12]	; (4234 <nrf52_errata_66+0x10>)
    4226:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4228:	2b08      	cmp	r3, #8
    422a:	d001      	beq.n	4230 <nrf52_errata_66+0xc>
        return false;
    422c:	2000      	movs	r0, #0
    422e:	4770      	bx	lr
                        return true;
    4230:	2001      	movs	r0, #1
}
    4232:	4770      	bx	lr
    4234:	10000130 	.word	0x10000130

00004238 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4238:	4b08      	ldr	r3, [pc, #32]	; (425c <nrf52_errata_98+0x24>)
    423a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    423c:	3304      	adds	r3, #4
    423e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4240:	2a08      	cmp	r2, #8
    4242:	d001      	beq.n	4248 <nrf52_errata_98+0x10>
        return false;
    4244:	2000      	movs	r0, #0
    4246:	4770      	bx	lr
                switch(var2)
    4248:	2b00      	cmp	r3, #0
    424a:	d804      	bhi.n	4256 <nrf52_errata_98+0x1e>
    424c:	e8df f003 	tbb	[pc, r3]
    4250:	01          	.byte	0x01
    4251:	00          	.byte	0x00
            if (var1 == 0x08)
    4252:	2001      	movs	r0, #1
    4254:	4770      	bx	lr
                        return false;
    4256:	2000      	movs	r0, #0
}
    4258:	4770      	bx	lr
    425a:	bf00      	nop
    425c:	10000130 	.word	0x10000130

00004260 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4260:	4b08      	ldr	r3, [pc, #32]	; (4284 <nrf52_errata_103+0x24>)
    4262:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4264:	3304      	adds	r3, #4
    4266:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4268:	2a08      	cmp	r2, #8
    426a:	d001      	beq.n	4270 <nrf52_errata_103+0x10>
        return false;
    426c:	2000      	movs	r0, #0
    426e:	4770      	bx	lr
                switch(var2)
    4270:	2b00      	cmp	r3, #0
    4272:	d804      	bhi.n	427e <nrf52_errata_103+0x1e>
    4274:	e8df f003 	tbb	[pc, r3]
    4278:	01          	.byte	0x01
    4279:	00          	.byte	0x00
            if (var1 == 0x08)
    427a:	2001      	movs	r0, #1
    427c:	4770      	bx	lr
                        return false;
    427e:	2000      	movs	r0, #0
}
    4280:	4770      	bx	lr
    4282:	bf00      	nop
    4284:	10000130 	.word	0x10000130

00004288 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4288:	4b08      	ldr	r3, [pc, #32]	; (42ac <nrf52_errata_115+0x24>)
    428a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    428c:	3304      	adds	r3, #4
    428e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4290:	2a08      	cmp	r2, #8
    4292:	d001      	beq.n	4298 <nrf52_errata_115+0x10>
        return false;
    4294:	2000      	movs	r0, #0
    4296:	4770      	bx	lr
                switch(var2)
    4298:	2b00      	cmp	r3, #0
    429a:	d804      	bhi.n	42a6 <nrf52_errata_115+0x1e>
    429c:	e8df f003 	tbb	[pc, r3]
    42a0:	01          	.byte	0x01
    42a1:	00          	.byte	0x00
            if (var1 == 0x08)
    42a2:	2001      	movs	r0, #1
    42a4:	4770      	bx	lr
                        return false;
    42a6:	2000      	movs	r0, #0
}
    42a8:	4770      	bx	lr
    42aa:	bf00      	nop
    42ac:	10000130 	.word	0x10000130

000042b0 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    42b0:	4b08      	ldr	r3, [pc, #32]	; (42d4 <nrf52_errata_120+0x24>)
    42b2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    42b4:	3304      	adds	r3, #4
    42b6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    42b8:	2a08      	cmp	r2, #8
    42ba:	d001      	beq.n	42c0 <nrf52_errata_120+0x10>
        return false;
    42bc:	2000      	movs	r0, #0
    42be:	4770      	bx	lr
                switch(var2)
    42c0:	2b00      	cmp	r3, #0
    42c2:	d804      	bhi.n	42ce <nrf52_errata_120+0x1e>
    42c4:	e8df f003 	tbb	[pc, r3]
    42c8:	01          	.byte	0x01
    42c9:	00          	.byte	0x00
            if (var1 == 0x08)
    42ca:	2001      	movs	r0, #1
    42cc:	4770      	bx	lr
                        return false;
    42ce:	2000      	movs	r0, #0
}
    42d0:	4770      	bx	lr
    42d2:	bf00      	nop
    42d4:	10000130 	.word	0x10000130

000042d8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    42d8:	4b03      	ldr	r3, [pc, #12]	; (42e8 <nrf52_errata_136+0x10>)
    42da:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    42dc:	2b08      	cmp	r3, #8
    42de:	d001      	beq.n	42e4 <nrf52_errata_136+0xc>
        return false;
    42e0:	2000      	movs	r0, #0
    42e2:	4770      	bx	lr
                        return true;
    42e4:	2001      	movs	r0, #1
}
    42e6:	4770      	bx	lr
    42e8:	10000130 	.word	0x10000130

000042ec <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    42ec:	4b06      	ldr	r3, [pc, #24]	; (4308 <nrf52_configuration_249+0x1c>)
    42ee:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    42f0:	4a06      	ldr	r2, [pc, #24]	; (430c <nrf52_configuration_249+0x20>)
    42f2:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    42f4:	2b08      	cmp	r3, #8
    42f6:	d001      	beq.n	42fc <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    42f8:	2000      	movs	r0, #0
    42fa:	4770      	bx	lr
                switch(var2)
    42fc:	2a04      	cmp	r2, #4
    42fe:	d801      	bhi.n	4304 <nrf52_configuration_249+0x18>
    4300:	2000      	movs	r0, #0
    4302:	4770      	bx	lr
                        return true;
    4304:	2001      	movs	r0, #1
    #endif
}
    4306:	4770      	bx	lr
    4308:	10000130 	.word	0x10000130
    430c:	10000134 	.word	0x10000134

00004310 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4310:	4b02      	ldr	r3, [pc, #8]	; (431c <nvmc_wait+0xc>)
    4312:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4316:	2b00      	cmp	r3, #0
    4318:	d0fa      	beq.n	4310 <nvmc_wait>
}
    431a:	4770      	bx	lr
    431c:	4001e000 	.word	0x4001e000

00004320 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    4320:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4322:	4b03      	ldr	r3, [pc, #12]	; (4330 <nvmc_config+0x10>)
    4324:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    4328:	f7ff fff2 	bl	4310 <nvmc_wait>
}
    432c:	bd08      	pop	{r3, pc}
    432e:	bf00      	nop
    4330:	4001e000 	.word	0x4001e000

00004334 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4334:	4b01      	ldr	r3, [pc, #4]	; (433c <SystemCoreClockUpdate+0x8>)
    4336:	4a02      	ldr	r2, [pc, #8]	; (4340 <SystemCoreClockUpdate+0xc>)
    4338:	601a      	str	r2, [r3, #0]
}
    433a:	4770      	bx	lr
    433c:	20000054 	.word	0x20000054
    4340:	03d09000 	.word	0x03d09000

00004344 <SystemInit>:

void SystemInit(void)
{
    4344:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4346:	f7ff ff63 	bl	4210 <nrf52_errata_36>
    434a:	b140      	cbz	r0, 435e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    434c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4350:	2200      	movs	r2, #0
    4352:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4356:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    435a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    435e:	f7ff ff61 	bl	4224 <nrf52_errata_66>
    4362:	2800      	cmp	r0, #0
    4364:	d046      	beq.n	43f4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    436a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    436e:	4b56      	ldr	r3, [pc, #344]	; (44c8 <SystemInit+0x184>)
    4370:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4374:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4378:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    437c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4380:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4384:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4388:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    438c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4390:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4394:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4398:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    439c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    43a0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    43a4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    43a8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    43ac:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    43b0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    43b4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    43b8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    43bc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    43c0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    43c4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    43c8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    43cc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    43d0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    43d4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    43d8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    43dc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    43e0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    43e4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    43e8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    43ec:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    43f0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    43f4:	f7ff ff20 	bl	4238 <nrf52_errata_98>
    43f8:	b110      	cbz	r0, 4400 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    43fa:	4b34      	ldr	r3, [pc, #208]	; (44cc <SystemInit+0x188>)
    43fc:	4a34      	ldr	r2, [pc, #208]	; (44d0 <SystemInit+0x18c>)
    43fe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4400:	f7ff ff2e 	bl	4260 <nrf52_errata_103>
    4404:	b118      	cbz	r0, 440e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4406:	4b33      	ldr	r3, [pc, #204]	; (44d4 <SystemInit+0x190>)
    4408:	22fb      	movs	r2, #251	; 0xfb
    440a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    440e:	f7ff ff3b 	bl	4288 <nrf52_errata_115>
    4412:	b148      	cbz	r0, 4428 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4414:	4930      	ldr	r1, [pc, #192]	; (44d8 <SystemInit+0x194>)
    4416:	680b      	ldr	r3, [r1, #0]
    4418:	f023 030f 	bic.w	r3, r3, #15
    441c:	4a2f      	ldr	r2, [pc, #188]	; (44dc <SystemInit+0x198>)
    441e:	6812      	ldr	r2, [r2, #0]
    4420:	f002 020f 	and.w	r2, r2, #15
    4424:	4313      	orrs	r3, r2
    4426:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4428:	f7ff ff42 	bl	42b0 <nrf52_errata_120>
    442c:	b118      	cbz	r0, 4436 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    442e:	4b2c      	ldr	r3, [pc, #176]	; (44e0 <SystemInit+0x19c>)
    4430:	f44f 7200 	mov.w	r2, #512	; 0x200
    4434:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4436:	f7ff ff4f 	bl	42d8 <nrf52_errata_136>
    443a:	b160      	cbz	r0, 4456 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    443c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4440:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4444:	f013 0f01 	tst.w	r3, #1
    4448:	d005      	beq.n	4456 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    444a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    444e:	f06f 0201 	mvn.w	r2, #1
    4452:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4456:	f7ff ff49 	bl	42ec <nrf52_configuration_249>
    445a:	b138      	cbz	r0, 446c <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    445c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4460:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4468:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    446c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4474:	2b00      	cmp	r3, #0
    4476:	db08      	blt.n	448a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4478:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    447c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4480:	2b00      	cmp	r3, #0
    4482:	db02      	blt.n	448a <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    4484:	f7ff ff56 	bl	4334 <SystemCoreClockUpdate>
}
    4488:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    448a:	2001      	movs	r0, #1
    448c:	f7ff ff48 	bl	4320 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4490:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    4494:	2512      	movs	r5, #18
    4496:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    449a:	f7ff ff39 	bl	4310 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    449e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    44a2:	f7ff ff35 	bl	4310 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    44a6:	2000      	movs	r0, #0
    44a8:	f7ff ff3a 	bl	4320 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    44ac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    44b0:	490c      	ldr	r1, [pc, #48]	; (44e4 <SystemInit+0x1a0>)
    44b2:	68ca      	ldr	r2, [r1, #12]
    44b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    44b8:	4b0b      	ldr	r3, [pc, #44]	; (44e8 <SystemInit+0x1a4>)
    44ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    44bc:	60cb      	str	r3, [r1, #12]
    44be:	f3bf 8f4f 	dsb	sy
    __NOP();
    44c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    44c4:	e7fd      	b.n	44c2 <SystemInit+0x17e>
    44c6:	bf00      	nop
    44c8:	4000c000 	.word	0x4000c000
    44cc:	4000568c 	.word	0x4000568c
    44d0:	00038148 	.word	0x00038148
    44d4:	4000f000 	.word	0x4000f000
    44d8:	40000ee4 	.word	0x40000ee4
    44dc:	10000258 	.word	0x10000258
    44e0:	40029640 	.word	0x40029640
    44e4:	e000ed00 	.word	0xe000ed00
    44e8:	05fa0004 	.word	0x05fa0004

000044ec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    44ec:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    44ee:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    44f0:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    44f4:	f1d3 031f 	rsbs	r3, r3, #31
    44f8:	d415      	bmi.n	4526 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    44fa:	2201      	movs	r2, #1
    44fc:	409a      	lsls	r2, r3
    44fe:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4502:	f3bf 8f5b 	dmb	ish
    4506:	e850 5f00 	ldrex	r5, [r0]
    450a:	42a5      	cmp	r5, r4
    450c:	d104      	bne.n	4518 <nrfx_flag32_alloc+0x2c>
    450e:	e840 2c00 	strex	ip, r2, [r0]
    4512:	f1bc 0f00 	cmp.w	ip, #0
    4516:	d1f6      	bne.n	4506 <nrfx_flag32_alloc+0x1a>
    4518:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    451c:	d1e7      	bne.n	44ee <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    451e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    4520:	4802      	ldr	r0, [pc, #8]	; (452c <nrfx_flag32_alloc+0x40>)
}
    4522:	bc30      	pop	{r4, r5}
    4524:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    4526:	4802      	ldr	r0, [pc, #8]	; (4530 <nrfx_flag32_alloc+0x44>)
    4528:	e7fb      	b.n	4522 <nrfx_flag32_alloc+0x36>
    452a:	bf00      	nop
    452c:	0bad0000 	.word	0x0bad0000
    4530:	0bad0002 	.word	0x0bad0002

00004534 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4534:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4536:	6803      	ldr	r3, [r0, #0]
    4538:	460c      	mov	r4, r1
    453a:	fa23 f101 	lsr.w	r1, r3, r1
    453e:	f011 0f01 	tst.w	r1, #1
    4542:	d114      	bne.n	456e <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    4544:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4546:	2301      	movs	r3, #1
    4548:	40a3      	lsls	r3, r4
    454a:	4313      	orrs	r3, r2
    454c:	f3bf 8f5b 	dmb	ish
    4550:	e850 1f00 	ldrex	r1, [r0]
    4554:	4291      	cmp	r1, r2
    4556:	d104      	bne.n	4562 <nrfx_flag32_free+0x2e>
    4558:	e840 3c00 	strex	ip, r3, [r0]
    455c:	f1bc 0f00 	cmp.w	ip, #0
    4560:	d1f6      	bne.n	4550 <nrfx_flag32_free+0x1c>
    4562:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4566:	d1ed      	bne.n	4544 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4568:	4802      	ldr	r0, [pc, #8]	; (4574 <nrfx_flag32_free+0x40>)
}
    456a:	bc10      	pop	{r4}
    456c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    456e:	4802      	ldr	r0, [pc, #8]	; (4578 <nrfx_flag32_free+0x44>)
    4570:	e7fb      	b.n	456a <nrfx_flag32_free+0x36>
    4572:	bf00      	nop
    4574:	0bad0000 	.word	0x0bad0000
    4578:	0bad0004 	.word	0x0bad0004

0000457c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    457c:	4b06      	ldr	r3, [pc, #24]	; (4598 <nrfx_clock_init+0x1c>)
    457e:	791b      	ldrb	r3, [r3, #4]
    4580:	b93b      	cbnz	r3, 4592 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    4582:	4b05      	ldr	r3, [pc, #20]	; (4598 <nrfx_clock_init+0x1c>)
    4584:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4586:	2201      	movs	r2, #1
    4588:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    458a:	2200      	movs	r2, #0
    458c:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    458e:	4803      	ldr	r0, [pc, #12]	; (459c <nrfx_clock_init+0x20>)
    4590:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4592:	4803      	ldr	r0, [pc, #12]	; (45a0 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4594:	4770      	bx	lr
    4596:	bf00      	nop
    4598:	20000ab0 	.word	0x20000ab0
    459c:	0bad0000 	.word	0x0bad0000
    45a0:	0bad000c 	.word	0x0bad000c

000045a4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    45a4:	b110      	cbz	r0, 45ac <nrfx_clock_start+0x8>
    45a6:	2801      	cmp	r0, #1
    45a8:	d025      	beq.n	45f6 <nrfx_clock_start+0x52>
    45aa:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    45ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    45b0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    45b4:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    45b8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    45bc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    45c0:	d111      	bne.n	45e6 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    45c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45c6:	2200      	movs	r2, #0
    45c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45cc:	4b0f      	ldr	r3, [pc, #60]	; (460c <nrfx_clock_start+0x68>)
    45ce:	2200      	movs	r2, #0
    45d0:	601a      	str	r2, [r3, #0]
    45d2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    45d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45d8:	2202      	movs	r2, #2
    45da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45de:	3308      	adds	r3, #8
    45e0:	2201      	movs	r2, #1
    45e2:	601a      	str	r2, [r3, #0]
}
    45e4:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    45e6:	2b01      	cmp	r3, #1
    45e8:	d1eb      	bne.n	45c2 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    45ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45ee:	2201      	movs	r2, #1
    45f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    45f4:	e7ea      	b.n	45cc <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45f6:	4b06      	ldr	r3, [pc, #24]	; (4610 <nrfx_clock_start+0x6c>)
    45f8:	2200      	movs	r2, #0
    45fa:	601a      	str	r2, [r3, #0]
    45fc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    45fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4602:	2201      	movs	r2, #1
    4604:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4608:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    460a:	4770      	bx	lr
    460c:	40000104 	.word	0x40000104
    4610:	40000100 	.word	0x40000100

00004614 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4614:	b530      	push	{r4, r5, lr}
    4616:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4618:	4604      	mov	r4, r0
    461a:	b118      	cbz	r0, 4624 <nrfx_clock_stop+0x10>
    461c:	2801      	cmp	r0, #1
    461e:	d013      	beq.n	4648 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4620:	b003      	add	sp, #12
    4622:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4628:	2202      	movs	r2, #2
    462a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    462e:	f503 7382 	add.w	r3, r3, #260	; 0x104
    4632:	2200      	movs	r2, #0
    4634:	601a      	str	r2, [r3, #0]
    4636:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4638:	4b39      	ldr	r3, [pc, #228]	; (4720 <nrfx_clock_stop+0x10c>)
    463a:	2201      	movs	r2, #1
    463c:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    463e:	2c01      	cmp	r4, #1
    4640:	d00f      	beq.n	4662 <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4642:	f242 7510 	movw	r5, #10000	; 0x2710
    4646:	e052      	b.n	46ee <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    4648:	2301      	movs	r3, #1
    464a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    464e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4652:	f502 7280 	add.w	r2, r2, #256	; 0x100
    4656:	2100      	movs	r1, #0
    4658:	6011      	str	r1, [r2, #0]
    465a:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    465c:	4a31      	ldr	r2, [pc, #196]	; (4724 <nrfx_clock_stop+0x110>)
    465e:	6013      	str	r3, [r2, #0]
}
    4660:	e7ed      	b.n	463e <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4662:	2301      	movs	r3, #1
    4664:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4668:	f242 7510 	movw	r5, #10000	; 0x2710
    466c:	e018      	b.n	46a0 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    466e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4672:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4676:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    467a:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    467e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4682:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4686:	d120      	bne.n	46ca <nrfx_clock_stop+0xb6>
    return false;
    4688:	2300      	movs	r3, #0
    468a:	2b00      	cmp	r3, #0
    468c:	d042      	beq.n	4714 <nrfx_clock_stop+0x100>
    468e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4692:	2b01      	cmp	r3, #1
    4694:	d13e      	bne.n	4714 <nrfx_clock_stop+0x100>
    4696:	2001      	movs	r0, #1
    4698:	f003 fcb2 	bl	8000 <nrfx_busy_wait>
    469c:	3d01      	subs	r5, #1
    469e:	d039      	beq.n	4714 <nrfx_clock_stop+0x100>
    switch (domain)
    46a0:	2c00      	cmp	r4, #0
    46a2:	d0e4      	beq.n	466e <nrfx_clock_stop+0x5a>
    46a4:	2c01      	cmp	r4, #1
    46a6:	d001      	beq.n	46ac <nrfx_clock_stop+0x98>
    46a8:	2300      	movs	r3, #0
    46aa:	e7ee      	b.n	468a <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    46ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    46b0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    46b4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    46b8:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    46bc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    46c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    46c4:	d103      	bne.n	46ce <nrfx_clock_stop+0xba>
    return false;
    46c6:	2300      	movs	r3, #0
    46c8:	e7df      	b.n	468a <nrfx_clock_stop+0x76>
                return true;
    46ca:	2301      	movs	r3, #1
    46cc:	e7dd      	b.n	468a <nrfx_clock_stop+0x76>
                return true;
    46ce:	2301      	movs	r3, #1
    46d0:	e7db      	b.n	468a <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    46d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46d6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    46da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    46de:	d115      	bne.n	470c <nrfx_clock_stop+0xf8>
    return false;
    46e0:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    46e2:	b1bb      	cbz	r3, 4714 <nrfx_clock_stop+0x100>
    46e4:	2001      	movs	r0, #1
    46e6:	f003 fc8b 	bl	8000 <nrfx_busy_wait>
    46ea:	3d01      	subs	r5, #1
    46ec:	d012      	beq.n	4714 <nrfx_clock_stop+0x100>
    switch (domain)
    46ee:	2c00      	cmp	r4, #0
    46f0:	d0ef      	beq.n	46d2 <nrfx_clock_stop+0xbe>
    46f2:	2c01      	cmp	r4, #1
    46f4:	d001      	beq.n	46fa <nrfx_clock_stop+0xe6>
    46f6:	2300      	movs	r3, #0
    46f8:	e7f3      	b.n	46e2 <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    46fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4702:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4706:	d103      	bne.n	4710 <nrfx_clock_stop+0xfc>
    return false;
    4708:	2300      	movs	r3, #0
    470a:	e7ea      	b.n	46e2 <nrfx_clock_stop+0xce>
                return true;
    470c:	2301      	movs	r3, #1
    470e:	e7e8      	b.n	46e2 <nrfx_clock_stop+0xce>
                return true;
    4710:	2301      	movs	r3, #1
    4712:	e7e6      	b.n	46e2 <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4714:	2c01      	cmp	r4, #1
    4716:	d183      	bne.n	4620 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    4718:	4b03      	ldr	r3, [pc, #12]	; (4728 <nrfx_clock_stop+0x114>)
    471a:	2200      	movs	r2, #0
    471c:	715a      	strb	r2, [r3, #5]
    471e:	e77f      	b.n	4620 <nrfx_clock_stop+0xc>
    4720:	4000000c 	.word	0x4000000c
    4724:	40000004 	.word	0x40000004
    4728:	20000ab0 	.word	0x20000ab0

0000472c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    472c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    472e:	4b1b      	ldr	r3, [pc, #108]	; (479c <nrfx_power_clock_irq_handler+0x70>)
    4730:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4732:	b183      	cbz	r3, 4756 <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4734:	4b19      	ldr	r3, [pc, #100]	; (479c <nrfx_power_clock_irq_handler+0x70>)
    4736:	2200      	movs	r2, #0
    4738:	601a      	str	r2, [r3, #0]
    473a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    473c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4740:	2201      	movs	r2, #1
    4742:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4746:	4b16      	ldr	r3, [pc, #88]	; (47a0 <nrfx_power_clock_irq_handler+0x74>)
    4748:	795b      	ldrb	r3, [r3, #5]
    474a:	b923      	cbnz	r3, 4756 <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    474c:	4b14      	ldr	r3, [pc, #80]	; (47a0 <nrfx_power_clock_irq_handler+0x74>)
    474e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4750:	681b      	ldr	r3, [r3, #0]
    4752:	2000      	movs	r0, #0
    4754:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4756:	4b13      	ldr	r3, [pc, #76]	; (47a4 <nrfx_power_clock_irq_handler+0x78>)
    4758:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    475a:	b19b      	cbz	r3, 4784 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    475c:	4b11      	ldr	r3, [pc, #68]	; (47a4 <nrfx_power_clock_irq_handler+0x78>)
    475e:	2200      	movs	r2, #0
    4760:	601a      	str	r2, [r3, #0]
    4762:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4768:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    476c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4770:	f012 0f03 	tst.w	r2, #3
    4774:	d107      	bne.n	4786 <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4776:	2301      	movs	r3, #1
    4778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    477c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4780:	3208      	adds	r2, #8
    4782:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4784:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    4786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    478a:	2202      	movs	r2, #2
    478c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4790:	4b03      	ldr	r3, [pc, #12]	; (47a0 <nrfx_power_clock_irq_handler+0x74>)
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	2001      	movs	r0, #1
    4796:	4798      	blx	r3
}
    4798:	e7f4      	b.n	4784 <nrfx_power_clock_irq_handler+0x58>
    479a:	bf00      	nop
    479c:	40000100 	.word	0x40000100
    47a0:	20000ab0 	.word	0x20000ab0
    47a4:	40000104 	.word	0x40000104

000047a8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    47a8:	3008      	adds	r0, #8
    47aa:	4b03      	ldr	r3, [pc, #12]	; (47b8 <pin_in_use+0x10>)
    47ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47b0:	f000 0001 	and.w	r0, r0, #1
    47b4:	4770      	bx	lr
    47b6:	bf00      	nop
    47b8:	20000058 	.word	0x20000058

000047bc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    47bc:	3008      	adds	r0, #8
    47be:	4b03      	ldr	r3, [pc, #12]	; (47cc <pin_in_use_by_te+0x10>)
    47c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47c4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop
    47cc:	20000058 	.word	0x20000058

000047d0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    47d0:	3008      	adds	r0, #8
    47d2:	4b04      	ldr	r3, [pc, #16]	; (47e4 <pin_has_trigger+0x14>)
    47d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47d8:	f010 001c 	ands.w	r0, r0, #28
    47dc:	bf18      	it	ne
    47de:	2001      	movne	r0, #1
    47e0:	4770      	bx	lr
    47e2:	bf00      	nop
    47e4:	20000058 	.word	0x20000058

000047e8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47e8:	3008      	adds	r0, #8
    47ea:	4b03      	ldr	r3, [pc, #12]	; (47f8 <pin_is_output+0x10>)
    47ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    47f4:	4770      	bx	lr
    47f6:	bf00      	nop
    47f8:	20000058 	.word	0x20000058

000047fc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47fc:	3008      	adds	r0, #8
    47fe:	4b02      	ldr	r3, [pc, #8]	; (4808 <pin_te_get+0xc>)
    4800:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4804:	0b40      	lsrs	r0, r0, #13
    4806:	4770      	bx	lr
    4808:	20000058 	.word	0x20000058

0000480c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    480c:	2200      	movs	r2, #0
    480e:	e004      	b.n	481a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4814:	4283      	cmp	r3, r0
    4816:	d00f      	beq.n	4838 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4818:	3201      	adds	r2, #1
    481a:	2a2f      	cmp	r2, #47	; 0x2f
    481c:	d80a      	bhi.n	4834 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    481e:	f102 0308 	add.w	r3, r2, #8
    4822:	4906      	ldr	r1, [pc, #24]	; (483c <handler_in_use+0x30>)
    4824:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    4828:	f413 7f80 	tst.w	r3, #256	; 0x100
    482c:	d0f0      	beq.n	4810 <handler_in_use+0x4>
    482e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4832:	e7ef      	b.n	4814 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    4834:	2000      	movs	r0, #0
    4836:	4770      	bx	lr
            return true;
    4838:	2001      	movs	r0, #1
}
    483a:	4770      	bx	lr
    483c:	20000058 	.word	0x20000058

00004840 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4840:	2300      	movs	r3, #0
    4842:	b113      	cbz	r3, 484a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    4844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4848:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    484a:	4a07      	ldr	r2, [pc, #28]	; (4868 <find_handler+0x28>)
    484c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    4850:	4282      	cmp	r2, r0
    4852:	d001      	beq.n	4858 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4854:	3301      	adds	r3, #1
    4856:	e7f4      	b.n	4842 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4858:	4a03      	ldr	r2, [pc, #12]	; (4868 <find_handler+0x28>)
    485a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    485e:	6852      	ldr	r2, [r2, #4]
    4860:	428a      	cmp	r2, r1
    4862:	d1f7      	bne.n	4854 <find_handler+0x14>
            return i;
    4864:	4618      	mov	r0, r3
    4866:	4770      	bx	lr
    4868:	20000058 	.word	0x20000058

0000486c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    486c:	3008      	adds	r0, #8
    486e:	4b06      	ldr	r3, [pc, #24]	; (4888 <channel_handler_get+0x1c>)
    4870:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4874:	f410 7f80 	tst.w	r0, #256	; 0x100
    4878:	d004      	beq.n	4884 <channel_handler_get+0x18>
    487a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    487e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4882:	4770      	bx	lr
        return NULL;
    4884:	2000      	movs	r0, #0
}
    4886:	4770      	bx	lr
    4888:	20000058 	.word	0x20000058

0000488c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    488c:	b570      	push	{r4, r5, r6, lr}
    488e:	4604      	mov	r4, r0
    4890:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    4892:	f7ff ffeb 	bl	486c <channel_handler_get>

    if (handler)
    4896:	b120      	cbz	r0, 48a2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    4898:	6806      	ldr	r6, [r0, #0]
    489a:	6842      	ldr	r2, [r0, #4]
    489c:	4629      	mov	r1, r5
    489e:	4620      	mov	r0, r4
    48a0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    48a2:	4b04      	ldr	r3, [pc, #16]	; (48b4 <call_handler+0x28>)
    48a4:	689b      	ldr	r3, [r3, #8]
    48a6:	b123      	cbz	r3, 48b2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    48a8:	4a02      	ldr	r2, [pc, #8]	; (48b4 <call_handler+0x28>)
    48aa:	68d2      	ldr	r2, [r2, #12]
    48ac:	4629      	mov	r1, r5
    48ae:	4620      	mov	r0, r4
    48b0:	4798      	blx	r3
    }
}
    48b2:	bd70      	pop	{r4, r5, r6, pc}
    48b4:	20000058 	.word	0x20000058

000048b8 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    48b8:	b570      	push	{r4, r5, r6, lr}
    48ba:	4604      	mov	r4, r0
    48bc:	460d      	mov	r5, r1
    48be:	4616      	mov	r6, r2
    if (is_level(trigger))
    48c0:	4608      	mov	r0, r1
    48c2:	f003 fbc2 	bl	804a <is_level>
    48c6:	b9d0      	cbnz	r0, 48fe <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    48c8:	2e02      	cmp	r6, #2
    48ca:	d03e      	beq.n	494a <next_sense_cond_call_handler+0x92>
    48cc:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    48ce:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    48d2:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48d4:	2901      	cmp	r1, #1
    48d6:	d03a      	beq.n	494e <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
    48d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    48dc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    48e0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    48e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    48e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    48ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    48f0:	2d03      	cmp	r5, #3
    48f2:	d030      	beq.n	4956 <next_sense_cond_call_handler+0x9e>
    48f4:	2e02      	cmp	r6, #2
    48f6:	d02c      	beq.n	4952 <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    48f8:	2e03      	cmp	r6, #3
    48fa:	d031      	beq.n	4960 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    48fc:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    48fe:	4629      	mov	r1, r5
    4900:	4620      	mov	r0, r4
    4902:	f7ff ffc3 	bl	488c <call_handler>
    *p_pin = pin_number & 0x1F;
    4906:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    490a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    490c:	2c01      	cmp	r4, #1
    490e:	d01a      	beq.n	4946 <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    4910:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4914:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
    4918:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    491c:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4920:	4296      	cmp	r6, r2
    4922:	d1eb      	bne.n	48fc <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4924:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4928:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    492c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4934:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4938:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    493c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4940:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    4944:	e7da      	b.n	48fc <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    4946:	4908      	ldr	r1, [pc, #32]	; (4968 <next_sense_cond_call_handler+0xb0>)
    4948:	e7e4      	b.n	4914 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    494a:	2003      	movs	r0, #3
    494c:	e7bf      	b.n	48ce <next_sense_cond_call_handler+0x16>
    494e:	4906      	ldr	r1, [pc, #24]	; (4968 <next_sense_cond_call_handler+0xb0>)
    4950:	e7c4      	b.n	48dc <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4952:	2d01      	cmp	r5, #1
    4954:	d1d0      	bne.n	48f8 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    4956:	4629      	mov	r1, r5
    4958:	4620      	mov	r0, r4
    495a:	f7ff ff97 	bl	488c <call_handler>
}
    495e:	e7cd      	b.n	48fc <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4960:	2d02      	cmp	r5, #2
    4962:	d1cb      	bne.n	48fc <next_sense_cond_call_handler+0x44>
    4964:	e7f7      	b.n	4956 <next_sense_cond_call_handler+0x9e>
    4966:	bf00      	nop
    4968:	50000300 	.word	0x50000300

0000496c <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    496c:	b410      	push	{r4}
    496e:	b083      	sub	sp, #12
    4970:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4972:	4b12      	ldr	r3, [pc, #72]	; (49bc <latch_pending_read_and_check+0x50>)
    4974:	e893 0003 	ldmia.w	r3, {r0, r1}
    4978:	ab02      	add	r3, sp, #8
    497a:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    497e:	4620      	mov	r0, r4
    4980:	2300      	movs	r3, #0
    4982:	e00b      	b.n	499c <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    4984:	aa02      	add	r2, sp, #8
    4986:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    498a:	f852 2c08 	ldr.w	r2, [r2, #-8]
    498e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4992:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4996:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    499a:	3301      	adds	r3, #1
    499c:	2b01      	cmp	r3, #1
    499e:	d9f1      	bls.n	4984 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    49a0:	2300      	movs	r3, #0
    49a2:	2b01      	cmp	r3, #1
    49a4:	d804      	bhi.n	49b0 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    49a6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    49aa:	b92a      	cbnz	r2, 49b8 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    49ac:	3301      	adds	r3, #1
    49ae:	e7f8      	b.n	49a2 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    49b0:	2000      	movs	r0, #0
}
    49b2:	b003      	add	sp, #12
    49b4:	bc10      	pop	{r4}
    49b6:	4770      	bx	lr
            return true;
    49b8:	2001      	movs	r0, #1
    49ba:	e7fa      	b.n	49b2 <latch_pending_read_and_check+0x46>
    49bc:	00008920 	.word	0x00008920

000049c0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    49c0:	f100 0208 	add.w	r2, r0, #8
    49c4:	4b0e      	ldr	r3, [pc, #56]	; (4a00 <release_handler+0x40>)
    49c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    49ca:	f413 7f80 	tst.w	r3, #256	; 0x100
    49ce:	d016      	beq.n	49fe <release_handler+0x3e>
{
    49d0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    49d2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    49d6:	4610      	mov	r0, r2
    49d8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    49dc:	4a08      	ldr	r2, [pc, #32]	; (4a00 <release_handler+0x40>)
    49de:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    49e2:	4620      	mov	r0, r4
    49e4:	f7ff ff12 	bl	480c <handler_in_use>
    49e8:	b100      	cbz	r0, 49ec <release_handler+0x2c>
}
    49ea:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    49ec:	4804      	ldr	r0, [pc, #16]	; (4a00 <release_handler+0x40>)
    49ee:	2300      	movs	r3, #0
    49f0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    49f4:	4621      	mov	r1, r4
    49f6:	3074      	adds	r0, #116	; 0x74
    49f8:	f7ff fd9c 	bl	4534 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    49fc:	e7f5      	b.n	49ea <release_handler+0x2a>
    49fe:	4770      	bx	lr
    4a00:	20000058 	.word	0x20000058

00004a04 <pin_handler_trigger_uninit>:
{
    4a04:	b510      	push	{r4, lr}
    4a06:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    4a08:	f7ff fed8 	bl	47bc <pin_in_use_by_te>
    4a0c:	b140      	cbz	r0, 4a20 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4a0e:	4620      	mov	r0, r4
    4a10:	f7ff fef4 	bl	47fc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4a14:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    4a18:	4b06      	ldr	r3, [pc, #24]	; (4a34 <pin_handler_trigger_uninit+0x30>)
    4a1a:	2200      	movs	r2, #0
    4a1c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    4a20:	4620      	mov	r0, r4
    4a22:	f7ff ffcd 	bl	49c0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4a26:	3408      	adds	r4, #8
    4a28:	4b03      	ldr	r3, [pc, #12]	; (4a38 <pin_handler_trigger_uninit+0x34>)
    4a2a:	2200      	movs	r2, #0
    4a2c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    4a30:	bd10      	pop	{r4, pc}
    4a32:	bf00      	nop
    4a34:	40006000 	.word	0x40006000
    4a38:	20000058 	.word	0x20000058

00004a3c <pin_handler_set>:
{
    4a3c:	b570      	push	{r4, r5, r6, lr}
    4a3e:	b082      	sub	sp, #8
    4a40:	4606      	mov	r6, r0
    4a42:	460c      	mov	r4, r1
    4a44:	4615      	mov	r5, r2
    release_handler(pin);
    4a46:	f7ff ffbb 	bl	49c0 <release_handler>
    if (!handler)
    4a4a:	b324      	cbz	r4, 4a96 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    4a4c:	4629      	mov	r1, r5
    4a4e:	4620      	mov	r0, r4
    4a50:	f7ff fef6 	bl	4840 <find_handler>
    if (handler_id < 0)
    4a54:	1e03      	subs	r3, r0, #0
    4a56:	db13      	blt.n	4a80 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    4a58:	4a10      	ldr	r2, [pc, #64]	; (4a9c <pin_handler_set+0x60>)
    4a5a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4a5e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    4a62:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4a64:	025b      	lsls	r3, r3, #9
    4a66:	b29b      	uxth	r3, r3
    4a68:	f106 0008 	add.w	r0, r6, #8
    4a6c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    4a70:	430b      	orrs	r3, r1
    4a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4a76:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    4a7a:	4809      	ldr	r0, [pc, #36]	; (4aa0 <pin_handler_set+0x64>)
}
    4a7c:	b002      	add	sp, #8
    4a7e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4a80:	f10d 0107 	add.w	r1, sp, #7
    4a84:	4807      	ldr	r0, [pc, #28]	; (4aa4 <pin_handler_set+0x68>)
    4a86:	f7ff fd31 	bl	44ec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4a8a:	4b05      	ldr	r3, [pc, #20]	; (4aa0 <pin_handler_set+0x64>)
    4a8c:	4298      	cmp	r0, r3
    4a8e:	d1f5      	bne.n	4a7c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    4a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a94:	e7e0      	b.n	4a58 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    4a96:	4802      	ldr	r0, [pc, #8]	; (4aa0 <pin_handler_set+0x64>)
    4a98:	e7f0      	b.n	4a7c <pin_handler_set+0x40>
    4a9a:	bf00      	nop
    4a9c:	20000058 	.word	0x20000058
    4aa0:	0bad0000 	.word	0x0bad0000
    4aa4:	200000cc 	.word	0x200000cc

00004aa8 <port_event_handle>:

static void port_event_handle(void)
{
    4aa8:	b570      	push	{r4, r5, r6, lr}
    4aaa:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4aac:	4a2c      	ldr	r2, [pc, #176]	; (4b60 <port_event_handle+0xb8>)
    4aae:	466b      	mov	r3, sp
    4ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
    4ab4:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4ab8:	2300      	movs	r3, #0
    4aba:	a802      	add	r0, sp, #8
    4abc:	e00b      	b.n	4ad6 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    4abe:	aa04      	add	r2, sp, #16
    4ac0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4ac4:	f852 2c10 	ldr.w	r2, [r2, #-16]
    4ac8:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4acc:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4ad0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4ad4:	3301      	adds	r3, #1
    4ad6:	2b01      	cmp	r3, #1
    4ad8:	d9f1      	bls.n	4abe <port_event_handle+0x16>
    4ada:	e03d      	b.n	4b58 <port_event_handle+0xb0>
        case 1: return NRF_P1;
    4adc:	4e21      	ldr	r6, [pc, #132]	; (4b64 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ade:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4ae2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    4ae6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4aea:	f7ff fee5 	bl	48b8 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    4aee:	2301      	movs	r3, #1
    4af0:	40ab      	lsls	r3, r5
    4af2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    4af6:	ab04      	add	r3, sp, #16
    4af8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4afc:	f853 0c08 	ldr.w	r0, [r3, #-8]
    4b00:	b1f8      	cbz	r0, 4b42 <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
    4b02:	fa90 f0a0 	rbit	r0, r0
    4b06:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    4b0a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4b0e:	f100 0208 	add.w	r2, r0, #8
    4b12:	4b15      	ldr	r3, [pc, #84]	; (4b68 <port_event_handle+0xc0>)
    4b14:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    4b18:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4b1c:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    4b1e:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4b22:	ae02      	add	r6, sp, #8
    4b24:	2301      	movs	r3, #1
    4b26:	fa03 f202 	lsl.w	r2, r3, r2
    4b2a:	5d73      	ldrb	r3, [r6, r5]
    4b2c:	ea23 0302 	bic.w	r3, r3, r2
    4b30:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    4b32:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    4b36:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b38:	2b01      	cmp	r3, #1
    4b3a:	d0cf      	beq.n	4adc <port_event_handle+0x34>
        case 0: return NRF_P0;
    4b3c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    4b40:	e7cd      	b.n	4ade <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4b42:	3401      	adds	r4, #1
    4b44:	2c01      	cmp	r4, #1
    4b46:	d9d6      	bls.n	4af6 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4b48:	4b08      	ldr	r3, [pc, #32]	; (4b6c <port_event_handle+0xc4>)
    4b4a:	2200      	movs	r2, #0
    4b4c:	601a      	str	r2, [r3, #0]
    4b4e:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    4b50:	a802      	add	r0, sp, #8
    4b52:	f7ff ff0b 	bl	496c <latch_pending_read_and_check>
    4b56:	b108      	cbz	r0, 4b5c <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4b58:	2400      	movs	r4, #0
    4b5a:	e7f3      	b.n	4b44 <port_event_handle+0x9c>
}
    4b5c:	b004      	add	sp, #16
    4b5e:	bd70      	pop	{r4, r5, r6, pc}
    4b60:	00008920 	.word	0x00008920
    4b64:	50000300 	.word	0x50000300
    4b68:	20000058 	.word	0x20000058
    4b6c:	4000617c 	.word	0x4000617c

00004b70 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    4b70:	b538      	push	{r3, r4, r5, lr}
    4b72:	4604      	mov	r4, r0
    while (mask)
    4b74:	b1cc      	cbz	r4, 4baa <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    4b76:	fa94 f3a4 	rbit	r3, r4
    4b7a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4b7e:	2201      	movs	r2, #1
    4b80:	409a      	lsls	r2, r3
    4b82:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4b86:	4a09      	ldr	r2, [pc, #36]	; (4bac <gpiote_evt_handle+0x3c>)
    4b88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4b8c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    4b90:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4b94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4b98:	f3c0 4001 	ubfx	r0, r0, #16, #2
    4b9c:	f003 fa53 	bl	8046 <gpiote_polarity_to_trigger>
    4ba0:	4601      	mov	r1, r0
    4ba2:	4628      	mov	r0, r5
    4ba4:	f7ff fe72 	bl	488c <call_handler>
    4ba8:	e7e4      	b.n	4b74 <gpiote_evt_handle+0x4>
    }
}
    4baa:	bd38      	pop	{r3, r4, r5, pc}
    4bac:	40006000 	.word	0x40006000

00004bb0 <nrfx_gpiote_input_configure>:
{
    4bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4bb4:	4604      	mov	r4, r0
    4bb6:	4615      	mov	r5, r2
    4bb8:	461e      	mov	r6, r3
    if (p_input_config)
    4bba:	b361      	cbz	r1, 4c16 <nrfx_gpiote_input_configure+0x66>
    4bbc:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    4bbe:	f003 fa2c 	bl	801a <pin_is_task_output>
    4bc2:	2800      	cmp	r0, #0
    4bc4:	f040 8097 	bne.w	4cf6 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    4bc8:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    4bcc:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bce:	2b01      	cmp	r3, #1
    4bd0:	d042      	beq.n	4c58 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
    4bd2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4bd6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4bda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4bde:	2f00      	cmp	r7, #0
    4be0:	d03c      	beq.n	4c5c <nrfx_gpiote_input_configure+0xac>
    4be2:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4be4:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    4be8:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4bec:	2f00      	cmp	r7, #0
    4bee:	d037      	beq.n	4c60 <nrfx_gpiote_input_configure+0xb0>
    4bf0:	7839      	ldrb	r1, [r7, #0]
    4bf2:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4bf4:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    4bf6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4bfa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4bfe:	4a42      	ldr	r2, [pc, #264]	; (4d08 <nrfx_gpiote_input_configure+0x158>)
    4c00:	f104 0108 	add.w	r1, r4, #8
    4c04:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4c08:	f023 0302 	bic.w	r3, r3, #2
    4c0c:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4c0e:	f043 0301 	orr.w	r3, r3, #1
    4c12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4c16:	b1b5      	cbz	r5, 4c46 <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4c18:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4c1c:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    4c20:	4620      	mov	r0, r4
    4c22:	f7ff fde1 	bl	47e8 <pin_is_output>
    4c26:	b1e8      	cbz	r0, 4c64 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
    4c28:	f1b9 0f00 	cmp.w	r9, #0
    4c2c:	d165      	bne.n	4cfa <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4c2e:	4b36      	ldr	r3, [pc, #216]	; (4d08 <nrfx_gpiote_input_configure+0x158>)
    4c30:	f104 0208 	add.w	r2, r4, #8
    4c34:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    4c38:	f020 001c 	bic.w	r0, r0, #28
    4c3c:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4c3e:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    4c42:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    4c46:	2e00      	cmp	r6, #0
    4c48:	d05b      	beq.n	4d02 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c4a:	6872      	ldr	r2, [r6, #4]
    4c4c:	6831      	ldr	r1, [r6, #0]
    4c4e:	4620      	mov	r0, r4
    4c50:	f7ff fef4 	bl	4a3c <pin_handler_set>
}
    4c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    4c58:	482c      	ldr	r0, [pc, #176]	; (4d0c <nrfx_gpiote_input_configure+0x15c>)
    4c5a:	e7bc      	b.n	4bd6 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4c5c:	2100      	movs	r1, #0
    4c5e:	e7c1      	b.n	4be4 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4c60:	2100      	movs	r1, #0
    4c62:	e7c7      	b.n	4bf4 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4c64:	4b28      	ldr	r3, [pc, #160]	; (4d08 <nrfx_gpiote_input_configure+0x158>)
    4c66:	f104 0208 	add.w	r2, r4, #8
    4c6a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    4c6e:	f027 0720 	bic.w	r7, r7, #32
    4c72:	04ff      	lsls	r7, r7, #19
    4c74:	0cff      	lsrs	r7, r7, #19
    4c76:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    4c7a:	f1b9 0f00 	cmp.w	r9, #0
    4c7e:	d0d6      	beq.n	4c2e <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
    4c80:	f1b8 0f03 	cmp.w	r8, #3
    4c84:	d83b      	bhi.n	4cfe <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4c86:	686b      	ldr	r3, [r5, #4]
    4c88:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4c8a:	f1b8 0f00 	cmp.w	r8, #0
    4c8e:	d106      	bne.n	4c9e <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    4c90:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    4c94:	4b1e      	ldr	r3, [pc, #120]	; (4d10 <nrfx_gpiote_input_configure+0x160>)
    4c96:	2200      	movs	r2, #0
    4c98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4c9c:	e7c7      	b.n	4c2e <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    4c9e:	4640      	mov	r0, r8
    4ca0:	f003 f9d2 	bl	8048 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4ca4:	4b1a      	ldr	r3, [pc, #104]	; (4d10 <nrfx_gpiote_input_configure+0x160>)
    4ca6:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    4caa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4cae:	f021 0103 	bic.w	r1, r1, #3
    4cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4cb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4cba:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    4cbe:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4cc6:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    4cca:	0221      	lsls	r1, r4, #8
    4ccc:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    4cd0:	0400      	lsls	r0, r0, #16
    4cd2:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4cd6:	4301      	orrs	r1, r0
    4cd8:	ea4c 0101 	orr.w	r1, ip, r1
    4cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4ce0:	036d      	lsls	r5, r5, #13
    4ce2:	b2ad      	uxth	r5, r5
    4ce4:	f104 0308 	add.w	r3, r4, #8
    4ce8:	432f      	orrs	r7, r5
    4cea:	f047 0720 	orr.w	r7, r7, #32
    4cee:	4a06      	ldr	r2, [pc, #24]	; (4d08 <nrfx_gpiote_input_configure+0x158>)
    4cf0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    4cf4:	e79b      	b.n	4c2e <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
    4cf6:	4807      	ldr	r0, [pc, #28]	; (4d14 <nrfx_gpiote_input_configure+0x164>)
    4cf8:	e7ac      	b.n	4c54 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
    4cfa:	4806      	ldr	r0, [pc, #24]	; (4d14 <nrfx_gpiote_input_configure+0x164>)
    4cfc:	e7aa      	b.n	4c54 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
    4cfe:	4805      	ldr	r0, [pc, #20]	; (4d14 <nrfx_gpiote_input_configure+0x164>)
    4d00:	e7a8      	b.n	4c54 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
    4d02:	4805      	ldr	r0, [pc, #20]	; (4d18 <nrfx_gpiote_input_configure+0x168>)
    4d04:	e7a6      	b.n	4c54 <nrfx_gpiote_input_configure+0xa4>
    4d06:	bf00      	nop
    4d08:	20000058 	.word	0x20000058
    4d0c:	50000300 	.word	0x50000300
    4d10:	40006000 	.word	0x40006000
    4d14:	0bad0004 	.word	0x0bad0004
    4d18:	0bad0000 	.word	0x0bad0000

00004d1c <nrfx_gpiote_output_configure>:
{
    4d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d1e:	4604      	mov	r4, r0
    4d20:	4615      	mov	r5, r2
    if (p_config)
    4d22:	2900      	cmp	r1, #0
    4d24:	d052      	beq.n	4dcc <nrfx_gpiote_output_configure+0xb0>
    4d26:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4d28:	f003 f986 	bl	8038 <pin_is_input>
    4d2c:	b128      	cbz	r0, 4d3a <nrfx_gpiote_output_configure+0x1e>
    4d2e:	4620      	mov	r0, r4
    4d30:	f7ff fd44 	bl	47bc <pin_in_use_by_te>
    4d34:	2800      	cmp	r0, #0
    4d36:	f040 809d 	bne.w	4e74 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4d3a:	4620      	mov	r0, r4
    4d3c:	f7ff fd48 	bl	47d0 <pin_has_trigger>
    4d40:	b118      	cbz	r0, 4d4a <nrfx_gpiote_output_configure+0x2e>
    4d42:	7873      	ldrb	r3, [r6, #1]
    4d44:	2b01      	cmp	r3, #1
    4d46:	f000 8097 	beq.w	4e78 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4d4a:	f106 0c01 	add.w	ip, r6, #1
    4d4e:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    4d50:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    4d54:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d56:	2b01      	cmp	r3, #1
    4d58:	d07c      	beq.n	4e54 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    4d5a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d5e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    4d62:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4d66:	f1bc 0f00 	cmp.w	ip, #0
    4d6a:	d075      	beq.n	4e58 <nrfx_gpiote_output_configure+0x13c>
    4d6c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4d6e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4d72:	2f00      	cmp	r7, #0
    4d74:	d072      	beq.n	4e5c <nrfx_gpiote_output_configure+0x140>
    4d76:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4d7a:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4d7e:	2e00      	cmp	r6, #0
    4d80:	d06f      	beq.n	4e62 <nrfx_gpiote_output_configure+0x146>
    4d82:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4d86:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    4d8a:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4d8e:	f1bc 0f00 	cmp.w	ip, #0
    4d92:	d069      	beq.n	4e68 <nrfx_gpiote_output_configure+0x14c>
    4d94:	7873      	ldrb	r3, [r6, #1]
    4d96:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d98:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4d9c:	2f00      	cmp	r7, #0
    4d9e:	d065      	beq.n	4e6c <nrfx_gpiote_output_configure+0x150>
    4da0:	78b7      	ldrb	r7, [r6, #2]
    4da2:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4da4:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4da6:	2e00      	cmp	r6, #0
    4da8:	d062      	beq.n	4e70 <nrfx_gpiote_output_configure+0x154>
    4daa:	7836      	ldrb	r6, [r6, #0]
    4dac:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4dae:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4db0:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    4db2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4db6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4dba:	4a33      	ldr	r2, [pc, #204]	; (4e88 <nrfx_gpiote_output_configure+0x16c>)
    4dbc:	f104 0108 	add.w	r1, r4, #8
    4dc0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4dc4:	f043 0303 	orr.w	r3, r3, #3
    4dc8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    4dcc:	2d00      	cmp	r5, #0
    4dce:	d055      	beq.n	4e7c <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    4dd0:	4620      	mov	r0, r4
    4dd2:	f003 f931 	bl	8038 <pin_is_input>
    4dd6:	2800      	cmp	r0, #0
    4dd8:	d152      	bne.n	4e80 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    4dda:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    4ddc:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    4de0:	4b2a      	ldr	r3, [pc, #168]	; (4e8c <nrfx_gpiote_output_configure+0x170>)
    4de2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4de6:	4928      	ldr	r1, [pc, #160]	; (4e88 <nrfx_gpiote_output_configure+0x16c>)
    4de8:	f104 0008 	add.w	r0, r4, #8
    4dec:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    4df0:	f023 0320 	bic.w	r3, r3, #32
    4df4:	04db      	lsls	r3, r3, #19
    4df6:	0cdb      	lsrs	r3, r3, #19
    4df8:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4dfc:	7869      	ldrb	r1, [r5, #1]
    4dfe:	2900      	cmp	r1, #0
    4e00:	d040      	beq.n	4e84 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4e02:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4e06:	4d21      	ldr	r5, [pc, #132]	; (4e8c <nrfx_gpiote_output_configure+0x170>)
    4e08:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    4e0c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    4e10:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    4e14:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    4e18:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4e1c:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    4e20:	0220      	lsls	r0, r4, #8
    4e22:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4e26:	0409      	lsls	r1, r1, #16
    4e28:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4e2c:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4e2e:	ea4f 500c 	mov.w	r0, ip, lsl #20
    4e32:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4e36:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4e38:	4339      	orrs	r1, r7
    4e3a:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4e3e:	0352      	lsls	r2, r2, #13
    4e40:	b292      	uxth	r2, r2
    4e42:	3408      	adds	r4, #8
    4e44:	431a      	orrs	r2, r3
    4e46:	f042 0220 	orr.w	r2, r2, #32
    4e4a:	4b0f      	ldr	r3, [pc, #60]	; (4e88 <nrfx_gpiote_output_configure+0x16c>)
    4e4c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    4e50:	480f      	ldr	r0, [pc, #60]	; (4e90 <nrfx_gpiote_output_configure+0x174>)
    4e52:	e014      	b.n	4e7e <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    4e54:	490f      	ldr	r1, [pc, #60]	; (4e94 <nrfx_gpiote_output_configure+0x178>)
    4e56:	e782      	b.n	4d5e <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4e58:	2300      	movs	r3, #0
    4e5a:	e788      	b.n	4d6e <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4e5c:	f04f 0e00 	mov.w	lr, #0
    4e60:	e78b      	b.n	4d7a <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4e62:	f04f 0e00 	mov.w	lr, #0
    4e66:	e78e      	b.n	4d86 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4e68:	2300      	movs	r3, #0
    4e6a:	e795      	b.n	4d98 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4e6c:	2700      	movs	r7, #0
    4e6e:	e799      	b.n	4da4 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4e70:	2600      	movs	r6, #0
    4e72:	e79c      	b.n	4dae <nrfx_gpiote_output_configure+0x92>
    4e74:	4808      	ldr	r0, [pc, #32]	; (4e98 <nrfx_gpiote_output_configure+0x17c>)
    4e76:	e002      	b.n	4e7e <nrfx_gpiote_output_configure+0x162>
    4e78:	4807      	ldr	r0, [pc, #28]	; (4e98 <nrfx_gpiote_output_configure+0x17c>)
    4e7a:	e000      	b.n	4e7e <nrfx_gpiote_output_configure+0x162>
    4e7c:	4804      	ldr	r0, [pc, #16]	; (4e90 <nrfx_gpiote_output_configure+0x174>)
}
    4e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    4e80:	4805      	ldr	r0, [pc, #20]	; (4e98 <nrfx_gpiote_output_configure+0x17c>)
    4e82:	e7fc      	b.n	4e7e <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    4e84:	4802      	ldr	r0, [pc, #8]	; (4e90 <nrfx_gpiote_output_configure+0x174>)
    4e86:	e7fa      	b.n	4e7e <nrfx_gpiote_output_configure+0x162>
    4e88:	20000058 	.word	0x20000058
    4e8c:	40006000 	.word	0x40006000
    4e90:	0bad0000 	.word	0x0bad0000
    4e94:	50000300 	.word	0x50000300
    4e98:	0bad0004 	.word	0x0bad0004

00004e9c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4e9c:	4b01      	ldr	r3, [pc, #4]	; (4ea4 <nrfx_gpiote_global_callback_set+0x8>)
    4e9e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    4ea0:	60d9      	str	r1, [r3, #12]
}
    4ea2:	4770      	bx	lr
    4ea4:	20000058 	.word	0x20000058

00004ea8 <nrfx_gpiote_channel_get>:
{
    4ea8:	b538      	push	{r3, r4, r5, lr}
    4eaa:	4604      	mov	r4, r0
    4eac:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    4eae:	f7ff fc85 	bl	47bc <pin_in_use_by_te>
    4eb2:	b140      	cbz	r0, 4ec6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4eb4:	f104 0008 	add.w	r0, r4, #8
    4eb8:	4b04      	ldr	r3, [pc, #16]	; (4ecc <nrfx_gpiote_channel_get+0x24>)
    4eba:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    4ebe:	0b5b      	lsrs	r3, r3, #13
    4ec0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    4ec2:	4803      	ldr	r0, [pc, #12]	; (4ed0 <nrfx_gpiote_channel_get+0x28>)
}
    4ec4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4ec6:	4803      	ldr	r0, [pc, #12]	; (4ed4 <nrfx_gpiote_channel_get+0x2c>)
    4ec8:	e7fc      	b.n	4ec4 <nrfx_gpiote_channel_get+0x1c>
    4eca:	bf00      	nop
    4ecc:	20000058 	.word	0x20000058
    4ed0:	0bad0000 	.word	0x0bad0000
    4ed4:	0bad0004 	.word	0x0bad0004

00004ed8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4ed8:	4b0f      	ldr	r3, [pc, #60]	; (4f18 <nrfx_gpiote_init+0x40>)
    4eda:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4ede:	b10b      	cbz	r3, 4ee4 <nrfx_gpiote_init+0xc>
        return err_code;
    4ee0:	480e      	ldr	r0, [pc, #56]	; (4f1c <nrfx_gpiote_init+0x44>)
}
    4ee2:	4770      	bx	lr
{
    4ee4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4ee6:	4c0c      	ldr	r4, [pc, #48]	; (4f18 <nrfx_gpiote_init+0x40>)
    4ee8:	2260      	movs	r2, #96	; 0x60
    4eea:	2100      	movs	r1, #0
    4eec:	f104 0010 	add.w	r0, r4, #16
    4ef0:	f002 fcc2 	bl	7878 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4ef4:	2006      	movs	r0, #6
    4ef6:	f7fd fb15 	bl	2524 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4efa:	4b09      	ldr	r3, [pc, #36]	; (4f20 <nrfx_gpiote_init+0x48>)
    4efc:	2200      	movs	r2, #0
    4efe:	601a      	str	r2, [r3, #0]
    4f00:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4f02:	4b08      	ldr	r3, [pc, #32]	; (4f24 <nrfx_gpiote_init+0x4c>)
    4f04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4f08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4f0c:	2301      	movs	r3, #1
    4f0e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4f12:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    4f14:	4804      	ldr	r0, [pc, #16]	; (4f28 <nrfx_gpiote_init+0x50>)
}
    4f16:	bd10      	pop	{r4, pc}
    4f18:	20000058 	.word	0x20000058
    4f1c:	0bad0005 	.word	0x0bad0005
    4f20:	4000617c 	.word	0x4000617c
    4f24:	40006000 	.word	0x40006000
    4f28:	0bad0000 	.word	0x0bad0000

00004f2c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4f2c:	4b03      	ldr	r3, [pc, #12]	; (4f3c <nrfx_gpiote_is_init+0x10>)
    4f2e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4f32:	3800      	subs	r0, #0
    4f34:	bf18      	it	ne
    4f36:	2001      	movne	r0, #1
    4f38:	4770      	bx	lr
    4f3a:	bf00      	nop
    4f3c:	20000058 	.word	0x20000058

00004f40 <nrfx_gpiote_channel_free>:
{
    4f40:	b508      	push	{r3, lr}
    4f42:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4f44:	4801      	ldr	r0, [pc, #4]	; (4f4c <nrfx_gpiote_channel_free+0xc>)
    4f46:	f7ff faf5 	bl	4534 <nrfx_flag32_free>
}
    4f4a:	bd08      	pop	{r3, pc}
    4f4c:	200000c8 	.word	0x200000c8

00004f50 <nrfx_gpiote_channel_alloc>:
{
    4f50:	b508      	push	{r3, lr}
    4f52:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4f54:	4801      	ldr	r0, [pc, #4]	; (4f5c <nrfx_gpiote_channel_alloc+0xc>)
    4f56:	f7ff fac9 	bl	44ec <nrfx_flag32_alloc>
}
    4f5a:	bd08      	pop	{r3, pc}
    4f5c:	200000c8 	.word	0x200000c8

00004f60 <nrfx_gpiote_trigger_enable>:
{
    4f60:	b538      	push	{r3, r4, r5, lr}
    4f62:	4604      	mov	r4, r0
    4f64:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f66:	f7ff fc29 	bl	47bc <pin_in_use_by_te>
    4f6a:	b308      	cbz	r0, 4fb0 <nrfx_gpiote_trigger_enable+0x50>
    4f6c:	4620      	mov	r0, r4
    4f6e:	f003 f863 	bl	8038 <pin_is_input>
    4f72:	b1e8      	cbz	r0, 4fb0 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    4f74:	4620      	mov	r0, r4
    4f76:	f7ff fc41 	bl	47fc <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4f7a:	0083      	lsls	r3, r0, #2
    4f7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    4f80:	b29b      	uxth	r3, r3
    4f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4f86:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f8a:	2200      	movs	r2, #0
    4f8c:	601a      	str	r2, [r3, #0]
    4f8e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4f90:	4a22      	ldr	r2, [pc, #136]	; (501c <nrfx_gpiote_trigger_enable+0xbc>)
    4f92:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    4f96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    4f9a:	f043 0301 	orr.w	r3, r3, #1
    4f9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    4fa2:	b39d      	cbz	r5, 500c <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4fa4:	2301      	movs	r3, #1
    4fa6:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    4faa:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    4fae:	e02d      	b.n	500c <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fb0:	f104 0308 	add.w	r3, r4, #8
    4fb4:	4a1a      	ldr	r2, [pc, #104]	; (5020 <nrfx_gpiote_trigger_enable+0xc0>)
    4fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4fba:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4fbe:	2b04      	cmp	r3, #4
    4fc0:	d012      	beq.n	4fe8 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4fc2:	2b05      	cmp	r3, #5
    4fc4:	d023      	beq.n	500e <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    4fc6:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    4fca:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fcc:	2b01      	cmp	r3, #1
    4fce:	d009      	beq.n	4fe4 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    4fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    4fd4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4fd8:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4fda:	f013 0f01 	tst.w	r3, #1
    4fde:	d018      	beq.n	5012 <nrfx_gpiote_trigger_enable+0xb2>
    4fe0:	2003      	movs	r0, #3
    4fe2:	e002      	b.n	4fea <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    4fe4:	4b0f      	ldr	r3, [pc, #60]	; (5024 <nrfx_gpiote_trigger_enable+0xc4>)
    4fe6:	e7f5      	b.n	4fd4 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4fe8:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    4fea:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    4fee:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ff0:	2c01      	cmp	r4, #1
    4ff2:	d010      	beq.n	5016 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    4ff4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ff8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4ffc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5000:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5004:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5008:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    500c:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    500e:	2002      	movs	r0, #2
    5010:	e7eb      	b.n	4fea <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5012:	2002      	movs	r0, #2
    5014:	e7e9      	b.n	4fea <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    5016:	4903      	ldr	r1, [pc, #12]	; (5024 <nrfx_gpiote_trigger_enable+0xc4>)
    5018:	e7ee      	b.n	4ff8 <nrfx_gpiote_trigger_enable+0x98>
    501a:	bf00      	nop
    501c:	40006000 	.word	0x40006000
    5020:	20000058 	.word	0x20000058
    5024:	50000300 	.word	0x50000300

00005028 <nrfx_gpiote_trigger_disable>:
{
    5028:	b510      	push	{r4, lr}
    502a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    502c:	f7ff fbc6 	bl	47bc <pin_in_use_by_te>
    5030:	b1a0      	cbz	r0, 505c <nrfx_gpiote_trigger_disable+0x34>
    5032:	4620      	mov	r0, r4
    5034:	f003 f800 	bl	8038 <pin_is_input>
    5038:	b180      	cbz	r0, 505c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    503a:	4620      	mov	r0, r4
    503c:	f7ff fbde 	bl	47fc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5040:	2201      	movs	r2, #1
    5042:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5044:	4b0e      	ldr	r3, [pc, #56]	; (5080 <nrfx_gpiote_trigger_disable+0x58>)
    5046:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    504a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    504e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    5052:	f022 0203 	bic.w	r2, r2, #3
    5056:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    505a:	e00e      	b.n	507a <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    505c:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    5060:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5062:	2c01      	cmp	r4, #1
    5064:	d00a      	beq.n	507c <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    5066:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    506a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    506e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5072:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    507a:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    507c:	4901      	ldr	r1, [pc, #4]	; (5084 <nrfx_gpiote_trigger_disable+0x5c>)
    507e:	e7f4      	b.n	506a <nrfx_gpiote_trigger_disable+0x42>
    5080:	40006000 	.word	0x40006000
    5084:	50000300 	.word	0x50000300

00005088 <nrfx_gpiote_pin_uninit>:
{
    5088:	b510      	push	{r4, lr}
    508a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    508c:	f7ff fb8c 	bl	47a8 <pin_in_use>
    5090:	b908      	cbnz	r0, 5096 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5092:	480c      	ldr	r0, [pc, #48]	; (50c4 <nrfx_gpiote_pin_uninit+0x3c>)
}
    5094:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    5096:	4620      	mov	r0, r4
    5098:	f7ff ffc6 	bl	5028 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    509c:	4620      	mov	r0, r4
    509e:	f7ff fcb1 	bl	4a04 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    50a2:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    50a6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50a8:	2c01      	cmp	r4, #1
    50aa:	d008      	beq.n	50be <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    50ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    50b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    50b4:	2102      	movs	r1, #2
    50b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    50ba:	4803      	ldr	r0, [pc, #12]	; (50c8 <nrfx_gpiote_pin_uninit+0x40>)
    50bc:	e7ea      	b.n	5094 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    50be:	4a03      	ldr	r2, [pc, #12]	; (50cc <nrfx_gpiote_pin_uninit+0x44>)
    50c0:	e7f6      	b.n	50b0 <nrfx_gpiote_pin_uninit+0x28>
    50c2:	bf00      	nop
    50c4:	0bad0004 	.word	0x0bad0004
    50c8:	0bad0000 	.word	0x0bad0000
    50cc:	50000300 	.word	0x50000300

000050d0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    50d0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    50d2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    50d4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    50d8:	2100      	movs	r1, #0
    uint32_t status = 0;
    50da:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    50dc:	e003      	b.n	50e6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    50de:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    50e0:	3304      	adds	r3, #4
    50e2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    50e4:	3101      	adds	r1, #1
    50e6:	2907      	cmp	r1, #7
    50e8:	d814      	bhi.n	5114 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    50ea:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    50ee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    50f2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    50f4:	2a00      	cmp	r2, #0
    50f6:	d0f2      	beq.n	50de <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    50f8:	4a0b      	ldr	r2, [pc, #44]	; (5128 <nrfx_gpiote_irq_handler+0x58>)
    50fa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    50fe:	4210      	tst	r0, r2
    5100:	d0ed      	beq.n	50de <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    5102:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5106:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    510a:	2400      	movs	r4, #0
    510c:	6014      	str	r4, [r2, #0]
    510e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    5110:	4305      	orrs	r5, r0
    5112:	e7e4      	b.n	50de <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5114:	4b05      	ldr	r3, [pc, #20]	; (512c <nrfx_gpiote_irq_handler+0x5c>)
    5116:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5118:	b91b      	cbnz	r3, 5122 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    511a:	4628      	mov	r0, r5
    511c:	f7ff fd28 	bl	4b70 <gpiote_evt_handle>
}
    5120:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5122:	f7ff fcc1 	bl	4aa8 <port_event_handle>
    5126:	e7f8      	b.n	511a <nrfx_gpiote_irq_handler+0x4a>
    5128:	40006000 	.word	0x40006000
    512c:	4000617c 	.word	0x4000617c

00005130 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5130:	b508      	push	{r3, lr}
    5132:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5134:	4801      	ldr	r0, [pc, #4]	; (513c <nrfx_ppi_channel_alloc+0xc>)
    5136:	f7ff f9d9 	bl	44ec <nrfx_flag32_alloc>
}
    513a:	bd08      	pop	{r3, pc}
    513c:	200000d4 	.word	0x200000d4

00005140 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5140:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5142:	4c11      	ldr	r4, [pc, #68]	; (5188 <_DoInit+0x48>)
    5144:	2303      	movs	r3, #3
    5146:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5148:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    514a:	4a10      	ldr	r2, [pc, #64]	; (518c <_DoInit+0x4c>)
    514c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    514e:	4b10      	ldr	r3, [pc, #64]	; (5190 <_DoInit+0x50>)
    5150:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5152:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5156:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5158:	2300      	movs	r3, #0
    515a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    515c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    515e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5160:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5162:	4a0c      	ldr	r2, [pc, #48]	; (5194 <_DoInit+0x54>)
    5164:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5166:	2210      	movs	r2, #16
    5168:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    516a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    516c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    516e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5170:	4909      	ldr	r1, [pc, #36]	; (5198 <_DoInit+0x58>)
    5172:	1de0      	adds	r0, r4, #7
    5174:	f002 fb1d 	bl	77b2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5178:	4908      	ldr	r1, [pc, #32]	; (519c <_DoInit+0x5c>)
    517a:	4620      	mov	r0, r4
    517c:	f002 fb19 	bl	77b2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5180:	2320      	movs	r3, #32
    5182:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5184:	bd10      	pop	{r4, pc}
    5186:	bf00      	nop
    5188:	20000ab8 	.word	0x20000ab8
    518c:	000092c4 	.word	0x000092c4
    5190:	20000b70 	.word	0x20000b70
    5194:	20000b60 	.word	0x20000b60
    5198:	000092d0 	.word	0x000092d0
    519c:	000092d4 	.word	0x000092d4

000051a0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    51a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    51a4:	4604      	mov	r4, r0
    51a6:	460e      	mov	r6, r1
    51a8:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    51aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    51ae:	4a2d      	ldr	r2, [pc, #180]	; (5264 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    51b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    51b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    51b6:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    51b8:	42bb      	cmp	r3, r7
    51ba:	d84b      	bhi.n	5254 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    51bc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    51c0:	4928      	ldr	r1, [pc, #160]	; (5264 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    51c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    51c6:	f8d2 8020 	ldr.w	r8, [r2, #32]
    51ca:	eba8 0907 	sub.w	r9, r8, r7
    51ce:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    51d2:	4295      	cmp	r5, r2
    51d4:	d904      	bls.n	51e0 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    51d6:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    51d8:	429d      	cmp	r5, r3
    51da:	d916      	bls.n	520a <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    51dc:	2000      	movs	r0, #0
    51de:	e03e      	b.n	525e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    51e0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5264 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    51e4:	1c63      	adds	r3, r4, #1
    51e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    51ea:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    51ee:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    51f0:	462a      	mov	r2, r5
    51f2:	4631      	mov	r1, r6
    51f4:	4438      	add	r0, r7
    51f6:	f002 fb1b 	bl	7830 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    51fa:	443d      	add	r5, r7
    51fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5200:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    5204:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    5206:	2001      	movs	r0, #1
    5208:	e029      	b.n	525e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    520a:	1c43      	adds	r3, r0, #1
    520c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5210:	4a14      	ldr	r2, [pc, #80]	; (5264 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5212:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5216:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5218:	464a      	mov	r2, r9
    521a:	4631      	mov	r1, r6
    521c:	4438      	add	r0, r7
    521e:	f002 fb07 	bl	7830 <memcpy>
      NumBytes -= Rem;
    5222:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    5226:	197f      	adds	r7, r7, r5
    5228:	d107      	bne.n	523a <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    522a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    522e:	4b0d      	ldr	r3, [pc, #52]	; (5264 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5230:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    5234:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    5236:	2001      	movs	r0, #1
    5238:	e011      	b.n	525e <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    523a:	1c63      	adds	r3, r4, #1
    523c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5240:	4a08      	ldr	r2, [pc, #32]	; (5264 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5242:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5246:	463a      	mov	r2, r7
    5248:	eb06 0109 	add.w	r1, r6, r9
    524c:	6858      	ldr	r0, [r3, #4]
    524e:	f002 faef 	bl	7830 <memcpy>
    5252:	e7ea      	b.n	522a <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    5254:	1bdb      	subs	r3, r3, r7
    5256:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5258:	42ab      	cmp	r3, r5
    525a:	d2c1      	bcs.n	51e0 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    525c:	2000      	movs	r0, #0
}
    525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5262:	bf00      	nop
    5264:	20000ab8 	.word	0x20000ab8

00005268 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5268:	4b06      	ldr	r3, [pc, #24]	; (5284 <SEGGER_RTT_HasDataUp+0x1c>)
    526a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    526e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    5272:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    5274:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5278:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    527c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    527e:	1a80      	subs	r0, r0, r2
    5280:	4770      	bx	lr
    5282:	bf00      	nop
    5284:	20000ab8 	.word	0x20000ab8

00005288 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    5288:	4b03      	ldr	r3, [pc, #12]	; (5298 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    528a:	4a04      	ldr	r2, [pc, #16]	; (529c <z_device_state_init+0x14>)
    528c:	4293      	cmp	r3, r2
    528e:	d201      	bcs.n	5294 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    5290:	3318      	adds	r3, #24
    5292:	e7fa      	b.n	528a <z_device_state_init+0x2>
	}
}
    5294:	4770      	bx	lr
    5296:	bf00      	nop
    5298:	00008644 	.word	0x00008644
    529c:	000086bc 	.word	0x000086bc

000052a0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    52a0:	b570      	push	{r4, r5, r6, lr}
    52a2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    52a4:	4b11      	ldr	r3, [pc, #68]	; (52ec <z_sys_init_run_level+0x4c>)
    52a6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    52aa:	e009      	b.n	52c0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    52ac:	4240      	negs	r0, r0
    52ae:	e017      	b.n	52e0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    52b0:	68eb      	ldr	r3, [r5, #12]
    52b2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    52b4:	68ea      	ldr	r2, [r5, #12]
    52b6:	7853      	ldrb	r3, [r2, #1]
    52b8:	f043 0301 	orr.w	r3, r3, #1
    52bc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    52be:	3408      	adds	r4, #8
    52c0:	1c73      	adds	r3, r6, #1
    52c2:	4a0a      	ldr	r2, [pc, #40]	; (52ec <z_sys_init_run_level+0x4c>)
    52c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    52c8:	42a3      	cmp	r3, r4
    52ca:	d90d      	bls.n	52e8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    52cc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    52ce:	6823      	ldr	r3, [r4, #0]
    52d0:	4628      	mov	r0, r5
    52d2:	4798      	blx	r3
		if (dev != NULL) {
    52d4:	2d00      	cmp	r5, #0
    52d6:	d0f2      	beq.n	52be <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    52d8:	2800      	cmp	r0, #0
    52da:	d0eb      	beq.n	52b4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    52dc:	2800      	cmp	r0, #0
    52de:	dbe5      	blt.n	52ac <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    52e0:	28ff      	cmp	r0, #255	; 0xff
    52e2:	dde5      	ble.n	52b0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    52e4:	20ff      	movs	r0, #255	; 0xff
    52e6:	e7e3      	b.n	52b0 <z_sys_init_run_level+0x10>
		}
	}
}
    52e8:	bd70      	pop	{r4, r5, r6, pc}
    52ea:	bf00      	nop
    52ec:	000092dc 	.word	0x000092dc

000052f0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    52f0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    52f2:	4605      	mov	r5, r0
    52f4:	b328      	cbz	r0, 5342 <z_impl_device_get_binding+0x52>
    52f6:	7803      	ldrb	r3, [r0, #0]
    52f8:	b32b      	cbz	r3, 5346 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    52fa:	4c14      	ldr	r4, [pc, #80]	; (534c <z_impl_device_get_binding+0x5c>)
    52fc:	e000      	b.n	5300 <z_impl_device_get_binding+0x10>
    52fe:	3418      	adds	r4, #24
    5300:	4b13      	ldr	r3, [pc, #76]	; (5350 <z_impl_device_get_binding+0x60>)
    5302:	429c      	cmp	r4, r3
    5304:	d008      	beq.n	5318 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    5306:	4620      	mov	r0, r4
    5308:	f002 fead 	bl	8066 <z_device_ready>
    530c:	2800      	cmp	r0, #0
    530e:	d0f6      	beq.n	52fe <z_impl_device_get_binding+0xe>
    5310:	6823      	ldr	r3, [r4, #0]
    5312:	42ab      	cmp	r3, r5
    5314:	d1f3      	bne.n	52fe <z_impl_device_get_binding+0xe>
    5316:	e012      	b.n	533e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    5318:	4c0c      	ldr	r4, [pc, #48]	; (534c <z_impl_device_get_binding+0x5c>)
    531a:	e000      	b.n	531e <z_impl_device_get_binding+0x2e>
    531c:	3418      	adds	r4, #24
    531e:	4b0c      	ldr	r3, [pc, #48]	; (5350 <z_impl_device_get_binding+0x60>)
    5320:	429c      	cmp	r4, r3
    5322:	d00b      	beq.n	533c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5324:	4620      	mov	r0, r4
    5326:	f002 fe9e 	bl	8066 <z_device_ready>
    532a:	2800      	cmp	r0, #0
    532c:	d0f6      	beq.n	531c <z_impl_device_get_binding+0x2c>
    532e:	6821      	ldr	r1, [r4, #0]
    5330:	4628      	mov	r0, r5
    5332:	f002 fa73 	bl	781c <strcmp>
    5336:	2800      	cmp	r0, #0
    5338:	d1f0      	bne.n	531c <z_impl_device_get_binding+0x2c>
    533a:	e000      	b.n	533e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    533c:	2400      	movs	r4, #0
}
    533e:	4620      	mov	r0, r4
    5340:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    5342:	4604      	mov	r4, r0
    5344:	e7fb      	b.n	533e <z_impl_device_get_binding+0x4e>
    5346:	2400      	movs	r4, #0
    5348:	e7f9      	b.n	533e <z_impl_device_get_binding+0x4e>
    534a:	bf00      	nop
    534c:	00008644 	.word	0x00008644
    5350:	000086bc 	.word	0x000086bc

00005354 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    5354:	2804      	cmp	r0, #4
    5356:	d80c      	bhi.n	5372 <reason_to_str+0x1e>
    5358:	e8df f000 	tbb	[pc, r0]
    535c:	07050d03 	.word	0x07050d03
    5360:	09          	.byte	0x09
    5361:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    5362:	4806      	ldr	r0, [pc, #24]	; (537c <reason_to_str+0x28>)
    5364:	4770      	bx	lr
		return "Stack overflow";
    5366:	4806      	ldr	r0, [pc, #24]	; (5380 <reason_to_str+0x2c>)
    5368:	4770      	bx	lr
		return "Kernel oops";
    536a:	4806      	ldr	r0, [pc, #24]	; (5384 <reason_to_str+0x30>)
    536c:	4770      	bx	lr
		return "Kernel panic";
    536e:	4806      	ldr	r0, [pc, #24]	; (5388 <reason_to_str+0x34>)
    5370:	4770      	bx	lr
	default:
		return "Unknown error";
    5372:	4806      	ldr	r0, [pc, #24]	; (538c <reason_to_str+0x38>)
    5374:	4770      	bx	lr
		return "Unhandled interrupt";
    5376:	4806      	ldr	r0, [pc, #24]	; (5390 <reason_to_str+0x3c>)
	}
}
    5378:	4770      	bx	lr
    537a:	bf00      	nop
    537c:	00009344 	.word	0x00009344
    5380:	00009318 	.word	0x00009318
    5384:	00009328 	.word	0x00009328
    5388:	00009334 	.word	0x00009334
    538c:	000092f4 	.word	0x000092f4
    5390:	00009304 	.word	0x00009304

00005394 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5394:	b130      	cbz	r0, 53a4 <thread_name_get+0x10>
{
    5396:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5398:	f002 fedb 	bl	8152 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    539c:	b120      	cbz	r0, 53a8 <thread_name_get+0x14>
    539e:	7803      	ldrb	r3, [r0, #0]
    53a0:	b123      	cbz	r3, 53ac <thread_name_get+0x18>
}
    53a2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    53a4:	4802      	ldr	r0, [pc, #8]	; (53b0 <thread_name_get+0x1c>)
}
    53a6:	4770      	bx	lr
		thread_name = "unknown";
    53a8:	4801      	ldr	r0, [pc, #4]	; (53b0 <thread_name_get+0x1c>)
    53aa:	e7fa      	b.n	53a2 <thread_name_get+0xe>
    53ac:	4800      	ldr	r0, [pc, #0]	; (53b0 <thread_name_get+0x1c>)
	return thread_name;
    53ae:	e7f8      	b.n	53a2 <thread_name_get+0xe>
    53b0:	00009354 	.word	0x00009354

000053b4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    53b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53b8:	b082      	sub	sp, #8
    53ba:	4605      	mov	r5, r0
    53bc:	460e      	mov	r6, r1
	__asm__ volatile(
    53be:	f04f 0320 	mov.w	r3, #32
    53c2:	f3ef 8711 	mrs	r7, BASEPRI
    53c6:	f383 8812 	msr	BASEPRI_MAX, r3
    53ca:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    53ce:	f000 ff83 	bl	62d8 <z_impl_z_current_get>
    53d2:	4604      	mov	r4, r0
    53d4:	4b29      	ldr	r3, [pc, #164]	; (547c <z_fatal_error+0xc8>)
    53d6:	4a2a      	ldr	r2, [pc, #168]	; (5480 <z_fatal_error+0xcc>)
    53d8:	1a9b      	subs	r3, r3, r2
    53da:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    53dc:	f04f 0800 	mov.w	r8, #0
    53e0:	2201      	movs	r2, #1
    53e2:	f362 0802 	bfi	r8, r2, #0, #3
    53e6:	f36f 08c5 	bfc	r8, #3, #3
    53ea:	f363 188f 	bfi	r8, r3, #6, #10
    53ee:	4628      	mov	r0, r5
    53f0:	f7ff ffb0 	bl	5354 <reason_to_str>
    53f4:	4602      	mov	r2, r0
    53f6:	f8ad 8000 	strh.w	r8, [sp]
    53fa:	2300      	movs	r3, #0
    53fc:	4629      	mov	r1, r5
    53fe:	4821      	ldr	r0, [pc, #132]	; (5484 <z_fatal_error+0xd0>)
    5400:	f7fc f94e 	bl	16a0 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5404:	b11e      	cbz	r6, 540e <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5406:	69f3      	ldr	r3, [r6, #28]
    5408:	f3c3 0308 	ubfx	r3, r3, #0, #9
    540c:	bb2b      	cbnz	r3, 545a <z_fatal_error+0xa6>
    540e:	4b1b      	ldr	r3, [pc, #108]	; (547c <z_fatal_error+0xc8>)
    5410:	4a1b      	ldr	r2, [pc, #108]	; (5480 <z_fatal_error+0xcc>)
    5412:	1a9b      	subs	r3, r3, r2
    5414:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5416:	f04f 0800 	mov.w	r8, #0
    541a:	2201      	movs	r2, #1
    541c:	f362 0802 	bfi	r8, r2, #0, #3
    5420:	f36f 08c5 	bfc	r8, #3, #3
    5424:	f363 188f 	bfi	r8, r3, #6, #10
    5428:	4620      	mov	r0, r4
    542a:	f7ff ffb3 	bl	5394 <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    542e:	f7fb fffd 	bl	142c <z_log_strdup>
    5432:	4602      	mov	r2, r0
    5434:	4643      	mov	r3, r8
    5436:	4621      	mov	r1, r4
    5438:	4813      	ldr	r0, [pc, #76]	; (5488 <z_fatal_error+0xd4>)
    543a:	f7fc f9a5 	bl	1788 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    543e:	4631      	mov	r1, r6
    5440:	4628      	mov	r0, r5
    5442:	f7fe fec9 	bl	41d8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5446:	f387 8811 	msr	BASEPRI, r7
    544a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    544e:	4620      	mov	r0, r4
    5450:	f7fd fdea 	bl	3028 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5454:	b002      	add	sp, #8
    5456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    545a:	4b08      	ldr	r3, [pc, #32]	; (547c <z_fatal_error+0xc8>)
    545c:	4a08      	ldr	r2, [pc, #32]	; (5480 <z_fatal_error+0xcc>)
    545e:	1a9b      	subs	r3, r3, r2
    5460:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    5462:	f04f 0100 	mov.w	r1, #0
    5466:	2201      	movs	r2, #1
    5468:	f362 0102 	bfi	r1, r2, #0, #3
    546c:	f36f 01c5 	bfc	r1, #3, #3
    5470:	f363 118f 	bfi	r1, r3, #6, #10
    5474:	4805      	ldr	r0, [pc, #20]	; (548c <z_fatal_error+0xd8>)
    5476:	f7fc f9e5 	bl	1844 <log_0>
    547a:	e7c8      	b.n	540e <z_fatal_error+0x5a>
    547c:	0000886c 	.word	0x0000886c
    5480:	0000883c 	.word	0x0000883c
    5484:	0000935c 	.word	0x0000935c
    5488:	000093a8 	.word	0x000093a8
    548c:	00009384 	.word	0x00009384

00005490 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    5490:	b5f0      	push	{r4, r5, r6, r7, lr}
    5492:	b089      	sub	sp, #36	; 0x24
    5494:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    5496:	4b15      	ldr	r3, [pc, #84]	; (54ec <init_idle_thread+0x5c>)
    5498:	25b0      	movs	r5, #176	; 0xb0
    549a:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    549e:	4b14      	ldr	r3, [pc, #80]	; (54f0 <init_idle_thread+0x60>)
    54a0:	f44f 76b0 	mov.w	r6, #352	; 0x160
    54a4:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    54a8:	af06      	add	r7, sp, #24
    54aa:	4603      	mov	r3, r0
    54ac:	4a11      	ldr	r2, [pc, #68]	; (54f4 <init_idle_thread+0x64>)
    54ae:	2108      	movs	r1, #8
    54b0:	4638      	mov	r0, r7
    54b2:	f001 fbc2 	bl	6c3a <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    54b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    54ba:	480f      	ldr	r0, [pc, #60]	; (54f8 <init_idle_thread+0x68>)
    54bc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    54c0:	9705      	str	r7, [sp, #20]
    54c2:	2301      	movs	r3, #1
    54c4:	9304      	str	r3, [sp, #16]
    54c6:	230f      	movs	r3, #15
    54c8:	9303      	str	r3, [sp, #12]
    54ca:	2300      	movs	r3, #0
    54cc:	9302      	str	r3, [sp, #8]
    54ce:	9301      	str	r3, [sp, #4]
    54d0:	9400      	str	r4, [sp, #0]
    54d2:	4b0a      	ldr	r3, [pc, #40]	; (54fc <init_idle_thread+0x6c>)
    54d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    54d8:	4631      	mov	r1, r6
    54da:	4628      	mov	r0, r5
    54dc:	f000 f95a 	bl	5794 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    54e0:	7b6b      	ldrb	r3, [r5, #13]
    54e2:	f023 0304 	bic.w	r3, r3, #4
    54e6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    54e8:	b009      	add	sp, #36	; 0x24
    54ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ec:	200002d0 	.word	0x200002d0
    54f0:	200018e0 	.word	0x200018e0
    54f4:	000093c0 	.word	0x000093c0
    54f8:	20000f70 	.word	0x20000f70
    54fc:	000058f9 	.word	0x000058f9

00005500 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    5500:	b570      	push	{r4, r5, r6, lr}
    5502:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    5504:	f000 fe1c 	bl	6140 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    5508:	4d1b      	ldr	r5, [pc, #108]	; (5578 <prepare_multithreading+0x78>)
    550a:	4b1c      	ldr	r3, [pc, #112]	; (557c <prepare_multithreading+0x7c>)
    550c:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    550e:	4b1c      	ldr	r3, [pc, #112]	; (5580 <prepare_multithreading+0x80>)
    5510:	9305      	str	r3, [sp, #20]
    5512:	2301      	movs	r3, #1
    5514:	9304      	str	r3, [sp, #16]
    5516:	2400      	movs	r4, #0
    5518:	9403      	str	r4, [sp, #12]
    551a:	9402      	str	r4, [sp, #8]
    551c:	9401      	str	r4, [sp, #4]
    551e:	9400      	str	r4, [sp, #0]
    5520:	4b18      	ldr	r3, [pc, #96]	; (5584 <prepare_multithreading+0x84>)
    5522:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5526:	4918      	ldr	r1, [pc, #96]	; (5588 <prepare_multithreading+0x88>)
    5528:	4628      	mov	r0, r5
    552a:	f000 f933 	bl	5794 <z_setup_new_thread>
    552e:	4606      	mov	r6, r0
    5530:	7b6b      	ldrb	r3, [r5, #13]
    5532:	f023 0304 	bic.w	r3, r3, #4
    5536:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    5538:	4628      	mov	r0, r5
    553a:	f002 feb1 	bl	82a0 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    553e:	2c00      	cmp	r4, #0
    5540:	dd02      	ble.n	5548 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    5542:	4630      	mov	r0, r6
    5544:	b006      	add	sp, #24
    5546:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    5548:	4620      	mov	r0, r4
    554a:	f7ff ffa1 	bl	5490 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    554e:	4b0f      	ldr	r3, [pc, #60]	; (558c <prepare_multithreading+0x8c>)
    5550:	22b0      	movs	r2, #176	; 0xb0
    5552:	fb02 3204 	mla	r2, r2, r4, r3
    5556:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    555a:	4b08      	ldr	r3, [pc, #32]	; (557c <prepare_multithreading+0x7c>)
    555c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5560:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    5562:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    5564:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    5568:	4a09      	ldr	r2, [pc, #36]	; (5590 <prepare_multithreading+0x90>)
    556a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    556e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    5572:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    5574:	3401      	adds	r4, #1
    5576:	e7e2      	b.n	553e <prepare_multithreading+0x3e>
    5578:	20000380 	.word	0x20000380
    557c:	20000f70 	.word	0x20000f70
    5580:	000093cc 	.word	0x000093cc
    5584:	00005595 	.word	0x00005595
    5588:	200014c0 	.word	0x200014c0
    558c:	200002d0 	.word	0x200002d0
    5590:	20001a40 	.word	0x20001a40

00005594 <bg_thread_main>:
{
    5594:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5596:	4b0a      	ldr	r3, [pc, #40]	; (55c0 <bg_thread_main+0x2c>)
    5598:	2201      	movs	r2, #1
    559a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    559c:	2002      	movs	r0, #2
    559e:	f7ff fe7f 	bl	52a0 <z_sys_init_run_level>
	boot_banner();
    55a2:	f001 f90f 	bl	67c4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    55a6:	2003      	movs	r0, #3
    55a8:	f7ff fe7a 	bl	52a0 <z_sys_init_run_level>
	z_init_static_threads();
    55ac:	f000 f956 	bl	585c <z_init_static_threads>
	main();
    55b0:	f7fa ff58 	bl	464 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    55b4:	4a03      	ldr	r2, [pc, #12]	; (55c4 <bg_thread_main+0x30>)
    55b6:	7b13      	ldrb	r3, [r2, #12]
    55b8:	f023 0301 	bic.w	r3, r3, #1
    55bc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    55be:	bd08      	pop	{r3, pc}
    55c0:	20000fca 	.word	0x20000fca
    55c4:	20000380 	.word	0x20000380

000055c8 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    55c8:	b508      	push	{r3, lr}
    55ca:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    55cc:	4a01      	ldr	r2, [pc, #4]	; (55d4 <switch_to_main_thread+0xc>)
    55ce:	4802      	ldr	r0, [pc, #8]	; (55d8 <switch_to_main_thread+0x10>)
    55d0:	f7fd f8a4 	bl	271c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    55d4:	00005595 	.word	0x00005595
    55d8:	20000380 	.word	0x20000380

000055dc <z_bss_zero>:
{
    55dc:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    55de:	4803      	ldr	r0, [pc, #12]	; (55ec <z_bss_zero+0x10>)
    55e0:	4a03      	ldr	r2, [pc, #12]	; (55f0 <z_bss_zero+0x14>)
    55e2:	1a12      	subs	r2, r2, r0
    55e4:	2100      	movs	r1, #0
    55e6:	f002 f947 	bl	7878 <memset>
}
    55ea:	bd08      	pop	{r3, pc}
    55ec:	200001c8 	.word	0x200001c8
    55f0:	20001188 	.word	0x20001188

000055f4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    55f4:	b500      	push	{lr}
    55f6:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    55f8:	f7fb fe76 	bl	12e8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    55fc:	4b1c      	ldr	r3, [pc, #112]	; (5670 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    55fe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5602:	4c1c      	ldr	r4, [pc, #112]	; (5674 <z_cstart+0x80>)
    5604:	6963      	ldr	r3, [r4, #20]
    5606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    560a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    560c:	23e0      	movs	r3, #224	; 0xe0
    560e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5612:	2500      	movs	r5, #0
    5614:	77e5      	strb	r5, [r4, #31]
    5616:	7625      	strb	r5, [r4, #24]
    5618:	7665      	strb	r5, [r4, #25]
    561a:	76a5      	strb	r5, [r4, #26]
    561c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5620:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5622:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5626:	6263      	str	r3, [r4, #36]	; 0x24
    5628:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    562c:	f7fd fc6c 	bl	2f08 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5630:	f7fc ff0c 	bl	244c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5638:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    563a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    563c:	f7fd fdd0 	bl	31e0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5640:	f7fd fd08 	bl	3054 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    5644:	2401      	movs	r4, #1
    5646:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    564a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    564e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    5650:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5652:	4b09      	ldr	r3, [pc, #36]	; (5678 <z_cstart+0x84>)
    5654:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5658:	f7ff fe16 	bl	5288 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    565c:	4628      	mov	r0, r5
    565e:	f7ff fe1f 	bl	52a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5662:	4620      	mov	r0, r4
    5664:	f7ff fe1c 	bl	52a0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    5668:	f7ff ff4a 	bl	5500 <prepare_multithreading>
    566c:	f7ff ffac 	bl	55c8 <switch_to_main_thread>
    5670:	20002260 	.word	0x20002260
    5674:	e000ed00 	.word	0xe000ed00
    5678:	20000f70 	.word	0x20000f70

0000567c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    567c:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    567e:	4c06      	ldr	r4, [pc, #24]	; (5698 <init_mem_slab_module+0x1c>)
	int rc = 0;
    5680:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5682:	4b06      	ldr	r3, [pc, #24]	; (569c <init_mem_slab_module+0x20>)
    5684:	429c      	cmp	r4, r3
    5686:	d206      	bcs.n	5696 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    5688:	4620      	mov	r0, r4
    568a:	f002 fcf9 	bl	8080 <create_free_list>
		if (rc < 0) {
    568e:	2800      	cmp	r0, #0
    5690:	db01      	blt.n	5696 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5692:	341c      	adds	r4, #28
    5694:	e7f5      	b.n	5682 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    5696:	bd10      	pop	{r4, pc}
    5698:	20000154 	.word	0x20000154
    569c:	20000154 	.word	0x20000154

000056a0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    56a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56a2:	b083      	sub	sp, #12
    56a4:	460c      	mov	r4, r1
    56a6:	461f      	mov	r7, r3
	__asm__ volatile(
    56a8:	f04f 0320 	mov.w	r3, #32
    56ac:	f3ef 8111 	mrs	r1, BASEPRI
    56b0:	f383 8812 	msr	BASEPRI_MAX, r3
    56b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    56b8:	6943      	ldr	r3, [r0, #20]
    56ba:	b16b      	cbz	r3, 56d8 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    56bc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    56be:	6943      	ldr	r3, [r0, #20]
    56c0:	681b      	ldr	r3, [r3, #0]
    56c2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    56c4:	6983      	ldr	r3, [r0, #24]
    56c6:	3301      	adds	r3, #1
    56c8:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    56ca:	2000      	movs	r0, #0
	__asm__ volatile(
    56cc:	f381 8811 	msr	BASEPRI, r1
    56d0:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    56d4:	b003      	add	sp, #12
    56d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56d8:	4616      	mov	r6, r2
    56da:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    56de:	ea56 0307 	orrs.w	r3, r6, r7
    56e2:	d104      	bne.n	56ee <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    56e4:	2300      	movs	r3, #0
    56e6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    56e8:	f06f 000b 	mvn.w	r0, #11
    56ec:	e7ee      	b.n	56cc <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    56ee:	e9cd 6700 	strd	r6, r7, [sp]
    56f2:	4602      	mov	r2, r0
    56f4:	4628      	mov	r0, r5
    56f6:	f000 fbf9 	bl	5eec <z_pend_curr>
		if (result == 0) {
    56fa:	2800      	cmp	r0, #0
    56fc:	d1ea      	bne.n	56d4 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    56fe:	4b02      	ldr	r3, [pc, #8]	; (5708 <k_mem_slab_alloc+0x68>)
    5700:	689b      	ldr	r3, [r3, #8]
    5702:	695b      	ldr	r3, [r3, #20]
    5704:	6023      	str	r3, [r4, #0]
		return result;
    5706:	e7e5      	b.n	56d4 <k_mem_slab_alloc+0x34>
    5708:	20000f70 	.word	0x20000f70

0000570c <z_thread_monitor_exit>:
	__asm__ volatile(
    570c:	f04f 0320 	mov.w	r3, #32
    5710:	f3ef 8111 	mrs	r1, BASEPRI
    5714:	f383 8812 	msr	BASEPRI_MAX, r3
    5718:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    571c:	4b0a      	ldr	r3, [pc, #40]	; (5748 <z_thread_monitor_exit+0x3c>)
    571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5720:	4283      	cmp	r3, r0
    5722:	d104      	bne.n	572e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    5724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5726:	4b08      	ldr	r3, [pc, #32]	; (5748 <z_thread_monitor_exit+0x3c>)
    5728:	629a      	str	r2, [r3, #40]	; 0x28
    572a:	e007      	b.n	573c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    572c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    572e:	b113      	cbz	r3, 5736 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    5730:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    5732:	4282      	cmp	r2, r0
    5734:	d1fa      	bne.n	572c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    5736:	b10b      	cbz	r3, 573c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    5738:	6f02      	ldr	r2, [r0, #112]	; 0x70
    573a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    573c:	f381 8811 	msr	BASEPRI, r1
    5740:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    5744:	4770      	bx	lr
    5746:	bf00      	nop
    5748:	20000f70 	.word	0x20000f70

0000574c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    574c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    574e:	4604      	mov	r4, r0
    5750:	b140      	cbz	r0, 5764 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    5752:	2220      	movs	r2, #32
    5754:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5758:	f002 f834 	bl	77c4 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    575c:	2000      	movs	r0, #0
    575e:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    5762:	bd10      	pop	{r4, pc}
		thread = _current;
    5764:	4b01      	ldr	r3, [pc, #4]	; (576c <z_impl_k_thread_name_set+0x20>)
    5766:	689c      	ldr	r4, [r3, #8]
    5768:	e7f3      	b.n	5752 <z_impl_k_thread_name_set+0x6>
    576a:	bf00      	nop
    576c:	20000f70 	.word	0x20000f70

00005770 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    5770:	b538      	push	{r3, r4, r5, lr}
    5772:	4614      	mov	r4, r2
    5774:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5776:	ea54 0305 	orrs.w	r3, r4, r5
    577a:	d102      	bne.n	5782 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    577c:	f002 fceb 	bl	8156 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    5780:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5782:	462b      	mov	r3, r5
    5784:	4902      	ldr	r1, [pc, #8]	; (5790 <schedule_new_thread+0x20>)
    5786:	3018      	adds	r0, #24
    5788:	f000 fe36 	bl	63f8 <z_add_timeout>
    578c:	e7f8      	b.n	5780 <schedule_new_thread+0x10>
    578e:	bf00      	nop
    5790:	000082d9 	.word	0x000082d9

00005794 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5798:	b085      	sub	sp, #20
    579a:	4604      	mov	r4, r0
    579c:	460f      	mov	r7, r1
    579e:	4615      	mov	r5, r2
    57a0:	461e      	mov	r6, r3
    57a2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    57a6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    57aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    57ae:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    57b2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    57b6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    57b8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    57ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    57bc:	2204      	movs	r2, #4
    57be:	9911      	ldr	r1, [sp, #68]	; 0x44
    57c0:	f002 fccd 	bl	815e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    57c4:	462a      	mov	r2, r5
    57c6:	4639      	mov	r1, r7
    57c8:	4620      	mov	r0, r4
    57ca:	f002 fcaa 	bl	8122 <setup_thread_stack>
    57ce:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57d0:	f8cd 8008 	str.w	r8, [sp, #8]
    57d4:	f8cd 9004 	str.w	r9, [sp, #4]
    57d8:	f8cd a000 	str.w	sl, [sp]
    57dc:	4633      	mov	r3, r6
    57de:	4602      	mov	r2, r0
    57e0:	4639      	mov	r1, r7
    57e2:	4620      	mov	r0, r4
    57e4:	f7fc ff4a 	bl	267c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    57e8:	2300      	movs	r3, #0
    57ea:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    57ec:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    57ee:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    57f2:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    57f6:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    57fa:	f04f 0320 	mov.w	r3, #32
    57fe:	f3ef 8211 	mrs	r2, BASEPRI
    5802:	f383 8812 	msr	BASEPRI_MAX, r3
    5806:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    580a:	4b13      	ldr	r3, [pc, #76]	; (5858 <z_setup_new_thread+0xc4>)
    580c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    580e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    5810:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    5812:	f382 8811 	msr	BASEPRI, r2
    5816:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    581a:	f1bb 0f00 	cmp.w	fp, #0
    581e:	d013      	beq.n	5848 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    5820:	221f      	movs	r2, #31
    5822:	4659      	mov	r1, fp
    5824:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5828:	f001 ffcc 	bl	77c4 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    582c:	2300      	movs	r3, #0
    582e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    5832:	4b09      	ldr	r3, [pc, #36]	; (5858 <z_setup_new_thread+0xc4>)
    5834:	689b      	ldr	r3, [r3, #8]
    5836:	b15b      	cbz	r3, 5850 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    5838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    583c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    5840:	4628      	mov	r0, r5
    5842:	b005      	add	sp, #20
    5844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    5848:	2300      	movs	r3, #0
    584a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    584e:	e7f0      	b.n	5832 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    5850:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    5854:	e7f4      	b.n	5840 <z_setup_new_thread+0xac>
    5856:	bf00      	nop
    5858:	20000f70 	.word	0x20000f70

0000585c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    585c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    5860:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    5862:	4c23      	ldr	r4, [pc, #140]	; (58f0 <z_init_static_threads+0x94>)
    5864:	4b23      	ldr	r3, [pc, #140]	; (58f4 <z_init_static_threads+0x98>)
    5866:	429c      	cmp	r4, r3
    5868:	d215      	bcs.n	5896 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    586a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    586c:	9305      	str	r3, [sp, #20]
    586e:	6a23      	ldr	r3, [r4, #32]
    5870:	9304      	str	r3, [sp, #16]
    5872:	69e3      	ldr	r3, [r4, #28]
    5874:	9303      	str	r3, [sp, #12]
    5876:	69a3      	ldr	r3, [r4, #24]
    5878:	9302      	str	r3, [sp, #8]
    587a:	6963      	ldr	r3, [r4, #20]
    587c:	9301      	str	r3, [sp, #4]
    587e:	6923      	ldr	r3, [r4, #16]
    5880:	9300      	str	r3, [sp, #0]
    5882:	68e3      	ldr	r3, [r4, #12]
    5884:	68a2      	ldr	r2, [r4, #8]
    5886:	6861      	ldr	r1, [r4, #4]
    5888:	6820      	ldr	r0, [r4, #0]
    588a:	f7ff ff83 	bl	5794 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    588e:	6823      	ldr	r3, [r4, #0]
    5890:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5892:	3430      	adds	r4, #48	; 0x30
    5894:	e7e6      	b.n	5864 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    5896:	f000 f9e1 	bl	5c5c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    589a:	4c15      	ldr	r4, [pc, #84]	; (58f0 <z_init_static_threads+0x94>)
    589c:	e01b      	b.n	58d6 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    589e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    58a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    58a4:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    58a8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    58ac:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    58b0:	03d8      	lsls	r0, r3, #15
    58b2:	f240 35e7 	movw	r5, #999	; 0x3e7
    58b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    58ba:	2300      	movs	r3, #0
    58bc:	1940      	adds	r0, r0, r5
    58be:	f04f 0500 	mov.w	r5, #0
    58c2:	eb45 0101 	adc.w	r1, r5, r1
    58c6:	f7fa fc1b 	bl	100 <__aeabi_uldivmod>
    58ca:	4602      	mov	r2, r0
    58cc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    58ce:	4630      	mov	r0, r6
    58d0:	f7ff ff4e 	bl	5770 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    58d4:	3430      	adds	r4, #48	; 0x30
    58d6:	4b07      	ldr	r3, [pc, #28]	; (58f4 <z_init_static_threads+0x98>)
    58d8:	429c      	cmp	r4, r3
    58da:	d204      	bcs.n	58e6 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    58dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    58e2:	d0f7      	beq.n	58d4 <z_init_static_threads+0x78>
    58e4:	e7db      	b.n	589e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    58e6:	f000 fbb7 	bl	6058 <k_sched_unlock>
}
    58ea:	b006      	add	sp, #24
    58ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    58f0:	20000154 	.word	0x20000154
    58f4:	20000154 	.word	0x20000154

000058f8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    58f8:	b508      	push	{r3, lr}
    58fa:	e001      	b.n	5900 <idle+0x8>
	arch_cpu_idle();
    58fc:	f7fc fdac 	bl	2458 <arch_cpu_idle>
	__asm__ volatile(
    5900:	f04f 0220 	mov.w	r2, #32
    5904:	f3ef 8311 	mrs	r3, BASEPRI
    5908:	f382 8812 	msr	BASEPRI_MAX, r2
    590c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5910:	f002 fdec 	bl	84ec <z_get_next_timeout_expiry>
    5914:	4b03      	ldr	r3, [pc, #12]	; (5924 <idle+0x2c>)
    5916:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    5918:	f7fc fc08 	bl	212c <pm_system_suspend>
    591c:	2800      	cmp	r0, #0
    591e:	d1ef      	bne.n	5900 <idle+0x8>
    5920:	e7ec      	b.n	58fc <idle+0x4>
    5922:	bf00      	nop
    5924:	20000f70 	.word	0x20000f70

00005928 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    592c:	b083      	sub	sp, #12
    592e:	4604      	mov	r4, r0
    5930:	461d      	mov	r5, r3
    5932:	f04f 0320 	mov.w	r3, #32
    5936:	f3ef 8711 	mrs	r7, BASEPRI
    593a:	f383 8812 	msr	BASEPRI_MAX, r3
    593e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5942:	68c1      	ldr	r1, [r0, #12]
    5944:	b999      	cbnz	r1, 596e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    5946:	2900      	cmp	r1, #0
    5948:	d14f      	bne.n	59ea <z_impl_k_mutex_lock+0xc2>
    594a:	4b3a      	ldr	r3, [pc, #232]	; (5a34 <z_impl_k_mutex_lock+0x10c>)
    594c:	689b      	ldr	r3, [r3, #8]
    594e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5952:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    5954:	3101      	adds	r1, #1
    5956:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    5958:	4b36      	ldr	r3, [pc, #216]	; (5a34 <z_impl_k_mutex_lock+0x10c>)
    595a:	689b      	ldr	r3, [r3, #8]
    595c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    595e:	f387 8811 	msr	BASEPRI, r7
    5962:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    5966:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5968:	b003      	add	sp, #12
    596a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    596e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5970:	6882      	ldr	r2, [r0, #8]
    5972:	4b30      	ldr	r3, [pc, #192]	; (5a34 <z_impl_k_mutex_lock+0x10c>)
    5974:	689b      	ldr	r3, [r3, #8]
    5976:	429a      	cmp	r2, r3
    5978:	d0e5      	beq.n	5946 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    597a:	ea55 0106 	orrs.w	r1, r5, r6
    597e:	bf0c      	ite	eq
    5980:	f04f 0801 	moveq.w	r8, #1
    5984:	f04f 0800 	movne.w	r8, #0
    5988:	d031      	beq.n	59ee <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    598a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    598e:	4649      	mov	r1, r9
    5990:	f993 000e 	ldrsb.w	r0, [r3, #14]
    5994:	f002 fc16 	bl	81c4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5998:	4581      	cmp	r9, r0
    599a:	dc2f      	bgt.n	59fc <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    599c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    59a0:	9600      	str	r6, [sp, #0]
    59a2:	9501      	str	r5, [sp, #4]
    59a4:	4622      	mov	r2, r4
    59a6:	4639      	mov	r1, r7
    59a8:	4823      	ldr	r0, [pc, #140]	; (5a38 <z_impl_k_mutex_lock+0x110>)
    59aa:	f000 fa9f 	bl	5eec <z_pend_curr>
	if (got_mutex == 0) {
    59ae:	2800      	cmp	r0, #0
    59b0:	d0da      	beq.n	5968 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    59b2:	f04f 0320 	mov.w	r3, #32
    59b6:	f3ef 8511 	mrs	r5, BASEPRI
    59ba:	f383 8812 	msr	BASEPRI_MAX, r3
    59be:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    59c2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59c4:	42a3      	cmp	r3, r4
    59c6:	d01f      	beq.n	5a08 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    59c8:	b1f3      	cbz	r3, 5a08 <z_impl_k_mutex_lock+0xe0>
    59ca:	6921      	ldr	r1, [r4, #16]
    59cc:	f993 000e 	ldrsb.w	r0, [r3, #14]
    59d0:	f002 fbf8 	bl	81c4 <new_prio_for_inheritance>
    59d4:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    59d6:	4620      	mov	r0, r4
    59d8:	f002 fbff 	bl	81da <adjust_owner_prio>
    59dc:	b9b0      	cbnz	r0, 5a0c <z_impl_k_mutex_lock+0xe4>
    59de:	f1b9 0f00 	cmp.w	r9, #0
    59e2:	d015      	beq.n	5a10 <z_impl_k_mutex_lock+0xe8>
    59e4:	f04f 0801 	mov.w	r8, #1
    59e8:	e012      	b.n	5a10 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    59ea:	6923      	ldr	r3, [r4, #16]
    59ec:	e7b1      	b.n	5952 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    59ee:	f387 8811 	msr	BASEPRI, r7
    59f2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    59f6:	f06f 000f 	mvn.w	r0, #15
    59fa:	e7b5      	b.n	5968 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    59fc:	4601      	mov	r1, r0
    59fe:	4620      	mov	r0, r4
    5a00:	f002 fbeb 	bl	81da <adjust_owner_prio>
    5a04:	4681      	mov	r9, r0
    5a06:	e7cb      	b.n	59a0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5a08:	6921      	ldr	r1, [r4, #16]
    5a0a:	e7e4      	b.n	59d6 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5a0c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    5a10:	f1b8 0f00 	cmp.w	r8, #0
    5a14:	d106      	bne.n	5a24 <z_impl_k_mutex_lock+0xfc>
    5a16:	f385 8811 	msr	BASEPRI, r5
    5a1a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    5a1e:	f06f 000a 	mvn.w	r0, #10
    5a22:	e7a1      	b.n	5968 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    5a24:	4629      	mov	r1, r5
    5a26:	4804      	ldr	r0, [pc, #16]	; (5a38 <z_impl_k_mutex_lock+0x110>)
    5a28:	f000 f8fc 	bl	5c24 <z_reschedule>
	return -EAGAIN;
    5a2c:	f06f 000a 	mvn.w	r0, #10
    5a30:	e79a      	b.n	5968 <z_impl_k_mutex_lock+0x40>
    5a32:	bf00      	nop
    5a34:	20000f70 	.word	0x20000f70
    5a38:	20000f9c 	.word	0x20000f9c

00005a3c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5a3c:	6882      	ldr	r2, [r0, #8]
    5a3e:	2a00      	cmp	r2, #0
    5a40:	d035      	beq.n	5aae <z_impl_k_mutex_unlock+0x72>
{
    5a42:	b538      	push	{r3, r4, r5, lr}
    5a44:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5a46:	4b1d      	ldr	r3, [pc, #116]	; (5abc <z_impl_k_mutex_unlock+0x80>)
    5a48:	689b      	ldr	r3, [r3, #8]
    5a4a:	429a      	cmp	r2, r3
    5a4c:	d132      	bne.n	5ab4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5a4e:	7bda      	ldrb	r2, [r3, #15]
    5a50:	3a01      	subs	r2, #1
    5a52:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5a54:	68c3      	ldr	r3, [r0, #12]
    5a56:	2b01      	cmp	r3, #1
    5a58:	d905      	bls.n	5a66 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    5a5a:	3b01      	subs	r3, #1
    5a5c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5a5e:	f000 fafb 	bl	6058 <k_sched_unlock>

	return 0;
    5a62:	2000      	movs	r0, #0
}
    5a64:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5a66:	f04f 0320 	mov.w	r3, #32
    5a6a:	f3ef 8511 	mrs	r5, BASEPRI
    5a6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a72:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5a76:	6901      	ldr	r1, [r0, #16]
    5a78:	f002 fbaf 	bl	81da <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5a7c:	4620      	mov	r0, r4
    5a7e:	f002 fcd1 	bl	8424 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5a82:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5a84:	b160      	cbz	r0, 5aa0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    5a86:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5a8a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5a8c:	2300      	movs	r3, #0
    5a8e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    5a92:	f002 fc05 	bl	82a0 <z_ready_thread>
		z_reschedule(&lock, key);
    5a96:	4629      	mov	r1, r5
    5a98:	4809      	ldr	r0, [pc, #36]	; (5ac0 <z_impl_k_mutex_unlock+0x84>)
    5a9a:	f000 f8c3 	bl	5c24 <z_reschedule>
    5a9e:	e7de      	b.n	5a5e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5aa0:	2300      	movs	r3, #0
    5aa2:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    5aa4:	f385 8811 	msr	BASEPRI, r5
    5aa8:	f3bf 8f6f 	isb	sy
    5aac:	e7d7      	b.n	5a5e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5aae:	f06f 0015 	mvn.w	r0, #21
}
    5ab2:	4770      	bx	lr
		return -EPERM;
    5ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5ab8:	e7d4      	b.n	5a64 <z_impl_k_mutex_unlock+0x28>
    5aba:	bf00      	nop
    5abc:	20000f70 	.word	0x20000f70
    5ac0:	20000f9c 	.word	0x20000f9c

00005ac4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5ac4:	b538      	push	{r3, r4, r5, lr}
    5ac6:	4604      	mov	r4, r0
	__asm__ volatile(
    5ac8:	f04f 0320 	mov.w	r3, #32
    5acc:	f3ef 8511 	mrs	r5, BASEPRI
    5ad0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ad4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5ad8:	f002 fca4 	bl	8424 <z_unpend_first_thread>

	if (thread != NULL) {
    5adc:	b148      	cbz	r0, 5af2 <z_impl_k_sem_give+0x2e>
    5ade:	2200      	movs	r2, #0
    5ae0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5ae4:	f002 fbdc 	bl	82a0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5ae8:	4629      	mov	r1, r5
    5aea:	4807      	ldr	r0, [pc, #28]	; (5b08 <z_impl_k_sem_give+0x44>)
    5aec:	f000 f89a 	bl	5c24 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5af0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5af2:	68a3      	ldr	r3, [r4, #8]
    5af4:	68e2      	ldr	r2, [r4, #12]
    5af6:	4293      	cmp	r3, r2
    5af8:	d003      	beq.n	5b02 <z_impl_k_sem_give+0x3e>
    5afa:	2201      	movs	r2, #1
    5afc:	4413      	add	r3, r2
    5afe:	60a3      	str	r3, [r4, #8]
}
    5b00:	e7f2      	b.n	5ae8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5b02:	2200      	movs	r2, #0
    5b04:	e7fa      	b.n	5afc <z_impl_k_sem_give+0x38>
    5b06:	bf00      	nop
    5b08:	20000f9c 	.word	0x20000f9c

00005b0c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5b0c:	b530      	push	{r4, r5, lr}
    5b0e:	b083      	sub	sp, #12
    5b10:	461d      	mov	r5, r3
    5b12:	f04f 0320 	mov.w	r3, #32
    5b16:	f3ef 8111 	mrs	r1, BASEPRI
    5b1a:	f383 8812 	msr	BASEPRI_MAX, r3
    5b1e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5b22:	6883      	ldr	r3, [r0, #8]
    5b24:	b143      	cbz	r3, 5b38 <z_impl_k_sem_take+0x2c>
		sem->count--;
    5b26:	3b01      	subs	r3, #1
    5b28:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    5b2a:	f381 8811 	msr	BASEPRI, r1
    5b2e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5b32:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5b34:	b003      	add	sp, #12
    5b36:	bd30      	pop	{r4, r5, pc}
    5b38:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5b3a:	ea54 0305 	orrs.w	r3, r4, r5
    5b3e:	d006      	beq.n	5b4e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5b40:	e9cd 4500 	strd	r4, r5, [sp]
    5b44:	4602      	mov	r2, r0
    5b46:	4805      	ldr	r0, [pc, #20]	; (5b5c <z_impl_k_sem_take+0x50>)
    5b48:	f000 f9d0 	bl	5eec <z_pend_curr>
	return ret;
    5b4c:	e7f2      	b.n	5b34 <z_impl_k_sem_take+0x28>
    5b4e:	f381 8811 	msr	BASEPRI, r1
    5b52:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5b56:	f06f 000f 	mvn.w	r0, #15
    5b5a:	e7eb      	b.n	5b34 <z_impl_k_sem_take+0x28>
    5b5c:	20000f9c 	.word	0x20000f9c

00005b60 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    5b60:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5b66:	bf08      	it	eq
    5b68:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    5b6c:	d100      	bne.n	5b70 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    5b6e:	bd38      	pop	{r3, r4, r5, pc}
    5b70:	4902      	ldr	r1, [pc, #8]	; (5b7c <add_thread_timeout+0x1c>)
    5b72:	3018      	adds	r0, #24
    5b74:	f000 fc40 	bl	63f8 <z_add_timeout>
    5b78:	e7f9      	b.n	5b6e <add_thread_timeout+0xe>
    5b7a:	bf00      	nop
    5b7c:	000082d9 	.word	0x000082d9

00005b80 <z_reset_time_slice>:
{
    5b80:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    5b82:	4b08      	ldr	r3, [pc, #32]	; (5ba4 <z_reset_time_slice+0x24>)
    5b84:	681b      	ldr	r3, [r3, #0]
    5b86:	b903      	cbnz	r3, 5b8a <z_reset_time_slice+0xa>
}
    5b88:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5b8a:	f7fe fb1b 	bl	41c4 <sys_clock_elapsed>
    5b8e:	4603      	mov	r3, r0
    5b90:	4a04      	ldr	r2, [pc, #16]	; (5ba4 <z_reset_time_slice+0x24>)
    5b92:	6810      	ldr	r0, [r2, #0]
    5b94:	4403      	add	r3, r0
    5b96:	4a04      	ldr	r2, [pc, #16]	; (5ba8 <z_reset_time_slice+0x28>)
    5b98:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    5b9a:	2100      	movs	r1, #0
    5b9c:	f002 fcbc 	bl	8518 <z_set_timeout_expiry>
}
    5ba0:	e7f2      	b.n	5b88 <z_reset_time_slice+0x8>
    5ba2:	bf00      	nop
    5ba4:	20000fa4 	.word	0x20000fa4
    5ba8:	20000f70 	.word	0x20000f70

00005bac <k_sched_time_slice_set>:
{
    5bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bb0:	4606      	mov	r6, r0
    5bb2:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    5bb4:	2300      	movs	r3, #0
	__asm__ volatile(
    5bb6:	f04f 0220 	mov.w	r2, #32
    5bba:	f3ef 8711 	mrs	r7, BASEPRI
    5bbe:	f382 8812 	msr	BASEPRI_MAX, r2
    5bc2:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5bc6:	e009      	b.n	5bdc <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    5bc8:	4b13      	ldr	r3, [pc, #76]	; (5c18 <k_sched_time_slice_set+0x6c>)
    5bca:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    5bce:	f7ff ffd7 	bl	5b80 <z_reset_time_slice>
	__asm__ volatile(
    5bd2:	f387 8811 	msr	BASEPRI, r7
    5bd6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5bda:	2301      	movs	r3, #1
    5bdc:	b9cb      	cbnz	r3, 5c12 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    5bde:	2300      	movs	r3, #0
    5be0:	4a0e      	ldr	r2, [pc, #56]	; (5c1c <k_sched_time_slice_set+0x70>)
    5be2:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    5be4:	0c75      	lsrs	r5, r6, #17
    5be6:	03f4      	lsls	r4, r6, #15
    5be8:	f240 30e7 	movw	r0, #999	; 0x3e7
    5bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5bf0:	2300      	movs	r3, #0
    5bf2:	1820      	adds	r0, r4, r0
    5bf4:	f04f 0100 	mov.w	r1, #0
    5bf8:	eb45 0101 	adc.w	r1, r5, r1
    5bfc:	f7fa fa80 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    5c00:	4b07      	ldr	r3, [pc, #28]	; (5c20 <k_sched_time_slice_set+0x74>)
    5c02:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5c04:	2e00      	cmp	r6, #0
    5c06:	dddf      	ble.n	5bc8 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    5c08:	2802      	cmp	r0, #2
    5c0a:	bfb8      	it	lt
    5c0c:	2002      	movlt	r0, #2
    5c0e:	6018      	str	r0, [r3, #0]
    5c10:	e7da      	b.n	5bc8 <k_sched_time_slice_set+0x1c>
}
    5c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c16:	bf00      	nop
    5c18:	20000fa0 	.word	0x20000fa0
    5c1c:	20000f70 	.word	0x20000f70
    5c20:	20000fa4 	.word	0x20000fa4

00005c24 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5c24:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    5c26:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5c28:	b921      	cbnz	r1, 5c34 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5c2a:	f3ef 8305 	mrs	r3, IPSR
    5c2e:	b913      	cbnz	r3, 5c36 <z_reschedule+0x12>
    5c30:	2101      	movs	r1, #1
    5c32:	e000      	b.n	5c36 <z_reschedule+0x12>
    5c34:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    5c36:	f011 0f01 	tst.w	r1, #1
    5c3a:	d007      	beq.n	5c4c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    5c3c:	4b06      	ldr	r3, [pc, #24]	; (5c58 <z_reschedule+0x34>)
    5c3e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    5c40:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    5c42:	429a      	cmp	r2, r3
    5c44:	d002      	beq.n	5c4c <z_reschedule+0x28>
	ret = arch_swap(key);
    5c46:	f7fc fcc1 	bl	25cc <arch_swap>
		z_swap(lock, key);
    5c4a:	e003      	b.n	5c54 <z_reschedule+0x30>
    5c4c:	f380 8811 	msr	BASEPRI, r0
    5c50:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    5c54:	bd08      	pop	{r3, pc}
    5c56:	bf00      	nop
    5c58:	20000f70 	.word	0x20000f70

00005c5c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    5c5c:	2300      	movs	r3, #0
	__asm__ volatile(
    5c5e:	f04f 0220 	mov.w	r2, #32
    5c62:	f3ef 8111 	mrs	r1, BASEPRI
    5c66:	f382 8812 	msr	BASEPRI_MAX, r2
    5c6a:	f3bf 8f6f 	isb	sy
    5c6e:	b953      	cbnz	r3, 5c86 <k_sched_lock+0x2a>
    5c70:	4b05      	ldr	r3, [pc, #20]	; (5c88 <k_sched_lock+0x2c>)
    5c72:	689a      	ldr	r2, [r3, #8]
    5c74:	7bd3      	ldrb	r3, [r2, #15]
    5c76:	3b01      	subs	r3, #1
    5c78:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5c7a:	f381 8811 	msr	BASEPRI, r1
    5c7e:	f3bf 8f6f 	isb	sy
    5c82:	2301      	movs	r3, #1
    5c84:	e7f3      	b.n	5c6e <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5c86:	4770      	bx	lr
    5c88:	20000f70 	.word	0x20000f70

00005c8c <update_cache>:
{
    5c8c:	b538      	push	{r3, r4, r5, lr}
    5c8e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    5c90:	480f      	ldr	r0, [pc, #60]	; (5cd0 <update_cache+0x44>)
    5c92:	f002 fafe 	bl	8292 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5c96:	4605      	mov	r5, r0
    5c98:	b170      	cbz	r0, 5cb8 <update_cache+0x2c>
	if (preempt_ok != 0) {
    5c9a:	b984      	cbnz	r4, 5cbe <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    5c9c:	4b0d      	ldr	r3, [pc, #52]	; (5cd4 <update_cache+0x48>)
    5c9e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    5ca0:	7b5a      	ldrb	r2, [r3, #13]
    5ca2:	f012 0f1f 	tst.w	r2, #31
    5ca6:	d10a      	bne.n	5cbe <update_cache+0x32>
	return node->next != NULL;
    5ca8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5caa:	b942      	cbnz	r2, 5cbe <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    5cac:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    5cae:	2a7f      	cmp	r2, #127	; 0x7f
    5cb0:	d905      	bls.n	5cbe <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    5cb2:	4a08      	ldr	r2, [pc, #32]	; (5cd4 <update_cache+0x48>)
    5cb4:	61d3      	str	r3, [r2, #28]
    5cb6:	e00a      	b.n	5cce <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5cb8:	4b06      	ldr	r3, [pc, #24]	; (5cd4 <update_cache+0x48>)
    5cba:	68dd      	ldr	r5, [r3, #12]
    5cbc:	e7ed      	b.n	5c9a <update_cache+0xe>
		if (thread != _current) {
    5cbe:	4b05      	ldr	r3, [pc, #20]	; (5cd4 <update_cache+0x48>)
    5cc0:	689b      	ldr	r3, [r3, #8]
    5cc2:	42ab      	cmp	r3, r5
    5cc4:	d001      	beq.n	5cca <update_cache+0x3e>
			z_reset_time_slice();
    5cc6:	f7ff ff5b 	bl	5b80 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5cca:	4b02      	ldr	r3, [pc, #8]	; (5cd4 <update_cache+0x48>)
    5ccc:	61dd      	str	r5, [r3, #28]
}
    5cce:	bd38      	pop	{r3, r4, r5, pc}
    5cd0:	20000f90 	.word	0x20000f90
    5cd4:	20000f70 	.word	0x20000f70

00005cd8 <move_thread_to_end_of_prio_q>:
{
    5cd8:	b538      	push	{r3, r4, r5, lr}
    5cda:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    5cdc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    5cde:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	db28      	blt.n	5d38 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    5ce6:	7b6b      	ldrb	r3, [r5, #13]
    5ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5cec:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    5cee:	4b1a      	ldr	r3, [pc, #104]	; (5d58 <move_thread_to_end_of_prio_q+0x80>)
    5cf0:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cf4:	429c      	cmp	r4, r3
    5cf6:	d02d      	beq.n	5d54 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cf8:	b16c      	cbz	r4, 5d16 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5cfa:	4621      	mov	r1, r4
    5cfc:	4628      	mov	r0, r5
    5cfe:	f002 fa82 	bl	8206 <z_sched_prio_cmp>
    5d02:	2800      	cmp	r0, #0
    5d04:	dc20      	bgt.n	5d48 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5d06:	b134      	cbz	r4, 5d16 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    5d08:	4b13      	ldr	r3, [pc, #76]	; (5d58 <move_thread_to_end_of_prio_q+0x80>)
    5d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d0c:	429c      	cmp	r4, r3
    5d0e:	d002      	beq.n	5d16 <move_thread_to_end_of_prio_q+0x3e>
    5d10:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5d12:	2c00      	cmp	r4, #0
    5d14:	d1f0      	bne.n	5cf8 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    5d16:	4b10      	ldr	r3, [pc, #64]	; (5d58 <move_thread_to_end_of_prio_q+0x80>)
    5d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    5d1a:	f103 0120 	add.w	r1, r3, #32
    5d1e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    5d20:	606a      	str	r2, [r5, #4]

	tail->next = node;
    5d22:	6015      	str	r5, [r2, #0]
	list->tail = node;
    5d24:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    5d26:	4b0c      	ldr	r3, [pc, #48]	; (5d58 <move_thread_to_end_of_prio_q+0x80>)
    5d28:	6898      	ldr	r0, [r3, #8]
    5d2a:	42a8      	cmp	r0, r5
    5d2c:	bf14      	ite	ne
    5d2e:	2000      	movne	r0, #0
    5d30:	2001      	moveq	r0, #1
    5d32:	f7ff ffab 	bl	5c8c <update_cache>
}
    5d36:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5d3c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5d3e:	4601      	mov	r1, r0
    5d40:	4806      	ldr	r0, [pc, #24]	; (5d5c <move_thread_to_end_of_prio_q+0x84>)
    5d42:	f002 fa9e 	bl	8282 <z_priq_dumb_remove>
}
    5d46:	e7ce      	b.n	5ce6 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5d48:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    5d4a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    5d4c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    5d4e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    5d50:	6065      	str	r5, [r4, #4]
}
    5d52:	e7e8      	b.n	5d26 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5d54:	2400      	movs	r4, #0
    5d56:	e7cf      	b.n	5cf8 <move_thread_to_end_of_prio_q+0x20>
    5d58:	20000f70 	.word	0x20000f70
    5d5c:	20000f90 	.word	0x20000f90

00005d60 <z_time_slice>:
{
    5d60:	b510      	push	{r4, lr}
	__asm__ volatile(
    5d62:	f04f 0320 	mov.w	r3, #32
    5d66:	f3ef 8411 	mrs	r4, BASEPRI
    5d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d6e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5d72:	4b1c      	ldr	r3, [pc, #112]	; (5de4 <z_time_slice+0x84>)
    5d74:	689b      	ldr	r3, [r3, #8]
    5d76:	4a1c      	ldr	r2, [pc, #112]	; (5de8 <z_time_slice+0x88>)
    5d78:	6812      	ldr	r2, [r2, #0]
    5d7a:	4293      	cmp	r3, r2
    5d7c:	d01d      	beq.n	5dba <z_time_slice+0x5a>
	pending_current = NULL;
    5d7e:	4a1a      	ldr	r2, [pc, #104]	; (5de8 <z_time_slice+0x88>)
    5d80:	2100      	movs	r1, #0
    5d82:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5d84:	4a19      	ldr	r2, [pc, #100]	; (5dec <z_time_slice+0x8c>)
    5d86:	6812      	ldr	r2, [r2, #0]
    5d88:	b322      	cbz	r2, 5dd4 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    5d8a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    5d8c:	2a7f      	cmp	r2, #127	; 0x7f
    5d8e:	d821      	bhi.n	5dd4 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    5d90:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    5d92:	f012 0f1f 	tst.w	r2, #31
    5d96:	d11d      	bne.n	5dd4 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5d98:	f993 100e 	ldrsb.w	r1, [r3, #14]
    5d9c:	4a14      	ldr	r2, [pc, #80]	; (5df0 <z_time_slice+0x90>)
    5d9e:	6812      	ldr	r2, [r2, #0]
    5da0:	4291      	cmp	r1, r2
    5da2:	db17      	blt.n	5dd4 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    5da4:	4a13      	ldr	r2, [pc, #76]	; (5df4 <z_time_slice+0x94>)
    5da6:	4293      	cmp	r3, r2
    5da8:	d014      	beq.n	5dd4 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    5daa:	4a0e      	ldr	r2, [pc, #56]	; (5de4 <z_time_slice+0x84>)
    5dac:	6912      	ldr	r2, [r2, #16]
    5dae:	4282      	cmp	r2, r0
    5db0:	dd0a      	ble.n	5dc8 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    5db2:	1a10      	subs	r0, r2, r0
    5db4:	4b0b      	ldr	r3, [pc, #44]	; (5de4 <z_time_slice+0x84>)
    5db6:	6118      	str	r0, [r3, #16]
    5db8:	e00f      	b.n	5dda <z_time_slice+0x7a>
		z_reset_time_slice();
    5dba:	f7ff fee1 	bl	5b80 <z_reset_time_slice>
	__asm__ volatile(
    5dbe:	f384 8811 	msr	BASEPRI, r4
    5dc2:	f3bf 8f6f 	isb	sy
		return;
    5dc6:	e00c      	b.n	5de2 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    5dc8:	4618      	mov	r0, r3
    5dca:	f7ff ff85 	bl	5cd8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    5dce:	f7ff fed7 	bl	5b80 <z_reset_time_slice>
    5dd2:	e002      	b.n	5dda <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    5dd4:	4b03      	ldr	r3, [pc, #12]	; (5de4 <z_time_slice+0x84>)
    5dd6:	2200      	movs	r2, #0
    5dd8:	611a      	str	r2, [r3, #16]
    5dda:	f384 8811 	msr	BASEPRI, r4
    5dde:	f3bf 8f6f 	isb	sy
}
    5de2:	bd10      	pop	{r4, pc}
    5de4:	20000f70 	.word	0x20000f70
    5de8:	20000f9c 	.word	0x20000f9c
    5dec:	20000fa4 	.word	0x20000fa4
    5df0:	20000fa0 	.word	0x20000fa0
    5df4:	200002d0 	.word	0x200002d0

00005df8 <ready_thread>:
{
    5df8:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    5dfa:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5dfc:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5e00:	2a00      	cmp	r2, #0
    5e02:	db2d      	blt.n	5e60 <ready_thread+0x68>
    5e04:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5e06:	f013 0f1f 	tst.w	r3, #31
    5e0a:	d105      	bne.n	5e18 <ready_thread+0x20>
	return node->next != NULL;
    5e0c:	6982      	ldr	r2, [r0, #24]
    5e0e:	b10a      	cbz	r2, 5e14 <ready_thread+0x1c>
    5e10:	2200      	movs	r2, #0
    5e12:	e002      	b.n	5e1a <ready_thread+0x22>
    5e14:	2201      	movs	r2, #1
    5e16:	e000      	b.n	5e1a <ready_thread+0x22>
    5e18:	2200      	movs	r2, #0
    5e1a:	b30a      	cbz	r2, 5e60 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    5e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5e20:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    5e22:	4b14      	ldr	r3, [pc, #80]	; (5e74 <ready_thread+0x7c>)
    5e24:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e28:	429d      	cmp	r5, r3
    5e2a:	d020      	beq.n	5e6e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e2c:	b16d      	cbz	r5, 5e4a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5e2e:	4629      	mov	r1, r5
    5e30:	4620      	mov	r0, r4
    5e32:	f002 f9e8 	bl	8206 <z_sched_prio_cmp>
    5e36:	2800      	cmp	r0, #0
    5e38:	dc13      	bgt.n	5e62 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5e3a:	b135      	cbz	r5, 5e4a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    5e3c:	4b0d      	ldr	r3, [pc, #52]	; (5e74 <ready_thread+0x7c>)
    5e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e40:	429d      	cmp	r5, r3
    5e42:	d002      	beq.n	5e4a <ready_thread+0x52>
    5e44:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e46:	2d00      	cmp	r5, #0
    5e48:	d1f0      	bne.n	5e2c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    5e4a:	4b0a      	ldr	r3, [pc, #40]	; (5e74 <ready_thread+0x7c>)
    5e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    5e4e:	f103 0120 	add.w	r1, r3, #32
    5e52:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    5e54:	6062      	str	r2, [r4, #4]
	tail->next = node;
    5e56:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5e58:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    5e5a:	2000      	movs	r0, #0
    5e5c:	f7ff ff16 	bl	5c8c <update_cache>
}
    5e60:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    5e62:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    5e64:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5e66:	6025      	str	r5, [r4, #0]
	prev->next = node;
    5e68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5e6a:	606c      	str	r4, [r5, #4]
}
    5e6c:	e7f5      	b.n	5e5a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e6e:	2500      	movs	r5, #0
    5e70:	e7dc      	b.n	5e2c <ready_thread+0x34>
    5e72:	bf00      	nop
    5e74:	20000f70 	.word	0x20000f70

00005e78 <z_sched_start>:
{
    5e78:	b510      	push	{r4, lr}
	__asm__ volatile(
    5e7a:	f04f 0320 	mov.w	r3, #32
    5e7e:	f3ef 8411 	mrs	r4, BASEPRI
    5e82:	f383 8812 	msr	BASEPRI_MAX, r3
    5e86:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5e8a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    5e8c:	f013 0f04 	tst.w	r3, #4
    5e90:	d104      	bne.n	5e9c <z_sched_start+0x24>
	__asm__ volatile(
    5e92:	f384 8811 	msr	BASEPRI, r4
    5e96:	f3bf 8f6f 	isb	sy
}
    5e9a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5e9c:	f023 0304 	bic.w	r3, r3, #4
    5ea0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    5ea2:	f7ff ffa9 	bl	5df8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5ea6:	4621      	mov	r1, r4
    5ea8:	4801      	ldr	r0, [pc, #4]	; (5eb0 <z_sched_start+0x38>)
    5eaa:	f7ff febb 	bl	5c24 <z_reschedule>
    5eae:	e7f4      	b.n	5e9a <z_sched_start+0x22>
    5eb0:	20000fa0 	.word	0x20000fa0

00005eb4 <unready_thread>:
{
    5eb4:	b510      	push	{r4, lr}
    5eb6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    5eb8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    5eba:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	db08      	blt.n	5ed4 <unready_thread+0x20>
	update_cache(thread == _current);
    5ec2:	4b08      	ldr	r3, [pc, #32]	; (5ee4 <unready_thread+0x30>)
    5ec4:	6898      	ldr	r0, [r3, #8]
    5ec6:	42a0      	cmp	r0, r4
    5ec8:	bf14      	ite	ne
    5eca:	2000      	movne	r0, #0
    5ecc:	2001      	moveq	r0, #1
    5ece:	f7ff fedd 	bl	5c8c <update_cache>
}
    5ed2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ed4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5ed8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5eda:	4601      	mov	r1, r0
    5edc:	4802      	ldr	r0, [pc, #8]	; (5ee8 <unready_thread+0x34>)
    5ede:	f002 f9d0 	bl	8282 <z_priq_dumb_remove>
}
    5ee2:	e7ee      	b.n	5ec2 <unready_thread+0xe>
    5ee4:	20000f70 	.word	0x20000f70
    5ee8:	20000f90 	.word	0x20000f90

00005eec <z_pend_curr>:
{
    5eec:	b510      	push	{r4, lr}
    5eee:	460c      	mov	r4, r1
    5ef0:	4611      	mov	r1, r2
	pending_current = _current;
    5ef2:	4b06      	ldr	r3, [pc, #24]	; (5f0c <z_pend_curr+0x20>)
    5ef4:	6898      	ldr	r0, [r3, #8]
    5ef6:	4b06      	ldr	r3, [pc, #24]	; (5f10 <z_pend_curr+0x24>)
    5ef8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    5efa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5efe:	f002 fa49 	bl	8394 <pend>
    5f02:	4620      	mov	r0, r4
    5f04:	f7fc fb62 	bl	25cc <arch_swap>
}
    5f08:	bd10      	pop	{r4, pc}
    5f0a:	bf00      	nop
    5f0c:	20000f70 	.word	0x20000f70
    5f10:	20000f9c 	.word	0x20000f9c

00005f14 <z_set_prio>:
{
    5f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f18:	4604      	mov	r4, r0
    5f1a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    5f1c:	2300      	movs	r3, #0
	__asm__ volatile(
    5f1e:	f04f 0220 	mov.w	r2, #32
    5f22:	f3ef 8611 	mrs	r6, BASEPRI
    5f26:	f382 8812 	msr	BASEPRI_MAX, r2
    5f2a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    5f2e:	4698      	mov	r8, r3
    5f30:	e008      	b.n	5f44 <z_set_prio+0x30>
		if (need_sched) {
    5f32:	f012 0801 	ands.w	r8, r2, #1
    5f36:	d111      	bne.n	5f5c <z_set_prio+0x48>
			thread->base.prio = prio;
    5f38:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    5f3a:	f386 8811 	msr	BASEPRI, r6
    5f3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5f42:	2301      	movs	r3, #1
    5f44:	461a      	mov	r2, r3
    5f46:	2b00      	cmp	r3, #0
    5f48:	d13d      	bne.n	5fc6 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    5f4a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5f4c:	f013 0f1f 	tst.w	r3, #31
    5f50:	d1ef      	bne.n	5f32 <z_set_prio+0x1e>
	return node->next != NULL;
    5f52:	69a1      	ldr	r1, [r4, #24]
    5f54:	2900      	cmp	r1, #0
    5f56:	d1ec      	bne.n	5f32 <z_set_prio+0x1e>
    5f58:	2201      	movs	r2, #1
    5f5a:	e7ea      	b.n	5f32 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5f60:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5f62:	f8df 906c 	ldr.w	r9, [pc, #108]	; 5fd0 <z_set_prio+0xbc>
    5f66:	4621      	mov	r1, r4
    5f68:	4648      	mov	r0, r9
    5f6a:	f002 f98a 	bl	8282 <z_priq_dumb_remove>
				thread->base.prio = prio;
    5f6e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5f70:	7b63      	ldrb	r3, [r4, #13]
    5f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5f76:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    5f78:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f7c:	454d      	cmp	r5, r9
    5f7e:	d020      	beq.n	5fc2 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f80:	b16d      	cbz	r5, 5f9e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f82:	4629      	mov	r1, r5
    5f84:	4620      	mov	r0, r4
    5f86:	f002 f93e 	bl	8206 <z_sched_prio_cmp>
    5f8a:	2800      	cmp	r0, #0
    5f8c:	dc13      	bgt.n	5fb6 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5f8e:	b135      	cbz	r5, 5f9e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    5f90:	4b0e      	ldr	r3, [pc, #56]	; (5fcc <z_set_prio+0xb8>)
    5f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f94:	429d      	cmp	r5, r3
    5f96:	d002      	beq.n	5f9e <z_set_prio+0x8a>
    5f98:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f9a:	2d00      	cmp	r5, #0
    5f9c:	d1f0      	bne.n	5f80 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    5f9e:	4b0b      	ldr	r3, [pc, #44]	; (5fcc <z_set_prio+0xb8>)
    5fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    5fa2:	f103 0120 	add.w	r1, r3, #32
    5fa6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    5fa8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    5faa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5fac:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    5fae:	2001      	movs	r0, #1
    5fb0:	f7ff fe6c 	bl	5c8c <update_cache>
    5fb4:	e7c1      	b.n	5f3a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    5fb6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    5fb8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5fba:	6025      	str	r5, [r4, #0]
	prev->next = node;
    5fbc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5fbe:	606c      	str	r4, [r5, #4]
}
    5fc0:	e7f5      	b.n	5fae <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5fc2:	2500      	movs	r5, #0
    5fc4:	e7dc      	b.n	5f80 <z_set_prio+0x6c>
}
    5fc6:	4640      	mov	r0, r8
    5fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fcc:	20000f70 	.word	0x20000f70
    5fd0:	20000f90 	.word	0x20000f90

00005fd4 <z_impl_k_thread_suspend>:
{
    5fd4:	b538      	push	{r3, r4, r5, lr}
    5fd6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5fd8:	3018      	adds	r0, #24
    5fda:	f002 fa69 	bl	84b0 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    5fde:	2300      	movs	r3, #0
	__asm__ volatile(
    5fe0:	f04f 0220 	mov.w	r2, #32
    5fe4:	f3ef 8511 	mrs	r5, BASEPRI
    5fe8:	f382 8812 	msr	BASEPRI_MAX, r2
    5fec:	f3bf 8f6f 	isb	sy
    5ff0:	e010      	b.n	6014 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5ff2:	7b63      	ldrb	r3, [r4, #13]
    5ff4:	f043 0310 	orr.w	r3, r3, #16
    5ff8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    5ffa:	4b15      	ldr	r3, [pc, #84]	; (6050 <z_impl_k_thread_suspend+0x7c>)
    5ffc:	6898      	ldr	r0, [r3, #8]
    5ffe:	42a0      	cmp	r0, r4
    6000:	bf14      	ite	ne
    6002:	2000      	movne	r0, #0
    6004:	2001      	moveq	r0, #1
    6006:	f7ff fe41 	bl	5c8c <update_cache>
	__asm__ volatile(
    600a:	f385 8811 	msr	BASEPRI, r5
    600e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6012:	2301      	movs	r3, #1
    6014:	b963      	cbnz	r3, 6030 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    6016:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    6018:	f994 300d 	ldrsb.w	r3, [r4, #13]
    601c:	2b00      	cmp	r3, #0
    601e:	dae8      	bge.n	5ff2 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6020:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6024:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6026:	4621      	mov	r1, r4
    6028:	480a      	ldr	r0, [pc, #40]	; (6054 <z_impl_k_thread_suspend+0x80>)
    602a:	f002 f92a 	bl	8282 <z_priq_dumb_remove>
}
    602e:	e7e0      	b.n	5ff2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    6030:	4b07      	ldr	r3, [pc, #28]	; (6050 <z_impl_k_thread_suspend+0x7c>)
    6032:	689b      	ldr	r3, [r3, #8]
    6034:	42a3      	cmp	r3, r4
    6036:	d000      	beq.n	603a <z_impl_k_thread_suspend+0x66>
}
    6038:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    603a:	f04f 0320 	mov.w	r3, #32
    603e:	f3ef 8011 	mrs	r0, BASEPRI
    6042:	f383 8812 	msr	BASEPRI_MAX, r3
    6046:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    604a:	f002 f905 	bl	8258 <z_reschedule_irqlock>
    604e:	e7f3      	b.n	6038 <z_impl_k_thread_suspend+0x64>
    6050:	20000f70 	.word	0x20000f70
    6054:	20000f90 	.word	0x20000f90

00006058 <k_sched_unlock>:

void k_sched_unlock(void)
{
    6058:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    605a:	2300      	movs	r3, #0
    605c:	f04f 0220 	mov.w	r2, #32
    6060:	f3ef 8411 	mrs	r4, BASEPRI
    6064:	f382 8812 	msr	BASEPRI_MAX, r2
    6068:	f3bf 8f6f 	isb	sy
    606c:	b96b      	cbnz	r3, 608a <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    606e:	4b0c      	ldr	r3, [pc, #48]	; (60a0 <k_sched_unlock+0x48>)
    6070:	689a      	ldr	r2, [r3, #8]
    6072:	7bd3      	ldrb	r3, [r2, #15]
    6074:	3301      	adds	r3, #1
    6076:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6078:	2000      	movs	r0, #0
    607a:	f7ff fe07 	bl	5c8c <update_cache>
	__asm__ volatile(
    607e:	f384 8811 	msr	BASEPRI, r4
    6082:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6086:	2301      	movs	r3, #1
    6088:	e7f0      	b.n	606c <k_sched_unlock+0x14>
	__asm__ volatile(
    608a:	f04f 0320 	mov.w	r3, #32
    608e:	f3ef 8011 	mrs	r0, BASEPRI
    6092:	f383 8812 	msr	BASEPRI_MAX, r3
    6096:	f3bf 8f6f 	isb	sy
    609a:	f002 f8dd 	bl	8258 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    609e:	bd10      	pop	{r4, pc}
    60a0:	20000f70 	.word	0x20000f70

000060a4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    60a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    60a6:	7b43      	ldrb	r3, [r0, #13]
    60a8:	f013 0f08 	tst.w	r3, #8
    60ac:	d145      	bne.n	613a <end_thread+0x96>
    60ae:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    60b0:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    60b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    60b8:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    60ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    60be:	d114      	bne.n	60ea <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    60c0:	68ab      	ldr	r3, [r5, #8]
    60c2:	b15b      	cbz	r3, 60dc <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    60c4:	4628      	mov	r0, r5
    60c6:	f002 f89c 	bl	8202 <pended_on_thread>
    60ca:	4629      	mov	r1, r5
    60cc:	f002 f8d9 	bl	8282 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    60d0:	7b6b      	ldrb	r3, [r5, #13]
    60d2:	f023 0302 	bic.w	r3, r3, #2
    60d6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    60d8:	2300      	movs	r3, #0
    60da:	60ab      	str	r3, [r5, #8]
    60dc:	f105 0018 	add.w	r0, r5, #24
    60e0:	f002 f9e6 	bl	84b0 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    60e4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    60e8:	e01c      	b.n	6124 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    60ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    60ee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    60f0:	4601      	mov	r1, r0
    60f2:	4812      	ldr	r0, [pc, #72]	; (613c <end_thread+0x98>)
    60f4:	f002 f8c5 	bl	8282 <z_priq_dumb_remove>
}
    60f8:	e7e2      	b.n	60c0 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    60fa:	4620      	mov	r0, r4
    60fc:	f002 f881 	bl	8202 <pended_on_thread>
    6100:	4621      	mov	r1, r4
    6102:	f002 f8be 	bl	8282 <z_priq_dumb_remove>
    6106:	7b63      	ldrb	r3, [r4, #13]
    6108:	f023 0302 	bic.w	r3, r3, #2
    610c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    610e:	2600      	movs	r6, #0
    6110:	60a6      	str	r6, [r4, #8]
    6112:	f104 0018 	add.w	r0, r4, #24
    6116:	f002 f9cb 	bl	84b0 <z_abort_timeout>
    611a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    611e:	4620      	mov	r0, r4
    6120:	f7ff fe6a 	bl	5df8 <ready_thread>
	return list->head == list;
    6124:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6126:	42bc      	cmp	r4, r7
    6128:	d001      	beq.n	612e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    612a:	2c00      	cmp	r4, #0
    612c:	d1e5      	bne.n	60fa <end_thread+0x56>
		update_cache(1);
    612e:	2001      	movs	r0, #1
    6130:	f7ff fdac 	bl	5c8c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    6134:	4628      	mov	r0, r5
    6136:	f7ff fae9 	bl	570c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    613c:	20000f90 	.word	0x20000f90

00006140 <z_sched_init>:
{
    6140:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    6142:	4804      	ldr	r0, [pc, #16]	; (6154 <z_sched_init+0x14>)
    6144:	f002 f999 	bl	847a <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6148:	2100      	movs	r1, #0
    614a:	4608      	mov	r0, r1
    614c:	f7ff fd2e 	bl	5bac <k_sched_time_slice_set>
}
    6150:	bd08      	pop	{r3, pc}
    6152:	bf00      	nop
    6154:	20000f8c 	.word	0x20000f8c

00006158 <z_impl_k_yield>:
{
    6158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    615a:	f04f 0320 	mov.w	r3, #32
    615e:	f3ef 8611 	mrs	r6, BASEPRI
    6162:	f383 8812 	msr	BASEPRI_MAX, r3
    6166:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    616a:	4c1c      	ldr	r4, [pc, #112]	; (61dc <z_impl_k_yield+0x84>)
    616c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    616e:	7b4b      	ldrb	r3, [r1, #13]
    6170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6174:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6176:	f104 0720 	add.w	r7, r4, #32
    617a:	4638      	mov	r0, r7
    617c:	f002 f881 	bl	8282 <z_priq_dumb_remove>
	queue_thread(_current);
    6180:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6182:	7b6b      	ldrb	r3, [r5, #13]
    6184:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6188:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    618a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    618c:	42bc      	cmp	r4, r7
    618e:	d023      	beq.n	61d8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6190:	b16c      	cbz	r4, 61ae <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6192:	4621      	mov	r1, r4
    6194:	4628      	mov	r0, r5
    6196:	f002 f836 	bl	8206 <z_sched_prio_cmp>
    619a:	2800      	cmp	r0, #0
    619c:	dc16      	bgt.n	61cc <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    619e:	b134      	cbz	r4, 61ae <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    61a0:	4b0e      	ldr	r3, [pc, #56]	; (61dc <z_impl_k_yield+0x84>)
    61a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61a4:	429c      	cmp	r4, r3
    61a6:	d002      	beq.n	61ae <z_impl_k_yield+0x56>
    61a8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61aa:	2c00      	cmp	r4, #0
    61ac:	d1f0      	bne.n	6190 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    61ae:	4b0b      	ldr	r3, [pc, #44]	; (61dc <z_impl_k_yield+0x84>)
    61b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    61b2:	f103 0120 	add.w	r1, r3, #32
    61b6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    61b8:	606a      	str	r2, [r5, #4]
	tail->next = node;
    61ba:	6015      	str	r5, [r2, #0]
	list->tail = node;
    61bc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    61be:	2001      	movs	r0, #1
    61c0:	f7ff fd64 	bl	5c8c <update_cache>
    61c4:	4630      	mov	r0, r6
    61c6:	f7fc fa01 	bl	25cc <arch_swap>
}
    61ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    61cc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    61ce:	606b      	str	r3, [r5, #4]
	node->next = successor;
    61d0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    61d2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    61d4:	6065      	str	r5, [r4, #4]
}
    61d6:	e7f2      	b.n	61be <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61d8:	2400      	movs	r4, #0
    61da:	e7d9      	b.n	6190 <z_impl_k_yield+0x38>
    61dc:	20000f70 	.word	0x20000f70

000061e0 <z_tick_sleep>:
{
    61e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61e4:	4604      	mov	r4, r0
    61e6:	460d      	mov	r5, r1
	if (ticks == 0) {
    61e8:	ea54 0105 	orrs.w	r1, r4, r5
    61ec:	d037      	beq.n	625e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    61ee:	f06f 0101 	mvn.w	r1, #1
    61f2:	1a0a      	subs	r2, r1, r0
    61f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    61f8:	eb61 0305 	sbc.w	r3, r1, r5
    61fc:	2a01      	cmp	r2, #1
    61fe:	f173 0300 	sbcs.w	r3, r3, #0
    6202:	db30      	blt.n	6266 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6204:	f06f 0601 	mvn.w	r6, #1
    6208:	1a36      	subs	r6, r6, r0
    620a:	f04f 0320 	mov.w	r3, #32
    620e:	f3ef 8811 	mrs	r8, BASEPRI
    6212:	f383 8812 	msr	BASEPRI_MAX, r3
    6216:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    621a:	4f16      	ldr	r7, [pc, #88]	; (6274 <z_tick_sleep+0x94>)
    621c:	68b8      	ldr	r0, [r7, #8]
    621e:	4b16      	ldr	r3, [pc, #88]	; (6278 <z_tick_sleep+0x98>)
    6220:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6222:	f7ff fe47 	bl	5eb4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6226:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6228:	4622      	mov	r2, r4
    622a:	462b      	mov	r3, r5
    622c:	4913      	ldr	r1, [pc, #76]	; (627c <z_tick_sleep+0x9c>)
    622e:	3018      	adds	r0, #24
    6230:	f000 f8e2 	bl	63f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6234:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6236:	7b53      	ldrb	r3, [r2, #13]
    6238:	f043 0310 	orr.w	r3, r3, #16
    623c:	7353      	strb	r3, [r2, #13]
    623e:	4640      	mov	r0, r8
    6240:	f7fc f9c4 	bl	25cc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6244:	2500      	movs	r5, #0
    6246:	f002 f992 	bl	856e <sys_clock_tick_get_32>
    624a:	1a34      	subs	r4, r6, r0
    624c:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    6250:	2c01      	cmp	r4, #1
    6252:	f175 0300 	sbcs.w	r3, r5, #0
    6256:	da0a      	bge.n	626e <z_tick_sleep+0x8e>
	return 0;
    6258:	2000      	movs	r0, #0
}
    625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    625e:	f7ff ff7b 	bl	6158 <z_impl_k_yield>
		return 0;
    6262:	2000      	movs	r0, #0
    6264:	e7f9      	b.n	625a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6266:	f002 f982 	bl	856e <sys_clock_tick_get_32>
    626a:	1906      	adds	r6, r0, r4
    626c:	e7cd      	b.n	620a <z_tick_sleep+0x2a>
		return ticks;
    626e:	4620      	mov	r0, r4
    6270:	e7f3      	b.n	625a <z_tick_sleep+0x7a>
    6272:	bf00      	nop
    6274:	20000f70 	.word	0x20000f70
    6278:	20000f9c 	.word	0x20000f9c
    627c:	000082d9 	.word	0x000082d9

00006280 <z_impl_k_sleep>:
{
    6280:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6282:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    6286:	bf08      	it	eq
    6288:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    628c:	d01a      	beq.n	62c4 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    628e:	f7ff ffa7 	bl	61e0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    6292:	4604      	mov	r4, r0
    6294:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    6296:	0169      	lsls	r1, r5, #5
    6298:	0143      	lsls	r3, r0, #5
    629a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    629e:	1a18      	subs	r0, r3, r0
    62a0:	eb62 0305 	sbc.w	r3, r2, r5
    62a4:	009a      	lsls	r2, r3, #2
    62a6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    62aa:	0081      	lsls	r1, r0, #2
    62ac:	4613      	mov	r3, r2
    62ae:	1908      	adds	r0, r1, r4
    62b0:	eb45 0303 	adc.w	r3, r5, r3
    62b4:	00da      	lsls	r2, r3, #3
    62b6:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    62ba:	00c1      	lsls	r1, r0, #3
    62bc:	0bc8      	lsrs	r0, r1, #15
    62be:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    62c2:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    62c4:	4b03      	ldr	r3, [pc, #12]	; (62d4 <z_impl_k_sleep+0x54>)
    62c6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    62c8:	f7ff fe84 	bl	5fd4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    62cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    62d0:	e7f7      	b.n	62c2 <z_impl_k_sleep+0x42>
    62d2:	bf00      	nop
    62d4:	20000f70 	.word	0x20000f70

000062d8 <z_impl_z_current_get>:
}
    62d8:	4b01      	ldr	r3, [pc, #4]	; (62e0 <z_impl_z_current_get+0x8>)
    62da:	6898      	ldr	r0, [r3, #8]
    62dc:	4770      	bx	lr
    62de:	bf00      	nop
    62e0:	20000f70 	.word	0x20000f70

000062e4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    62e4:	b538      	push	{r3, r4, r5, lr}
    62e6:	f04f 0320 	mov.w	r3, #32
    62ea:	f3ef 8511 	mrs	r5, BASEPRI
    62ee:	f383 8812 	msr	BASEPRI_MAX, r3
    62f2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    62f6:	7b43      	ldrb	r3, [r0, #13]
    62f8:	f013 0f08 	tst.w	r3, #8
    62fc:	d004      	beq.n	6308 <z_thread_abort+0x24>
	__asm__ volatile(
    62fe:	f385 8811 	msr	BASEPRI, r5
    6302:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6306:	bd38      	pop	{r3, r4, r5, pc}
    6308:	4604      	mov	r4, r0
	end_thread(thread);
    630a:	f7ff fecb 	bl	60a4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    630e:	4b08      	ldr	r3, [pc, #32]	; (6330 <z_thread_abort+0x4c>)
    6310:	689b      	ldr	r3, [r3, #8]
    6312:	42a3      	cmp	r3, r4
    6314:	d004      	beq.n	6320 <z_thread_abort+0x3c>
    6316:	f385 8811 	msr	BASEPRI, r5
    631a:	f3bf 8f6f 	isb	sy
    631e:	e7f2      	b.n	6306 <z_thread_abort+0x22>
    6320:	f3ef 8305 	mrs	r3, IPSR
    6324:	2b00      	cmp	r3, #0
    6326:	d1f6      	bne.n	6316 <z_thread_abort+0x32>
    6328:	4628      	mov	r0, r5
    632a:	f7fc f94f 	bl	25cc <arch_swap>
	return ret;
    632e:	e7f2      	b.n	6316 <z_thread_abort+0x32>
    6330:	20000f70 	.word	0x20000f70

00006334 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6334:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    6336:	4806      	ldr	r0, [pc, #24]	; (6350 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6338:	4a06      	ldr	r2, [pc, #24]	; (6354 <z_data_copy+0x20>)
    633a:	1a12      	subs	r2, r2, r0
    633c:	4906      	ldr	r1, [pc, #24]	; (6358 <z_data_copy+0x24>)
    633e:	f001 fa77 	bl	7830 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6342:	4a06      	ldr	r2, [pc, #24]	; (635c <z_data_copy+0x28>)
    6344:	4906      	ldr	r1, [pc, #24]	; (6360 <z_data_copy+0x2c>)
    6346:	4807      	ldr	r0, [pc, #28]	; (6364 <z_data_copy+0x30>)
    6348:	f001 fa72 	bl	7830 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    634c:	bd08      	pop	{r3, pc}
    634e:	bf00      	nop
    6350:	20000000 	.word	0x20000000
    6354:	200001c8 	.word	0x200001c8
    6358:	00009498 	.word	0x00009498
    635c:	00000000 	.word	0x00000000
    6360:	00009498 	.word	0x00009498
    6364:	20000000 	.word	0x20000000

00006368 <first>:
	return list->head == list;
    6368:	4b03      	ldr	r3, [pc, #12]	; (6378 <first+0x10>)
    636a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    636c:	4298      	cmp	r0, r3
    636e:	d000      	beq.n	6372 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    6370:	4770      	bx	lr
    6372:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    6374:	e7fc      	b.n	6370 <first+0x8>
    6376:	bf00      	nop
    6378:	200000d8 	.word	0x200000d8

0000637c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    637c:	b130      	cbz	r0, 638c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    637e:	4a04      	ldr	r2, [pc, #16]	; (6390 <next+0x14>)
    6380:	6852      	ldr	r2, [r2, #4]
    6382:	4290      	cmp	r0, r2
    6384:	d001      	beq.n	638a <next+0xe>
    6386:	6800      	ldr	r0, [r0, #0]
    6388:	4770      	bx	lr
    638a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    638c:	4770      	bx	lr
    638e:	bf00      	nop
    6390:	200000d8 	.word	0x200000d8

00006394 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    6394:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6396:	4b04      	ldr	r3, [pc, #16]	; (63a8 <elapsed+0x14>)
    6398:	681b      	ldr	r3, [r3, #0]
    639a:	b10b      	cbz	r3, 63a0 <elapsed+0xc>
    639c:	2000      	movs	r0, #0
}
    639e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    63a0:	f7fd ff10 	bl	41c4 <sys_clock_elapsed>
    63a4:	e7fb      	b.n	639e <elapsed+0xa>
    63a6:	bf00      	nop
    63a8:	20000fa8 	.word	0x20000fa8

000063ac <next_timeout>:

static int32_t next_timeout(void)
{
    63ac:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    63ae:	f7ff ffdb 	bl	6368 <first>
    63b2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    63b4:	f7ff ffee 	bl	6394 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    63b8:	b18c      	cbz	r4, 63de <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    63ba:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    63be:	1a12      	subs	r2, r2, r0
    63c0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    63c4:	2a01      	cmp	r2, #1
    63c6:	f173 0100 	sbcs.w	r1, r3, #0
    63ca:	db11      	blt.n	63f0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    63cc:	4610      	mov	r0, r2
    63ce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    63d2:	f173 0300 	sbcs.w	r3, r3, #0
    63d6:	db04      	blt.n	63e2 <next_timeout+0x36>
    63d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    63dc:	e001      	b.n	63e2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    63de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    63e2:	4b04      	ldr	r3, [pc, #16]	; (63f4 <next_timeout+0x48>)
    63e4:	691b      	ldr	r3, [r3, #16]
    63e6:	b113      	cbz	r3, 63ee <next_timeout+0x42>
    63e8:	4283      	cmp	r3, r0
    63ea:	da00      	bge.n	63ee <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    63ec:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    63ee:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    63f0:	2000      	movs	r0, #0
    63f2:	e7f6      	b.n	63e2 <next_timeout+0x36>
    63f4:	20000f70 	.word	0x20000f70

000063f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    63f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63fc:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    63fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6402:	bf08      	it	eq
    6404:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    6408:	f000 8096 	beq.w	6538 <z_add_timeout+0x140>
    640c:	4682      	mov	sl, r0
    640e:	4614      	mov	r4, r2
    6410:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6412:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    6414:	2300      	movs	r3, #0
	__asm__ volatile(
    6416:	f04f 0220 	mov.w	r2, #32
    641a:	f3ef 8b11 	mrs	fp, BASEPRI
    641e:	f382 8812 	msr	BASEPRI_MAX, r2
    6422:	f3bf 8f6f 	isb	sy
    6426:	e02e      	b.n	6486 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    6428:	2201      	movs	r2, #1
    642a:	2300      	movs	r3, #0
    642c:	e04b      	b.n	64c6 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    642e:	f7ff ffb1 	bl	6394 <elapsed>
    6432:	1822      	adds	r2, r4, r0
    6434:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    6438:	3201      	adds	r2, #1
    643a:	f143 0300 	adc.w	r3, r3, #0
    643e:	f8ca 2010 	str.w	r2, [sl, #16]
    6442:	f8ca 3014 	str.w	r3, [sl, #20]
    6446:	e042      	b.n	64ce <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    6448:	9b00      	ldr	r3, [sp, #0]
    644a:	1ac2      	subs	r2, r0, r3
    644c:	9b01      	ldr	r3, [sp, #4]
    644e:	eb61 0303 	sbc.w	r3, r1, r3
    6452:	f8cc 2010 	str.w	r2, [ip, #16]
    6456:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    645a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    645e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    6462:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    6466:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    646a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    646e:	f1bc 0f00 	cmp.w	ip, #0
    6472:	d049      	beq.n	6508 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6474:	f7ff ff78 	bl	6368 <first>
    6478:	4582      	cmp	sl, r0
    647a:	d050      	beq.n	651e <z_add_timeout+0x126>
	__asm__ volatile(
    647c:	f38b 8811 	msr	BASEPRI, fp
    6480:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6484:	2301      	movs	r3, #1
    6486:	2b00      	cmp	r3, #0
    6488:	d156      	bne.n	6538 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    648a:	f06f 0301 	mvn.w	r3, #1
    648e:	ebb3 0804 	subs.w	r8, r3, r4
    6492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6496:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    649a:	f1b8 0f00 	cmp.w	r8, #0
    649e:	f179 0300 	sbcs.w	r3, r9, #0
    64a2:	dbc4      	blt.n	642e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    64a4:	4a26      	ldr	r2, [pc, #152]	; (6540 <z_add_timeout+0x148>)
    64a6:	6813      	ldr	r3, [r2, #0]
    64a8:	6852      	ldr	r2, [r2, #4]
    64aa:	18e3      	adds	r3, r4, r3
    64ac:	eb45 0202 	adc.w	r2, r5, r2
    64b0:	f06f 0101 	mvn.w	r1, #1
    64b4:	1ace      	subs	r6, r1, r3
    64b6:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    64ba:	4632      	mov	r2, r6
    64bc:	463b      	mov	r3, r7
    64be:	2e01      	cmp	r6, #1
    64c0:	f177 0100 	sbcs.w	r1, r7, #0
    64c4:	dbb0      	blt.n	6428 <z_add_timeout+0x30>
    64c6:	f8ca 2010 	str.w	r2, [sl, #16]
    64ca:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    64ce:	f7ff ff4b 	bl	6368 <first>
    64d2:	4684      	mov	ip, r0
    64d4:	f1bc 0f00 	cmp.w	ip, #0
    64d8:	d0c9      	beq.n	646e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    64da:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    64de:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    64e2:	e9cd 2300 	strd	r2, r3, [sp]
    64e6:	4282      	cmp	r2, r0
    64e8:	418b      	sbcs	r3, r1
    64ea:	dbad      	blt.n	6448 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    64ec:	9b00      	ldr	r3, [sp, #0]
    64ee:	1a1a      	subs	r2, r3, r0
    64f0:	9b01      	ldr	r3, [sp, #4]
    64f2:	eb63 0301 	sbc.w	r3, r3, r1
    64f6:	f8ca 2010 	str.w	r2, [sl, #16]
    64fa:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    64fe:	4660      	mov	r0, ip
    6500:	f7ff ff3c 	bl	637c <next>
    6504:	4684      	mov	ip, r0
    6506:	e7e5      	b.n	64d4 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    6508:	4b0e      	ldr	r3, [pc, #56]	; (6544 <z_add_timeout+0x14c>)
    650a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    650c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    6510:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    6514:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    6518:	f8c3 a004 	str.w	sl, [r3, #4]
}
    651c:	e7aa      	b.n	6474 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    651e:	f7ff ff45 	bl	63ac <next_timeout>

			if (next_time == 0 ||
    6522:	4603      	mov	r3, r0
    6524:	b118      	cbz	r0, 652e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    6526:	4a08      	ldr	r2, [pc, #32]	; (6548 <z_add_timeout+0x150>)
    6528:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    652a:	4282      	cmp	r2, r0
    652c:	d0a6      	beq.n	647c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    652e:	2100      	movs	r1, #0
    6530:	4618      	mov	r0, r3
    6532:	f7fd fe13 	bl	415c <sys_clock_set_timeout>
    6536:	e7a1      	b.n	647c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6538:	b003      	add	sp, #12
    653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    653e:	bf00      	nop
    6540:	20000430 	.word	0x20000430
    6544:	200000d8 	.word	0x200000d8
    6548:	20000f70 	.word	0x20000f70

0000654c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    654e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6550:	f7ff fc06 	bl	5d60 <z_time_slice>
	__asm__ volatile(
    6554:	f04f 0320 	mov.w	r3, #32
    6558:	f3ef 8511 	mrs	r5, BASEPRI
    655c:	f383 8812 	msr	BASEPRI_MAX, r3
    6560:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6564:	4b28      	ldr	r3, [pc, #160]	; (6608 <sys_clock_announce+0xbc>)
    6566:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    6568:	f7ff fefe 	bl	6368 <first>
    656c:	4604      	mov	r4, r0
    656e:	b350      	cbz	r0, 65c6 <sys_clock_announce+0x7a>
    6570:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    6574:	4b24      	ldr	r3, [pc, #144]	; (6608 <sys_clock_announce+0xbc>)
    6576:	681b      	ldr	r3, [r3, #0]
    6578:	17d9      	asrs	r1, r3, #31
    657a:	42b3      	cmp	r3, r6
    657c:	eb71 0207 	sbcs.w	r2, r1, r7
    6580:	db21      	blt.n	65c6 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6582:	4a22      	ldr	r2, [pc, #136]	; (660c <sys_clock_announce+0xc0>)
    6584:	e9d2 0100 	ldrd	r0, r1, [r2]
    6588:	1980      	adds	r0, r0, r6
    658a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    658e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    6592:	1b9b      	subs	r3, r3, r6
    6594:	4a1c      	ldr	r2, [pc, #112]	; (6608 <sys_clock_announce+0xbc>)
    6596:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    6598:	2200      	movs	r2, #0
    659a:	2300      	movs	r3, #0
    659c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    65a0:	4620      	mov	r0, r4
    65a2:	f001 ff6e 	bl	8482 <remove_timeout>
	__asm__ volatile(
    65a6:	f385 8811 	msr	BASEPRI, r5
    65aa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    65ae:	68a3      	ldr	r3, [r4, #8]
    65b0:	4620      	mov	r0, r4
    65b2:	4798      	blx	r3
	__asm__ volatile(
    65b4:	f04f 0320 	mov.w	r3, #32
    65b8:	f3ef 8511 	mrs	r5, BASEPRI
    65bc:	f383 8812 	msr	BASEPRI_MAX, r3
    65c0:	f3bf 8f6f 	isb	sy
    65c4:	e7d0      	b.n	6568 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    65c6:	b144      	cbz	r4, 65da <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    65c8:	4b0f      	ldr	r3, [pc, #60]	; (6608 <sys_clock_announce+0xbc>)
    65ca:	6819      	ldr	r1, [r3, #0]
    65cc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    65d0:	1a52      	subs	r2, r2, r1
    65d2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    65d6:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    65da:	480c      	ldr	r0, [pc, #48]	; (660c <sys_clock_announce+0xc0>)
    65dc:	490a      	ldr	r1, [pc, #40]	; (6608 <sys_clock_announce+0xbc>)
    65de:	680c      	ldr	r4, [r1, #0]
    65e0:	e9d0 2300 	ldrd	r2, r3, [r0]
    65e4:	1912      	adds	r2, r2, r4
    65e6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    65ea:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    65ee:	2400      	movs	r4, #0
    65f0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    65f2:	f7ff fedb 	bl	63ac <next_timeout>
    65f6:	4621      	mov	r1, r4
    65f8:	f7fd fdb0 	bl	415c <sys_clock_set_timeout>
	__asm__ volatile(
    65fc:	f385 8811 	msr	BASEPRI, r5
    6600:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6606:	bf00      	nop
    6608:	20000fa8 	.word	0x20000fa8
    660c:	20000430 	.word	0x20000430

00006610 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6610:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    6612:	2100      	movs	r1, #0
	__asm__ volatile(
    6614:	f04f 0320 	mov.w	r3, #32
    6618:	f3ef 8411 	mrs	r4, BASEPRI
    661c:	f383 8812 	msr	BASEPRI_MAX, r3
    6620:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    6624:	2200      	movs	r2, #0
    6626:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    6628:	b969      	cbnz	r1, 6646 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    662a:	f7fd fdcb 	bl	41c4 <sys_clock_elapsed>
    662e:	4b07      	ldr	r3, [pc, #28]	; (664c <sys_clock_tick_get+0x3c>)
    6630:	e9d3 2300 	ldrd	r2, r3, [r3]
    6634:	1812      	adds	r2, r2, r0
    6636:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    663a:	f384 8811 	msr	BASEPRI, r4
    663e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6642:	2101      	movs	r1, #1
    6644:	e7f0      	b.n	6628 <sys_clock_tick_get+0x18>
	}
	return t;
}
    6646:	4610      	mov	r0, r2
    6648:	4619      	mov	r1, r3
    664a:	bd10      	pop	{r4, pc}
    664c:	20000430 	.word	0x20000430

00006650 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6650:	b570      	push	{r4, r5, r6, lr}
    6652:	4604      	mov	r4, r0
	__asm__ volatile(
    6654:	f04f 0320 	mov.w	r3, #32
    6658:	f3ef 8611 	mrs	r6, BASEPRI
    665c:	f383 8812 	msr	BASEPRI_MAX, r3
    6660:	f3bf 8f6f 	isb	sy
    6664:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6666:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    666a:	ea52 0103 	orrs.w	r1, r2, r3
    666e:	d005      	beq.n	667c <z_timer_expiration_handler+0x2c>
    6670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6674:	bf08      	it	eq
    6676:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    667a:	d127      	bne.n	66cc <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    667c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    667e:	3301      	adds	r3, #1
    6680:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    6682:	6a23      	ldr	r3, [r4, #32]
    6684:	b173      	cbz	r3, 66a4 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    6686:	f386 8811 	msr	BASEPRI, r6
    668a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    668e:	6a23      	ldr	r3, [r4, #32]
    6690:	4620      	mov	r0, r4
    6692:	4798      	blx	r3
	__asm__ volatile(
    6694:	f04f 0320 	mov.w	r3, #32
    6698:	f3ef 8511 	mrs	r5, BASEPRI
    669c:	f383 8812 	msr	BASEPRI_MAX, r3
    66a0:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    66a4:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    66a8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66aa:	42a3      	cmp	r3, r4
    66ac:	d012      	beq.n	66d4 <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    66ae:	b18c      	cbz	r4, 66d4 <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    66b0:	4620      	mov	r0, r4
    66b2:	f001 fdb2 	bl	821a <z_unpend_thread_no_timeout>
    66b6:	2300      	movs	r3, #0
    66b8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    66bc:	f385 8811 	msr	BASEPRI, r5
    66c0:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    66c4:	4620      	mov	r0, r4
    66c6:	f001 fdeb 	bl	82a0 <z_ready_thread>
}
    66ca:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    66cc:	4904      	ldr	r1, [pc, #16]	; (66e0 <z_timer_expiration_handler+0x90>)
    66ce:	f7ff fe93 	bl	63f8 <z_add_timeout>
    66d2:	e7d3      	b.n	667c <z_timer_expiration_handler+0x2c>
    66d4:	f385 8811 	msr	BASEPRI, r5
    66d8:	f3bf 8f6f 	isb	sy
		return;
    66dc:	e7f5      	b.n	66ca <z_timer_expiration_handler+0x7a>
    66de:	bf00      	nop
    66e0:	00006651 	.word	0x00006651

000066e4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    66e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66e8:	b087      	sub	sp, #28
    66ea:	4614      	mov	r4, r2
    66ec:	461d      	mov	r5, r3
    66ee:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    66f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    66f6:	bf08      	it	eq
    66f8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    66fc:	d035      	beq.n	676a <z_impl_k_timer_start+0x86>
    66fe:	4606      	mov	r6, r0
    6700:	4613      	mov	r3, r2
    6702:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6704:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    6708:	bf08      	it	eq
    670a:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
    670e:	d012      	beq.n	6736 <z_impl_k_timer_start+0x52>
    6710:	ea58 0109 	orrs.w	r1, r8, r9
    6714:	d00f      	beq.n	6736 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    6716:	f06f 0701 	mvn.w	r7, #1
    671a:	ebb7 0708 	subs.w	r7, r7, r8
    671e:	9702      	str	r7, [sp, #8]
    6720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6724:	eb61 0709 	sbc.w	r7, r1, r9
    6728:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    672a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    672e:	2800      	cmp	r0, #0
    6730:	f171 0100 	sbcs.w	r1, r1, #0
    6734:	db1c      	blt.n	6770 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6736:	f06f 0101 	mvn.w	r1, #1
    673a:	ebb1 0a03 	subs.w	sl, r1, r3
    673e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6742:	eb61 0b02 	sbc.w	fp, r1, r2
    6746:	f1ba 0f00 	cmp.w	sl, #0
    674a:	f17b 0100 	sbcs.w	r1, fp, #0
    674e:	db23      	blt.n	6798 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    6750:	4630      	mov	r0, r6
    6752:	f001 fead 	bl	84b0 <z_abort_timeout>
	timer->period = period;
    6756:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    675a:	2300      	movs	r3, #0
    675c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    675e:	4622      	mov	r2, r4
    6760:	462b      	mov	r3, r5
    6762:	4917      	ldr	r1, [pc, #92]	; (67c0 <z_impl_k_timer_start+0xdc>)
    6764:	4630      	mov	r0, r6
    6766:	f7ff fe47 	bl	63f8 <z_add_timeout>
		     duration);
}
    676a:	b007      	add	sp, #28
    676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    6770:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
    6774:	9104      	str	r1, [sp, #16]
    6776:	f149 31ff 	adc.w	r1, r9, #4294967295	; 0xffffffff
    677a:	9105      	str	r1, [sp, #20]
    677c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    6780:	4638      	mov	r0, r7
    6782:	4641      	mov	r1, r8
    6784:	2f01      	cmp	r7, #1
    6786:	f178 0700 	sbcs.w	r7, r8, #0
    678a:	db02      	blt.n	6792 <z_impl_k_timer_start+0xae>
    678c:	4680      	mov	r8, r0
    678e:	4689      	mov	r9, r1
    6790:	e7d1      	b.n	6736 <z_impl_k_timer_start+0x52>
    6792:	2001      	movs	r0, #1
    6794:	2100      	movs	r1, #0
    6796:	e7f9      	b.n	678c <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6798:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    679c:	9300      	str	r3, [sp, #0]
    679e:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
    67a2:	9301      	str	r3, [sp, #4]
    67a4:	e9dd 0100 	ldrd	r0, r1, [sp]
    67a8:	4602      	mov	r2, r0
    67aa:	460b      	mov	r3, r1
    67ac:	2800      	cmp	r0, #0
    67ae:	f171 0100 	sbcs.w	r1, r1, #0
    67b2:	db02      	blt.n	67ba <z_impl_k_timer_start+0xd6>
    67b4:	4614      	mov	r4, r2
    67b6:	461d      	mov	r5, r3
    67b8:	e7ca      	b.n	6750 <z_impl_k_timer_start+0x6c>
    67ba:	2200      	movs	r2, #0
    67bc:	4613      	mov	r3, r2
    67be:	e7f9      	b.n	67b4 <z_impl_k_timer_start+0xd0>
    67c0:	00006651 	.word	0x00006651

000067c4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    67c4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    67c6:	4a03      	ldr	r2, [pc, #12]	; (67d4 <boot_banner+0x10>)
    67c8:	4903      	ldr	r1, [pc, #12]	; (67d8 <boot_banner+0x14>)
    67ca:	4804      	ldr	r0, [pc, #16]	; (67dc <boot_banner+0x18>)
    67cc:	f000 fa27 	bl	6c1e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    67d0:	bd08      	pop	{r3, pc}
    67d2:	bf00      	nop
    67d4:	00008a70 	.word	0x00008a70
    67d8:	000093d8 	.word	0x000093d8
    67dc:	000093e8 	.word	0x000093e8

000067e0 <nrf_cc3xx_platform_init_no_rng>:
    67e0:	b510      	push	{r4, lr}
    67e2:	4c0a      	ldr	r4, [pc, #40]	; (680c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    67e4:	6823      	ldr	r3, [r4, #0]
    67e6:	b11b      	cbz	r3, 67f0 <nrf_cc3xx_platform_init_no_rng+0x10>
    67e8:	2301      	movs	r3, #1
    67ea:	6023      	str	r3, [r4, #0]
    67ec:	2000      	movs	r0, #0
    67ee:	bd10      	pop	{r4, pc}
    67f0:	f000 f8d6 	bl	69a0 <CC_LibInitNoRng>
    67f4:	2800      	cmp	r0, #0
    67f6:	d0f7      	beq.n	67e8 <nrf_cc3xx_platform_init_no_rng+0x8>
    67f8:	3801      	subs	r0, #1
    67fa:	2806      	cmp	r0, #6
    67fc:	d803      	bhi.n	6806 <nrf_cc3xx_platform_init_no_rng+0x26>
    67fe:	4b04      	ldr	r3, [pc, #16]	; (6810 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6800:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6804:	bd10      	pop	{r4, pc}
    6806:	4803      	ldr	r0, [pc, #12]	; (6814 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6808:	bd10      	pop	{r4, pc}
    680a:	bf00      	nop
    680c:	20000fac 	.word	0x20000fac
    6810:	00009410 	.word	0x00009410
    6814:	ffff8ffe 	.word	0xffff8ffe

00006818 <nrf_cc3xx_platform_abort>:
    6818:	f3bf 8f4f 	dsb	sy
    681c:	4905      	ldr	r1, [pc, #20]	; (6834 <nrf_cc3xx_platform_abort+0x1c>)
    681e:	4b06      	ldr	r3, [pc, #24]	; (6838 <nrf_cc3xx_platform_abort+0x20>)
    6820:	68ca      	ldr	r2, [r1, #12]
    6822:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6826:	4313      	orrs	r3, r2
    6828:	60cb      	str	r3, [r1, #12]
    682a:	f3bf 8f4f 	dsb	sy
    682e:	bf00      	nop
    6830:	e7fd      	b.n	682e <nrf_cc3xx_platform_abort+0x16>
    6832:	bf00      	nop
    6834:	e000ed00 	.word	0xe000ed00
    6838:	05fa0004 	.word	0x05fa0004

0000683c <CC_PalAbort>:
    683c:	b4f0      	push	{r4, r5, r6, r7}
    683e:	4f09      	ldr	r7, [pc, #36]	; (6864 <CC_PalAbort+0x28>)
    6840:	4e09      	ldr	r6, [pc, #36]	; (6868 <CC_PalAbort+0x2c>)
    6842:	4c0a      	ldr	r4, [pc, #40]	; (686c <CC_PalAbort+0x30>)
    6844:	4a0a      	ldr	r2, [pc, #40]	; (6870 <CC_PalAbort+0x34>)
    6846:	4d0b      	ldr	r5, [pc, #44]	; (6874 <CC_PalAbort+0x38>)
    6848:	490b      	ldr	r1, [pc, #44]	; (6878 <CC_PalAbort+0x3c>)
    684a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    684e:	603b      	str	r3, [r7, #0]
    6850:	6852      	ldr	r2, [r2, #4]
    6852:	6033      	str	r3, [r6, #0]
    6854:	6023      	str	r3, [r4, #0]
    6856:	2400      	movs	r4, #0
    6858:	602b      	str	r3, [r5, #0]
    685a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    685e:	bcf0      	pop	{r4, r5, r6, r7}
    6860:	4710      	bx	r2
    6862:	bf00      	nop
    6864:	5002b400 	.word	0x5002b400
    6868:	5002b404 	.word	0x5002b404
    686c:	5002b408 	.word	0x5002b408
    6870:	200000e0 	.word	0x200000e0
    6874:	5002b40c 	.word	0x5002b40c
    6878:	5002a000 	.word	0x5002a000

0000687c <nrf_cc3xx_platform_set_abort>:
    687c:	e9d0 1200 	ldrd	r1, r2, [r0]
    6880:	4b01      	ldr	r3, [pc, #4]	; (6888 <nrf_cc3xx_platform_set_abort+0xc>)
    6882:	e9c3 1200 	strd	r1, r2, [r3]
    6886:	4770      	bx	lr
    6888:	200000e0 	.word	0x200000e0

0000688c <mutex_free>:
    688c:	b510      	push	{r4, lr}
    688e:	4604      	mov	r4, r0
    6890:	b130      	cbz	r0, 68a0 <mutex_free+0x14>
    6892:	6863      	ldr	r3, [r4, #4]
    6894:	06db      	lsls	r3, r3, #27
    6896:	d502      	bpl.n	689e <mutex_free+0x12>
    6898:	2300      	movs	r3, #0
    689a:	6023      	str	r3, [r4, #0]
    689c:	6063      	str	r3, [r4, #4]
    689e:	bd10      	pop	{r4, pc}
    68a0:	4b02      	ldr	r3, [pc, #8]	; (68ac <mutex_free+0x20>)
    68a2:	4803      	ldr	r0, [pc, #12]	; (68b0 <mutex_free+0x24>)
    68a4:	685b      	ldr	r3, [r3, #4]
    68a6:	4798      	blx	r3
    68a8:	e7f3      	b.n	6892 <mutex_free+0x6>
    68aa:	bf00      	nop
    68ac:	200000e0 	.word	0x200000e0
    68b0:	0000942c 	.word	0x0000942c

000068b4 <mutex_unlock>:
    68b4:	b168      	cbz	r0, 68d2 <mutex_unlock+0x1e>
    68b6:	6843      	ldr	r3, [r0, #4]
    68b8:	b13b      	cbz	r3, 68ca <mutex_unlock+0x16>
    68ba:	06db      	lsls	r3, r3, #27
    68bc:	d507      	bpl.n	68ce <mutex_unlock+0x1a>
    68be:	f3bf 8f5f 	dmb	sy
    68c2:	2300      	movs	r3, #0
    68c4:	6003      	str	r3, [r0, #0]
    68c6:	4618      	mov	r0, r3
    68c8:	4770      	bx	lr
    68ca:	4803      	ldr	r0, [pc, #12]	; (68d8 <mutex_unlock+0x24>)
    68cc:	4770      	bx	lr
    68ce:	4803      	ldr	r0, [pc, #12]	; (68dc <mutex_unlock+0x28>)
    68d0:	4770      	bx	lr
    68d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    68d6:	4770      	bx	lr
    68d8:	ffff8fea 	.word	0xffff8fea
    68dc:	ffff8fe9 	.word	0xffff8fe9

000068e0 <mutex_init>:
    68e0:	b510      	push	{r4, lr}
    68e2:	4604      	mov	r4, r0
    68e4:	b120      	cbz	r0, 68f0 <mutex_init+0x10>
    68e6:	2200      	movs	r2, #0
    68e8:	2311      	movs	r3, #17
    68ea:	6022      	str	r2, [r4, #0]
    68ec:	6063      	str	r3, [r4, #4]
    68ee:	bd10      	pop	{r4, pc}
    68f0:	4801      	ldr	r0, [pc, #4]	; (68f8 <mutex_init+0x18>)
    68f2:	f7ff ffa3 	bl	683c <CC_PalAbort>
    68f6:	e7f6      	b.n	68e6 <mutex_init+0x6>
    68f8:	00009454 	.word	0x00009454

000068fc <mutex_lock>:
    68fc:	b1c0      	cbz	r0, 6930 <mutex_lock+0x34>
    68fe:	6843      	ldr	r3, [r0, #4]
    6900:	b1a3      	cbz	r3, 692c <mutex_lock+0x30>
    6902:	06db      	lsls	r3, r3, #27
    6904:	d510      	bpl.n	6928 <mutex_lock+0x2c>
    6906:	2201      	movs	r2, #1
    6908:	f3bf 8f5b 	dmb	ish
    690c:	e850 3f00 	ldrex	r3, [r0]
    6910:	e840 2100 	strex	r1, r2, [r0]
    6914:	2900      	cmp	r1, #0
    6916:	d1f9      	bne.n	690c <mutex_lock+0x10>
    6918:	f3bf 8f5b 	dmb	ish
    691c:	2b01      	cmp	r3, #1
    691e:	d0f3      	beq.n	6908 <mutex_lock+0xc>
    6920:	f3bf 8f5f 	dmb	sy
    6924:	2000      	movs	r0, #0
    6926:	4770      	bx	lr
    6928:	4803      	ldr	r0, [pc, #12]	; (6938 <mutex_lock+0x3c>)
    692a:	4770      	bx	lr
    692c:	4803      	ldr	r0, [pc, #12]	; (693c <mutex_lock+0x40>)
    692e:	4770      	bx	lr
    6930:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6934:	4770      	bx	lr
    6936:	bf00      	nop
    6938:	ffff8fe9 	.word	0xffff8fe9
    693c:	ffff8fea 	.word	0xffff8fea

00006940 <nrf_cc3xx_platform_set_mutexes>:
    6940:	b570      	push	{r4, r5, r6, lr}
    6942:	e9d0 2300 	ldrd	r2, r3, [r0]
    6946:	4c13      	ldr	r4, [pc, #76]	; (6994 <nrf_cc3xx_platform_set_mutexes+0x54>)
    6948:	4d13      	ldr	r5, [pc, #76]	; (6998 <nrf_cc3xx_platform_set_mutexes+0x58>)
    694a:	e9c4 2300 	strd	r2, r3, [r4]
    694e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    6952:	e9c4 6302 	strd	r6, r3, [r4, #8]
    6956:	4b11      	ldr	r3, [pc, #68]	; (699c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6958:	6808      	ldr	r0, [r1, #0]
    695a:	6018      	str	r0, [r3, #0]
    695c:	6848      	ldr	r0, [r1, #4]
    695e:	6058      	str	r0, [r3, #4]
    6960:	6888      	ldr	r0, [r1, #8]
    6962:	6098      	str	r0, [r3, #8]
    6964:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    6968:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    696c:	60de      	str	r6, [r3, #12]
    696e:	6118      	str	r0, [r3, #16]
    6970:	06cb      	lsls	r3, r1, #27
    6972:	d50d      	bpl.n	6990 <nrf_cc3xx_platform_set_mutexes+0x50>
    6974:	2300      	movs	r3, #0
    6976:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    697a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    697e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    6982:	4790      	blx	r2
    6984:	6823      	ldr	r3, [r4, #0]
    6986:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    698a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    698e:	4718      	bx	r3
    6990:	bd70      	pop	{r4, r5, r6, pc}
    6992:	bf00      	nop
    6994:	200000f0 	.word	0x200000f0
    6998:	20000fcc 	.word	0x20000fcc
    699c:	20000100 	.word	0x20000100

000069a0 <CC_LibInitNoRng>:
    69a0:	b510      	push	{r4, lr}
    69a2:	f000 f833 	bl	6a0c <CC_HalInit>
    69a6:	b120      	cbz	r0, 69b2 <CC_LibInitNoRng+0x12>
    69a8:	2403      	movs	r4, #3
    69aa:	f000 f867 	bl	6a7c <CC_PalTerminate>
    69ae:	4620      	mov	r0, r4
    69b0:	bd10      	pop	{r4, pc}
    69b2:	f000 f835 	bl	6a20 <CC_PalInit>
    69b6:	b990      	cbnz	r0, 69de <CC_LibInitNoRng+0x3e>
    69b8:	f000 f8b0 	bl	6b1c <CC_PalPowerSaveModeSelect>
    69bc:	b990      	cbnz	r0, 69e4 <CC_LibInitNoRng+0x44>
    69be:	4b0f      	ldr	r3, [pc, #60]	; (69fc <CC_LibInitNoRng+0x5c>)
    69c0:	681b      	ldr	r3, [r3, #0]
    69c2:	0e1b      	lsrs	r3, r3, #24
    69c4:	2bf0      	cmp	r3, #240	; 0xf0
    69c6:	d108      	bne.n	69da <CC_LibInitNoRng+0x3a>
    69c8:	4a0d      	ldr	r2, [pc, #52]	; (6a00 <CC_LibInitNoRng+0x60>)
    69ca:	4b0e      	ldr	r3, [pc, #56]	; (6a04 <CC_LibInitNoRng+0x64>)
    69cc:	6812      	ldr	r2, [r2, #0]
    69ce:	429a      	cmp	r2, r3
    69d0:	d00a      	beq.n	69e8 <CC_LibInitNoRng+0x48>
    69d2:	2407      	movs	r4, #7
    69d4:	f000 f81c 	bl	6a10 <CC_HalTerminate>
    69d8:	e7e7      	b.n	69aa <CC_LibInitNoRng+0xa>
    69da:	2406      	movs	r4, #6
    69dc:	e7fa      	b.n	69d4 <CC_LibInitNoRng+0x34>
    69de:	2404      	movs	r4, #4
    69e0:	4620      	mov	r0, r4
    69e2:	bd10      	pop	{r4, pc}
    69e4:	2400      	movs	r4, #0
    69e6:	e7f5      	b.n	69d4 <CC_LibInitNoRng+0x34>
    69e8:	2001      	movs	r0, #1
    69ea:	f000 f897 	bl	6b1c <CC_PalPowerSaveModeSelect>
    69ee:	4604      	mov	r4, r0
    69f0:	2800      	cmp	r0, #0
    69f2:	d1f7      	bne.n	69e4 <CC_LibInitNoRng+0x44>
    69f4:	4b04      	ldr	r3, [pc, #16]	; (6a08 <CC_LibInitNoRng+0x68>)
    69f6:	6018      	str	r0, [r3, #0]
    69f8:	e7d9      	b.n	69ae <CC_LibInitNoRng+0xe>
    69fa:	bf00      	nop
    69fc:	5002b928 	.word	0x5002b928
    6a00:	5002ba24 	.word	0x5002ba24
    6a04:	20e00000 	.word	0x20e00000
    6a08:	5002ba0c 	.word	0x5002ba0c

00006a0c <CC_HalInit>:
    6a0c:	2000      	movs	r0, #0
    6a0e:	4770      	bx	lr

00006a10 <CC_HalTerminate>:
    6a10:	2000      	movs	r0, #0
    6a12:	4770      	bx	lr

00006a14 <CC_HalMaskInterrupt>:
    6a14:	4b01      	ldr	r3, [pc, #4]	; (6a1c <CC_HalMaskInterrupt+0x8>)
    6a16:	6018      	str	r0, [r3, #0]
    6a18:	4770      	bx	lr
    6a1a:	bf00      	nop
    6a1c:	5002ba04 	.word	0x5002ba04

00006a20 <CC_PalInit>:
    6a20:	b510      	push	{r4, lr}
    6a22:	4811      	ldr	r0, [pc, #68]	; (6a68 <CC_PalInit+0x48>)
    6a24:	f000 f848 	bl	6ab8 <CC_PalMutexCreate>
    6a28:	b100      	cbz	r0, 6a2c <CC_PalInit+0xc>
    6a2a:	bd10      	pop	{r4, pc}
    6a2c:	480f      	ldr	r0, [pc, #60]	; (6a6c <CC_PalInit+0x4c>)
    6a2e:	f000 f843 	bl	6ab8 <CC_PalMutexCreate>
    6a32:	2800      	cmp	r0, #0
    6a34:	d1f9      	bne.n	6a2a <CC_PalInit+0xa>
    6a36:	4c0e      	ldr	r4, [pc, #56]	; (6a70 <CC_PalInit+0x50>)
    6a38:	4620      	mov	r0, r4
    6a3a:	f000 f83d 	bl	6ab8 <CC_PalMutexCreate>
    6a3e:	2800      	cmp	r0, #0
    6a40:	d1f3      	bne.n	6a2a <CC_PalInit+0xa>
    6a42:	4b0c      	ldr	r3, [pc, #48]	; (6a74 <CC_PalInit+0x54>)
    6a44:	480c      	ldr	r0, [pc, #48]	; (6a78 <CC_PalInit+0x58>)
    6a46:	601c      	str	r4, [r3, #0]
    6a48:	f000 f836 	bl	6ab8 <CC_PalMutexCreate>
    6a4c:	4601      	mov	r1, r0
    6a4e:	2800      	cmp	r0, #0
    6a50:	d1eb      	bne.n	6a2a <CC_PalInit+0xa>
    6a52:	f000 f82d 	bl	6ab0 <CC_PalDmaInit>
    6a56:	4604      	mov	r4, r0
    6a58:	b108      	cbz	r0, 6a5e <CC_PalInit+0x3e>
    6a5a:	4620      	mov	r0, r4
    6a5c:	bd10      	pop	{r4, pc}
    6a5e:	f000 f83f 	bl	6ae0 <CC_PalPowerSaveModeInit>
    6a62:	4620      	mov	r0, r4
    6a64:	e7fa      	b.n	6a5c <CC_PalInit+0x3c>
    6a66:	bf00      	nop
    6a68:	20000138 	.word	0x20000138
    6a6c:	2000012c 	.word	0x2000012c
    6a70:	20000134 	.word	0x20000134
    6a74:	2000013c 	.word	0x2000013c
    6a78:	20000130 	.word	0x20000130

00006a7c <CC_PalTerminate>:
    6a7c:	b508      	push	{r3, lr}
    6a7e:	4808      	ldr	r0, [pc, #32]	; (6aa0 <CC_PalTerminate+0x24>)
    6a80:	f000 f824 	bl	6acc <CC_PalMutexDestroy>
    6a84:	4807      	ldr	r0, [pc, #28]	; (6aa4 <CC_PalTerminate+0x28>)
    6a86:	f000 f821 	bl	6acc <CC_PalMutexDestroy>
    6a8a:	4807      	ldr	r0, [pc, #28]	; (6aa8 <CC_PalTerminate+0x2c>)
    6a8c:	f000 f81e 	bl	6acc <CC_PalMutexDestroy>
    6a90:	4806      	ldr	r0, [pc, #24]	; (6aac <CC_PalTerminate+0x30>)
    6a92:	f000 f81b 	bl	6acc <CC_PalMutexDestroy>
    6a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6a9a:	f000 b80b 	b.w	6ab4 <CC_PalDmaTerminate>
    6a9e:	bf00      	nop
    6aa0:	20000138 	.word	0x20000138
    6aa4:	2000012c 	.word	0x2000012c
    6aa8:	20000134 	.word	0x20000134
    6aac:	20000130 	.word	0x20000130

00006ab0 <CC_PalDmaInit>:
    6ab0:	2000      	movs	r0, #0
    6ab2:	4770      	bx	lr

00006ab4 <CC_PalDmaTerminate>:
    6ab4:	4770      	bx	lr
    6ab6:	bf00      	nop

00006ab8 <CC_PalMutexCreate>:
    6ab8:	b508      	push	{r3, lr}
    6aba:	4b03      	ldr	r3, [pc, #12]	; (6ac8 <CC_PalMutexCreate+0x10>)
    6abc:	6802      	ldr	r2, [r0, #0]
    6abe:	681b      	ldr	r3, [r3, #0]
    6ac0:	6810      	ldr	r0, [r2, #0]
    6ac2:	4798      	blx	r3
    6ac4:	2000      	movs	r0, #0
    6ac6:	bd08      	pop	{r3, pc}
    6ac8:	200000f0 	.word	0x200000f0

00006acc <CC_PalMutexDestroy>:
    6acc:	b508      	push	{r3, lr}
    6ace:	4b03      	ldr	r3, [pc, #12]	; (6adc <CC_PalMutexDestroy+0x10>)
    6ad0:	6802      	ldr	r2, [r0, #0]
    6ad2:	685b      	ldr	r3, [r3, #4]
    6ad4:	6810      	ldr	r0, [r2, #0]
    6ad6:	4798      	blx	r3
    6ad8:	2000      	movs	r0, #0
    6ada:	bd08      	pop	{r3, pc}
    6adc:	200000f0 	.word	0x200000f0

00006ae0 <CC_PalPowerSaveModeInit>:
    6ae0:	b570      	push	{r4, r5, r6, lr}
    6ae2:	4c09      	ldr	r4, [pc, #36]	; (6b08 <CC_PalPowerSaveModeInit+0x28>)
    6ae4:	4d09      	ldr	r5, [pc, #36]	; (6b0c <CC_PalPowerSaveModeInit+0x2c>)
    6ae6:	6920      	ldr	r0, [r4, #16]
    6ae8:	68ab      	ldr	r3, [r5, #8]
    6aea:	4798      	blx	r3
    6aec:	b118      	cbz	r0, 6af6 <CC_PalPowerSaveModeInit+0x16>
    6aee:	4b08      	ldr	r3, [pc, #32]	; (6b10 <CC_PalPowerSaveModeInit+0x30>)
    6af0:	4808      	ldr	r0, [pc, #32]	; (6b14 <CC_PalPowerSaveModeInit+0x34>)
    6af2:	685b      	ldr	r3, [r3, #4]
    6af4:	4798      	blx	r3
    6af6:	4a08      	ldr	r2, [pc, #32]	; (6b18 <CC_PalPowerSaveModeInit+0x38>)
    6af8:	68eb      	ldr	r3, [r5, #12]
    6afa:	6920      	ldr	r0, [r4, #16]
    6afc:	2100      	movs	r1, #0
    6afe:	6011      	str	r1, [r2, #0]
    6b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b04:	4718      	bx	r3
    6b06:	bf00      	nop
    6b08:	20000100 	.word	0x20000100
    6b0c:	200000f0 	.word	0x200000f0
    6b10:	200000e0 	.word	0x200000e0
    6b14:	00009478 	.word	0x00009478
    6b18:	20000fc0 	.word	0x20000fc0

00006b1c <CC_PalPowerSaveModeSelect>:
    6b1c:	b570      	push	{r4, r5, r6, lr}
    6b1e:	4d1a      	ldr	r5, [pc, #104]	; (6b88 <CC_PalPowerSaveModeSelect+0x6c>)
    6b20:	4e1a      	ldr	r6, [pc, #104]	; (6b8c <CC_PalPowerSaveModeSelect+0x70>)
    6b22:	4604      	mov	r4, r0
    6b24:	68b2      	ldr	r2, [r6, #8]
    6b26:	6928      	ldr	r0, [r5, #16]
    6b28:	4790      	blx	r2
    6b2a:	b9f0      	cbnz	r0, 6b6a <CC_PalPowerSaveModeSelect+0x4e>
    6b2c:	b15c      	cbz	r4, 6b46 <CC_PalPowerSaveModeSelect+0x2a>
    6b2e:	4c18      	ldr	r4, [pc, #96]	; (6b90 <CC_PalPowerSaveModeSelect+0x74>)
    6b30:	6823      	ldr	r3, [r4, #0]
    6b32:	b1ab      	cbz	r3, 6b60 <CC_PalPowerSaveModeSelect+0x44>
    6b34:	2b01      	cmp	r3, #1
    6b36:	d01a      	beq.n	6b6e <CC_PalPowerSaveModeSelect+0x52>
    6b38:	3b01      	subs	r3, #1
    6b3a:	6023      	str	r3, [r4, #0]
    6b3c:	6928      	ldr	r0, [r5, #16]
    6b3e:	68f3      	ldr	r3, [r6, #12]
    6b40:	4798      	blx	r3
    6b42:	2000      	movs	r0, #0
    6b44:	bd70      	pop	{r4, r5, r6, pc}
    6b46:	4c12      	ldr	r4, [pc, #72]	; (6b90 <CC_PalPowerSaveModeSelect+0x74>)
    6b48:	6821      	ldr	r1, [r4, #0]
    6b4a:	b939      	cbnz	r1, 6b5c <CC_PalPowerSaveModeSelect+0x40>
    6b4c:	4b11      	ldr	r3, [pc, #68]	; (6b94 <CC_PalPowerSaveModeSelect+0x78>)
    6b4e:	4a12      	ldr	r2, [pc, #72]	; (6b98 <CC_PalPowerSaveModeSelect+0x7c>)
    6b50:	2001      	movs	r0, #1
    6b52:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    6b56:	6813      	ldr	r3, [r2, #0]
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d1fc      	bne.n	6b56 <CC_PalPowerSaveModeSelect+0x3a>
    6b5c:	3101      	adds	r1, #1
    6b5e:	6021      	str	r1, [r4, #0]
    6b60:	68f3      	ldr	r3, [r6, #12]
    6b62:	6928      	ldr	r0, [r5, #16]
    6b64:	4798      	blx	r3
    6b66:	2000      	movs	r0, #0
    6b68:	bd70      	pop	{r4, r5, r6, pc}
    6b6a:	480c      	ldr	r0, [pc, #48]	; (6b9c <CC_PalPowerSaveModeSelect+0x80>)
    6b6c:	bd70      	pop	{r4, r5, r6, pc}
    6b6e:	4a0a      	ldr	r2, [pc, #40]	; (6b98 <CC_PalPowerSaveModeSelect+0x7c>)
    6b70:	6813      	ldr	r3, [r2, #0]
    6b72:	2b00      	cmp	r3, #0
    6b74:	d1fc      	bne.n	6b70 <CC_PalPowerSaveModeSelect+0x54>
    6b76:	4a07      	ldr	r2, [pc, #28]	; (6b94 <CC_PalPowerSaveModeSelect+0x78>)
    6b78:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6b7c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6b80:	f7ff ff48 	bl	6a14 <CC_HalMaskInterrupt>
    6b84:	6823      	ldr	r3, [r4, #0]
    6b86:	e7d7      	b.n	6b38 <CC_PalPowerSaveModeSelect+0x1c>
    6b88:	20000100 	.word	0x20000100
    6b8c:	200000f0 	.word	0x200000f0
    6b90:	20000fc0 	.word	0x20000fc0
    6b94:	5002a000 	.word	0x5002a000
    6b98:	5002b910 	.word	0x5002b910
    6b9c:	ffff8fe9 	.word	0xffff8fe9

00006ba0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6ba0:	4770      	bx	lr

00006ba2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6ba2:	4602      	mov	r2, r0
    6ba4:	b158      	cbz	r0, 6bbe <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6ba6:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6ba8:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6bac:	2b01      	cmp	r3, #1
    6bae:	d003      	beq.n	6bb8 <sys_notify_validate+0x16>
    6bb0:	2b03      	cmp	r3, #3
    6bb2:	d107      	bne.n	6bc4 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6bb4:	6803      	ldr	r3, [r0, #0]
    6bb6:	b143      	cbz	r3, 6bca <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6bb8:	2000      	movs	r0, #0
    6bba:	6090      	str	r0, [r2, #8]
    6bbc:	4770      	bx	lr
		return -EINVAL;
    6bbe:	f06f 0015 	mvn.w	r0, #21
    6bc2:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    6bc4:	f06f 0015 	mvn.w	r0, #21
    6bc8:	4770      	bx	lr
			rv = -EINVAL;
    6bca:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6bce:	4770      	bx	lr

00006bd0 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    6bd0:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6bd2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6bd4:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6bd8:	6081      	str	r1, [r0, #8]
	switch (method) {
    6bda:	2a03      	cmp	r2, #3
    6bdc:	d103      	bne.n	6be6 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6bde:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6be0:	2200      	movs	r2, #0
    6be2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6be4:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    6be6:	2000      	movs	r0, #0
    6be8:	e7fa      	b.n	6be0 <sys_notify_finalize+0x10>

00006bea <arch_printk_char_out>:
}
    6bea:	2000      	movs	r0, #0
    6bec:	4770      	bx	lr

00006bee <str_out>:
{
    6bee:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6bf0:	680c      	ldr	r4, [r1, #0]
    6bf2:	b154      	cbz	r4, 6c0a <str_out+0x1c>
    6bf4:	688a      	ldr	r2, [r1, #8]
    6bf6:	684b      	ldr	r3, [r1, #4]
    6bf8:	429a      	cmp	r2, r3
    6bfa:	da06      	bge.n	6c0a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    6bfc:	3b01      	subs	r3, #1
    6bfe:	429a      	cmp	r2, r3
    6c00:	d008      	beq.n	6c14 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    6c02:	1c53      	adds	r3, r2, #1
    6c04:	608b      	str	r3, [r1, #8]
    6c06:	54a0      	strb	r0, [r4, r2]
    6c08:	e002      	b.n	6c10 <str_out+0x22>
		ctx->count++;
    6c0a:	688b      	ldr	r3, [r1, #8]
    6c0c:	3301      	adds	r3, #1
    6c0e:	608b      	str	r3, [r1, #8]
}
    6c10:	bc10      	pop	{r4}
    6c12:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    6c14:	1c53      	adds	r3, r2, #1
    6c16:	608b      	str	r3, [r1, #8]
    6c18:	2300      	movs	r3, #0
    6c1a:	54a3      	strb	r3, [r4, r2]
    6c1c:	e7f8      	b.n	6c10 <str_out+0x22>

00006c1e <printk>:
{
    6c1e:	b40f      	push	{r0, r1, r2, r3}
    6c20:	b500      	push	{lr}
    6c22:	b083      	sub	sp, #12
    6c24:	a904      	add	r1, sp, #16
    6c26:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    6c2a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    6c2c:	f7f9 fce2 	bl	5f4 <vprintk>
}
    6c30:	b003      	add	sp, #12
    6c32:	f85d eb04 	ldr.w	lr, [sp], #4
    6c36:	b004      	add	sp, #16
    6c38:	4770      	bx	lr

00006c3a <snprintk>:
{
    6c3a:	b40c      	push	{r2, r3}
    6c3c:	b500      	push	{lr}
    6c3e:	b083      	sub	sp, #12
    6c40:	ab04      	add	r3, sp, #16
    6c42:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    6c46:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    6c48:	f7f9 fce4 	bl	614 <vsnprintk>
}
    6c4c:	b003      	add	sp, #12
    6c4e:	f85d eb04 	ldr.w	lr, [sp], #4
    6c52:	b002      	add	sp, #8
    6c54:	4770      	bx	lr

00006c56 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    6c56:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6c5a:	8b01      	ldrh	r1, [r0, #24]
    6c5c:	f021 0107 	bic.w	r1, r1, #7
    6c60:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    6c62:	8301      	strh	r1, [r0, #24]
}
    6c64:	4770      	bx	lr

00006c66 <notify_monitors>:
{
    6c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c6a:	4606      	mov	r6, r0
    6c6c:	460f      	mov	r7, r1
    6c6e:	4690      	mov	r8, r2
	return list->head;
    6c70:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    6c72:	b119      	cbz	r1, 6c7c <notify_monitors+0x16>
    6c74:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    6c76:	b131      	cbz	r1, 6c86 <notify_monitors+0x20>
	return node->next;
    6c78:	680c      	ldr	r4, [r1, #0]
    6c7a:	e004      	b.n	6c86 <notify_monitors+0x20>
    6c7c:	460c      	mov	r4, r1
    6c7e:	e002      	b.n	6c86 <notify_monitors+0x20>
    6c80:	4623      	mov	r3, r4
    6c82:	4621      	mov	r1, r4
    6c84:	461c      	mov	r4, r3
    6c86:	b159      	cbz	r1, 6ca0 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    6c88:	684d      	ldr	r5, [r1, #4]
    6c8a:	4643      	mov	r3, r8
    6c8c:	463a      	mov	r2, r7
    6c8e:	4630      	mov	r0, r6
    6c90:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    6c92:	2c00      	cmp	r4, #0
    6c94:	d0f4      	beq.n	6c80 <notify_monitors+0x1a>
    6c96:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    6c98:	2c00      	cmp	r4, #0
    6c9a:	d0f2      	beq.n	6c82 <notify_monitors+0x1c>
	return node->next;
    6c9c:	6823      	ldr	r3, [r4, #0]
    6c9e:	e7f0      	b.n	6c82 <notify_monitors+0x1c>
}
    6ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006ca4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6ca4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6ca6:	f013 0307 	ands.w	r3, r3, #7
    6caa:	d103      	bne.n	6cb4 <process_recheck+0x10>
	return list->head;
    6cac:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    6cae:	b10a      	cbz	r2, 6cb4 <process_recheck+0x10>
		evt = EVT_START;
    6cb0:	2003      	movs	r0, #3
    6cb2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6cb4:	2b02      	cmp	r3, #2
    6cb6:	d003      	beq.n	6cc0 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    6cb8:	2b01      	cmp	r3, #1
    6cba:	d006      	beq.n	6cca <process_recheck+0x26>
	int evt = EVT_NOP;
    6cbc:	2000      	movs	r0, #0
    6cbe:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    6cc0:	8b42      	ldrh	r2, [r0, #26]
    6cc2:	2a00      	cmp	r2, #0
    6cc4:	d1f8      	bne.n	6cb8 <process_recheck+0x14>
		evt = EVT_STOP;
    6cc6:	2004      	movs	r0, #4
    6cc8:	4770      	bx	lr
    6cca:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    6ccc:	b10b      	cbz	r3, 6cd2 <process_recheck+0x2e>
		evt = EVT_RESET;
    6cce:	2005      	movs	r0, #5
}
    6cd0:	4770      	bx	lr
	int evt = EVT_NOP;
    6cd2:	2000      	movs	r0, #0
    6cd4:	4770      	bx	lr

00006cd6 <process_complete>:
{
    6cd6:	b538      	push	{r3, r4, r5, lr}
    6cd8:	4604      	mov	r4, r0
    6cda:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6cdc:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    6cde:	2a00      	cmp	r2, #0
    6ce0:	db07      	blt.n	6cf2 <process_complete+0x1c>
    6ce2:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    6ce6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    6ce8:	2a01      	cmp	r2, #1
    6cea:	d90e      	bls.n	6d0a <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    6cec:	2b04      	cmp	r3, #4
    6cee:	d032      	beq.n	6d56 <process_complete+0x80>
}
    6cf0:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    6cf2:	e9d0 0100 	ldrd	r0, r1, [r0]
    6cf6:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    6cfa:	2300      	movs	r3, #0
    6cfc:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    6cfe:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    6d00:	2101      	movs	r1, #1
    6d02:	4620      	mov	r0, r4
    6d04:	f7ff ffa7 	bl	6c56 <set_state>
    6d08:	e7f2      	b.n	6cf0 <process_complete+0x1a>
		*clients = mgr->clients;
    6d0a:	e9d0 0100 	ldrd	r0, r1, [r0]
    6d0e:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    6d12:	2200      	movs	r2, #0
    6d14:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    6d16:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    6d18:	2b06      	cmp	r3, #6
    6d1a:	d117      	bne.n	6d4c <process_complete+0x76>
	return list->head;
    6d1c:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6d1e:	b13b      	cbz	r3, 6d30 <process_complete+0x5a>
				mgr->refs += 1U;
    6d20:	8b62      	ldrh	r2, [r4, #26]
    6d22:	3201      	adds	r2, #1
    6d24:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    6d26:	2b00      	cmp	r3, #0
    6d28:	d0f9      	beq.n	6d1e <process_complete+0x48>
	return node->next;
    6d2a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	d1f6      	bne.n	6d1e <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    6d30:	2102      	movs	r1, #2
    6d32:	4620      	mov	r0, r4
    6d34:	f7ff ff8f 	bl	6c56 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    6d38:	4620      	mov	r0, r4
    6d3a:	f7ff ffb3 	bl	6ca4 <process_recheck>
    6d3e:	2800      	cmp	r0, #0
    6d40:	d0d6      	beq.n	6cf0 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6d42:	8b23      	ldrh	r3, [r4, #24]
    6d44:	f043 0320 	orr.w	r3, r3, #32
    6d48:	8323      	strh	r3, [r4, #24]
    6d4a:	e7d1      	b.n	6cf0 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    6d4c:	2100      	movs	r1, #0
    6d4e:	4620      	mov	r0, r4
    6d50:	f7ff ff81 	bl	6c56 <set_state>
    6d54:	e7f0      	b.n	6d38 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    6d56:	2100      	movs	r1, #0
    6d58:	f7ff ff7d 	bl	6c56 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    6d5c:	4620      	mov	r0, r4
    6d5e:	f7ff ffa1 	bl	6ca4 <process_recheck>
    6d62:	2800      	cmp	r0, #0
    6d64:	d0c4      	beq.n	6cf0 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6d66:	8b23      	ldrh	r3, [r4, #24]
    6d68:	f043 0320 	orr.w	r3, r3, #32
    6d6c:	8323      	strh	r3, [r4, #24]
}
    6d6e:	e7bf      	b.n	6cf0 <process_complete+0x1a>

00006d70 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    6d70:	b158      	cbz	r0, 6d8a <validate_args+0x1a>
{
    6d72:	b510      	push	{r4, lr}
    6d74:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6d76:	b159      	cbz	r1, 6d90 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    6d78:	1d08      	adds	r0, r1, #4
    6d7a:	f7ff ff12 	bl	6ba2 <sys_notify_validate>
	if ((rv == 0)
    6d7e:	b918      	cbnz	r0, 6d88 <validate_args+0x18>
	    && ((cli->notify.flags
    6d80:	68a3      	ldr	r3, [r4, #8]
    6d82:	f033 0303 	bics.w	r3, r3, #3
    6d86:	d106      	bne.n	6d96 <validate_args+0x26>
}
    6d88:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6d8a:	f06f 0015 	mvn.w	r0, #21
}
    6d8e:	4770      	bx	lr
		return -EINVAL;
    6d90:	f06f 0015 	mvn.w	r0, #21
    6d94:	e7f8      	b.n	6d88 <validate_args+0x18>
		rv = -EINVAL;
    6d96:	f06f 0015 	mvn.w	r0, #21
    6d9a:	e7f5      	b.n	6d88 <validate_args+0x18>

00006d9c <notify_one>:
{
    6d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6da0:	4607      	mov	r7, r0
    6da2:	460c      	mov	r4, r1
    6da4:	4616      	mov	r6, r2
    6da6:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6da8:	4619      	mov	r1, r3
    6daa:	1d20      	adds	r0, r4, #4
    6dac:	f7ff ff10 	bl	6bd0 <sys_notify_finalize>
	if (cb) {
    6db0:	b128      	cbz	r0, 6dbe <notify_one+0x22>
    6db2:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    6db4:	462b      	mov	r3, r5
    6db6:	4632      	mov	r2, r6
    6db8:	4621      	mov	r1, r4
    6dba:	4638      	mov	r0, r7
    6dbc:	47c0      	blx	r8
}
    6dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006dc2 <notify_all>:
{
    6dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6dc6:	4681      	mov	r9, r0
    6dc8:	460c      	mov	r4, r1
    6dca:	4690      	mov	r8, r2
    6dcc:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    6dce:	e005      	b.n	6ddc <notify_all+0x1a>
	list->tail = node;
    6dd0:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    6dd2:	463b      	mov	r3, r7
    6dd4:	4642      	mov	r2, r8
    6dd6:	4648      	mov	r0, r9
    6dd8:	f7ff ffe0 	bl	6d9c <notify_one>
	return list->head;
    6ddc:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    6dde:	b129      	cbz	r1, 6dec <notify_all+0x2a>
	return node->next;
    6de0:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    6de2:	6025      	str	r5, [r4, #0]
	return list->tail;
    6de4:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6de6:	428e      	cmp	r6, r1
    6de8:	d1f3      	bne.n	6dd2 <notify_all+0x10>
    6dea:	e7f1      	b.n	6dd0 <notify_all+0xe>
}
    6dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006df0 <transition_complete>:
{
    6df0:	b510      	push	{r4, lr}
	__asm__ volatile(
    6df2:	f04f 0420 	mov.w	r4, #32
    6df6:	f3ef 8211 	mrs	r2, BASEPRI
    6dfa:	f384 8812 	msr	BASEPRI_MAX, r4
    6dfe:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6e02:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    6e04:	2101      	movs	r1, #1
    6e06:	f7f9 fc1b 	bl	640 <process_event>
}
    6e0a:	bd10      	pop	{r4, pc}

00006e0c <onoff_manager_init>:
	if ((mgr == NULL)
    6e0c:	4603      	mov	r3, r0
    6e0e:	b168      	cbz	r0, 6e2c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6e10:	b179      	cbz	r1, 6e32 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    6e12:	680a      	ldr	r2, [r1, #0]
    6e14:	b182      	cbz	r2, 6e38 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    6e16:	684a      	ldr	r2, [r1, #4]
    6e18:	b18a      	cbz	r2, 6e3e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6e1a:	2000      	movs	r0, #0
    6e1c:	6018      	str	r0, [r3, #0]
    6e1e:	6058      	str	r0, [r3, #4]
    6e20:	6098      	str	r0, [r3, #8]
    6e22:	60d8      	str	r0, [r3, #12]
    6e24:	6158      	str	r0, [r3, #20]
    6e26:	6198      	str	r0, [r3, #24]
    6e28:	6119      	str	r1, [r3, #16]
	return 0;
    6e2a:	4770      	bx	lr
		return -EINVAL;
    6e2c:	f06f 0015 	mvn.w	r0, #21
    6e30:	4770      	bx	lr
    6e32:	f06f 0015 	mvn.w	r0, #21
    6e36:	4770      	bx	lr
    6e38:	f06f 0015 	mvn.w	r0, #21
    6e3c:	4770      	bx	lr
    6e3e:	f06f 0015 	mvn.w	r0, #21
}
    6e42:	4770      	bx	lr

00006e44 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e46:	4604      	mov	r4, r0
    6e48:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6e4a:	f7ff ff91 	bl	6d70 <validate_args>

	if (rv < 0) {
    6e4e:	1e06      	subs	r6, r0, #0
    6e50:	db37      	blt.n	6ec2 <onoff_request+0x7e>
    6e52:	f04f 0320 	mov.w	r3, #32
    6e56:	f3ef 8211 	mrs	r2, BASEPRI
    6e5a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e5e:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6e62:	8b25      	ldrh	r5, [r4, #24]
    6e64:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6e68:	8b63      	ldrh	r3, [r4, #26]
    6e6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e6e:	428b      	cmp	r3, r1
    6e70:	d02f      	beq.n	6ed2 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    6e72:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    6e74:	2d02      	cmp	r5, #2
    6e76:	d00c      	beq.n	6e92 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    6e78:	b18d      	cbz	r5, 6e9e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    6e7a:	2d04      	cmp	r5, #4
    6e7c:	d00f      	beq.n	6e9e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    6e7e:	2d06      	cmp	r5, #6
    6e80:	d00d      	beq.n	6e9e <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    6e82:	2d05      	cmp	r5, #5
    6e84:	d01f      	beq.n	6ec6 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    6e86:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    6e8a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6e8c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6e8e:	4608      	mov	r0, r1
    6e90:	e00a      	b.n	6ea8 <onoff_request+0x64>
		mgr->refs += 1U;
    6e92:	3301      	adds	r3, #1
    6e94:	8363      	strh	r3, [r4, #26]
		notify = true;
    6e96:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    6e98:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    6e9a:	4618      	mov	r0, r3
    6e9c:	e004      	b.n	6ea8 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    6e9e:	fab5 f385 	clz	r3, r5
    6ea2:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    6ea4:	2100      	movs	r1, #0
		add_client = true;
    6ea6:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    6ea8:	b128      	cbz	r0, 6eb6 <onoff_request+0x72>
	parent->next = child;
    6eaa:	2000      	movs	r0, #0
    6eac:	6038      	str	r0, [r7, #0]
	return list->tail;
    6eae:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    6eb0:	b1a8      	cbz	r0, 6ede <onoff_request+0x9a>
	parent->next = child;
    6eb2:	6007      	str	r7, [r0, #0]
	list->tail = node;
    6eb4:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    6eb6:	b9ab      	cbnz	r3, 6ee4 <onoff_request+0xa0>
	__asm__ volatile(
    6eb8:	f382 8811 	msr	BASEPRI, r2
    6ebc:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6ec0:	b9a9      	cbnz	r1, 6eee <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    6ec2:	4630      	mov	r0, r6
    6ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    6ec6:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    6eca:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6ecc:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6ece:	4608      	mov	r0, r1
    6ed0:	e7ea      	b.n	6ea8 <onoff_request+0x64>
		rv = -EAGAIN;
    6ed2:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    6ed6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6ed8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6eda:	4608      	mov	r0, r1
    6edc:	e7e4      	b.n	6ea8 <onoff_request+0x64>
    6ede:	6067      	str	r7, [r4, #4]
	list->head = node;
    6ee0:	6027      	str	r7, [r4, #0]
}
    6ee2:	e7e8      	b.n	6eb6 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    6ee4:	2102      	movs	r1, #2
    6ee6:	4620      	mov	r0, r4
    6ee8:	f7f9 fbaa 	bl	640 <process_event>
    6eec:	e7e9      	b.n	6ec2 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    6eee:	2300      	movs	r3, #0
    6ef0:	462a      	mov	r2, r5
    6ef2:	4639      	mov	r1, r7
    6ef4:	4620      	mov	r0, r4
    6ef6:	f7ff ff51 	bl	6d9c <notify_one>
    6efa:	e7e2      	b.n	6ec2 <onoff_request+0x7e>

00006efc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6efc:	b508      	push	{r3, lr}
    6efe:	4604      	mov	r4, r0
    6f00:	4608      	mov	r0, r1
    6f02:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6f04:	461a      	mov	r2, r3
    6f06:	47a0      	blx	r4
	return z_impl_z_current_get();
    6f08:	f7ff f9e6 	bl	62d8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6f0c:	f7fc f88c 	bl	3028 <z_impl_k_thread_abort>

00006f10 <extract_decimal>:
{
    6f10:	b410      	push	{r4}
    6f12:	4604      	mov	r4, r0
	const char *sp = *str;
    6f14:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    6f16:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    6f18:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    6f1a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6f1e:	2909      	cmp	r1, #9
    6f20:	d806      	bhi.n	6f30 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    6f22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6f26:	3201      	adds	r2, #1
    6f28:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    6f2c:	3830      	subs	r0, #48	; 0x30
    6f2e:	e7f3      	b.n	6f18 <extract_decimal+0x8>
	*str = sp;
    6f30:	6022      	str	r2, [r4, #0]
}
    6f32:	bc10      	pop	{r4}
    6f34:	4770      	bx	lr

00006f36 <encode_uint>:
{
    6f36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f3a:	b083      	sub	sp, #12
    6f3c:	4604      	mov	r4, r0
    6f3e:	460d      	mov	r5, r1
    6f40:	9201      	str	r2, [sp, #4]
    6f42:	469a      	mov	sl, r3
    6f44:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    6f48:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6f4a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6f4e:	2b6f      	cmp	r3, #111	; 0x6f
    6f50:	d00f      	beq.n	6f72 <encode_uint+0x3c>
    6f52:	d906      	bls.n	6f62 <encode_uint+0x2c>
    6f54:	2b70      	cmp	r3, #112	; 0x70
    6f56:	d00f      	beq.n	6f78 <encode_uint+0x42>
    6f58:	2b78      	cmp	r3, #120	; 0x78
    6f5a:	d110      	bne.n	6f7e <encode_uint+0x48>
		return 16;
    6f5c:	f04f 0910 	mov.w	r9, #16
    6f60:	e026      	b.n	6fb0 <encode_uint+0x7a>
	switch (specifier) {
    6f62:	2b58      	cmp	r3, #88	; 0x58
    6f64:	d002      	beq.n	6f6c <encode_uint+0x36>
    6f66:	f04f 090a 	mov.w	r9, #10
    6f6a:	e021      	b.n	6fb0 <encode_uint+0x7a>
		return 16;
    6f6c:	f04f 0910 	mov.w	r9, #16
    6f70:	e01e      	b.n	6fb0 <encode_uint+0x7a>
		return 8;
    6f72:	f04f 0908 	mov.w	r9, #8
    6f76:	e01b      	b.n	6fb0 <encode_uint+0x7a>
		return 16;
    6f78:	f04f 0910 	mov.w	r9, #16
    6f7c:	e018      	b.n	6fb0 <encode_uint+0x7a>
	switch (specifier) {
    6f7e:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    6f82:	e015      	b.n	6fb0 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6f84:	f1bb 0f19 	cmp.w	fp, #25
    6f88:	d820      	bhi.n	6fcc <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6f8a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6f8c:	3237      	adds	r2, #55	; 0x37
    6f8e:	b2d2      	uxtb	r2, r2
    6f90:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    6f94:	4632      	mov	r2, r6
    6f96:	463b      	mov	r3, r7
    6f98:	4620      	mov	r0, r4
    6f9a:	4629      	mov	r1, r5
    6f9c:	f7f9 f8b0 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    6fa0:	42bd      	cmp	r5, r7
    6fa2:	bf08      	it	eq
    6fa4:	42b4      	cmpeq	r4, r6
    6fa6:	d315      	bcc.n	6fd4 <encode_uint+0x9e>
    6fa8:	45d0      	cmp	r8, sl
    6faa:	d913      	bls.n	6fd4 <encode_uint+0x9e>
		value /= radix;
    6fac:	4604      	mov	r4, r0
    6fae:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    6fb0:	464e      	mov	r6, r9
    6fb2:	2700      	movs	r7, #0
    6fb4:	464a      	mov	r2, r9
    6fb6:	463b      	mov	r3, r7
    6fb8:	4620      	mov	r0, r4
    6fba:	4629      	mov	r1, r5
    6fbc:	f7f9 f8a0 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6fc0:	2a09      	cmp	r2, #9
    6fc2:	d8df      	bhi.n	6f84 <encode_uint+0x4e>
    6fc4:	b2d2      	uxtb	r2, r2
    6fc6:	3230      	adds	r2, #48	; 0x30
    6fc8:	b2d2      	uxtb	r2, r2
    6fca:	e7e1      	b.n	6f90 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6fcc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6fce:	3257      	adds	r2, #87	; 0x57
    6fd0:	b2d2      	uxtb	r2, r2
    6fd2:	e7dd      	b.n	6f90 <encode_uint+0x5a>
	if (conv->flag_hash) {
    6fd4:	9b01      	ldr	r3, [sp, #4]
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	f013 0f20 	tst.w	r3, #32
    6fdc:	d005      	beq.n	6fea <encode_uint+0xb4>
		if (radix == 8) {
    6fde:	f1b9 0f08 	cmp.w	r9, #8
    6fe2:	d006      	beq.n	6ff2 <encode_uint+0xbc>
		} else if (radix == 16) {
    6fe4:	f1b9 0f10 	cmp.w	r9, #16
    6fe8:	d009      	beq.n	6ffe <encode_uint+0xc8>
}
    6fea:	4640      	mov	r0, r8
    6fec:	b003      	add	sp, #12
    6fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    6ff2:	9a01      	ldr	r2, [sp, #4]
    6ff4:	7893      	ldrb	r3, [r2, #2]
    6ff6:	f043 0308 	orr.w	r3, r3, #8
    6ffa:	7093      	strb	r3, [r2, #2]
    6ffc:	e7f5      	b.n	6fea <encode_uint+0xb4>
			conv->altform_0c = true;
    6ffe:	9a01      	ldr	r2, [sp, #4]
    7000:	7893      	ldrb	r3, [r2, #2]
    7002:	f043 0310 	orr.w	r3, r3, #16
    7006:	7093      	strb	r3, [r2, #2]
    7008:	e7ef      	b.n	6fea <encode_uint+0xb4>

0000700a <outs>:
{
    700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    700e:	4607      	mov	r7, r0
    7010:	460e      	mov	r6, r1
    7012:	4614      	mov	r4, r2
    7014:	4698      	mov	r8, r3
	size_t count = 0;
    7016:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7018:	e006      	b.n	7028 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    701a:	4631      	mov	r1, r6
    701c:	f814 0b01 	ldrb.w	r0, [r4], #1
    7020:	47b8      	blx	r7
		if (rc < 0) {
    7022:	2800      	cmp	r0, #0
    7024:	db09      	blt.n	703a <outs+0x30>
		++count;
    7026:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7028:	4544      	cmp	r4, r8
    702a:	d3f6      	bcc.n	701a <outs+0x10>
    702c:	f1b8 0f00 	cmp.w	r8, #0
    7030:	d102      	bne.n	7038 <outs+0x2e>
    7032:	7823      	ldrb	r3, [r4, #0]
    7034:	2b00      	cmp	r3, #0
    7036:	d1f0      	bne.n	701a <outs+0x10>
	return (int)count;
    7038:	4628      	mov	r0, r5
}
    703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000703e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    703e:	4770      	bx	lr

00007040 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    7040:	2300      	movs	r3, #0
    7042:	6043      	str	r3, [r0, #4]
	list->head = NULL;
    7044:	6003      	str	r3, [r0, #0]
}
    7046:	4770      	bx	lr

00007048 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    7048:	6803      	ldr	r3, [r0, #0]
    704a:	b12b      	cbz	r3, 7058 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
    704c:	6843      	ldr	r3, [r0, #4]
    704e:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
    7050:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    7052:	2300      	movs	r3, #0
    7054:	600b      	str	r3, [r1, #0]
}
    7056:	4770      	bx	lr
		list->head = msg;
    7058:	6001      	str	r1, [r0, #0]
    705a:	e7f9      	b.n	7050 <log_list_add_tail+0x8>

0000705c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    705c:	6800      	ldr	r0, [r0, #0]
    705e:	4770      	bx	lr

00007060 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    7060:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    7062:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    7064:	b108      	cbz	r0, 706a <log_list_head_get+0xa>
		list->head = list->head->next;
    7066:	6802      	ldr	r2, [r0, #0]
    7068:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    706a:	4770      	bx	lr

0000706c <dummy_timestamp>:
}
    706c:	2000      	movs	r0, #0
    706e:	4770      	bx	lr

00007070 <msg_filter_check>:
}
    7070:	2001      	movs	r0, #1
    7072:	4770      	bx	lr

00007074 <default_get_timestamp>:
{
    7074:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    7076:	f000 ffae 	bl	7fd6 <sys_clock_cycle_get_32>
}
    707a:	bd08      	pop	{r3, pc}

0000707c <z_log_get_s_mask>:
{
    707c:	b470      	push	{r4, r5, r6}
    707e:	4603      	mov	r3, r0
	uint32_t mask = 0U;
    7080:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    7082:	4605      	mov	r5, r0
	bool arm = false;
    7084:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
    7086:	e001      	b.n	708c <z_log_get_s_mask+0x10>
			arm = !arm;
    7088:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
    708c:	f813 2b01 	ldrb.w	r2, [r3], #1
    7090:	b19a      	cbz	r2, 70ba <z_log_get_s_mask+0x3e>
    7092:	428d      	cmp	r5, r1
    7094:	d211      	bcs.n	70ba <z_log_get_s_mask+0x3e>
		if (curr == '%') {
    7096:	2a25      	cmp	r2, #37	; 0x25
    7098:	d0f6      	beq.n	7088 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    709a:	2c00      	cmp	r4, #0
    709c:	d0f6      	beq.n	708c <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    709e:	f042 0620 	orr.w	r6, r2, #32
    70a2:	3e61      	subs	r6, #97	; 0x61
    70a4:	2e19      	cmp	r6, #25
    70a6:	d8f1      	bhi.n	708c <z_log_get_s_mask+0x10>
			if (curr == 's') {
    70a8:	2a73      	cmp	r2, #115	; 0x73
    70aa:	d002      	beq.n	70b2 <z_log_get_s_mask+0x36>
			arg++;
    70ac:	3501      	adds	r5, #1
			arm = false;
    70ae:	2400      	movs	r4, #0
    70b0:	e7ec      	b.n	708c <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
    70b2:	2201      	movs	r2, #1
    70b4:	40aa      	lsls	r2, r5
    70b6:	4310      	orrs	r0, r2
    70b8:	e7f8      	b.n	70ac <z_log_get_s_mask+0x30>
}
    70ba:	bc70      	pop	{r4, r5, r6}
    70bc:	4770      	bx	lr

000070be <z_log_get_tag>:
}
    70be:	2000      	movs	r0, #0
    70c0:	4770      	bx	lr

000070c2 <block_on_alloc>:
}
    70c2:	2000      	movs	r0, #0
    70c4:	4770      	bx	lr

000070c6 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    70c6:	2901      	cmp	r1, #1
    70c8:	d906      	bls.n	70d8 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
    70ca:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    70cc:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
    70ce:	2906      	cmp	r1, #6
    70d0:	d907      	bls.n	70e2 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    70d2:	3907      	subs	r1, #7
		cont = cont->next;
    70d4:	681b      	ldr	r3, [r3, #0]
    70d6:	e7fa      	b.n	70ce <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
    70d8:	3104      	adds	r1, #4
    70da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    70de:	6888      	ldr	r0, [r1, #8]
    70e0:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
    70e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    70e6:	6848      	ldr	r0, [r1, #4]
}
    70e8:	4770      	bx	lr

000070ea <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    70ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    70ee:	461c      	mov	r4, r3
    70f0:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
    70f4:	8903      	ldrh	r3, [r0, #8]
    70f6:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    70fa:	42a3      	cmp	r3, r4
    70fc:	d91f      	bls.n	713e <log_msg_hexdump_data_op+0x54>
    70fe:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
    7100:	6811      	ldr	r1, [r2, #0]
    7102:	4421      	add	r1, r4
    7104:	4299      	cmp	r1, r3
    7106:	d901      	bls.n	710c <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
    7108:	1b19      	subs	r1, r3, r4
    710a:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
    710c:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    710e:	2b0c      	cmp	r3, #12
    7110:	d919      	bls.n	7146 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
    7112:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
    7116:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    7118:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
    711a:	42a3      	cmp	r3, r4
    711c:	d91e      	bls.n	715c <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    711e:	42bb      	cmp	r3, r7
    7120:	bf28      	it	cs
    7122:	463b      	movcs	r3, r7
    7124:	461d      	mov	r5, r3

		if (put_op) {
    7126:	f1b9 0f00 	cmp.w	r9, #0
    712a:	d010      	beq.n	714e <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
    712c:	461a      	mov	r2, r3
    712e:	4641      	mov	r1, r8
    7130:	eb0c 0004 	add.w	r0, ip, r4
    7134:	f000 fb7c 	bl	7830 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
    7138:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    713a:	44a8      	add	r8, r5
    713c:	e021      	b.n	7182 <log_msg_hexdump_data_op+0x98>
		*length = 0;
    713e:	2300      	movs	r3, #0
    7140:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    7142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
    7146:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
    714a:	2600      	movs	r6, #0
    714c:	e7e5      	b.n	711a <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
    714e:	461a      	mov	r2, r3
    7150:	eb0c 0104 	add.w	r1, ip, r4
    7154:	4640      	mov	r0, r8
    7156:	f000 fb6b 	bl	7830 <memcpy>
    715a:	e7ed      	b.n	7138 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    715c:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
    715e:	b91e      	cbnz	r6, 7168 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
    7160:	6946      	ldr	r6, [r0, #20]
    7162:	e001      	b.n	7168 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
    7164:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
    7166:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
    7168:	2c1b      	cmp	r4, #27
    716a:	d8fb      	bhi.n	7164 <log_msg_hexdump_data_op+0x7a>
    716c:	e009      	b.n	7182 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
    716e:	1931      	adds	r1, r6, r4
    7170:	462a      	mov	r2, r5
    7172:	3104      	adds	r1, #4
    7174:	4640      	mov	r0, r8
    7176:	f000 fb5b 	bl	7830 <memcpy>
		cont = cont->next;
    717a:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
    717c:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    717e:	44a8      	add	r8, r5
		offset = 0;
    7180:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
    7182:	2f00      	cmp	r7, #0
    7184:	d0dd      	beq.n	7142 <log_msg_hexdump_data_op+0x58>
    7186:	2e00      	cmp	r6, #0
    7188:	d0db      	beq.n	7142 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    718a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    718e:	42bd      	cmp	r5, r7
    7190:	bf28      	it	cs
    7192:	463d      	movcs	r5, r7
		if (put_op) {
    7194:	f1b9 0f00 	cmp.w	r9, #0
    7198:	d0e9      	beq.n	716e <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
    719a:	1930      	adds	r0, r6, r4
    719c:	462a      	mov	r2, r5
    719e:	4641      	mov	r1, r8
    71a0:	3004      	adds	r0, #4
    71a2:	f000 fb45 	bl	7830 <memcpy>
    71a6:	e7e8      	b.n	717a <log_msg_hexdump_data_op+0x90>

000071a8 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
    71a8:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    71aa:	f3bf 8f5b 	dmb	ish
    71ae:	e850 3f00 	ldrex	r3, [r0]
    71b2:	3301      	adds	r3, #1
    71b4:	e840 3200 	strex	r2, r3, [r0]
    71b8:	2a00      	cmp	r2, #0
    71ba:	d1f8      	bne.n	71ae <log_msg_get+0x6>
    71bc:	f3bf 8f5b 	dmb	ish
}
    71c0:	4770      	bx	lr

000071c2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    71c2:	7a40      	ldrb	r0, [r0, #9]
}
    71c4:	0900      	lsrs	r0, r0, #4
    71c6:	4770      	bx	lr

000071c8 <log_msg_arg_get>:
{
    71c8:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    71ca:	7a43      	ldrb	r3, [r0, #9]
    71cc:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    71d0:	d20a      	bcs.n	71e8 <log_msg_arg_get+0x20>
    71d2:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    71d4:	2a03      	cmp	r2, #3
    71d6:	d804      	bhi.n	71e2 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
    71d8:	3104      	adds	r1, #4
    71da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    71de:	6840      	ldr	r0, [r0, #4]
    71e0:	e003      	b.n	71ea <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
    71e2:	f7ff ff70 	bl	70c6 <cont_arg_get>
    71e6:	e000      	b.n	71ea <log_msg_arg_get+0x22>
		return 0;
    71e8:	2000      	movs	r0, #0
}
    71ea:	bd08      	pop	{r3, pc}

000071ec <log_msg_str_get>:
}
    71ec:	6900      	ldr	r0, [r0, #16]
    71ee:	4770      	bx	lr

000071f0 <log_msg_put>:
{
    71f0:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
    71f2:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    71f4:	f3bf 8f5b 	dmb	ish
    71f8:	e853 2f00 	ldrex	r2, [r3]
    71fc:	3a01      	subs	r2, #1
    71fe:	e843 2100 	strex	r1, r2, [r3]
    7202:	2900      	cmp	r1, #0
    7204:	d1f8      	bne.n	71f8 <log_msg_put+0x8>
    7206:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    720a:	6843      	ldr	r3, [r0, #4]
    720c:	b103      	cbz	r3, 7210 <log_msg_put+0x20>
}
    720e:	bd08      	pop	{r3, pc}
		msg_free(msg);
    7210:	f7fa fc1a 	bl	1a48 <msg_free>
}
    7214:	e7fb      	b.n	720e <log_msg_put+0x1e>

00007216 <log_msg_hexdump_create>:
{
    7216:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    721a:	4606      	mov	r6, r0
    721c:	460f      	mov	r7, r1
    721e:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    7220:	f643 75ff 	movw	r5, #16383	; 0x3fff
    7224:	4295      	cmp	r5, r2
    7226:	bf28      	it	cs
    7228:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
    722a:	f7fa fbf1 	bl	1a10 <log_msg_chunk_alloc>
	if (msg == NULL) {
    722e:	4681      	mov	r9, r0
    7230:	2800      	cmp	r0, #0
    7232:	d045      	beq.n	72c0 <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
    7234:	2301      	movs	r3, #1
    7236:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    7238:	7a03      	ldrb	r3, [r0, #8]
    723a:	f043 0301 	orr.w	r3, r3, #1
    723e:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
    7240:	8903      	ldrh	r3, [r0, #8]
    7242:	f365 038f 	bfi	r3, r5, #2, #14
    7246:	8103      	strh	r3, [r0, #8]
	msg->str = str;
    7248:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    724a:	2c0c      	cmp	r4, #12
    724c:	d927      	bls.n	729e <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
    724e:	2208      	movs	r2, #8
    7250:	4639      	mov	r1, r7
    7252:	3018      	adds	r0, #24
    7254:	f000 faec 	bl	7830 <memcpy>
		msg->payload.ext.next = NULL;
    7258:	2300      	movs	r3, #0
    725a:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
    725e:	f899 3008 	ldrb.w	r3, [r9, #8]
    7262:	f043 0302 	orr.w	r3, r3, #2
    7266:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    726a:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    726c:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
    726e:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
    7272:	b32d      	cbz	r5, 72c0 <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    7274:	f7fa fbcc 	bl	1a10 <log_msg_chunk_alloc>
		if (cont == NULL) {
    7278:	4604      	mov	r4, r0
    727a:	b1e8      	cbz	r0, 72b8 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
    727c:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
    7280:	2300      	movs	r3, #0
    7282:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
    7284:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
    7286:	462e      	mov	r6, r5
    7288:	2d1c      	cmp	r5, #28
    728a:	bf28      	it	cs
    728c:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
    728e:	4632      	mov	r2, r6
    7290:	4639      	mov	r1, r7
    7292:	3004      	adds	r0, #4
    7294:	f000 facc 	bl	7830 <memcpy>
		data += chunk_length;
    7298:	4437      	add	r7, r6
		length -= chunk_length;
    729a:	1bad      	subs	r5, r5, r6
    729c:	e7e9      	b.n	7272 <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
    729e:	462a      	mov	r2, r5
    72a0:	4639      	mov	r1, r7
    72a2:	3014      	adds	r0, #20
    72a4:	f000 fac4 	bl	7830 <memcpy>
		msg->hdr.params.generic.ext = 0;
    72a8:	f899 3008 	ldrb.w	r3, [r9, #8]
    72ac:	f36f 0341 	bfc	r3, #1, #1
    72b0:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
    72b4:	2500      	movs	r5, #0
    72b6:	e7da      	b.n	726e <log_msg_hexdump_create+0x58>
			msg_free(msg);
    72b8:	4648      	mov	r0, r9
    72ba:	f7fa fbc5 	bl	1a48 <msg_free>
			return NULL;
    72be:	46a1      	mov	r9, r4
}
    72c0:	4648      	mov	r0, r9
    72c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000072c6 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    72c6:	b510      	push	{r4, lr}
    72c8:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    72ca:	2400      	movs	r4, #0
    72cc:	9400      	str	r4, [sp, #0]
    72ce:	f7ff ff0c 	bl	70ea <log_msg_hexdump_data_op>
}
    72d2:	b002      	add	sp, #8
    72d4:	bd10      	pop	{r4, pc}

000072d6 <buffer_write>:
{
    72d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72d8:	4607      	mov	r7, r0
    72da:	460d      	mov	r5, r1
    72dc:	4614      	mov	r4, r2
    72de:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    72e0:	4632      	mov	r2, r6
    72e2:	4621      	mov	r1, r4
    72e4:	4628      	mov	r0, r5
    72e6:	47b8      	blx	r7
		buf += processed;
    72e8:	4405      	add	r5, r0
	} while (len != 0);
    72ea:	1a24      	subs	r4, r4, r0
    72ec:	d1f8      	bne.n	72e0 <buffer_write+0xa>
}
    72ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000072f0 <color_prefix>:
{
    72f0:	b508      	push	{r3, lr}
    72f2:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    72f4:	2201      	movs	r2, #1
    72f6:	f7fa fc3f 	bl	1b78 <color_print>
}
    72fa:	bd08      	pop	{r3, pc}

000072fc <color_postfix>:
{
    72fc:	b508      	push	{r3, lr}
    72fe:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    7300:	2200      	movs	r2, #0
    7302:	f7fa fc39 	bl	1b78 <color_print>
}
    7306:	bd08      	pop	{r3, pc}

00007308 <postfix_print>:
{
    7308:	b538      	push	{r3, r4, r5, lr}
    730a:	4605      	mov	r5, r0
    730c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    730e:	f001 0101 	and.w	r1, r1, #1
    7312:	f7ff fff3 	bl	72fc <color_postfix>
	newline_print(output, flags);
    7316:	4621      	mov	r1, r4
    7318:	4628      	mov	r0, r5
    731a:	f7fa fc43 	bl	1ba4 <newline_print>
}
    731e:	bd38      	pop	{r3, r4, r5, pc}

00007320 <std_print>:
{
    7320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7324:	b08e      	sub	sp, #56	; 0x38
    7326:	af0e      	add	r7, sp, #56	; 0x38
    7328:	4606      	mov	r6, r0
    732a:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
    732c:	f7ff ff5e 	bl	71ec <log_msg_str_get>
    7330:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    7332:	4630      	mov	r0, r6
    7334:	f7ff ff45 	bl	71c2 <log_msg_nargs_get>
    7338:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    733a:	0083      	lsls	r3, r0, #2
    733c:	3307      	adds	r3, #7
    733e:	f023 0307 	bic.w	r3, r3, #7
    7342:	ebad 0d03 	sub.w	sp, sp, r3
    7346:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    7348:	2400      	movs	r4, #0
    734a:	4544      	cmp	r4, r8
    734c:	d207      	bcs.n	735e <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
    734e:	4621      	mov	r1, r4
    7350:	4630      	mov	r0, r6
    7352:	f7ff ff39 	bl	71c8 <log_msg_arg_get>
    7356:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
    735a:	3401      	adds	r4, #1
    735c:	e7f5      	b.n	734a <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
    735e:	4630      	mov	r0, r6
    7360:	f7ff ff2f 	bl	71c2 <log_msg_nargs_get>
    7364:	280f      	cmp	r0, #15
    7366:	d815      	bhi.n	7394 <std_print+0x74>
    7368:	e8df f010 	tbh	[pc, r0, lsl #1]
    736c:	00170010 	.word	0x00170010
    7370:	0024001d 	.word	0x0024001d
    7374:	0038002d 	.word	0x0038002d
    7378:	00540045 	.word	0x00540045
    737c:	00780065 	.word	0x00780065
    7380:	00a4008d 	.word	0x00a4008d
    7384:	00d800bd 	.word	0x00d800bd
    7388:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
    738c:	4651      	mov	r1, sl
    738e:	4648      	mov	r0, r9
    7390:	f7fa fb9a 	bl	1ac8 <print_formatted>
}
    7394:	46bd      	mov	sp, r7
    7396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    739a:	682a      	ldr	r2, [r5, #0]
    739c:	4651      	mov	r1, sl
    739e:	4648      	mov	r0, r9
    73a0:	f7fa fb92 	bl	1ac8 <print_formatted>
		break;
    73a4:	e7f6      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
    73a6:	686b      	ldr	r3, [r5, #4]
    73a8:	682a      	ldr	r2, [r5, #0]
    73aa:	4651      	mov	r1, sl
    73ac:	4648      	mov	r0, r9
    73ae:	f7fa fb8b 	bl	1ac8 <print_formatted>
		break;
    73b2:	e7ef      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
    73b4:	686b      	ldr	r3, [r5, #4]
    73b6:	682a      	ldr	r2, [r5, #0]
    73b8:	68a9      	ldr	r1, [r5, #8]
    73ba:	9100      	str	r1, [sp, #0]
    73bc:	4651      	mov	r1, sl
    73be:	4648      	mov	r0, r9
    73c0:	f7fa fb82 	bl	1ac8 <print_formatted>
		break;
    73c4:	e7e6      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    73c6:	686b      	ldr	r3, [r5, #4]
    73c8:	682a      	ldr	r2, [r5, #0]
    73ca:	68e9      	ldr	r1, [r5, #12]
    73cc:	9101      	str	r1, [sp, #4]
    73ce:	68a9      	ldr	r1, [r5, #8]
    73d0:	9100      	str	r1, [sp, #0]
    73d2:	4651      	mov	r1, sl
    73d4:	4648      	mov	r0, r9
    73d6:	f7fa fb77 	bl	1ac8 <print_formatted>
		break;
    73da:	e7db      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    73dc:	686b      	ldr	r3, [r5, #4]
    73de:	682a      	ldr	r2, [r5, #0]
    73e0:	6929      	ldr	r1, [r5, #16]
    73e2:	9102      	str	r1, [sp, #8]
    73e4:	68e9      	ldr	r1, [r5, #12]
    73e6:	9101      	str	r1, [sp, #4]
    73e8:	68a9      	ldr	r1, [r5, #8]
    73ea:	9100      	str	r1, [sp, #0]
    73ec:	4651      	mov	r1, sl
    73ee:	4648      	mov	r0, r9
    73f0:	f7fa fb6a 	bl	1ac8 <print_formatted>
		break;
    73f4:	e7ce      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    73f6:	686b      	ldr	r3, [r5, #4]
    73f8:	682a      	ldr	r2, [r5, #0]
    73fa:	6969      	ldr	r1, [r5, #20]
    73fc:	9103      	str	r1, [sp, #12]
    73fe:	6929      	ldr	r1, [r5, #16]
    7400:	9102      	str	r1, [sp, #8]
    7402:	68e9      	ldr	r1, [r5, #12]
    7404:	9101      	str	r1, [sp, #4]
    7406:	68a9      	ldr	r1, [r5, #8]
    7408:	9100      	str	r1, [sp, #0]
    740a:	4651      	mov	r1, sl
    740c:	4648      	mov	r0, r9
    740e:	f7fa fb5b 	bl	1ac8 <print_formatted>
		break;
    7412:	e7bf      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7414:	686b      	ldr	r3, [r5, #4]
    7416:	682a      	ldr	r2, [r5, #0]
    7418:	69a9      	ldr	r1, [r5, #24]
    741a:	9104      	str	r1, [sp, #16]
    741c:	6969      	ldr	r1, [r5, #20]
    741e:	9103      	str	r1, [sp, #12]
    7420:	6929      	ldr	r1, [r5, #16]
    7422:	9102      	str	r1, [sp, #8]
    7424:	68e9      	ldr	r1, [r5, #12]
    7426:	9101      	str	r1, [sp, #4]
    7428:	68a9      	ldr	r1, [r5, #8]
    742a:	9100      	str	r1, [sp, #0]
    742c:	4651      	mov	r1, sl
    742e:	4648      	mov	r0, r9
    7430:	f7fa fb4a 	bl	1ac8 <print_formatted>
		break;
    7434:	e7ae      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7436:	686b      	ldr	r3, [r5, #4]
    7438:	682a      	ldr	r2, [r5, #0]
    743a:	69e9      	ldr	r1, [r5, #28]
    743c:	9105      	str	r1, [sp, #20]
    743e:	69a9      	ldr	r1, [r5, #24]
    7440:	9104      	str	r1, [sp, #16]
    7442:	6969      	ldr	r1, [r5, #20]
    7444:	9103      	str	r1, [sp, #12]
    7446:	6929      	ldr	r1, [r5, #16]
    7448:	9102      	str	r1, [sp, #8]
    744a:	68e9      	ldr	r1, [r5, #12]
    744c:	9101      	str	r1, [sp, #4]
    744e:	68a9      	ldr	r1, [r5, #8]
    7450:	9100      	str	r1, [sp, #0]
    7452:	4651      	mov	r1, sl
    7454:	4648      	mov	r0, r9
    7456:	f7fa fb37 	bl	1ac8 <print_formatted>
		break;
    745a:	e79b      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    745c:	686b      	ldr	r3, [r5, #4]
    745e:	682a      	ldr	r2, [r5, #0]
    7460:	6a29      	ldr	r1, [r5, #32]
    7462:	9106      	str	r1, [sp, #24]
    7464:	69e9      	ldr	r1, [r5, #28]
    7466:	9105      	str	r1, [sp, #20]
    7468:	69a9      	ldr	r1, [r5, #24]
    746a:	9104      	str	r1, [sp, #16]
    746c:	6969      	ldr	r1, [r5, #20]
    746e:	9103      	str	r1, [sp, #12]
    7470:	6929      	ldr	r1, [r5, #16]
    7472:	9102      	str	r1, [sp, #8]
    7474:	68e9      	ldr	r1, [r5, #12]
    7476:	9101      	str	r1, [sp, #4]
    7478:	68a9      	ldr	r1, [r5, #8]
    747a:	9100      	str	r1, [sp, #0]
    747c:	4651      	mov	r1, sl
    747e:	4648      	mov	r0, r9
    7480:	f7fa fb22 	bl	1ac8 <print_formatted>
		break;
    7484:	e786      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7486:	686b      	ldr	r3, [r5, #4]
    7488:	682a      	ldr	r2, [r5, #0]
    748a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    748c:	9107      	str	r1, [sp, #28]
    748e:	6a29      	ldr	r1, [r5, #32]
    7490:	9106      	str	r1, [sp, #24]
    7492:	69e9      	ldr	r1, [r5, #28]
    7494:	9105      	str	r1, [sp, #20]
    7496:	69a9      	ldr	r1, [r5, #24]
    7498:	9104      	str	r1, [sp, #16]
    749a:	6969      	ldr	r1, [r5, #20]
    749c:	9103      	str	r1, [sp, #12]
    749e:	6929      	ldr	r1, [r5, #16]
    74a0:	9102      	str	r1, [sp, #8]
    74a2:	68e9      	ldr	r1, [r5, #12]
    74a4:	9101      	str	r1, [sp, #4]
    74a6:	68a9      	ldr	r1, [r5, #8]
    74a8:	9100      	str	r1, [sp, #0]
    74aa:	4651      	mov	r1, sl
    74ac:	4648      	mov	r0, r9
    74ae:	f7fa fb0b 	bl	1ac8 <print_formatted>
		break;
    74b2:	e76f      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    74b4:	686b      	ldr	r3, [r5, #4]
    74b6:	682a      	ldr	r2, [r5, #0]
    74b8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    74ba:	9108      	str	r1, [sp, #32]
    74bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    74be:	9107      	str	r1, [sp, #28]
    74c0:	6a29      	ldr	r1, [r5, #32]
    74c2:	9106      	str	r1, [sp, #24]
    74c4:	69e9      	ldr	r1, [r5, #28]
    74c6:	9105      	str	r1, [sp, #20]
    74c8:	69a9      	ldr	r1, [r5, #24]
    74ca:	9104      	str	r1, [sp, #16]
    74cc:	6969      	ldr	r1, [r5, #20]
    74ce:	9103      	str	r1, [sp, #12]
    74d0:	6929      	ldr	r1, [r5, #16]
    74d2:	9102      	str	r1, [sp, #8]
    74d4:	68e9      	ldr	r1, [r5, #12]
    74d6:	9101      	str	r1, [sp, #4]
    74d8:	68a9      	ldr	r1, [r5, #8]
    74da:	9100      	str	r1, [sp, #0]
    74dc:	4651      	mov	r1, sl
    74de:	4648      	mov	r0, r9
    74e0:	f7fa faf2 	bl	1ac8 <print_formatted>
		break;
    74e4:	e756      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    74e6:	686b      	ldr	r3, [r5, #4]
    74e8:	682a      	ldr	r2, [r5, #0]
    74ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    74ec:	9109      	str	r1, [sp, #36]	; 0x24
    74ee:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    74f0:	9108      	str	r1, [sp, #32]
    74f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    74f4:	9107      	str	r1, [sp, #28]
    74f6:	6a29      	ldr	r1, [r5, #32]
    74f8:	9106      	str	r1, [sp, #24]
    74fa:	69e9      	ldr	r1, [r5, #28]
    74fc:	9105      	str	r1, [sp, #20]
    74fe:	69a9      	ldr	r1, [r5, #24]
    7500:	9104      	str	r1, [sp, #16]
    7502:	6969      	ldr	r1, [r5, #20]
    7504:	9103      	str	r1, [sp, #12]
    7506:	6929      	ldr	r1, [r5, #16]
    7508:	9102      	str	r1, [sp, #8]
    750a:	68e9      	ldr	r1, [r5, #12]
    750c:	9101      	str	r1, [sp, #4]
    750e:	68a9      	ldr	r1, [r5, #8]
    7510:	9100      	str	r1, [sp, #0]
    7512:	4651      	mov	r1, sl
    7514:	4648      	mov	r0, r9
    7516:	f7fa fad7 	bl	1ac8 <print_formatted>
		break;
    751a:	e73b      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    751c:	686b      	ldr	r3, [r5, #4]
    751e:	682a      	ldr	r2, [r5, #0]
    7520:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7522:	910a      	str	r1, [sp, #40]	; 0x28
    7524:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7526:	9109      	str	r1, [sp, #36]	; 0x24
    7528:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    752a:	9108      	str	r1, [sp, #32]
    752c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    752e:	9107      	str	r1, [sp, #28]
    7530:	6a29      	ldr	r1, [r5, #32]
    7532:	9106      	str	r1, [sp, #24]
    7534:	69e9      	ldr	r1, [r5, #28]
    7536:	9105      	str	r1, [sp, #20]
    7538:	69a9      	ldr	r1, [r5, #24]
    753a:	9104      	str	r1, [sp, #16]
    753c:	6969      	ldr	r1, [r5, #20]
    753e:	9103      	str	r1, [sp, #12]
    7540:	6929      	ldr	r1, [r5, #16]
    7542:	9102      	str	r1, [sp, #8]
    7544:	68e9      	ldr	r1, [r5, #12]
    7546:	9101      	str	r1, [sp, #4]
    7548:	68a9      	ldr	r1, [r5, #8]
    754a:	9100      	str	r1, [sp, #0]
    754c:	4651      	mov	r1, sl
    754e:	4648      	mov	r0, r9
    7550:	f7fa faba 	bl	1ac8 <print_formatted>
		break;
    7554:	e71e      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7556:	686b      	ldr	r3, [r5, #4]
    7558:	682a      	ldr	r2, [r5, #0]
    755a:	6b69      	ldr	r1, [r5, #52]	; 0x34
    755c:	910b      	str	r1, [sp, #44]	; 0x2c
    755e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7560:	910a      	str	r1, [sp, #40]	; 0x28
    7562:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7564:	9109      	str	r1, [sp, #36]	; 0x24
    7566:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7568:	9108      	str	r1, [sp, #32]
    756a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    756c:	9107      	str	r1, [sp, #28]
    756e:	6a29      	ldr	r1, [r5, #32]
    7570:	9106      	str	r1, [sp, #24]
    7572:	69e9      	ldr	r1, [r5, #28]
    7574:	9105      	str	r1, [sp, #20]
    7576:	69a9      	ldr	r1, [r5, #24]
    7578:	9104      	str	r1, [sp, #16]
    757a:	6969      	ldr	r1, [r5, #20]
    757c:	9103      	str	r1, [sp, #12]
    757e:	6929      	ldr	r1, [r5, #16]
    7580:	9102      	str	r1, [sp, #8]
    7582:	68e9      	ldr	r1, [r5, #12]
    7584:	9101      	str	r1, [sp, #4]
    7586:	68a9      	ldr	r1, [r5, #8]
    7588:	9100      	str	r1, [sp, #0]
    758a:	4651      	mov	r1, sl
    758c:	4648      	mov	r0, r9
    758e:	f7fa fa9b 	bl	1ac8 <print_formatted>
		break;
    7592:	e6ff      	b.n	7394 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7594:	686b      	ldr	r3, [r5, #4]
    7596:	682a      	ldr	r2, [r5, #0]
    7598:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    759a:	910c      	str	r1, [sp, #48]	; 0x30
    759c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    759e:	910b      	str	r1, [sp, #44]	; 0x2c
    75a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    75a2:	910a      	str	r1, [sp, #40]	; 0x28
    75a4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    75a6:	9109      	str	r1, [sp, #36]	; 0x24
    75a8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    75aa:	9108      	str	r1, [sp, #32]
    75ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
    75ae:	9107      	str	r1, [sp, #28]
    75b0:	6a29      	ldr	r1, [r5, #32]
    75b2:	9106      	str	r1, [sp, #24]
    75b4:	69e9      	ldr	r1, [r5, #28]
    75b6:	9105      	str	r1, [sp, #20]
    75b8:	69a9      	ldr	r1, [r5, #24]
    75ba:	9104      	str	r1, [sp, #16]
    75bc:	6969      	ldr	r1, [r5, #20]
    75be:	9103      	str	r1, [sp, #12]
    75c0:	6929      	ldr	r1, [r5, #16]
    75c2:	9102      	str	r1, [sp, #8]
    75c4:	68e9      	ldr	r1, [r5, #12]
    75c6:	9101      	str	r1, [sp, #4]
    75c8:	68a9      	ldr	r1, [r5, #8]
    75ca:	9100      	str	r1, [sp, #0]
    75cc:	4651      	mov	r1, sl
    75ce:	4648      	mov	r0, r9
    75d0:	f7fa fa7a 	bl	1ac8 <print_formatted>
}
    75d4:	e6de      	b.n	7394 <std_print+0x74>

000075d6 <log_output_flush>:
{
    75d6:	b510      	push	{r4, lr}
    75d8:	4604      	mov	r4, r0
		     output->control_block->offset,
    75da:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    75dc:	6853      	ldr	r3, [r2, #4]
    75de:	6812      	ldr	r2, [r2, #0]
    75e0:	6881      	ldr	r1, [r0, #8]
    75e2:	6800      	ldr	r0, [r0, #0]
    75e4:	f7ff fe77 	bl	72d6 <buffer_write>
	output->control_block->offset = 0;
    75e8:	6863      	ldr	r3, [r4, #4]
    75ea:	2200      	movs	r2, #0
    75ec:	601a      	str	r2, [r3, #0]
}
    75ee:	bd10      	pop	{r4, pc}

000075f0 <out_func>:
{
    75f0:	b538      	push	{r3, r4, r5, lr}
    75f2:	4605      	mov	r5, r0
    75f4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    75f6:	684b      	ldr	r3, [r1, #4]
    75f8:	681a      	ldr	r2, [r3, #0]
    75fa:	68cb      	ldr	r3, [r1, #12]
    75fc:	429a      	cmp	r2, r3
    75fe:	d00f      	beq.n	7620 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    7600:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7602:	f3bf 8f5b 	dmb	ish
    7606:	e853 2f00 	ldrex	r2, [r3]
    760a:	1c51      	adds	r1, r2, #1
    760c:	e843 1000 	strex	r0, r1, [r3]
    7610:	2800      	cmp	r0, #0
    7612:	d1f8      	bne.n	7606 <out_func+0x16>
    7614:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    7618:	68a3      	ldr	r3, [r4, #8]
    761a:	549d      	strb	r5, [r3, r2]
}
    761c:	2000      	movs	r0, #0
    761e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    7620:	4608      	mov	r0, r1
    7622:	f7ff ffd8 	bl	75d6 <log_output_flush>
    7626:	e7eb      	b.n	7600 <out_func+0x10>

00007628 <log_output_msg_process>:
{
    7628:	b5f0      	push	{r4, r5, r6, r7, lr}
    762a:	b085      	sub	sp, #20
    762c:	4606      	mov	r6, r0
    762e:	460c      	mov	r4, r1
    7630:	4617      	mov	r7, r2
    7632:	7a0b      	ldrb	r3, [r1, #8]
    7634:	f083 0301 	eor.w	r3, r3, #1
    7638:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
    763c:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
    763e:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
    7640:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
    7644:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
    7646:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
    764a:	f011 0507 	ands.w	r5, r1, #7
    764e:	d10f      	bne.n	7670 <log_output_msg_process+0x48>
    7650:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    7652:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
    7654:	f013 0f01 	tst.w	r3, #1
    7658:	d014      	beq.n	7684 <log_output_msg_process+0x5c>
	} else if (raw_string) {
    765a:	b9c5      	cbnz	r5, 768e <log_output_msg_process+0x66>
		raw_string_print(msg, output);
    765c:	4631      	mov	r1, r6
    765e:	4620      	mov	r0, r4
    7660:	f7fa fbae 	bl	1dc0 <raw_string_print>
	if (!raw_string) {
    7664:	b9cd      	cbnz	r5, 769a <log_output_msg_process+0x72>
	log_output_flush(output);
    7666:	4630      	mov	r0, r6
    7668:	f7ff ffb5 	bl	75d6 <log_output_flush>
}
    766c:	b005      	add	sp, #20
    766e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
    7670:	9002      	str	r0, [sp, #8]
    7672:	f8cd c004 	str.w	ip, [sp, #4]
    7676:	9500      	str	r5, [sp, #0]
    7678:	4639      	mov	r1, r7
    767a:	4630      	mov	r0, r6
    767c:	f7fa fb3a 	bl	1cf4 <prefix_print>
    7680:	4602      	mov	r2, r0
    7682:	e7e6      	b.n	7652 <log_output_msg_process+0x2a>
		std_print(msg, output);
    7684:	4631      	mov	r1, r6
    7686:	4620      	mov	r0, r4
    7688:	f7ff fe4a 	bl	7320 <std_print>
    768c:	e7ea      	b.n	7664 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
    768e:	463b      	mov	r3, r7
    7690:	4631      	mov	r1, r6
    7692:	4620      	mov	r0, r4
    7694:	f7fa fb6a 	bl	1d6c <hexdump_print>
    7698:	e7e4      	b.n	7664 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
    769a:	462a      	mov	r2, r5
    769c:	4639      	mov	r1, r7
    769e:	4630      	mov	r0, r6
    76a0:	f7ff fe32 	bl	7308 <postfix_print>
    76a4:	e7df      	b.n	7666 <log_output_msg_process+0x3e>

000076a6 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    76a6:	2200      	movs	r2, #0
    76a8:	6002      	str	r2, [r0, #0]
    76aa:	6042      	str	r2, [r0, #4]
    76ac:	6082      	str	r2, [r0, #8]
}
    76ae:	4770      	bx	lr

000076b0 <abort_function>:
{
    76b0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    76b2:	2000      	movs	r0, #0
    76b4:	f7f9 fd5a 	bl	116c <sys_reboot>

000076b8 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    76b8:	b538      	push	{r3, r4, r5, lr}
    76ba:	4604      	mov	r4, r0

	if (esf != NULL) {
    76bc:	460d      	mov	r5, r1
    76be:	b111      	cbz	r1, 76c6 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    76c0:	4608      	mov	r0, r1
    76c2:	f7fa fee1 	bl	2488 <esf_dump>
	}
	z_fatal_error(reason, esf);
    76c6:	4629      	mov	r1, r5
    76c8:	4620      	mov	r0, r4
    76ca:	f7fd fe73 	bl	53b4 <z_fatal_error>
}
    76ce:	bd38      	pop	{r3, r4, r5, pc}

000076d0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    76d0:	b508      	push	{r3, lr}
    76d2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    76d4:	6800      	ldr	r0, [r0, #0]
    76d6:	f7ff ffef 	bl	76b8 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    76da:	bd08      	pop	{r3, pc}

000076dc <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    76dc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    76de:	2100      	movs	r1, #0
    76e0:	2001      	movs	r0, #1
    76e2:	f7ff ffe9 	bl	76b8 <z_arm_fatal_error>
}
    76e6:	bd08      	pop	{r3, pc}

000076e8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    76e8:	b508      	push	{r3, lr}
	handler();
    76ea:	f7fa ff4f 	bl	258c <z_SysNmiOnReset>
	z_arm_int_exit();
    76ee:	f7fb f84b 	bl	2788 <z_arm_exc_exit>
}
    76f2:	bd08      	pop	{r3, pc}

000076f4 <memory_fault_recoverable>:
}
    76f4:	2000      	movs	r0, #0
    76f6:	4770      	bx	lr

000076f8 <fault_handle>:
{
    76f8:	b508      	push	{r3, lr}
	*recoverable = false;
    76fa:	2300      	movs	r3, #0
    76fc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    76fe:	1ecb      	subs	r3, r1, #3
    7700:	2b09      	cmp	r3, #9
    7702:	d81a      	bhi.n	773a <fault_handle+0x42>
    7704:	e8df f003 	tbb	[pc, r3]
    7708:	110d0905 	.word	0x110d0905
    770c:	19191919 	.word	0x19191919
    7710:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    7712:	4611      	mov	r1, r2
    7714:	f7fb facc 	bl	2cb0 <hard_fault>
}
    7718:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    771a:	2100      	movs	r1, #0
    771c:	f7fb f9e6 	bl	2aec <mem_manage_fault>
		break;
    7720:	e7fa      	b.n	7718 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    7722:	2100      	movs	r1, #0
    7724:	f7fb f90a 	bl	293c <bus_fault>
		break;
    7728:	e7f6      	b.n	7718 <fault_handle+0x20>
		reason = usage_fault(esf);
    772a:	f7fb f83b 	bl	27a4 <usage_fault>
		break;
    772e:	e7f3      	b.n	7718 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    7730:	4611      	mov	r1, r2
    7732:	f7fb f8e9 	bl	2908 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7736:	2000      	movs	r0, #0
		break;
    7738:	e7ee      	b.n	7718 <fault_handle+0x20>
		reserved_exception(esf, fault);
    773a:	f7fb fb5f 	bl	2dfc <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    773e:	2000      	movs	r0, #0
	return reason;
    7740:	e7ea      	b.n	7718 <fault_handle+0x20>

00007742 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    7742:	6843      	ldr	r3, [r0, #4]
    7744:	1e5a      	subs	r2, r3, #1
		&&
    7746:	4213      	tst	r3, r2
    7748:	d106      	bne.n	7758 <mpu_partition_is_valid+0x16>
		&&
    774a:	2b1f      	cmp	r3, #31
    774c:	d906      	bls.n	775c <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    774e:	6803      	ldr	r3, [r0, #0]
		&&
    7750:	421a      	tst	r2, r3
    7752:	d005      	beq.n	7760 <mpu_partition_is_valid+0x1e>
    7754:	2000      	movs	r0, #0
    7756:	4770      	bx	lr
    7758:	2000      	movs	r0, #0
    775a:	4770      	bx	lr
    775c:	2000      	movs	r0, #0
    775e:	4770      	bx	lr
    7760:	2001      	movs	r0, #1
}
    7762:	4770      	bx	lr

00007764 <mpu_configure_region>:
{
    7764:	b500      	push	{lr}
    7766:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    7768:	680b      	ldr	r3, [r1, #0]
    776a:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    776c:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    776e:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    7770:	2b20      	cmp	r3, #32
    7772:	d912      	bls.n	779a <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    7774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7778:	d811      	bhi.n	779e <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    777a:	3b01      	subs	r3, #1
    777c:	fab3 f383 	clz	r3, r3
    7780:	f1c3 031f 	rsb	r3, r3, #31
    7784:	005b      	lsls	r3, r3, #1
    7786:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    778a:	4313      	orrs	r3, r2
    778c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    778e:	a901      	add	r1, sp, #4
    7790:	f7fb fc90 	bl	30b4 <region_allocate_and_init>
}
    7794:	b005      	add	sp, #20
    7796:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    779a:	2308      	movs	r3, #8
    779c:	e7f5      	b.n	778a <mpu_configure_region+0x26>
		return REGION_4G;
    779e:	233e      	movs	r3, #62	; 0x3e
    77a0:	e7f3      	b.n	778a <mpu_configure_region+0x26>

000077a2 <arm_core_mpu_configure_static_mpu_regions>:
{
    77a2:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    77a4:	f7fb fce8 	bl	3178 <mpu_configure_static_mpu_regions>
}
    77a8:	bd08      	pop	{r3, pc}

000077aa <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    77aa:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    77ac:	f7fb fcee 	bl	318c <mpu_configure_dynamic_mpu_regions>
}
    77b0:	bd08      	pop	{r3, pc}

000077b2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    77b2:	4602      	mov	r2, r0
    77b4:	780b      	ldrb	r3, [r1, #0]
    77b6:	b11b      	cbz	r3, 77c0 <strcpy+0xe>
		*d = *s;
    77b8:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    77bc:	3101      	adds	r1, #1
    77be:	e7f9      	b.n	77b4 <strcpy+0x2>
	}

	*d = '\0';
    77c0:	7013      	strb	r3, [r2, #0]

	return dest;
}
    77c2:	4770      	bx	lr

000077c4 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    77c4:	4603      	mov	r3, r0
    77c6:	b1a2      	cbz	r2, 77f2 <strncpy+0x2e>
{
    77c8:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    77ca:	780c      	ldrb	r4, [r1, #0]
    77cc:	b12c      	cbz	r4, 77da <strncpy+0x16>
		*d = *s;
    77ce:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    77d2:	3101      	adds	r1, #1
		d++;
		n--;
    77d4:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    77d6:	2a00      	cmp	r2, #0
    77d8:	d1f7      	bne.n	77ca <strncpy+0x6>
	}

	while (n > 0) {
    77da:	b122      	cbz	r2, 77e6 <strncpy+0x22>
		*d = '\0';
    77dc:	2100      	movs	r1, #0
    77de:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    77e2:	3a01      	subs	r2, #1
    77e4:	e7f9      	b.n	77da <strncpy+0x16>
	}

	return dest;
}
    77e6:	bc10      	pop	{r4}
    77e8:	4770      	bx	lr
		*d = '\0';
    77ea:	2100      	movs	r1, #0
    77ec:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    77f0:	3a01      	subs	r2, #1
	while (n > 0) {
    77f2:	2a00      	cmp	r2, #0
    77f4:	d1f9      	bne.n	77ea <strncpy+0x26>
    77f6:	4770      	bx	lr

000077f8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    77f8:	4603      	mov	r3, r0
	size_t n = 0;
    77fa:	2000      	movs	r0, #0

	while (*s != '\0') {
    77fc:	781a      	ldrb	r2, [r3, #0]
    77fe:	b112      	cbz	r2, 7806 <strlen+0xe>
		s++;
    7800:	3301      	adds	r3, #1
		n++;
    7802:	3001      	adds	r0, #1
    7804:	e7fa      	b.n	77fc <strlen+0x4>
	}

	return n;
}
    7806:	4770      	bx	lr

00007808 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7808:	4603      	mov	r3, r0
	size_t n = 0;
    780a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    780c:	781a      	ldrb	r2, [r3, #0]
    780e:	b122      	cbz	r2, 781a <strnlen+0x12>
    7810:	4288      	cmp	r0, r1
    7812:	d202      	bcs.n	781a <strnlen+0x12>
		s++;
    7814:	3301      	adds	r3, #1
		n++;
    7816:	3001      	adds	r0, #1
    7818:	e7f8      	b.n	780c <strnlen+0x4>
	}

	return n;
}
    781a:	4770      	bx	lr

0000781c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    781c:	7803      	ldrb	r3, [r0, #0]
    781e:	780a      	ldrb	r2, [r1, #0]
    7820:	4293      	cmp	r3, r2
    7822:	d103      	bne.n	782c <strcmp+0x10>
    7824:	b113      	cbz	r3, 782c <strcmp+0x10>
		s1++;
    7826:	3001      	adds	r0, #1
		s2++;
    7828:	3101      	adds	r1, #1
    782a:	e7f7      	b.n	781c <strcmp>
	}

	return *s1 - *s2;
}
    782c:	1a98      	subs	r0, r3, r2
    782e:	4770      	bx	lr

00007830 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7830:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    7832:	ea80 0301 	eor.w	r3, r0, r1
    7836:	f013 0f03 	tst.w	r3, #3
    783a:	d001      	beq.n	7840 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    783c:	4603      	mov	r3, r0
    783e:	e017      	b.n	7870 <memcpy+0x40>
    7840:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    7842:	f013 0f03 	tst.w	r3, #3
    7846:	d00b      	beq.n	7860 <memcpy+0x30>
			if (n == 0) {
    7848:	b1a2      	cbz	r2, 7874 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    784a:	f811 4b01 	ldrb.w	r4, [r1], #1
    784e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    7852:	3a01      	subs	r2, #1
    7854:	e7f5      	b.n	7842 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    7856:	f851 4b04 	ldr.w	r4, [r1], #4
    785a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    785e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    7860:	2a03      	cmp	r2, #3
    7862:	d8f8      	bhi.n	7856 <memcpy+0x26>
    7864:	e004      	b.n	7870 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    7866:	f811 4b01 	ldrb.w	r4, [r1], #1
    786a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    786e:	3a01      	subs	r2, #1
	while (n > 0) {
    7870:	2a00      	cmp	r2, #0
    7872:	d1f8      	bne.n	7866 <memcpy+0x36>
	}

	return d;
}
    7874:	bc10      	pop	{r4}
    7876:	4770      	bx	lr

00007878 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    7878:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    787a:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    787c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    787e:	f013 0f03 	tst.w	r3, #3
    7882:	d004      	beq.n	788e <memset+0x16>
		if (n == 0) {
    7884:	b19a      	cbz	r2, 78ae <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    7886:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    788a:	3a01      	subs	r2, #1
    788c:	e7f7      	b.n	787e <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    788e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    7890:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    7894:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    7898:	2a03      	cmp	r2, #3
    789a:	d906      	bls.n	78aa <memset+0x32>
		*(d_word++) = c_word;
    789c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    78a0:	3a04      	subs	r2, #4
    78a2:	e7f9      	b.n	7898 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    78a4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    78a8:	3a01      	subs	r2, #1
	while (n > 0) {
    78aa:	2a00      	cmp	r2, #0
    78ac:	d1fa      	bne.n	78a4 <memset+0x2c>
	}

	return buf;
}
    78ae:	bc10      	pop	{r4}
    78b0:	4770      	bx	lr

000078b2 <_stdout_hook_default>:
}
    78b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    78b6:	4770      	bx	lr

000078b8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    78b8:	b084      	sub	sp, #16
    78ba:	ab04      	add	r3, sp, #16
    78bc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    78c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    78c4:	2b06      	cmp	r3, #6
    78c6:	d001      	beq.n	78cc <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    78c8:	b004      	add	sp, #16
    78ca:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    78cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78d0:	2201      	movs	r2, #1
    78d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    78d6:	f3bf 8f4f 	dsb	sy
        __WFE();
    78da:	bf20      	wfe
    while (true)
    78dc:	e7fd      	b.n	78da <pm_power_state_set+0x22>

000078de <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    78de:	b084      	sub	sp, #16
    78e0:	ab04      	add	r3, sp, #16
    78e2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    78e6:	2300      	movs	r3, #0
    78e8:	f383 8811 	msr	BASEPRI, r3
    78ec:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    78f0:	b004      	add	sp, #16
    78f2:	4770      	bx	lr

000078f4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    78f4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    78f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    78fa:	0089      	lsls	r1, r1, #2
    78fc:	3138      	adds	r1, #56	; 0x38
}
    78fe:	4408      	add	r0, r1
    7900:	4770      	bx	lr

00007902 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    7902:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    7904:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    7908:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    790c:	4770      	bx	lr

0000790e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    790e:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    7910:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    7914:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7918:	4770      	bx	lr

0000791a <get_status>:
{
    791a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    791c:	b2c9      	uxtb	r1, r1
    791e:	f7ff ffe9 	bl	78f4 <get_sub_data>
    7922:	6880      	ldr	r0, [r0, #8]
}
    7924:	f000 0007 	and.w	r0, r0, #7
    7928:	bd08      	pop	{r3, pc}

0000792a <set_off_state>:
	__asm__ volatile(
    792a:	f04f 0320 	mov.w	r3, #32
    792e:	f3ef 8211 	mrs	r2, BASEPRI
    7932:	f383 8812 	msr	BASEPRI_MAX, r3
    7936:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    793a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    793c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    7940:	d001      	beq.n	7946 <set_off_state+0x1c>
    7942:	428b      	cmp	r3, r1
    7944:	d107      	bne.n	7956 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7946:	2301      	movs	r3, #1
    7948:	6003      	str	r3, [r0, #0]
	int err = 0;
    794a:	2000      	movs	r0, #0
	__asm__ volatile(
    794c:	f382 8811 	msr	BASEPRI, r2
    7950:	f3bf 8f6f 	isb	sy
}
    7954:	4770      	bx	lr
		err = -EPERM;
    7956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    795a:	e7f7      	b.n	794c <set_off_state+0x22>

0000795c <set_starting_state>:
{
    795c:	b410      	push	{r4}
	__asm__ volatile(
    795e:	f04f 0320 	mov.w	r3, #32
    7962:	f3ef 8211 	mrs	r2, BASEPRI
    7966:	f383 8812 	msr	BASEPRI_MAX, r3
    796a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    796e:	6803      	ldr	r3, [r0, #0]
    7970:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7974:	f003 0307 	and.w	r3, r3, #7
    7978:	2b01      	cmp	r3, #1
    797a:	d009      	beq.n	7990 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    797c:	428c      	cmp	r4, r1
    797e:	d00a      	beq.n	7996 <set_starting_state+0x3a>
		err = -EPERM;
    7980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    7984:	f382 8811 	msr	BASEPRI, r2
    7988:	f3bf 8f6f 	isb	sy
}
    798c:	bc10      	pop	{r4}
    798e:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7990:	6001      	str	r1, [r0, #0]
	int err = 0;
    7992:	2000      	movs	r0, #0
    7994:	e7f6      	b.n	7984 <set_starting_state+0x28>
		err = -EALREADY;
    7996:	f06f 0077 	mvn.w	r0, #119	; 0x77
    799a:	e7f3      	b.n	7984 <set_starting_state+0x28>

0000799c <set_on_state>:
	__asm__ volatile(
    799c:	f04f 0320 	mov.w	r3, #32
    79a0:	f3ef 8211 	mrs	r2, BASEPRI
    79a4:	f383 8812 	msr	BASEPRI_MAX, r3
    79a8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    79ac:	6803      	ldr	r3, [r0, #0]
    79ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    79b2:	f043 0302 	orr.w	r3, r3, #2
    79b6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    79b8:	f382 8811 	msr	BASEPRI, r2
    79bc:	f3bf 8f6f 	isb	sy
}
    79c0:	4770      	bx	lr

000079c2 <clkstarted_handle>:
{
    79c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79c4:	4606      	mov	r6, r0
    79c6:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    79c8:	f7ff ff94 	bl	78f4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    79cc:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    79ce:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    79d0:	2300      	movs	r3, #0
    79d2:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    79d6:	f7ff ffe1 	bl	799c <set_on_state>
	if (callback) {
    79da:	b11d      	cbz	r5, 79e4 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    79dc:	463a      	mov	r2, r7
    79de:	4621      	mov	r1, r4
    79e0:	4630      	mov	r0, r6
    79e2:	47a8      	blx	r5
}
    79e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000079e6 <stop>:
{
    79e6:	b570      	push	{r4, r5, r6, lr}
    79e8:	4606      	mov	r6, r0
    79ea:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    79ec:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    79ee:	4621      	mov	r1, r4
    79f0:	f7ff ff80 	bl	78f4 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    79f4:	4629      	mov	r1, r5
    79f6:	3008      	adds	r0, #8
    79f8:	f7ff ff97 	bl	792a <set_off_state>
	if (err < 0) {
    79fc:	2800      	cmp	r0, #0
    79fe:	db06      	blt.n	7a0e <stop+0x28>
	get_sub_config(dev, type)->stop();
    7a00:	4621      	mov	r1, r4
    7a02:	4630      	mov	r0, r6
    7a04:	f7ff ff7d 	bl	7902 <get_sub_config>
    7a08:	6843      	ldr	r3, [r0, #4]
    7a0a:	4798      	blx	r3
	return 0;
    7a0c:	2000      	movs	r0, #0
}
    7a0e:	bd70      	pop	{r4, r5, r6, pc}

00007a10 <api_stop>:
{
    7a10:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    7a12:	2280      	movs	r2, #128	; 0x80
    7a14:	f7ff ffe7 	bl	79e6 <stop>
}
    7a18:	bd08      	pop	{r3, pc}

00007a1a <async_start>:
{
    7a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a1e:	4606      	mov	r6, r0
    7a20:	4690      	mov	r8, r2
    7a22:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7a24:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7a26:	4629      	mov	r1, r5
    7a28:	f7ff ff64 	bl	78f4 <get_sub_data>
    7a2c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    7a2e:	9906      	ldr	r1, [sp, #24]
    7a30:	3008      	adds	r0, #8
    7a32:	f7ff ff93 	bl	795c <set_starting_state>
	if (err < 0) {
    7a36:	2800      	cmp	r0, #0
    7a38:	db09      	blt.n	7a4e <async_start+0x34>
	subdata->cb = cb;
    7a3a:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    7a3e:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    7a40:	4629      	mov	r1, r5
    7a42:	4630      	mov	r0, r6
    7a44:	f7ff ff5d 	bl	7902 <get_sub_config>
    7a48:	6803      	ldr	r3, [r0, #0]
    7a4a:	4798      	blx	r3
	return 0;
    7a4c:	2000      	movs	r0, #0
}
    7a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007a52 <api_start>:
{
    7a52:	b510      	push	{r4, lr}
    7a54:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7a56:	2480      	movs	r4, #128	; 0x80
    7a58:	9400      	str	r4, [sp, #0]
    7a5a:	f7ff ffde 	bl	7a1a <async_start>
}
    7a5e:	b002      	add	sp, #8
    7a60:	bd10      	pop	{r4, pc}

00007a62 <onoff_started_callback>:
{
    7a62:	b510      	push	{r4, lr}
    7a64:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    7a66:	b2c9      	uxtb	r1, r1
    7a68:	f7ff ff51 	bl	790e <get_onoff_manager>
	notify(mgr, 0);
    7a6c:	2100      	movs	r1, #0
    7a6e:	47a0      	blx	r4
}
    7a70:	bd10      	pop	{r4, pc}

00007a72 <hfclk_start>:
{
    7a72:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7a74:	2001      	movs	r0, #1
    7a76:	f7fc fd95 	bl	45a4 <nrfx_clock_start>
}
    7a7a:	bd08      	pop	{r3, pc}

00007a7c <lfclk_start>:
{
    7a7c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7a7e:	2000      	movs	r0, #0
    7a80:	f7fc fd90 	bl	45a4 <nrfx_clock_start>
}
    7a84:	bd08      	pop	{r3, pc}

00007a86 <hfclk_stop>:
{
    7a86:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7a88:	2001      	movs	r0, #1
    7a8a:	f7fc fdc3 	bl	4614 <nrfx_clock_stop>
}
    7a8e:	bd08      	pop	{r3, pc}

00007a90 <lfclk_stop>:
{
    7a90:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7a92:	2000      	movs	r0, #0
    7a94:	f7fc fdbe 	bl	4614 <nrfx_clock_stop>
}
    7a98:	bd08      	pop	{r3, pc}

00007a9a <blocking_start_callback>:
{
    7a9a:	b508      	push	{r3, lr}
    7a9c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7a9e:	f7fe f811 	bl	5ac4 <z_impl_k_sem_give>
}
    7aa2:	bd08      	pop	{r3, pc}

00007aa4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    7aa4:	f010 0f10 	tst.w	r0, #16
    7aa8:	d104      	bne.n	7ab4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    7aaa:	f010 0f20 	tst.w	r0, #32
    7aae:	d103      	bne.n	7ab8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    7ab0:	2000      	movs	r0, #0
    7ab2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    7ab4:	2003      	movs	r0, #3
    7ab6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    7ab8:	2001      	movs	r0, #1
}
    7aba:	4770      	bx	lr

00007abc <gpio_nrfx_port_get_raw>:
	return port->config;
    7abc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7abe:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7ac0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7ac4:	600b      	str	r3, [r1, #0]
}
    7ac6:	2000      	movs	r0, #0
    7ac8:	4770      	bx	lr

00007aca <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    7aca:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7acc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7ace:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7ad2:	4042      	eors	r2, r0
    7ad4:	400a      	ands	r2, r1
    7ad6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7ad8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    7adc:	2000      	movs	r0, #0
    7ade:	4770      	bx	lr

00007ae0 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    7ae0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7ae2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7ae4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    7ae8:	2000      	movs	r0, #0
    7aea:	4770      	bx	lr

00007aec <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    7aec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7aee:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7af0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    7af4:	2000      	movs	r0, #0
    7af6:	4770      	bx	lr

00007af8 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    7af8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7afa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7afc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7b00:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7b02:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    7b06:	2000      	movs	r0, #0
    7b08:	4770      	bx	lr

00007b0a <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    7b0a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    7b0e:	d007      	beq.n	7b20 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    7b10:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    7b14:	d00d      	beq.n	7b32 <get_trigger+0x28>
    7b16:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    7b1a:	d008      	beq.n	7b2e <get_trigger+0x24>
    7b1c:	2001      	movs	r0, #1
}
    7b1e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    7b20:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    7b24:	d001      	beq.n	7b2a <get_trigger+0x20>
    7b26:	2005      	movs	r0, #5
    7b28:	4770      	bx	lr
    7b2a:	2004      	movs	r0, #4
    7b2c:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    7b2e:	2002      	movs	r0, #2
    7b30:	4770      	bx	lr
    7b32:	2003      	movs	r0, #3
    7b34:	4770      	bx	lr

00007b36 <gpio_nrfx_manage_callback>:
{
    7b36:	b470      	push	{r4, r5, r6}
	return port->data;
    7b38:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7b3a:	1d05      	adds	r5, r0, #4
	return list->head;
    7b3c:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    7b3e:	b1db      	cbz	r3, 7b78 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7b40:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7b42:	2400      	movs	r4, #0
    7b44:	e00a      	b.n	7b5c <gpio_nrfx_manage_callback+0x26>
	return node->next;
    7b46:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    7b48:	6043      	str	r3, [r0, #4]
	return list->tail;
    7b4a:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7b4c:	42a1      	cmp	r1, r4
    7b4e:	d10f      	bne.n	7b70 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    7b50:	606b      	str	r3, [r5, #4]
}
    7b52:	e00d      	b.n	7b70 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    7b54:	606c      	str	r4, [r5, #4]
}
    7b56:	e00b      	b.n	7b70 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7b58:	461c      	mov	r4, r3
    7b5a:	681b      	ldr	r3, [r3, #0]
    7b5c:	b15b      	cbz	r3, 7b76 <gpio_nrfx_manage_callback+0x40>
    7b5e:	429e      	cmp	r6, r3
    7b60:	d1fa      	bne.n	7b58 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    7b62:	2c00      	cmp	r4, #0
    7b64:	d0ef      	beq.n	7b46 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    7b66:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    7b68:	6023      	str	r3, [r4, #0]
	return list->tail;
    7b6a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7b6c:	4299      	cmp	r1, r3
    7b6e:	d0f1      	beq.n	7b54 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    7b70:	2300      	movs	r3, #0
    7b72:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7b74:	e000      	b.n	7b78 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    7b76:	b152      	cbz	r2, 7b8e <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    7b78:	b162      	cbz	r2, 7b94 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    7b7a:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    7b7c:	600b      	str	r3, [r1, #0]
	list->head = node;
    7b7e:	6041      	str	r1, [r0, #4]
	return list->tail;
    7b80:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    7b82:	b10b      	cbz	r3, 7b88 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7b84:	2000      	movs	r0, #0
    7b86:	e006      	b.n	7b96 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    7b88:	6069      	str	r1, [r5, #4]
    7b8a:	2000      	movs	r0, #0
}
    7b8c:	e003      	b.n	7b96 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    7b8e:	f06f 0015 	mvn.w	r0, #21
    7b92:	e000      	b.n	7b96 <gpio_nrfx_manage_callback+0x60>
	return 0;
    7b94:	2000      	movs	r0, #0
}
    7b96:	bc70      	pop	{r4, r5, r6}
    7b98:	4770      	bx	lr

00007b9a <nrfx_gpio_handler>:
{
    7b9a:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    7b9c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    7ba0:	0940      	lsrs	r0, r0, #5
    7ba2:	f7fb fda7 	bl	36f4 <get_dev>
	if (port == NULL) {
    7ba6:	b1d8      	cbz	r0, 7be0 <nrfx_gpio_handler+0x46>
    7ba8:	4606      	mov	r6, r0
	return port->data;
    7baa:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    7bac:	2501      	movs	r5, #1
    7bae:	40a5      	lsls	r5, r4
	return list->head;
    7bb0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7bb2:	b119      	cbz	r1, 7bbc <nrfx_gpio_handler+0x22>
    7bb4:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7bb6:	b149      	cbz	r1, 7bcc <nrfx_gpio_handler+0x32>
	return node->next;
    7bb8:	680c      	ldr	r4, [r1, #0]
    7bba:	e007      	b.n	7bcc <nrfx_gpio_handler+0x32>
    7bbc:	460c      	mov	r4, r1
    7bbe:	e005      	b.n	7bcc <nrfx_gpio_handler+0x32>
    7bc0:	b164      	cbz	r4, 7bdc <nrfx_gpio_handler+0x42>
    7bc2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    7bc4:	b104      	cbz	r4, 7bc8 <nrfx_gpio_handler+0x2e>
	return node->next;
    7bc6:	6823      	ldr	r3, [r4, #0]
    7bc8:	4621      	mov	r1, r4
    7bca:	461c      	mov	r4, r3
    7bcc:	b141      	cbz	r1, 7be0 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    7bce:	688a      	ldr	r2, [r1, #8]
    7bd0:	402a      	ands	r2, r5
    7bd2:	d0f5      	beq.n	7bc0 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7bd4:	684b      	ldr	r3, [r1, #4]
    7bd6:	4630      	mov	r0, r6
    7bd8:	4798      	blx	r3
    7bda:	e7f1      	b.n	7bc0 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7bdc:	4623      	mov	r3, r4
    7bde:	e7f3      	b.n	7bc8 <nrfx_gpio_handler+0x2e>
}
    7be0:	bd70      	pop	{r4, r5, r6, pc}

00007be2 <endtx_isr>:
	return dev->config;
    7be2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7be4:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    7be6:	f04f 0120 	mov.w	r1, #32
    7bea:	f3ef 8211 	mrs	r2, BASEPRI
    7bee:	f381 8812 	msr	BASEPRI_MAX, r1
    7bf2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7bf6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7bfa:	b131      	cbz	r1, 7c0a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7bfc:	2100      	movs	r1, #0
    7bfe:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    7c02:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c06:	2101      	movs	r1, #1
    7c08:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7c0a:	f382 8811 	msr	BASEPRI, r2
    7c0e:	f3bf 8f6f 	isb	sy
}
    7c12:	4770      	bx	lr

00007c14 <uarte_nrfx_isr_int>:
{
    7c14:	b538      	push	{r3, r4, r5, lr}
    7c16:	4604      	mov	r4, r0
	return dev->config;
    7c18:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7c1a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    7c1c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7c20:	f413 7f80 	tst.w	r3, #256	; 0x100
    7c24:	d002      	beq.n	7c2c <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c26:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    7c2a:	b9db      	cbnz	r3, 7c64 <uarte_nrfx_isr_int+0x50>
	return dev->config;
    7c2c:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7c2e:	685b      	ldr	r3, [r3, #4]
    7c30:	f013 0f10 	tst.w	r3, #16
    7c34:	d015      	beq.n	7c62 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    7c36:	f04f 0220 	mov.w	r2, #32
    7c3a:	f3ef 8311 	mrs	r3, BASEPRI
    7c3e:	f382 8812 	msr	BASEPRI_MAX, r2
    7c42:	f3bf 8f6f 	isb	sy
    7c46:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7c4a:	b112      	cbz	r2, 7c52 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7c4c:	2200      	movs	r2, #0
    7c4e:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7c52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    7c56:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    7c5a:	f383 8811 	msr	BASEPRI, r3
    7c5e:	f3bf 8f6f 	isb	sy
}
    7c62:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    7c64:	f7ff ffbd 	bl	7be2 <endtx_isr>
    7c68:	e7e0      	b.n	7c2c <uarte_nrfx_isr_int+0x18>

00007c6a <uarte_nrfx_configure>:
{
    7c6a:	b570      	push	{r4, r5, r6, lr}
    7c6c:	b082      	sub	sp, #8
    7c6e:	4605      	mov	r5, r0
    7c70:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    7c72:	794b      	ldrb	r3, [r1, #5]
    7c74:	2b01      	cmp	r3, #1
    7c76:	d006      	beq.n	7c86 <uarte_nrfx_configure+0x1c>
    7c78:	2b03      	cmp	r3, #3
    7c7a:	d011      	beq.n	7ca0 <uarte_nrfx_configure+0x36>
    7c7c:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    7c80:	4618      	mov	r0, r3
    7c82:	b002      	add	sp, #8
    7c84:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    7c86:	2300      	movs	r3, #0
    7c88:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    7c8c:	79a3      	ldrb	r3, [r4, #6]
    7c8e:	2b03      	cmp	r3, #3
    7c90:	d138      	bne.n	7d04 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    7c92:	79e3      	ldrb	r3, [r4, #7]
    7c94:	b143      	cbz	r3, 7ca8 <uarte_nrfx_configure+0x3e>
    7c96:	2b01      	cmp	r3, #1
    7c98:	d010      	beq.n	7cbc <uarte_nrfx_configure+0x52>
    7c9a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7c9e:	e7ef      	b.n	7c80 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    7ca0:	2310      	movs	r3, #16
    7ca2:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    7ca6:	e7f1      	b.n	7c8c <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    7ca8:	2300      	movs	r3, #0
    7caa:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    7cae:	7923      	ldrb	r3, [r4, #4]
    7cb0:	b143      	cbz	r3, 7cc4 <uarte_nrfx_configure+0x5a>
    7cb2:	2b02      	cmp	r3, #2
    7cb4:	d022      	beq.n	7cfc <uarte_nrfx_configure+0x92>
    7cb6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7cba:	e7e1      	b.n	7c80 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    7cbc:	2301      	movs	r3, #1
    7cbe:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    7cc2:	e7f4      	b.n	7cae <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    7cc4:	2300      	movs	r3, #0
    7cc6:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    7cca:	6821      	ldr	r1, [r4, #0]
    7ccc:	4628      	mov	r0, r5
    7cce:	f7fb ff15 	bl	3afc <baudrate_set>
    7cd2:	4603      	mov	r3, r0
    7cd4:	b9c8      	cbnz	r0, 7d0a <uarte_nrfx_configure+0xa0>
	return dev->config;
    7cd6:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    7cd8:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7cda:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    7cde:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    7ce2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7ce6:	4331      	orrs	r1, r6
    7ce8:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7cea:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    7cee:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    7cf0:	3204      	adds	r2, #4
    7cf2:	e894 0003 	ldmia.w	r4, {r0, r1}
    7cf6:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    7cfa:	e7c1      	b.n	7c80 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    7cfc:	230e      	movs	r3, #14
    7cfe:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    7d02:	e7e2      	b.n	7cca <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    7d04:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7d08:	e7ba      	b.n	7c80 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    7d0a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7d0e:	e7b7      	b.n	7c80 <uarte_nrfx_configure+0x16>

00007d10 <uarte_nrfx_config_get>:
{
    7d10:	460b      	mov	r3, r1
	return dev->data;
    7d12:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    7d14:	6891      	ldr	r1, [r2, #8]
    7d16:	6850      	ldr	r0, [r2, #4]
    7d18:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7d1c:	2000      	movs	r0, #0
    7d1e:	4770      	bx	lr

00007d20 <uarte_nrfx_err_check>:
	return dev->config;
    7d20:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7d22:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7d24:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7d28:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7d2c:	4770      	bx	lr

00007d2e <is_tx_ready>:
	return dev->config;
    7d2e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7d30:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7d32:	685b      	ldr	r3, [r3, #4]
    7d34:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7d38:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7d3c:	b929      	cbnz	r1, 7d4a <is_tx_ready+0x1c>
    7d3e:	b933      	cbnz	r3, 7d4e <is_tx_ready+0x20>
    7d40:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    7d44:	b92b      	cbnz	r3, 7d52 <is_tx_ready+0x24>
    7d46:	2000      	movs	r0, #0
    7d48:	4770      	bx	lr
    7d4a:	2001      	movs	r0, #1
    7d4c:	4770      	bx	lr
    7d4e:	2000      	movs	r0, #0
    7d50:	4770      	bx	lr
    7d52:	2001      	movs	r0, #1
}
    7d54:	4770      	bx	lr

00007d56 <uarte_enable>:
	return dev->config;
    7d56:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7d58:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7d5a:	2208      	movs	r2, #8
    7d5c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    7d60:	4770      	bx	lr

00007d62 <tx_start>:
{
    7d62:	b510      	push	{r4, lr}
	return dev->config;
    7d64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7d66:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7d68:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7d6c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7d70:	2300      	movs	r3, #0
    7d72:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7d76:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    7d7a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    7d7e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    7d82:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7d84:	685b      	ldr	r3, [r3, #4]
    7d86:	f013 0f10 	tst.w	r3, #16
    7d8a:	d102      	bne.n	7d92 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d8c:	2301      	movs	r3, #1
    7d8e:	60a3      	str	r3, [r4, #8]
}
    7d90:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    7d92:	2101      	movs	r1, #1
    7d94:	f7ff ffdf 	bl	7d56 <uarte_enable>
    p_reg->INTENSET = mask;
    7d98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    7d9c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    7da0:	e7f4      	b.n	7d8c <tx_start+0x2a>

00007da2 <uarte_nrfx_poll_in>:
{
    7da2:	b410      	push	{r4}
	return dev->data;
    7da4:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    7da6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7da8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7daa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7dae:	b152      	cbz	r2, 7dc6 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    7db0:	7c62      	ldrb	r2, [r4, #17]
    7db2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7db4:	2000      	movs	r0, #0
    7db6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7dba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7dbe:	2201      	movs	r2, #1
    7dc0:	601a      	str	r2, [r3, #0]
}
    7dc2:	bc10      	pop	{r4}
    7dc4:	4770      	bx	lr
		return -1;
    7dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7dca:	e7fa      	b.n	7dc2 <uarte_nrfx_poll_in+0x20>

00007dcc <wait_tx_ready>:
{
    7dcc:	b570      	push	{r4, r5, r6, lr}
    7dce:	4606      	mov	r6, r0
    7dd0:	e014      	b.n	7dfc <wait_tx_ready+0x30>
		if (res) {
    7dd2:	b17d      	cbz	r5, 7df4 <wait_tx_ready+0x28>
	__asm__ volatile(
    7dd4:	f04f 0320 	mov.w	r3, #32
    7dd8:	f3ef 8411 	mrs	r4, BASEPRI
    7ddc:	f383 8812 	msr	BASEPRI_MAX, r3
    7de0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    7de4:	4630      	mov	r0, r6
    7de6:	f7ff ffa2 	bl	7d2e <is_tx_ready>
    7dea:	b9a0      	cbnz	r0, 7e16 <wait_tx_ready+0x4a>
	__asm__ volatile(
    7dec:	f384 8811 	msr	BASEPRI, r4
    7df0:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    7df4:	2021      	movs	r0, #33	; 0x21
    7df6:	2100      	movs	r1, #0
    7df8:	f7fe fa42 	bl	6280 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    7dfc:	2464      	movs	r4, #100	; 0x64
    7dfe:	4630      	mov	r0, r6
    7e00:	f7ff ff95 	bl	7d2e <is_tx_ready>
    7e04:	4605      	mov	r5, r0
    7e06:	2800      	cmp	r0, #0
    7e08:	d1e3      	bne.n	7dd2 <wait_tx_ready+0x6>
    7e0a:	2001      	movs	r0, #1
    7e0c:	f000 f8f8 	bl	8000 <nrfx_busy_wait>
    7e10:	3c01      	subs	r4, #1
    7e12:	d1f4      	bne.n	7dfe <wait_tx_ready+0x32>
    7e14:	e7dd      	b.n	7dd2 <wait_tx_ready+0x6>
}
    7e16:	4620      	mov	r0, r4
    7e18:	bd70      	pop	{r4, r5, r6, pc}

00007e1a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    7e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e1c:	4604      	mov	r4, r0
	return dev->config;
    7e1e:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    7e20:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    7e22:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7e24:	2100      	movs	r1, #0
    7e26:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7e2a:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    7e2c:	f7fb fd98 	bl	3960 <uarte_nrfx_pins_configure>
	return dev->data;
    7e30:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    7e32:	3104      	adds	r1, #4
    7e34:	4620      	mov	r0, r4
    7e36:	f7ff ff18 	bl	7c6a <uarte_nrfx_configure>
	if (err) {
    7e3a:	4604      	mov	r4, r0
    7e3c:	bb68      	cbnz	r0, 7e9a <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    7e3e:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    7e40:	f013 0f02 	tst.w	r3, #2
    7e44:	d12b      	bne.n	7e9e <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7e46:	2308      	movs	r3, #8
    7e48:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    7e4c:	7a33      	ldrb	r3, [r6, #8]
    7e4e:	b95b      	cbnz	r3, 7e68 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e50:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    7e54:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    7e58:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7e5c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7e60:	2301      	movs	r3, #1
    7e62:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e66:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    7e68:	6873      	ldr	r3, [r6, #4]
    7e6a:	f013 0f02 	tst.w	r3, #2
    7e6e:	d103      	bne.n	7e78 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    7e70:	f44f 7380 	mov.w	r3, #256	; 0x100
    7e74:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7e78:	6873      	ldr	r3, [r6, #4]
    7e7a:	f013 0f10 	tst.w	r3, #16
    7e7e:	d003      	beq.n	7e88 <uarte_instance_init+0x6e>
    7e80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    7e84:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    7e88:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7e8a:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7e8e:	2300      	movs	r3, #0
    7e90:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e94:	2301      	movs	r3, #1
    7e96:	60ab      	str	r3, [r5, #8]
    7e98:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    7e9a:	4620      	mov	r0, r4
    7e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    7e9e:	4639      	mov	r1, r7
    7ea0:	4628      	mov	r0, r5
    7ea2:	f7fb ff0b 	bl	3cbc <endtx_stoptx_ppi_init>
		if (err < 0) {
    7ea6:	2800      	cmp	r0, #0
    7ea8:	dacd      	bge.n	7e46 <uarte_instance_init+0x2c>
			return err;
    7eaa:	4604      	mov	r4, r0
    7eac:	e7f5      	b.n	7e9a <uarte_instance_init+0x80>

00007eae <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    7eae:	b510      	push	{r4, lr}
    7eb0:	4604      	mov	r4, r0
    7eb2:	2200      	movs	r2, #0
    7eb4:	2101      	movs	r1, #1
    7eb6:	2002      	movs	r0, #2
    7eb8:	f7fa fb52 	bl	2560 <z_arm_irq_priority_set>
    7ebc:	2002      	movs	r0, #2
    7ebe:	f7fa fb31 	bl	2524 <arch_irq_enable>
    7ec2:	2100      	movs	r1, #0
    7ec4:	4620      	mov	r0, r4
    7ec6:	f7ff ffa8 	bl	7e1a <uarte_instance_init>
    7eca:	bd10      	pop	{r4, pc}

00007ecc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    7ecc:	b510      	push	{r4, lr}
    7ece:	4604      	mov	r4, r0
    7ed0:	2200      	movs	r2, #0
    7ed2:	2101      	movs	r1, #1
    7ed4:	2028      	movs	r0, #40	; 0x28
    7ed6:	f7fa fb43 	bl	2560 <z_arm_irq_priority_set>
    7eda:	2028      	movs	r0, #40	; 0x28
    7edc:	f7fa fb22 	bl	2524 <arch_irq_enable>
    7ee0:	2100      	movs	r1, #0
    7ee2:	4620      	mov	r0, r4
    7ee4:	f7ff ff99 	bl	7e1a <uarte_instance_init>
    7ee8:	bd10      	pop	{r4, pc}

00007eea <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7eea:	4770      	bx	lr

00007eec <counter_sub>:
	return (a - b) & COUNTER_MAX;
    7eec:	1a40      	subs	r0, r0, r1
}
    7eee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ef2:	4770      	bx	lr

00007ef4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7ef4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7ef8:	009b      	lsls	r3, r3, #2
    7efa:	b29b      	uxth	r3, r3
    7efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7f00:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7f04:	2200      	movs	r2, #0
    7f06:	601a      	str	r2, [r3, #0]
    7f08:	681b      	ldr	r3, [r3, #0]
}
    7f0a:	4770      	bx	lr

00007f0c <absolute_time_to_cc>:
}
    7f0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7f10:	4770      	bx	lr

00007f12 <full_int_lock>:
	__asm__ volatile(
    7f12:	f04f 0320 	mov.w	r3, #32
    7f16:	f3ef 8011 	mrs	r0, BASEPRI
    7f1a:	f383 8812 	msr	BASEPRI_MAX, r3
    7f1e:	f3bf 8f6f 	isb	sy
}
    7f22:	4770      	bx	lr

00007f24 <full_int_unlock>:
	__asm__ volatile(
    7f24:	f380 8811 	msr	BASEPRI, r0
    7f28:	f3bf 8f6f 	isb	sy
}
    7f2c:	4770      	bx	lr

00007f2e <set_absolute_alarm>:
{
    7f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f30:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    7f32:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    7f36:	f7fb ff05 	bl	3d44 <get_comparator>
    7f3a:	4607      	mov	r7, r0
    7f3c:	e019      	b.n	7f72 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    7f3e:	2013      	movs	r0, #19
    7f40:	f000 fb19 	bl	8576 <z_impl_k_busy_wait>
}
    7f44:	e022      	b.n	7f8c <set_absolute_alarm+0x5e>
		event_clear(chan);
    7f46:	4630      	mov	r0, r6
    7f48:	f7ff ffd4 	bl	7ef4 <event_clear>
		event_enable(chan);
    7f4c:	4630      	mov	r0, r6
    7f4e:	f7fb ff01 	bl	3d54 <event_enable>
		set_comparator(chan, cc_val);
    7f52:	4629      	mov	r1, r5
    7f54:	4630      	mov	r0, r6
    7f56:	f7fb feeb 	bl	3d30 <set_comparator>
		now2 = counter();
    7f5a:	f7fb ff0f 	bl	3d7c <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    7f5e:	4284      	cmp	r4, r0
    7f60:	d01e      	beq.n	7fa0 <set_absolute_alarm+0x72>
    7f62:	1c81      	adds	r1, r0, #2
    7f64:	4628      	mov	r0, r5
    7f66:	f7ff ffc1 	bl	7eec <counter_sub>
	} while ((now2 != now) &&
    7f6a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7f6e:	d917      	bls.n	7fa0 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    7f70:	462f      	mov	r7, r5
		now = counter();
    7f72:	f7fb ff03 	bl	3d7c <counter>
    7f76:	4604      	mov	r4, r0
		set_comparator(chan, now);
    7f78:	4601      	mov	r1, r0
    7f7a:	4630      	mov	r0, r6
    7f7c:	f7fb fed8 	bl	3d30 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    7f80:	4621      	mov	r1, r4
    7f82:	4638      	mov	r0, r7
    7f84:	f7ff ffb2 	bl	7eec <counter_sub>
    7f88:	2801      	cmp	r0, #1
    7f8a:	d0d8      	beq.n	7f3e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    7f8c:	1ca7      	adds	r7, r4, #2
    7f8e:	4639      	mov	r1, r7
    7f90:	4628      	mov	r0, r5
    7f92:	f7ff ffab 	bl	7eec <counter_sub>
    7f96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7f9a:	d9d4      	bls.n	7f46 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    7f9c:	463d      	mov	r5, r7
    7f9e:	e7d2      	b.n	7f46 <set_absolute_alarm+0x18>
}
    7fa0:	4628      	mov	r0, r5
    7fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007fa4 <compare_set>:
{
    7fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fa6:	b083      	sub	sp, #12
    7fa8:	4604      	mov	r4, r0
    7faa:	4617      	mov	r7, r2
    7fac:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    7fae:	f7fb feeb 	bl	3d88 <compare_int_lock>
    7fb2:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    7fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7fb6:	9301      	str	r3, [sp, #4]
    7fb8:	9b08      	ldr	r3, [sp, #32]
    7fba:	9300      	str	r3, [sp, #0]
    7fbc:	463a      	mov	r2, r7
    7fbe:	462b      	mov	r3, r5
    7fc0:	4620      	mov	r0, r4
    7fc2:	f7fb ffcf 	bl	3f64 <compare_set_nolocks>
    7fc6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    7fc8:	4631      	mov	r1, r6
    7fca:	4620      	mov	r0, r4
    7fcc:	f7fb ff40 	bl	3e50 <compare_int_unlock>
}
    7fd0:	4628      	mov	r0, r5
    7fd2:	b003      	add	sp, #12
    7fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007fd6 <sys_clock_cycle_get_32>:
{
    7fd6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    7fd8:	f7fb ffa4 	bl	3f24 <z_nrf_rtc_timer_read>
}
    7fdc:	bd08      	pop	{r3, pc}

00007fde <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    7fde:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7fe0:	f7fe fbfe 	bl	67e0 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    7fe4:	bd08      	pop	{r3, pc}

00007fe6 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    7fe6:	b510      	push	{r4, lr}
    7fe8:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7fea:	f7fa f95d 	bl	22a8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7fee:	f7fa fa19 	bl	2424 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    7ff2:	4620      	mov	r0, r4
    7ff4:	f7ff fff3 	bl	7fde <hw_cc3xx_init_internal>
	return res;
}
    7ff8:	bd10      	pop	{r4, pc}

00007ffa <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    7ffa:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    7ffc:	4780      	blx	r0
}
    7ffe:	bd08      	pop	{r3, pc}

00008000 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    8000:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    8002:	f000 fab8 	bl	8576 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    8006:	bd08      	pop	{r3, pc}

00008008 <nrfx_clock_enable>:
{
    8008:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    800a:	2000      	movs	r0, #0
    800c:	f7fa fa9a 	bl	2544 <arch_irq_is_enabled>
    8010:	b100      	cbz	r0, 8014 <nrfx_clock_enable+0xc>
}
    8012:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8014:	f7fa fa86 	bl	2524 <arch_irq_enable>
    8018:	e7fb      	b.n	8012 <nrfx_clock_enable+0xa>

0000801a <pin_is_task_output>:
{
    801a:	b510      	push	{r4, lr}
    801c:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    801e:	f7fc fbe3 	bl	47e8 <pin_is_output>
    8022:	b128      	cbz	r0, 8030 <pin_is_task_output+0x16>
    8024:	4620      	mov	r0, r4
    8026:	f7fc fbc9 	bl	47bc <pin_in_use_by_te>
    802a:	b118      	cbz	r0, 8034 <pin_is_task_output+0x1a>
    802c:	2001      	movs	r0, #1
    802e:	e000      	b.n	8032 <pin_is_task_output+0x18>
    8030:	2000      	movs	r0, #0
}
    8032:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8034:	2000      	movs	r0, #0
    8036:	e7fc      	b.n	8032 <pin_is_task_output+0x18>

00008038 <pin_is_input>:
{
    8038:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    803a:	f7fc fbd5 	bl	47e8 <pin_is_output>
    803e:	f080 0001 	eor.w	r0, r0, #1
}
    8042:	b2c0      	uxtb	r0, r0
    8044:	bd08      	pop	{r3, pc}

00008046 <gpiote_polarity_to_trigger>:
}
    8046:	4770      	bx	lr

00008048 <gpiote_trigger_to_polarity>:
}
    8048:	4770      	bx	lr

0000804a <is_level>:
}
    804a:	2803      	cmp	r0, #3
    804c:	bf94      	ite	ls
    804e:	2000      	movls	r0, #0
    8050:	2001      	movhi	r0, #1
    8052:	4770      	bx	lr

00008054 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    8054:	b508      	push	{r3, lr}
  _DoInit();
    8056:	f7fd f873 	bl	5140 <_DoInit>
}
    805a:	bd08      	pop	{r3, pc}

0000805c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    805c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    805e:	f7ff fff9 	bl	8054 <SEGGER_RTT_Init>

	return 0;
}
    8062:	2000      	movs	r0, #0
    8064:	bd08      	pop	{r3, pc}

00008066 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8066:	b148      	cbz	r0, 807c <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8068:	68c3      	ldr	r3, [r0, #12]
    806a:	8818      	ldrh	r0, [r3, #0]
    806c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8070:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    8074:	bf14      	ite	ne
    8076:	2000      	movne	r0, #0
    8078:	2001      	moveq	r0, #1
    807a:	4770      	bx	lr
		return false;
    807c:	2000      	movs	r0, #0
}
    807e:	4770      	bx	lr

00008080 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8080:	68c2      	ldr	r2, [r0, #12]
    8082:	6903      	ldr	r3, [r0, #16]
    8084:	431a      	orrs	r2, r3
    8086:	f012 0203 	ands.w	r2, r2, #3
    808a:	d10d      	bne.n	80a8 <create_free_list+0x28>
	slab->free_list = NULL;
    808c:	2100      	movs	r1, #0
    808e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8090:	e005      	b.n	809e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    8092:	6941      	ldr	r1, [r0, #20]
    8094:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    8096:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    8098:	68c1      	ldr	r1, [r0, #12]
    809a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    809c:	3201      	adds	r2, #1
    809e:	6881      	ldr	r1, [r0, #8]
    80a0:	4291      	cmp	r1, r2
    80a2:	d8f6      	bhi.n	8092 <create_free_list+0x12>
	return 0;
    80a4:	2000      	movs	r0, #0
    80a6:	4770      	bx	lr
		return -EINVAL;
    80a8:	f06f 0015 	mvn.w	r0, #21
}
    80ac:	4770      	bx	lr

000080ae <k_mem_slab_init>:
{
    80ae:	b510      	push	{r4, lr}
    80b0:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    80b2:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    80b4:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    80b6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    80b8:	2300      	movs	r3, #0
    80ba:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    80bc:	f7ff ffe0 	bl	8080 <create_free_list>
	if (rc < 0) {
    80c0:	2800      	cmp	r0, #0
    80c2:	db01      	blt.n	80c8 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    80c4:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    80c6:	6064      	str	r4, [r4, #4]
}
    80c8:	bd10      	pop	{r4, pc}

000080ca <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    80ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80cc:	4604      	mov	r4, r0
    80ce:	460d      	mov	r5, r1
	__asm__ volatile(
    80d0:	f04f 0320 	mov.w	r3, #32
    80d4:	f3ef 8611 	mrs	r6, BASEPRI
    80d8:	f383 8812 	msr	BASEPRI_MAX, r3
    80dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    80e0:	6943      	ldr	r3, [r0, #20]
    80e2:	b163      	cbz	r3, 80fe <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    80e4:	682b      	ldr	r3, [r5, #0]
    80e6:	6962      	ldr	r2, [r4, #20]
    80e8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    80ea:	682b      	ldr	r3, [r5, #0]
    80ec:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    80ee:	69a3      	ldr	r3, [r4, #24]
    80f0:	3b01      	subs	r3, #1
    80f2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    80f4:	f386 8811 	msr	BASEPRI, r6
    80f8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    80fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80fe:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8102:	f000 f98f 	bl	8424 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8106:	2800      	cmp	r0, #0
    8108:	d0ec      	beq.n	80e4 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    810a:	682a      	ldr	r2, [r5, #0]
    810c:	2100      	movs	r1, #0
    810e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8112:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8114:	f000 f8c4 	bl	82a0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8118:	4631      	mov	r1, r6
    811a:	4638      	mov	r0, r7
    811c:	f7fd fd82 	bl	5c24 <z_reschedule>
			return;
    8120:	e7ec      	b.n	80fc <k_mem_slab_free+0x32>

00008122 <setup_thread_stack>:
{
    8122:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8124:	3207      	adds	r2, #7
    8126:	f022 0207 	bic.w	r2, r2, #7
    812a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    812e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    8132:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    8136:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    813a:	2200      	movs	r2, #0
    813c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    8140:	18c8      	adds	r0, r1, r3
    8142:	bc10      	pop	{r4}
    8144:	4770      	bx	lr

00008146 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8146:	f3ef 8005 	mrs	r0, IPSR
}
    814a:	3800      	subs	r0, #0
    814c:	bf18      	it	ne
    814e:	2001      	movne	r0, #1
    8150:	4770      	bx	lr

00008152 <k_thread_name_get>:
}
    8152:	3074      	adds	r0, #116	; 0x74
    8154:	4770      	bx	lr

00008156 <z_impl_k_thread_start>:
{
    8156:	b508      	push	{r3, lr}
	z_sched_start(thread);
    8158:	f7fd fe8e 	bl	5e78 <z_sched_start>
}
    815c:	bd08      	pop	{r3, pc}

0000815e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    815e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    8160:	2400      	movs	r4, #0
    8162:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    8164:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    8166:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    8168:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    816a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    816c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    816e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    8170:	bc10      	pop	{r4}
    8172:	4770      	bx	lr

00008174 <z_impl_k_thread_create>:
{
    8174:	b5f0      	push	{r4, r5, r6, r7, lr}
    8176:	b087      	sub	sp, #28
    8178:	4604      	mov	r4, r0
    817a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    817e:	2500      	movs	r5, #0
    8180:	9505      	str	r5, [sp, #20]
    8182:	9d10      	ldr	r5, [sp, #64]	; 0x40
    8184:	9504      	str	r5, [sp, #16]
    8186:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8188:	9503      	str	r5, [sp, #12]
    818a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    818c:	9502      	str	r5, [sp, #8]
    818e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8190:	9501      	str	r5, [sp, #4]
    8192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8194:	9500      	str	r5, [sp, #0]
    8196:	f7fd fafd 	bl	5794 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    819a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    819e:	bf08      	it	eq
    81a0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    81a4:	d102      	bne.n	81ac <z_impl_k_thread_create+0x38>
}
    81a6:	4620      	mov	r0, r4
    81a8:	b007      	add	sp, #28
    81aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    81ac:	4632      	mov	r2, r6
    81ae:	463b      	mov	r3, r7
    81b0:	4620      	mov	r0, r4
    81b2:	f7fd fadd 	bl	5770 <schedule_new_thread>
    81b6:	e7f6      	b.n	81a6 <z_impl_k_thread_create+0x32>

000081b8 <z_pm_save_idle_exit>:
{
    81b8:	b508      	push	{r3, lr}
	pm_system_resume();
    81ba:	f7f9 ff51 	bl	2060 <pm_system_resume>
	sys_clock_idle_exit();
    81be:	f7ff fe94 	bl	7eea <sys_clock_idle_exit>
}
    81c2:	bd08      	pop	{r3, pc}

000081c4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    81c4:	4288      	cmp	r0, r1
    81c6:	da00      	bge.n	81ca <new_prio_for_inheritance+0x6>
    81c8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    81ca:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    81ce:	db01      	blt.n	81d4 <new_prio_for_inheritance+0x10>
    81d0:	4608      	mov	r0, r1
    81d2:	4770      	bx	lr
    81d4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    81d8:	4770      	bx	lr

000081da <adjust_owner_prio>:
{
    81da:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    81dc:	6880      	ldr	r0, [r0, #8]
    81de:	f990 300e 	ldrsb.w	r3, [r0, #14]
    81e2:	428b      	cmp	r3, r1
    81e4:	d101      	bne.n	81ea <adjust_owner_prio+0x10>
	return false;
    81e6:	2000      	movs	r0, #0
}
    81e8:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    81ea:	f7fd fe93 	bl	5f14 <z_set_prio>
    81ee:	e7fb      	b.n	81e8 <adjust_owner_prio+0xe>

000081f0 <z_impl_k_mutex_init>:
{
    81f0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    81f2:	2000      	movs	r0, #0
    81f4:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    81f6:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    81f8:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    81fa:	605b      	str	r3, [r3, #4]
}
    81fc:	4770      	bx	lr

000081fe <thread_active_elsewhere>:
}
    81fe:	2000      	movs	r0, #0
    8200:	4770      	bx	lr

00008202 <pended_on_thread>:
}
    8202:	6880      	ldr	r0, [r0, #8]
    8204:	4770      	bx	lr

00008206 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    8206:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    820a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    820e:	4283      	cmp	r3, r0
    8210:	d001      	beq.n	8216 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    8212:	1ac0      	subs	r0, r0, r3
    8214:	4770      	bx	lr
	return 0;
    8216:	2000      	movs	r0, #0
}
    8218:	4770      	bx	lr

0000821a <z_unpend_thread_no_timeout>:
{
    821a:	b538      	push	{r3, r4, r5, lr}
    821c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    821e:	2300      	movs	r3, #0
	__asm__ volatile(
    8220:	f04f 0220 	mov.w	r2, #32
    8224:	f3ef 8511 	mrs	r5, BASEPRI
    8228:	f382 8812 	msr	BASEPRI_MAX, r2
    822c:	f3bf 8f6f 	isb	sy
    8230:	b98b      	cbnz	r3, 8256 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8232:	4620      	mov	r0, r4
    8234:	f7ff ffe5 	bl	8202 <pended_on_thread>
    8238:	4621      	mov	r1, r4
    823a:	f000 f822 	bl	8282 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    823e:	7b63      	ldrb	r3, [r4, #13]
    8240:	f023 0302 	bic.w	r3, r3, #2
    8244:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8246:	2300      	movs	r3, #0
    8248:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    824a:	f385 8811 	msr	BASEPRI, r5
    824e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8252:	2301      	movs	r3, #1
    8254:	e7ec      	b.n	8230 <z_unpend_thread_no_timeout+0x16>
}
    8256:	bd38      	pop	{r3, r4, r5, pc}

00008258 <z_reschedule_irqlock>:
{
    8258:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    825a:	4603      	mov	r3, r0
    825c:	b920      	cbnz	r0, 8268 <z_reschedule_irqlock+0x10>
    825e:	f3ef 8205 	mrs	r2, IPSR
    8262:	b942      	cbnz	r2, 8276 <z_reschedule_irqlock+0x1e>
    8264:	2201      	movs	r2, #1
    8266:	e000      	b.n	826a <z_reschedule_irqlock+0x12>
    8268:	2200      	movs	r2, #0
	if (resched(key)) {
    826a:	b932      	cbnz	r2, 827a <z_reschedule_irqlock+0x22>
    826c:	f383 8811 	msr	BASEPRI, r3
    8270:	f3bf 8f6f 	isb	sy
}
    8274:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8276:	2200      	movs	r2, #0
    8278:	e7f7      	b.n	826a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    827a:	4618      	mov	r0, r3
    827c:	f7fa f9a6 	bl	25cc <arch_swap>
	return ret;
    8280:	e7f8      	b.n	8274 <z_reschedule_irqlock+0x1c>

00008282 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8282:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    8284:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    8286:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8288:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    828a:	2300      	movs	r3, #0
    828c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    828e:	604b      	str	r3, [r1, #4]
}
    8290:	4770      	bx	lr

00008292 <z_priq_dumb_best>:
{
    8292:	4603      	mov	r3, r0
	return list->head == list;
    8294:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8296:	4283      	cmp	r3, r0
    8298:	d000      	beq.n	829c <z_priq_dumb_best+0xa>
}
    829a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    829c:	2000      	movs	r0, #0
	return thread;
    829e:	e7fc      	b.n	829a <z_priq_dumb_best+0x8>

000082a0 <z_ready_thread>:
{
    82a0:	b538      	push	{r3, r4, r5, lr}
    82a2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    82a4:	2300      	movs	r3, #0
	__asm__ volatile(
    82a6:	f04f 0220 	mov.w	r2, #32
    82aa:	f3ef 8511 	mrs	r5, BASEPRI
    82ae:	f382 8812 	msr	BASEPRI_MAX, r2
    82b2:	f3bf 8f6f 	isb	sy
    82b6:	e007      	b.n	82c8 <z_ready_thread+0x28>
			ready_thread(thread);
    82b8:	4620      	mov	r0, r4
    82ba:	f7fd fd9d 	bl	5df8 <ready_thread>
	__asm__ volatile(
    82be:	f385 8811 	msr	BASEPRI, r5
    82c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    82c6:	2301      	movs	r3, #1
    82c8:	b92b      	cbnz	r3, 82d6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    82ca:	4620      	mov	r0, r4
    82cc:	f7ff ff97 	bl	81fe <thread_active_elsewhere>
    82d0:	2800      	cmp	r0, #0
    82d2:	d1f4      	bne.n	82be <z_ready_thread+0x1e>
    82d4:	e7f0      	b.n	82b8 <z_ready_thread+0x18>
}
    82d6:	bd38      	pop	{r3, r4, r5, pc}

000082d8 <z_thread_timeout>:
{
    82d8:	b570      	push	{r4, r5, r6, lr}
    82da:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    82dc:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    82e0:	2300      	movs	r3, #0
	__asm__ volatile(
    82e2:	f04f 0220 	mov.w	r2, #32
    82e6:	f3ef 8611 	mrs	r6, BASEPRI
    82ea:	f382 8812 	msr	BASEPRI_MAX, r2
    82ee:	f3bf 8f6f 	isb	sy
    82f2:	e019      	b.n	8328 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    82f4:	4628      	mov	r0, r5
    82f6:	f7ff ff84 	bl	8202 <pended_on_thread>
    82fa:	4629      	mov	r1, r5
    82fc:	f7ff ffc1 	bl	8282 <z_priq_dumb_remove>
    8300:	7b6b      	ldrb	r3, [r5, #13]
    8302:	f023 0302 	bic.w	r3, r3, #2
    8306:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    8308:	2300      	movs	r3, #0
    830a:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    830c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8310:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    8314:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8318:	4628      	mov	r0, r5
    831a:	f7fd fd6d 	bl	5df8 <ready_thread>
	__asm__ volatile(
    831e:	f386 8811 	msr	BASEPRI, r6
    8322:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8326:	2301      	movs	r3, #1
    8328:	b94b      	cbnz	r3, 833e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    832a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    832e:	f013 0f28 	tst.w	r3, #40	; 0x28
    8332:	d1f4      	bne.n	831e <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    8334:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8338:	2b00      	cmp	r3, #0
    833a:	d1db      	bne.n	82f4 <z_thread_timeout+0x1c>
    833c:	e7e6      	b.n	830c <z_thread_timeout+0x34>
}
    833e:	bd70      	pop	{r4, r5, r6, pc}

00008340 <add_to_waitq_locked>:
{
    8340:	b570      	push	{r4, r5, r6, lr}
    8342:	4605      	mov	r5, r0
    8344:	460e      	mov	r6, r1
	unready_thread(thread);
    8346:	f7fd fdb5 	bl	5eb4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    834a:	7b6b      	ldrb	r3, [r5, #13]
    834c:	f043 0302 	orr.w	r3, r3, #2
    8350:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8352:	b1b6      	cbz	r6, 8382 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    8354:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    8356:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8358:	42a6      	cmp	r6, r4
    835a:	d019      	beq.n	8390 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    835c:	b164      	cbz	r4, 8378 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    835e:	4621      	mov	r1, r4
    8360:	4628      	mov	r0, r5
    8362:	f7ff ff50 	bl	8206 <z_sched_prio_cmp>
    8366:	2800      	cmp	r0, #0
    8368:	dc0c      	bgt.n	8384 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    836a:	b12c      	cbz	r4, 8378 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    836c:	6873      	ldr	r3, [r6, #4]
    836e:	429c      	cmp	r4, r3
    8370:	d002      	beq.n	8378 <add_to_waitq_locked+0x38>
    8372:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8374:	2c00      	cmp	r4, #0
    8376:	d1f1      	bne.n	835c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    8378:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    837a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    837c:	606b      	str	r3, [r5, #4]
	tail->next = node;
    837e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8380:	6075      	str	r5, [r6, #4]
}
    8382:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    8384:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8386:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8388:	602c      	str	r4, [r5, #0]
	prev->next = node;
    838a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    838c:	6065      	str	r5, [r4, #4]
}
    838e:	e7f8      	b.n	8382 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8390:	2400      	movs	r4, #0
    8392:	e7e3      	b.n	835c <add_to_waitq_locked+0x1c>

00008394 <pend>:
{
    8394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8398:	4605      	mov	r5, r0
    839a:	460f      	mov	r7, r1
    839c:	4691      	mov	r9, r2
    839e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    83a0:	2400      	movs	r4, #0
	__asm__ volatile(
    83a2:	f04f 0320 	mov.w	r3, #32
    83a6:	f3ef 8611 	mrs	r6, BASEPRI
    83aa:	f383 8812 	msr	BASEPRI_MAX, r3
    83ae:	f3bf 8f6f 	isb	sy
    83b2:	b94c      	cbnz	r4, 83c8 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    83b4:	4639      	mov	r1, r7
    83b6:	4628      	mov	r0, r5
    83b8:	f7ff ffc2 	bl	8340 <add_to_waitq_locked>
	__asm__ volatile(
    83bc:	f386 8811 	msr	BASEPRI, r6
    83c0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    83c4:	2401      	movs	r4, #1
    83c6:	e7f4      	b.n	83b2 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    83c8:	464a      	mov	r2, r9
    83ca:	4643      	mov	r3, r8
    83cc:	4628      	mov	r0, r5
    83ce:	f7fd fbc7 	bl	5b60 <add_thread_timeout>
}
    83d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000083d6 <z_unpend1_no_timeout>:
{
    83d6:	b570      	push	{r4, r5, r6, lr}
    83d8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    83da:	2300      	movs	r3, #0
	__asm__ volatile(
    83dc:	f04f 0220 	mov.w	r2, #32
    83e0:	f3ef 8511 	mrs	r5, BASEPRI
    83e4:	f382 8812 	msr	BASEPRI_MAX, r2
    83e8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    83ec:	461c      	mov	r4, r3
    83ee:	e00f      	b.n	8410 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    83f0:	f7ff ff07 	bl	8202 <pended_on_thread>
    83f4:	4621      	mov	r1, r4
    83f6:	f7ff ff44 	bl	8282 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    83fa:	7b63      	ldrb	r3, [r4, #13]
    83fc:	f023 0302 	bic.w	r3, r3, #2
    8400:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8402:	2300      	movs	r3, #0
    8404:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    8406:	f385 8811 	msr	BASEPRI, r5
    840a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    840e:	2301      	movs	r3, #1
    8410:	b933      	cbnz	r3, 8420 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    8412:	4630      	mov	r0, r6
    8414:	f7ff ff3d 	bl	8292 <z_priq_dumb_best>
		if (thread != NULL) {
    8418:	4604      	mov	r4, r0
    841a:	2800      	cmp	r0, #0
    841c:	d1e8      	bne.n	83f0 <z_unpend1_no_timeout+0x1a>
    841e:	e7f2      	b.n	8406 <z_unpend1_no_timeout+0x30>
}
    8420:	4620      	mov	r0, r4
    8422:	bd70      	pop	{r4, r5, r6, pc}

00008424 <z_unpend_first_thread>:
{
    8424:	b570      	push	{r4, r5, r6, lr}
    8426:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    8428:	2300      	movs	r3, #0
	__asm__ volatile(
    842a:	f04f 0220 	mov.w	r2, #32
    842e:	f3ef 8511 	mrs	r5, BASEPRI
    8432:	f382 8812 	msr	BASEPRI_MAX, r2
    8436:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    843a:	461c      	mov	r4, r3
    843c:	e013      	b.n	8466 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    843e:	f7ff fee0 	bl	8202 <pended_on_thread>
    8442:	4621      	mov	r1, r4
    8444:	f7ff ff1d 	bl	8282 <z_priq_dumb_remove>
    8448:	7b63      	ldrb	r3, [r4, #13]
    844a:	f023 0302 	bic.w	r3, r3, #2
    844e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8450:	2300      	movs	r3, #0
    8452:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    8454:	f104 0018 	add.w	r0, r4, #24
    8458:	f000 f82a 	bl	84b0 <z_abort_timeout>
	__asm__ volatile(
    845c:	f385 8811 	msr	BASEPRI, r5
    8460:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8464:	2301      	movs	r3, #1
    8466:	b933      	cbnz	r3, 8476 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    8468:	4630      	mov	r0, r6
    846a:	f7ff ff12 	bl	8292 <z_priq_dumb_best>
		if (thread != NULL) {
    846e:	4604      	mov	r4, r0
    8470:	2800      	cmp	r0, #0
    8472:	d1e4      	bne.n	843e <z_unpend_first_thread+0x1a>
    8474:	e7f2      	b.n	845c <z_unpend_first_thread+0x38>
}
    8476:	4620      	mov	r0, r4
    8478:	bd70      	pop	{r4, r5, r6, pc}

0000847a <init_ready_q>:
	sys_dlist_init(&rq->runq);
    847a:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    847c:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    847e:	6083      	str	r3, [r0, #8]
}
    8480:	4770      	bx	lr

00008482 <remove_timeout>:
{
    8482:	b538      	push	{r3, r4, r5, lr}
    8484:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    8486:	f7fd ff79 	bl	637c <next>
    848a:	b148      	cbz	r0, 84a0 <remove_timeout+0x1e>
    848c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    848e:	6920      	ldr	r0, [r4, #16]
    8490:	6965      	ldr	r5, [r4, #20]
    8492:	6913      	ldr	r3, [r2, #16]
    8494:	6951      	ldr	r1, [r2, #20]
    8496:	181b      	adds	r3, r3, r0
    8498:	eb45 0101 	adc.w	r1, r5, r1
    849c:	6113      	str	r3, [r2, #16]
    849e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    84a0:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    84a2:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    84a4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    84a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    84a8:	2300      	movs	r3, #0
    84aa:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    84ac:	6063      	str	r3, [r4, #4]
}
    84ae:	bd38      	pop	{r3, r4, r5, pc}

000084b0 <z_abort_timeout>:
{
    84b0:	b570      	push	{r4, r5, r6, lr}
    84b2:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    84b4:	2300      	movs	r3, #0
	__asm__ volatile(
    84b6:	f04f 0220 	mov.w	r2, #32
    84ba:	f3ef 8611 	mrs	r6, BASEPRI
    84be:	f382 8812 	msr	BASEPRI_MAX, r2
    84c2:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    84c6:	f06f 0015 	mvn.w	r0, #21
    84ca:	e008      	b.n	84de <z_abort_timeout+0x2e>
			remove_timeout(to);
    84cc:	4620      	mov	r0, r4
    84ce:	f7ff ffd8 	bl	8482 <remove_timeout>
			ret = 0;
    84d2:	4628      	mov	r0, r5
	__asm__ volatile(
    84d4:	f386 8811 	msr	BASEPRI, r6
    84d8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    84dc:	2301      	movs	r3, #1
    84de:	461d      	mov	r5, r3
    84e0:	b91b      	cbnz	r3, 84ea <z_abort_timeout+0x3a>
	return node->next != NULL;
    84e2:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    84e4:	2b00      	cmp	r3, #0
    84e6:	d1f1      	bne.n	84cc <z_abort_timeout+0x1c>
    84e8:	e7f4      	b.n	84d4 <z_abort_timeout+0x24>
}
    84ea:	bd70      	pop	{r4, r5, r6, pc}

000084ec <z_get_next_timeout_expiry>:
{
    84ec:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    84ee:	2300      	movs	r3, #0
	__asm__ volatile(
    84f0:	f04f 0220 	mov.w	r2, #32
    84f4:	f3ef 8411 	mrs	r4, BASEPRI
    84f8:	f382 8812 	msr	BASEPRI_MAX, r2
    84fc:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    8500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	LOCKED(&timeout_lock) {
    8504:	b93b      	cbnz	r3, 8516 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    8506:	f7fd ff51 	bl	63ac <next_timeout>
	__asm__ volatile(
    850a:	f384 8811 	msr	BASEPRI, r4
    850e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8512:	2301      	movs	r3, #1
    8514:	e7f6      	b.n	8504 <z_get_next_timeout_expiry+0x18>
}
    8516:	bd10      	pop	{r4, pc}

00008518 <z_set_timeout_expiry>:
{
    8518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    851a:	4606      	mov	r6, r0
    851c:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    851e:	2300      	movs	r3, #0
	__asm__ volatile(
    8520:	f04f 0220 	mov.w	r2, #32
    8524:	f3ef 8511 	mrs	r5, BASEPRI
    8528:	f382 8812 	msr	BASEPRI_MAX, r2
    852c:	f3bf 8f6f 	isb	sy
    8530:	e00a      	b.n	8548 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    8532:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    8534:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8538:	2801      	cmp	r0, #1
    853a:	dd00      	ble.n	853e <z_set_timeout_expiry+0x26>
    853c:	b97c      	cbnz	r4, 855e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    853e:	f385 8811 	msr	BASEPRI, r5
    8542:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8546:	2301      	movs	r3, #1
    8548:	461c      	mov	r4, r3
    854a:	b97b      	cbnz	r3, 856c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    854c:	f7fd ff2e 	bl	63ac <next_timeout>
			      || (ticks <= next_to);
    8550:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8554:	d0ed      	beq.n	8532 <z_set_timeout_expiry+0x1a>
    8556:	42b0      	cmp	r0, r6
    8558:	dbec      	blt.n	8534 <z_set_timeout_expiry+0x1c>
    855a:	2401      	movs	r4, #1
    855c:	e7ea      	b.n	8534 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    855e:	4639      	mov	r1, r7
    8560:	42b0      	cmp	r0, r6
    8562:	bfa8      	it	ge
    8564:	4630      	movge	r0, r6
    8566:	f7fb fdf9 	bl	415c <sys_clock_set_timeout>
    856a:	e7e8      	b.n	853e <z_set_timeout_expiry+0x26>
}
    856c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000856e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    856e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8570:	f7fe f84e 	bl	6610 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8574:	bd08      	pop	{r3, pc}

00008576 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8576:	b900      	cbnz	r0, 857a <z_impl_k_busy_wait+0x4>
    8578:	4770      	bx	lr
{
    857a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    857c:	f7fa fea6 	bl	32cc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8580:	bd08      	pop	{r3, pc}

00008582 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    8582:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    8584:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    8586:	2300      	movs	r3, #0
    8588:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    858a:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    858e:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    8590:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    8592:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    8594:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    8596:	6343      	str	r3, [r0, #52]	; 0x34
}
    8598:	4770      	bx	lr

0000859a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    859a:	b510      	push	{r4, lr}
    859c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    859e:	f7ff ff87 	bl	84b0 <z_abort_timeout>

	if (inactive) {
    85a2:	b9a0      	cbnz	r0, 85ce <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    85a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    85a6:	b10b      	cbz	r3, 85ac <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    85a8:	4620      	mov	r0, r4
    85aa:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    85ac:	f104 0018 	add.w	r0, r4, #24
    85b0:	f7ff ff11 	bl	83d6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    85b4:	b158      	cbz	r0, 85ce <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    85b6:	f7ff fe73 	bl	82a0 <z_ready_thread>
	__asm__ volatile(
    85ba:	f04f 0320 	mov.w	r3, #32
    85be:	f3ef 8011 	mrs	r0, BASEPRI
    85c2:	f383 8812 	msr	BASEPRI_MAX, r3
    85c6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    85ca:	f7ff fe45 	bl	8258 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    85ce:	bd10      	pop	{r4, pc}

000085d0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    85d0:	f7fb beb8 	b.w	4344 <SystemInit>
