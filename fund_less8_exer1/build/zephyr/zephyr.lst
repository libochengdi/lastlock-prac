
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002840 	.word	0x20002840
}
   4:	00002181 	.word	0x00002181
   8:	0000ad3d 	.word	0x0000ad3d
   c:	00002139 	.word	0x00002139
  10:	00002139 	.word	0x00002139
  14:	00002139 	.word	0x00002139
  18:	00002139 	.word	0x00002139
	...
  2c:	00001d01 	.word	0x00001d01
  30:	00002139 	.word	0x00002139
  34:	00000000 	.word	0x00000000
  38:	00001ca9 	.word	0x00001ca9
  3c:	00002139 	.word	0x00002139

00000040 <_irq_vector_table>:
  40:	00001ded 00001ded 00001ded 00001ded     ................
  50:	00001ded 00001ded 00001ded 00001ded     ................
  60:	00001ded 00001ded 00001ded 00001ded     ................
  70:	00001ded 00001ded 00001ded 00001ded     ................
  80:	00001ded 00001ded 00001ded 00001ded     ................
  90:	00001ded 00001ded 00001ded 00001ded     ................
  a0:	00001ded 00001ded 00001ded 00001ded     ................
  b0:	00001ded 00001ded 00001ded 00001ded     ................
  c0:	00001ded 00001ded 00001ded 00001ded     ................
  d0:	00001ded 00001ded 00001ded 00001ded     ................
  e0:	00001ded 00001ded 00001ded 00001ded     ................
  f0:	00001ded 00001ded 00001ded 00001ded     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0xf6>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <__data_size+0x86>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <__data_size+0x12>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <__data_size+0x44>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <__data_size+0x264>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <__data_size+0x264>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <__data_size+0x70>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <__data_size+0x268>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <__data_size+0x268>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <__data_size+0x82>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <__data_size+0x8a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0x132>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <__data_size+0xc4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <__data_size+0xc2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <__data_size+0x290>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0xec>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <__data_size+0xea>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <__data_size+0x298>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <__data_size+0x78>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0x10c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <__data_size+0x25e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0x1ac>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0x11e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <__data_size+0x28c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <__data_size+0x82>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <__data_size+0x82>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0x17c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <__data_size+0x288>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <__data_size+0x288>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0x1a4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <__data_size+0x280>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <__data_size+0x280>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <__data_size+0x9e>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <__data_size+0x1fe>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <__data_size+0x284>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <__data_size+0x284>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <__data_size+0x228>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <__data_size+0x27c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <__data_size+0x27c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <__data_size+0x270>
     38c:	d016      	beq.n	3bc <__data_size+0x26c>
     38e:	b15e      	cbz	r6, 3a8 <__data_size+0x258>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <__data_size+0x82>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <__data_size+0x44>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <__data_size+0x70>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <__data_size+0x23e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <__data_size+0x23e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <__data_size+0x228>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0x1a4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <__data_size+0x1fe>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0x17c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0x128>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <__data_size+0xc4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0xec>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <get_access>:
/* STEP 3 - Initialize the available instances of this resource */
volatile uint32_t available_instance_count = 10;

// Function for getting access of resource
void get_access(void)
{
     3f4:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     3f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     3fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     3fe:	4806      	ldr	r0, [pc, #24]	; (418 <CONFIG_FLASH_SIZE+0x18>)
     400:	f006 f824 	bl	644c <z_impl_k_sem_take>
	/* STEP 10.1 - Get semaphore before access to the resource */
	k_sem_take(&instance_monitor_sem, K_FOREVER);

	/* STEP 6.1 - Decrement available resource */
	available_instance_count--;
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <CONFIG_FLASH_SIZE+0x1c>)
     406:	681a      	ldr	r2, [r3, #0]
     408:	3a01      	subs	r2, #1
     40a:	601a      	str	r2, [r3, #0]
	printk("Resource taken and available_insrtance count is %d\n\r", available_instance_count);
     40c:	6819      	ldr	r1, [r3, #0]
     40e:	4804      	ldr	r0, [pc, #16]	; (420 <CONFIG_FLASH_SIZE+0x20>)
     410:	f00a fb1a 	bl	aa48 <printk>

}
     414:	bd08      	pop	{r3, pc}
     416:	bf00      	nop
     418:	2000021c 	.word	0x2000021c
     41c:	20000000 	.word	0x20000000
     420:	0000bb78 	.word	0x0000bb78

00000424 <consumer>:
	}
}

/* STEP 5 - Consumer thread obtaining access to instance */
void consumer(void)
{
     424:	b508      	push	{r3, lr}
	printf("Consumer thread started\n\r");
     426:	4812      	ldr	r0, [pc, #72]	; (470 <consumer+0x4c>)
     428:	f002 f83a 	bl	24a0 <printf>
	while (1) {
		get_access();
     42c:	f7ff ffe2 	bl	3f4 <get_access>
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
     430:	f002 f8a2 	bl	2578 <z_impl_sys_rand32_get>
		// Assume the resource instance access is obtained at this point
		k_msleep(sys_rand32_get() % 10);
     434:	4b0f      	ldr	r3, [pc, #60]	; (474 <consumer+0x50>)
     436:	fba3 2300 	umull	r2, r3, r3, r0
     43a:	08db      	lsrs	r3, r3, #3
     43c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     440:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     444:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
     448:	17dd      	asrs	r5, r3, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     44a:	03e9      	lsls	r1, r5, #15
     44c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
     450:	03d8      	lsls	r0, r3, #15
     452:	f240 34e7 	movw	r4, #999	; 0x3e7
     456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     45a:	2300      	movs	r3, #0
     45c:	1900      	adds	r0, r0, r4
     45e:	f04f 0400 	mov.w	r4, #0
     462:	eb44 0101 	adc.w	r1, r4, r1
     466:	f7ff fe4b 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     46a:	f007 f9b1 	bl	77d0 <z_impl_k_sleep>
     46e:	e7dd      	b.n	42c <consumer+0x8>
     470:	0000bbb0 	.word	0x0000bbb0
     474:	cccccccd 	.word	0xcccccccd

00000478 <release_access>:
{
     478:	b508      	push	{r3, lr}
	available_instance_count++;
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <release_access+0x1c>)
     47c:	681a      	ldr	r2, [r3, #0]
     47e:	3201      	adds	r2, #1
     480:	601a      	str	r2, [r3, #0]
	printk("Resource given and available_insrtance count is %d\n\r", available_instance_count);
     482:	6819      	ldr	r1, [r3, #0]
     484:	4804      	ldr	r0, [pc, #16]	; (498 <release_access+0x20>)
     486:	f00a fadf 	bl	aa48 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     48a:	4804      	ldr	r0, [pc, #16]	; (49c <release_access+0x24>)
     48c:	f005 ff9a 	bl	63c4 <z_impl_k_sem_give>
}
     490:	bd08      	pop	{r3, pc}
     492:	bf00      	nop
     494:	20000000 	.word	0x20000000
     498:	0000bbcc 	.word	0x0000bbcc
     49c:	2000021c 	.word	0x2000021c

000004a0 <producer>:
{
     4a0:	b508      	push	{r3, lr}
	printk("Producer thread started\n\r");
     4a2:	4812      	ldr	r0, [pc, #72]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4a4:	f00a fad0 	bl	aa48 <printk>
		release_access();
     4a8:	f7ff ffe6 	bl	478 <release_access>
     4ac:	f002 f864 	bl	2578 <z_impl_sys_rand32_get>
		k_msleep(sys_rand32_get() % 10);
     4b0:	4b0f      	ldr	r3, [pc, #60]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     4b2:	fba3 2300 	umull	r2, r3, r3, r0
     4b6:	08db      	lsrs	r3, r3, #3
     4b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     4bc:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
     4c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
     4c4:	17dd      	asrs	r5, r3, #31
     4c6:	03e9      	lsls	r1, r5, #15
     4c8:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
     4cc:	03d8      	lsls	r0, r3, #15
     4ce:	f240 34e7 	movw	r4, #999	; 0x3e7
     4d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     4d6:	2300      	movs	r3, #0
     4d8:	1900      	adds	r0, r0, r4
     4da:	f04f 0400 	mov.w	r4, #0
     4de:	eb44 0101 	adc.w	r1, r4, r1
     4e2:	f7ff fe0d 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     4e6:	f007 f973 	bl	77d0 <z_impl_k_sleep>
     4ea:	e7dd      	b.n	4a8 <producer+0x8>
     4ec:	0000bc04 	.word	0x0000bc04
     4f0:	cccccccd 	.word	0xcccccccd

000004f4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     4f4:	b538      	push	{r3, r4, r5, lr}
     4f6:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     4f8:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     4fa:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     4fe:	6081      	str	r1, [r0, #8]
	switch (method) {
     500:	2b02      	cmp	r3, #2
     502:	d903      	bls.n	50c <sys_notify_finalize+0x18>
     504:	2b03      	cmp	r3, #3
     506:	d102      	bne.n	50e <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     508:	6800      	ldr	r0, [r0, #0]
		break;
     50a:	e00e      	b.n	52a <sys_notify_finalize+0x36>
	switch (method) {
     50c:	b963      	cbnz	r3, 528 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     50e:	4d08      	ldr	r5, [pc, #32]	; (530 <sys_notify_finalize+0x3c>)
     510:	2345      	movs	r3, #69	; 0x45
     512:	462a      	mov	r2, r5
     514:	4907      	ldr	r1, [pc, #28]	; (534 <sys_notify_finalize+0x40>)
     516:	4808      	ldr	r0, [pc, #32]	; (538 <sys_notify_finalize+0x44>)
     518:	f00a fa96 	bl	aa48 <printk>
     51c:	2145      	movs	r1, #69	; 0x45
     51e:	4628      	mov	r0, r5
     520:	f00a fbeb 	bl	acfa <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     524:	2000      	movs	r0, #0
     526:	e000      	b.n	52a <sys_notify_finalize+0x36>
	switch (method) {
     528:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     52a:	2300      	movs	r3, #0
     52c:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     52e:	bd38      	pop	{r3, r4, r5, pc}
     530:	0000bc38 	.word	0x0000bc38
     534:	0000bc5c 	.word	0x0000bc5c
     538:	0000bc60 	.word	0x0000bc60

0000053c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     53c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     53e:	680b      	ldr	r3, [r1, #0]
     540:	3301      	adds	r3, #1
     542:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     544:	4b01      	ldr	r3, [pc, #4]	; (54c <char_out+0x10>)
     546:	681b      	ldr	r3, [r3, #0]
     548:	4798      	blx	r3
}
     54a:	bd08      	pop	{r3, pc}
     54c:	20000004 	.word	0x20000004

00000550 <__printk_hook_install>:
	_char_out = fn;
     550:	4b01      	ldr	r3, [pc, #4]	; (558 <__printk_hook_install+0x8>)
     552:	6018      	str	r0, [r3, #0]
}
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	20000004 	.word	0x20000004

0000055c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     55c:	b500      	push	{lr}
     55e:	b083      	sub	sp, #12
     560:	4602      	mov	r2, r0
     562:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     564:	2100      	movs	r1, #0
     566:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     568:	a901      	add	r1, sp, #4
     56a:	4803      	ldr	r0, [pc, #12]	; (578 <vprintk+0x1c>)
     56c:	f000 fb72 	bl	c54 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     570:	b003      	add	sp, #12
     572:	f85d fb04 	ldr.w	pc, [sp], #4
     576:	bf00      	nop
     578:	0000053d 	.word	0x0000053d

0000057c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     57c:	b510      	push	{r4, lr}
     57e:	b084      	sub	sp, #16
     580:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     582:	9001      	str	r0, [sp, #4]
     584:	9102      	str	r1, [sp, #8]
     586:	2100      	movs	r1, #0
     588:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     58a:	a901      	add	r1, sp, #4
     58c:	4805      	ldr	r0, [pc, #20]	; (5a4 <vsnprintk+0x28>)
     58e:	f000 fb61 	bl	c54 <cbvprintf>

	if (ctx.count < ctx.max) {
     592:	9b03      	ldr	r3, [sp, #12]
     594:	9a02      	ldr	r2, [sp, #8]
     596:	4293      	cmp	r3, r2
     598:	da01      	bge.n	59e <vsnprintk+0x22>
		str[ctx.count] = '\0';
     59a:	2200      	movs	r2, #0
     59c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     59e:	9803      	ldr	r0, [sp, #12]
     5a0:	b004      	add	sp, #16
     5a2:	bd10      	pop	{r4, pc}
     5a4:	0000aa19 	.word	0x0000aa19

000005a8 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     5a8:	b538      	push	{r3, r4, r5, lr}
     5aa:	4604      	mov	r4, r0
     5ac:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5ae:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     5b0:	2a00      	cmp	r2, #0
     5b2:	db14      	blt.n	5de <process_complete+0x36>
     5b4:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     5b8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     5ba:	2a01      	cmp	r2, #1
     5bc:	d91b      	bls.n	5f6 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     5be:	2b04      	cmp	r3, #4
     5c0:	d04f      	beq.n	662 <process_complete+0xba>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     5c2:	4c2e      	ldr	r4, [pc, #184]	; (67c <process_complete+0xd4>)
     5c4:	f240 131b 	movw	r3, #283	; 0x11b
     5c8:	4622      	mov	r2, r4
     5ca:	492d      	ldr	r1, [pc, #180]	; (680 <process_complete+0xd8>)
     5cc:	482d      	ldr	r0, [pc, #180]	; (684 <process_complete+0xdc>)
     5ce:	f00a fa3b 	bl	aa48 <printk>
     5d2:	f240 111b 	movw	r1, #283	; 0x11b
     5d6:	4620      	mov	r0, r4
     5d8:	f00a fb8f 	bl	acfa <assert_post_action>
	}
}
     5dc:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     5de:	e9d0 0100 	ldrd	r0, r1, [r0]
     5e2:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     5e6:	2300      	movs	r3, #0
     5e8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     5ea:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     5ec:	2101      	movs	r1, #1
     5ee:	4620      	mov	r0, r4
     5f0:	f00a fa46 	bl	aa80 <set_state>
     5f4:	e7f2      	b.n	5dc <process_complete+0x34>
		*clients = mgr->clients;
     5f6:	e9d0 0100 	ldrd	r0, r1, [r0]
     5fa:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
     5fe:	2200      	movs	r2, #0
     600:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     602:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     604:	2b06      	cmp	r3, #6
     606:	d00f      	beq.n	628 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     608:	2b05      	cmp	r3, #5
     60a:	d11c      	bne.n	646 <process_complete+0x9e>
			set_state(mgr, ONOFF_STATE_OFF);
     60c:	2100      	movs	r1, #0
     60e:	4620      	mov	r0, r4
     610:	f00a fa36 	bl	aa80 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     614:	4620      	mov	r0, r4
     616:	f00a fa5a 	bl	aace <process_recheck>
     61a:	2800      	cmp	r0, #0
     61c:	d0de      	beq.n	5dc <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     61e:	8ba3      	ldrh	r3, [r4, #28]
     620:	f043 0320 	orr.w	r3, r3, #32
     624:	83a3      	strh	r3, [r4, #28]
     626:	e7d9      	b.n	5dc <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     628:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     62a:	b13b      	cbz	r3, 63c <process_complete+0x94>
				mgr->refs += 1U;
     62c:	8be2      	ldrh	r2, [r4, #30]
     62e:	3201      	adds	r2, #1
     630:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     632:	2b00      	cmp	r3, #0
     634:	d0f9      	beq.n	62a <process_complete+0x82>
	return node->next;
     636:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     638:	2b00      	cmp	r3, #0
     63a:	d1f6      	bne.n	62a <process_complete+0x82>
			set_state(mgr, ONOFF_STATE_ON);
     63c:	2102      	movs	r1, #2
     63e:	4620      	mov	r0, r4
     640:	f00a fa1e 	bl	aa80 <set_state>
     644:	e7e6      	b.n	614 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     646:	4d0d      	ldr	r5, [pc, #52]	; (67c <process_complete+0xd4>)
     648:	f240 1309 	movw	r3, #265	; 0x109
     64c:	462a      	mov	r2, r5
     64e:	490e      	ldr	r1, [pc, #56]	; (688 <process_complete+0xe0>)
     650:	480c      	ldr	r0, [pc, #48]	; (684 <process_complete+0xdc>)
     652:	f00a f9f9 	bl	aa48 <printk>
     656:	f240 1109 	movw	r1, #265	; 0x109
     65a:	4628      	mov	r0, r5
     65c:	f00a fb4d 	bl	acfa <assert_post_action>
     660:	e7d4      	b.n	60c <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     662:	2100      	movs	r1, #0
     664:	f00a fa0c 	bl	aa80 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     668:	4620      	mov	r0, r4
     66a:	f00a fa30 	bl	aace <process_recheck>
     66e:	2800      	cmp	r0, #0
     670:	d0b4      	beq.n	5dc <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     672:	8ba3      	ldrh	r3, [r4, #28]
     674:	f043 0320 	orr.w	r3, r3, #32
     678:	83a3      	strh	r3, [r4, #28]
     67a:	e7af      	b.n	5dc <process_complete+0x34>
     67c:	0000bc80 	.word	0x0000bc80
     680:	0000bc5c 	.word	0x0000bc5c
     684:	0000bc60 	.word	0x0000bc60
     688:	0000bca4 	.word	0x0000bca4

0000068c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     690:	b083      	sub	sp, #12
     692:	4604      	mov	r4, r0
     694:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     696:	8b83      	ldrh	r3, [r0, #28]
     698:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     69c:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     6a0:	460d      	mov	r5, r1
     6a2:	b131      	cbz	r1, 6b2 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     6a4:	f1b8 0f00 	cmp.w	r8, #0
     6a8:	d112      	bne.n	6d0 <process_event+0x44>
	list->head = NULL;
     6aa:	2300      	movs	r3, #0
     6ac:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     6ae:	9301      	str	r3, [sp, #4]
}
     6b0:	e0aa      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     6b2:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     6b6:	f240 1333 	movw	r3, #307	; 0x133
     6ba:	464a      	mov	r2, r9
     6bc:	49be      	ldr	r1, [pc, #760]	; (9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>)
     6be:	48bf      	ldr	r0, [pc, #764]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     6c0:	f00a f9c2 	bl	aa48 <printk>
     6c4:	f240 1133 	movw	r1, #307	; 0x133
     6c8:	4648      	mov	r0, r9
     6ca:	f00a fb16 	bl	acfa <assert_post_action>
     6ce:	e7e9      	b.n	6a4 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     6d0:	2d01      	cmp	r5, #1
     6d2:	d013      	beq.n	6fc <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     6d4:	2d02      	cmp	r5, #2
     6d6:	d116      	bne.n	706 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     6d8:	8ba3      	ldrh	r3, [r4, #28]
     6da:	f043 0320 	orr.w	r3, r3, #32
     6de:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     6e0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     6e2:	4620      	mov	r0, r4
     6e4:	f005 fa96 	bl	5c14 <z_spin_unlock_valid>
     6e8:	2800      	cmp	r0, #0
     6ea:	f000 81a3 	beq.w	a34 <CONFIG_ISR_STACK_SIZE+0x234>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     6ee:	f386 8811 	msr	BASEPRI, r6
     6f2:	f3bf 8f6f 	isb	sy
}
     6f6:	b003      	add	sp, #12
     6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     6fc:	8ba3      	ldrh	r3, [r4, #28]
     6fe:	f043 0310 	orr.w	r3, r3, #16
     702:	83a3      	strh	r3, [r4, #28]
     704:	e7ec      	b.n	6e0 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     706:	4dae      	ldr	r5, [pc, #696]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     708:	f44f 739e 	mov.w	r3, #316	; 0x13c
     70c:	462a      	mov	r2, r5
     70e:	49ad      	ldr	r1, [pc, #692]	; (9c4 <CONFIG_ISR_STACK_SIZE+0x1c4>)
     710:	48aa      	ldr	r0, [pc, #680]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     712:	f00a f999 	bl	aa48 <printk>
     716:	f44f 719e 	mov.w	r1, #316	; 0x13c
     71a:	4628      	mov	r0, r5
     71c:	f00a faed 	bl	acfa <assert_post_action>
     720:	e7da      	b.n	6d8 <process_event+0x4c>
			evt = process_recheck(mgr);
     722:	4620      	mov	r0, r4
     724:	f00a f9d3 	bl	aace <process_recheck>
     728:	4605      	mov	r5, r0
     72a:	e06f      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
			res = mgr->last_res;
     72c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     730:	464a      	mov	r2, r9
     732:	4669      	mov	r1, sp
     734:	4620      	mov	r0, r4
     736:	f7ff ff37 	bl	5a8 <process_complete>
		onoff_transition_fn transit = NULL;
     73a:	2500      	movs	r5, #0
     73c:	e011      	b.n	762 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     73e:	2f00      	cmp	r7, #0
     740:	f040 8081 	bne.w	846 <CONFIG_ISR_STACK_SIZE+0x46>
	return list->head;
     744:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     746:	2b00      	cmp	r3, #0
     748:	f000 808b 	beq.w	862 <CONFIG_ISR_STACK_SIZE+0x62>
			transit = mgr->transitions->start;
     74c:	6923      	ldr	r3, [r4, #16]
     74e:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     750:	2d00      	cmp	r5, #0
     752:	f000 8094 	beq.w	87e <CONFIG_ISR_STACK_SIZE+0x7e>
			set_state(mgr, ONOFF_STATE_TO_ON);
     756:	2106      	movs	r1, #6
     758:	4620      	mov	r0, r4
     75a:	f00a f991 	bl	aa80 <set_state>
		res = 0;
     75e:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     762:	8ba3      	ldrh	r3, [r4, #28]
     764:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     768:	45b8      	cmp	r8, r7
     76a:	f000 810b 	beq.w	984 <CONFIG_ISR_STACK_SIZE+0x184>
     76e:	68a2      	ldr	r2, [r4, #8]
     770:	2a00      	cmp	r2, #0
     772:	f000 8109 	beq.w	988 <CONFIG_ISR_STACK_SIZE+0x188>
     776:	2201      	movs	r2, #1
		if (do_monitors
     778:	4617      	mov	r7, r2
     77a:	b91a      	cbnz	r2, 784 <process_event+0xf8>
     77c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     77e:	2a00      	cmp	r2, #0
     780:	f000 8104 	beq.w	98c <CONFIG_ISR_STACK_SIZE+0x18c>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     784:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     788:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     78a:	f104 0a14 	add.w	sl, r4, #20
     78e:	4650      	mov	r0, sl
     790:	f005 fa40 	bl	5c14 <z_spin_unlock_valid>
     794:	2800      	cmp	r0, #0
     796:	f000 80fd 	beq.w	994 <CONFIG_ISR_STACK_SIZE+0x194>
     79a:	f386 8811 	msr	BASEPRI, r6
     79e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     7a2:	2f00      	cmp	r7, #0
     7a4:	f040 8126 	bne.w	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
     7a8:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     7aa:	b12b      	cbz	r3, 7b8 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     7ac:	464b      	mov	r3, r9
     7ae:	4642      	mov	r2, r8
     7b0:	4669      	mov	r1, sp
     7b2:	4620      	mov	r0, r4
     7b4:	f00a f9cd 	bl	ab52 <notify_all>
			if (transit != NULL) {
     7b8:	b115      	cbz	r5, 7c0 <process_event+0x134>
				transit(mgr, transition_complete);
     7ba:	4983      	ldr	r1, [pc, #524]	; (9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>)
     7bc:	4620      	mov	r0, r4
     7be:	47a8      	blx	r5
	__asm__ volatile(
     7c0:	f04f 0320 	mov.w	r3, #32
     7c4:	f3ef 8611 	mrs	r6, BASEPRI
     7c8:	f383 8812 	msr	BASEPRI_MAX, r3
     7cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     7d0:	4650      	mov	r0, sl
     7d2:	f005 fa0f 	bl	5bf4 <z_spin_lock_valid>
     7d6:	2800      	cmp	r0, #0
     7d8:	f000 8112 	beq.w	a00 <CONFIG_ISR_STACK_SIZE+0x200>
	z_spin_lock_set_owner(l);
     7dc:	4650      	mov	r0, sl
     7de:	f005 fa29 	bl	5c34 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     7e2:	8ba3      	ldrh	r3, [r4, #28]
     7e4:	f023 0308 	bic.w	r3, r3, #8
     7e8:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     7ea:	8ba3      	ldrh	r3, [r4, #28]
     7ec:	f013 0f10 	tst.w	r3, #16
     7f0:	f000 8116 	beq.w	a20 <CONFIG_ISR_STACK_SIZE+0x220>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     7f4:	f023 0310 	bic.w	r3, r3, #16
     7f8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     7fa:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     7fc:	8ba7      	ldrh	r7, [r4, #28]
     7fe:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     802:	2d00      	cmp	r5, #0
     804:	f43f af6c 	beq.w	6e0 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     808:	2d02      	cmp	r5, #2
     80a:	d08a      	beq.n	722 <process_event+0x96>
		if (evt == EVT_NOP) {
     80c:	2d00      	cmp	r5, #0
     80e:	f43f af67 	beq.w	6e0 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     812:	2d01      	cmp	r5, #1
     814:	d08a      	beq.n	72c <process_event+0xa0>
		} else if (evt == EVT_START) {
     816:	2d03      	cmp	r5, #3
     818:	d091      	beq.n	73e <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     81a:	2d04      	cmp	r5, #4
     81c:	d03e      	beq.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
		} else if (evt == EVT_RESET) {
     81e:	2d05      	cmp	r5, #5
     820:	f040 80a0 	bne.w	964 <CONFIG_ISR_STACK_SIZE+0x164>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     824:	2f01      	cmp	r7, #1
     826:	d172      	bne.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
     828:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     82a:	2b00      	cmp	r3, #0
     82c:	d07d      	beq.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
			transit = mgr->transitions->reset;
     82e:	6923      	ldr	r3, [r4, #16]
     830:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     832:	2d00      	cmp	r5, #0
     834:	f000 8087 	beq.w	946 <CONFIG_ISR_STACK_SIZE+0x146>
			set_state(mgr, ONOFF_STATE_RESETTING);
     838:	2105      	movs	r1, #5
     83a:	4620      	mov	r0, r4
     83c:	f00a f920 	bl	aa80 <set_state>
		res = 0;
     840:	f04f 0900 	mov.w	r9, #0
     844:	e78d      	b.n	762 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     846:	4d5e      	ldr	r5, [pc, #376]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     848:	f44f 73ab 	mov.w	r3, #342	; 0x156
     84c:	462a      	mov	r2, r5
     84e:	495f      	ldr	r1, [pc, #380]	; (9cc <CONFIG_ISR_STACK_SIZE+0x1cc>)
     850:	485a      	ldr	r0, [pc, #360]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     852:	f00a f8f9 	bl	aa48 <printk>
     856:	f44f 71ab 	mov.w	r1, #342	; 0x156
     85a:	4628      	mov	r0, r5
     85c:	f00a fa4d 	bl	acfa <assert_post_action>
     860:	e770      	b.n	744 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     862:	4d57      	ldr	r5, [pc, #348]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     864:	f240 1357 	movw	r3, #343	; 0x157
     868:	462a      	mov	r2, r5
     86a:	4959      	ldr	r1, [pc, #356]	; (9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>)
     86c:	4853      	ldr	r0, [pc, #332]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     86e:	f00a f8eb 	bl	aa48 <printk>
     872:	f240 1157 	movw	r1, #343	; 0x157
     876:	4628      	mov	r0, r5
     878:	f00a fa3f 	bl	acfa <assert_post_action>
     87c:	e766      	b.n	74c <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     87e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     882:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     886:	4642      	mov	r2, r8
     888:	4952      	ldr	r1, [pc, #328]	; (9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>)
     88a:	484c      	ldr	r0, [pc, #304]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     88c:	f00a f8dc 	bl	aa48 <printk>
     890:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     894:	4640      	mov	r0, r8
     896:	f00a fa30 	bl	acfa <assert_post_action>
     89a:	e75c      	b.n	756 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     89c:	2f02      	cmp	r7, #2
     89e:	d10b      	bne.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
			__ASSERT_NO_MSG(mgr->refs == 0);
     8a0:	8be3      	ldrh	r3, [r4, #30]
     8a2:	b9bb      	cbnz	r3, 8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
			transit = mgr->transitions->stop;
     8a4:	6923      	ldr	r3, [r4, #16]
     8a6:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     8a8:	b315      	cbz	r5, 8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     8aa:	2104      	movs	r1, #4
     8ac:	4620      	mov	r0, r4
     8ae:	f00a f8e7 	bl	aa80 <set_state>
		res = 0;
     8b2:	f04f 0900 	mov.w	r9, #0
     8b6:	e754      	b.n	762 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     8b8:	4d41      	ldr	r5, [pc, #260]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     8ba:	f240 135d 	movw	r3, #349	; 0x15d
     8be:	462a      	mov	r2, r5
     8c0:	4945      	ldr	r1, [pc, #276]	; (9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>)
     8c2:	483e      	ldr	r0, [pc, #248]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     8c4:	f00a f8c0 	bl	aa48 <printk>
     8c8:	f240 115d 	movw	r1, #349	; 0x15d
     8cc:	4628      	mov	r0, r5
     8ce:	f00a fa14 	bl	acfa <assert_post_action>
     8d2:	e7e5      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
			__ASSERT_NO_MSG(mgr->refs == 0);
     8d4:	4d3a      	ldr	r5, [pc, #232]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     8d6:	f44f 73af 	mov.w	r3, #350	; 0x15e
     8da:	462a      	mov	r2, r5
     8dc:	493f      	ldr	r1, [pc, #252]	; (9dc <CONFIG_ISR_STACK_SIZE+0x1dc>)
     8de:	4837      	ldr	r0, [pc, #220]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     8e0:	f00a f8b2 	bl	aa48 <printk>
     8e4:	f44f 71af 	mov.w	r1, #350	; 0x15e
     8e8:	4628      	mov	r0, r5
     8ea:	f00a fa06 	bl	acfa <assert_post_action>
     8ee:	e7d9      	b.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
			__ASSERT_NO_MSG(transit != NULL);
     8f0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     8f4:	f240 1361 	movw	r3, #353	; 0x161
     8f8:	4642      	mov	r2, r8
     8fa:	4936      	ldr	r1, [pc, #216]	; (9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>)
     8fc:	482f      	ldr	r0, [pc, #188]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     8fe:	f00a f8a3 	bl	aa48 <printk>
     902:	f240 1161 	movw	r1, #353	; 0x161
     906:	4640      	mov	r0, r8
     908:	f00a f9f7 	bl	acfa <assert_post_action>
     90c:	e7cd      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     90e:	4d2c      	ldr	r5, [pc, #176]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     910:	f44f 73b2 	mov.w	r3, #356	; 0x164
     914:	462a      	mov	r2, r5
     916:	4932      	ldr	r1, [pc, #200]	; (9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>)
     918:	4828      	ldr	r0, [pc, #160]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     91a:	f00a f895 	bl	aa48 <printk>
     91e:	f44f 71b2 	mov.w	r1, #356	; 0x164
     922:	4628      	mov	r0, r5
     924:	f00a f9e9 	bl	acfa <assert_post_action>
     928:	e77e      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     92a:	4d25      	ldr	r5, [pc, #148]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     92c:	f240 1365 	movw	r3, #357	; 0x165
     930:	462a      	mov	r2, r5
     932:	4927      	ldr	r1, [pc, #156]	; (9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>)
     934:	4821      	ldr	r0, [pc, #132]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     936:	f00a f887 	bl	aa48 <printk>
     93a:	f240 1165 	movw	r1, #357	; 0x165
     93e:	4628      	mov	r0, r5
     940:	f00a f9db 	bl	acfa <assert_post_action>
     944:	e773      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
			__ASSERT_NO_MSG(transit != NULL);
     946:	f8df 8078 	ldr.w	r8, [pc, #120]	; 9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     94a:	f44f 73b4 	mov.w	r3, #360	; 0x168
     94e:	4642      	mov	r2, r8
     950:	4920      	ldr	r1, [pc, #128]	; (9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>)
     952:	481a      	ldr	r0, [pc, #104]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     954:	f00a f878 	bl	aa48 <printk>
     958:	f44f 71b4 	mov.w	r1, #360	; 0x168
     95c:	4640      	mov	r0, r8
     95e:	f00a f9cc 	bl	acfa <assert_post_action>
     962:	e769      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
			__ASSERT_NO_MSG(false);
     964:	4d16      	ldr	r5, [pc, #88]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     966:	f240 136b 	movw	r3, #363	; 0x16b
     96a:	462a      	mov	r2, r5
     96c:	491d      	ldr	r1, [pc, #116]	; (9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>)
     96e:	4813      	ldr	r0, [pc, #76]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     970:	f00a f86a 	bl	aa48 <printk>
     974:	f240 116b 	movw	r1, #363	; 0x16b
     978:	4628      	mov	r0, r5
     97a:	f00a f9be 	bl	acfa <assert_post_action>
		onoff_transition_fn transit = NULL;
     97e:	2500      	movs	r5, #0
		res = 0;
     980:	46a9      	mov	r9, r5
     982:	e6ee      	b.n	762 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     984:	2200      	movs	r2, #0
     986:	e6f7      	b.n	778 <process_event+0xec>
     988:	2200      	movs	r2, #0
     98a:	e6f5      	b.n	778 <process_event+0xec>
		    || (transit != NULL)) {
     98c:	2d00      	cmp	r5, #0
     98e:	f47f aef9 	bne.w	784 <process_event+0xf8>
     992:	e72a      	b.n	7ea <process_event+0x15e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     994:	f8df b058 	ldr.w	fp, [pc, #88]	; 9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     998:	23ac      	movs	r3, #172	; 0xac
     99a:	465a      	mov	r2, fp
     99c:	4912      	ldr	r1, [pc, #72]	; (9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>)
     99e:	4807      	ldr	r0, [pc, #28]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     9a0:	f00a f852 	bl	aa48 <printk>
     9a4:	4651      	mov	r1, sl
     9a6:	4811      	ldr	r0, [pc, #68]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     9a8:	f00a f84e 	bl	aa48 <printk>
     9ac:	21ac      	movs	r1, #172	; 0xac
     9ae:	4658      	mov	r0, fp
     9b0:	f00a f9a3 	bl	acfa <assert_post_action>
     9b4:	e6f1      	b.n	79a <process_event+0x10e>
     9b6:	bf00      	nop
     9b8:	0000bccc 	.word	0x0000bccc
     9bc:	0000bc60 	.word	0x0000bc60
     9c0:	0000bc80 	.word	0x0000bc80
     9c4:	0000bcdc 	.word	0x0000bcdc
     9c8:	00000a6d 	.word	0x00000a6d
     9cc:	0000bcf0 	.word	0x0000bcf0
     9d0:	0000bcfc 	.word	0x0000bcfc
     9d4:	0000bd20 	.word	0x0000bd20
     9d8:	0000bd38 	.word	0x0000bd38
     9dc:	0000bd50 	.word	0x0000bd50
     9e0:	0000bd60 	.word	0x0000bd60
     9e4:	0000bc5c 	.word	0x0000bc5c
     9e8:	0000bda0 	.word	0x0000bda0
     9ec:	0000bdb8 	.word	0x0000bdb8
     9f0:	0000bd78 	.word	0x0000bd78
				notify_monitors(mgr, state, res);
     9f4:	464a      	mov	r2, r9
     9f6:	4641      	mov	r1, r8
     9f8:	4620      	mov	r0, r4
     9fa:	f00a f849 	bl	aa90 <notify_monitors>
     9fe:	e6d3      	b.n	7a8 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a00:	4d14      	ldr	r5, [pc, #80]	; (a54 <CONFIG_ISR_STACK_SIZE+0x254>)
     a02:	2381      	movs	r3, #129	; 0x81
     a04:	462a      	mov	r2, r5
     a06:	4914      	ldr	r1, [pc, #80]	; (a58 <CONFIG_ISR_STACK_SIZE+0x258>)
     a08:	4814      	ldr	r0, [pc, #80]	; (a5c <CONFIG_ISR_STACK_SIZE+0x25c>)
     a0a:	f00a f81d 	bl	aa48 <printk>
     a0e:	4651      	mov	r1, sl
     a10:	4813      	ldr	r0, [pc, #76]	; (a60 <CONFIG_ISR_STACK_SIZE+0x260>)
     a12:	f00a f819 	bl	aa48 <printk>
     a16:	2181      	movs	r1, #129	; 0x81
     a18:	4628      	mov	r0, r5
     a1a:	f00a f96e 	bl	acfa <assert_post_action>
     a1e:	e6dd      	b.n	7dc <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a20:	f013 0f20 	tst.w	r3, #32
     a24:	d004      	beq.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a26:	f023 0320 	bic.w	r3, r3, #32
     a2a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     a2c:	2502      	movs	r5, #2
     a2e:	e6e5      	b.n	7fc <process_event+0x170>
		evt = EVT_NOP;
     a30:	2500      	movs	r5, #0
     a32:	e6e3      	b.n	7fc <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     a34:	4d07      	ldr	r5, [pc, #28]	; (a54 <CONFIG_ISR_STACK_SIZE+0x254>)
     a36:	23ac      	movs	r3, #172	; 0xac
     a38:	462a      	mov	r2, r5
     a3a:	490a      	ldr	r1, [pc, #40]	; (a64 <CONFIG_ISR_STACK_SIZE+0x264>)
     a3c:	4807      	ldr	r0, [pc, #28]	; (a5c <CONFIG_ISR_STACK_SIZE+0x25c>)
     a3e:	f00a f803 	bl	aa48 <printk>
     a42:	4621      	mov	r1, r4
     a44:	4808      	ldr	r0, [pc, #32]	; (a68 <CONFIG_ISR_STACK_SIZE+0x268>)
     a46:	f009 ffff 	bl	aa48 <printk>
     a4a:	21ac      	movs	r1, #172	; 0xac
     a4c:	4628      	mov	r0, r5
     a4e:	f00a f954 	bl	acfa <assert_post_action>
     a52:	e64c      	b.n	6ee <process_event+0x62>
     a54:	0000bd78 	.word	0x0000bd78
     a58:	0000bdd0 	.word	0x0000bdd0
     a5c:	0000bc60 	.word	0x0000bc60
     a60:	0000bde8 	.word	0x0000bde8
     a64:	0000bda0 	.word	0x0000bda0
     a68:	0000bdb8 	.word	0x0000bdb8

00000a6c <transition_complete>:
{
     a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a70:	4604      	mov	r4, r0
     a72:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     a74:	f100 0614 	add.w	r6, r0, #20
     a78:	f04f 0320 	mov.w	r3, #32
     a7c:	f3ef 8711 	mrs	r7, BASEPRI
     a80:	f383 8812 	msr	BASEPRI_MAX, r3
     a84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a88:	4630      	mov	r0, r6
     a8a:	f005 f8b3 	bl	5bf4 <z_spin_lock_valid>
     a8e:	b150      	cbz	r0, aa6 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
     a90:	4630      	mov	r0, r6
     a92:	f005 f8cf 	bl	5c34 <z_spin_lock_set_owner>
	mgr->last_res = res;
     a96:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     a98:	463a      	mov	r2, r7
     a9a:	2101      	movs	r1, #1
     a9c:	4620      	mov	r0, r4
     a9e:	f7ff fdf5 	bl	68c <process_event>
}
     aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     aa6:	f8df 802c 	ldr.w	r8, [pc, #44]	; ad4 <transition_complete+0x68>
     aaa:	2381      	movs	r3, #129	; 0x81
     aac:	4642      	mov	r2, r8
     aae:	4906      	ldr	r1, [pc, #24]	; (ac8 <transition_complete+0x5c>)
     ab0:	4806      	ldr	r0, [pc, #24]	; (acc <transition_complete+0x60>)
     ab2:	f009 ffc9 	bl	aa48 <printk>
     ab6:	4631      	mov	r1, r6
     ab8:	4805      	ldr	r0, [pc, #20]	; (ad0 <transition_complete+0x64>)
     aba:	f009 ffc5 	bl	aa48 <printk>
     abe:	2181      	movs	r1, #129	; 0x81
     ac0:	4640      	mov	r0, r8
     ac2:	f00a f91a 	bl	acfa <assert_post_action>
     ac6:	e7e3      	b.n	a90 <transition_complete+0x24>
     ac8:	0000bdd0 	.word	0x0000bdd0
     acc:	0000bc60 	.word	0x0000bc60
     ad0:	0000bde8 	.word	0x0000bde8
     ad4:	0000bd78 	.word	0x0000bd78

00000ad8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     adc:	4604      	mov	r4, r0
     ade:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     ae0:	f00a f80e 	bl	ab00 <validate_args>

	if (rv < 0) {
     ae4:	1e06      	subs	r6, r0, #0
     ae6:	db58      	blt.n	b9a <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     ae8:	f104 0714 	add.w	r7, r4, #20
     aec:	f04f 0320 	mov.w	r3, #32
     af0:	f3ef 8911 	mrs	r9, BASEPRI
     af4:	f383 8812 	msr	BASEPRI_MAX, r3
     af8:	f3bf 8f6f 	isb	sy
     afc:	4638      	mov	r0, r7
     afe:	f005 f879 	bl	5bf4 <z_spin_lock_valid>
     b02:	b1e8      	cbz	r0, b40 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
     b04:	4638      	mov	r0, r7
     b06:	f005 f895 	bl	5c34 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b0a:	8ba5      	ldrh	r5, [r4, #28]
     b0c:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     b10:	8be3      	ldrh	r3, [r4, #30]
     b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b16:	4293      	cmp	r3, r2
     b18:	d056      	beq.n	bc8 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
     b1a:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
     b1c:	2d02      	cmp	r5, #2
     b1e:	d01f      	beq.n	b60 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
     b20:	b32d      	cbz	r5, b6e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
     b22:	2d04      	cmp	r5, #4
     b24:	d023      	beq.n	b6e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
     b26:	2d06      	cmp	r5, #6
     b28:	d021      	beq.n	b6e <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
     b2a:	2d05      	cmp	r5, #5
     b2c:	d053      	beq.n	bd6 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     b2e:	2d01      	cmp	r5, #1
     b30:	d136      	bne.n	ba0 <onoff_request+0xc8>
		rv = -EIO;
     b32:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     b36:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     b3a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     b3c:	4652      	mov	r2, sl
     b3e:	e01c      	b.n	b7a <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     b40:	4d3c      	ldr	r5, [pc, #240]	; (c34 <onoff_request+0x15c>)
     b42:	2381      	movs	r3, #129	; 0x81
     b44:	462a      	mov	r2, r5
     b46:	493c      	ldr	r1, [pc, #240]	; (c38 <onoff_request+0x160>)
     b48:	483c      	ldr	r0, [pc, #240]	; (c3c <onoff_request+0x164>)
     b4a:	f009 ff7d 	bl	aa48 <printk>
     b4e:	4639      	mov	r1, r7
     b50:	483b      	ldr	r0, [pc, #236]	; (c40 <onoff_request+0x168>)
     b52:	f009 ff79 	bl	aa48 <printk>
     b56:	2181      	movs	r1, #129	; 0x81
     b58:	4628      	mov	r0, r5
     b5a:	f00a f8ce 	bl	acfa <assert_post_action>
     b5e:	e7d1      	b.n	b04 <onoff_request+0x2c>
		mgr->refs += 1U;
     b60:	3301      	adds	r3, #1
     b62:	83e3      	strh	r3, [r4, #30]
		notify = true;
     b64:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
     b68:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
     b6a:	461a      	mov	r2, r3
     b6c:	e005      	b.n	b7a <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
     b6e:	fab5 f385 	clz	r3, r5
     b72:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
     b74:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
     b78:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
     b7a:	b142      	cbz	r2, b8e <onoff_request+0xb6>
	parent->next = child;
     b7c:	2200      	movs	r2, #0
     b7e:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
     b82:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     b84:	b372      	cbz	r2, be4 <onoff_request+0x10c>
	parent->next = child;
     b86:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
     b8a:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
     b8e:	b373      	cbz	r3, bee <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
     b90:	464a      	mov	r2, r9
     b92:	2102      	movs	r1, #2
     b94:	4620      	mov	r0, r4
     b96:	f7ff fd79 	bl	68c <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
     b9a:	4630      	mov	r0, r6
     b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     ba0:	4e28      	ldr	r6, [pc, #160]	; (c44 <onoff_request+0x16c>)
     ba2:	f240 13c9 	movw	r3, #457	; 0x1c9
     ba6:	4632      	mov	r2, r6
     ba8:	4927      	ldr	r1, [pc, #156]	; (c48 <onoff_request+0x170>)
     baa:	4824      	ldr	r0, [pc, #144]	; (c3c <onoff_request+0x164>)
     bac:	f009 ff4c 	bl	aa48 <printk>
     bb0:	f240 11c9 	movw	r1, #457	; 0x1c9
     bb4:	4630      	mov	r0, r6
     bb6:	f00a f8a0 	bl	acfa <assert_post_action>
		rv = -EIO;
     bba:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     bbe:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     bc2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     bc4:	4652      	mov	r2, sl
     bc6:	e7d8      	b.n	b7a <onoff_request+0xa2>
		rv = -EAGAIN;
     bc8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
     bcc:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     bd0:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     bd2:	4652      	mov	r2, sl
     bd4:	e7d1      	b.n	b7a <onoff_request+0xa2>
		rv = -ENOTSUP;
     bd6:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
     bda:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     bde:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     be0:	4652      	mov	r2, sl
     be2:	e7ca      	b.n	b7a <onoff_request+0xa2>
     be4:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
     be8:	f8c4 8000 	str.w	r8, [r4]
}
     bec:	e7cf      	b.n	b8e <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     bee:	4638      	mov	r0, r7
     bf0:	f005 f810 	bl	5c14 <z_spin_unlock_valid>
     bf4:	b168      	cbz	r0, c12 <onoff_request+0x13a>
	__asm__ volatile(
     bf6:	f389 8811 	msr	BASEPRI, r9
     bfa:	f3bf 8f6f 	isb	sy
		if (notify) {
     bfe:	f1ba 0f00 	cmp.w	sl, #0
     c02:	d0ca      	beq.n	b9a <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
     c04:	2300      	movs	r3, #0
     c06:	462a      	mov	r2, r5
     c08:	4641      	mov	r1, r8
     c0a:	4620      	mov	r0, r4
     c0c:	f009 ff8e 	bl	ab2c <notify_one>
     c10:	e7c3      	b.n	b9a <onoff_request+0xc2>
     c12:	f8df b020 	ldr.w	fp, [pc, #32]	; c34 <onoff_request+0x15c>
     c16:	23ac      	movs	r3, #172	; 0xac
     c18:	465a      	mov	r2, fp
     c1a:	490c      	ldr	r1, [pc, #48]	; (c4c <onoff_request+0x174>)
     c1c:	4807      	ldr	r0, [pc, #28]	; (c3c <onoff_request+0x164>)
     c1e:	f009 ff13 	bl	aa48 <printk>
     c22:	4639      	mov	r1, r7
     c24:	480a      	ldr	r0, [pc, #40]	; (c50 <onoff_request+0x178>)
     c26:	f009 ff0f 	bl	aa48 <printk>
     c2a:	21ac      	movs	r1, #172	; 0xac
     c2c:	4658      	mov	r0, fp
     c2e:	f00a f864 	bl	acfa <assert_post_action>
     c32:	e7e0      	b.n	bf6 <onoff_request+0x11e>
     c34:	0000bd78 	.word	0x0000bd78
     c38:	0000bdd0 	.word	0x0000bdd0
     c3c:	0000bc60 	.word	0x0000bc60
     c40:	0000bde8 	.word	0x0000bde8
     c44:	0000bc80 	.word	0x0000bc80
     c48:	0000bd60 	.word	0x0000bd60
     c4c:	0000bda0 	.word	0x0000bda0
     c50:	0000bdb8 	.word	0x0000bdb8

00000c54 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c58:	b093      	sub	sp, #76	; 0x4c
     c5a:	4606      	mov	r6, r0
     c5c:	460d      	mov	r5, r1
     c5e:	4692      	mov	sl, r2
     c60:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     c62:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     c64:	f89a 0000 	ldrb.w	r0, [sl]
     c68:	2800      	cmp	r0, #0
     c6a:	f000 84d6 	beq.w	161a <CONFIG_FPROTECT_BLOCK_SIZE+0x61a>
		if (*fp != '%') {
     c6e:	2825      	cmp	r0, #37	; 0x25
     c70:	d008      	beq.n	c84 <cbvprintf+0x30>
			OUTC(*fp++);
     c72:	f10a 0a01 	add.w	sl, sl, #1
     c76:	4629      	mov	r1, r5
     c78:	47b0      	blx	r6
     c7a:	2800      	cmp	r0, #0
     c7c:	f2c0 84ce 	blt.w	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
     c80:	3401      	adds	r4, #1
			continue;
     c82:	e7ef      	b.n	c64 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     c84:	2300      	movs	r3, #0
     c86:	9306      	str	r3, [sp, #24]
     c88:	9307      	str	r3, [sp, #28]
     c8a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     c8c:	9308      	str	r3, [sp, #32]
     c8e:	9309      	str	r3, [sp, #36]	; 0x24
     c90:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     c92:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     c96:	f89a 3001 	ldrb.w	r3, [sl, #1]
     c9a:	2b25      	cmp	r3, #37	; 0x25
     c9c:	d001      	beq.n	ca2 <cbvprintf+0x4e>
	bool loop = true;
     c9e:	2701      	movs	r7, #1
     ca0:	e02c      	b.n	cfc <cbvprintf+0xa8>
		conv->specifier = *sp++;
     ca2:	f10a 0802 	add.w	r8, sl, #2
     ca6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     caa:	e1a8      	b.n	ffe <cbvprintf+0x3aa>
			conv->flag_dash = true;
     cac:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cb0:	f043 0304 	orr.w	r3, r3, #4
     cb4:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     cb8:	b1ff      	cbz	r7, cfa <cbvprintf+0xa6>
			++sp;
     cba:	f108 0801 	add.w	r8, r8, #1
     cbe:	e01c      	b.n	cfa <cbvprintf+0xa6>
			conv->flag_plus = true;
     cc0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cc4:	f043 0308 	orr.w	r3, r3, #8
     cc8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     ccc:	e7f4      	b.n	cb8 <cbvprintf+0x64>
			conv->flag_space = true;
     cce:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cd2:	f043 0310 	orr.w	r3, r3, #16
     cd6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     cda:	e7ed      	b.n	cb8 <cbvprintf+0x64>
			conv->flag_hash = true;
     cdc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ce0:	f043 0320 	orr.w	r3, r3, #32
     ce4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     ce8:	e7e6      	b.n	cb8 <cbvprintf+0x64>
			conv->flag_zero = true;
     cea:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     cf2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     cf6:	e7df      	b.n	cb8 <cbvprintf+0x64>
		switch (*sp) {
     cf8:	2700      	movs	r7, #0
	} while (loop);
     cfa:	b34f      	cbz	r7, d50 <cbvprintf+0xfc>
		switch (*sp) {
     cfc:	f898 3000 	ldrb.w	r3, [r8]
     d00:	3b20      	subs	r3, #32
     d02:	2b10      	cmp	r3, #16
     d04:	d8f8      	bhi.n	cf8 <cbvprintf+0xa4>
     d06:	a201      	add	r2, pc, #4	; (adr r2, d0c <cbvprintf+0xb8>)
     d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d0c:	00000ccf 	.word	0x00000ccf
     d10:	00000cf9 	.word	0x00000cf9
     d14:	00000cf9 	.word	0x00000cf9
     d18:	00000cdd 	.word	0x00000cdd
     d1c:	00000cf9 	.word	0x00000cf9
     d20:	00000cf9 	.word	0x00000cf9
     d24:	00000cf9 	.word	0x00000cf9
     d28:	00000cf9 	.word	0x00000cf9
     d2c:	00000cf9 	.word	0x00000cf9
     d30:	00000cf9 	.word	0x00000cf9
     d34:	00000cf9 	.word	0x00000cf9
     d38:	00000cc1 	.word	0x00000cc1
     d3c:	00000cf9 	.word	0x00000cf9
     d40:	00000cad 	.word	0x00000cad
     d44:	00000cf9 	.word	0x00000cf9
     d48:	00000cf9 	.word	0x00000cf9
     d4c:	00000ceb 	.word	0x00000ceb
	if (conv->flag_zero && conv->flag_dash) {
     d50:	f89d 3020 	ldrb.w	r3, [sp, #32]
     d54:	f003 0344 	and.w	r3, r3, #68	; 0x44
     d58:	2b44      	cmp	r3, #68	; 0x44
     d5a:	d06d      	beq.n	e38 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     d5c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     d60:	f89d 3020 	ldrb.w	r3, [sp, #32]
     d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     d68:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     d6c:	f898 3000 	ldrb.w	r3, [r8]
     d70:	2b2a      	cmp	r3, #42	; 0x2a
     d72:	d068      	beq.n	e46 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     d74:	a805      	add	r0, sp, #20
     d76:	f009 ff29 	bl	abcc <extract_decimal>
	if (sp != wp) {
     d7a:	9b05      	ldr	r3, [sp, #20]
     d7c:	4598      	cmp	r8, r3
     d7e:	d012      	beq.n	da6 <cbvprintf+0x152>
		conv->width_present = true;
     d80:	f89d 3020 	ldrb.w	r3, [sp, #32]
     d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     d88:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     d8c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     d8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     d92:	2800      	cmp	r0, #0
     d94:	db60      	blt.n	e58 <cbvprintf+0x204>
     d96:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     d98:	4313      	orrs	r3, r2
     d9a:	f89d 2020 	ldrb.w	r2, [sp, #32]
     d9e:	f363 0241 	bfi	r2, r3, #1, #1
     da2:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     da6:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     da8:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     daa:	781b      	ldrb	r3, [r3, #0]
     dac:	2b2e      	cmp	r3, #46	; 0x2e
     dae:	bf14      	ite	ne
     db0:	2300      	movne	r3, #0
     db2:	2301      	moveq	r3, #1
     db4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     db8:	f363 0241 	bfi	r2, r3, #1, #1
     dbc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     dc0:	2b00      	cmp	r3, #0
     dc2:	d04b      	beq.n	e5c <cbvprintf+0x208>
	++sp;
     dc4:	9b05      	ldr	r3, [sp, #20]
     dc6:	1c5a      	adds	r2, r3, #1
     dc8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     dca:	785b      	ldrb	r3, [r3, #1]
     dcc:	2b2a      	cmp	r3, #42	; 0x2a
     dce:	d048      	beq.n	e62 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
     dd0:	a805      	add	r0, sp, #20
     dd2:	f009 fefb 	bl	abcc <extract_decimal>
	conv->prec_value = prec;
     dd6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     dd8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ddc:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     de0:	2800      	cmp	r0, #0
     de2:	db47      	blt.n	e74 <cbvprintf+0x220>
     de4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     de6:	4313      	orrs	r3, r2
     de8:	f89d 2020 	ldrb.w	r2, [sp, #32]
     dec:	f363 0241 	bfi	r2, r3, #1, #1
     df0:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     df4:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     df8:	f898 3000 	ldrb.w	r3, [r8]
     dfc:	3b4c      	subs	r3, #76	; 0x4c
     dfe:	2b2e      	cmp	r3, #46	; 0x2e
     e00:	f200 80dc 	bhi.w	fbc <cbvprintf+0x368>
     e04:	e8df f003 	tbb	[pc, r3]
     e08:	dadadaca 	.word	0xdadadaca
     e0c:	dadadada 	.word	0xdadadada
     e10:	dadadada 	.word	0xdadadada
     e14:	dadadada 	.word	0xdadadada
     e18:	dadadada 	.word	0xdadadada
     e1c:	dadadada 	.word	0xdadadada
     e20:	dadadada 	.word	0xdadadada
     e24:	da6ada38 	.word	0xda6ada38
     e28:	dadada51 	.word	0xdadada51
     e2c:	dadadada 	.word	0xdadadada
     e30:	dadadac0 	.word	0xdadadac0
     e34:	dada      	.short	0xdada
     e36:	b6          	.byte	0xb6
     e37:	00          	.byte	0x00
		conv->flag_zero = false;
     e38:	f89d 3020 	ldrb.w	r3, [sp, #32]
     e3c:	f36f 1386 	bfc	r3, #6, #1
     e40:	f88d 3020 	strb.w	r3, [sp, #32]
     e44:	e78a      	b.n	d5c <cbvprintf+0x108>
		conv->width_star = true;
     e46:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e4a:	f043 0301 	orr.w	r3, r3, #1
     e4e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     e52:	4643      	mov	r3, r8
     e54:	3301      	adds	r3, #1
     e56:	e7a7      	b.n	da8 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     e58:	2201      	movs	r2, #1
     e5a:	e79d      	b.n	d98 <cbvprintf+0x144>
		return sp;
     e5c:	f8dd 8014 	ldr.w	r8, [sp, #20]
     e60:	e7ca      	b.n	df8 <cbvprintf+0x1a4>
		conv->prec_star = true;
     e62:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e66:	f043 0304 	orr.w	r3, r3, #4
     e6a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     e6e:	f102 0801 	add.w	r8, r2, #1
     e72:	e7c1      	b.n	df8 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     e74:	2201      	movs	r2, #1
     e76:	e7b6      	b.n	de6 <cbvprintf+0x192>
		if (*++sp == 'h') {
     e78:	f108 0201 	add.w	r2, r8, #1
     e7c:	f898 3001 	ldrb.w	r3, [r8, #1]
     e80:	2b68      	cmp	r3, #104	; 0x68
     e82:	d008      	beq.n	e96 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
     e84:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e88:	2102      	movs	r1, #2
     e8a:	f361 03c6 	bfi	r3, r1, #3, #4
     e8e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     e92:	4690      	mov	r8, r2
     e94:	e02b      	b.n	eee <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
     e96:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e9a:	2201      	movs	r2, #1
     e9c:	f362 03c6 	bfi	r3, r2, #3, #4
     ea0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     ea4:	f108 0802 	add.w	r8, r8, #2
     ea8:	e021      	b.n	eee <cbvprintf+0x29a>
		if (*++sp == 'l') {
     eaa:	f108 0201 	add.w	r2, r8, #1
     eae:	f898 3001 	ldrb.w	r3, [r8, #1]
     eb2:	2b6c      	cmp	r3, #108	; 0x6c
     eb4:	d008      	beq.n	ec8 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
     eb6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     eba:	2103      	movs	r1, #3
     ebc:	f361 03c6 	bfi	r3, r1, #3, #4
     ec0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     ec4:	4690      	mov	r8, r2
     ec6:	e012      	b.n	eee <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
     ec8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ecc:	2204      	movs	r2, #4
     ece:	f362 03c6 	bfi	r3, r2, #3, #4
     ed2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     ed6:	f108 0802 	add.w	r8, r8, #2
     eda:	e008      	b.n	eee <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
     edc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ee0:	2205      	movs	r2, #5
     ee2:	f362 03c6 	bfi	r3, r2, #3, #4
     ee6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     eea:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     eee:	f818 3b01 	ldrb.w	r3, [r8], #1
     ef2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     ef6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     efa:	2a37      	cmp	r2, #55	; 0x37
     efc:	f200 8150 	bhi.w	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
     f00:	e8df f012 	tbh	[pc, r2, lsl #1]
     f04:	014e0126 	.word	0x014e0126
     f08:	014e014e 	.word	0x014e014e
     f0c:	01260126 	.word	0x01260126
     f10:	014e0126 	.word	0x014e0126
     f14:	014e014e 	.word	0x014e014e
     f18:	014e014e 	.word	0x014e014e
     f1c:	014e014e 	.word	0x014e014e
     f20:	014e014e 	.word	0x014e014e
     f24:	014e014e 	.word	0x014e014e
     f28:	014e014e 	.word	0x014e014e
     f2c:	014e014e 	.word	0x014e014e
     f30:	0113014e 	.word	0x0113014e
     f34:	014e014e 	.word	0x014e014e
     f38:	014e014e 	.word	0x014e014e
     f3c:	014e014e 	.word	0x014e014e
     f40:	014e014e 	.word	0x014e014e
     f44:	014e0126 	.word	0x014e0126
     f48:	00630113 	.word	0x00630113
     f4c:	01260126 	.word	0x01260126
     f50:	014e0126 	.word	0x014e0126
     f54:	014e0063 	.word	0x014e0063
     f58:	014e014e 	.word	0x014e014e
     f5c:	012f014e 	.word	0x012f014e
     f60:	013f0113 	.word	0x013f0113
     f64:	014e014e 	.word	0x014e014e
     f68:	014e013f 	.word	0x014e013f
     f6c:	014e0113 	.word	0x014e0113
     f70:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     f74:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f78:	2206      	movs	r2, #6
     f7a:	f362 03c6 	bfi	r3, r2, #3, #4
     f7e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     f82:	f108 0801 	add.w	r8, r8, #1
		break;
     f86:	e7b2      	b.n	eee <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
     f88:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f8c:	2207      	movs	r2, #7
     f8e:	f362 03c6 	bfi	r3, r2, #3, #4
     f92:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     f96:	f108 0801 	add.w	r8, r8, #1
		break;
     f9a:	e7a8      	b.n	eee <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
     f9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     fa0:	2208      	movs	r2, #8
     fa2:	f362 03c6 	bfi	r3, r2, #3, #4
     fa6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     faa:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     fae:	f89d 3020 	ldrb.w	r3, [sp, #32]
     fb2:	f043 0302 	orr.w	r3, r3, #2
     fb6:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     fba:	e798      	b.n	eee <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
     fbc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     fc0:	f36f 03c6 	bfc	r3, #3, #4
     fc4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     fc8:	e791      	b.n	eee <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
     fca:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     fce:	2101      	movs	r1, #1
     fd0:	f361 0202 	bfi	r2, r1, #0, #3
     fd4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     fd8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     fdc:	f002 0278 	and.w	r2, r2, #120	; 0x78
     fe0:	2a40      	cmp	r2, #64	; 0x40
     fe2:	f000 80aa 	beq.w	113a <CONFIG_FPROTECT_BLOCK_SIZE+0x13a>
		if (conv->specifier == 'c') {
     fe6:	2b63      	cmp	r3, #99	; 0x63
     fe8:	f000 80ae 	beq.w	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
	conv->unsupported |= unsupported;
     fec:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ff0:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ff4:	4317      	orrs	r7, r2
     ff6:	f367 0341 	bfi	r3, r7, #1, #1
     ffa:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     ffe:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1002:	f013 0f01 	tst.w	r3, #1
    1006:	f000 80da 	beq.w	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
			width = va_arg(ap, int);
    100a:	9b03      	ldr	r3, [sp, #12]
    100c:	1d1a      	adds	r2, r3, #4
    100e:	9203      	str	r2, [sp, #12]
    1010:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1012:	2f00      	cmp	r7, #0
    1014:	f2c0 80cb 	blt.w	11ae <CONFIG_FPROTECT_BLOCK_SIZE+0x1ae>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1018:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    101c:	f013 0f04 	tst.w	r3, #4
    1020:	f000 80df 	beq.w	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
			int arg = va_arg(ap, int);
    1024:	9b03      	ldr	r3, [sp, #12]
    1026:	1d1a      	adds	r2, r3, #4
    1028:	9203      	str	r2, [sp, #12]
    102a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    102e:	f1bb 0f00 	cmp.w	fp, #0
    1032:	f2c0 80cd 	blt.w	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1036:	2300      	movs	r3, #0
    1038:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    103a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    103c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1040:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1044:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    1048:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    104c:	2b01      	cmp	r3, #1
    104e:	f000 80d1 	beq.w	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1052:	2b02      	cmp	r3, #2
    1054:	f000 8116 	beq.w	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1058:	2b04      	cmp	r3, #4
    105a:	f000 8167 	beq.w	132c <CONFIG_FPROTECT_BLOCK_SIZE+0x32c>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    105e:	2b03      	cmp	r3, #3
    1060:	f000 817e 	beq.w	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1064:	f89d 9020 	ldrb.w	r9, [sp, #32]
    1068:	f019 0303 	ands.w	r3, r9, #3
    106c:	9302      	str	r3, [sp, #8]
    106e:	f040 817d 	bne.w	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1072:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    1076:	3b25      	subs	r3, #37	; 0x25
    1078:	2b53      	cmp	r3, #83	; 0x53
    107a:	f200 8233 	bhi.w	14e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e4>
    107e:	e8df f013 	tbh	[pc, r3, lsl #1]
    1082:	0181      	.short	0x0181
    1084:	02310231 	.word	0x02310231
    1088:	02310231 	.word	0x02310231
    108c:	02310231 	.word	0x02310231
    1090:	02310231 	.word	0x02310231
    1094:	02310231 	.word	0x02310231
    1098:	02310231 	.word	0x02310231
    109c:	02310231 	.word	0x02310231
    10a0:	02310231 	.word	0x02310231
    10a4:	02310231 	.word	0x02310231
    10a8:	02310231 	.word	0x02310231
    10ac:	02310231 	.word	0x02310231
    10b0:	02310231 	.word	0x02310231
    10b4:	02310231 	.word	0x02310231
    10b8:	02310231 	.word	0x02310231
    10bc:	02310231 	.word	0x02310231
    10c0:	02310231 	.word	0x02310231
    10c4:	02310231 	.word	0x02310231
    10c8:	02310231 	.word	0x02310231
    10cc:	02310231 	.word	0x02310231
    10d0:	02310231 	.word	0x02310231
    10d4:	02310231 	.word	0x02310231
    10d8:	02310231 	.word	0x02310231
    10dc:	02310231 	.word	0x02310231
    10e0:	02310231 	.word	0x02310231
    10e4:	02310231 	.word	0x02310231
    10e8:	023101c7 	.word	0x023101c7
    10ec:	02310231 	.word	0x02310231
    10f0:	02310231 	.word	0x02310231
    10f4:	02310231 	.word	0x02310231
    10f8:	02310231 	.word	0x02310231
    10fc:	01a10231 	.word	0x01a10231
    1100:	023101ab 	.word	0x023101ab
    1104:	02310231 	.word	0x02310231
    1108:	01ab0231 	.word	0x01ab0231
    110c:	02310231 	.word	0x02310231
    1110:	02310231 	.word	0x02310231
    1114:	01c70208 	.word	0x01c70208
    1118:	023101ea 	.word	0x023101ea
    111c:	018f0231 	.word	0x018f0231
    1120:	01c70231 	.word	0x01c70231
    1124:	02310231 	.word	0x02310231
    1128:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    112a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    112e:	2102      	movs	r1, #2
    1130:	f361 0202 	bfi	r2, r1, #0, #3
    1134:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    1138:	e74e      	b.n	fd8 <cbvprintf+0x384>
			conv->invalid = true;
    113a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    113e:	f041 0101 	orr.w	r1, r1, #1
    1142:	f88d 1020 	strb.w	r1, [sp, #32]
    1146:	e74e      	b.n	fe6 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1148:	1e17      	subs	r7, r2, #0
    114a:	bf18      	it	ne
    114c:	2701      	movne	r7, #1
    114e:	e74d      	b.n	fec <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    1150:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1154:	2204      	movs	r2, #4
    1156:	f362 0302 	bfi	r3, r2, #0, #3
    115a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    115e:	2701      	movs	r7, #1
			break;
    1160:	e744      	b.n	fec <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    1162:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1166:	2203      	movs	r2, #3
    1168:	f362 0302 	bfi	r3, r2, #0, #3
    116c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    1170:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1174:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1178:	2b40      	cmp	r3, #64	; 0x40
    117a:	f47f af37 	bne.w	fec <cbvprintf+0x398>
			unsupported = true;
    117e:	2701      	movs	r7, #1
    1180:	e734      	b.n	fec <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    1182:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1186:	2203      	movs	r2, #3
    1188:	f362 0302 	bfi	r3, r2, #0, #3
    118c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    1190:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1194:	f013 0f78 	tst.w	r3, #120	; 0x78
    1198:	f43f af28 	beq.w	fec <cbvprintf+0x398>
			unsupported = true;
    119c:	2701      	movs	r7, #1
    119e:	e725      	b.n	fec <cbvprintf+0x398>
		conv->invalid = true;
    11a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    11a4:	f043 0301 	orr.w	r3, r3, #1
    11a8:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    11ac:	e71e      	b.n	fec <cbvprintf+0x398>
				conv->flag_dash = true;
    11ae:	f89d 3020 	ldrb.w	r3, [sp, #32]
    11b2:	f043 0304 	orr.w	r3, r3, #4
    11b6:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    11ba:	427f      	negs	r7, r7
    11bc:	e72c      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		} else if (conv->width_present) {
    11be:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    11c2:	2b00      	cmp	r3, #0
    11c4:	db02      	blt.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
		int width = -1;
    11c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    11ca:	e725      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			width = conv->width_value;
    11cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    11ce:	e723      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
				conv->prec_present = false;
    11d0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    11d4:	f36f 0341 	bfc	r3, #1, #1
    11d8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    11dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    11e0:	e729      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
		} else if (conv->prec_present) {
    11e2:	f013 0f02 	tst.w	r3, #2
    11e6:	d002      	beq.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
			precision = conv->prec_value;
    11e8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    11ec:	e723      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
		int precision = -1;
    11ee:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    11f2:	e720      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
			switch (length_mod) {
    11f4:	1ecb      	subs	r3, r1, #3
    11f6:	2b04      	cmp	r3, #4
    11f8:	d804      	bhi.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11fa:	e8df f003 	tbb	[pc, r3]
    11fe:	1d0b      	.short	0x1d0b
    1200:	3529      	.short	0x3529
    1202:	35          	.byte	0x35
    1203:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1204:	9b03      	ldr	r3, [sp, #12]
    1206:	1d1a      	adds	r2, r3, #4
    1208:	9203      	str	r2, [sp, #12]
    120a:	681a      	ldr	r2, [r3, #0]
    120c:	17d3      	asrs	r3, r2, #31
    120e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1212:	e006      	b.n	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
					value->sint = va_arg(ap, long);
    1214:	9b03      	ldr	r3, [sp, #12]
    1216:	1d1a      	adds	r2, r3, #4
    1218:	9203      	str	r2, [sp, #12]
    121a:	681a      	ldr	r2, [r3, #0]
    121c:	17d3      	asrs	r3, r2, #31
    121e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    1222:	2901      	cmp	r1, #1
    1224:	d028      	beq.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
			} else if (length_mod == LENGTH_H) {
    1226:	2902      	cmp	r1, #2
    1228:	f47f af1c 	bne.w	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
				value->sint = (short)value->sint;
    122c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1230:	17d3      	asrs	r3, r2, #31
    1232:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1236:	e715      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
					(sint_value_type)va_arg(ap, long long);
    1238:	9b03      	ldr	r3, [sp, #12]
    123a:	3307      	adds	r3, #7
    123c:	f023 0307 	bic.w	r3, r3, #7
    1240:	f103 0208 	add.w	r2, r3, #8
    1244:	9203      	str	r2, [sp, #12]
    1246:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    124a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    124e:	e7e8      	b.n	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
					(sint_value_type)va_arg(ap, intmax_t);
    1250:	9b03      	ldr	r3, [sp, #12]
    1252:	3307      	adds	r3, #7
    1254:	f023 0307 	bic.w	r3, r3, #7
    1258:	f103 0208 	add.w	r2, r3, #8
    125c:	9203      	str	r2, [sp, #12]
    125e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1262:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1266:	e7dc      	b.n	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1268:	9b03      	ldr	r3, [sp, #12]
    126a:	1d1a      	adds	r2, r3, #4
    126c:	9203      	str	r2, [sp, #12]
    126e:	681a      	ldr	r2, [r3, #0]
    1270:	17d3      	asrs	r3, r2, #31
				value->sint =
    1272:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1276:	e7d4      	b.n	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
				value->sint = (char)value->sint;
    1278:	f89d 3018 	ldrb.w	r3, [sp, #24]
    127c:	9306      	str	r3, [sp, #24]
    127e:	2300      	movs	r3, #0
    1280:	9307      	str	r3, [sp, #28]
    1282:	e6ef      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
			switch (length_mod) {
    1284:	1ecb      	subs	r3, r1, #3
    1286:	2b04      	cmp	r3, #4
    1288:	d804      	bhi.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    128a:	e8df f003 	tbb	[pc, r3]
    128e:	1f0b      	.short	0x1f0b
    1290:	4135      	.short	0x4135
    1292:	41          	.byte	0x41
    1293:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1294:	9b03      	ldr	r3, [sp, #12]
    1296:	1d1a      	adds	r2, r3, #4
    1298:	9203      	str	r2, [sp, #12]
    129a:	681b      	ldr	r3, [r3, #0]
    129c:	9306      	str	r3, [sp, #24]
    129e:	2300      	movs	r3, #0
    12a0:	9307      	str	r3, [sp, #28]
				break;
    12a2:	e01e      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
				    && (conv->specifier == 'c')) {
    12a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    12a8:	2b63      	cmp	r3, #99	; 0x63
    12aa:	d007      	beq.n	12bc <CONFIG_FPROTECT_BLOCK_SIZE+0x2bc>
					value->uint = va_arg(ap, unsigned long);
    12ac:	9b03      	ldr	r3, [sp, #12]
    12ae:	1d1a      	adds	r2, r3, #4
    12b0:	9203      	str	r2, [sp, #12]
    12b2:	681b      	ldr	r3, [r3, #0]
    12b4:	9306      	str	r3, [sp, #24]
    12b6:	2300      	movs	r3, #0
    12b8:	9307      	str	r3, [sp, #28]
    12ba:	e012      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
					value->uint = (wchar_t)va_arg(ap,
    12bc:	9b03      	ldr	r3, [sp, #12]
    12be:	1d1a      	adds	r2, r3, #4
    12c0:	9203      	str	r2, [sp, #12]
    12c2:	681b      	ldr	r3, [r3, #0]
    12c4:	9306      	str	r3, [sp, #24]
    12c6:	2300      	movs	r3, #0
    12c8:	9307      	str	r3, [sp, #28]
    12ca:	e00a      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
					(uint_value_type)va_arg(ap,
    12cc:	9b03      	ldr	r3, [sp, #12]
    12ce:	3307      	adds	r3, #7
    12d0:	f023 0307 	bic.w	r3, r3, #7
    12d4:	f103 0208 	add.w	r2, r3, #8
    12d8:	9203      	str	r2, [sp, #12]
    12da:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    12de:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    12e2:	2901      	cmp	r1, #1
    12e4:	d01c      	beq.n	1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>
			} else if (length_mod == LENGTH_H) {
    12e6:	2902      	cmp	r1, #2
    12e8:	f47f aebc 	bne.w	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
				value->uint = (unsigned short)value->uint;
    12ec:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    12f0:	9306      	str	r3, [sp, #24]
    12f2:	2300      	movs	r3, #0
    12f4:	9307      	str	r3, [sp, #28]
    12f6:	e6b5      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
					(uint_value_type)va_arg(ap,
    12f8:	9b03      	ldr	r3, [sp, #12]
    12fa:	3307      	adds	r3, #7
    12fc:	f023 0307 	bic.w	r3, r3, #7
    1300:	f103 0208 	add.w	r2, r3, #8
    1304:	9203      	str	r2, [sp, #12]
    1306:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    130e:	e7e8      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
					(uint_value_type)va_arg(ap, size_t);
    1310:	9b03      	ldr	r3, [sp, #12]
    1312:	1d1a      	adds	r2, r3, #4
    1314:	9203      	str	r2, [sp, #12]
    1316:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1318:	9306      	str	r3, [sp, #24]
    131a:	2300      	movs	r3, #0
    131c:	9307      	str	r3, [sp, #28]
				break;
    131e:	e7e0      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
				value->uint = (unsigned char)value->uint;
    1320:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1324:	9306      	str	r3, [sp, #24]
    1326:	2300      	movs	r3, #0
    1328:	9307      	str	r3, [sp, #28]
    132a:	e69b      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
			if (length_mod == LENGTH_UPPER_L) {
    132c:	2908      	cmp	r1, #8
    132e:	d00b      	beq.n	1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>
				value->dbl = va_arg(ap, double);
    1330:	9b03      	ldr	r3, [sp, #12]
    1332:	3307      	adds	r3, #7
    1334:	f023 0307 	bic.w	r3, r3, #7
    1338:	f103 0208 	add.w	r2, r3, #8
    133c:	9203      	str	r2, [sp, #12]
    133e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1342:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1346:	e68d      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
				value->ldbl = va_arg(ap, long double);
    1348:	9b03      	ldr	r3, [sp, #12]
    134a:	3307      	adds	r3, #7
    134c:	f023 0307 	bic.w	r3, r3, #7
    1350:	f103 0208 	add.w	r2, r3, #8
    1354:	9203      	str	r2, [sp, #12]
    1356:	e9d3 2300 	ldrd	r2, r3, [r3]
    135a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    135e:	e681      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
			value->ptr = va_arg(ap, void *);
    1360:	9b03      	ldr	r3, [sp, #12]
    1362:	1d1a      	adds	r2, r3, #4
    1364:	9203      	str	r2, [sp, #12]
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	9306      	str	r3, [sp, #24]
    136a:	e67b      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
			OUTS(sp, fp);
    136c:	4643      	mov	r3, r8
    136e:	4652      	mov	r2, sl
    1370:	4629      	mov	r1, r5
    1372:	4630      	mov	r0, r6
    1374:	f009 fca7 	bl	acc6 <outs>
    1378:	2800      	cmp	r0, #0
    137a:	f2c0 814f 	blt.w	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    137e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1380:	46c2      	mov	sl, r8
			continue;
    1382:	e46f      	b.n	c64 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1384:	4629      	mov	r1, r5
    1386:	2025      	movs	r0, #37	; 0x25
    1388:	47b0      	blx	r6
    138a:	2800      	cmp	r0, #0
    138c:	f2c0 8146 	blt.w	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    1390:	3401      	adds	r4, #1
		char sign = 0;
    1392:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    1396:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    139a:	f04f 0a00 	mov.w	sl, #0
			break;
    139e:	e0a7      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
		case 's': {
			bps = (const char *)value->ptr;
    13a0:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    13a4:	f1bb 0f00 	cmp.w	fp, #0
    13a8:	db08      	blt.n	13bc <CONFIG_FPROTECT_BLOCK_SIZE+0x3bc>
				len = strnlen(bps, precision);
    13aa:	4659      	mov	r1, fp
    13ac:	4650      	mov	r0, sl
    13ae:	f009 fd81 	bl	aeb4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    13b2:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    13b6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    13ba:	e099      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
				len = strlen(bps);
    13bc:	4650      	mov	r0, sl
    13be:	f009 fd71 	bl	aea4 <strlen>
    13c2:	e7f6      	b.n	13b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b2>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    13c4:	9b06      	ldr	r3, [sp, #24]
    13c6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    13ca:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    13ce:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    13d2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    13d6:	e08b      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    13d8:	f019 0f08 	tst.w	r9, #8
    13dc:	d105      	bne.n	13ea <CONFIG_FPROTECT_BLOCK_SIZE+0x3ea>
				sign = '+';
			} else if (conv->flag_space) {
    13de:	f019 0910 	ands.w	r9, r9, #16
    13e2:	d004      	beq.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
				sign = ' ';
    13e4:	f04f 0920 	mov.w	r9, #32
    13e8:	e001      	b.n	13ee <CONFIG_FPROTECT_BLOCK_SIZE+0x3ee>
				sign = '+';
    13ea:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    13ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    13f2:	2a00      	cmp	r2, #0
    13f4:	f173 0100 	sbcs.w	r1, r3, #0
    13f8:	db02      	blt.n	1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    13fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    13fe:	e009      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
				value->uint = (uint_value_type)-sint;
    1400:	4252      	negs	r2, r2
    1402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1406:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    140a:	f04f 092d 	mov.w	r9, #45	; 0x2d
    140e:	e001      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
		switch (conv->specifier) {
    1410:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1414:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1418:	9300      	str	r3, [sp, #0]
    141a:	ab0c      	add	r3, sp, #48	; 0x30
    141c:	aa08      	add	r2, sp, #32
    141e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1422:	f009 fbe6 	bl	abf2 <encode_uint>
    1426:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1428:	f1bb 0f00 	cmp.w	fp, #0
    142c:	f2c0 8090 	blt.w	1550 <CONFIG_FPROTECT_BLOCK_SIZE+0x550>
				size_t len = bpe - bps;
    1430:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1434:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1438:	f89d 2020 	ldrb.w	r2, [sp, #32]
    143c:	f36f 1286 	bfc	r2, #6, #1
    1440:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1444:	459b      	cmp	fp, r3
    1446:	f240 8086 	bls.w	1556 <CONFIG_FPROTECT_BLOCK_SIZE+0x556>
					conv->pad0_value = precision - (int)len;
    144a:	ebab 0303 	sub.w	r3, fp, r3
    144e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    1450:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1454:	e04c      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1456:	9806      	ldr	r0, [sp, #24]
    1458:	b930      	cbnz	r0, 1468 <CONFIG_FPROTECT_BLOCK_SIZE+0x468>
		char sign = 0;
    145a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    145e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 1624 <CONFIG_FPROTECT_BLOCK_SIZE+0x624>
			bps = "(nil)";
    1462:	f1ab 0a05 	sub.w	sl, fp, #5
    1466:	e043      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1468:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    146c:	9300      	str	r3, [sp, #0]
    146e:	ab0c      	add	r3, sp, #48	; 0x30
    1470:	aa08      	add	r2, sp, #32
    1472:	2100      	movs	r1, #0
    1474:	f009 fbbd 	bl	abf2 <encode_uint>
    1478:	4682      	mov	sl, r0
				conv->altform_0c = true;
    147a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    147e:	f043 0310 	orr.w	r3, r3, #16
    1482:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    1486:	2378      	movs	r3, #120	; 0x78
    1488:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    148c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    1490:	e7ca      	b.n	1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1492:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    1494:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1498:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    149c:	2b07      	cmp	r3, #7
    149e:	d806      	bhi.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
    14a0:	e8df f003 	tbb	[pc, r3]
    14a4:	100e0c04 	.word	0x100e0c04
    14a8:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    14ac:	6014      	str	r4, [r2, #0]
		char sign = 0;
    14ae:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    14b2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    14b6:	f04f 0a00 	mov.w	sl, #0
}
    14ba:	e019      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
		*(signed char *)dp = (signed char)count;
    14bc:	7014      	strb	r4, [r2, #0]
		break;
    14be:	e7f6      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		*(short *)dp = (short)count;
    14c0:	8014      	strh	r4, [r2, #0]
		break;
    14c2:	e7f4      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		*(long *)dp = (long)count;
    14c4:	6014      	str	r4, [r2, #0]
		break;
    14c6:	e7f2      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		*(long long *)dp = (long long)count;
    14c8:	4620      	mov	r0, r4
    14ca:	17e1      	asrs	r1, r4, #31
    14cc:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    14d0:	e7ed      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		*(intmax_t *)dp = (intmax_t)count;
    14d2:	4620      	mov	r0, r4
    14d4:	17e1      	asrs	r1, r4, #31
    14d6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    14da:	e7e8      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		*(size_t *)dp = (size_t)count;
    14dc:	6014      	str	r4, [r2, #0]
		break;
    14de:	e7e6      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    14e0:	6014      	str	r4, [r2, #0]
		break;
    14e2:	e7e4      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		switch (conv->specifier) {
    14e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    14e8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    14ec:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    14f0:	f1ba 0f00 	cmp.w	sl, #0
    14f4:	f000 808e 	beq.w	1614 <CONFIG_FPROTECT_BLOCK_SIZE+0x614>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    14f8:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    14fc:	f1b9 0f00 	cmp.w	r9, #0
    1500:	d000      	beq.n	1504 <CONFIG_FPROTECT_BLOCK_SIZE+0x504>
			nj_len += 1U;
    1502:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    1504:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    1508:	f011 0f10 	tst.w	r1, #16
    150c:	d026      	beq.n	155c <CONFIG_FPROTECT_BLOCK_SIZE+0x55c>
			nj_len += 2U;
    150e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1510:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1512:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1514:	f011 0f40 	tst.w	r1, #64	; 0x40
    1518:	d001      	beq.n	151e <CONFIG_FPROTECT_BLOCK_SIZE+0x51e>
			nj_len += conv->pad0_pre_exp;
    151a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    151c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    151e:	2f00      	cmp	r7, #0
    1520:	dd32      	ble.n	1588 <CONFIG_FPROTECT_BLOCK_SIZE+0x588>
			width -= (int)nj_len;
    1522:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1524:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1528:	f013 0f04 	tst.w	r3, #4
    152c:	d12c      	bne.n	1588 <CONFIG_FPROTECT_BLOCK_SIZE+0x588>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    152e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1532:	d018      	beq.n	1566 <CONFIG_FPROTECT_BLOCK_SIZE+0x566>
					if (sign != 0) {
    1534:	f1b9 0f00 	cmp.w	r9, #0
    1538:	d018      	beq.n	156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>
						OUTC(sign);
    153a:	4629      	mov	r1, r5
    153c:	4648      	mov	r0, r9
    153e:	47b0      	blx	r6
    1540:	2800      	cmp	r0, #0
    1542:	db6b      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    1544:	3401      	adds	r4, #1
						sign = 0;
    1546:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    154a:	2330      	movs	r3, #48	; 0x30
    154c:	9302      	str	r3, [sp, #8]
    154e:	e00f      	b.n	1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>
		const char *bpe = buf + sizeof(buf);
    1550:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1554:	e7cc      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
    1556:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    155a:	e7c9      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
		} else if (conv->altform_0) {
    155c:	f011 0f08 	tst.w	r1, #8
    1560:	d0d6      	beq.n	1510 <CONFIG_FPROTECT_BLOCK_SIZE+0x510>
			nj_len += 1U;
    1562:	3201      	adds	r2, #1
    1564:	e7d4      	b.n	1510 <CONFIG_FPROTECT_BLOCK_SIZE+0x510>
				char pad = ' ';
    1566:	2320      	movs	r3, #32
    1568:	9302      	str	r3, [sp, #8]
    156a:	e001      	b.n	1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>
					pad = '0';
    156c:	2330      	movs	r3, #48	; 0x30
    156e:	9302      	str	r3, [sp, #8]
    1570:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1572:	1e5f      	subs	r7, r3, #1
    1574:	2b00      	cmp	r3, #0
    1576:	dd07      	ble.n	1588 <CONFIG_FPROTECT_BLOCK_SIZE+0x588>
					OUTC(pad);
    1578:	4629      	mov	r1, r5
    157a:	9802      	ldr	r0, [sp, #8]
    157c:	47b0      	blx	r6
    157e:	2800      	cmp	r0, #0
    1580:	db4c      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    1582:	3401      	adds	r4, #1
				while (width-- > 0) {
    1584:	463b      	mov	r3, r7
    1586:	e7f4      	b.n	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1588:	f1b9 0f00 	cmp.w	r9, #0
    158c:	d005      	beq.n	159a <CONFIG_FPROTECT_BLOCK_SIZE+0x59a>
			OUTC(sign);
    158e:	4629      	mov	r1, r5
    1590:	4648      	mov	r0, r9
    1592:	47b0      	blx	r6
    1594:	2800      	cmp	r0, #0
    1596:	db41      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    1598:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    159a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    159e:	f3c3 1200 	ubfx	r2, r3, #4, #1
    15a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    15a6:	4313      	orrs	r3, r2
    15a8:	d005      	beq.n	15b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b6>
				OUTC('0');
    15aa:	4629      	mov	r1, r5
    15ac:	2030      	movs	r0, #48	; 0x30
    15ae:	47b0      	blx	r6
    15b0:	2800      	cmp	r0, #0
    15b2:	db33      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    15b4:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    15b6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    15ba:	f013 0f10 	tst.w	r3, #16
    15be:	d006      	beq.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
				OUTC(conv->specifier);
    15c0:	4629      	mov	r1, r5
    15c2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    15c6:	47b0      	blx	r6
    15c8:	2800      	cmp	r0, #0
    15ca:	db27      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    15cc:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    15ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    15d0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    15d4:	2b00      	cmp	r3, #0
    15d6:	dd07      	ble.n	15e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e8>
				OUTC('0');
    15d8:	4629      	mov	r1, r5
    15da:	2030      	movs	r0, #48	; 0x30
    15dc:	47b0      	blx	r6
    15de:	2800      	cmp	r0, #0
    15e0:	db1c      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    15e2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    15e4:	464b      	mov	r3, r9
    15e6:	e7f3      	b.n	15d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d0>
			}

			OUTS(bps, bpe);
    15e8:	465b      	mov	r3, fp
    15ea:	4652      	mov	r2, sl
    15ec:	4629      	mov	r1, r5
    15ee:	4630      	mov	r0, r6
    15f0:	f009 fb69 	bl	acc6 <outs>
    15f4:	2800      	cmp	r0, #0
    15f6:	db11      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    15f8:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    15fa:	2f00      	cmp	r7, #0
    15fc:	dd07      	ble.n	160e <CONFIG_FPROTECT_BLOCK_SIZE+0x60e>
			OUTC(' ');
    15fe:	4629      	mov	r1, r5
    1600:	2020      	movs	r0, #32
    1602:	47b0      	blx	r6
    1604:	2800      	cmp	r0, #0
    1606:	db09      	blt.n	161c <CONFIG_FPROTECT_BLOCK_SIZE+0x61c>
    1608:	3401      	adds	r4, #1
			--width;
    160a:	3f01      	subs	r7, #1
    160c:	e7f5      	b.n	15fa <CONFIG_FPROTECT_BLOCK_SIZE+0x5fa>
		fp = extract_conversion(conv, sp);
    160e:	46c2      	mov	sl, r8
    1610:	f7ff bb28 	b.w	c64 <cbvprintf+0x10>
    1614:	46c2      	mov	sl, r8
    1616:	f7ff bb25 	b.w	c64 <cbvprintf+0x10>
		}
	}

	return count;
    161a:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    161c:	b013      	add	sp, #76	; 0x4c
    161e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1622:	bf00      	nop
    1624:	0000be05 	.word	0x0000be05

00001628 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1628:	b508      	push	{r3, lr}
	__asm__ volatile(
    162a:	f04f 0220 	mov.w	r2, #32
    162e:	f3ef 8311 	mrs	r3, BASEPRI
    1632:	f382 8812 	msr	BASEPRI_MAX, r2
    1636:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    163a:	f000 ff7b 	bl	2534 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    163e:	4803      	ldr	r0, [pc, #12]	; (164c <sys_reboot+0x24>)
    1640:	f009 fa02 	bl	aa48 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1644:	f000 fa74 	bl	1b30 <arch_cpu_idle>
    1648:	e7fc      	b.n	1644 <sys_reboot+0x1c>
    164a:	bf00      	nop
    164c:	0000be08 	.word	0x0000be08

00001650 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    1650:	b570      	push	{r4, r5, r6, lr}
    1652:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    1654:	4b42      	ldr	r3, [pc, #264]	; (1760 <pm_system_resume+0x110>)
    1656:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1658:	f004 031f 	and.w	r3, r4, #31
    165c:	2201      	movs	r2, #1
    165e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1660:	0961      	lsrs	r1, r4, #5
    1662:	4b40      	ldr	r3, [pc, #256]	; (1764 <pm_system_resume+0x114>)
    1664:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1668:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    166a:	f3bf 8f5b 	dmb	ish
    166e:	e853 1f00 	ldrex	r1, [r3]
    1672:	ea01 0500 	and.w	r5, r1, r0
    1676:	e843 5600 	strex	r6, r5, [r3]
    167a:	2e00      	cmp	r6, #0
    167c:	d1f7      	bne.n	166e <pm_system_resume+0x1e>
    167e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1682:	420a      	tst	r2, r1
    1684:	d05a      	beq.n	173c <pm_system_resume+0xec>
		exit_pos_ops(z_power_states[id]);
    1686:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    168a:	4a37      	ldr	r2, [pc, #220]	; (1768 <pm_system_resume+0x118>)
    168c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1690:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1694:	ab04      	add	r3, sp, #16
    1696:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    169a:	4b34      	ldr	r3, [pc, #208]	; (176c <pm_system_resume+0x11c>)
    169c:	b19b      	cbz	r3, 16c6 <pm_system_resume+0x76>
		pm_power_state_exit_post_ops(info);
    169e:	f009 fc8e 	bl	afbe <pm_power_state_exit_post_ops>
    16a2:	f04f 0320 	mov.w	r3, #32
    16a6:	f3ef 8611 	mrs	r6, BASEPRI
    16aa:	f383 8812 	msr	BASEPRI_MAX, r3
    16ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16b2:	482f      	ldr	r0, [pc, #188]	; (1770 <pm_system_resume+0x120>)
    16b4:	f004 fa9e 	bl	5bf4 <z_spin_lock_valid>
    16b8:	b158      	cbz	r0, 16d2 <pm_system_resume+0x82>
	z_spin_lock_set_owner(l);
    16ba:	482d      	ldr	r0, [pc, #180]	; (1770 <pm_system_resume+0x120>)
    16bc:	f004 faba 	bl	5c34 <z_spin_lock_set_owner>
	return list->head;
    16c0:	4b2c      	ldr	r3, [pc, #176]	; (1774 <pm_system_resume+0x124>)
    16c2:	681d      	ldr	r5, [r3, #0]
    16c4:	e01a      	b.n	16fc <pm_system_resume+0xac>
	__asm__ volatile(
    16c6:	2300      	movs	r3, #0
    16c8:	f383 8811 	msr	BASEPRI, r3
    16cc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    16d0:	e7e7      	b.n	16a2 <pm_system_resume+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16d2:	4d29      	ldr	r5, [pc, #164]	; (1778 <pm_system_resume+0x128>)
    16d4:	2381      	movs	r3, #129	; 0x81
    16d6:	462a      	mov	r2, r5
    16d8:	4928      	ldr	r1, [pc, #160]	; (177c <pm_system_resume+0x12c>)
    16da:	4829      	ldr	r0, [pc, #164]	; (1780 <pm_system_resume+0x130>)
    16dc:	f009 f9b4 	bl	aa48 <printk>
    16e0:	4923      	ldr	r1, [pc, #140]	; (1770 <pm_system_resume+0x120>)
    16e2:	4828      	ldr	r0, [pc, #160]	; (1784 <pm_system_resume+0x134>)
    16e4:	f009 f9b0 	bl	aa48 <printk>
    16e8:	2181      	movs	r1, #129	; 0x81
    16ea:	4628      	mov	r0, r5
    16ec:	f009 fb05 	bl	acfa <assert_post_action>
    16f0:	e7e3      	b.n	16ba <pm_system_resume+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    16f2:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    16f4:	b10d      	cbz	r5, 16fa <pm_system_resume+0xaa>
	return node->next;
    16f6:	682b      	ldr	r3, [r5, #0]
    16f8:	b16b      	cbz	r3, 1716 <pm_system_resume+0xc6>
{
    16fa:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    16fc:	b15d      	cbz	r5, 1716 <pm_system_resume+0xc6>
			callback = notifier->state_exit;
    16fe:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    1700:	2a00      	cmp	r2, #0
    1702:	d0f6      	beq.n	16f2 <pm_system_resume+0xa2>
			callback(z_power_states[_current_cpu->id].state);
    1704:	4b16      	ldr	r3, [pc, #88]	; (1760 <pm_system_resume+0x110>)
    1706:	7d1b      	ldrb	r3, [r3, #20]
    1708:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    170c:	4916      	ldr	r1, [pc, #88]	; (1768 <pm_system_resume+0x118>)
    170e:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1712:	4790      	blx	r2
    1714:	e7ed      	b.n	16f2 <pm_system_resume+0xa2>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    1716:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1718:	4815      	ldr	r0, [pc, #84]	; (1770 <pm_system_resume+0x120>)
    171a:	f004 fa7b 	bl	5c14 <z_spin_unlock_valid>
    171e:	b178      	cbz	r0, 1740 <pm_system_resume+0xf0>
	__asm__ volatile(
    1720:	f385 8811 	msr	BASEPRI, r5
    1724:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1728:	4a0f      	ldr	r2, [pc, #60]	; (1768 <pm_system_resume+0x118>)
    172a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    172e:	00a1      	lsls	r1, r4, #2
    1730:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    1734:	2300      	movs	r3, #0
    1736:	5053      	str	r3, [r2, r1]
    1738:	6063      	str	r3, [r4, #4]
    173a:	60a3      	str	r3, [r4, #8]
			0, 0};
	}
}
    173c:	b004      	add	sp, #16
    173e:	bd70      	pop	{r4, r5, r6, pc}
    1740:	4e0d      	ldr	r6, [pc, #52]	; (1778 <pm_system_resume+0x128>)
    1742:	23ac      	movs	r3, #172	; 0xac
    1744:	4632      	mov	r2, r6
    1746:	4910      	ldr	r1, [pc, #64]	; (1788 <pm_system_resume+0x138>)
    1748:	480d      	ldr	r0, [pc, #52]	; (1780 <pm_system_resume+0x130>)
    174a:	f009 f97d 	bl	aa48 <printk>
    174e:	4908      	ldr	r1, [pc, #32]	; (1770 <pm_system_resume+0x120>)
    1750:	480e      	ldr	r0, [pc, #56]	; (178c <pm_system_resume+0x13c>)
    1752:	f009 f979 	bl	aa48 <printk>
    1756:	21ac      	movs	r1, #172	; 0xac
    1758:	4630      	mov	r0, r6
    175a:	f009 face 	bl	acfa <assert_post_action>
    175e:	e7df      	b.n	1720 <pm_system_resume+0xd0>
    1760:	20001004 	.word	0x20001004
    1764:	20000524 	.word	0x20000524
    1768:	20000528 	.word	0x20000528
    176c:	0000afbf 	.word	0x0000afbf
    1770:	20000518 	.word	0x20000518
    1774:	2000051c 	.word	0x2000051c
    1778:	0000bd78 	.word	0x0000bd78
    177c:	0000bdd0 	.word	0x0000bdd0
    1780:	0000bc60 	.word	0x0000bc60
    1784:	0000bde8 	.word	0x0000bde8
    1788:	0000bda0 	.word	0x0000bda0
    178c:	0000bdb8 	.word	0x0000bdb8

00001790 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1790:	b5f0      	push	{r4, r5, r6, r7, lr}
    1792:	b089      	sub	sp, #36	; 0x24
    1794:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1796:	4b6b      	ldr	r3, [pc, #428]	; (1944 <pm_system_suspend+0x1b4>)
    1798:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    179a:	f004 031f 	and.w	r3, r4, #31
    179e:	2201      	movs	r2, #1
    17a0:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    17a2:	0961      	lsrs	r1, r4, #5
    17a4:	4b68      	ldr	r3, [pc, #416]	; (1948 <pm_system_suspend+0x1b8>)
    17a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    17aa:	f3bf 8f5b 	dmb	ish
    17ae:	e853 1f00 	ldrex	r1, [r3]
    17b2:	ea41 0002 	orr.w	r0, r1, r2
    17b6:	e843 0600 	strex	r6, r0, [r3]
    17ba:	2e00      	cmp	r6, #0
    17bc:	d1f7      	bne.n	17ae <pm_system_suspend+0x1e>
    17be:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    17c2:	420a      	tst	r2, r1
    17c4:	d01e      	beq.n	1804 <pm_system_suspend+0x74>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    17c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    17ca:	4a60      	ldr	r2, [pc, #384]	; (194c <pm_system_suspend+0x1bc>)
    17cc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    17d0:	2b00      	cmp	r3, #0
    17d2:	f000 80b5 	beq.w	1940 <pm_system_suspend+0x1b0>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    17d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    17da:	d123      	bne.n	1824 <pm_system_suspend+0x94>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    17dc:	f004 ffce 	bl	677c <k_sched_lock>
	__asm__ volatile(
    17e0:	f04f 0320 	mov.w	r3, #32
    17e4:	f3ef 8611 	mrs	r6, BASEPRI
    17e8:	f383 8812 	msr	BASEPRI_MAX, r3
    17ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    17f0:	4857      	ldr	r0, [pc, #348]	; (1950 <pm_system_suspend+0x1c0>)
    17f2:	f004 f9ff 	bl	5bf4 <z_spin_lock_valid>
    17f6:	b358      	cbz	r0, 1850 <pm_system_suspend+0xc0>
	z_spin_lock_set_owner(l);
    17f8:	4855      	ldr	r0, [pc, #340]	; (1950 <pm_system_suspend+0x1c0>)
    17fa:	f004 fa1b 	bl	5c34 <z_spin_lock_set_owner>
	return list->head;
    17fe:	4b55      	ldr	r3, [pc, #340]	; (1954 <pm_system_suspend+0x1c4>)
    1800:	681d      	ldr	r5, [r3, #0]
    1802:	e03a      	b.n	187a <pm_system_suspend+0xea>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1804:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    1808:	4b50      	ldr	r3, [pc, #320]	; (194c <pm_system_suspend+0x1bc>)
    180a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    180e:	466f      	mov	r7, sp
    1810:	462a      	mov	r2, r5
    1812:	4621      	mov	r1, r4
    1814:	4638      	mov	r0, r7
    1816:	f009 fa78 	bl	ad0a <pm_policy_next_state>
    181a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    181e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    1822:	e7d0      	b.n	17c6 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    1824:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1828:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    182c:	689b      	ldr	r3, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    182e:	0c59      	lsrs	r1, r3, #17
    1830:	03d8      	lsls	r0, r3, #15
    1832:	4e49      	ldr	r6, [pc, #292]	; (1958 <pm_system_suspend+0x1c8>)
    1834:	4a49      	ldr	r2, [pc, #292]	; (195c <pm_system_suspend+0x1cc>)
    1836:	2300      	movs	r3, #0
    1838:	1980      	adds	r0, r0, r6
    183a:	f04f 0600 	mov.w	r6, #0
    183e:	eb46 0101 	adc.w	r1, r6, r1
    1842:	f7fe fc5d 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1846:	2101      	movs	r1, #1
    1848:	1a28      	subs	r0, r5, r0
    184a:	f006 fabf 	bl	7dcc <z_set_timeout_expiry>
    184e:	e7c5      	b.n	17dc <pm_system_suspend+0x4c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1850:	4d43      	ldr	r5, [pc, #268]	; (1960 <pm_system_suspend+0x1d0>)
    1852:	2381      	movs	r3, #129	; 0x81
    1854:	462a      	mov	r2, r5
    1856:	4943      	ldr	r1, [pc, #268]	; (1964 <pm_system_suspend+0x1d4>)
    1858:	4843      	ldr	r0, [pc, #268]	; (1968 <pm_system_suspend+0x1d8>)
    185a:	f009 f8f5 	bl	aa48 <printk>
    185e:	493c      	ldr	r1, [pc, #240]	; (1950 <pm_system_suspend+0x1c0>)
    1860:	4842      	ldr	r0, [pc, #264]	; (196c <pm_system_suspend+0x1dc>)
    1862:	f009 f8f1 	bl	aa48 <printk>
    1866:	2181      	movs	r1, #129	; 0x81
    1868:	4628      	mov	r0, r5
    186a:	f009 fa46 	bl	acfa <assert_post_action>
    186e:	e7c3      	b.n	17f8 <pm_system_suspend+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1870:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    1872:	b10d      	cbz	r5, 1878 <pm_system_suspend+0xe8>
	return node->next;
    1874:	682b      	ldr	r3, [r5, #0]
    1876:	b16b      	cbz	r3, 1894 <pm_system_suspend+0x104>
{
    1878:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    187a:	b15d      	cbz	r5, 1894 <pm_system_suspend+0x104>
			callback = notifier->state_entry;
    187c:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    187e:	2a00      	cmp	r2, #0
    1880:	d0f6      	beq.n	1870 <pm_system_suspend+0xe0>
			callback(z_power_states[_current_cpu->id].state);
    1882:	4b30      	ldr	r3, [pc, #192]	; (1944 <pm_system_suspend+0x1b4>)
    1884:	7d1b      	ldrb	r3, [r3, #20]
    1886:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    188a:	4930      	ldr	r1, [pc, #192]	; (194c <pm_system_suspend+0x1bc>)
    188c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1890:	4790      	blx	r2
    1892:	e7ed      	b.n	1870 <pm_system_suspend+0xe0>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    1894:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1896:	482e      	ldr	r0, [pc, #184]	; (1950 <pm_system_suspend+0x1c0>)
    1898:	f004 f9bc 	bl	5c14 <z_spin_unlock_valid>
    189c:	2800      	cmp	r0, #0
    189e:	d03f      	beq.n	1920 <pm_system_suspend+0x190>
	__asm__ volatile(
    18a0:	f385 8811 	msr	BASEPRI, r5
    18a4:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    18a8:	f004 031f 	and.w	r3, r4, #31
    18ac:	2101      	movs	r1, #1
    18ae:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    18b0:	0963      	lsrs	r3, r4, #5
    18b2:	4a2f      	ldr	r2, [pc, #188]	; (1970 <pm_system_suspend+0x1e0>)
    18b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    18b8:	f3bf 8f5b 	dmb	ish
    18bc:	e853 2f00 	ldrex	r2, [r3]
    18c0:	430a      	orrs	r2, r1
    18c2:	e843 2000 	strex	r0, r2, [r3]
    18c6:	2800      	cmp	r0, #0
    18c8:	d1f8      	bne.n	18bc <pm_system_suspend+0x12c>
    18ca:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    18ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    18d2:	4a1e      	ldr	r2, [pc, #120]	; (194c <pm_system_suspend+0x1bc>)
    18d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    18d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    18dc:	ab08      	add	r3, sp, #32
    18de:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    18e2:	4b24      	ldr	r3, [pc, #144]	; (1974 <pm_system_suspend+0x1e4>)
    18e4:	b10b      	cbz	r3, 18ea <pm_system_suspend+0x15a>
		pm_power_state_set(info);
    18e6:	f009 fb57 	bl	af98 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    18ea:	f7ff feb1 	bl	1650 <pm_system_resume>
	k_sched_unlock();
    18ee:	f005 fcad 	bl	724c <k_sched_unlock>
	bool ret = true;
    18f2:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    18f4:	f004 021f 	and.w	r2, r4, #31
    18f8:	2301      	movs	r3, #1
    18fa:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    18fc:	0964      	lsrs	r4, r4, #5
    18fe:	4a12      	ldr	r2, [pc, #72]	; (1948 <pm_system_suspend+0x1b8>)
    1900:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    1904:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1906:	f3bf 8f5b 	dmb	ish
    190a:	e854 2f00 	ldrex	r2, [r4]
    190e:	401a      	ands	r2, r3
    1910:	e844 2100 	strex	r1, r2, [r4]
    1914:	2900      	cmp	r1, #0
    1916:	d1f8      	bne.n	190a <pm_system_suspend+0x17a>
    1918:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    191c:	b009      	add	sp, #36	; 0x24
    191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1920:	4e0f      	ldr	r6, [pc, #60]	; (1960 <pm_system_suspend+0x1d0>)
    1922:	23ac      	movs	r3, #172	; 0xac
    1924:	4632      	mov	r2, r6
    1926:	4914      	ldr	r1, [pc, #80]	; (1978 <pm_system_suspend+0x1e8>)
    1928:	480f      	ldr	r0, [pc, #60]	; (1968 <pm_system_suspend+0x1d8>)
    192a:	f009 f88d 	bl	aa48 <printk>
    192e:	4908      	ldr	r1, [pc, #32]	; (1950 <pm_system_suspend+0x1c0>)
    1930:	4812      	ldr	r0, [pc, #72]	; (197c <pm_system_suspend+0x1ec>)
    1932:	f009 f889 	bl	aa48 <printk>
    1936:	21ac      	movs	r1, #172	; 0xac
    1938:	4630      	mov	r0, r6
    193a:	f009 f9de 	bl	acfa <assert_post_action>
    193e:	e7af      	b.n	18a0 <pm_system_suspend+0x110>
		ret = false;
    1940:	2000      	movs	r0, #0
    1942:	e7d7      	b.n	18f4 <pm_system_suspend+0x164>
    1944:	20001004 	.word	0x20001004
    1948:	20000534 	.word	0x20000534
    194c:	20000528 	.word	0x20000528
    1950:	20000518 	.word	0x20000518
    1954:	2000051c 	.word	0x2000051c
    1958:	000f423f 	.word	0x000f423f
    195c:	000f4240 	.word	0x000f4240
    1960:	0000bd78 	.word	0x0000bd78
    1964:	0000bdd0 	.word	0x0000bdd0
    1968:	0000bc60 	.word	0x0000bc60
    196c:	0000bde8 	.word	0x0000bde8
    1970:	20000524 	.word	0x20000524
    1974:	0000af99 	.word	0x0000af99
    1978:	0000bda0 	.word	0x0000bda0
    197c:	0000bdb8 	.word	0x0000bdb8

00001980 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1980:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    1982:	4802      	ldr	r0, [pc, #8]	; (198c <nrf_cc3xx_platform_abort_init+0xc>)
    1984:	f006 fc0c 	bl	81a0 <nrf_cc3xx_platform_set_abort>
}
    1988:	bd08      	pop	{r3, pc}
    198a:	bf00      	nop
    198c:	0000be34 	.word	0x0000be34

00001990 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1990:	b1d0      	cbz	r0, 19c8 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1992:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1994:	6842      	ldr	r2, [r0, #4]
    1996:	2a04      	cmp	r2, #4
    1998:	d005      	beq.n	19a6 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    199a:	b1d2      	cbz	r2, 19d2 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    199c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    199e:	f004 fc3d 	bl	621c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    19a2:	2000      	movs	r0, #0
    }
}
    19a4:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    19a6:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    19a8:	2200      	movs	r2, #0
    19aa:	f3bf 8f5b 	dmb	ish
    19ae:	e853 1f00 	ldrex	r1, [r3]
    19b2:	2901      	cmp	r1, #1
    19b4:	d103      	bne.n	19be <mutex_unlock_platform+0x2e>
    19b6:	e843 2000 	strex	r0, r2, [r3]
    19ba:	2800      	cmp	r0, #0
    19bc:	d1f7      	bne.n	19ae <mutex_unlock_platform+0x1e>
    19be:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    19c2:	d104      	bne.n	19ce <mutex_unlock_platform+0x3e>
    19c4:	4610      	mov	r0, r2
    19c6:	e7ed      	b.n	19a4 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    19c8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    19cc:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    19ce:	4802      	ldr	r0, [pc, #8]	; (19d8 <mutex_unlock_platform+0x48>)
    19d0:	e7e8      	b.n	19a4 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    19d2:	4802      	ldr	r0, [pc, #8]	; (19dc <mutex_unlock_platform+0x4c>)
    19d4:	e7e6      	b.n	19a4 <mutex_unlock_platform+0x14>
    19d6:	bf00      	nop
    19d8:	ffff8fe9 	.word	0xffff8fe9
    19dc:	ffff8fea 	.word	0xffff8fea

000019e0 <mutex_lock_platform>:
    if(mutex == NULL) {
    19e0:	b320      	cbz	r0, 1a2c <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    19e2:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    19e4:	6842      	ldr	r2, [r0, #4]
    19e6:	2a04      	cmp	r2, #4
    19e8:	d002      	beq.n	19f0 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    19ea:	b992      	cbnz	r2, 1a12 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    19ec:	4811      	ldr	r0, [pc, #68]	; (1a34 <mutex_lock_platform+0x54>)
    19ee:	e00f      	b.n	1a10 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    19f0:	6803      	ldr	r3, [r0, #0]
    19f2:	2201      	movs	r2, #1
    19f4:	f3bf 8f5b 	dmb	ish
    19f8:	e853 1f00 	ldrex	r1, [r3]
    19fc:	2900      	cmp	r1, #0
    19fe:	d103      	bne.n	1a08 <mutex_lock_platform+0x28>
    1a00:	e843 2000 	strex	r0, r2, [r3]
    1a04:	2800      	cmp	r0, #0
    1a06:	d1f7      	bne.n	19f8 <mutex_lock_platform+0x18>
    1a08:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1a0c:	d10c      	bne.n	1a28 <mutex_lock_platform+0x48>
    1a0e:	2000      	movs	r0, #0
}
    1a10:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    1a12:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1a1c:	f004 fade 	bl	5fdc <z_impl_k_mutex_lock>
        if (ret == 0) {
    1a20:	2800      	cmp	r0, #0
    1a22:	d0f5      	beq.n	1a10 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1a24:	4804      	ldr	r0, [pc, #16]	; (1a38 <mutex_lock_platform+0x58>)
    1a26:	e7f3      	b.n	1a10 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1a28:	4803      	ldr	r0, [pc, #12]	; (1a38 <mutex_lock_platform+0x58>)
    1a2a:	e7f1      	b.n	1a10 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1a2c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1a30:	4770      	bx	lr
    1a32:	bf00      	nop
    1a34:	ffff8fea 	.word	0xffff8fea
    1a38:	ffff8fe9 	.word	0xffff8fe9

00001a3c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1a3c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1a3e:	4604      	mov	r4, r0
    1a40:	b188      	cbz	r0, 1a66 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1a42:	6863      	ldr	r3, [r4, #4]
    1a44:	2b04      	cmp	r3, #4
    1a46:	d00d      	beq.n	1a64 <mutex_free_platform+0x28>
    1a48:	2b08      	cmp	r3, #8
    1a4a:	d00b      	beq.n	1a64 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1a4c:	b153      	cbz	r3, 1a64 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1a4e:	f013 0f02 	tst.w	r3, #2
    1a52:	d00d      	beq.n	1a70 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1a54:	4621      	mov	r1, r4
    1a56:	4809      	ldr	r0, [pc, #36]	; (1a7c <mutex_free_platform+0x40>)
    1a58:	f004 f852 	bl	5b00 <k_mem_slab_free>
        mutex->mutex = NULL;
    1a5c:	2300      	movs	r3, #0
    1a5e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1a60:	2300      	movs	r3, #0
    1a62:	6063      	str	r3, [r4, #4]
}
    1a64:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1a66:	4b06      	ldr	r3, [pc, #24]	; (1a80 <mutex_free_platform+0x44>)
    1a68:	685b      	ldr	r3, [r3, #4]
    1a6a:	4806      	ldr	r0, [pc, #24]	; (1a84 <mutex_free_platform+0x48>)
    1a6c:	4798      	blx	r3
    1a6e:	e7e8      	b.n	1a42 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1a70:	2214      	movs	r2, #20
    1a72:	2100      	movs	r1, #0
    1a74:	6820      	ldr	r0, [r4, #0]
    1a76:	f009 fa6b 	bl	af50 <memset>
    1a7a:	e7f1      	b.n	1a60 <mutex_free_platform+0x24>
    1a7c:	20000538 	.word	0x20000538
    1a80:	200000e0 	.word	0x200000e0
    1a84:	0000be3c 	.word	0x0000be3c

00001a88 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1a88:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1a8a:	4604      	mov	r4, r0
    1a8c:	b178      	cbz	r0, 1aae <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1a8e:	6863      	ldr	r3, [r4, #4]
    1a90:	2b04      	cmp	r3, #4
    1a92:	d00b      	beq.n	1aac <mutex_init_platform+0x24>
    1a94:	2b08      	cmp	r3, #8
    1a96:	d009      	beq.n	1aac <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1a98:	b90b      	cbnz	r3, 1a9e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    1a9a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1a9c:	b163      	cbz	r3, 1ab8 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1a9e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1aa0:	f009 fe72 	bl	b788 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1aa4:	6863      	ldr	r3, [r4, #4]
    1aa6:	f043 0301 	orr.w	r3, r3, #1
    1aaa:	6063      	str	r3, [r4, #4]
}
    1aac:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1aae:	4b0f      	ldr	r3, [pc, #60]	; (1aec <mutex_init_platform+0x64>)
    1ab0:	685b      	ldr	r3, [r3, #4]
    1ab2:	480f      	ldr	r0, [pc, #60]	; (1af0 <mutex_init_platform+0x68>)
    1ab4:	4798      	blx	r3
    1ab6:	e7ea      	b.n	1a8e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ac0:	4621      	mov	r1, r4
    1ac2:	480c      	ldr	r0, [pc, #48]	; (1af4 <mutex_init_platform+0x6c>)
    1ac4:	f003 ffa8 	bl	5a18 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1ac8:	b908      	cbnz	r0, 1ace <mutex_init_platform+0x46>
    1aca:	6823      	ldr	r3, [r4, #0]
    1acc:	b91b      	cbnz	r3, 1ad6 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1ace:	4b07      	ldr	r3, [pc, #28]	; (1aec <mutex_init_platform+0x64>)
    1ad0:	685b      	ldr	r3, [r3, #4]
    1ad2:	4809      	ldr	r0, [pc, #36]	; (1af8 <mutex_init_platform+0x70>)
    1ad4:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1ad6:	2214      	movs	r2, #20
    1ad8:	2100      	movs	r1, #0
    1ada:	6820      	ldr	r0, [r4, #0]
    1adc:	f009 fa38 	bl	af50 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1ae0:	6863      	ldr	r3, [r4, #4]
    1ae2:	f043 0302 	orr.w	r3, r3, #2
    1ae6:	6063      	str	r3, [r4, #4]
    1ae8:	e7d9      	b.n	1a9e <mutex_init_platform+0x16>
    1aea:	bf00      	nop
    1aec:	200000e0 	.word	0x200000e0
    1af0:	0000be3c 	.word	0x0000be3c
    1af4:	20000538 	.word	0x20000538
    1af8:	0000be64 	.word	0x0000be64

00001afc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1afc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1afe:	2340      	movs	r3, #64	; 0x40
    1b00:	2214      	movs	r2, #20
    1b02:	4904      	ldr	r1, [pc, #16]	; (1b14 <nrf_cc3xx_platform_mutex_init+0x18>)
    1b04:	4804      	ldr	r0, [pc, #16]	; (1b18 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1b06:	f009 fded 	bl	b6e4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1b0a:	4904      	ldr	r1, [pc, #16]	; (1b1c <nrf_cc3xx_platform_mutex_init+0x20>)
    1b0c:	4804      	ldr	r0, [pc, #16]	; (1b20 <nrf_cc3xx_platform_mutex_init+0x24>)
    1b0e:	f006 fbff 	bl	8310 <nrf_cc3xx_platform_set_mutexes>
}
    1b12:	bd08      	pop	{r3, pc}
    1b14:	20000558 	.word	0x20000558
    1b18:	20000538 	.word	0x20000538
    1b1c:	0000bea4 	.word	0x0000bea4
    1b20:	0000be94 	.word	0x0000be94

00001b24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1b24:	4901      	ldr	r1, [pc, #4]	; (1b2c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1b26:	2210      	movs	r2, #16
	str	r2, [r1]
    1b28:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1b2a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1b2c:	e000ed10 	.word	0xe000ed10

00001b30 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1b30:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1b32:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1b34:	f380 8811 	msr	BASEPRI, r0
	isb
    1b38:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1b3c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1b40:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1b42:	b662      	cpsie	i
	isb
    1b44:	f3bf 8f6f 	isb	sy

	bx	lr
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop

00001b4c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1b4c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1b4e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1b50:	f381 8811 	msr	BASEPRI, r1

	wfe
    1b54:	bf20      	wfe

	msr	BASEPRI, r0
    1b56:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1b5a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1b5c:	4770      	bx	lr
    1b5e:	bf00      	nop

00001b60 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1b60:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1b62:	2b00      	cmp	r3, #0
    1b64:	db08      	blt.n	1b78 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b66:	f000 001f 	and.w	r0, r0, #31
    1b6a:	095b      	lsrs	r3, r3, #5
    1b6c:	2201      	movs	r2, #1
    1b6e:	fa02 f000 	lsl.w	r0, r2, r0
    1b72:	4a02      	ldr	r2, [pc, #8]	; (1b7c <arch_irq_enable+0x1c>)
    1b74:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1b78:	4770      	bx	lr
    1b7a:	bf00      	nop
    1b7c:	e000e100 	.word	0xe000e100

00001b80 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1b80:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1b82:	2b00      	cmp	r3, #0
    1b84:	db0d      	blt.n	1ba2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b86:	f000 001f 	and.w	r0, r0, #31
    1b8a:	095b      	lsrs	r3, r3, #5
    1b8c:	2201      	movs	r2, #1
    1b8e:	fa02 f000 	lsl.w	r0, r2, r0
    1b92:	3320      	adds	r3, #32
    1b94:	4a03      	ldr	r2, [pc, #12]	; (1ba4 <arch_irq_disable+0x24>)
    1b96:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1b9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b9e:	f3bf 8f6f 	isb	sy
}
    1ba2:	4770      	bx	lr
    1ba4:	e000e100 	.word	0xe000e100

00001ba8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1ba8:	0942      	lsrs	r2, r0, #5
    1baa:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <arch_irq_is_enabled+0x18>)
    1bac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1bb0:	f000 001f 	and.w	r0, r0, #31
    1bb4:	2301      	movs	r3, #1
    1bb6:	fa03 f000 	lsl.w	r0, r3, r0
}
    1bba:	4010      	ands	r0, r2
    1bbc:	4770      	bx	lr
    1bbe:	bf00      	nop
    1bc0:	e000e100 	.word	0xe000e100

00001bc4 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc6:	4605      	mov	r5, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1bc8:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1bca:	2c07      	cmp	r4, #7
    1bcc:	d80b      	bhi.n	1be6 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1bce:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	db1b      	blt.n	1c0c <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bd4:	0164      	lsls	r4, r4, #5
    1bd6:	b2e4      	uxtb	r4, r4
    1bd8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1bdc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1be0:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
    1be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1be6:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1be8:	4f0c      	ldr	r7, [pc, #48]	; (1c1c <z_arm_irq_priority_set+0x58>)
    1bea:	2359      	movs	r3, #89	; 0x59
    1bec:	463a      	mov	r2, r7
    1bee:	490c      	ldr	r1, [pc, #48]	; (1c20 <z_arm_irq_priority_set+0x5c>)
    1bf0:	480c      	ldr	r0, [pc, #48]	; (1c24 <z_arm_irq_priority_set+0x60>)
    1bf2:	f008 ff29 	bl	aa48 <printk>
    1bf6:	2307      	movs	r3, #7
    1bf8:	462a      	mov	r2, r5
    1bfa:	4631      	mov	r1, r6
    1bfc:	480a      	ldr	r0, [pc, #40]	; (1c28 <z_arm_irq_priority_set+0x64>)
    1bfe:	f008 ff23 	bl	aa48 <printk>
    1c02:	2159      	movs	r1, #89	; 0x59
    1c04:	4638      	mov	r0, r7
    1c06:	f009 f878 	bl	acfa <assert_post_action>
    1c0a:	e7e0      	b.n	1bce <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c0c:	f005 050f 	and.w	r5, r5, #15
    1c10:	0164      	lsls	r4, r4, #5
    1c12:	b2e4      	uxtb	r4, r4
    1c14:	4b05      	ldr	r3, [pc, #20]	; (1c2c <z_arm_irq_priority_set+0x68>)
    1c16:	555c      	strb	r4, [r3, r5]
}
    1c18:	e7e4      	b.n	1be4 <z_arm_irq_priority_set+0x20>
    1c1a:	bf00      	nop
    1c1c:	0000beb8 	.word	0x0000beb8
    1c20:	0000bef0 	.word	0x0000bef0
    1c24:	0000bc60 	.word	0x0000bc60
    1c28:	0000bf0c 	.word	0x0000bf0c
    1c2c:	e000ed14 	.word	0xe000ed14

00001c30 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1c30:	bf30      	wfi
    b z_SysNmiOnReset
    1c32:	f7ff bffd 	b.w	1c30 <z_SysNmiOnReset>
    1c36:	bf00      	nop

00001c38 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1c38:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c3a:	4b0b      	ldr	r3, [pc, #44]	; (1c68 <z_arm_prep_c+0x30>)
    1c3c:	4a0b      	ldr	r2, [pc, #44]	; (1c6c <z_arm_prep_c+0x34>)
    1c3e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1c42:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c48:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c50:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1c58:	f003 fe62 	bl	5920 <z_bss_zero>
	z_data_copy();
    1c5c:	f005 feac 	bl	79b8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1c60:	f000 fa74 	bl	214c <z_arm_interrupt_init>
	z_cstart();
    1c64:	f003 fe68 	bl	5938 <z_cstart>
    1c68:	e000ed00 	.word	0xe000ed00
    1c6c:	00000000 	.word	0x00000000

00001c70 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1c70:	4a0a      	ldr	r2, [pc, #40]	; (1c9c <arch_swap+0x2c>)
    1c72:	6893      	ldr	r3, [r2, #8]
    1c74:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1c78:	4909      	ldr	r1, [pc, #36]	; (1ca0 <arch_swap+0x30>)
    1c7a:	6809      	ldr	r1, [r1, #0]
    1c7c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c80:	4908      	ldr	r1, [pc, #32]	; (1ca4 <arch_swap+0x34>)
    1c82:	684b      	ldr	r3, [r1, #4]
    1c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1c88:	604b      	str	r3, [r1, #4]
    1c8a:	2300      	movs	r3, #0
    1c8c:	f383 8811 	msr	BASEPRI, r3
    1c90:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1c94:	6893      	ldr	r3, [r2, #8]
}
    1c96:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    1c9a:	4770      	bx	lr
    1c9c:	20001004 	.word	0x20001004
    1ca0:	0000c814 	.word	0x0000c814
    1ca4:	e000ed00 	.word	0xe000ed00

00001ca8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1ca8:	4913      	ldr	r1, [pc, #76]	; (1cf8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1caa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1cac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1cb0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1cb2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1cb6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1cba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1cbc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1cc0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1cc4:	4f0d      	ldr	r7, [pc, #52]	; (1cfc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1cc6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1cca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1ccc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1cce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1cd0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1cd4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1cd6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1cda:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1cde:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ce0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1ce2:	f000 fad5 	bl	2290 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1ce6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1cea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1cee:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1cf2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1cf6:	4770      	bx	lr
    ldr r1, =_kernel
    1cf8:	20001004 	.word	0x20001004
    ldr v4, =_SCS_ICSR
    1cfc:	e000ed04 	.word	0xe000ed04

00001d00 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1d00:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1d04:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1d06:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1d0a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1d0e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1d10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1d14:	2902      	cmp	r1, #2
    beq _oops
    1d16:	d0ff      	beq.n	1d18 <_oops>

00001d18 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1d18:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1d1a:	f009 f803 	bl	ad24 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1d1e:	bd01      	pop	{r0, pc}

00001d20 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1d20:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1d22:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1d26:	490d      	ldr	r1, [pc, #52]	; (1d5c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1d28:	f021 0101 	bic.w	r1, r1, #1
    1d2c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1d30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1d34:	9b01      	ldr	r3, [sp, #4]
    1d36:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1d3a:	9b02      	ldr	r3, [sp, #8]
    1d3c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1d40:	9b03      	ldr	r3, [sp, #12]
    1d42:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1d4a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    1d4e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1d50:	2300      	movs	r3, #0
    1d52:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1d56:	bc10      	pop	{r4}
    1d58:	4770      	bx	lr
    1d5a:	bf00      	nop
    1d5c:	0000abb9 	.word	0x0000abb9

00001d60 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1d60:	4b16      	ldr	r3, [pc, #88]	; (1dbc <z_check_thread_stack_fail+0x5c>)
    1d62:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    1d64:	b1da      	cbz	r2, 1d9e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1d66:	f110 0f16 	cmn.w	r0, #22
    1d6a:	d01a      	beq.n	1da2 <z_check_thread_stack_fail+0x42>
{
    1d6c:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1d6e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1d72:	f1a3 0420 	sub.w	r4, r3, #32
    1d76:	4284      	cmp	r4, r0
    1d78:	d805      	bhi.n	1d86 <z_check_thread_stack_fail+0x26>
    1d7a:	4283      	cmp	r3, r0
    1d7c:	d908      	bls.n	1d90 <z_check_thread_stack_fail+0x30>
    1d7e:	428b      	cmp	r3, r1
    1d80:	d808      	bhi.n	1d94 <z_check_thread_stack_fail+0x34>
    1d82:	2100      	movs	r1, #0
    1d84:	e000      	b.n	1d88 <z_check_thread_stack_fail+0x28>
    1d86:	2100      	movs	r1, #0
    1d88:	b931      	cbnz	r1, 1d98 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1d8a:	2000      	movs	r0, #0
}
    1d8c:	bc10      	pop	{r4}
    1d8e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1d90:	2100      	movs	r1, #0
    1d92:	e7f9      	b.n	1d88 <z_check_thread_stack_fail+0x28>
    1d94:	2101      	movs	r1, #1
    1d96:	e7f7      	b.n	1d88 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    1d98:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    1d9c:	e7f6      	b.n	1d8c <z_check_thread_stack_fail+0x2c>
		return 0;
    1d9e:	2000      	movs	r0, #0
    1da0:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1da2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1da6:	428b      	cmp	r3, r1
    1da8:	bf94      	ite	ls
    1daa:	2100      	movls	r1, #0
    1dac:	2101      	movhi	r1, #1
    1dae:	b909      	cbnz	r1, 1db4 <z_check_thread_stack_fail+0x54>
	return 0;
    1db0:	2000      	movs	r0, #0
}
    1db2:	4770      	bx	lr
		return thread->stack_info.start;
    1db4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    1db8:	4770      	bx	lr
    1dba:	bf00      	nop
    1dbc:	20001004 	.word	0x20001004

00001dc0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1dc0:	b508      	push	{r3, lr}
    1dc2:	460d      	mov	r5, r1
    1dc4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1dc6:	4b08      	ldr	r3, [pc, #32]	; (1de8 <arch_switch_to_main_thread+0x28>)
    1dc8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1dca:	f000 fa61 	bl	2290 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1dce:	4620      	mov	r0, r4
    1dd0:	f385 8809 	msr	PSP, r5
    1dd4:	2100      	movs	r1, #0
    1dd6:	b663      	cpsie	if
    1dd8:	f381 8811 	msr	BASEPRI, r1
    1ddc:	f3bf 8f6f 	isb	sy
    1de0:	2200      	movs	r2, #0
    1de2:	2300      	movs	r3, #0
    1de4:	f008 fee8 	bl	abb8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1de8:	20001004 	.word	0x20001004

00001dec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1dec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1dee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1df0:	4a0b      	ldr	r2, [pc, #44]	; (1e20 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1df2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1df4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1df6:	bf1e      	ittt	ne
	movne	r1, #0
    1df8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1dfa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1dfc:	f009 fca8 	blne	b750 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1e00:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1e02:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1e06:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1e0a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1e0e:	4905      	ldr	r1, [pc, #20]	; (1e24 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1e10:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1e12:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1e14:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1e16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1e1a:	4903      	ldr	r1, [pc, #12]	; (1e28 <_isr_wrapper+0x3c>)
	bx r1
    1e1c:	4708      	bx	r1
    1e1e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1e20:	20001004 	.word	0x20001004
	ldr r1, =_sw_isr_table
    1e24:	0000b978 	.word	0x0000b978
	ldr r1, =z_arm_int_exit
    1e28:	00001e2d 	.word	0x00001e2d

00001e2c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1e2c:	4b04      	ldr	r3, [pc, #16]	; (1e40 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1e2e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1e30:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1e32:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1e34:	d003      	beq.n	1e3e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1e36:	4903      	ldr	r1, [pc, #12]	; (1e44 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1e3c:	600a      	str	r2, [r1, #0]

00001e3e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1e3e:	4770      	bx	lr
	ldr r3, =_kernel
    1e40:	20001004 	.word	0x20001004
	ldr r1, =_SCS_ICSR
    1e44:	e000ed04 	.word	0xe000ed04

00001e48 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1e48:	b510      	push	{r4, lr}
    1e4a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1e4c:	4b12      	ldr	r3, [pc, #72]	; (1e98 <bus_fault+0x50>)
    1e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e54:	f413 7f00 	tst.w	r3, #512	; 0x200
    1e58:	d00b      	beq.n	1e72 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1e5a:	4b0f      	ldr	r3, [pc, #60]	; (1e98 <bus_fault+0x50>)
    1e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e60:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1e64:	d005      	beq.n	1e72 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1e66:	b121      	cbz	r1, 1e72 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1e68:	4a0b      	ldr	r2, [pc, #44]	; (1e98 <bus_fault+0x50>)
    1e6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1e70:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1e72:	4b09      	ldr	r3, [pc, #36]	; (1e98 <bus_fault+0x50>)
    1e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e78:	f413 7f80 	tst.w	r3, #256	; 0x100
    1e7c:	d101      	bne.n	1e82 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e7e:	4b06      	ldr	r3, [pc, #24]	; (1e98 <bus_fault+0x50>)
    1e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e82:	4a05      	ldr	r2, [pc, #20]	; (1e98 <bus_fault+0x50>)
    1e84:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e86:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1e8a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1e8c:	2101      	movs	r1, #1
    1e8e:	f008 ff5b 	bl	ad48 <memory_fault_recoverable>
    1e92:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1e94:	2000      	movs	r0, #0
    1e96:	bd10      	pop	{r4, pc}
    1e98:	e000ed00 	.word	0xe000ed00

00001e9c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e9c:	4b07      	ldr	r3, [pc, #28]	; (1ebc <usage_fault+0x20>)
    1e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1eac:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1eb0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1eb4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1eb6:	2000      	movs	r0, #0
    1eb8:	4770      	bx	lr
    1eba:	bf00      	nop
    1ebc:	e000ed00 	.word	0xe000ed00

00001ec0 <mem_manage_fault>:
{
    1ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ec2:	4605      	mov	r5, r0
    1ec4:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ec6:	4b2b      	ldr	r3, [pc, #172]	; (1f74 <mem_manage_fault+0xb4>)
    1ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ece:	f013 0f02 	tst.w	r3, #2
    1ed2:	d00c      	beq.n	1eee <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    1ed4:	4b27      	ldr	r3, [pc, #156]	; (1f74 <mem_manage_fault+0xb4>)
    1ed6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1eda:	f013 0f80 	tst.w	r3, #128	; 0x80
    1ede:	d025      	beq.n	1f2c <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    1ee0:	b139      	cbz	r1, 1ef2 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1ee2:	4a24      	ldr	r2, [pc, #144]	; (1f74 <mem_manage_fault+0xb4>)
    1ee4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1eea:	6293      	str	r3, [r2, #40]	; 0x28
    1eec:	e001      	b.n	1ef2 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    1eee:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1ef2:	4b20      	ldr	r3, [pc, #128]	; (1f74 <mem_manage_fault+0xb4>)
    1ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1efa:	f013 0f10 	tst.w	r3, #16
    1efe:	d104      	bne.n	1f0a <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1f00:	4b1c      	ldr	r3, [pc, #112]	; (1f74 <mem_manage_fault+0xb4>)
    1f02:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f04:	f014 0402 	ands.w	r4, r4, #2
    1f08:	d004      	beq.n	1f14 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1f0a:	4b1a      	ldr	r3, [pc, #104]	; (1f74 <mem_manage_fault+0xb4>)
    1f0c:	685c      	ldr	r4, [r3, #4]
    1f0e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    1f12:	d10e      	bne.n	1f32 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1f14:	4a17      	ldr	r2, [pc, #92]	; (1f74 <mem_manage_fault+0xb4>)
    1f16:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1f18:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f1c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1f1e:	2101      	movs	r1, #1
    1f20:	4628      	mov	r0, r5
    1f22:	f008 ff11 	bl	ad48 <memory_fault_recoverable>
    1f26:	7030      	strb	r0, [r6, #0]
}
    1f28:	4620      	mov	r0, r4
    1f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t mmfar = -EINVAL;
    1f2c:	f06f 0015 	mvn.w	r0, #21
    1f30:	e7df      	b.n	1ef2 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1f32:	4629      	mov	r1, r5
    1f34:	f7ff ff14 	bl	1d60 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1f38:	4607      	mov	r7, r0
    1f3a:	b9b0      	cbnz	r0, 1f6a <mem_manage_fault+0xaa>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1f3c:	4b0d      	ldr	r3, [pc, #52]	; (1f74 <mem_manage_fault+0xb4>)
    1f3e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1f40:	f014 0410 	ands.w	r4, r4, #16
    1f44:	d0e6      	beq.n	1f14 <mem_manage_fault+0x54>
    1f46:	4c0c      	ldr	r4, [pc, #48]	; (1f78 <mem_manage_fault+0xb8>)
    1f48:	f240 1349 	movw	r3, #329	; 0x149
    1f4c:	4622      	mov	r2, r4
    1f4e:	490b      	ldr	r1, [pc, #44]	; (1f7c <mem_manage_fault+0xbc>)
    1f50:	480b      	ldr	r0, [pc, #44]	; (1f80 <mem_manage_fault+0xc0>)
    1f52:	f008 fd79 	bl	aa48 <printk>
    1f56:	480b      	ldr	r0, [pc, #44]	; (1f84 <mem_manage_fault+0xc4>)
    1f58:	f008 fd76 	bl	aa48 <printk>
    1f5c:	f240 1149 	movw	r1, #329	; 0x149
    1f60:	4620      	mov	r0, r4
    1f62:	f008 feca 	bl	acfa <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f66:	463c      	mov	r4, r7
    1f68:	e7d4      	b.n	1f14 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1f6a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1f6e:	2402      	movs	r4, #2
    1f70:	e7d0      	b.n	1f14 <mem_manage_fault+0x54>
    1f72:	bf00      	nop
    1f74:	e000ed00 	.word	0xe000ed00
    1f78:	0000bf4c 	.word	0x0000bf4c
    1f7c:	0000bf88 	.word	0x0000bf88
    1f80:	0000bc60 	.word	0x0000bc60
    1f84:	0000bfd4 	.word	0x0000bfd4

00001f88 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1f88:	b538      	push	{r3, r4, r5, lr}
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1f8a:	2300      	movs	r3, #0
    1f8c:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1f8e:	4b2c      	ldr	r3, [pc, #176]	; (2040 <hard_fault+0xb8>)
    1f90:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1f92:	f014 0402 	ands.w	r4, r4, #2
    1f96:	d150      	bne.n	203a <hard_fault+0xb2>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	db4e      	blt.n	203c <hard_fault+0xb4>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1f9e:	4b28      	ldr	r3, [pc, #160]	; (2040 <hard_fault+0xb8>)
    1fa0:	6add      	ldr	r5, [r3, #44]	; 0x2c
    1fa2:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    1fa6:	d036      	beq.n	2016 <hard_fault+0x8e>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1fa8:	6983      	ldr	r3, [r0, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    1faa:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1fae:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1fb2:	429a      	cmp	r2, r3
    1fb4:	d010      	beq.n	1fd8 <hard_fault+0x50>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    1fb6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1fba:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	b963      	cbnz	r3, 1fdc <hard_fault+0x54>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    1fc2:	4b20      	ldr	r3, [pc, #128]	; (2044 <hard_fault+0xbc>)
    1fc4:	781b      	ldrb	r3, [r3, #0]
    1fc6:	b97b      	cbnz	r3, 1fe8 <hard_fault+0x60>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    1fc8:	4b1f      	ldr	r3, [pc, #124]	; (2048 <hard_fault+0xc0>)
    1fca:	881b      	ldrh	r3, [r3, #0]
    1fcc:	b29b      	uxth	r3, r3
    1fce:	b18b      	cbz	r3, 1ff4 <hard_fault+0x6c>
			reason = usage_fault(esf);
    1fd0:	f7ff ff64 	bl	1e9c <usage_fault>
    1fd4:	4604      	mov	r4, r0
    1fd6:	e031      	b.n	203c <hard_fault+0xb4>
			reason = esf->basic.r0;
    1fd8:	6804      	ldr	r4, [r0, #0]
    1fda:	e02f      	b.n	203c <hard_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1fdc:	460a      	mov	r2, r1
    1fde:	2101      	movs	r1, #1
    1fe0:	f7ff ff6e 	bl	1ec0 <mem_manage_fault>
    1fe4:	4604      	mov	r4, r0
    1fe6:	e029      	b.n	203c <hard_fault+0xb4>
			reason = bus_fault(esf, 1, recoverable);
    1fe8:	460a      	mov	r2, r1
    1fea:	2101      	movs	r1, #1
    1fec:	f7ff ff2c 	bl	1e48 <bus_fault>
    1ff0:	4604      	mov	r4, r0
    1ff2:	e023      	b.n	203c <hard_fault+0xb4>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
		} else if (SAU->SFSR != 0) {
			secure_fault(esf);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
		} else {
			__ASSERT(0,
    1ff4:	4d15      	ldr	r5, [pc, #84]	; (204c <hard_fault+0xc4>)
    1ff6:	f240 23c3 	movw	r3, #707	; 0x2c3
    1ffa:	462a      	mov	r2, r5
    1ffc:	4914      	ldr	r1, [pc, #80]	; (2050 <hard_fault+0xc8>)
    1ffe:	4815      	ldr	r0, [pc, #84]	; (2054 <hard_fault+0xcc>)
    2000:	f008 fd22 	bl	aa48 <printk>
    2004:	4814      	ldr	r0, [pc, #80]	; (2058 <hard_fault+0xd0>)
    2006:	f008 fd1f 	bl	aa48 <printk>
    200a:	f240 21c3 	movw	r1, #707	; 0x2c3
    200e:	4628      	mov	r0, r5
    2010:	f008 fe73 	bl	acfa <assert_post_action>
    2014:	e012      	b.n	203c <hard_fault+0xb4>
			"Fault escalation without FSR info");
		}
	} else {
		__ASSERT(0,
    2016:	4c0d      	ldr	r4, [pc, #52]	; (204c <hard_fault+0xc4>)
    2018:	f240 23c7 	movw	r3, #711	; 0x2c7
    201c:	4622      	mov	r2, r4
    201e:	490c      	ldr	r1, [pc, #48]	; (2050 <hard_fault+0xc8>)
    2020:	480c      	ldr	r0, [pc, #48]	; (2054 <hard_fault+0xcc>)
    2022:	f008 fd11 	bl	aa48 <printk>
    2026:	480d      	ldr	r0, [pc, #52]	; (205c <hard_fault+0xd4>)
    2028:	f008 fd0e 	bl	aa48 <printk>
    202c:	f240 21c7 	movw	r1, #711	; 0x2c7
    2030:	4620      	mov	r0, r4
    2032:	f008 fe62 	bl	acfa <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2036:	462c      	mov	r4, r5
    2038:	e000      	b.n	203c <hard_fault+0xb4>
    203a:	2400      	movs	r4, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    203c:	4620      	mov	r0, r4
    203e:	bd38      	pop	{r3, r4, r5, pc}
    2040:	e000ed00 	.word	0xe000ed00
    2044:	e000ed29 	.word	0xe000ed29
    2048:	e000ed2a 	.word	0xe000ed2a
    204c:	0000bf4c 	.word	0x0000bf4c
    2050:	0000bc5c 	.word	0x0000bc5c
    2054:	0000bc60 	.word	0x0000bc60
    2058:	0000bff8 	.word	0x0000bff8
    205c:	0000c01c 	.word	0x0000c01c

00002060 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2060:	b5f0      	push	{r4, r5, r6, r7, lr}
    2062:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2064:	4b2b      	ldr	r3, [pc, #172]	; (2114 <z_arm_fault+0xb4>)
    2066:	685d      	ldr	r5, [r3, #4]
    2068:	f3c5 0508 	ubfx	r5, r5, #0, #9
    206c:	2300      	movs	r3, #0
    206e:	f383 8811 	msr	BASEPRI, r3
    2072:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2076:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    207a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    207e:	d10d      	bne.n	209c <z_arm_fault+0x3c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2080:	f002 030c 	and.w	r3, r2, #12
    2084:	2b08      	cmp	r3, #8
    2086:	d027      	beq.n	20d8 <z_arm_fault+0x78>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2088:	f012 0f08 	tst.w	r2, #8
    208c:	d003      	beq.n	2096 <z_arm_fault+0x36>
			ptr_esf =  (z_arch_esf_t *)psp;
    208e:	460c      	mov	r4, r1
	*nested_exc = false;
    2090:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2092:	b9ac      	cbnz	r4, 20c0 <z_arm_fault+0x60>
    2094:	e004      	b.n	20a0 <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    2096:	4604      	mov	r4, r0
			*nested_exc = true;
    2098:	2601      	movs	r6, #1
    209a:	e7fa      	b.n	2092 <z_arm_fault+0x32>
	*nested_exc = false;
    209c:	2600      	movs	r6, #0
		return NULL;
    209e:	4634      	mov	r4, r6
	__ASSERT(esf != NULL,
    20a0:	4f1d      	ldr	r7, [pc, #116]	; (2118 <z_arm_fault+0xb8>)
    20a2:	f240 33f2 	movw	r3, #1010	; 0x3f2
    20a6:	463a      	mov	r2, r7
    20a8:	491c      	ldr	r1, [pc, #112]	; (211c <z_arm_fault+0xbc>)
    20aa:	481d      	ldr	r0, [pc, #116]	; (2120 <z_arm_fault+0xc0>)
    20ac:	f008 fccc 	bl	aa48 <printk>
    20b0:	481c      	ldr	r0, [pc, #112]	; (2124 <z_arm_fault+0xc4>)
    20b2:	f008 fcc9 	bl	aa48 <printk>
    20b6:	f240 31f2 	movw	r1, #1010	; 0x3f2
    20ba:	4638      	mov	r0, r7
    20bc:	f008 fe1d 	bl	acfa <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    20c0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    20c4:	4629      	mov	r1, r5
    20c6:	4620      	mov	r0, r4
    20c8:	f008 fe43 	bl	ad52 <fault_handle>
    20cc:	4605      	mov	r5, r0
	if (recoverable) {
    20ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    20d2:	b123      	cbz	r3, 20de <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    20d4:	b00b      	add	sp, #44	; 0x2c
    20d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*nested_exc = false;
    20d8:	2600      	movs	r6, #0
		return NULL;
    20da:	4634      	mov	r4, r6
    20dc:	e7e0      	b.n	20a0 <z_arm_fault+0x40>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    20de:	2220      	movs	r2, #32
    20e0:	4621      	mov	r1, r4
    20e2:	a801      	add	r0, sp, #4
    20e4:	f008 ff10 	bl	af08 <memcpy>
	if (nested_exc) {
    20e8:	b14e      	cbz	r6, 20fe <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    20ea:	9b08      	ldr	r3, [sp, #32]
    20ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
    20f0:	b95a      	cbnz	r2, 210a <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    20f2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    20f6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    20fa:	9308      	str	r3, [sp, #32]
    20fc:	e005      	b.n	210a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    20fe:	9b08      	ldr	r3, [sp, #32]
    2100:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2104:	f023 0301 	bic.w	r3, r3, #1
    2108:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    210a:	a901      	add	r1, sp, #4
    210c:	4628      	mov	r0, r5
    210e:	f008 fe05 	bl	ad1c <z_arm_fatal_error>
    2112:	e7df      	b.n	20d4 <z_arm_fault+0x74>
    2114:	e000ed00 	.word	0xe000ed00
    2118:	0000bf4c 	.word	0x0000bf4c
    211c:	0000c04c 	.word	0x0000c04c
    2120:	0000bc60 	.word	0x0000bc60
    2124:	0000c060 	.word	0x0000c060

00002128 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2128:	4a02      	ldr	r2, [pc, #8]	; (2134 <z_arm_fault_init+0xc>)
    212a:	6953      	ldr	r3, [r2, #20]
    212c:	f043 0310 	orr.w	r3, r3, #16
    2130:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2132:	4770      	bx	lr
    2134:	e000ed00 	.word	0xe000ed00

00002138 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2138:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    213c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2140:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2142:	4672      	mov	r2, lr
	bl z_arm_fault
    2144:	f7ff ff8c 	bl	2060 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2148:	bd01      	pop	{r0, pc}
    214a:	bf00      	nop

0000214c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    214c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    214e:	e006      	b.n	215e <z_arm_interrupt_init+0x12>
    2150:	f002 010f 	and.w	r1, r2, #15
    2154:	4b09      	ldr	r3, [pc, #36]	; (217c <z_arm_interrupt_init+0x30>)
    2156:	440b      	add	r3, r1
    2158:	2120      	movs	r1, #32
    215a:	7619      	strb	r1, [r3, #24]
    215c:	3201      	adds	r2, #1
    215e:	2a2f      	cmp	r2, #47	; 0x2f
    2160:	dc0a      	bgt.n	2178 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    2162:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2164:	2b00      	cmp	r3, #0
    2166:	dbf3      	blt.n	2150 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2168:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    216c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2170:	2120      	movs	r1, #32
    2172:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2176:	e7f1      	b.n	215c <z_arm_interrupt_init+0x10>
	}
}
    2178:	4770      	bx	lr
    217a:	bf00      	nop
    217c:	e000ecfc 	.word	0xe000ecfc

00002180 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2180:	2000      	movs	r0, #0
    msr CONTROL, r0
    2182:	f380 8814 	msr	CONTROL, r0
    isb
    2186:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    218a:	f009 fb63 	bl	b854 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    218e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2190:	490d      	ldr	r1, [pc, #52]	; (21c8 <__start+0x48>)
    str r0, [r1]
    2192:	6008      	str	r0, [r1, #0]
    dsb
    2194:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2198:	480c      	ldr	r0, [pc, #48]	; (21cc <__start+0x4c>)
    msr msp, r0
    219a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    219e:	f000 f829 	bl	21f4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21a2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    21a4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    21a8:	4809      	ldr	r0, [pc, #36]	; (21d0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    21aa:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    21ae:	1840      	adds	r0, r0, r1
    msr PSP, r0
    21b0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    21b4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    21b8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    21ba:	4308      	orrs	r0, r1
    msr CONTROL, r0
    21bc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    21c0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    21c4:	f7ff fd38 	bl	1c38 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    21c8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    21cc:	20002840 	.word	0x20002840
    ldr r0, =z_interrupt_stacks
    21d0:	200029c0 	.word	0x200029c0

000021d4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    21d4:	4b06      	ldr	r3, [pc, #24]	; (21f0 <z_arm_clear_arm_mpu_config+0x1c>)
    21d6:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    21d8:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    21dc:	2300      	movs	r3, #0
    21de:	4283      	cmp	r3, r0
    21e0:	da05      	bge.n	21ee <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    21e2:	4a03      	ldr	r2, [pc, #12]	; (21f0 <z_arm_clear_arm_mpu_config+0x1c>)
    21e4:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    21e6:	2100      	movs	r1, #0
    21e8:	6111      	str	r1, [r2, #16]
    21ea:	3301      	adds	r3, #1
    21ec:	e7f7      	b.n	21de <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    21ee:	4770      	bx	lr
    21f0:	e000ed90 	.word	0xe000ed90

000021f4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    21f4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    21f6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    21f8:	2400      	movs	r4, #0
    21fa:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    21fe:	f7ff ffe9 	bl	21d4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2202:	4623      	mov	r3, r4
    2204:	e008      	b.n	2218 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    2206:	f103 0120 	add.w	r1, r3, #32
    220a:	4a0e      	ldr	r2, [pc, #56]	; (2244 <z_arm_init_arch_hw_at_boot+0x50>)
    220c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2210:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2214:	3301      	adds	r3, #1
    2216:	b2db      	uxtb	r3, r3
    2218:	2b07      	cmp	r3, #7
    221a:	d9f4      	bls.n	2206 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    221c:	2300      	movs	r3, #0
    221e:	e008      	b.n	2232 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2220:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2224:	4a07      	ldr	r2, [pc, #28]	; (2244 <z_arm_init_arch_hw_at_boot+0x50>)
    2226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    222a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    222e:	3301      	adds	r3, #1
    2230:	b2db      	uxtb	r3, r3
    2232:	2b07      	cmp	r3, #7
    2234:	d9f4      	bls.n	2220 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2236:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    223c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2240:	bd10      	pop	{r4, pc}
    2242:	bf00      	nop
    2244:	e000e100 	.word	0xe000e100

00002248 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2248:	b508      	push	{r3, lr}
	if (_current == thread) {
    224a:	4b08      	ldr	r3, [pc, #32]	; (226c <z_impl_k_thread_abort+0x24>)
    224c:	689b      	ldr	r3, [r3, #8]
    224e:	4283      	cmp	r3, r0
    2250:	d002      	beq.n	2258 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    2252:	f005 fb0f 	bl	7874 <z_thread_abort>
}
    2256:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2258:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    225c:	2b00      	cmp	r3, #0
    225e:	d0f8      	beq.n	2252 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2260:	4a03      	ldr	r2, [pc, #12]	; (2270 <z_impl_k_thread_abort+0x28>)
    2262:	6853      	ldr	r3, [r2, #4]
    2264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2268:	6053      	str	r3, [r2, #4]
    226a:	e7f2      	b.n	2252 <z_impl_k_thread_abort+0xa>
    226c:	20001004 	.word	0x20001004
    2270:	e000ed00 	.word	0xe000ed00

00002274 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2274:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2276:	4b03      	ldr	r3, [pc, #12]	; (2284 <z_arm_configure_static_mpu_regions+0x10>)
    2278:	4a03      	ldr	r2, [pc, #12]	; (2288 <z_arm_configure_static_mpu_regions+0x14>)
    227a:	2101      	movs	r1, #1
    227c:	4803      	ldr	r0, [pc, #12]	; (228c <z_arm_configure_static_mpu_regions+0x18>)
    227e:	f000 f85d 	bl	233c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2282:	bd08      	pop	{r3, pc}
    2284:	20040000 	.word	0x20040000
    2288:	20000000 	.word	0x20000000
    228c:	0000c0a0 	.word	0x0000c0a0

00002290 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2290:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2292:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    2296:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2298:	4804      	ldr	r0, [pc, #16]	; (22ac <z_arm_configure_dynamic_mpu_regions+0x1c>)
    229a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    229c:	2320      	movs	r3, #32
    229e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    22a0:	4b03      	ldr	r3, [pc, #12]	; (22b0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    22a2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    22a4:	2101      	movs	r1, #1
    22a6:	f000 f86b 	bl	2380 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    22aa:	bd08      	pop	{r3, pc}
    22ac:	20000a58 	.word	0x20000a58
    22b0:	150b0000 	.word	0x150b0000

000022b4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    22b4:	4a06      	ldr	r2, [pc, #24]	; (22d0 <region_init+0x1c>)
    22b6:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22b8:	680b      	ldr	r3, [r1, #0]
    22ba:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    22be:	4303      	orrs	r3, r0
    22c0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22c4:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    22c6:	688b      	ldr	r3, [r1, #8]
    22c8:	f043 0301 	orr.w	r3, r3, #1
    22cc:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    22ce:	4770      	bx	lr
    22d0:	e000ed90 	.word	0xe000ed90

000022d4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    22d4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    22d6:	4c03      	ldr	r4, [pc, #12]	; (22e4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    22d8:	2301      	movs	r3, #1
    22da:	7822      	ldrb	r2, [r4, #0]
    22dc:	f008 fd97 	bl	ae0e <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    22e0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    22e2:	bd10      	pop	{r4, pc}
    22e4:	20001a2c 	.word	0x20001a2c

000022e8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    22e8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    22ea:	2300      	movs	r3, #0
    22ec:	4a08      	ldr	r2, [pc, #32]	; (2310 <mpu_configure_dynamic_mpu_regions+0x28>)
    22ee:	7812      	ldrb	r2, [r2, #0]
    22f0:	f008 fd8d 	bl	ae0e <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    22f4:	f110 0f16 	cmn.w	r0, #22
    22f8:	d008      	beq.n	230c <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    22fa:	4603      	mov	r3, r0
    22fc:	2b07      	cmp	r3, #7
    22fe:	dc05      	bgt.n	230c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    2300:	4a04      	ldr	r2, [pc, #16]	; (2314 <mpu_configure_dynamic_mpu_regions+0x2c>)
    2302:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2304:	2100      	movs	r1, #0
    2306:	6111      	str	r1, [r2, #16]
    2308:	3301      	adds	r3, #1
    230a:	e7f7      	b.n	22fc <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    230c:	bd08      	pop	{r3, pc}
    230e:	bf00      	nop
    2310:	20001a2c 	.word	0x20001a2c
    2314:	e000ed90 	.word	0xe000ed90

00002318 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2318:	4b03      	ldr	r3, [pc, #12]	; (2328 <arm_core_mpu_enable+0x10>)
    231a:	2205      	movs	r2, #5
    231c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    231e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2322:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2326:	4770      	bx	lr
    2328:	e000ed90 	.word	0xe000ed90

0000232c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    232c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2330:	4b01      	ldr	r3, [pc, #4]	; (2338 <arm_core_mpu_disable+0xc>)
    2332:	2200      	movs	r2, #0
    2334:	605a      	str	r2, [r3, #4]
}
    2336:	4770      	bx	lr
    2338:	e000ed90 	.word	0xe000ed90

0000233c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    233c:	b538      	push	{r3, r4, r5, lr}
    233e:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2340:	f7ff ffc8 	bl	22d4 <mpu_configure_static_mpu_regions>
    2344:	f110 0f16 	cmn.w	r0, #22
    2348:	d000      	beq.n	234c <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    234a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    234c:	4d08      	ldr	r5, [pc, #32]	; (2370 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    234e:	f240 1311 	movw	r3, #273	; 0x111
    2352:	462a      	mov	r2, r5
    2354:	4907      	ldr	r1, [pc, #28]	; (2374 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    2356:	4808      	ldr	r0, [pc, #32]	; (2378 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    2358:	f008 fb76 	bl	aa48 <printk>
    235c:	4621      	mov	r1, r4
    235e:	4807      	ldr	r0, [pc, #28]	; (237c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2360:	f008 fb72 	bl	aa48 <printk>
    2364:	f240 1111 	movw	r1, #273	; 0x111
    2368:	4628      	mov	r0, r5
    236a:	f008 fcc6 	bl	acfa <assert_post_action>
}
    236e:	e7ec      	b.n	234a <arm_core_mpu_configure_static_mpu_regions+0xe>
    2370:	0000c0ac 	.word	0x0000c0ac
    2374:	0000bc5c 	.word	0x0000bc5c
    2378:	0000bc60 	.word	0x0000bc60
    237c:	0000c0e4 	.word	0x0000c0e4

00002380 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2380:	b538      	push	{r3, r4, r5, lr}
    2382:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    2384:	f7ff ffb0 	bl	22e8 <mpu_configure_dynamic_mpu_regions>
    2388:	f110 0f16 	cmn.w	r0, #22
    238c:	d000      	beq.n	2390 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    238e:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2390:	4d08      	ldr	r5, [pc, #32]	; (23b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    2392:	f44f 7398 	mov.w	r3, #304	; 0x130
    2396:	462a      	mov	r2, r5
    2398:	4907      	ldr	r1, [pc, #28]	; (23b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    239a:	4808      	ldr	r0, [pc, #32]	; (23bc <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    239c:	f008 fb54 	bl	aa48 <printk>
    23a0:	4621      	mov	r1, r4
    23a2:	4807      	ldr	r0, [pc, #28]	; (23c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    23a4:	f008 fb50 	bl	aa48 <printk>
    23a8:	f44f 7198 	mov.w	r1, #304	; 0x130
    23ac:	4628      	mov	r0, r5
    23ae:	f008 fca4 	bl	acfa <assert_post_action>
}
    23b2:	e7ec      	b.n	238e <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    23b4:	0000c0ac 	.word	0x0000c0ac
    23b8:	0000bc5c 	.word	0x0000bc5c
    23bc:	0000bc60 	.word	0x0000bc60
    23c0:	0000c110 	.word	0x0000c110

000023c4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    23c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    23c6:	4b23      	ldr	r3, [pc, #140]	; (2454 <z_arm_mpu_init+0x90>)
    23c8:	681d      	ldr	r5, [r3, #0]
    23ca:	2d08      	cmp	r5, #8
    23cc:	d803      	bhi.n	23d6 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    23ce:	f7ff ffad 	bl	232c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23d2:	2400      	movs	r4, #0
    23d4:	e01e      	b.n	2414 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    23d6:	4c20      	ldr	r4, [pc, #128]	; (2458 <z_arm_mpu_init+0x94>)
    23d8:	f44f 73a4 	mov.w	r3, #328	; 0x148
    23dc:	4622      	mov	r2, r4
    23de:	491f      	ldr	r1, [pc, #124]	; (245c <z_arm_mpu_init+0x98>)
    23e0:	481f      	ldr	r0, [pc, #124]	; (2460 <z_arm_mpu_init+0x9c>)
    23e2:	f008 fb31 	bl	aa48 <printk>
    23e6:	2208      	movs	r2, #8
    23e8:	4629      	mov	r1, r5
    23ea:	481e      	ldr	r0, [pc, #120]	; (2464 <z_arm_mpu_init+0xa0>)
    23ec:	f008 fb2c 	bl	aa48 <printk>
    23f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    23f4:	4620      	mov	r0, r4
    23f6:	f008 fc80 	bl	acfa <assert_post_action>
		return -1;
    23fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    23fe:	e016      	b.n	242e <z_arm_mpu_init+0x6a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2400:	4b14      	ldr	r3, [pc, #80]	; (2454 <z_arm_mpu_init+0x90>)
    2402:	6859      	ldr	r1, [r3, #4]
    2404:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2408:	0093      	lsls	r3, r2, #2
    240a:	4419      	add	r1, r3
    240c:	4620      	mov	r0, r4
    240e:	f7ff ff51 	bl	22b4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2412:	3401      	adds	r4, #1
    2414:	42a5      	cmp	r5, r4
    2416:	d8f3      	bhi.n	2400 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2418:	4b13      	ldr	r3, [pc, #76]	; (2468 <z_arm_mpu_init+0xa4>)
    241a:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    241c:	f7ff ff7c 	bl	2318 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    2420:	4b12      	ldr	r3, [pc, #72]	; (246c <z_arm_mpu_init+0xa8>)
    2422:	681b      	ldr	r3, [r3, #0]
    2424:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2428:	2b08      	cmp	r3, #8
    242a:	d101      	bne.n	2430 <z_arm_mpu_init+0x6c>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    242c:	2000      	movs	r0, #0
}
    242e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    2430:	4c09      	ldr	r4, [pc, #36]	; (2458 <z_arm_mpu_init+0x94>)
    2432:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2436:	4622      	mov	r2, r4
    2438:	490d      	ldr	r1, [pc, #52]	; (2470 <z_arm_mpu_init+0xac>)
    243a:	4809      	ldr	r0, [pc, #36]	; (2460 <z_arm_mpu_init+0x9c>)
    243c:	f008 fb04 	bl	aa48 <printk>
    2440:	480c      	ldr	r0, [pc, #48]	; (2474 <z_arm_mpu_init+0xb0>)
    2442:	f008 fb01 	bl	aa48 <printk>
    2446:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    244a:	4620      	mov	r0, r4
    244c:	f008 fc55 	bl	acfa <assert_post_action>
	return 0;
    2450:	2000      	movs	r0, #0
    2452:	e7ec      	b.n	242e <z_arm_mpu_init+0x6a>
    2454:	0000c1f8 	.word	0x0000c1f8
    2458:	0000c0ac 	.word	0x0000c0ac
    245c:	0000bc5c 	.word	0x0000bc5c
    2460:	0000bc60 	.word	0x0000bc60
    2464:	0000c140 	.word	0x0000c140
    2468:	20001a2c 	.word	0x20001a2c
    246c:	e000ed90 	.word	0xe000ed90
    2470:	0000c174 	.word	0x0000c174
    2474:	0000c1c4 	.word	0x0000c1c4

00002478 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2478:	4b01      	ldr	r3, [pc, #4]	; (2480 <__stdout_hook_install+0x8>)
    247a:	6018      	str	r0, [r3, #0]
}
    247c:	4770      	bx	lr
    247e:	bf00      	nop
    2480:	20000028 	.word	0x20000028

00002484 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2484:	3902      	subs	r1, #2
    2486:	2901      	cmp	r1, #1
    2488:	d804      	bhi.n	2494 <z_impl_zephyr_fputc+0x10>
{
    248a:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    248c:	4b03      	ldr	r3, [pc, #12]	; (249c <z_impl_zephyr_fputc+0x18>)
    248e:	681b      	ldr	r3, [r3, #0]
    2490:	4798      	blx	r3
}
    2492:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2498:	4770      	bx	lr
    249a:	bf00      	nop
    249c:	20000028 	.word	0x20000028

000024a0 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    24a0:	b40f      	push	{r0, r1, r2, r3}
    24a2:	b500      	push	{lr}
    24a4:	b083      	sub	sp, #12
    24a6:	ab04      	add	r3, sp, #16
    24a8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    24ac:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    24ae:	2102      	movs	r1, #2
    24b0:	4803      	ldr	r0, [pc, #12]	; (24c0 <printf+0x20>)
    24b2:	f7fe fbcf 	bl	c54 <cbvprintf>
	va_end(vargs);

	return r;
}
    24b6:	b003      	add	sp, #12
    24b8:	f85d eb04 	ldr.w	lr, [sp], #4
    24bc:	b004      	add	sp, #16
    24be:	4770      	bx	lr
    24c0:	0000af91 	.word	0x0000af91

000024c4 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    24c4:	4b06      	ldr	r3, [pc, #24]	; (24e0 <nrf52_errata_197+0x1c>)
    24c6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    24c8:	4a06      	ldr	r2, [pc, #24]	; (24e4 <nrf52_errata_197+0x20>)
    24ca:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    24cc:	2b08      	cmp	r3, #8
    24ce:	d001      	beq.n	24d4 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    24d0:	2000      	movs	r0, #0
    24d2:	4770      	bx	lr
                switch(var2)
    24d4:	2a02      	cmp	r2, #2
    24d6:	d001      	beq.n	24dc <nrf52_errata_197+0x18>
                        return false;
    24d8:	2000      	movs	r0, #0
    24da:	4770      	bx	lr
                        return true;
    24dc:	2001      	movs	r0, #1
    #endif
}
    24de:	4770      	bx	lr
    24e0:	10000130 	.word	0x10000130
    24e4:	10000134 	.word	0x10000134

000024e8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    24e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    24ea:	f04f 0320 	mov.w	r3, #32
    24ee:	f3ef 8411 	mrs	r4, BASEPRI
    24f2:	f383 8812 	msr	BASEPRI_MAX, r3
    24f6:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    24fa:	2301      	movs	r3, #1
    24fc:	4a0b      	ldr	r2, [pc, #44]	; (252c <nordicsemi_nrf52_init+0x44>)
    24fe:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2506:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    250a:	f7ff ffdb 	bl	24c4 <nrf52_errata_197>
    250e:	b110      	cbz	r0, 2516 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2510:	4b07      	ldr	r3, [pc, #28]	; (2530 <nordicsemi_nrf52_init+0x48>)
    2512:	2201      	movs	r2, #1
    2514:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    251a:	2201      	movs	r2, #1
    251c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2520:	f384 8811 	msr	BASEPRI, r4
    2524:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2528:	2000      	movs	r0, #0
    252a:	bd10      	pop	{r4, pc}
    252c:	4001e000 	.word	0x4001e000
    2530:	40000638 	.word	0x40000638

00002534 <sys_arch_reboot>:
    *p_gpregret = val;
    2534:	b2c0      	uxtb	r0, r0
    2536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    253a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    253e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2542:	4905      	ldr	r1, [pc, #20]	; (2558 <sys_arch_reboot+0x24>)
    2544:	68ca      	ldr	r2, [r1, #12]
    2546:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    254a:	4b04      	ldr	r3, [pc, #16]	; (255c <sys_arch_reboot+0x28>)
    254c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    254e:	60cb      	str	r3, [r1, #12]
    2550:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2554:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2556:	e7fd      	b.n	2554 <sys_arch_reboot+0x20>
    2558:	e000ed00 	.word	0xe000ed00
    255c:	05fa0004 	.word	0x05fa0004

00002560 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2560:	b130      	cbz	r0, 2570 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    2562:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2564:	0180      	lsls	r0, r0, #6
    2566:	4b03      	ldr	r3, [pc, #12]	; (2574 <arch_busy_wait+0x14>)
    2568:	f043 0301 	orr.w	r3, r3, #1
    256c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    256e:	bd08      	pop	{r3, pc}
    2570:	4770      	bx	lr
    2572:	bf00      	nop
    2574:	0000bb70 	.word	0x0000bb70

00002578 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
    2578:	b570      	push	{r4, r5, r6, lr}
    257a:	b082      	sub	sp, #8
	const struct device *dev = entropy_driver;
    257c:	4b1d      	ldr	r3, [pc, #116]	; (25f4 <z_impl_sys_rand32_get+0x7c>)
    257e:	681c      	ldr	r4, [r3, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    2580:	b16c      	cbz	r4, 259e <z_impl_sys_rand32_get+0x26>

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
    2582:	68a5      	ldr	r5, [r4, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
    2584:	682b      	ldr	r3, [r5, #0]
    2586:	b313      	cbz	r3, 25ce <z_impl_sys_rand32_get+0x56>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    2588:	682b      	ldr	r3, [r5, #0]
    258a:	2204      	movs	r2, #4
    258c:	eb0d 0102 	add.w	r1, sp, r2
    2590:	4620      	mov	r0, r4
    2592:	4798      	blx	r3
		entropy_driver = dev;
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    2594:	2800      	cmp	r0, #0
    2596:	db29      	blt.n	25ec <z_impl_sys_rand32_get+0x74>

		random_num = k_cycle_get_32();
	}

	return random_num;
}
    2598:	9801      	ldr	r0, [sp, #4]
    259a:	b002      	add	sp, #8
    259c:	bd70      	pop	{r4, r5, r6, pc}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    259e:	4816      	ldr	r0, [pc, #88]	; (25f8 <z_impl_sys_rand32_get+0x80>)
    25a0:	f003 f8b2 	bl	5708 <z_impl_device_get_binding>
		__ASSERT((dev != NULL),
    25a4:	4604      	mov	r4, r0
    25a6:	b110      	cbz	r0, 25ae <z_impl_sys_rand32_get+0x36>
		entropy_driver = dev;
    25a8:	4b12      	ldr	r3, [pc, #72]	; (25f4 <z_impl_sys_rand32_get+0x7c>)
    25aa:	601c      	str	r4, [r3, #0]
    25ac:	e7e9      	b.n	2582 <z_impl_sys_rand32_get+0xa>
		__ASSERT((dev != NULL),
    25ae:	4d13      	ldr	r5, [pc, #76]	; (25fc <z_impl_sys_rand32_get+0x84>)
    25b0:	231a      	movs	r3, #26
    25b2:	462a      	mov	r2, r5
    25b4:	4912      	ldr	r1, [pc, #72]	; (2600 <z_impl_sys_rand32_get+0x88>)
    25b6:	4813      	ldr	r0, [pc, #76]	; (2604 <z_impl_sys_rand32_get+0x8c>)
    25b8:	f008 fa46 	bl	aa48 <printk>
    25bc:	490e      	ldr	r1, [pc, #56]	; (25f8 <z_impl_sys_rand32_get+0x80>)
    25be:	4812      	ldr	r0, [pc, #72]	; (2608 <z_impl_sys_rand32_get+0x90>)
    25c0:	f008 fa42 	bl	aa48 <printk>
    25c4:	211a      	movs	r1, #26
    25c6:	4628      	mov	r0, r5
    25c8:	f008 fb97 	bl	acfa <assert_post_action>
    25cc:	e7ec      	b.n	25a8 <z_impl_sys_rand32_get+0x30>
	__ASSERT(api->get_entropy != NULL,
    25ce:	4e0f      	ldr	r6, [pc, #60]	; (260c <z_impl_sys_rand32_get+0x94>)
    25d0:	234b      	movs	r3, #75	; 0x4b
    25d2:	4632      	mov	r2, r6
    25d4:	490e      	ldr	r1, [pc, #56]	; (2610 <z_impl_sys_rand32_get+0x98>)
    25d6:	480b      	ldr	r0, [pc, #44]	; (2604 <z_impl_sys_rand32_get+0x8c>)
    25d8:	f008 fa36 	bl	aa48 <printk>
    25dc:	480d      	ldr	r0, [pc, #52]	; (2614 <z_impl_sys_rand32_get+0x9c>)
    25de:	f008 fa33 	bl	aa48 <printk>
    25e2:	214b      	movs	r1, #75	; 0x4b
    25e4:	4630      	mov	r0, r6
    25e6:	f008 fb88 	bl	acfa <assert_post_action>
    25ea:	e7cd      	b.n	2588 <z_impl_sys_rand32_get+0x10>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    25ec:	f009 f813 	bl	b616 <sys_clock_cycle_get_32>
		random_num = k_cycle_get_32();
    25f0:	9001      	str	r0, [sp, #4]
    25f2:	e7d1      	b.n	2598 <z_impl_sys_rand32_get+0x20>
    25f4:	20000a64 	.word	0x20000a64
    25f8:	0000c218 	.word	0x0000c218
    25fc:	0000c224 	.word	0x0000c224
    2600:	0000c260 	.word	0x0000c260
    2604:	0000bc60 	.word	0x0000bc60
    2608:	0000c278 	.word	0x0000c278
    260c:	0000c2dc 	.word	0x0000c2dc
    2610:	0000c30c 	.word	0x0000c30c
    2614:	0000c32c 	.word	0x0000c32c

00002618 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    2618:	4800      	ldr	r0, [pc, #0]	; (261c <get_hf_flags+0x4>)
    261a:	4770      	bx	lr
    261c:	20000ac0 	.word	0x20000ac0

00002620 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2620:	4b01      	ldr	r3, [pc, #4]	; (2628 <get_subsys+0x8>)
    2622:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    2624:	1140      	asrs	r0, r0, #5
    2626:	4770      	bx	lr
    2628:	20000a78 	.word	0x20000a78

0000262c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    262c:	b530      	push	{r4, r5, lr}
    262e:	b083      	sub	sp, #12
    2630:	4605      	mov	r5, r0
    2632:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2634:	f7ff fff4 	bl	2620 <get_subsys>
    2638:	4601      	mov	r1, r0
    263a:	2340      	movs	r3, #64	; 0x40
    263c:	9300      	str	r3, [sp, #0]
    263e:	4623      	mov	r3, r4
    2640:	4a05      	ldr	r2, [pc, #20]	; (2658 <onoff_start+0x2c>)
    2642:	4806      	ldr	r0, [pc, #24]	; (265c <onoff_start+0x30>)
    2644:	f008 fd33 	bl	b0ae <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2648:	1e01      	subs	r1, r0, #0
    264a:	db01      	blt.n	2650 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    264c:	b003      	add	sp, #12
    264e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2650:	4628      	mov	r0, r5
    2652:	47a0      	blx	r4
}
    2654:	e7fa      	b.n	264c <onoff_start+0x20>
    2656:	bf00      	nop
    2658:	0000b0f7 	.word	0x0000b0f7
    265c:	0000b8d0 	.word	0x0000b8d0

00002660 <generic_hfclk_stop>:
{
    2660:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2662:	4b0a      	ldr	r3, [pc, #40]	; (268c <generic_hfclk_stop+0x2c>)
    2664:	f3bf 8f5b 	dmb	ish
    2668:	e853 2f00 	ldrex	r2, [r3]
    266c:	f022 0102 	bic.w	r1, r2, #2
    2670:	e843 1000 	strex	r0, r1, [r3]
    2674:	2800      	cmp	r0, #0
    2676:	d1f7      	bne.n	2668 <generic_hfclk_stop+0x8>
    2678:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    267c:	f012 0f01 	tst.w	r2, #1
    2680:	d000      	beq.n	2684 <generic_hfclk_stop+0x24>
}
    2682:	bd08      	pop	{r3, pc}
	hfclk_stop();
    2684:	f008 fd49 	bl	b11a <hfclk_stop>
    2688:	e7fb      	b.n	2682 <generic_hfclk_stop+0x22>
    268a:	bf00      	nop
    268c:	20000ad0 	.word	0x20000ad0

00002690 <generic_hfclk_start>:
{
    2690:	b510      	push	{r4, lr}
	__asm__ volatile(
    2692:	f04f 0320 	mov.w	r3, #32
    2696:	f3ef 8411 	mrs	r4, BASEPRI
    269a:	f383 8812 	msr	BASEPRI_MAX, r3
    269e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    26a2:	4a13      	ldr	r2, [pc, #76]	; (26f0 <generic_hfclk_start+0x60>)
    26a4:	6813      	ldr	r3, [r2, #0]
    26a6:	f043 0302 	orr.w	r3, r3, #2
    26aa:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    26ac:	f013 0f01 	tst.w	r3, #1
    26b0:	d108      	bne.n	26c4 <generic_hfclk_start+0x34>
	bool already_started = false;
    26b2:	2300      	movs	r3, #0
	__asm__ volatile(
    26b4:	f384 8811 	msr	BASEPRI, r4
    26b8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    26bc:	b99b      	cbnz	r3, 26e6 <generic_hfclk_start+0x56>
	hfclk_start();
    26be:	f008 fd22 	bl	b106 <hfclk_start>
}
    26c2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    26c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26c8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    26cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    26d0:	f012 0f01 	tst.w	r2, #1
    26d4:	d101      	bne.n	26da <generic_hfclk_start+0x4a>
	bool already_started = false;
    26d6:	2300      	movs	r3, #0
    26d8:	e7ec      	b.n	26b4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    26da:	f7ff ff9d 	bl	2618 <get_hf_flags>
    26de:	f008 fcc1 	bl	b064 <set_on_state>
			already_started = true;
    26e2:	2301      	movs	r3, #1
    26e4:	e7e6      	b.n	26b4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    26e6:	2100      	movs	r1, #0
    26e8:	4802      	ldr	r0, [pc, #8]	; (26f4 <generic_hfclk_start+0x64>)
    26ea:	f008 fcce 	bl	b08a <clkstarted_handle>
		return;
    26ee:	e7e8      	b.n	26c2 <generic_hfclk_start+0x32>
    26f0:	20000ad0 	.word	0x20000ad0
    26f4:	0000b8d0 	.word	0x0000b8d0

000026f8 <get_status>:
{
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    26fc:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    26fe:	2c01      	cmp	r4, #1
    2700:	d807      	bhi.n	2712 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2702:	4621      	mov	r1, r4
    2704:	4628      	mov	r0, r5
    2706:	f008 fc65 	bl	afd4 <get_sub_data>
    270a:	6880      	ldr	r0, [r0, #8]
}
    270c:	f000 0007 	and.w	r0, r0, #7
    2710:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2712:	4e06      	ldr	r6, [pc, #24]	; (272c <get_status+0x34>)
    2714:	2379      	movs	r3, #121	; 0x79
    2716:	4632      	mov	r2, r6
    2718:	4905      	ldr	r1, [pc, #20]	; (2730 <get_status+0x38>)
    271a:	4806      	ldr	r0, [pc, #24]	; (2734 <get_status+0x3c>)
    271c:	f008 f994 	bl	aa48 <printk>
    2720:	2179      	movs	r1, #121	; 0x79
    2722:	4630      	mov	r0, r6
    2724:	f008 fae9 	bl	acfa <assert_post_action>
    2728:	e7eb      	b.n	2702 <get_status+0xa>
    272a:	bf00      	nop
    272c:	0000c354 	.word	0x0000c354
    2730:	0000c394 	.word	0x0000c394
    2734:	0000bc60 	.word	0x0000bc60

00002738 <stop>:
{
    2738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    273c:	4607      	mov	r7, r0
    273e:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    2740:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2742:	4621      	mov	r1, r4
    2744:	f008 fc46 	bl	afd4 <get_sub_data>
    2748:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    274a:	2c01      	cmp	r4, #1
    274c:	d80f      	bhi.n	276e <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    274e:	4631      	mov	r1, r6
    2750:	f105 0008 	add.w	r0, r5, #8
    2754:	f008 fc4d 	bl	aff2 <set_off_state>
	if (err < 0) {
    2758:	2800      	cmp	r0, #0
    275a:	db06      	blt.n	276a <stop+0x32>
	get_sub_config(dev, type)->stop();
    275c:	4621      	mov	r1, r4
    275e:	4638      	mov	r0, r7
    2760:	f008 fc3f 	bl	afe2 <get_sub_config>
    2764:	6843      	ldr	r3, [r0, #4]
    2766:	4798      	blx	r3
	return 0;
    2768:	2000      	movs	r0, #0
}
    276a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    276e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 2794 <stop+0x5c>
    2772:	f240 134d 	movw	r3, #333	; 0x14d
    2776:	4642      	mov	r2, r8
    2778:	4904      	ldr	r1, [pc, #16]	; (278c <stop+0x54>)
    277a:	4805      	ldr	r0, [pc, #20]	; (2790 <stop+0x58>)
    277c:	f008 f964 	bl	aa48 <printk>
    2780:	f240 114d 	movw	r1, #333	; 0x14d
    2784:	4640      	mov	r0, r8
    2786:	f008 fab8 	bl	acfa <assert_post_action>
    278a:	e7e0      	b.n	274e <stop+0x16>
    278c:	0000c394 	.word	0x0000c394
    2790:	0000bc60 	.word	0x0000bc60
    2794:	0000c354 	.word	0x0000c354

00002798 <onoff_stop>:
{
    2798:	b538      	push	{r3, r4, r5, lr}
    279a:	4605      	mov	r5, r0
    279c:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    279e:	f7ff ff3f 	bl	2620 <get_subsys>
    27a2:	4601      	mov	r1, r0
    27a4:	2240      	movs	r2, #64	; 0x40
    27a6:	4803      	ldr	r0, [pc, #12]	; (27b4 <onoff_stop+0x1c>)
    27a8:	f7ff ffc6 	bl	2738 <stop>
    27ac:	4601      	mov	r1, r0
	notify(mgr, res);
    27ae:	4628      	mov	r0, r5
    27b0:	47a0      	blx	r4
}
    27b2:	bd38      	pop	{r3, r4, r5, pc}
    27b4:	0000b8d0 	.word	0x0000b8d0

000027b8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    27b8:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    27ba:	2801      	cmp	r0, #1
    27bc:	d01d      	beq.n	27fa <clock_event_handler+0x42>
    27be:	2803      	cmp	r0, #3
    27c0:	d020      	beq.n	2804 <clock_event_handler+0x4c>
    27c2:	b168      	cbz	r0, 27e0 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    27c4:	4c16      	ldr	r4, [pc, #88]	; (2820 <clock_event_handler+0x68>)
    27c6:	f240 2362 	movw	r3, #610	; 0x262
    27ca:	4622      	mov	r2, r4
    27cc:	4915      	ldr	r1, [pc, #84]	; (2824 <clock_event_handler+0x6c>)
    27ce:	4816      	ldr	r0, [pc, #88]	; (2828 <clock_event_handler+0x70>)
    27d0:	f008 f93a 	bl	aa48 <printk>
    27d4:	f240 2162 	movw	r1, #610	; 0x262
    27d8:	4620      	mov	r0, r4
    27da:	f008 fa8e 	bl	acfa <assert_post_action>
		break;
	}
}
    27de:	e010      	b.n	2802 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    27e0:	2100      	movs	r1, #0
    27e2:	4812      	ldr	r0, [pc, #72]	; (282c <clock_event_handler+0x74>)
    27e4:	f008 fbf6 	bl	afd4 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    27e8:	6883      	ldr	r3, [r0, #8]
    27ea:	f013 0f07 	tst.w	r3, #7
    27ee:	d108      	bne.n	2802 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    27f0:	2100      	movs	r1, #0
    27f2:	480e      	ldr	r0, [pc, #56]	; (282c <clock_event_handler+0x74>)
    27f4:	f008 fc49 	bl	b08a <clkstarted_handle>
    27f8:	e003      	b.n	2802 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    27fa:	2101      	movs	r1, #1
    27fc:	480b      	ldr	r0, [pc, #44]	; (282c <clock_event_handler+0x74>)
    27fe:	f008 fc44 	bl	b08a <clkstarted_handle>
}
    2802:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    2804:	4c06      	ldr	r4, [pc, #24]	; (2820 <clock_event_handler+0x68>)
    2806:	f240 235e 	movw	r3, #606	; 0x25e
    280a:	4622      	mov	r2, r4
    280c:	4905      	ldr	r1, [pc, #20]	; (2824 <clock_event_handler+0x6c>)
    280e:	4806      	ldr	r0, [pc, #24]	; (2828 <clock_event_handler+0x70>)
    2810:	f008 f91a 	bl	aa48 <printk>
    2814:	f240 215e 	movw	r1, #606	; 0x25e
    2818:	4620      	mov	r0, r4
    281a:	f008 fa6e 	bl	acfa <assert_post_action>
		break;
    281e:	e7f0      	b.n	2802 <clock_event_handler+0x4a>
    2820:	0000c354 	.word	0x0000c354
    2824:	0000bc5c 	.word	0x0000bc5c
    2828:	0000bc60 	.word	0x0000bc60
    282c:	0000b8d0 	.word	0x0000b8d0

00002830 <api_blocking_start>:
{
    2830:	b500      	push	{lr}
    2832:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2834:	f8cd d000 	str.w	sp, [sp]
    2838:	f8cd d004 	str.w	sp, [sp, #4]
    283c:	2300      	movs	r3, #0
    283e:	9302      	str	r3, [sp, #8]
    2840:	2301      	movs	r3, #1
    2842:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2844:	466b      	mov	r3, sp
    2846:	4a07      	ldr	r2, [pc, #28]	; (2864 <api_blocking_start+0x34>)
    2848:	f008 fc4d 	bl	b0e6 <api_start>
	if (err < 0) {
    284c:	2800      	cmp	r0, #0
    284e:	db05      	blt.n	285c <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    2850:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2854:	2300      	movs	r3, #0
    2856:	4668      	mov	r0, sp
    2858:	f003 fdf8 	bl	644c <z_impl_k_sem_take>
}
    285c:	b005      	add	sp, #20
    285e:	f85d fb04 	ldr.w	pc, [sp], #4
    2862:	bf00      	nop
    2864:	0000b139 	.word	0x0000b139

00002868 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    286c:	2200      	movs	r2, #0
    286e:	2101      	movs	r1, #1
    2870:	4610      	mov	r0, r2
    2872:	f7ff f9a7 	bl	1bc4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2876:	2000      	movs	r0, #0
    2878:	f7ff f972 	bl	1b60 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    287c:	4811      	ldr	r0, [pc, #68]	; (28c4 <clk_init+0x5c>)
    287e:	f001 fd37 	bl	42f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2882:	4b11      	ldr	r3, [pc, #68]	; (28c8 <clk_init+0x60>)
    2884:	4298      	cmp	r0, r3
    2886:	d11a      	bne.n	28be <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2888:	f001 fd5a 	bl	4340 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    288c:	2400      	movs	r4, #0
    288e:	e003      	b.n	2898 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2890:	2301      	movs	r3, #1
    2892:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2894:	441c      	add	r4, r3
    2896:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    2898:	2c01      	cmp	r4, #1
    289a:	d80e      	bhi.n	28ba <clk_init+0x52>
						get_sub_data(dev, i);
    289c:	4621      	mov	r1, r4
    289e:	4630      	mov	r0, r6
    28a0:	f008 fb98 	bl	afd4 <get_sub_data>
    28a4:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    28a6:	4621      	mov	r1, r4
    28a8:	4630      	mov	r0, r6
    28aa:	f008 fb9e 	bl	afea <get_onoff_manager>
    28ae:	4907      	ldr	r1, [pc, #28]	; (28cc <clk_init+0x64>)
    28b0:	f008 f966 	bl	ab80 <onoff_manager_init>
		if (err < 0) {
    28b4:	2800      	cmp	r0, #0
    28b6:	daeb      	bge.n	2890 <clk_init+0x28>
    28b8:	e000      	b.n	28bc <clk_init+0x54>
	}

	return 0;
    28ba:	2000      	movs	r0, #0
}
    28bc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    28be:	f06f 0004 	mvn.w	r0, #4
    28c2:	e7fb      	b.n	28bc <clk_init+0x54>
    28c4:	000027b9 	.word	0x000027b9
    28c8:	0bad0000 	.word	0x0bad0000
    28cc:	0000c3f4 	.word	0x0000c3f4

000028d0 <lfclk_spinwait>:
{
    28d0:	b570      	push	{r4, r5, r6, lr}
    28d2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    28d4:	2801      	cmp	r0, #1
    28d6:	d107      	bne.n	28e8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    28d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28dc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    28e0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    28e4:	2b01      	cmp	r3, #1
    28e6:	d058      	beq.n	299a <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28e8:	f008 ff1d 	bl	b726 <k_is_in_isr>
    28ec:	b928      	cbnz	r0, 28fa <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    28ee:	4b2e      	ldr	r3, [pc, #184]	; (29a8 <lfclk_spinwait+0xd8>)
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d041      	beq.n	297a <lfclk_spinwait+0xaa>
    28f6:	2300      	movs	r3, #0
    28f8:	e000      	b.n	28fc <lfclk_spinwait+0x2c>
    28fa:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    28fc:	461c      	mov	r4, r3
    28fe:	2b00      	cmp	r3, #0
    2900:	d03d      	beq.n	297e <lfclk_spinwait+0xae>
	__asm__ volatile(
    2902:	f04f 0320 	mov.w	r3, #32
    2906:	f3ef 8611 	mrs	r6, BASEPRI
    290a:	f383 8812 	msr	BASEPRI_MAX, r3
    290e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    2912:	b924      	cbnz	r4, 291e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    2914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2918:	2202      	movs	r2, #2
    291a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    291e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2922:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2926:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    292a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    292e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2932:	d12b      	bne.n	298c <lfclk_spinwait+0xbc>
    return false;
    2934:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2936:	b11a      	cbz	r2, 2940 <lfclk_spinwait+0x70>
    2938:	2b01      	cmp	r3, #1
    293a:	d029      	beq.n	2990 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    293c:	2d01      	cmp	r5, #1
    293e:	d027      	beq.n	2990 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2940:	b1fc      	cbz	r4, 2982 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2942:	4630      	mov	r0, r6
    2944:	f7ff f902 	bl	1b4c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2948:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    294c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2950:	2b00      	cmp	r3, #0
    2952:	d1e4      	bne.n	291e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2954:	4b15      	ldr	r3, [pc, #84]	; (29ac <lfclk_spinwait+0xdc>)
    2956:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2958:	2b00      	cmp	r3, #0
    295a:	d0e0      	beq.n	291e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    295c:	4b13      	ldr	r3, [pc, #76]	; (29ac <lfclk_spinwait+0xdc>)
    295e:	2200      	movs	r2, #0
    2960:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2962:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2964:	2301      	movs	r3, #1
    2966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    296a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    296e:	4a10      	ldr	r2, [pc, #64]	; (29b0 <lfclk_spinwait+0xe0>)
    2970:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2974:	4a0f      	ldr	r2, [pc, #60]	; (29b4 <lfclk_spinwait+0xe4>)
    2976:	6013      	str	r3, [r2, #0]
}
    2978:	e7d1      	b.n	291e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    297a:	2301      	movs	r3, #1
    297c:	e7be      	b.n	28fc <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    297e:	2600      	movs	r6, #0
    2980:	e7c7      	b.n	2912 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    2982:	2021      	movs	r0, #33	; 0x21
    2984:	2100      	movs	r1, #0
    2986:	f004 ff23 	bl	77d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    298a:	e7dd      	b.n	2948 <lfclk_spinwait+0x78>
                return true;
    298c:	2201      	movs	r2, #1
    298e:	e7d2      	b.n	2936 <lfclk_spinwait+0x66>
	if (isr_mode) {
    2990:	b124      	cbz	r4, 299c <lfclk_spinwait+0xcc>
	__asm__ volatile(
    2992:	f386 8811 	msr	BASEPRI, r6
    2996:	f3bf 8f6f 	isb	sy
}
    299a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    299c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29a0:	2202      	movs	r2, #2
    29a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    29a6:	e7f8      	b.n	299a <lfclk_spinwait+0xca>
    29a8:	20001a2d 	.word	0x20001a2d
    29ac:	40000104 	.word	0x40000104
    29b0:	e000e100 	.word	0xe000e100
    29b4:	40000008 	.word	0x40000008

000029b8 <z_nrf_clock_control_lf_on>:
{
    29b8:	b538      	push	{r3, r4, r5, lr}
    29ba:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    29bc:	4b1f      	ldr	r3, [pc, #124]	; (2a3c <z_nrf_clock_control_lf_on+0x84>)
    29be:	2101      	movs	r1, #1
    29c0:	f3bf 8f5b 	dmb	ish
    29c4:	e853 2f00 	ldrex	r2, [r3]
    29c8:	e843 1000 	strex	r0, r1, [r3]
    29cc:	2800      	cmp	r0, #0
    29ce:	d1f9      	bne.n	29c4 <z_nrf_clock_control_lf_on+0xc>
    29d0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    29d4:	b142      	cbz	r2, 29e8 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    29d6:	b134      	cbz	r4, 29e6 <z_nrf_clock_control_lf_on+0x2e>
    29d8:	1e63      	subs	r3, r4, #1
    29da:	b2db      	uxtb	r3, r3
    29dc:	2b01      	cmp	r3, #1
    29de:	d81e      	bhi.n	2a1e <z_nrf_clock_control_lf_on+0x66>
		lfclk_spinwait(start_mode);
    29e0:	4620      	mov	r0, r4
    29e2:	f7ff ff75 	bl	28d0 <lfclk_spinwait>
}
    29e6:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    29e8:	4815      	ldr	r0, [pc, #84]	; (2a40 <z_nrf_clock_control_lf_on+0x88>)
    29ea:	f008 fafe 	bl	afea <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    29ee:	4915      	ldr	r1, [pc, #84]	; (2a44 <z_nrf_clock_control_lf_on+0x8c>)
    29f0:	2300      	movs	r3, #0
    29f2:	604b      	str	r3, [r1, #4]
    29f4:	60cb      	str	r3, [r1, #12]
    29f6:	2301      	movs	r3, #1
    29f8:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    29fa:	f7fe f86d 	bl	ad8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    29fe:	2800      	cmp	r0, #0
    2a00:	dae9      	bge.n	29d6 <z_nrf_clock_control_lf_on+0x1e>
    2a02:	4d11      	ldr	r5, [pc, #68]	; (2a48 <z_nrf_clock_control_lf_on+0x90>)
    2a04:	f44f 7308 	mov.w	r3, #544	; 0x220
    2a08:	462a      	mov	r2, r5
    2a0a:	4910      	ldr	r1, [pc, #64]	; (2a4c <z_nrf_clock_control_lf_on+0x94>)
    2a0c:	4810      	ldr	r0, [pc, #64]	; (2a50 <z_nrf_clock_control_lf_on+0x98>)
    2a0e:	f008 f81b 	bl	aa48 <printk>
    2a12:	f44f 7108 	mov.w	r1, #544	; 0x220
    2a16:	4628      	mov	r0, r5
    2a18:	f008 f96f 	bl	acfa <assert_post_action>
    2a1c:	e7db      	b.n	29d6 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    2a1e:	4c0a      	ldr	r4, [pc, #40]	; (2a48 <z_nrf_clock_control_lf_on+0x90>)
    2a20:	f240 2332 	movw	r3, #562	; 0x232
    2a24:	4622      	mov	r2, r4
    2a26:	490b      	ldr	r1, [pc, #44]	; (2a54 <z_nrf_clock_control_lf_on+0x9c>)
    2a28:	4809      	ldr	r0, [pc, #36]	; (2a50 <z_nrf_clock_control_lf_on+0x98>)
    2a2a:	f008 f80d 	bl	aa48 <printk>
    2a2e:	f240 2132 	movw	r1, #562	; 0x232
    2a32:	4620      	mov	r0, r4
    2a34:	f008 f961 	bl	acfa <assert_post_action>
    2a38:	e7d5      	b.n	29e6 <z_nrf_clock_control_lf_on+0x2e>
    2a3a:	bf00      	nop
    2a3c:	20000ad4 	.word	0x20000ad4
    2a40:	0000b8d0 	.word	0x0000b8d0
    2a44:	20000a68 	.word	0x20000a68
    2a48:	0000c354 	.word	0x0000c354
    2a4c:	0000c3b8 	.word	0x0000c3b8
    2a50:	0000bc60 	.word	0x0000bc60
    2a54:	0000bc5c 	.word	0x0000bc5c

00002a58 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2a58:	b510      	push	{r4, lr}
    2a5a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2a5c:	280a      	cmp	r0, #10
    2a5e:	d007      	beq.n	2a70 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2a60:	4b07      	ldr	r3, [pc, #28]	; (2a80 <console_out+0x28>)
    2a62:	6818      	ldr	r0, [r3, #0]
    2a64:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    2a66:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2a68:	685b      	ldr	r3, [r3, #4]
    2a6a:	4798      	blx	r3

	return c;
}
    2a6c:	4620      	mov	r0, r4
    2a6e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    2a70:	4b03      	ldr	r3, [pc, #12]	; (2a80 <console_out+0x28>)
    2a72:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2a74:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2a76:	685b      	ldr	r3, [r3, #4]
    2a78:	210d      	movs	r1, #13
    2a7a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    2a7c:	e7f0      	b.n	2a60 <console_out+0x8>
    2a7e:	bf00      	nop
    2a80:	20000ad8 	.word	0x20000ad8

00002a84 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    2a84:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    2a86:	4c04      	ldr	r4, [pc, #16]	; (2a98 <uart_console_hook_install+0x14>)
    2a88:	4620      	mov	r0, r4
    2a8a:	f7ff fcf5 	bl	2478 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    2a8e:	4620      	mov	r0, r4
    2a90:	f7fd fd5e 	bl	550 <__printk_hook_install>
#endif
}
    2a94:	bd10      	pop	{r4, pc}
    2a96:	bf00      	nop
    2a98:	00002a59 	.word	0x00002a59

00002a9c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2a9c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2a9e:	4806      	ldr	r0, [pc, #24]	; (2ab8 <uart_console_init+0x1c>)
    2aa0:	4b06      	ldr	r3, [pc, #24]	; (2abc <uart_console_init+0x20>)
    2aa2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2aa4:	f008 fdfa 	bl	b69c <z_device_ready>
    2aa8:	b118      	cbz	r0, 2ab2 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    2aaa:	f7ff ffeb 	bl	2a84 <uart_console_hook_install>

	return 0;
    2aae:	2000      	movs	r0, #0
}
    2ab0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2ab2:	f06f 0012 	mvn.w	r0, #18
    2ab6:	e7fb      	b.n	2ab0 <uart_console_init+0x14>
    2ab8:	0000b960 	.word	0x0000b960
    2abc:	20000ad8 	.word	0x20000ad8

00002ac0 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2ac0:	4b1f      	ldr	r3, [pc, #124]	; (2b40 <get_drive+0x80>)
    2ac2:	4003      	ands	r3, r0
    2ac4:	4a1f      	ldr	r2, [pc, #124]	; (2b44 <get_drive+0x84>)
    2ac6:	4293      	cmp	r3, r2
    2ac8:	d032      	beq.n	2b30 <get_drive+0x70>
    2aca:	d816      	bhi.n	2afa <get_drive+0x3a>
    2acc:	2b06      	cmp	r3, #6
    2ace:	d02b      	beq.n	2b28 <get_drive+0x68>
    2ad0:	d906      	bls.n	2ae0 <get_drive+0x20>
    2ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2ad6:	d10d      	bne.n	2af4 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    2ad8:	2301      	movs	r3, #1
    2ada:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2adc:	2000      	movs	r0, #0
		break;
    2ade:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2ae0:	b1fb      	cbz	r3, 2b22 <get_drive+0x62>
    2ae2:	2b02      	cmp	r3, #2
    2ae4:	d103      	bne.n	2aee <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    2ae6:	2304      	movs	r3, #4
    2ae8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2aea:	2000      	movs	r0, #0
		break;
    2aec:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2aee:	f06f 0015 	mvn.w	r0, #21
    2af2:	4770      	bx	lr
    2af4:	f06f 0015 	mvn.w	r0, #21
    2af8:	4770      	bx	lr
    2afa:	4a13      	ldr	r2, [pc, #76]	; (2b48 <get_drive+0x88>)
    2afc:	4293      	cmp	r3, r2
    2afe:	d01b      	beq.n	2b38 <get_drive+0x78>
    2b00:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2b04:	d103      	bne.n	2b0e <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    2b06:	2303      	movs	r3, #3
    2b08:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2b0a:	2000      	movs	r0, #0
		break;
    2b0c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b12:	d103      	bne.n	2b1c <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    2b14:	2302      	movs	r3, #2
    2b16:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2b18:	2000      	movs	r0, #0
		break;
    2b1a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b1c:	f06f 0015 	mvn.w	r0, #21
    2b20:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    2b22:	2000      	movs	r0, #0
    2b24:	7008      	strb	r0, [r1, #0]
		break;
    2b26:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    2b28:	2306      	movs	r3, #6
    2b2a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2b2c:	2000      	movs	r0, #0
		break;
    2b2e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    2b30:	2307      	movs	r3, #7
    2b32:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2b34:	2000      	movs	r0, #0
		break;
    2b36:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    2b38:	2305      	movs	r3, #5
    2b3a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2b3c:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    2b3e:	4770      	bx	lr
    2b40:	00f00006 	.word	0x00f00006
    2b44:	00100006 	.word	0x00100006
    2b48:	00400002 	.word	0x00400002

00002b4c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b4c:	b128      	cbz	r0, 2b5a <get_dev+0xe>
    2b4e:	2801      	cmp	r0, #1
    2b50:	d101      	bne.n	2b56 <get_dev+0xa>
    2b52:	4803      	ldr	r0, [pc, #12]	; (2b60 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2b54:	4770      	bx	lr
	const struct device *dev = NULL;
    2b56:	2000      	movs	r0, #0
    2b58:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b5a:	4802      	ldr	r0, [pc, #8]	; (2b64 <get_dev+0x18>)
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop
    2b60:	0000b8e8 	.word	0x0000b8e8
    2b64:	0000b900 	.word	0x0000b900

00002b68 <gpio_nrfx_manage_callback>:
{
    2b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b6c:	4615      	mov	r5, r2
	return port->data;
    2b6e:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2b70:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2b72:	460c      	mov	r4, r1
    2b74:	b139      	cbz	r1, 2b86 <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
    2b76:	6863      	ldr	r3, [r4, #4]
    2b78:	b1ab      	cbz	r3, 2ba6 <gpio_nrfx_manage_callback+0x3e>
	return list->head;
    2b7a:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d03b      	beq.n	2bf8 <gpio_nrfx_manage_callback+0x90>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    2b80:	4621      	mov	r1, r4
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2b82:	2200      	movs	r2, #0
    2b84:	e02a      	b.n	2bdc <gpio_nrfx_manage_callback+0x74>
	__ASSERT(callback, "No callback!");
    2b86:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2c30 <gpio_nrfx_manage_callback+0xc8>
    2b8a:	2324      	movs	r3, #36	; 0x24
    2b8c:	4642      	mov	r2, r8
    2b8e:	4923      	ldr	r1, [pc, #140]	; (2c1c <gpio_nrfx_manage_callback+0xb4>)
    2b90:	4823      	ldr	r0, [pc, #140]	; (2c20 <gpio_nrfx_manage_callback+0xb8>)
    2b92:	f007 ff59 	bl	aa48 <printk>
    2b96:	4823      	ldr	r0, [pc, #140]	; (2c24 <gpio_nrfx_manage_callback+0xbc>)
    2b98:	f007 ff56 	bl	aa48 <printk>
    2b9c:	2124      	movs	r1, #36	; 0x24
    2b9e:	4640      	mov	r0, r8
    2ba0:	f008 f8ab 	bl	acfa <assert_post_action>
    2ba4:	e7e7      	b.n	2b76 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    2ba6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2c30 <gpio_nrfx_manage_callback+0xc8>
    2baa:	2325      	movs	r3, #37	; 0x25
    2bac:	4642      	mov	r2, r8
    2bae:	491e      	ldr	r1, [pc, #120]	; (2c28 <gpio_nrfx_manage_callback+0xc0>)
    2bb0:	481b      	ldr	r0, [pc, #108]	; (2c20 <gpio_nrfx_manage_callback+0xb8>)
    2bb2:	f007 ff49 	bl	aa48 <printk>
    2bb6:	481d      	ldr	r0, [pc, #116]	; (2c2c <gpio_nrfx_manage_callback+0xc4>)
    2bb8:	f007 ff46 	bl	aa48 <printk>
    2bbc:	2125      	movs	r1, #37	; 0x25
    2bbe:	4640      	mov	r0, r8
    2bc0:	f008 f89b 	bl	acfa <assert_post_action>
    2bc4:	e7d9      	b.n	2b7a <gpio_nrfx_manage_callback+0x12>
	return node->next;
    2bc6:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    2bc8:	6073      	str	r3, [r6, #4]
	return list->tail;
    2bca:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2bcc:	4294      	cmp	r4, r2
    2bce:	d10f      	bne.n	2bf0 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
    2bd0:	607b      	str	r3, [r7, #4]
}
    2bd2:	e00d      	b.n	2bf0 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
    2bd4:	607a      	str	r2, [r7, #4]
}
    2bd6:	e00b      	b.n	2bf0 <gpio_nrfx_manage_callback+0x88>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2bd8:	461a      	mov	r2, r3
    2bda:	681b      	ldr	r3, [r3, #0]
    2bdc:	b15b      	cbz	r3, 2bf6 <gpio_nrfx_manage_callback+0x8e>
    2bde:	4299      	cmp	r1, r3
    2be0:	d1fa      	bne.n	2bd8 <gpio_nrfx_manage_callback+0x70>
Z_GENLIST_REMOVE(slist, snode)
    2be2:	2a00      	cmp	r2, #0
    2be4:	d0ef      	beq.n	2bc6 <gpio_nrfx_manage_callback+0x5e>
	return node->next;
    2be6:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    2be8:	6013      	str	r3, [r2, #0]
	return list->tail;
    2bea:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2bec:	429c      	cmp	r4, r3
    2bee:	d0f1      	beq.n	2bd4 <gpio_nrfx_manage_callback+0x6c>
	parent->next = child;
    2bf0:	2300      	movs	r3, #0
    2bf2:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2bf4:	e000      	b.n	2bf8 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    2bf6:	b155      	cbz	r5, 2c0e <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    2bf8:	b165      	cbz	r5, 2c14 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    2bfa:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
    2bfc:	6023      	str	r3, [r4, #0]
	list->head = node;
    2bfe:	6074      	str	r4, [r6, #4]
	return list->tail;
    2c00:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    2c02:	b10b      	cbz	r3, 2c08 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2c04:	2000      	movs	r0, #0
    2c06:	e006      	b.n	2c16 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    2c08:	607c      	str	r4, [r7, #4]
    2c0a:	2000      	movs	r0, #0
}
    2c0c:	e003      	b.n	2c16 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    2c0e:	f06f 0015 	mvn.w	r0, #21
    2c12:	e000      	b.n	2c16 <gpio_nrfx_manage_callback+0xae>
	return 0;
    2c14:	2000      	movs	r0, #0
}
    2c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c1a:	bf00      	nop
    2c1c:	0000c430 	.word	0x0000c430
    2c20:	0000bc60 	.word	0x0000bc60
    2c24:	0000c43c 	.word	0x0000c43c
    2c28:	0000c44c 	.word	0x0000c44c
    2c2c:	0000c460 	.word	0x0000c460
    2c30:	0000c400 	.word	0x0000c400

00002c34 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2c38:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    2c3c:	0940      	lsrs	r0, r0, #5
    2c3e:	f7ff ff85 	bl	2b4c <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    2c42:	b380      	cbz	r0, 2ca6 <nrfx_gpio_handler+0x72>
    2c44:	4607      	mov	r7, r0
	return port->data;
    2c46:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    2c48:	2601      	movs	r6, #1
    2c4a:	40a6      	lsls	r6, r4
	return list->head;
    2c4c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c4e:	b11c      	cbz	r4, 2c58 <nrfx_gpio_handler+0x24>
    2c50:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    2c52:	b17c      	cbz	r4, 2c74 <nrfx_gpio_handler+0x40>
	return node->next;
    2c54:	6825      	ldr	r5, [r4, #0]
    2c56:	e00d      	b.n	2c74 <nrfx_gpio_handler+0x40>
    2c58:	4625      	mov	r5, r4
    2c5a:	e00b      	b.n	2c74 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2c5c:	6863      	ldr	r3, [r4, #4]
    2c5e:	68a2      	ldr	r2, [r4, #8]
    2c60:	4032      	ands	r2, r6
    2c62:	4621      	mov	r1, r4
    2c64:	4638      	mov	r0, r7
    2c66:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c68:	b1dd      	cbz	r5, 2ca2 <nrfx_gpio_handler+0x6e>
    2c6a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2c6c:	b105      	cbz	r5, 2c70 <nrfx_gpio_handler+0x3c>
	return node->next;
    2c6e:	682b      	ldr	r3, [r5, #0]
    2c70:	462c      	mov	r4, r5
    2c72:	461d      	mov	r5, r3
    2c74:	b1bc      	cbz	r4, 2ca6 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    2c76:	68a3      	ldr	r3, [r4, #8]
    2c78:	421e      	tst	r6, r3
    2c7a:	d0f5      	beq.n	2c68 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    2c7c:	6863      	ldr	r3, [r4, #4]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d1ec      	bne.n	2c5c <nrfx_gpio_handler+0x28>
    2c82:	f8df 8034 	ldr.w	r8, [pc, #52]	; 2cb8 <nrfx_gpio_handler+0x84>
    2c86:	2345      	movs	r3, #69	; 0x45
    2c88:	4642      	mov	r2, r8
    2c8a:	4908      	ldr	r1, [pc, #32]	; (2cac <nrfx_gpio_handler+0x78>)
    2c8c:	4808      	ldr	r0, [pc, #32]	; (2cb0 <nrfx_gpio_handler+0x7c>)
    2c8e:	f007 fedb 	bl	aa48 <printk>
    2c92:	4808      	ldr	r0, [pc, #32]	; (2cb4 <nrfx_gpio_handler+0x80>)
    2c94:	f007 fed8 	bl	aa48 <printk>
    2c98:	2145      	movs	r1, #69	; 0x45
    2c9a:	4640      	mov	r0, r8
    2c9c:	f008 f82d 	bl	acfa <assert_post_action>
    2ca0:	e7dc      	b.n	2c5c <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2ca2:	462b      	mov	r3, r5
    2ca4:	e7e4      	b.n	2c70 <nrfx_gpio_handler+0x3c>
}
    2ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2caa:	bf00      	nop
    2cac:	0000c478 	.word	0x0000c478
    2cb0:	0000bc60 	.word	0x0000bc60
    2cb4:	0000c460 	.word	0x0000c460
    2cb8:	0000c400 	.word	0x0000c400

00002cbc <gpio_nrfx_pin_interrupt_configure>:
{
    2cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cbe:	b085      	sub	sp, #20
    2cc0:	460e      	mov	r6, r1
    2cc2:	4619      	mov	r1, r3
	return port->config;
    2cc4:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2cc6:	7b1b      	ldrb	r3, [r3, #12]
    2cc8:	f006 041f 	and.w	r4, r6, #31
    2ccc:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2cd0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2cd4:	d022      	beq.n	2d1c <gpio_nrfx_pin_interrupt_configure+0x60>
    2cd6:	4607      	mov	r7, r0
    2cd8:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cda:	2300      	movs	r3, #0
    2cdc:	9302      	str	r3, [sp, #8]
    2cde:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    2ce0:	4610      	mov	r0, r2
    2ce2:	f008 fa61 	bl	b1a8 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2ce6:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    2cea:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2cec:	6899      	ldr	r1, [r3, #8]
    2cee:	40f1      	lsrs	r1, r6
    2cf0:	f011 0101 	ands.w	r1, r1, #1
    2cf4:	d102      	bne.n	2cfc <gpio_nrfx_pin_interrupt_configure+0x40>
    2cf6:	f5b5 3fa0 	cmp.w	r5, #81920	; 0x14000
    2cfa:	d014      	beq.n	2d26 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2cfc:	2300      	movs	r3, #0
    2cfe:	aa02      	add	r2, sp, #8
    2d00:	4619      	mov	r1, r3
    2d02:	4620      	mov	r0, r4
    2d04:	f002 f82c 	bl	4d60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d08:	4b32      	ldr	r3, [pc, #200]	; (2dd4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2d0a:	4298      	cmp	r0, r3
    2d0c:	d15f      	bne.n	2dce <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2d0e:	2101      	movs	r1, #1
    2d10:	4620      	mov	r0, r4
    2d12:	f002 fa87 	bl	5224 <nrfx_gpiote_trigger_enable>
	return 0;
    2d16:	2000      	movs	r0, #0
}
    2d18:	b005      	add	sp, #20
    2d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2d1c:	4620      	mov	r0, r4
    2d1e:	f002 fb8d 	bl	543c <nrfx_gpiote_trigger_disable>
		return 0;
    2d22:	2000      	movs	r0, #0
    2d24:	e7f8      	b.n	2d18 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    2d26:	0963      	lsrs	r3, r4, #5
    2d28:	d01f      	beq.n	2d6a <gpio_nrfx_pin_interrupt_configure+0xae>
    2d2a:	2b01      	cmp	r3, #1
    2d2c:	d101      	bne.n	2d32 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    2d2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    2d32:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2d36:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2d38:	f011 0f01 	tst.w	r1, #1
    2d3c:	d018      	beq.n	2d70 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    2d3e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d42:	0963      	lsrs	r3, r4, #5
    2d44:	d022      	beq.n	2d8c <gpio_nrfx_pin_interrupt_configure+0xd0>
    2d46:	2b01      	cmp	r3, #1
    2d48:	d023      	beq.n	2d92 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    2d4a:	4e23      	ldr	r6, [pc, #140]	; (2dd8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2d4c:	f240 232e 	movw	r3, #558	; 0x22e
    2d50:	4632      	mov	r2, r6
    2d52:	4922      	ldr	r1, [pc, #136]	; (2ddc <gpio_nrfx_pin_interrupt_configure+0x120>)
    2d54:	4822      	ldr	r0, [pc, #136]	; (2de0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2d56:	f007 fe77 	bl	aa48 <printk>
    2d5a:	f240 212e 	movw	r1, #558	; 0x22e
    2d5e:	4630      	mov	r0, r6
    2d60:	f007 ffcb 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    2d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2d68:	e014      	b.n	2d94 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    2d6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d6e:	e7e0      	b.n	2d32 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2d70:	4d19      	ldr	r5, [pc, #100]	; (2dd8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2d72:	f240 2329 	movw	r3, #553	; 0x229
    2d76:	462a      	mov	r2, r5
    2d78:	491a      	ldr	r1, [pc, #104]	; (2de4 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2d7a:	4819      	ldr	r0, [pc, #100]	; (2de0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2d7c:	f007 fe64 	bl	aa48 <printk>
    2d80:	f240 2129 	movw	r1, #553	; 0x229
    2d84:	4628      	mov	r0, r5
    2d86:	f007 ffb8 	bl	acfa <assert_post_action>
    2d8a:	e7d8      	b.n	2d3e <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    2d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2d90:	e000      	b.n	2d94 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d92:	4b15      	ldr	r3, [pc, #84]	; (2de8 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2d94:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2d98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2d9c:	f013 0f01 	tst.w	r3, #1
    2da0:	d1ac      	bne.n	2cfc <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2da2:	f10d 0107 	add.w	r1, sp, #7
    2da6:	4620      	mov	r0, r4
    2da8:	f002 f9cc 	bl	5144 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2dac:	4b0f      	ldr	r3, [pc, #60]	; (2dec <gpio_nrfx_pin_interrupt_configure+0x130>)
    2dae:	4298      	cmp	r0, r3
    2db0:	d003      	beq.n	2dba <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    2db2:	f10d 0307 	add.w	r3, sp, #7
    2db6:	9303      	str	r3, [sp, #12]
    2db8:	e7a0      	b.n	2cfc <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    2dba:	f10d 0007 	add.w	r0, sp, #7
    2dbe:	f002 fa29 	bl	5214 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2dc2:	4b04      	ldr	r3, [pc, #16]	; (2dd4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2dc4:	4298      	cmp	r0, r3
    2dc6:	d0f4      	beq.n	2db2 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    2dc8:	f06f 000b 	mvn.w	r0, #11
    2dcc:	e7a4      	b.n	2d18 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    2dce:	f06f 0004 	mvn.w	r0, #4
    2dd2:	e7a1      	b.n	2d18 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2dd4:	0bad0000 	.word	0x0bad0000
    2dd8:	0000c484 	.word	0x0000c484
    2ddc:	0000bc5c 	.word	0x0000bc5c
    2de0:	0000bc60 	.word	0x0000bc60
    2de4:	0000c4b8 	.word	0x0000c4b8
    2de8:	50000300 	.word	0x50000300
    2dec:	0bad0004 	.word	0x0bad0004

00002df0 <pin_uninit>:
{
    2df0:	b530      	push	{r4, r5, lr}
    2df2:	b083      	sub	sp, #12
    2df4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2df6:	f10d 0107 	add.w	r1, sp, #7
    2dfa:	f002 f9a3 	bl	5144 <nrfx_gpiote_channel_get>
    2dfe:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2e00:	4620      	mov	r0, r4
    2e02:	f002 fb83 	bl	550c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2e06:	4b0b      	ldr	r3, [pc, #44]	; (2e34 <pin_uninit+0x44>)
    2e08:	4298      	cmp	r0, r3
    2e0a:	d10f      	bne.n	2e2c <pin_uninit+0x3c>
	if (free_ch) {
    2e0c:	429d      	cmp	r5, r3
    2e0e:	d005      	beq.n	2e1c <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2e10:	4b08      	ldr	r3, [pc, #32]	; (2e34 <pin_uninit+0x44>)
    2e12:	4298      	cmp	r0, r3
    2e14:	d107      	bne.n	2e26 <pin_uninit+0x36>
    2e16:	2000      	movs	r0, #0
}
    2e18:	b003      	add	sp, #12
    2e1a:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    2e1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2e20:	f002 f9f0 	bl	5204 <nrfx_gpiote_channel_free>
    2e24:	e7f4      	b.n	2e10 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2e26:	f06f 0004 	mvn.w	r0, #4
    2e2a:	e7f5      	b.n	2e18 <pin_uninit+0x28>
		return -EIO;
    2e2c:	f06f 0004 	mvn.w	r0, #4
    2e30:	e7f2      	b.n	2e18 <pin_uninit+0x28>
    2e32:	bf00      	nop
    2e34:	0bad0000 	.word	0x0bad0000

00002e38 <gpio_nrfx_pin_configure>:
{
    2e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2e3c:	b087      	sub	sp, #28
	return port->config;
    2e3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2e42:	f898 300c 	ldrb.w	r3, [r8, #12]
    2e46:	f001 051f 	and.w	r5, r1, #31
    2e4a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2e4e:	2a00      	cmp	r2, #0
    2e50:	d044      	beq.n	2edc <gpio_nrfx_pin_configure+0xa4>
    2e52:	460c      	mov	r4, r1
    2e54:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2e56:	2600      	movs	r6, #0
    2e58:	9603      	str	r6, [sp, #12]
    2e5a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2e5c:	f10d 0117 	add.w	r1, sp, #23
    2e60:	4620      	mov	r0, r4
    2e62:	f002 f96f 	bl	5144 <nrfx_gpiote_channel_get>
    2e66:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e68:	4633      	mov	r3, r6
    2e6a:	aa03      	add	r2, sp, #12
    2e6c:	4631      	mov	r1, r6
    2e6e:	4628      	mov	r0, r5
    2e70:	f001 ff76 	bl	4d60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2e74:	4b30      	ldr	r3, [pc, #192]	; (2f38 <gpio_nrfx_pin_configure+0x100>)
    2e76:	4298      	cmp	r0, r3
    2e78:	d15b      	bne.n	2f32 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    2e7a:	4599      	cmp	r9, r3
    2e7c:	d036      	beq.n	2eec <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    2e7e:	f417 7f00 	tst.w	r7, #512	; 0x200
    2e82:	d043      	beq.n	2f0c <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    2e84:	f10d 0103 	add.w	r1, sp, #3
    2e88:	4638      	mov	r0, r7
    2e8a:	f7ff fe19 	bl	2ac0 <get_drive>
		if (rv != 0) {
    2e8e:	4606      	mov	r6, r0
    2e90:	bb40      	cbnz	r0, 2ee4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    2e92:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2e96:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2e9a:	f417 7f80 	tst.w	r7, #256	; 0x100
    2e9e:	bf0c      	ite	eq
    2ea0:	2301      	moveq	r3, #1
    2ea2:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2ea4:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2ea8:	4638      	mov	r0, r7
    2eaa:	f008 f94a 	bl	b142 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2eae:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2eb2:	f417 6f00 	tst.w	r7, #2048	; 0x800
    2eb6:	d01e      	beq.n	2ef6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2eb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2ebc:	2101      	movs	r1, #1
    2ebe:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    2ec2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2ec6:	2200      	movs	r2, #0
    2ec8:	a901      	add	r1, sp, #4
    2eca:	4628      	mov	r0, r5
    2ecc:	f002 f83a 	bl	4f44 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ed0:	4b19      	ldr	r3, [pc, #100]	; (2f38 <gpio_nrfx_pin_configure+0x100>)
    2ed2:	4298      	cmp	r0, r3
    2ed4:	d006      	beq.n	2ee4 <gpio_nrfx_pin_configure+0xac>
    2ed6:	f06f 0615 	mvn.w	r6, #21
    2eda:	e003      	b.n	2ee4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    2edc:	4628      	mov	r0, r5
    2ede:	f7ff ff87 	bl	2df0 <pin_uninit>
    2ee2:	4606      	mov	r6, r0
}
    2ee4:	4630      	mov	r0, r6
    2ee6:	b007      	add	sp, #28
    2ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    2eec:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2ef0:	f002 f988 	bl	5204 <nrfx_gpiote_channel_free>
    2ef4:	e7c3      	b.n	2e7e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2ef6:	f417 6f80 	tst.w	r7, #1024	; 0x400
    2efa:	d0e4      	beq.n	2ec6 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2efc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2f00:	2301      	movs	r3, #1
    2f02:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    2f06:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    2f0a:	e7dc      	b.n	2ec6 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    2f0c:	4638      	mov	r0, r7
    2f0e:	f008 f918 	bl	b142 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2f12:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f16:	2300      	movs	r3, #0
    2f18:	461a      	mov	r2, r3
    2f1a:	a902      	add	r1, sp, #8
    2f1c:	4628      	mov	r0, r5
    2f1e:	f001 ff1f 	bl	4d60 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2f22:	4b05      	ldr	r3, [pc, #20]	; (2f38 <gpio_nrfx_pin_configure+0x100>)
    2f24:	4298      	cmp	r0, r3
    2f26:	d101      	bne.n	2f2c <gpio_nrfx_pin_configure+0xf4>
    2f28:	2600      	movs	r6, #0
    2f2a:	e7db      	b.n	2ee4 <gpio_nrfx_pin_configure+0xac>
    2f2c:	f06f 0615 	mvn.w	r6, #21
    2f30:	e7d8      	b.n	2ee4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    2f32:	f06f 0615 	mvn.w	r6, #21
    2f36:	e7d5      	b.n	2ee4 <gpio_nrfx_pin_configure+0xac>
    2f38:	0bad0000 	.word	0x0bad0000

00002f3c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2f3c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2f3e:	f002 f957 	bl	51f0 <nrfx_gpiote_is_init>
    2f42:	b108      	cbz	r0, 2f48 <gpio_nrfx_init+0xc>
		return 0;
    2f44:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2f46:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2f48:	f002 f928 	bl	519c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2f4c:	4b08      	ldr	r3, [pc, #32]	; (2f70 <gpio_nrfx_init+0x34>)
    2f4e:	4298      	cmp	r0, r3
    2f50:	d10a      	bne.n	2f68 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2f52:	2100      	movs	r1, #0
    2f54:	4807      	ldr	r0, [pc, #28]	; (2f74 <gpio_nrfx_init+0x38>)
    2f56:	f002 f8ef 	bl	5138 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2f5a:	2200      	movs	r2, #0
    2f5c:	2105      	movs	r1, #5
    2f5e:	2006      	movs	r0, #6
    2f60:	f7fe fe30 	bl	1bc4 <z_arm_irq_priority_set>
	return 0;
    2f64:	2000      	movs	r0, #0
    2f66:	e7ee      	b.n	2f46 <gpio_nrfx_init+0xa>
		return -EIO;
    2f68:	f06f 0004 	mvn.w	r0, #4
    2f6c:	e7eb      	b.n	2f46 <gpio_nrfx_init+0xa>
    2f6e:	bf00      	nop
    2f70:	0bad0000 	.word	0x0bad0000
    2f74:	00002c35 	.word	0x00002c35

00002f78 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    2f78:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    2f7a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2f7c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2f80:	d06f      	beq.n	3062 <baudrate_set+0xea>
    2f82:	d83a      	bhi.n	2ffa <baudrate_set+0x82>
    2f84:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2f88:	d06e      	beq.n	3068 <baudrate_set+0xf0>
    2f8a:	d90a      	bls.n	2fa2 <baudrate_set+0x2a>
    2f8c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2f90:	d075      	beq.n	307e <baudrate_set+0x106>
    2f92:	d924      	bls.n	2fde <baudrate_set+0x66>
    2f94:	f647 2312 	movw	r3, #31250	; 0x7a12
    2f98:	4299      	cmp	r1, r3
    2f9a:	d12b      	bne.n	2ff4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2f9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2fa0:	e013      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    2fa2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2fa6:	d061      	beq.n	306c <baudrate_set+0xf4>
    2fa8:	d907      	bls.n	2fba <baudrate_set+0x42>
    2faa:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2fae:	d063      	beq.n	3078 <baudrate_set+0x100>
    2fb0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2fb4:	d110      	bne.n	2fd8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2fb6:	4b3c      	ldr	r3, [pc, #240]	; (30a8 <baudrate_set+0x130>)
    2fb8:	e007      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    2fba:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2fbe:	d058      	beq.n	3072 <baudrate_set+0xfa>
    2fc0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2fc4:	d105      	bne.n	2fd2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2fc6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2fca:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2fce:	2000      	movs	r0, #0
    2fd0:	4770      	bx	lr
	switch (baudrate) {
    2fd2:	f06f 0015 	mvn.w	r0, #21
    2fd6:	4770      	bx	lr
    2fd8:	f06f 0015 	mvn.w	r0, #21
    2fdc:	4770      	bx	lr
    2fde:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2fe2:	d04e      	beq.n	3082 <baudrate_set+0x10a>
    2fe4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2fe8:	d101      	bne.n	2fee <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2fea:	4b30      	ldr	r3, [pc, #192]	; (30ac <baudrate_set+0x134>)
    2fec:	e7ed      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    2fee:	f06f 0015 	mvn.w	r0, #21
    2ff2:	4770      	bx	lr
    2ff4:	f06f 0015 	mvn.w	r0, #21
    2ff8:	4770      	bx	lr
    2ffa:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2ffe:	d042      	beq.n	3086 <baudrate_set+0x10e>
    3000:	d909      	bls.n	3016 <baudrate_set+0x9e>
    3002:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    3006:	d046      	beq.n	3096 <baudrate_set+0x11e>
    3008:	d91f      	bls.n	304a <baudrate_set+0xd2>
    300a:	4b29      	ldr	r3, [pc, #164]	; (30b0 <baudrate_set+0x138>)
    300c:	4299      	cmp	r1, r3
    300e:	d148      	bne.n	30a2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3014:	e7d9      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    3016:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    301a:	d037      	beq.n	308c <baudrate_set+0x114>
    301c:	d905      	bls.n	302a <baudrate_set+0xb2>
    301e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    3022:	d10f      	bne.n	3044 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3024:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3028:	e7cf      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    302a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    302e:	4299      	cmp	r1, r3
    3030:	d02e      	beq.n	3090 <baudrate_set+0x118>
    3032:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    3036:	d102      	bne.n	303e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3038:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    303c:	e7c5      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    303e:	f06f 0015 	mvn.w	r0, #21
    3042:	4770      	bx	lr
    3044:	f06f 0015 	mvn.w	r0, #21
    3048:	4770      	bx	lr
    304a:	4b1a      	ldr	r3, [pc, #104]	; (30b4 <baudrate_set+0x13c>)
    304c:	4299      	cmp	r1, r3
    304e:	d025      	beq.n	309c <baudrate_set+0x124>
    3050:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    3054:	d102      	bne.n	305c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3056:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    305a:	e7b6      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    305c:	f06f 0015 	mvn.w	r0, #21
    3060:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3062:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3066:	e7b0      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3068:	4b13      	ldr	r3, [pc, #76]	; (30b8 <baudrate_set+0x140>)
    306a:	e7ae      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    306c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3070:	e7ab      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    3072:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3076:	e7a8      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3078:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    307c:	e7a5      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    307e:	4b0f      	ldr	r3, [pc, #60]	; (30bc <baudrate_set+0x144>)
    3080:	e7a3      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3082:	4b0f      	ldr	r3, [pc, #60]	; (30c0 <baudrate_set+0x148>)
    3084:	e7a1      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3086:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    308a:	e79e      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    308c:	4b0d      	ldr	r3, [pc, #52]	; (30c4 <baudrate_set+0x14c>)
    308e:	e79c      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3090:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3094:	e799      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3096:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    309a:	e796      	b.n	2fca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    309c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    30a0:	e793      	b.n	2fca <baudrate_set+0x52>
	switch (baudrate) {
    30a2:	f06f 0015 	mvn.w	r0, #21
}
    30a6:	4770      	bx	lr
    30a8:	0013b000 	.word	0x0013b000
    30ac:	004ea000 	.word	0x004ea000
    30b0:	000f4240 	.word	0x000f4240
    30b4:	0003d090 	.word	0x0003d090
    30b8:	00275000 	.word	0x00275000
    30bc:	0075c000 	.word	0x0075c000
    30c0:	003af000 	.word	0x003af000
    30c4:	013a9000 	.word	0x013a9000

000030c8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    30c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30cc:	4605      	mov	r5, r0
    30ce:	460f      	mov	r7, r1
	return dev->data;
    30d0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    30d4:	f008 fb27 	bl	b726 <k_is_in_isr>
    30d8:	b920      	cbnz	r0, 30e4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    30da:	4b16      	ldr	r3, [pc, #88]	; (3134 <uarte_nrfx_poll_out+0x6c>)
    30dc:	781b      	ldrb	r3, [r3, #0]
    30de:	b1ab      	cbz	r3, 310c <uarte_nrfx_poll_out+0x44>
    30e0:	2300      	movs	r3, #0
    30e2:	e000      	b.n	30e6 <uarte_nrfx_poll_out+0x1e>
    30e4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    30e6:	b19b      	cbz	r3, 3110 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    30e8:	f04f 0320 	mov.w	r3, #32
    30ec:	f3ef 8411 	mrs	r4, BASEPRI
    30f0:	f383 8812 	msr	BASEPRI_MAX, r3
    30f4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    30f8:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    30fa:	4628      	mov	r0, r5
    30fc:	f008 f910 	bl	b320 <is_tx_ready>
    3100:	b950      	cbnz	r0, 3118 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    3102:	f384 8811 	msr	BASEPRI, r4
    3106:	f3bf 8f6f 	isb	sy
}
    310a:	e7ed      	b.n	30e8 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    310c:	2301      	movs	r3, #1
    310e:	e7ea      	b.n	30e6 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    3110:	4628      	mov	r0, r5
    3112:	f008 f954 	bl	b3be <wait_tx_ready>
    3116:	4606      	mov	r6, r0
	}

	data->char_out = c;
    3118:	4641      	mov	r1, r8
    311a:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    311e:	2201      	movs	r2, #1
    3120:	4628      	mov	r0, r5
    3122:	f008 f917 	bl	b354 <tx_start>
	__asm__ volatile(
    3126:	f386 8811 	msr	BASEPRI, r6
    312a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    312e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3132:	bf00      	nop
    3134:	20001a2d 	.word	0x20001a2d

00003138 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    3138:	b538      	push	{r3, r4, r5, lr}
    313a:	4604      	mov	r4, r0
    313c:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    313e:	f101 0012 	add.w	r0, r1, #18
    3142:	f002 fa6f 	bl	5624 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3146:	4b0c      	ldr	r3, [pc, #48]	; (3178 <endtx_stoptx_ppi_init+0x40>)
    3148:	4298      	cmp	r0, r3
    314a:	d111      	bne.n	3170 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    314c:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    314e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    3152:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3154:	4a09      	ldr	r2, [pc, #36]	; (317c <endtx_stoptx_ppi_init+0x44>)
    3156:	33a2      	adds	r3, #162	; 0xa2
    3158:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    315c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3160:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3162:	7ca9      	ldrb	r1, [r5, #18]
    3164:	2301      	movs	r3, #1
    3166:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    3168:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    316c:	2000      	movs	r0, #0
}
    316e:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    3170:	f06f 0004 	mvn.w	r0, #4
    3174:	e7fb      	b.n	316e <endtx_stoptx_ppi_init+0x36>
    3176:	bf00      	nop
    3178:	0bad0000 	.word	0x0bad0000
    317c:	4001f000 	.word	0x4001f000

00003180 <uarte_nrfx_pins_configure>:
{
    3180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    3182:	6844      	ldr	r4, [r0, #4]
	if (!sleep) {
    3184:	2900      	cmp	r1, #0
    3186:	f040 81ba 	bne.w	34fe <uarte_nrfx_pins_configure+0x37e>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    318a:	68e5      	ldr	r5, [r4, #12]
    318c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3190:	d130      	bne.n	31f4 <uarte_nrfx_pins_configure+0x74>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3192:	6925      	ldr	r5, [r4, #16]
    3194:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3198:	f000 80c7 	beq.w	332a <uarte_nrfx_pins_configure+0x1aa>
					   (cfg->rx_pull_up ?
    319c:	7f23      	ldrb	r3, [r4, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    319e:	2b00      	cmp	r3, #0
    31a0:	f000 80a5 	beq.w	32ee <uarte_nrfx_pins_configure+0x16e>
    31a4:	2603      	movs	r6, #3
    switch (port)
    31a6:	096b      	lsrs	r3, r5, #5
    31a8:	f000 80a3 	beq.w	32f2 <uarte_nrfx_pins_configure+0x172>
    31ac:	2b01      	cmp	r3, #1
    31ae:	f040 80a3 	bne.w	32f8 <uarte_nrfx_pins_configure+0x178>
            mask = P1_FEATURE_PINS_PRESENT;
    31b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    31b6:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    31ba:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    31bc:	f013 0f01 	tst.w	r3, #1
    31c0:	f000 809c 	beq.w	32fc <uarte_nrfx_pins_configure+0x17c>
    *p_pin = pin_number & 0x1F;
    31c4:	f005 071f 	and.w	r7, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31c8:	096d      	lsrs	r5, r5, #5
    31ca:	f000 80a5 	beq.w	3318 <uarte_nrfx_pins_configure+0x198>
    31ce:	2d01      	cmp	r5, #1
    31d0:	f000 80a5 	beq.w	331e <uarte_nrfx_pins_configure+0x19e>
            NRFX_ASSERT(0);
    31d4:	4dba      	ldr	r5, [pc, #744]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    31d6:	f240 232e 	movw	r3, #558	; 0x22e
    31da:	462a      	mov	r2, r5
    31dc:	49b9      	ldr	r1, [pc, #740]	; (34c4 <uarte_nrfx_pins_configure+0x344>)
    31de:	48ba      	ldr	r0, [pc, #744]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    31e0:	f007 fc32 	bl	aa48 <printk>
    31e4:	f240 212e 	movw	r1, #558	; 0x22e
    31e8:	4628      	mov	r0, r5
    31ea:	f007 fd86 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    31ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    31f2:	e095      	b.n	3320 <uarte_nrfx_pins_configure+0x1a0>
    switch (port)
    31f4:	096b      	lsrs	r3, r5, #5
    31f6:	d01f      	beq.n	3238 <uarte_nrfx_pins_configure+0xb8>
    31f8:	2b01      	cmp	r3, #1
    31fa:	d120      	bne.n	323e <uarte_nrfx_pins_configure+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    31fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3200:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3204:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3206:	f013 0f01 	tst.w	r3, #1
    320a:	d01a      	beq.n	3242 <uarte_nrfx_pins_configure+0xc2>
    *p_pin = pin_number & 0x1F;
    320c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3210:	096d      	lsrs	r5, r5, #5
    3212:	d024      	beq.n	325e <uarte_nrfx_pins_configure+0xde>
    3214:	2d01      	cmp	r5, #1
    3216:	d025      	beq.n	3264 <uarte_nrfx_pins_configure+0xe4>
            NRFX_ASSERT(0);
    3218:	4da9      	ldr	r5, [pc, #676]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    321a:	f240 232e 	movw	r3, #558	; 0x22e
    321e:	462a      	mov	r2, r5
    3220:	49a8      	ldr	r1, [pc, #672]	; (34c4 <uarte_nrfx_pins_configure+0x344>)
    3222:	48a9      	ldr	r0, [pc, #676]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    3224:	f007 fc10 	bl	aa48 <printk>
    3228:	f240 212e 	movw	r1, #558	; 0x22e
    322c:	4628      	mov	r0, r5
    322e:	f007 fd64 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    3232:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3236:	e016      	b.n	3266 <uarte_nrfx_pins_configure+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    3238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    323c:	e7e0      	b.n	3200 <uarte_nrfx_pins_configure+0x80>
    switch (port)
    323e:	2300      	movs	r3, #0
    3240:	e7de      	b.n	3200 <uarte_nrfx_pins_configure+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3242:	4e9f      	ldr	r6, [pc, #636]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    3244:	f240 2329 	movw	r3, #553	; 0x229
    3248:	4632      	mov	r2, r6
    324a:	49a0      	ldr	r1, [pc, #640]	; (34cc <uarte_nrfx_pins_configure+0x34c>)
    324c:	489e      	ldr	r0, [pc, #632]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    324e:	f007 fbfb 	bl	aa48 <printk>
    3252:	f240 2129 	movw	r1, #553	; 0x229
    3256:	4630      	mov	r0, r6
    3258:	f007 fd4f 	bl	acfa <assert_post_action>
    325c:	e7d6      	b.n	320c <uarte_nrfx_pins_configure+0x8c>
        case 0: return NRF_P0;
    325e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3262:	e000      	b.n	3266 <uarte_nrfx_pins_configure+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3264:	4a9a      	ldr	r2, [pc, #616]	; (34d0 <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3266:	2301      	movs	r3, #1
    3268:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    326a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->tx_pin);
    326e:	68e5      	ldr	r5, [r4, #12]
    switch (port)
    3270:	096b      	lsrs	r3, r5, #5
    3272:	d01f      	beq.n	32b4 <uarte_nrfx_pins_configure+0x134>
    3274:	2b01      	cmp	r3, #1
    3276:	d120      	bne.n	32ba <uarte_nrfx_pins_configure+0x13a>
            mask = P1_FEATURE_PINS_PRESENT;
    3278:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    327c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3280:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3282:	f013 0f01 	tst.w	r3, #1
    3286:	d01a      	beq.n	32be <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
    3288:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    328c:	096d      	lsrs	r5, r5, #5
    328e:	d024      	beq.n	32da <uarte_nrfx_pins_configure+0x15a>
    3290:	2d01      	cmp	r5, #1
    3292:	d025      	beq.n	32e0 <uarte_nrfx_pins_configure+0x160>
            NRFX_ASSERT(0);
    3294:	4d8a      	ldr	r5, [pc, #552]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    3296:	f240 232e 	movw	r3, #558	; 0x22e
    329a:	462a      	mov	r2, r5
    329c:	4989      	ldr	r1, [pc, #548]	; (34c4 <uarte_nrfx_pins_configure+0x344>)
    329e:	488a      	ldr	r0, [pc, #552]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    32a0:	f007 fbd2 	bl	aa48 <printk>
    32a4:	f240 212e 	movw	r1, #558	; 0x22e
    32a8:	4628      	mov	r0, r5
    32aa:	f007 fd26 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    32ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    32b2:	e016      	b.n	32e2 <uarte_nrfx_pins_configure+0x162>
            mask = P0_FEATURE_PINS_PRESENT;
    32b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32b8:	e7e0      	b.n	327c <uarte_nrfx_pins_configure+0xfc>
    switch (port)
    32ba:	2300      	movs	r3, #0
    32bc:	e7de      	b.n	327c <uarte_nrfx_pins_configure+0xfc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32be:	4e80      	ldr	r6, [pc, #512]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    32c0:	f240 2329 	movw	r3, #553	; 0x229
    32c4:	4632      	mov	r2, r6
    32c6:	4981      	ldr	r1, [pc, #516]	; (34cc <uarte_nrfx_pins_configure+0x34c>)
    32c8:	487f      	ldr	r0, [pc, #508]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    32ca:	f007 fbbd 	bl	aa48 <printk>
    32ce:	f240 2129 	movw	r1, #553	; 0x229
    32d2:	4630      	mov	r0, r6
    32d4:	f007 fd11 	bl	acfa <assert_post_action>
    32d8:	e7d6      	b.n	3288 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
    32da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    32de:	e000      	b.n	32e2 <uarte_nrfx_pins_configure+0x162>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32e0:	4b7b      	ldr	r3, [pc, #492]	; (34d0 <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
    32e2:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    32e6:	2203      	movs	r2, #3
    32e8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    32ec:	e751      	b.n	3192 <uarte_nrfx_pins_configure+0x12>
			nrf_gpio_cfg_input(cfg->rx_pin,
    32ee:	2600      	movs	r6, #0
    32f0:	e759      	b.n	31a6 <uarte_nrfx_pins_configure+0x26>
            mask = P0_FEATURE_PINS_PRESENT;
    32f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32f6:	e75e      	b.n	31b6 <uarte_nrfx_pins_configure+0x36>
    switch (port)
    32f8:	2300      	movs	r3, #0
    32fa:	e75c      	b.n	31b6 <uarte_nrfx_pins_configure+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32fc:	4f70      	ldr	r7, [pc, #448]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    32fe:	f240 2329 	movw	r3, #553	; 0x229
    3302:	463a      	mov	r2, r7
    3304:	4971      	ldr	r1, [pc, #452]	; (34cc <uarte_nrfx_pins_configure+0x34c>)
    3306:	4870      	ldr	r0, [pc, #448]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    3308:	f007 fb9e 	bl	aa48 <printk>
    330c:	f240 2129 	movw	r1, #553	; 0x229
    3310:	4638      	mov	r0, r7
    3312:	f007 fcf2 	bl	acfa <assert_post_action>
    3316:	e755      	b.n	31c4 <uarte_nrfx_pins_configure+0x44>
        case 0: return NRF_P0;
    3318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    331c:	e000      	b.n	3320 <uarte_nrfx_pins_configure+0x1a0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    331e:	4b6c      	ldr	r3, [pc, #432]	; (34d0 <uarte_nrfx_pins_configure+0x350>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3320:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
    3322:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    3326:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    332a:	6965      	ldr	r5, [r4, #20]
    332c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3330:	d130      	bne.n	3394 <uarte_nrfx_pins_configure+0x214>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3332:	69a5      	ldr	r5, [r4, #24]
    3334:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3338:	f000 80d2 	beq.w	34e0 <uarte_nrfx_pins_configure+0x360>
					   (cfg->cts_pull_up ?
    333c:	7f63      	ldrb	r3, [r4, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    333e:	2b00      	cmp	r3, #0
    3340:	f000 80a5 	beq.w	348e <uarte_nrfx_pins_configure+0x30e>
    3344:	2703      	movs	r7, #3
    switch (port)
    3346:	096b      	lsrs	r3, r5, #5
    3348:	f000 80a3 	beq.w	3492 <uarte_nrfx_pins_configure+0x312>
    334c:	2b01      	cmp	r3, #1
    334e:	f040 80a3 	bne.w	3498 <uarte_nrfx_pins_configure+0x318>
            mask = P1_FEATURE_PINS_PRESENT;
    3352:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3356:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    335a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    335c:	f013 0f01 	tst.w	r3, #1
    3360:	f000 809c 	beq.w	349c <uarte_nrfx_pins_configure+0x31c>
    *p_pin = pin_number & 0x1F;
    3364:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3368:	096d      	lsrs	r5, r5, #5
    336a:	f000 80a5 	beq.w	34b8 <uarte_nrfx_pins_configure+0x338>
    336e:	2d01      	cmp	r5, #1
    3370:	f000 80b0 	beq.w	34d4 <uarte_nrfx_pins_configure+0x354>
            NRFX_ASSERT(0);
    3374:	4d52      	ldr	r5, [pc, #328]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    3376:	f240 232e 	movw	r3, #558	; 0x22e
    337a:	462a      	mov	r2, r5
    337c:	4951      	ldr	r1, [pc, #324]	; (34c4 <uarte_nrfx_pins_configure+0x344>)
    337e:	4852      	ldr	r0, [pc, #328]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    3380:	f007 fb62 	bl	aa48 <printk>
    3384:	f240 212e 	movw	r1, #558	; 0x22e
    3388:	4628      	mov	r0, r5
    338a:	f007 fcb6 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    338e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3392:	e0a0      	b.n	34d6 <uarte_nrfx_pins_configure+0x356>
    switch (port)
    3394:	096b      	lsrs	r3, r5, #5
    3396:	d01f      	beq.n	33d8 <uarte_nrfx_pins_configure+0x258>
    3398:	2b01      	cmp	r3, #1
    339a:	d120      	bne.n	33de <uarte_nrfx_pins_configure+0x25e>
            mask = P1_FEATURE_PINS_PRESENT;
    339c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    33a0:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    33a4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33a6:	f013 0f01 	tst.w	r3, #1
    33aa:	d01a      	beq.n	33e2 <uarte_nrfx_pins_configure+0x262>
    *p_pin = pin_number & 0x1F;
    33ac:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33b0:	096d      	lsrs	r5, r5, #5
    33b2:	d024      	beq.n	33fe <uarte_nrfx_pins_configure+0x27e>
    33b4:	2d01      	cmp	r5, #1
    33b6:	d025      	beq.n	3404 <uarte_nrfx_pins_configure+0x284>
            NRFX_ASSERT(0);
    33b8:	4d41      	ldr	r5, [pc, #260]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    33ba:	f240 232e 	movw	r3, #558	; 0x22e
    33be:	462a      	mov	r2, r5
    33c0:	4940      	ldr	r1, [pc, #256]	; (34c4 <uarte_nrfx_pins_configure+0x344>)
    33c2:	4841      	ldr	r0, [pc, #260]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    33c4:	f007 fb40 	bl	aa48 <printk>
    33c8:	f240 212e 	movw	r1, #558	; 0x22e
    33cc:	4628      	mov	r0, r5
    33ce:	f007 fc94 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    33d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    33d6:	e016      	b.n	3406 <uarte_nrfx_pins_configure+0x286>
            mask = P0_FEATURE_PINS_PRESENT;
    33d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33dc:	e7e0      	b.n	33a0 <uarte_nrfx_pins_configure+0x220>
    switch (port)
    33de:	2300      	movs	r3, #0
    33e0:	e7de      	b.n	33a0 <uarte_nrfx_pins_configure+0x220>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33e2:	4e37      	ldr	r6, [pc, #220]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    33e4:	f240 2329 	movw	r3, #553	; 0x229
    33e8:	4632      	mov	r2, r6
    33ea:	4938      	ldr	r1, [pc, #224]	; (34cc <uarte_nrfx_pins_configure+0x34c>)
    33ec:	4836      	ldr	r0, [pc, #216]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    33ee:	f007 fb2b 	bl	aa48 <printk>
    33f2:	f240 2129 	movw	r1, #553	; 0x229
    33f6:	4630      	mov	r0, r6
    33f8:	f007 fc7f 	bl	acfa <assert_post_action>
    33fc:	e7d6      	b.n	33ac <uarte_nrfx_pins_configure+0x22c>
        case 0: return NRF_P0;
    33fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3402:	e000      	b.n	3406 <uarte_nrfx_pins_configure+0x286>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3404:	4a32      	ldr	r2, [pc, #200]	; (34d0 <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3406:	2301      	movs	r3, #1
    3408:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    340a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->rts_pin);
    340e:	6965      	ldr	r5, [r4, #20]
    switch (port)
    3410:	096b      	lsrs	r3, r5, #5
    3412:	d01f      	beq.n	3454 <uarte_nrfx_pins_configure+0x2d4>
    3414:	2b01      	cmp	r3, #1
    3416:	d120      	bne.n	345a <uarte_nrfx_pins_configure+0x2da>
            mask = P1_FEATURE_PINS_PRESENT;
    3418:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    341c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3420:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3422:	f013 0f01 	tst.w	r3, #1
    3426:	d01a      	beq.n	345e <uarte_nrfx_pins_configure+0x2de>
    *p_pin = pin_number & 0x1F;
    3428:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    342c:	096d      	lsrs	r5, r5, #5
    342e:	d024      	beq.n	347a <uarte_nrfx_pins_configure+0x2fa>
    3430:	2d01      	cmp	r5, #1
    3432:	d025      	beq.n	3480 <uarte_nrfx_pins_configure+0x300>
            NRFX_ASSERT(0);
    3434:	4d22      	ldr	r5, [pc, #136]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    3436:	f240 232e 	movw	r3, #558	; 0x22e
    343a:	462a      	mov	r2, r5
    343c:	4921      	ldr	r1, [pc, #132]	; (34c4 <uarte_nrfx_pins_configure+0x344>)
    343e:	4822      	ldr	r0, [pc, #136]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    3440:	f007 fb02 	bl	aa48 <printk>
    3444:	f240 212e 	movw	r1, #558	; 0x22e
    3448:	4628      	mov	r0, r5
    344a:	f007 fc56 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    344e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3452:	e016      	b.n	3482 <uarte_nrfx_pins_configure+0x302>
            mask = P0_FEATURE_PINS_PRESENT;
    3454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3458:	e7e0      	b.n	341c <uarte_nrfx_pins_configure+0x29c>
    switch (port)
    345a:	2300      	movs	r3, #0
    345c:	e7de      	b.n	341c <uarte_nrfx_pins_configure+0x29c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    345e:	4e18      	ldr	r6, [pc, #96]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    3460:	f240 2329 	movw	r3, #553	; 0x229
    3464:	4632      	mov	r2, r6
    3466:	4919      	ldr	r1, [pc, #100]	; (34cc <uarte_nrfx_pins_configure+0x34c>)
    3468:	4817      	ldr	r0, [pc, #92]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    346a:	f007 faed 	bl	aa48 <printk>
    346e:	f240 2129 	movw	r1, #553	; 0x229
    3472:	4630      	mov	r0, r6
    3474:	f007 fc41 	bl	acfa <assert_post_action>
    3478:	e7d6      	b.n	3428 <uarte_nrfx_pins_configure+0x2a8>
        case 0: return NRF_P0;
    347a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    347e:	e000      	b.n	3482 <uarte_nrfx_pins_configure+0x302>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3480:	4b13      	ldr	r3, [pc, #76]	; (34d0 <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
    3482:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3486:	2203      	movs	r2, #3
    3488:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    348c:	e751      	b.n	3332 <uarte_nrfx_pins_configure+0x1b2>
			nrf_gpio_cfg_input(cfg->cts_pin,
    348e:	2700      	movs	r7, #0
    3490:	e759      	b.n	3346 <uarte_nrfx_pins_configure+0x1c6>
            mask = P0_FEATURE_PINS_PRESENT;
    3492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3496:	e75e      	b.n	3356 <uarte_nrfx_pins_configure+0x1d6>
    switch (port)
    3498:	2300      	movs	r3, #0
    349a:	e75c      	b.n	3356 <uarte_nrfx_pins_configure+0x1d6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    349c:	4e08      	ldr	r6, [pc, #32]	; (34c0 <uarte_nrfx_pins_configure+0x340>)
    349e:	f240 2329 	movw	r3, #553	; 0x229
    34a2:	4632      	mov	r2, r6
    34a4:	4909      	ldr	r1, [pc, #36]	; (34cc <uarte_nrfx_pins_configure+0x34c>)
    34a6:	4808      	ldr	r0, [pc, #32]	; (34c8 <uarte_nrfx_pins_configure+0x348>)
    34a8:	f007 face 	bl	aa48 <printk>
    34ac:	f240 2129 	movw	r1, #553	; 0x229
    34b0:	4630      	mov	r0, r6
    34b2:	f007 fc22 	bl	acfa <assert_post_action>
    34b6:	e755      	b.n	3364 <uarte_nrfx_pins_configure+0x1e4>
        case 0: return NRF_P0;
    34b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    34bc:	e00b      	b.n	34d6 <uarte_nrfx_pins_configure+0x356>
    34be:	bf00      	nop
    34c0:	0000c484 	.word	0x0000c484
    34c4:	0000bc5c 	.word	0x0000bc5c
    34c8:	0000bc60 	.word	0x0000bc60
    34cc:	0000c4b8 	.word	0x0000c4b8
    34d0:	50000300 	.word	0x50000300
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34d4:	4a93      	ldr	r2, [pc, #588]	; (3724 <uarte_nrfx_pins_configure+0x5a4>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    34d6:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
    34d8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    34dc:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    34e0:	6823      	ldr	r3, [r4, #0]
    34e2:	68e1      	ldr	r1, [r4, #12]
    34e4:	6922      	ldr	r2, [r4, #16]
    p_reg->PSEL.TXD = pseltxd;
    34e6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    34ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    34ee:	6823      	ldr	r3, [r4, #0]
    34f0:	6961      	ldr	r1, [r4, #20]
    34f2:	69a2      	ldr	r2, [r4, #24]
    p_reg->PSEL.RTS = pselrts;
    34f4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    34f8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    34fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    34fe:	68e5      	ldr	r5, [r4, #12]
    3500:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3504:	d133      	bne.n	356e <uarte_nrfx_pins_configure+0x3ee>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3506:	6925      	ldr	r5, [r4, #16]
    3508:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    350c:	d16e      	bne.n	35ec <uarte_nrfx_pins_configure+0x46c>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    350e:	6965      	ldr	r5, [r4, #20]
    3510:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3514:	f040 80a9 	bne.w	366a <uarte_nrfx_pins_configure+0x4ea>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3518:	69a5      	ldr	r5, [r4, #24]
    351a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    351e:	d0df      	beq.n	34e0 <uarte_nrfx_pins_configure+0x360>
    switch (port)
    3520:	096b      	lsrs	r3, r5, #5
    3522:	f000 80e1 	beq.w	36e8 <uarte_nrfx_pins_configure+0x568>
    3526:	2b01      	cmp	r3, #1
    3528:	f040 80e1 	bne.w	36ee <uarte_nrfx_pins_configure+0x56e>
            mask = P1_FEATURE_PINS_PRESENT;
    352c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3530:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3534:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3536:	f013 0f01 	tst.w	r3, #1
    353a:	f000 80da 	beq.w	36f2 <uarte_nrfx_pins_configure+0x572>
    *p_pin = pin_number & 0x1F;
    353e:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3542:	096d      	lsrs	r5, r5, #5
    3544:	f000 80e3 	beq.w	370e <uarte_nrfx_pins_configure+0x58e>
    3548:	2d01      	cmp	r5, #1
    354a:	f000 80e3 	beq.w	3714 <uarte_nrfx_pins_configure+0x594>
            NRFX_ASSERT(0);
    354e:	4d76      	ldr	r5, [pc, #472]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    3550:	f240 232e 	movw	r3, #558	; 0x22e
    3554:	462a      	mov	r2, r5
    3556:	4975      	ldr	r1, [pc, #468]	; (372c <uarte_nrfx_pins_configure+0x5ac>)
    3558:	4875      	ldr	r0, [pc, #468]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    355a:	f007 fa75 	bl	aa48 <printk>
    355e:	f240 212e 	movw	r1, #558	; 0x22e
    3562:	4628      	mov	r0, r5
    3564:	f007 fbc9 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    3568:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    356c:	e0d3      	b.n	3716 <uarte_nrfx_pins_configure+0x596>
    switch (port)
    356e:	096b      	lsrs	r3, r5, #5
    3570:	d01f      	beq.n	35b2 <uarte_nrfx_pins_configure+0x432>
    3572:	2b01      	cmp	r3, #1
    3574:	d120      	bne.n	35b8 <uarte_nrfx_pins_configure+0x438>
            mask = P1_FEATURE_PINS_PRESENT;
    3576:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    357a:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    357e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3580:	f013 0f01 	tst.w	r3, #1
    3584:	d01a      	beq.n	35bc <uarte_nrfx_pins_configure+0x43c>
    *p_pin = pin_number & 0x1F;
    3586:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    358a:	096d      	lsrs	r5, r5, #5
    358c:	d024      	beq.n	35d8 <uarte_nrfx_pins_configure+0x458>
    358e:	2d01      	cmp	r5, #1
    3590:	d025      	beq.n	35de <uarte_nrfx_pins_configure+0x45e>
            NRFX_ASSERT(0);
    3592:	4d65      	ldr	r5, [pc, #404]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    3594:	f240 232e 	movw	r3, #558	; 0x22e
    3598:	462a      	mov	r2, r5
    359a:	4964      	ldr	r1, [pc, #400]	; (372c <uarte_nrfx_pins_configure+0x5ac>)
    359c:	4864      	ldr	r0, [pc, #400]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    359e:	f007 fa53 	bl	aa48 <printk>
    35a2:	f240 212e 	movw	r1, #558	; 0x22e
    35a6:	4628      	mov	r0, r5
    35a8:	f007 fba7 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    35ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    35b0:	e016      	b.n	35e0 <uarte_nrfx_pins_configure+0x460>
            mask = P0_FEATURE_PINS_PRESENT;
    35b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    35b6:	e7e0      	b.n	357a <uarte_nrfx_pins_configure+0x3fa>
    switch (port)
    35b8:	2300      	movs	r3, #0
    35ba:	e7de      	b.n	357a <uarte_nrfx_pins_configure+0x3fa>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    35bc:	4e5a      	ldr	r6, [pc, #360]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    35be:	f240 2329 	movw	r3, #553	; 0x229
    35c2:	4632      	mov	r2, r6
    35c4:	495b      	ldr	r1, [pc, #364]	; (3734 <uarte_nrfx_pins_configure+0x5b4>)
    35c6:	485a      	ldr	r0, [pc, #360]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    35c8:	f007 fa3e 	bl	aa48 <printk>
    35cc:	f240 2129 	movw	r1, #553	; 0x229
    35d0:	4630      	mov	r0, r6
    35d2:	f007 fb92 	bl	acfa <assert_post_action>
    35d6:	e7d6      	b.n	3586 <uarte_nrfx_pins_configure+0x406>
        case 0: return NRF_P0;
    35d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    35dc:	e000      	b.n	35e0 <uarte_nrfx_pins_configure+0x460>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35de:	4b51      	ldr	r3, [pc, #324]	; (3724 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    35e0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    35e4:	2202      	movs	r2, #2
    35e6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    35ea:	e78c      	b.n	3506 <uarte_nrfx_pins_configure+0x386>
    switch (port)
    35ec:	096b      	lsrs	r3, r5, #5
    35ee:	d01f      	beq.n	3630 <uarte_nrfx_pins_configure+0x4b0>
    35f0:	2b01      	cmp	r3, #1
    35f2:	d120      	bne.n	3636 <uarte_nrfx_pins_configure+0x4b6>
            mask = P1_FEATURE_PINS_PRESENT;
    35f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    35f8:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    35fc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    35fe:	f013 0f01 	tst.w	r3, #1
    3602:	d01a      	beq.n	363a <uarte_nrfx_pins_configure+0x4ba>
    *p_pin = pin_number & 0x1F;
    3604:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3608:	096d      	lsrs	r5, r5, #5
    360a:	d024      	beq.n	3656 <uarte_nrfx_pins_configure+0x4d6>
    360c:	2d01      	cmp	r5, #1
    360e:	d025      	beq.n	365c <uarte_nrfx_pins_configure+0x4dc>
            NRFX_ASSERT(0);
    3610:	4d45      	ldr	r5, [pc, #276]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    3612:	f240 232e 	movw	r3, #558	; 0x22e
    3616:	462a      	mov	r2, r5
    3618:	4944      	ldr	r1, [pc, #272]	; (372c <uarte_nrfx_pins_configure+0x5ac>)
    361a:	4845      	ldr	r0, [pc, #276]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    361c:	f007 fa14 	bl	aa48 <printk>
    3620:	f240 212e 	movw	r1, #558	; 0x22e
    3624:	4628      	mov	r0, r5
    3626:	f007 fb68 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    362a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    362e:	e016      	b.n	365e <uarte_nrfx_pins_configure+0x4de>
            mask = P0_FEATURE_PINS_PRESENT;
    3630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3634:	e7e0      	b.n	35f8 <uarte_nrfx_pins_configure+0x478>
    switch (port)
    3636:	2300      	movs	r3, #0
    3638:	e7de      	b.n	35f8 <uarte_nrfx_pins_configure+0x478>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    363a:	4e3b      	ldr	r6, [pc, #236]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    363c:	f240 2329 	movw	r3, #553	; 0x229
    3640:	4632      	mov	r2, r6
    3642:	493c      	ldr	r1, [pc, #240]	; (3734 <uarte_nrfx_pins_configure+0x5b4>)
    3644:	483a      	ldr	r0, [pc, #232]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    3646:	f007 f9ff 	bl	aa48 <printk>
    364a:	f240 2129 	movw	r1, #553	; 0x229
    364e:	4630      	mov	r0, r6
    3650:	f007 fb53 	bl	acfa <assert_post_action>
    3654:	e7d6      	b.n	3604 <uarte_nrfx_pins_configure+0x484>
        case 0: return NRF_P0;
    3656:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    365a:	e000      	b.n	365e <uarte_nrfx_pins_configure+0x4de>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    365c:	4b31      	ldr	r3, [pc, #196]	; (3724 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    365e:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3662:	2202      	movs	r2, #2
    3664:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    3668:	e751      	b.n	350e <uarte_nrfx_pins_configure+0x38e>
    switch (port)
    366a:	096b      	lsrs	r3, r5, #5
    366c:	d01f      	beq.n	36ae <uarte_nrfx_pins_configure+0x52e>
    366e:	2b01      	cmp	r3, #1
    3670:	d120      	bne.n	36b4 <uarte_nrfx_pins_configure+0x534>
            mask = P1_FEATURE_PINS_PRESENT;
    3672:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3676:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    367a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    367c:	f013 0f01 	tst.w	r3, #1
    3680:	d01a      	beq.n	36b8 <uarte_nrfx_pins_configure+0x538>
    *p_pin = pin_number & 0x1F;
    3682:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3686:	096d      	lsrs	r5, r5, #5
    3688:	d024      	beq.n	36d4 <uarte_nrfx_pins_configure+0x554>
    368a:	2d01      	cmp	r5, #1
    368c:	d025      	beq.n	36da <uarte_nrfx_pins_configure+0x55a>
            NRFX_ASSERT(0);
    368e:	4d26      	ldr	r5, [pc, #152]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    3690:	f240 232e 	movw	r3, #558	; 0x22e
    3694:	462a      	mov	r2, r5
    3696:	4925      	ldr	r1, [pc, #148]	; (372c <uarte_nrfx_pins_configure+0x5ac>)
    3698:	4825      	ldr	r0, [pc, #148]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    369a:	f007 f9d5 	bl	aa48 <printk>
    369e:	f240 212e 	movw	r1, #558	; 0x22e
    36a2:	4628      	mov	r0, r5
    36a4:	f007 fb29 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    36a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    36ac:	e016      	b.n	36dc <uarte_nrfx_pins_configure+0x55c>
            mask = P0_FEATURE_PINS_PRESENT;
    36ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    36b2:	e7e0      	b.n	3676 <uarte_nrfx_pins_configure+0x4f6>
    switch (port)
    36b4:	2300      	movs	r3, #0
    36b6:	e7de      	b.n	3676 <uarte_nrfx_pins_configure+0x4f6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    36b8:	4e1b      	ldr	r6, [pc, #108]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    36ba:	f240 2329 	movw	r3, #553	; 0x229
    36be:	4632      	mov	r2, r6
    36c0:	491c      	ldr	r1, [pc, #112]	; (3734 <uarte_nrfx_pins_configure+0x5b4>)
    36c2:	481b      	ldr	r0, [pc, #108]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    36c4:	f007 f9c0 	bl	aa48 <printk>
    36c8:	f240 2129 	movw	r1, #553	; 0x229
    36cc:	4630      	mov	r0, r6
    36ce:	f007 fb14 	bl	acfa <assert_post_action>
    36d2:	e7d6      	b.n	3682 <uarte_nrfx_pins_configure+0x502>
        case 0: return NRF_P0;
    36d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    36d8:	e000      	b.n	36dc <uarte_nrfx_pins_configure+0x55c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    36da:	4b12      	ldr	r3, [pc, #72]	; (3724 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    36dc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    36e0:	2202      	movs	r2, #2
    36e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    36e6:	e717      	b.n	3518 <uarte_nrfx_pins_configure+0x398>
            mask = P0_FEATURE_PINS_PRESENT;
    36e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    36ec:	e720      	b.n	3530 <uarte_nrfx_pins_configure+0x3b0>
    switch (port)
    36ee:	2300      	movs	r3, #0
    36f0:	e71e      	b.n	3530 <uarte_nrfx_pins_configure+0x3b0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    36f2:	4e0d      	ldr	r6, [pc, #52]	; (3728 <uarte_nrfx_pins_configure+0x5a8>)
    36f4:	f240 2329 	movw	r3, #553	; 0x229
    36f8:	4632      	mov	r2, r6
    36fa:	490e      	ldr	r1, [pc, #56]	; (3734 <uarte_nrfx_pins_configure+0x5b4>)
    36fc:	480c      	ldr	r0, [pc, #48]	; (3730 <uarte_nrfx_pins_configure+0x5b0>)
    36fe:	f007 f9a3 	bl	aa48 <printk>
    3702:	f240 2129 	movw	r1, #553	; 0x229
    3706:	4630      	mov	r0, r6
    3708:	f007 faf7 	bl	acfa <assert_post_action>
    370c:	e717      	b.n	353e <uarte_nrfx_pins_configure+0x3be>
        case 0: return NRF_P0;
    370e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3712:	e000      	b.n	3716 <uarte_nrfx_pins_configure+0x596>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3714:	4b03      	ldr	r3, [pc, #12]	; (3724 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    3716:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    371a:	2202      	movs	r2, #2
    371c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    3720:	e6de      	b.n	34e0 <uarte_nrfx_pins_configure+0x360>
    3722:	bf00      	nop
    3724:	50000300 	.word	0x50000300
    3728:	0000c484 	.word	0x0000c484
    372c:	0000bc5c 	.word	0x0000bc5c
    3730:	0000bc60 	.word	0x0000bc60
    3734:	0000c4b8 	.word	0x0000c4b8

00003738 <random_byte_get>:
	__asm__ volatile(
    3738:	f04f 0320 	mov.w	r3, #32
    373c:	f3ef 8211 	mrs	r2, BASEPRI
    3740:	f383 8812 	msr	BASEPRI_MAX, r3
    3744:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    3748:	4b09      	ldr	r3, [pc, #36]	; (3770 <random_byte_get+0x38>)
    374a:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    374c:	b16b      	cbz	r3, 376a <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    374e:	4b09      	ldr	r3, [pc, #36]	; (3774 <random_byte_get+0x3c>)
    3750:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
    3754:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    3756:	f503 7380 	add.w	r3, r3, #256	; 0x100
    375a:	2100      	movs	r1, #0
    375c:	6019      	str	r1, [r3, #0]
    375e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    3760:	f382 8811 	msr	BASEPRI, r2
    3764:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    3768:	4770      	bx	lr
	int retval = -EAGAIN;
    376a:	f06f 000a 	mvn.w	r0, #10
    376e:	e7f7      	b.n	3760 <random_byte_get+0x28>
    3770:	4000d100 	.word	0x4000d100
    3774:	4000d000 	.word	0x4000d000

00003778 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    3778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    377c:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
    377e:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
    3782:	78c5      	ldrb	r5, [r0, #3]
    3784:	462f      	mov	r7, r5
	__asm__ volatile(
    3786:	f04f 0320 	mov.w	r3, #32
    378a:	f3ef 8811 	mrs	r8, BASEPRI
    378e:	f383 8812 	msr	BASEPRI_MAX, r3
    3792:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    3796:	7800      	ldrb	r0, [r0, #0]
    3798:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    379a:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
    379e:	ebac 0c00 	sub.w	ip, ip, r0
    37a2:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
    37a6:	4562      	cmp	r2, ip
    37a8:	d901      	bls.n	37ae <rng_pool_get+0x36>
		len = available;
    37aa:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    37ae:	1883      	adds	r3, r0, r2
    37b0:	402b      	ands	r3, r5
    37b2:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
    37b4:	f388 8811 	msr	BASEPRI, r8
    37b8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
    37bc:	460b      	mov	r3, r1
}
    37be:	e006      	b.n	37ce <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
    37c0:	1932      	adds	r2, r6, r4
    37c2:	7952      	ldrb	r2, [r2, #5]
    37c4:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
    37c8:	3401      	adds	r4, #1
    37ca:	403c      	ands	r4, r7
	while (likely(len--)) {
    37cc:	462a      	mov	r2, r5
    37ce:	1e55      	subs	r5, r2, #1
    37d0:	b2ad      	uxth	r5, r5
    37d2:	2a00      	cmp	r2, #0
    37d4:	d1f4      	bne.n	37c0 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    37d6:	4570      	cmp	r0, lr
    37d8:	d10d      	bne.n	37f6 <rng_pool_get+0x7e>
	__asm__ volatile(
    37da:	f04f 0020 	mov.w	r0, #32
    37de:	f3ef 8211 	mrs	r2, BASEPRI
    37e2:	f380 8812 	msr	BASEPRI_MAX, r0
    37e6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    37ea:	7830      	ldrb	r0, [r6, #0]
    37ec:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
    37ee:	f382 8811 	msr	BASEPRI, r2
    37f2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    37f6:	1a5b      	subs	r3, r3, r1
    37f8:	b298      	uxth	r0, r3
	available = available - len;
    37fa:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
    37fe:	7933      	ldrb	r3, [r6, #4]
    3800:	4563      	cmp	r3, ip
    3802:	d302      	bcc.n	380a <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    3804:	4b02      	ldr	r3, [pc, #8]	; (3810 <rng_pool_get+0x98>)
    3806:	2201      	movs	r2, #1
    3808:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    380a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    380e:	bf00      	nop
    3810:	4000d000 	.word	0x4000d000

00003814 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
    3814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3816:	460e      	mov	r6, r1
    3818:	4614      	mov	r4, r2
    381a:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
    381c:	6902      	ldr	r2, [r0, #16]
    381e:	4b2d      	ldr	r3, [pc, #180]	; (38d4 <entropy_nrf5_get_entropy_isr+0xc0>)
    3820:	429a      	cmp	r2, r3
    3822:	d00c      	beq.n	383e <entropy_nrf5_get_entropy_isr+0x2a>
    3824:	4f2c      	ldr	r7, [pc, #176]	; (38d8 <entropy_nrf5_get_entropy_isr+0xc4>)
    3826:	f44f 7384 	mov.w	r3, #264	; 0x108
    382a:	463a      	mov	r2, r7
    382c:	492b      	ldr	r1, [pc, #172]	; (38dc <entropy_nrf5_get_entropy_isr+0xc8>)
    382e:	482c      	ldr	r0, [pc, #176]	; (38e0 <entropy_nrf5_get_entropy_isr+0xcc>)
    3830:	f007 f90a 	bl	aa48 <printk>
    3834:	f44f 7184 	mov.w	r1, #264	; 0x108
    3838:	4638      	mov	r0, r7
    383a:	f007 fa5e 	bl	acfa <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    383e:	f015 0f01 	tst.w	r5, #1
    3842:	d105      	bne.n	3850 <entropy_nrf5_get_entropy_isr+0x3c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    3844:	4622      	mov	r2, r4
    3846:	4631      	mov	r1, r6
    3848:	4826      	ldr	r0, [pc, #152]	; (38e4 <entropy_nrf5_get_entropy_isr+0xd0>)
    384a:	f7ff ff95 	bl	3778 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
    3850:	b90c      	cbnz	r4, 3856 <entropy_nrf5_get_entropy_isr+0x42>
	return cnt;
    3852:	4620      	mov	r0, r4
    3854:	e7fb      	b.n	384e <entropy_nrf5_get_entropy_isr+0x3a>
	__asm__ volatile(
    3856:	f04f 0320 	mov.w	r3, #32
    385a:	f3ef 8511 	mrs	r5, BASEPRI
    385e:	f383 8812 	msr	BASEPRI_MAX, r3
    3862:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    3866:	200d      	movs	r0, #13
    3868:	f7fe f99e 	bl	1ba8 <arch_irq_is_enabled>
    386c:	4607      	mov	r7, r0
		irq_disable(IRQN);
    386e:	200d      	movs	r0, #13
    3870:	f7fe f986 	bl	1b80 <arch_irq_disable>
	__asm__ volatile(
    3874:	f385 8811 	msr	BASEPRI, r5
    3878:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    387c:	4b1a      	ldr	r3, [pc, #104]	; (38e8 <entropy_nrf5_get_entropy_isr+0xd4>)
    387e:	2200      	movs	r2, #0
    3880:	601a      	str	r2, [r3, #0]
    3882:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    3884:	4b19      	ldr	r3, [pc, #100]	; (38ec <entropy_nrf5_get_entropy_isr+0xd8>)
    3886:	2201      	movs	r2, #1
    3888:	601a      	str	r2, [r3, #0]
    388a:	4b19      	ldr	r3, [pc, #100]	; (38f0 <entropy_nrf5_get_entropy_isr+0xdc>)
    388c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3890:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3894:	4625      	mov	r5, r4
    3896:	e004      	b.n	38a2 <entropy_nrf5_get_entropy_isr+0x8e>
    3898:	f3bf 8f4f 	dsb	sy
				__WFE();
    389c:	bf20      	wfe
				__SEV();
    389e:	bf40      	sev
				__WFE();
    38a0:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    38a2:	4b11      	ldr	r3, [pc, #68]	; (38e8 <entropy_nrf5_get_entropy_isr+0xd4>)
    38a4:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
    38a6:	2b00      	cmp	r3, #0
    38a8:	d0f6      	beq.n	3898 <entropy_nrf5_get_entropy_isr+0x84>
			byte = random_byte_get();
    38aa:	f7ff ff45 	bl	3738 <random_byte_get>
    38ae:	4b10      	ldr	r3, [pc, #64]	; (38f0 <entropy_nrf5_get_entropy_isr+0xdc>)
    38b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    38b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
    38b8:	2800      	cmp	r0, #0
    38ba:	db02      	blt.n	38c2 <entropy_nrf5_get_entropy_isr+0xae>
			buf[--len] = byte;
    38bc:	3d01      	subs	r5, #1
    38be:	b2ad      	uxth	r5, r5
    38c0:	5570      	strb	r0, [r6, r5]
		} while (len);
    38c2:	2d00      	cmp	r5, #0
    38c4:	d1ed      	bne.n	38a2 <entropy_nrf5_get_entropy_isr+0x8e>
		if (irq_enabled) {
    38c6:	2f00      	cmp	r7, #0
    38c8:	d0c3      	beq.n	3852 <entropy_nrf5_get_entropy_isr+0x3e>
			irq_enable(IRQN);
    38ca:	200d      	movs	r0, #13
    38cc:	f7fe f948 	bl	1b60 <arch_irq_enable>
    38d0:	e7bf      	b.n	3852 <entropy_nrf5_get_entropy_isr+0x3e>
    38d2:	bf00      	nop
    38d4:	20000af4 	.word	0x20000af4
    38d8:	0000c594 	.word	0x0000c594
    38dc:	0000c5c8 	.word	0x0000c5c8
    38e0:	0000bc60 	.word	0x0000bc60
    38e4:	20000b14 	.word	0x20000b14
    38e8:	4000d100 	.word	0x4000d100
    38ec:	4000d000 	.word	0x4000d000
    38f0:	e000e100 	.word	0xe000e100

000038f4 <isr>:
{
    38f4:	b510      	push	{r4, lr}
	byte = random_byte_get();
    38f6:	f7ff ff1f 	bl	3738 <random_byte_get>
	if (byte < 0) {
    38fa:	2800      	cmp	r0, #0
    38fc:	db06      	blt.n	390c <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    38fe:	b2c4      	uxtb	r4, r0
    3900:	4621      	mov	r1, r4
    3902:	480a      	ldr	r0, [pc, #40]	; (392c <isr+0x38>)
    3904:	f007 fdea 	bl	b4dc <rng_pool_put>
	if (ret < 0) {
    3908:	2800      	cmp	r0, #0
    390a:	db00      	blt.n	390e <isr+0x1a>
}
    390c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
    390e:	4621      	mov	r1, r4
    3910:	4807      	ldr	r0, [pc, #28]	; (3930 <isr+0x3c>)
    3912:	f007 fde3 	bl	b4dc <rng_pool_put>
		if (ret < 0) {
    3916:	2800      	cmp	r0, #0
    3918:	db03      	blt.n	3922 <isr+0x2e>
	z_impl_k_sem_give(sem);
    391a:	4806      	ldr	r0, [pc, #24]	; (3934 <isr+0x40>)
    391c:	f002 fd52 	bl	63c4 <z_impl_k_sem_give>
}
    3920:	e7f4      	b.n	390c <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    3922:	4b05      	ldr	r3, [pc, #20]	; (3938 <isr+0x44>)
    3924:	2201      	movs	r2, #1
    3926:	601a      	str	r2, [r3, #0]
}
    3928:	e7f7      	b.n	391a <isr+0x26>
    392a:	bf00      	nop
    392c:	20000b14 	.word	0x20000b14
    3930:	20000b29 	.word	0x20000b29
    3934:	20000b04 	.word	0x20000b04
    3938:	4000d004 	.word	0x4000d004

0000393c <entropy_nrf5_get_entropy>:
{
    393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    393e:	460f      	mov	r7, r1
    3940:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
    3942:	6902      	ldr	r2, [r0, #16]
    3944:	4b18      	ldr	r3, [pc, #96]	; (39a8 <entropy_nrf5_get_entropy+0x6c>)
    3946:	429a      	cmp	r2, r3
    3948:	d00e      	beq.n	3968 <entropy_nrf5_get_entropy+0x2c>
    394a:	4d18      	ldr	r5, [pc, #96]	; (39ac <entropy_nrf5_get_entropy+0x70>)
    394c:	23ea      	movs	r3, #234	; 0xea
    394e:	462a      	mov	r2, r5
    3950:	4917      	ldr	r1, [pc, #92]	; (39b0 <entropy_nrf5_get_entropy+0x74>)
    3952:	4818      	ldr	r0, [pc, #96]	; (39b4 <entropy_nrf5_get_entropy+0x78>)
    3954:	f007 f878 	bl	aa48 <printk>
    3958:	21ea      	movs	r1, #234	; 0xea
    395a:	4628      	mov	r0, r5
    395c:	f007 f9cd 	bl	acfa <assert_post_action>
    3960:	e002      	b.n	3968 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
    3962:	1b64      	subs	r4, r4, r5
    3964:	b2a4      	uxth	r4, r4
		buf += bytes;
    3966:	442f      	add	r7, r5
	while (len) {
    3968:	b1e4      	cbz	r4, 39a4 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
    396a:	4e0f      	ldr	r6, [pc, #60]	; (39a8 <entropy_nrf5_get_entropy+0x6c>)
    396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3974:	4630      	mov	r0, r6
    3976:	f002 fd69 	bl	644c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    397a:	4622      	mov	r2, r4
    397c:	4639      	mov	r1, r7
    397e:	f106 0035 	add.w	r0, r6, #53	; 0x35
    3982:	f7ff fef9 	bl	3778 <rng_pool_get>
    3986:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
    3988:	4630      	mov	r0, r6
    398a:	f002 fd1b 	bl	63c4 <z_impl_k_sem_give>
		if (bytes == 0U) {
    398e:	2d00      	cmp	r5, #0
    3990:	d1e7      	bne.n	3962 <entropy_nrf5_get_entropy+0x26>
	return z_impl_k_sem_take(sem, timeout);
    3992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    399a:	f106 0010 	add.w	r0, r6, #16
    399e:	f002 fd55 	bl	644c <z_impl_k_sem_take>
			continue;
    39a2:	e7e1      	b.n	3968 <entropy_nrf5_get_entropy+0x2c>
}
    39a4:	2000      	movs	r0, #0
    39a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39a8:	20000af4 	.word	0x20000af4
    39ac:	0000c594 	.word	0x0000c594
    39b0:	0000c5c8 	.word	0x0000c5c8
    39b4:	0000bc60 	.word	0x0000bc60

000039b8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    39b8:	b510      	push	{r4, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
    39ba:	6902      	ldr	r2, [r0, #16]
    39bc:	4b1f      	ldr	r3, [pc, #124]	; (3a3c <entropy_nrf5_init+0x84>)
    39be:	429a      	cmp	r2, r3
    39c0:	d00c      	beq.n	39dc <entropy_nrf5_init+0x24>
    39c2:	4c1f      	ldr	r4, [pc, #124]	; (3a40 <entropy_nrf5_init+0x88>)
    39c4:	f240 1357 	movw	r3, #343	; 0x157
    39c8:	4622      	mov	r2, r4
    39ca:	491e      	ldr	r1, [pc, #120]	; (3a44 <entropy_nrf5_init+0x8c>)
    39cc:	481e      	ldr	r0, [pc, #120]	; (3a48 <entropy_nrf5_init+0x90>)
    39ce:	f007 f83b 	bl	aa48 <printk>
    39d2:	f240 1157 	movw	r1, #343	; 0x157
    39d6:	4620      	mov	r0, r4
    39d8:	f007 f98f 	bl	acfa <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
    39dc:	4c17      	ldr	r4, [pc, #92]	; (3a3c <entropy_nrf5_init+0x84>)
    39de:	2201      	movs	r2, #1
    39e0:	4611      	mov	r1, r2
    39e2:	4620      	mov	r0, r4
    39e4:	f007 fed7 	bl	b796 <z_impl_k_sem_init>
    39e8:	2201      	movs	r2, #1
    39ea:	2100      	movs	r1, #0
    39ec:	f104 0010 	add.w	r0, r4, #16
    39f0:	f007 fed1 	bl	b796 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
    39f4:	2204      	movs	r2, #4
    39f6:	2108      	movs	r1, #8
    39f8:	f104 0035 	add.w	r0, r4, #53	; 0x35
    39fc:	f007 fd82 	bl	b504 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
    3a00:	220c      	movs	r2, #12
    3a02:	2110      	movs	r1, #16
    3a04:	f104 0020 	add.w	r0, r4, #32
    3a08:	f007 fd7c 	bl	b504 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    3a0c:	4b0f      	ldr	r3, [pc, #60]	; (3a4c <entropy_nrf5_init+0x94>)
    3a0e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    3a12:	f022 0201 	bic.w	r2, r2, #1
    3a16:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    3a1a:	4a0d      	ldr	r2, [pc, #52]	; (3a50 <entropy_nrf5_init+0x98>)
    3a1c:	2400      	movs	r4, #0
    3a1e:	6014      	str	r4, [r2, #0]
    3a20:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
    3a22:	2101      	movs	r1, #1
    3a24:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    3a28:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    3a2a:	4622      	mov	r2, r4
    3a2c:	200d      	movs	r0, #13
    3a2e:	f7fe f8c9 	bl	1bc4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    3a32:	200d      	movs	r0, #13
    3a34:	f7fe f894 	bl	1b60 <arch_irq_enable>

	return 0;
}
    3a38:	4620      	mov	r0, r4
    3a3a:	bd10      	pop	{r4, pc}
    3a3c:	20000af4 	.word	0x20000af4
    3a40:	0000c594 	.word	0x0000c594
    3a44:	0000c5c8 	.word	0x0000c5c8
    3a48:	0000bc60 	.word	0x0000bc60
    3a4c:	4000d000 	.word	0x4000d000
    3a50:	4000d100 	.word	0x4000d100

00003a54 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    3a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a56:	b083      	sub	sp, #12
    3a58:	460f      	mov	r7, r1
    3a5a:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    3a5c:	b130      	cbz	r0, 3a6c <entropy_cc3xx_rng_get_entropy+0x18>
	__ASSERT_NO_MSG(buffer != NULL);
    3a5e:	b18f      	cbz	r7, 3a84 <entropy_cc3xx_rng_get_entropy+0x30>
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
			chunk_size = length - offset;
    3a60:	f44f 6580 	mov.w	r5, #1024	; 0x400
    3a64:	2400      	movs	r4, #0
    3a66:	f06f 0015 	mvn.w	r0, #21
    3a6a:	e022      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
	__ASSERT_NO_MSG(dev != NULL);
    3a6c:	4c17      	ldr	r4, [pc, #92]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3a6e:	2324      	movs	r3, #36	; 0x24
    3a70:	4622      	mov	r2, r4
    3a72:	4917      	ldr	r1, [pc, #92]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a74:	4817      	ldr	r0, [pc, #92]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a76:	f006 ffe7 	bl	aa48 <printk>
    3a7a:	2124      	movs	r1, #36	; 0x24
    3a7c:	4620      	mov	r0, r4
    3a7e:	f007 f93c 	bl	acfa <assert_post_action>
    3a82:	e7ec      	b.n	3a5e <entropy_cc3xx_rng_get_entropy+0xa>
	__ASSERT_NO_MSG(buffer != NULL);
    3a84:	4c11      	ldr	r4, [pc, #68]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3a86:	2325      	movs	r3, #37	; 0x25
    3a88:	4622      	mov	r2, r4
    3a8a:	4913      	ldr	r1, [pc, #76]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a8c:	4811      	ldr	r0, [pc, #68]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a8e:	f006 ffdb 	bl	aa48 <printk>
    3a92:	2125      	movs	r1, #37	; 0x25
    3a94:	4620      	mov	r0, r4
    3a96:	f007 f930 	bl	acfa <assert_post_action>
    3a9a:	e7e1      	b.n	3a60 <entropy_cc3xx_rng_get_entropy+0xc>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    3a9c:	ab01      	add	r3, sp, #4
    3a9e:	462a      	mov	r2, r5
    3aa0:	1939      	adds	r1, r7, r4
    3aa2:	2000      	movs	r0, #0
    3aa4:	f004 fbb8 	bl	8218 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
    3aa8:	9b01      	ldr	r3, [sp, #4]
    3aaa:	42ab      	cmp	r3, r5
    3aac:	d109      	bne.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
			return -EINVAL;
		}

		if (res != 0) {
    3aae:	b950      	cbnz	r0, 3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
			break;
		}

		offset += chunk_size;
    3ab0:	442c      	add	r4, r5
	while (offset < length) {
    3ab2:	42a6      	cmp	r6, r4
    3ab4:	d907      	bls.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    3ab6:	1b33      	subs	r3, r6, r4
    3ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3abc:	d2ee      	bcs.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
			chunk_size = length - offset;
    3abe:	461d      	mov	r5, r3
    3ac0:	e7ec      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
			return -EINVAL;
    3ac2:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
    3ac6:	b003      	add	sp, #12
    3ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aca:	bf00      	nop
    3acc:	0000c618 	.word	0x0000c618
    3ad0:	0000c648 	.word	0x0000c648
    3ad4:	0000bc60 	.word	0x0000bc60
    3ad8:	0000c65c 	.word	0x0000c65c

00003adc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3adc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3ae0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3ae4:	4b01      	ldr	r3, [pc, #4]	; (3aec <set_comparator+0x10>)
    3ae6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    3aea:	4770      	bx	lr
    3aec:	40011000 	.word	0x40011000

00003af0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3af0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3af4:	4b01      	ldr	r3, [pc, #4]	; (3afc <get_comparator+0xc>)
    3af6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    3afa:	4770      	bx	lr
    3afc:	40011000 	.word	0x40011000

00003b00 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3b04:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3b06:	4a02      	ldr	r2, [pc, #8]	; (3b10 <event_enable+0x10>)
    3b08:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    3b0c:	4770      	bx	lr
    3b0e:	bf00      	nop
    3b10:	40011000 	.word	0x40011000

00003b14 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3b18:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3b1a:	4a02      	ldr	r2, [pc, #8]	; (3b24 <event_disable+0x10>)
    3b1c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	40011000 	.word	0x40011000

00003b28 <counter>:
     return p_reg->COUNTER;
    3b28:	4b01      	ldr	r3, [pc, #4]	; (3b30 <counter+0x8>)
    3b2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    3b2e:	4770      	bx	lr
    3b30:	40011000 	.word	0x40011000

00003b34 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    3b34:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b36:	2301      	movs	r3, #1
    3b38:	4083      	lsls	r3, r0
    3b3a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b3c:	4a10      	ldr	r2, [pc, #64]	; (3b80 <compare_int_lock+0x4c>)
    3b3e:	f3bf 8f5b 	dmb	ish
    3b42:	e852 1f00 	ldrex	r1, [r2]
    3b46:	ea01 0c04 	and.w	ip, r1, r4
    3b4a:	e842 ce00 	strex	lr, ip, [r2]
    3b4e:	f1be 0f00 	cmp.w	lr, #0
    3b52:	d1f6      	bne.n	3b42 <compare_int_lock+0xe>
    3b54:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b5c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3b60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3b68:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3b6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b70:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3b74:	420b      	tst	r3, r1
}
    3b76:	bf14      	ite	ne
    3b78:	2001      	movne	r0, #1
    3b7a:	2000      	moveq	r0, #0
    3b7c:	bd10      	pop	{r4, pc}
    3b7e:	bf00      	nop
    3b80:	20000b3c 	.word	0x20000b3c

00003b84 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    3b88:	f007 fce3 	bl	b552 <full_int_lock>
    3b8c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3b92:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    3b94:	4a17      	ldr	r2, [pc, #92]	; (3bf4 <channel_processing_check_and_clear+0x70>)
    3b96:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3b9a:	4213      	tst	r3, r2
    3b9c:	d105      	bne.n	3baa <channel_processing_check_and_clear+0x26>
	bool result = false;
    3b9e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    3ba0:	4628      	mov	r0, r5
    3ba2:	f007 fcdf 	bl	b564 <full_int_unlock>

	return result;
}
    3ba6:	4630      	mov	r0, r6
    3ba8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3baa:	2301      	movs	r3, #1
    3bac:	40a3      	lsls	r3, r4
    3bae:	43db      	mvns	r3, r3
    3bb0:	4a11      	ldr	r2, [pc, #68]	; (3bf8 <channel_processing_check_and_clear+0x74>)
    3bb2:	f3bf 8f5b 	dmb	ish
    3bb6:	e852 1f00 	ldrex	r1, [r2]
    3bba:	ea01 0003 	and.w	r0, r1, r3
    3bbe:	e842 0600 	strex	r6, r0, [r2]
    3bc2:	2e00      	cmp	r6, #0
    3bc4:	d1f7      	bne.n	3bb6 <channel_processing_check_and_clear+0x32>
    3bc6:	f3bf 8f5b 	dmb	ish
    3bca:	b959      	cbnz	r1, 3be4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3bcc:	f104 0350 	add.w	r3, r4, #80	; 0x50
    3bd0:	009b      	lsls	r3, r3, #2
    3bd2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3bd8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3bdc:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3bde:	b113      	cbz	r3, 3be6 <channel_processing_check_and_clear+0x62>
    3be0:	2301      	movs	r3, #1
    3be2:	e000      	b.n	3be6 <channel_processing_check_and_clear+0x62>
    3be4:	2301      	movs	r3, #1
		if (result) {
    3be6:	461e      	mov	r6, r3
    3be8:	2b00      	cmp	r3, #0
    3bea:	d0d9      	beq.n	3ba0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    3bec:	4620      	mov	r0, r4
    3bee:	f007 fca1 	bl	b534 <event_clear>
    3bf2:	e7d5      	b.n	3ba0 <channel_processing_check_and_clear+0x1c>
    3bf4:	40011000 	.word	0x40011000
    3bf8:	20000b38 	.word	0x20000b38

00003bfc <compare_int_unlock>:
	if (key) {
    3bfc:	b901      	cbnz	r1, 3c00 <compare_int_unlock+0x4>
}
    3bfe:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    3c00:	2301      	movs	r3, #1
    3c02:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c04:	4a11      	ldr	r2, [pc, #68]	; (3c4c <compare_int_unlock+0x50>)
    3c06:	f3bf 8f5b 	dmb	ish
    3c0a:	e852 1f00 	ldrex	r1, [r2]
    3c0e:	4319      	orrs	r1, r3
    3c10:	e842 1c00 	strex	ip, r1, [r2]
    3c14:	f1bc 0f00 	cmp.w	ip, #0
    3c18:	d1f7      	bne.n	3c0a <compare_int_unlock+0xe>
    3c1a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3c22:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3c24:	4a0a      	ldr	r2, [pc, #40]	; (3c50 <compare_int_unlock+0x54>)
    3c26:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c2a:	f3bf 8f5b 	dmb	ish
    3c2e:	4b09      	ldr	r3, [pc, #36]	; (3c54 <compare_int_unlock+0x58>)
    3c30:	681b      	ldr	r3, [r3, #0]
    3c32:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3c36:	fa23 f000 	lsr.w	r0, r3, r0
    3c3a:	f010 0f01 	tst.w	r0, #1
    3c3e:	d0de      	beq.n	3bfe <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c40:	4b05      	ldr	r3, [pc, #20]	; (3c58 <compare_int_unlock+0x5c>)
    3c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3c46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    3c4a:	e7d8      	b.n	3bfe <compare_int_unlock+0x2>
    3c4c:	20000b3c 	.word	0x20000b3c
    3c50:	40011000 	.word	0x40011000
    3c54:	20000b38 	.word	0x20000b38
    3c58:	e000e100 	.word	0xe000e100

00003c5c <sys_clock_timeout_handler>:
{
    3c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c5e:	4607      	mov	r7, r0
    3c60:	4614      	mov	r4, r2
    3c62:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    3c64:	4610      	mov	r0, r2
    3c66:	4619      	mov	r1, r3
    3c68:	f007 fc70 	bl	b54c <absolute_time_to_cc>
    3c6c:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3c6e:	4b15      	ldr	r3, [pc, #84]	; (3cc4 <sys_clock_timeout_handler+0x68>)
    3c70:	681a      	ldr	r2, [r3, #0]
    3c72:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    3c74:	601c      	str	r4, [r3, #0]
    3c76:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3c78:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3c7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3c80:	d308      	bcc.n	3c94 <sys_clock_timeout_handler+0x38>
	return false;
    3c82:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3c84:	f004 f908 	bl	7e98 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    3c88:	4638      	mov	r0, r7
    3c8a:	f7ff ff31 	bl	3af0 <get_comparator>
    3c8e:	42a8      	cmp	r0, r5
    3c90:	d00c      	beq.n	3cac <sys_clock_timeout_handler+0x50>
}
    3c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3c94:	4b0c      	ldr	r3, [pc, #48]	; (3cc8 <sys_clock_timeout_handler+0x6c>)
    3c96:	6819      	ldr	r1, [r3, #0]
    3c98:	0a0b      	lsrs	r3, r1, #8
    3c9a:	060a      	lsls	r2, r1, #24
    3c9c:	1952      	adds	r2, r2, r5
    3c9e:	f143 0300 	adc.w	r3, r3, #0
    3ca2:	490a      	ldr	r1, [pc, #40]	; (3ccc <sys_clock_timeout_handler+0x70>)
    3ca4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3ca8:	2401      	movs	r4, #1
    3caa:	e7eb      	b.n	3c84 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    3cac:	b11c      	cbz	r4, 3cb6 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    3cae:	4638      	mov	r0, r7
    3cb0:	f7ff ff26 	bl	3b00 <event_enable>
}
    3cb4:	e7ed      	b.n	3c92 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    3cb6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    3cba:	4638      	mov	r0, r7
    3cbc:	f7ff ff0e 	bl	3adc <set_comparator>
    3cc0:	e7f5      	b.n	3cae <sys_clock_timeout_handler+0x52>
    3cc2:	bf00      	nop
    3cc4:	200003a8 	.word	0x200003a8
    3cc8:	20000b40 	.word	0x20000b40
    3ccc:	20000390 	.word	0x20000390

00003cd0 <z_nrf_rtc_timer_read>:
{
    3cd0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3cd2:	4b0d      	ldr	r3, [pc, #52]	; (3d08 <z_nrf_rtc_timer_read+0x38>)
    3cd4:	681b      	ldr	r3, [r3, #0]
    3cd6:	0a1d      	lsrs	r5, r3, #8
    3cd8:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3cda:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    3cde:	f7ff ff23 	bl	3b28 <counter>
    3ce2:	4603      	mov	r3, r0
	val += cntr;
    3ce4:	1820      	adds	r0, r4, r0
    3ce6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3cee:	d20a      	bcs.n	3d06 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    3cf0:	4b06      	ldr	r3, [pc, #24]	; (3d0c <z_nrf_rtc_timer_read+0x3c>)
    3cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cf6:	4299      	cmp	r1, r3
    3cf8:	bf08      	it	eq
    3cfa:	4290      	cmpeq	r0, r2
    3cfc:	d203      	bcs.n	3d06 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    3cfe:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3d02:	f141 0100 	adc.w	r1, r1, #0
}
    3d06:	bd38      	pop	{r3, r4, r5, pc}
    3d08:	20000b40 	.word	0x20000b40
    3d0c:	20000390 	.word	0x20000390

00003d10 <compare_set_nolocks>:
{
    3d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d14:	4606      	mov	r6, r0
    3d16:	4614      	mov	r4, r2
    3d18:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    3d1a:	4610      	mov	r0, r2
    3d1c:	4619      	mov	r1, r3
    3d1e:	f007 fc15 	bl	b54c <absolute_time_to_cc>
    3d22:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3d24:	f7ff ffd4 	bl	3cd0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3d28:	42a9      	cmp	r1, r5
    3d2a:	bf08      	it	eq
    3d2c:	42a0      	cmpeq	r0, r4
    3d2e:	d21e      	bcs.n	3d6e <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    3d30:	ebb4 0800 	subs.w	r8, r4, r0
    3d34:	eb65 0901 	sbc.w	r9, r5, r1
    3d38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3d3c:	2300      	movs	r3, #0
    3d3e:	454b      	cmp	r3, r9
    3d40:	bf08      	it	eq
    3d42:	4542      	cmpeq	r2, r8
    3d44:	d32e      	bcc.n	3da4 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    3d46:	4b19      	ldr	r3, [pc, #100]	; (3dac <compare_set_nolocks+0x9c>)
    3d48:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    3d4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3d50:	42ab      	cmp	r3, r5
    3d52:	bf08      	it	eq
    3d54:	42a2      	cmpeq	r2, r4
    3d56:	d018      	beq.n	3d8a <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    3d58:	4639      	mov	r1, r7
    3d5a:	4630      	mov	r0, r6
    3d5c:	f007 fc07 	bl	b56e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    3d60:	4639      	mov	r1, r7
    3d62:	f007 fbe3 	bl	b52c <counter_sub>
    3d66:	1824      	adds	r4, r4, r0
    3d68:	f145 0500 	adc.w	r5, r5, #0
    3d6c:	e00d      	b.n	3d8a <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    3d6e:	2301      	movs	r3, #1
    3d70:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3d72:	4a0f      	ldr	r2, [pc, #60]	; (3db0 <compare_set_nolocks+0xa0>)
    3d74:	f3bf 8f5b 	dmb	ish
    3d78:	e852 1f00 	ldrex	r1, [r2]
    3d7c:	4319      	orrs	r1, r3
    3d7e:	e842 1000 	strex	r0, r1, [r2]
    3d82:	2800      	cmp	r0, #0
    3d84:	d1f8      	bne.n	3d78 <compare_set_nolocks+0x68>
    3d86:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3d8a:	4b08      	ldr	r3, [pc, #32]	; (3dac <compare_set_nolocks+0x9c>)
    3d8c:	0132      	lsls	r2, r6, #4
    3d8e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    3d92:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    3d96:	9908      	ldr	r1, [sp, #32]
    3d98:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    3d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d9c:	6073      	str	r3, [r6, #4]
	return ret;
    3d9e:	2000      	movs	r0, #0
}
    3da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    3da4:	f06f 0015 	mvn.w	r0, #21
    3da8:	e7fa      	b.n	3da0 <compare_set_nolocks+0x90>
    3daa:	bf00      	nop
    3dac:	20000398 	.word	0x20000398
    3db0:	20000b38 	.word	0x20000b38

00003db4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3db4:	b530      	push	{r4, r5, lr}
    3db6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    3db8:	2300      	movs	r3, #0
    3dba:	4a1e      	ldr	r2, [pc, #120]	; (3e34 <sys_clock_driver_init+0x80>)
    3dbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	dd25      	ble.n	3e10 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    3dc4:	4c1b      	ldr	r4, [pc, #108]	; (3e34 <sys_clock_driver_init+0x80>)
    3dc6:	2502      	movs	r5, #2
    3dc8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3dcc:	4b1a      	ldr	r3, [pc, #104]	; (3e38 <sys_clock_driver_init+0x84>)
    3dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3dd2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3dd6:	2200      	movs	r2, #0
    3dd8:	2101      	movs	r1, #1
    3dda:	2011      	movs	r0, #17
    3ddc:	f7fd fef2 	bl	1bc4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3de0:	2011      	movs	r0, #17
    3de2:	f7fd febd 	bl	1b60 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3de6:	2301      	movs	r3, #1
    3de8:	4a14      	ldr	r2, [pc, #80]	; (3e3c <sys_clock_driver_init+0x88>)
    3dea:	6013      	str	r3, [r2, #0]
    3dec:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3dee:	4a14      	ldr	r2, [pc, #80]	; (3e40 <sys_clock_driver_init+0x8c>)
    3df0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3df2:	2400      	movs	r4, #0
    3df4:	9401      	str	r4, [sp, #4]
    3df6:	4b13      	ldr	r3, [pc, #76]	; (3e44 <sys_clock_driver_init+0x90>)
    3df8:	9300      	str	r3, [sp, #0]
    3dfa:	4a13      	ldr	r2, [pc, #76]	; (3e48 <sys_clock_driver_init+0x94>)
    3dfc:	2300      	movs	r3, #0
    3dfe:	4620      	mov	r0, r4
    3e00:	f007 fbf0 	bl	b5e4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3e04:	4628      	mov	r0, r5
    3e06:	f7fe fdd7 	bl	29b8 <z_nrf_clock_control_lf_on>

	return 0;
}
    3e0a:	4620      	mov	r0, r4
    3e0c:	b003      	add	sp, #12
    3e0e:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3e10:	4a0e      	ldr	r2, [pc, #56]	; (3e4c <sys_clock_driver_init+0x98>)
    3e12:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e1e:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3e26:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    3e28:	4902      	ldr	r1, [pc, #8]	; (3e34 <sys_clock_driver_init+0x80>)
    3e2a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3e2e:	3301      	adds	r3, #1
    3e30:	e7c6      	b.n	3dc0 <sys_clock_driver_init+0xc>
    3e32:	bf00      	nop
    3e34:	40011000 	.word	0x40011000
    3e38:	e000e100 	.word	0xe000e100
    3e3c:	40011008 	.word	0x40011008
    3e40:	20000b3c 	.word	0x20000b3c
    3e44:	00003c5d 	.word	0x00003c5d
    3e48:	007fffff 	.word	0x007fffff
    3e4c:	20000398 	.word	0x20000398

00003e50 <process_channel>:
{
    3e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e54:	b082      	sub	sp, #8
    3e56:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    3e58:	f7ff fe94 	bl	3b84 <channel_processing_check_and_clear>
    3e5c:	b910      	cbnz	r0, 3e64 <process_channel+0x14>
}
    3e5e:	b002      	add	sp, #8
    3e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    3e64:	f7ff ff34 	bl	3cd0 <z_nrf_rtc_timer_read>
    3e68:	4606      	mov	r6, r0
    3e6a:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    3e6c:	f007 fb71 	bl	b552 <full_int_lock>
    3e70:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    3e72:	4b13      	ldr	r3, [pc, #76]	; (3ec0 <process_channel+0x70>)
    3e74:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    3e78:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3e7c:	454f      	cmp	r7, r9
    3e7e:	bf08      	it	eq
    3e80:	4546      	cmpeq	r6, r8
    3e82:	d20b      	bcs.n	3e9c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3e84:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    3e86:	4650      	mov	r0, sl
    3e88:	f007 fb6c 	bl	b564 <full_int_unlock>
		if (handler) {
    3e8c:	2e00      	cmp	r6, #0
    3e8e:	d0e6      	beq.n	3e5e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    3e90:	9500      	str	r5, [sp, #0]
    3e92:	4642      	mov	r2, r8
    3e94:	464b      	mov	r3, r9
    3e96:	4620      	mov	r0, r4
    3e98:	47b0      	blx	r6
}
    3e9a:	e7e0      	b.n	3e5e <process_channel+0xe>
			handler = cc_data[chan].callback;
    3e9c:	4a08      	ldr	r2, [pc, #32]	; (3ec0 <process_channel+0x70>)
    3e9e:	0123      	lsls	r3, r4, #4
    3ea0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    3ea4:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    3ea6:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    3ea8:	2000      	movs	r0, #0
    3eaa:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3eb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    3eb8:	4620      	mov	r0, r4
    3eba:	f7ff fe2b 	bl	3b14 <event_disable>
    3ebe:	e7e2      	b.n	3e86 <process_channel+0x36>
    3ec0:	20000398 	.word	0x20000398

00003ec4 <rtc_nrf_isr>:
{
    3ec4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    3ec6:	4b0d      	ldr	r3, [pc, #52]	; (3efc <rtc_nrf_isr+0x38>)
    3ec8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3ecc:	f013 0f02 	tst.w	r3, #2
    3ed0:	d00a      	beq.n	3ee8 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ed2:	4b0b      	ldr	r3, [pc, #44]	; (3f00 <rtc_nrf_isr+0x3c>)
    3ed4:	681b      	ldr	r3, [r3, #0]
    3ed6:	b13b      	cbz	r3, 3ee8 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ed8:	4b09      	ldr	r3, [pc, #36]	; (3f00 <rtc_nrf_isr+0x3c>)
    3eda:	2200      	movs	r2, #0
    3edc:	601a      	str	r2, [r3, #0]
    3ede:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    3ee0:	4a08      	ldr	r2, [pc, #32]	; (3f04 <rtc_nrf_isr+0x40>)
    3ee2:	6813      	ldr	r3, [r2, #0]
    3ee4:	3301      	adds	r3, #1
    3ee6:	6013      	str	r3, [r2, #0]
{
    3ee8:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3eea:	2c00      	cmp	r4, #0
    3eec:	dd00      	ble.n	3ef0 <rtc_nrf_isr+0x2c>
}
    3eee:	bd10      	pop	{r4, pc}
		process_channel(chan);
    3ef0:	4620      	mov	r0, r4
    3ef2:	f7ff ffad 	bl	3e50 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3ef6:	3401      	adds	r4, #1
    3ef8:	e7f7      	b.n	3eea <rtc_nrf_isr+0x26>
    3efa:	bf00      	nop
    3efc:	40011000 	.word	0x40011000
    3f00:	40011104 	.word	0x40011104
    3f04:	20000b40 	.word	0x20000b40

00003f08 <sys_clock_set_timeout>:
{
    3f08:	b510      	push	{r4, lr}
    3f0a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3f10:	d007      	beq.n	3f22 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f12:	1e44      	subs	r4, r0, #1
    3f14:	2c00      	cmp	r4, #0
    3f16:	dd07      	ble.n	3f28 <sys_clock_set_timeout+0x20>
    3f18:	4b11      	ldr	r3, [pc, #68]	; (3f60 <sys_clock_set_timeout+0x58>)
    3f1a:	429c      	cmp	r4, r3
    3f1c:	dd05      	ble.n	3f2a <sys_clock_set_timeout+0x22>
    3f1e:	4c11      	ldr	r4, [pc, #68]	; (3f64 <sys_clock_set_timeout+0x5c>)
    3f20:	e003      	b.n	3f2a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f22:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    3f26:	e7f4      	b.n	3f12 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f28:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3f2a:	f7ff fed1 	bl	3cd0 <z_nrf_rtc_timer_read>
    3f2e:	4b0e      	ldr	r3, [pc, #56]	; (3f68 <sys_clock_set_timeout+0x60>)
    3f30:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f34:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    3f36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f3a:	d300      	bcc.n	3f3e <sys_clock_set_timeout+0x36>
		ticks = 0;
    3f3c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3f3e:	4404      	add	r4, r0
    3f40:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    3f42:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    3f46:	d300      	bcc.n	3f4a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    3f48:	4c06      	ldr	r4, [pc, #24]	; (3f64 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3f4a:	2000      	movs	r0, #0
    3f4c:	9001      	str	r0, [sp, #4]
    3f4e:	4907      	ldr	r1, [pc, #28]	; (3f6c <sys_clock_set_timeout+0x64>)
    3f50:	9100      	str	r1, [sp, #0]
    3f52:	1912      	adds	r2, r2, r4
    3f54:	f143 0300 	adc.w	r3, r3, #0
    3f58:	f007 fb44 	bl	b5e4 <compare_set>
}
    3f5c:	b002      	add	sp, #8
    3f5e:	bd10      	pop	{r4, pc}
    3f60:	007ffffe 	.word	0x007ffffe
    3f64:	007fffff 	.word	0x007fffff
    3f68:	200003a8 	.word	0x200003a8
    3f6c:	00003c5d 	.word	0x00003c5d

00003f70 <sys_clock_elapsed>:
{
    3f70:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3f72:	f7ff fead 	bl	3cd0 <z_nrf_rtc_timer_read>
    3f76:	4b02      	ldr	r3, [pc, #8]	; (3f80 <sys_clock_elapsed+0x10>)
    3f78:	681b      	ldr	r3, [r3, #0]
}
    3f7a:	1ac0      	subs	r0, r0, r3
    3f7c:	bd08      	pop	{r3, pc}
    3f7e:	bf00      	nop
    3f80:	200003a8 	.word	0x200003a8

00003f84 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3f84:	4b03      	ldr	r3, [pc, #12]	; (3f94 <nrf52_errata_36+0x10>)
    3f86:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3f88:	2b08      	cmp	r3, #8
    3f8a:	d001      	beq.n	3f90 <nrf52_errata_36+0xc>
        return false;
    3f8c:	2000      	movs	r0, #0
    3f8e:	4770      	bx	lr
                        return true;
    3f90:	2001      	movs	r0, #1
}
    3f92:	4770      	bx	lr
    3f94:	10000130 	.word	0x10000130

00003f98 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3f98:	4b03      	ldr	r3, [pc, #12]	; (3fa8 <nrf52_errata_66+0x10>)
    3f9a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3f9c:	2b08      	cmp	r3, #8
    3f9e:	d001      	beq.n	3fa4 <nrf52_errata_66+0xc>
        return false;
    3fa0:	2000      	movs	r0, #0
    3fa2:	4770      	bx	lr
                        return true;
    3fa4:	2001      	movs	r0, #1
}
    3fa6:	4770      	bx	lr
    3fa8:	10000130 	.word	0x10000130

00003fac <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3fac:	4b08      	ldr	r3, [pc, #32]	; (3fd0 <nrf52_errata_98+0x24>)
    3fae:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3fb0:	3304      	adds	r3, #4
    3fb2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3fb4:	2a08      	cmp	r2, #8
    3fb6:	d001      	beq.n	3fbc <nrf52_errata_98+0x10>
        return false;
    3fb8:	2000      	movs	r0, #0
    3fba:	4770      	bx	lr
                switch(var2)
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d804      	bhi.n	3fca <nrf52_errata_98+0x1e>
    3fc0:	e8df f003 	tbb	[pc, r3]
    3fc4:	01          	.byte	0x01
    3fc5:	00          	.byte	0x00
            if (var1 == 0x08)
    3fc6:	2001      	movs	r0, #1
    3fc8:	4770      	bx	lr
                        return false;
    3fca:	2000      	movs	r0, #0
}
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop
    3fd0:	10000130 	.word	0x10000130

00003fd4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3fd4:	4b08      	ldr	r3, [pc, #32]	; (3ff8 <nrf52_errata_103+0x24>)
    3fd6:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3fd8:	3304      	adds	r3, #4
    3fda:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3fdc:	2a08      	cmp	r2, #8
    3fde:	d001      	beq.n	3fe4 <nrf52_errata_103+0x10>
        return false;
    3fe0:	2000      	movs	r0, #0
    3fe2:	4770      	bx	lr
                switch(var2)
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d804      	bhi.n	3ff2 <nrf52_errata_103+0x1e>
    3fe8:	e8df f003 	tbb	[pc, r3]
    3fec:	01          	.byte	0x01
    3fed:	00          	.byte	0x00
            if (var1 == 0x08)
    3fee:	2001      	movs	r0, #1
    3ff0:	4770      	bx	lr
                        return false;
    3ff2:	2000      	movs	r0, #0
}
    3ff4:	4770      	bx	lr
    3ff6:	bf00      	nop
    3ff8:	10000130 	.word	0x10000130

00003ffc <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3ffc:	4b08      	ldr	r3, [pc, #32]	; (4020 <nrf52_errata_115+0x24>)
    3ffe:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4000:	3304      	adds	r3, #4
    4002:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4004:	2a08      	cmp	r2, #8
    4006:	d001      	beq.n	400c <nrf52_errata_115+0x10>
        return false;
    4008:	2000      	movs	r0, #0
    400a:	4770      	bx	lr
                switch(var2)
    400c:	2b00      	cmp	r3, #0
    400e:	d804      	bhi.n	401a <nrf52_errata_115+0x1e>
    4010:	e8df f003 	tbb	[pc, r3]
    4014:	01          	.byte	0x01
    4015:	00          	.byte	0x00
            if (var1 == 0x08)
    4016:	2001      	movs	r0, #1
    4018:	4770      	bx	lr
                        return false;
    401a:	2000      	movs	r0, #0
}
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	10000130 	.word	0x10000130

00004024 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4024:	4b08      	ldr	r3, [pc, #32]	; (4048 <nrf52_errata_120+0x24>)
    4026:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4028:	3304      	adds	r3, #4
    402a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    402c:	2a08      	cmp	r2, #8
    402e:	d001      	beq.n	4034 <nrf52_errata_120+0x10>
        return false;
    4030:	2000      	movs	r0, #0
    4032:	4770      	bx	lr
                switch(var2)
    4034:	2b00      	cmp	r3, #0
    4036:	d804      	bhi.n	4042 <nrf52_errata_120+0x1e>
    4038:	e8df f003 	tbb	[pc, r3]
    403c:	01          	.byte	0x01
    403d:	00          	.byte	0x00
            if (var1 == 0x08)
    403e:	2001      	movs	r0, #1
    4040:	4770      	bx	lr
                        return false;
    4042:	2000      	movs	r0, #0
}
    4044:	4770      	bx	lr
    4046:	bf00      	nop
    4048:	10000130 	.word	0x10000130

0000404c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    404c:	4b03      	ldr	r3, [pc, #12]	; (405c <nrf52_errata_136+0x10>)
    404e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4050:	2b08      	cmp	r3, #8
    4052:	d001      	beq.n	4058 <nrf52_errata_136+0xc>
        return false;
    4054:	2000      	movs	r0, #0
    4056:	4770      	bx	lr
                        return true;
    4058:	2001      	movs	r0, #1
}
    405a:	4770      	bx	lr
    405c:	10000130 	.word	0x10000130

00004060 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4060:	4b06      	ldr	r3, [pc, #24]	; (407c <nrf52_configuration_249+0x1c>)
    4062:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4064:	4a06      	ldr	r2, [pc, #24]	; (4080 <nrf52_configuration_249+0x20>)
    4066:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4068:	2b08      	cmp	r3, #8
    406a:	d001      	beq.n	4070 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    406c:	2000      	movs	r0, #0
    406e:	4770      	bx	lr
                switch(var2)
    4070:	2a04      	cmp	r2, #4
    4072:	d801      	bhi.n	4078 <nrf52_configuration_249+0x18>
    4074:	2000      	movs	r0, #0
    4076:	4770      	bx	lr
                        return true;
    4078:	2001      	movs	r0, #1
    #endif
}
    407a:	4770      	bx	lr
    407c:	10000130 	.word	0x10000130
    4080:	10000134 	.word	0x10000134

00004084 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4084:	4b02      	ldr	r3, [pc, #8]	; (4090 <nvmc_wait+0xc>)
    4086:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    408a:	2b00      	cmp	r3, #0
    408c:	d0fa      	beq.n	4084 <nvmc_wait>
}
    408e:	4770      	bx	lr
    4090:	4001e000 	.word	0x4001e000

00004094 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    4094:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4096:	4b03      	ldr	r3, [pc, #12]	; (40a4 <nvmc_config+0x10>)
    4098:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    409c:	f7ff fff2 	bl	4084 <nvmc_wait>
}
    40a0:	bd08      	pop	{r3, pc}
    40a2:	bf00      	nop
    40a4:	4001e000 	.word	0x4001e000

000040a8 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    40a8:	4b01      	ldr	r3, [pc, #4]	; (40b0 <SystemCoreClockUpdate+0x8>)
    40aa:	4a02      	ldr	r2, [pc, #8]	; (40b4 <SystemCoreClockUpdate+0xc>)
    40ac:	601a      	str	r2, [r3, #0]
}
    40ae:	4770      	bx	lr
    40b0:	20000054 	.word	0x20000054
    40b4:	03d09000 	.word	0x03d09000

000040b8 <SystemInit>:

void SystemInit(void)
{
    40b8:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    40ba:	f7ff ff63 	bl	3f84 <nrf52_errata_36>
    40be:	b140      	cbz	r0, 40d2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    40c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40c4:	2200      	movs	r2, #0
    40c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    40ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    40ce:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    40d2:	f7ff ff61 	bl	3f98 <nrf52_errata_66>
    40d6:	2800      	cmp	r0, #0
    40d8:	d046      	beq.n	4168 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    40da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    40de:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    40e2:	4b56      	ldr	r3, [pc, #344]	; (423c <SystemInit+0x184>)
    40e4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    40e8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    40ec:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    40f0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    40f4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    40f8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    40fc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4100:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4104:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4108:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    410c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4110:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4114:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4118:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    411c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4120:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4124:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4128:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    412c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4130:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4134:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4138:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    413c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4140:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4144:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4148:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    414c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4150:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4154:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4158:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    415c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4160:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4164:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4168:	f7ff ff20 	bl	3fac <nrf52_errata_98>
    416c:	b110      	cbz	r0, 4174 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    416e:	4b34      	ldr	r3, [pc, #208]	; (4240 <SystemInit+0x188>)
    4170:	4a34      	ldr	r2, [pc, #208]	; (4244 <SystemInit+0x18c>)
    4172:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4174:	f7ff ff2e 	bl	3fd4 <nrf52_errata_103>
    4178:	b118      	cbz	r0, 4182 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    417a:	4b33      	ldr	r3, [pc, #204]	; (4248 <SystemInit+0x190>)
    417c:	22fb      	movs	r2, #251	; 0xfb
    417e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4182:	f7ff ff3b 	bl	3ffc <nrf52_errata_115>
    4186:	b148      	cbz	r0, 419c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4188:	4930      	ldr	r1, [pc, #192]	; (424c <SystemInit+0x194>)
    418a:	680b      	ldr	r3, [r1, #0]
    418c:	f023 030f 	bic.w	r3, r3, #15
    4190:	4a2f      	ldr	r2, [pc, #188]	; (4250 <SystemInit+0x198>)
    4192:	6812      	ldr	r2, [r2, #0]
    4194:	f002 020f 	and.w	r2, r2, #15
    4198:	4313      	orrs	r3, r2
    419a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    419c:	f7ff ff42 	bl	4024 <nrf52_errata_120>
    41a0:	b118      	cbz	r0, 41aa <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    41a2:	4b2c      	ldr	r3, [pc, #176]	; (4254 <SystemInit+0x19c>)
    41a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    41a8:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    41aa:	f7ff ff4f 	bl	404c <nrf52_errata_136>
    41ae:	b160      	cbz	r0, 41ca <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    41b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    41b8:	f013 0f01 	tst.w	r3, #1
    41bc:	d005      	beq.n	41ca <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    41be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41c2:	f06f 0201 	mvn.w	r2, #1
    41c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    41ca:	f7ff ff49 	bl	4060 <nrf52_configuration_249>
    41ce:	b138      	cbz	r0, 41e0 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    41d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    41d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    41d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41dc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    41e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    41e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41e8:	2b00      	cmp	r3, #0
    41ea:	db08      	blt.n	41fe <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    41ec:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    41f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    41f4:	2b00      	cmp	r3, #0
    41f6:	db02      	blt.n	41fe <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    41f8:	f7ff ff56 	bl	40a8 <SystemCoreClockUpdate>
}
    41fc:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    41fe:	2001      	movs	r0, #1
    4200:	f7ff ff48 	bl	4094 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4204:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    4208:	2512      	movs	r5, #18
    420a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    420e:	f7ff ff39 	bl	4084 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4212:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    4216:	f7ff ff35 	bl	4084 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    421a:	2000      	movs	r0, #0
    421c:	f7ff ff3a 	bl	4094 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    4220:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4224:	490c      	ldr	r1, [pc, #48]	; (4258 <SystemInit+0x1a0>)
    4226:	68ca      	ldr	r2, [r1, #12]
    4228:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    422c:	4b0b      	ldr	r3, [pc, #44]	; (425c <SystemInit+0x1a4>)
    422e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4230:	60cb      	str	r3, [r1, #12]
    4232:	f3bf 8f4f 	dsb	sy
    __NOP();
    4236:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4238:	e7fd      	b.n	4236 <SystemInit+0x17e>
    423a:	bf00      	nop
    423c:	4000c000 	.word	0x4000c000
    4240:	4000568c 	.word	0x4000568c
    4244:	00038148 	.word	0x00038148
    4248:	4000f000 	.word	0x4000f000
    424c:	40000ee4 	.word	0x40000ee4
    4250:	10000258 	.word	0x10000258
    4254:	40029640 	.word	0x40029640
    4258:	e000ed00 	.word	0xe000ed00
    425c:	05fa0004 	.word	0x05fa0004

00004260 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4260:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    4262:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4264:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    4268:	f1d3 031f 	rsbs	r3, r3, #31
    426c:	d415      	bmi.n	429a <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    426e:	2201      	movs	r2, #1
    4270:	409a      	lsls	r2, r3
    4272:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4276:	f3bf 8f5b 	dmb	ish
    427a:	e850 5f00 	ldrex	r5, [r0]
    427e:	42a5      	cmp	r5, r4
    4280:	d104      	bne.n	428c <nrfx_flag32_alloc+0x2c>
    4282:	e840 2c00 	strex	ip, r2, [r0]
    4286:	f1bc 0f00 	cmp.w	ip, #0
    428a:	d1f6      	bne.n	427a <nrfx_flag32_alloc+0x1a>
    428c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4290:	d1e7      	bne.n	4262 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    4292:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    4294:	4802      	ldr	r0, [pc, #8]	; (42a0 <nrfx_flag32_alloc+0x40>)
}
    4296:	bc30      	pop	{r4, r5}
    4298:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    429a:	4802      	ldr	r0, [pc, #8]	; (42a4 <nrfx_flag32_alloc+0x44>)
    429c:	e7fb      	b.n	4296 <nrfx_flag32_alloc+0x36>
    429e:	bf00      	nop
    42a0:	0bad0000 	.word	0x0bad0000
    42a4:	0bad0002 	.word	0x0bad0002

000042a8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    42a8:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    42aa:	6803      	ldr	r3, [r0, #0]
    42ac:	460c      	mov	r4, r1
    42ae:	fa23 f101 	lsr.w	r1, r3, r1
    42b2:	f011 0f01 	tst.w	r1, #1
    42b6:	d114      	bne.n	42e2 <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    42b8:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    42ba:	2301      	movs	r3, #1
    42bc:	40a3      	lsls	r3, r4
    42be:	4313      	orrs	r3, r2
    42c0:	f3bf 8f5b 	dmb	ish
    42c4:	e850 1f00 	ldrex	r1, [r0]
    42c8:	4291      	cmp	r1, r2
    42ca:	d104      	bne.n	42d6 <nrfx_flag32_free+0x2e>
    42cc:	e840 3c00 	strex	ip, r3, [r0]
    42d0:	f1bc 0f00 	cmp.w	ip, #0
    42d4:	d1f6      	bne.n	42c4 <nrfx_flag32_free+0x1c>
    42d6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    42da:	d1ed      	bne.n	42b8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    42dc:	4802      	ldr	r0, [pc, #8]	; (42e8 <nrfx_flag32_free+0x40>)
}
    42de:	bc10      	pop	{r4}
    42e0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    42e2:	4802      	ldr	r0, [pc, #8]	; (42ec <nrfx_flag32_free+0x44>)
    42e4:	e7fb      	b.n	42de <nrfx_flag32_free+0x36>
    42e6:	bf00      	nop
    42e8:	0bad0000 	.word	0x0bad0000
    42ec:	0bad0004 	.word	0x0bad0004

000042f0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    42f0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    42f2:	4604      	mov	r4, r0
    42f4:	b150      	cbz	r0, 430c <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    42f6:	4b0c      	ldr	r3, [pc, #48]	; (4328 <nrfx_clock_init+0x38>)
    42f8:	791b      	ldrb	r3, [r3, #4]
    42fa:	b99b      	cbnz	r3, 4324 <nrfx_clock_init+0x34>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    42fc:	4b0a      	ldr	r3, [pc, #40]	; (4328 <nrfx_clock_init+0x38>)
    42fe:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4300:	2201      	movs	r2, #1
    4302:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    4304:	2200      	movs	r2, #0
    4306:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4308:	4808      	ldr	r0, [pc, #32]	; (432c <nrfx_clock_init+0x3c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    430a:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    430c:	4d08      	ldr	r5, [pc, #32]	; (4330 <nrfx_clock_init+0x40>)
    430e:	23bd      	movs	r3, #189	; 0xbd
    4310:	462a      	mov	r2, r5
    4312:	4908      	ldr	r1, [pc, #32]	; (4334 <nrfx_clock_init+0x44>)
    4314:	4808      	ldr	r0, [pc, #32]	; (4338 <nrfx_clock_init+0x48>)
    4316:	f006 fb97 	bl	aa48 <printk>
    431a:	21bd      	movs	r1, #189	; 0xbd
    431c:	4628      	mov	r0, r5
    431e:	f006 fcec 	bl	acfa <assert_post_action>
    4322:	e7e8      	b.n	42f6 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4324:	4805      	ldr	r0, [pc, #20]	; (433c <nrfx_clock_init+0x4c>)
    return err_code;
    4326:	e7f0      	b.n	430a <nrfx_clock_init+0x1a>
    4328:	20000b44 	.word	0x20000b44
    432c:	0bad0000 	.word	0x0bad0000
    4330:	0000c67c 	.word	0x0000c67c
    4334:	0000c6bc 	.word	0x0000c6bc
    4338:	0000bc60 	.word	0x0000bc60
    433c:	0bad000c 	.word	0x0bad000c

00004340 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4340:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4342:	4b0b      	ldr	r3, [pc, #44]	; (4370 <nrfx_clock_enable+0x30>)
    4344:	791b      	ldrb	r3, [r3, #4]
    4346:	b123      	cbz	r3, 4352 <nrfx_clock_enable+0x12>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4348:	2000      	movs	r0, #0
    434a:	f7fd fc2d 	bl	1ba8 <arch_irq_is_enabled>
    434e:	b160      	cbz	r0, 436a <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    4350:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4352:	4c08      	ldr	r4, [pc, #32]	; (4374 <nrfx_clock_enable+0x34>)
    4354:	23d6      	movs	r3, #214	; 0xd6
    4356:	4622      	mov	r2, r4
    4358:	4907      	ldr	r1, [pc, #28]	; (4378 <nrfx_clock_enable+0x38>)
    435a:	4808      	ldr	r0, [pc, #32]	; (437c <nrfx_clock_enable+0x3c>)
    435c:	f006 fb74 	bl	aa48 <printk>
    4360:	21d6      	movs	r1, #214	; 0xd6
    4362:	4620      	mov	r0, r4
    4364:	f006 fcc9 	bl	acfa <assert_post_action>
    4368:	e7ee      	b.n	4348 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    436a:	f7fd fbf9 	bl	1b60 <arch_irq_enable>
}
    436e:	e7ef      	b.n	4350 <nrfx_clock_enable+0x10>
    4370:	20000b44 	.word	0x20000b44
    4374:	0000c67c 	.word	0x0000c67c
    4378:	0000c6cc 	.word	0x0000c6cc
    437c:	0000bc60 	.word	0x0000bc60

00004380 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    4380:	b538      	push	{r3, r4, r5, lr}
    4382:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4384:	4b2a      	ldr	r3, [pc, #168]	; (4430 <nrfx_clock_start+0xb0>)
    4386:	791b      	ldrb	r3, [r3, #4]
    4388:	b183      	cbz	r3, 43ac <nrfx_clock_start+0x2c>
    switch (domain)
    438a:	b1ec      	cbz	r4, 43c8 <nrfx_clock_start+0x48>
    438c:	2c01      	cmp	r4, #1
    438e:	d044      	beq.n	441a <nrfx_clock_start+0x9a>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4390:	4c28      	ldr	r4, [pc, #160]	; (4434 <nrfx_clock_start+0xb4>)
    4392:	f44f 73a2 	mov.w	r3, #324	; 0x144
    4396:	4622      	mov	r2, r4
    4398:	4927      	ldr	r1, [pc, #156]	; (4438 <nrfx_clock_start+0xb8>)
    439a:	4828      	ldr	r0, [pc, #160]	; (443c <nrfx_clock_start+0xbc>)
    439c:	f006 fb54 	bl	aa48 <printk>
    43a0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    43a4:	4620      	mov	r0, r4
    43a6:	f006 fca8 	bl	acfa <assert_post_action>
            break;
    }
}
    43aa:	e02d      	b.n	4408 <nrfx_clock_start+0x88>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    43ac:	4d21      	ldr	r5, [pc, #132]	; (4434 <nrfx_clock_start+0xb4>)
    43ae:	f44f 7389 	mov.w	r3, #274	; 0x112
    43b2:	462a      	mov	r2, r5
    43b4:	4922      	ldr	r1, [pc, #136]	; (4440 <nrfx_clock_start+0xc0>)
    43b6:	4821      	ldr	r0, [pc, #132]	; (443c <nrfx_clock_start+0xbc>)
    43b8:	f006 fb46 	bl	aa48 <printk>
    43bc:	f44f 7189 	mov.w	r1, #274	; 0x112
    43c0:	4628      	mov	r0, r5
    43c2:	f006 fc9a 	bl	acfa <assert_post_action>
    43c6:	e7e0      	b.n	438a <nrfx_clock_start+0xa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    43c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    43cc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    43d0:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    43d4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    43d8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    43dc:	d115      	bne.n	440a <nrfx_clock_start+0x8a>
    return false;
    43de:	2200      	movs	r2, #0
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    43e0:	b10a      	cbz	r2, 43e6 <nrfx_clock_start+0x66>
    43e2:	2b01      	cmp	r3, #1
    43e4:	d013      	beq.n	440e <nrfx_clock_start+0x8e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    43e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43ea:	2200      	movs	r2, #0
    43ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43f0:	4b14      	ldr	r3, [pc, #80]	; (4444 <nrfx_clock_start+0xc4>)
    43f2:	2200      	movs	r2, #0
    43f4:	601a      	str	r2, [r3, #0]
    43f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    43f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43fc:	2202      	movs	r2, #2
    43fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4402:	3308      	adds	r3, #8
    4404:	2201      	movs	r2, #1
    4406:	601a      	str	r2, [r3, #0]
}
    4408:	bd38      	pop	{r3, r4, r5, pc}
                return true;
    440a:	2201      	movs	r2, #1
    440c:	e7e8      	b.n	43e0 <nrfx_clock_start+0x60>
    p_reg->LFCLKSRC = (uint32_t)(source);
    440e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4412:	2201      	movs	r2, #1
    4414:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4418:	e7ea      	b.n	43f0 <nrfx_clock_start+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    441a:	4b0b      	ldr	r3, [pc, #44]	; (4448 <nrfx_clock_start+0xc8>)
    441c:	2200      	movs	r2, #0
    441e:	601a      	str	r2, [r3, #0]
    4420:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4426:	2201      	movs	r2, #1
    4428:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    442c:	601a      	str	r2, [r3, #0]
}
    442e:	e7eb      	b.n	4408 <nrfx_clock_start+0x88>
    4430:	20000b44 	.word	0x20000b44
    4434:	0000c67c 	.word	0x0000c67c
    4438:	0000bc5c 	.word	0x0000bc5c
    443c:	0000bc60 	.word	0x0000bc60
    4440:	0000c6cc 	.word	0x0000c6cc
    4444:	40000104 	.word	0x40000104
    4448:	40000100 	.word	0x40000100

0000444c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    444c:	b570      	push	{r4, r5, r6, lr}
    444e:	b082      	sub	sp, #8
    4450:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4452:	4b5e      	ldr	r3, [pc, #376]	; (45cc <nrfx_clock_stop+0x180>)
    4454:	791b      	ldrb	r3, [r3, #4]
    4456:	b183      	cbz	r3, 447a <nrfx_clock_stop+0x2e>
    switch (domain)
    4458:	b1ec      	cbz	r4, 4496 <nrfx_clock_stop+0x4a>
    445a:	2c01      	cmp	r4, #1
    445c:	d02d      	beq.n	44ba <nrfx_clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    445e:	4c5c      	ldr	r4, [pc, #368]	; (45d0 <nrfx_clock_stop+0x184>)
    4460:	f240 1367 	movw	r3, #359	; 0x167
    4464:	4622      	mov	r2, r4
    4466:	495b      	ldr	r1, [pc, #364]	; (45d4 <nrfx_clock_stop+0x188>)
    4468:	485b      	ldr	r0, [pc, #364]	; (45d8 <nrfx_clock_stop+0x18c>)
    446a:	f006 faed 	bl	aa48 <printk>
    446e:	f240 1167 	movw	r1, #359	; 0x167
    4472:	4620      	mov	r0, r4
    4474:	f006 fc41 	bl	acfa <assert_post_action>
            return;
    4478:	e0a1      	b.n	45be <nrfx_clock_stop+0x172>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    447a:	4d55      	ldr	r5, [pc, #340]	; (45d0 <nrfx_clock_stop+0x184>)
    447c:	f240 134b 	movw	r3, #331	; 0x14b
    4480:	462a      	mov	r2, r5
    4482:	4956      	ldr	r1, [pc, #344]	; (45dc <nrfx_clock_stop+0x190>)
    4484:	4854      	ldr	r0, [pc, #336]	; (45d8 <nrfx_clock_stop+0x18c>)
    4486:	f006 fadf 	bl	aa48 <printk>
    448a:	f240 114b 	movw	r1, #331	; 0x14b
    448e:	4628      	mov	r0, r5
    4490:	f006 fc33 	bl	acfa <assert_post_action>
    4494:	e7e0      	b.n	4458 <nrfx_clock_stop+0xc>
    p_reg->INTENCLR = mask;
    4496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    449a:	2202      	movs	r2, #2
    449c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44a0:	f503 7382 	add.w	r3, r3, #260	; 0x104
    44a4:	2200      	movs	r2, #0
    44a6:	601a      	str	r2, [r3, #0]
    44a8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44aa:	4b4d      	ldr	r3, [pc, #308]	; (45e0 <nrfx_clock_stop+0x194>)
    44ac:	2201      	movs	r2, #1
    44ae:	601a      	str	r2, [r3, #0]
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    44b0:	2c01      	cmp	r4, #1
    44b2:	d00f      	beq.n	44d4 <nrfx_clock_stop+0x88>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    44b4:	f242 7510 	movw	r5, #10000	; 0x2710
    44b8:	e05f      	b.n	457a <nrfx_clock_stop+0x12e>
    p_reg->INTENCLR = mask;
    44ba:	2301      	movs	r3, #1
    44bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    44c0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44c4:	f502 7280 	add.w	r2, r2, #256	; 0x100
    44c8:	2100      	movs	r1, #0
    44ca:	6011      	str	r1, [r2, #0]
    44cc:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44ce:	4a45      	ldr	r2, [pc, #276]	; (45e4 <nrfx_clock_stop+0x198>)
    44d0:	6013      	str	r3, [r2, #0]
}
    44d2:	e7ed      	b.n	44b0 <nrfx_clock_stop+0x64>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    44d4:	2301      	movs	r3, #1
    44d6:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    44da:	f242 7510 	movw	r5, #10000	; 0x2710
    44de:	e018      	b.n	4512 <nrfx_clock_stop+0xc6>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    44e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    44e4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    44e8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    44ec:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    44f0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    44f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    44f8:	d12d      	bne.n	4556 <nrfx_clock_stop+0x10a>
    return false;
    44fa:	2300      	movs	r3, #0
    44fc:	2b00      	cmp	r3, #0
    44fe:	d05c      	beq.n	45ba <nrfx_clock_stop+0x16e>
    4500:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4504:	2b01      	cmp	r3, #1
    4506:	d158      	bne.n	45ba <nrfx_clock_stop+0x16e>
    4508:	2001      	movs	r0, #1
    450a:	f007 f89d 	bl	b648 <nrfx_busy_wait>
    450e:	3d01      	subs	r5, #1
    4510:	d053      	beq.n	45ba <nrfx_clock_stop+0x16e>
    switch (domain)
    4512:	2c00      	cmp	r4, #0
    4514:	d0e4      	beq.n	44e0 <nrfx_clock_stop+0x94>
    4516:	2c01      	cmp	r4, #1
    4518:	d00e      	beq.n	4538 <nrfx_clock_stop+0xec>
            NRFX_ASSERT(0);
    451a:	4e33      	ldr	r6, [pc, #204]	; (45e8 <nrfx_clock_stop+0x19c>)
    451c:	f44f 734f 	mov.w	r3, #828	; 0x33c
    4520:	4632      	mov	r2, r6
    4522:	492c      	ldr	r1, [pc, #176]	; (45d4 <nrfx_clock_stop+0x188>)
    4524:	482c      	ldr	r0, [pc, #176]	; (45d8 <nrfx_clock_stop+0x18c>)
    4526:	f006 fa8f 	bl	aa48 <printk>
    452a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    452e:	4630      	mov	r0, r6
    4530:	f006 fbe3 	bl	acfa <assert_post_action>
            return false;
    4534:	2300      	movs	r3, #0
    4536:	e7e1      	b.n	44fc <nrfx_clock_stop+0xb0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    453c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    4540:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4544:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4548:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    454c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4550:	d103      	bne.n	455a <nrfx_clock_stop+0x10e>
    return false;
    4552:	2300      	movs	r3, #0
    4554:	e7d2      	b.n	44fc <nrfx_clock_stop+0xb0>
                return true;
    4556:	2301      	movs	r3, #1
    4558:	e7d0      	b.n	44fc <nrfx_clock_stop+0xb0>
                return true;
    455a:	2301      	movs	r3, #1
    455c:	e7ce      	b.n	44fc <nrfx_clock_stop+0xb0>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    455e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4562:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4566:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    456a:	d122      	bne.n	45b2 <nrfx_clock_stop+0x166>
    return false;
    456c:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    456e:	b323      	cbz	r3, 45ba <nrfx_clock_stop+0x16e>
    4570:	2001      	movs	r0, #1
    4572:	f007 f869 	bl	b648 <nrfx_busy_wait>
    4576:	3d01      	subs	r5, #1
    4578:	d01f      	beq.n	45ba <nrfx_clock_stop+0x16e>
    switch (domain)
    457a:	2c00      	cmp	r4, #0
    457c:	d0ef      	beq.n	455e <nrfx_clock_stop+0x112>
    457e:	2c01      	cmp	r4, #1
    4580:	d00e      	beq.n	45a0 <nrfx_clock_stop+0x154>
            NRFX_ASSERT(0);
    4582:	4e19      	ldr	r6, [pc, #100]	; (45e8 <nrfx_clock_stop+0x19c>)
    4584:	f44f 734f 	mov.w	r3, #828	; 0x33c
    4588:	4632      	mov	r2, r6
    458a:	4912      	ldr	r1, [pc, #72]	; (45d4 <nrfx_clock_stop+0x188>)
    458c:	4812      	ldr	r0, [pc, #72]	; (45d8 <nrfx_clock_stop+0x18c>)
    458e:	f006 fa5b 	bl	aa48 <printk>
    4592:	f44f 714f 	mov.w	r1, #828	; 0x33c
    4596:	4630      	mov	r0, r6
    4598:	f006 fbaf 	bl	acfa <assert_post_action>
            return false;
    459c:	2300      	movs	r3, #0
    459e:	e7e6      	b.n	456e <nrfx_clock_stop+0x122>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    45a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    45a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    45ac:	d103      	bne.n	45b6 <nrfx_clock_stop+0x16a>
    return false;
    45ae:	2300      	movs	r3, #0
    45b0:	e7dd      	b.n	456e <nrfx_clock_stop+0x122>
                return true;
    45b2:	2301      	movs	r3, #1
    45b4:	e7db      	b.n	456e <nrfx_clock_stop+0x122>
                return true;
    45b6:	2301      	movs	r3, #1
    45b8:	e7d9      	b.n	456e <nrfx_clock_stop+0x122>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    45ba:	2c01      	cmp	r4, #1
    45bc:	d001      	beq.n	45c2 <nrfx_clock_stop+0x176>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    45be:	b002      	add	sp, #8
    45c0:	bd70      	pop	{r4, r5, r6, pc}
            m_clock_cb.hfclk_started = false;
    45c2:	4b02      	ldr	r3, [pc, #8]	; (45cc <nrfx_clock_stop+0x180>)
    45c4:	2200      	movs	r2, #0
    45c6:	715a      	strb	r2, [r3, #5]
    45c8:	e7f9      	b.n	45be <nrfx_clock_stop+0x172>
    45ca:	bf00      	nop
    45cc:	20000b44 	.word	0x20000b44
    45d0:	0000c67c 	.word	0x0000c67c
    45d4:	0000bc5c 	.word	0x0000bc5c
    45d8:	0000bc60 	.word	0x0000bc60
    45dc:	0000c6cc 	.word	0x0000c6cc
    45e0:	4000000c 	.word	0x4000000c
    45e4:	40000004 	.word	0x40000004
    45e8:	0000c6ec 	.word	0x0000c6ec

000045ec <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    45ec:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    45ee:	4b1b      	ldr	r3, [pc, #108]	; (465c <nrfx_power_clock_irq_handler+0x70>)
    45f0:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    45f2:	b183      	cbz	r3, 4616 <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45f4:	4b19      	ldr	r3, [pc, #100]	; (465c <nrfx_power_clock_irq_handler+0x70>)
    45f6:	2200      	movs	r2, #0
    45f8:	601a      	str	r2, [r3, #0]
    45fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    45fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4600:	2201      	movs	r2, #1
    4602:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4606:	4b16      	ldr	r3, [pc, #88]	; (4660 <nrfx_power_clock_irq_handler+0x74>)
    4608:	795b      	ldrb	r3, [r3, #5]
    460a:	b923      	cbnz	r3, 4616 <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    460c:	4b14      	ldr	r3, [pc, #80]	; (4660 <nrfx_power_clock_irq_handler+0x74>)
    460e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4610:	681b      	ldr	r3, [r3, #0]
    4612:	2000      	movs	r0, #0
    4614:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4616:	4b13      	ldr	r3, [pc, #76]	; (4664 <nrfx_power_clock_irq_handler+0x78>)
    4618:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    461a:	b903      	cbnz	r3, 461e <nrfx_power_clock_irq_handler+0x32>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    461c:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    461e:	4b11      	ldr	r3, [pc, #68]	; (4664 <nrfx_power_clock_irq_handler+0x78>)
    4620:	2200      	movs	r2, #0
    4622:	601a      	str	r2, [r3, #0]
    4624:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    462a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    462e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4632:	f012 0f03 	tst.w	r2, #3
    4636:	d107      	bne.n	4648 <nrfx_power_clock_irq_handler+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4638:	2301      	movs	r3, #1
    463a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    463e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4642:	3208      	adds	r2, #8
    4644:	6013      	str	r3, [r2, #0]
}
    4646:	e7e9      	b.n	461c <nrfx_power_clock_irq_handler+0x30>
    p_reg->INTENCLR = mask;
    4648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    464c:	2202      	movs	r2, #2
    464e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4652:	4b03      	ldr	r3, [pc, #12]	; (4660 <nrfx_power_clock_irq_handler+0x74>)
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	2001      	movs	r0, #1
    4658:	4798      	blx	r3
}
    465a:	e7df      	b.n	461c <nrfx_power_clock_irq_handler+0x30>
    465c:	40000100 	.word	0x40000100
    4660:	20000b44 	.word	0x20000b44
    4664:	40000104 	.word	0x40000104

00004668 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4668:	3008      	adds	r0, #8
    466a:	4b03      	ldr	r3, [pc, #12]	; (4678 <pin_in_use+0x10>)
    466c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4670:	f000 0001 	and.w	r0, r0, #1
    4674:	4770      	bx	lr
    4676:	bf00      	nop
    4678:	20000058 	.word	0x20000058

0000467c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    467c:	3008      	adds	r0, #8
    467e:	4b03      	ldr	r3, [pc, #12]	; (468c <pin_in_use_by_te+0x10>)
    4680:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4684:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4688:	4770      	bx	lr
    468a:	bf00      	nop
    468c:	20000058 	.word	0x20000058

00004690 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4690:	3008      	adds	r0, #8
    4692:	4b04      	ldr	r3, [pc, #16]	; (46a4 <pin_has_trigger+0x14>)
    4694:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4698:	f010 001c 	ands.w	r0, r0, #28
    469c:	bf18      	it	ne
    469e:	2001      	movne	r0, #1
    46a0:	4770      	bx	lr
    46a2:	bf00      	nop
    46a4:	20000058 	.word	0x20000058

000046a8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46a8:	3008      	adds	r0, #8
    46aa:	4b03      	ldr	r3, [pc, #12]	; (46b8 <pin_is_output+0x10>)
    46ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    46b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    46b4:	4770      	bx	lr
    46b6:	bf00      	nop
    46b8:	20000058 	.word	0x20000058

000046bc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    46bc:	3008      	adds	r0, #8
    46be:	4b02      	ldr	r3, [pc, #8]	; (46c8 <pin_te_get+0xc>)
    46c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    46c4:	0b40      	lsrs	r0, r0, #13
    46c6:	4770      	bx	lr
    46c8:	20000058 	.word	0x20000058

000046cc <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    46cc:	2200      	movs	r2, #0
    46ce:	e004      	b.n	46da <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    46d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46d4:	4283      	cmp	r3, r0
    46d6:	d00f      	beq.n	46f8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    46d8:	3201      	adds	r2, #1
    46da:	2a2f      	cmp	r2, #47	; 0x2f
    46dc:	d80a      	bhi.n	46f4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    46de:	f102 0308 	add.w	r3, r2, #8
    46e2:	4906      	ldr	r1, [pc, #24]	; (46fc <handler_in_use+0x30>)
    46e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    46e8:	f413 7f80 	tst.w	r3, #256	; 0x100
    46ec:	d0f0      	beq.n	46d0 <handler_in_use+0x4>
    46ee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    46f2:	e7ef      	b.n	46d4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    46f4:	2000      	movs	r0, #0
    46f6:	4770      	bx	lr
            return true;
    46f8:	2001      	movs	r0, #1
}
    46fa:	4770      	bx	lr
    46fc:	20000058 	.word	0x20000058

00004700 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4700:	2300      	movs	r3, #0
    4702:	b113      	cbz	r3, 470a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    4704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4708:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    470a:	4a07      	ldr	r2, [pc, #28]	; (4728 <find_handler+0x28>)
    470c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    4710:	4282      	cmp	r2, r0
    4712:	d001      	beq.n	4718 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4714:	3301      	adds	r3, #1
    4716:	e7f4      	b.n	4702 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4718:	4a03      	ldr	r2, [pc, #12]	; (4728 <find_handler+0x28>)
    471a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    471e:	6852      	ldr	r2, [r2, #4]
    4720:	428a      	cmp	r2, r1
    4722:	d1f7      	bne.n	4714 <find_handler+0x14>
            return i;
    4724:	4618      	mov	r0, r3
    4726:	4770      	bx	lr
    4728:	20000058 	.word	0x20000058

0000472c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    472c:	3008      	adds	r0, #8
    472e:	4b06      	ldr	r3, [pc, #24]	; (4748 <channel_handler_get+0x1c>)
    4730:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4734:	f410 7f80 	tst.w	r0, #256	; 0x100
    4738:	d004      	beq.n	4744 <channel_handler_get+0x18>
    473a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    473e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4742:	4770      	bx	lr
        return NULL;
    4744:	2000      	movs	r0, #0
}
    4746:	4770      	bx	lr
    4748:	20000058 	.word	0x20000058

0000474c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    474c:	b570      	push	{r4, r5, r6, lr}
    474e:	4604      	mov	r4, r0
    4750:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    4752:	f7ff ffeb 	bl	472c <channel_handler_get>

    if (handler)
    4756:	b120      	cbz	r0, 4762 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    4758:	6806      	ldr	r6, [r0, #0]
    475a:	6842      	ldr	r2, [r0, #4]
    475c:	4629      	mov	r1, r5
    475e:	4620      	mov	r0, r4
    4760:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    4762:	4b04      	ldr	r3, [pc, #16]	; (4774 <call_handler+0x28>)
    4764:	689b      	ldr	r3, [r3, #8]
    4766:	b123      	cbz	r3, 4772 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4768:	4a02      	ldr	r2, [pc, #8]	; (4774 <call_handler+0x28>)
    476a:	68d2      	ldr	r2, [r2, #12]
    476c:	4629      	mov	r1, r5
    476e:	4620      	mov	r0, r4
    4770:	4798      	blx	r3
    }
}
    4772:	bd70      	pop	{r4, r5, r6, pc}
    4774:	20000058 	.word	0x20000058

00004778 <latch_pending_read_and_check>:
    }
}

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    4778:	b410      	push	{r4}
    477a:	b083      	sub	sp, #12
    477c:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    477e:	4b12      	ldr	r3, [pc, #72]	; (47c8 <latch_pending_read_and_check+0x50>)
    4780:	e893 0003 	ldmia.w	r3, {r0, r1}
    4784:	ab02      	add	r3, sp, #8
    4786:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    478a:	4620      	mov	r0, r4
    478c:	2300      	movs	r3, #0
    478e:	e00b      	b.n	47a8 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    4790:	aa02      	add	r2, sp, #8
    4792:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4796:	f852 2c08 	ldr.w	r2, [r2, #-8]
    479a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    479e:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    47a2:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    47a6:	3301      	adds	r3, #1
    47a8:	2b01      	cmp	r3, #1
    47aa:	d9f1      	bls.n	4790 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    47ac:	2300      	movs	r3, #0
    47ae:	2b01      	cmp	r3, #1
    47b0:	d804      	bhi.n	47bc <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    47b2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    47b6:	b92a      	cbnz	r2, 47c4 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    47b8:	3301      	adds	r3, #1
    47ba:	e7f8      	b.n	47ae <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    47bc:	2000      	movs	r0, #0
}
    47be:	b003      	add	sp, #12
    47c0:	bc10      	pop	{r4}
    47c2:	4770      	bx	lr
            return true;
    47c4:	2001      	movs	r0, #1
    47c6:	e7fa      	b.n	47be <latch_pending_read_and_check+0x46>
    47c8:	0000bb60 	.word	0x0000bb60

000047cc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    47cc:	f100 0208 	add.w	r2, r0, #8
    47d0:	4b16      	ldr	r3, [pc, #88]	; (482c <release_handler+0x60>)
    47d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    47d6:	f413 7f80 	tst.w	r3, #256	; 0x100
    47da:	d026      	beq.n	482a <release_handler+0x5e>
{
    47dc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    47de:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    47e2:	4610      	mov	r0, r2
    47e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    47e8:	4a10      	ldr	r2, [pc, #64]	; (482c <release_handler+0x60>)
    47ea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    47ee:	4620      	mov	r0, r4
    47f0:	f7ff ff6c 	bl	46cc <handler_in_use>
    47f4:	b100      	cbz	r0, 47f8 <release_handler+0x2c>
}
    47f6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    47f8:	480c      	ldr	r0, [pc, #48]	; (482c <release_handler+0x60>)
    47fa:	2300      	movs	r3, #0
    47fc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4800:	4621      	mov	r1, r4
    4802:	3074      	adds	r0, #116	; 0x74
    4804:	f7ff fd50 	bl	42a8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4808:	4b09      	ldr	r3, [pc, #36]	; (4830 <release_handler+0x64>)
    480a:	4298      	cmp	r0, r3
    480c:	d0f3      	beq.n	47f6 <release_handler+0x2a>
    480e:	4c09      	ldr	r4, [pc, #36]	; (4834 <release_handler+0x68>)
    4810:	f44f 7399 	mov.w	r3, #306	; 0x132
    4814:	4622      	mov	r2, r4
    4816:	4908      	ldr	r1, [pc, #32]	; (4838 <release_handler+0x6c>)
    4818:	4808      	ldr	r0, [pc, #32]	; (483c <release_handler+0x70>)
    481a:	f006 f915 	bl	aa48 <printk>
    481e:	f44f 7199 	mov.w	r1, #306	; 0x132
    4822:	4620      	mov	r0, r4
    4824:	f006 fa69 	bl	acfa <assert_post_action>
    4828:	e7e5      	b.n	47f6 <release_handler+0x2a>
    482a:	4770      	bx	lr
    482c:	20000058 	.word	0x20000058
    4830:	0bad0000 	.word	0x0bad0000
    4834:	0000c720 	.word	0x0000c720
    4838:	0000c760 	.word	0x0000c760
    483c:	0000bc60 	.word	0x0000bc60

00004840 <pin_handler_trigger_uninit>:
{
    4840:	b510      	push	{r4, lr}
    4842:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    4844:	f7ff ff1a 	bl	467c <pin_in_use_by_te>
    4848:	b140      	cbz	r0, 485c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    484a:	4620      	mov	r0, r4
    484c:	f7ff ff36 	bl	46bc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4850:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    4854:	4b06      	ldr	r3, [pc, #24]	; (4870 <pin_handler_trigger_uninit+0x30>)
    4856:	2200      	movs	r2, #0
    4858:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    485c:	4620      	mov	r0, r4
    485e:	f7ff ffb5 	bl	47cc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4862:	3408      	adds	r4, #8
    4864:	4b03      	ldr	r3, [pc, #12]	; (4874 <pin_handler_trigger_uninit+0x34>)
    4866:	2200      	movs	r2, #0
    4868:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    486c:	bd10      	pop	{r4, pc}
    486e:	bf00      	nop
    4870:	40006000 	.word	0x40006000
    4874:	20000058 	.word	0x20000058

00004878 <pin_handler_set>:
{
    4878:	b570      	push	{r4, r5, r6, lr}
    487a:	b082      	sub	sp, #8
    487c:	4606      	mov	r6, r0
    487e:	460c      	mov	r4, r1
    4880:	4615      	mov	r5, r2
    release_handler(pin);
    4882:	f7ff ffa3 	bl	47cc <release_handler>
    if (!handler)
    4886:	b324      	cbz	r4, 48d2 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    4888:	4629      	mov	r1, r5
    488a:	4620      	mov	r0, r4
    488c:	f7ff ff38 	bl	4700 <find_handler>
    if (handler_id < 0)
    4890:	1e03      	subs	r3, r0, #0
    4892:	db13      	blt.n	48bc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    4894:	4a10      	ldr	r2, [pc, #64]	; (48d8 <pin_handler_set+0x60>)
    4896:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    489a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    489e:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    48a0:	025b      	lsls	r3, r3, #9
    48a2:	b29b      	uxth	r3, r3
    48a4:	f106 0008 	add.w	r0, r6, #8
    48a8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    48ac:	430b      	orrs	r3, r1
    48ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    48b2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    48b6:	4809      	ldr	r0, [pc, #36]	; (48dc <pin_handler_set+0x64>)
}
    48b8:	b002      	add	sp, #8
    48ba:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    48bc:	f10d 0107 	add.w	r1, sp, #7
    48c0:	4807      	ldr	r0, [pc, #28]	; (48e0 <pin_handler_set+0x68>)
    48c2:	f7ff fccd 	bl	4260 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    48c6:	4b05      	ldr	r3, [pc, #20]	; (48dc <pin_handler_set+0x64>)
    48c8:	4298      	cmp	r0, r3
    48ca:	d1f5      	bne.n	48b8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    48cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    48d0:	e7e0      	b.n	4894 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    48d2:	4802      	ldr	r0, [pc, #8]	; (48dc <pin_handler_set+0x64>)
    48d4:	e7f0      	b.n	48b8 <pin_handler_set+0x40>
    48d6:	bf00      	nop
    48d8:	20000058 	.word	0x20000058
    48dc:	0bad0000 	.word	0x0bad0000
    48e0:	200000cc 	.word	0x200000cc

000048e4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    48e4:	b538      	push	{r3, r4, r5, lr}
    48e6:	4604      	mov	r4, r0
    while (mask)
    48e8:	b1cc      	cbz	r4, 491e <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    48ea:	fa94 f3a4 	rbit	r3, r4
    48ee:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    48f2:	2201      	movs	r2, #1
    48f4:	409a      	lsls	r2, r3
    48f6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    48fa:	4a09      	ldr	r2, [pc, #36]	; (4920 <gpiote_evt_handle+0x3c>)
    48fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4900:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    4904:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    490c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    4910:	f006 feb4 	bl	b67c <gpiote_polarity_to_trigger>
    4914:	4601      	mov	r1, r0
    4916:	4628      	mov	r0, r5
    4918:	f7ff ff18 	bl	474c <call_handler>
    491c:	e7e4      	b.n	48e8 <gpiote_evt_handle+0x4>
    }
}
    491e:	bd38      	pop	{r3, r4, r5, pc}
    4920:	40006000 	.word	0x40006000

00004924 <next_sense_cond_call_handler>:
{
    4924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4928:	4604      	mov	r4, r0
    492a:	460d      	mov	r5, r1
    492c:	4616      	mov	r6, r2
    if (is_level(trigger))
    492e:	4608      	mov	r0, r1
    4930:	f006 fea6 	bl	b680 <is_level>
    4934:	bb60      	cbnz	r0, 4990 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4936:	2e02      	cmp	r6, #2
    4938:	f000 80f5 	beq.w	4b26 <next_sense_cond_call_handler+0x202>
    493c:	f04f 0802 	mov.w	r8, #2
    switch (port)
    4940:	0963      	lsrs	r3, r4, #5
    4942:	f000 80f3 	beq.w	4b2c <next_sense_cond_call_handler+0x208>
    4946:	2b01      	cmp	r3, #1
    4948:	f040 80f3 	bne.w	4b32 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    494c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4950:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4954:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4956:	f013 0f01 	tst.w	r3, #1
    495a:	f000 80ec 	beq.w	4b36 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    495e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4962:	0963      	lsrs	r3, r4, #5
    4964:	f000 80f5 	beq.w	4b52 <next_sense_cond_call_handler+0x22e>
    4968:	2b01      	cmp	r3, #1
    496a:	f000 80f5 	beq.w	4b58 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    496e:	f8df 922c 	ldr.w	r9, [pc, #556]	; 4b9c <next_sense_cond_call_handler+0x278>
    4972:	f240 232e 	movw	r3, #558	; 0x22e
    4976:	464a      	mov	r2, r9
    4978:	4986      	ldr	r1, [pc, #536]	; (4b94 <next_sense_cond_call_handler+0x270>)
    497a:	4887      	ldr	r0, [pc, #540]	; (4b98 <next_sense_cond_call_handler+0x274>)
    497c:	f006 f864 	bl	aa48 <printk>
    4980:	f240 212e 	movw	r1, #558	; 0x22e
    4984:	4648      	mov	r0, r9
    4986:	f006 f9b8 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    498a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    498e:	e0e4      	b.n	4b5a <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    4990:	4629      	mov	r1, r5
    4992:	4620      	mov	r0, r4
    4994:	f7ff feda 	bl	474c <call_handler>
    switch (port)
    4998:	0963      	lsrs	r3, r4, #5
    499a:	d01f      	beq.n	49dc <next_sense_cond_call_handler+0xb8>
    499c:	2b01      	cmp	r3, #1
    499e:	d120      	bne.n	49e2 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    49a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    49a4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    49a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    49aa:	f013 0f01 	tst.w	r3, #1
    49ae:	d01a      	beq.n	49e6 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    49b0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    49b4:	0963      	lsrs	r3, r4, #5
    49b6:	d024      	beq.n	4a02 <next_sense_cond_call_handler+0xde>
    49b8:	2b01      	cmp	r3, #1
    49ba:	d025      	beq.n	4a08 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    49bc:	4f77      	ldr	r7, [pc, #476]	; (4b9c <next_sense_cond_call_handler+0x278>)
    49be:	f240 232e 	movw	r3, #558	; 0x22e
    49c2:	463a      	mov	r2, r7
    49c4:	4973      	ldr	r1, [pc, #460]	; (4b94 <next_sense_cond_call_handler+0x270>)
    49c6:	4874      	ldr	r0, [pc, #464]	; (4b98 <next_sense_cond_call_handler+0x274>)
    49c8:	f006 f83e 	bl	aa48 <printk>
    49cc:	f240 212e 	movw	r1, #558	; 0x22e
    49d0:	4638      	mov	r0, r7
    49d2:	f006 f992 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    49d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    49da:	e016      	b.n	4a0a <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    49dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49e0:	e7e0      	b.n	49a4 <next_sense_cond_call_handler+0x80>
    switch (port)
    49e2:	2300      	movs	r3, #0
    49e4:	e7de      	b.n	49a4 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    49e6:	4d6d      	ldr	r5, [pc, #436]	; (4b9c <next_sense_cond_call_handler+0x278>)
    49e8:	f240 2329 	movw	r3, #553	; 0x229
    49ec:	462a      	mov	r2, r5
    49ee:	496c      	ldr	r1, [pc, #432]	; (4ba0 <next_sense_cond_call_handler+0x27c>)
    49f0:	4869      	ldr	r0, [pc, #420]	; (4b98 <next_sense_cond_call_handler+0x274>)
    49f2:	f006 f829 	bl	aa48 <printk>
    49f6:	f240 2129 	movw	r1, #553	; 0x229
    49fa:	4628      	mov	r0, r5
    49fc:	f006 f97d 	bl	acfa <assert_post_action>
    4a00:	e7d6      	b.n	49b0 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    4a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4a06:	e000      	b.n	4a0a <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a08:	4b66      	ldr	r3, [pc, #408]	; (4ba4 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a0a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4a0e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    4a12:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4a16:	429e      	cmp	r6, r3
    4a18:	f040 80af 	bne.w	4b7a <next_sense_cond_call_handler+0x256>
    switch (port)
    4a1c:	0963      	lsrs	r3, r4, #5
    4a1e:	d01f      	beq.n	4a60 <next_sense_cond_call_handler+0x13c>
    4a20:	2b01      	cmp	r3, #1
    4a22:	d120      	bne.n	4a66 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    4a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4a28:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4a2c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4a2e:	f013 0f01 	tst.w	r3, #1
    4a32:	d01a      	beq.n	4a6a <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    4a34:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a38:	0963      	lsrs	r3, r4, #5
    4a3a:	d024      	beq.n	4a86 <next_sense_cond_call_handler+0x162>
    4a3c:	2b01      	cmp	r3, #1
    4a3e:	d025      	beq.n	4a8c <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    4a40:	4f56      	ldr	r7, [pc, #344]	; (4b9c <next_sense_cond_call_handler+0x278>)
    4a42:	f240 232e 	movw	r3, #558	; 0x22e
    4a46:	463a      	mov	r2, r7
    4a48:	4952      	ldr	r1, [pc, #328]	; (4b94 <next_sense_cond_call_handler+0x270>)
    4a4a:	4853      	ldr	r0, [pc, #332]	; (4b98 <next_sense_cond_call_handler+0x274>)
    4a4c:	f005 fffc 	bl	aa48 <printk>
    4a50:	f240 212e 	movw	r1, #558	; 0x22e
    4a54:	4638      	mov	r0, r7
    4a56:	f006 f950 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    4a5a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4a5e:	e016      	b.n	4a8e <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    4a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a64:	e7e0      	b.n	4a28 <next_sense_cond_call_handler+0x104>
    switch (port)
    4a66:	2300      	movs	r3, #0
    4a68:	e7de      	b.n	4a28 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4a6a:	4d4c      	ldr	r5, [pc, #304]	; (4b9c <next_sense_cond_call_handler+0x278>)
    4a6c:	f240 2329 	movw	r3, #553	; 0x229
    4a70:	462a      	mov	r2, r5
    4a72:	494b      	ldr	r1, [pc, #300]	; (4ba0 <next_sense_cond_call_handler+0x27c>)
    4a74:	4848      	ldr	r0, [pc, #288]	; (4b98 <next_sense_cond_call_handler+0x274>)
    4a76:	f005 ffe7 	bl	aa48 <printk>
    4a7a:	f240 2129 	movw	r1, #553	; 0x229
    4a7e:	4628      	mov	r0, r5
    4a80:	f006 f93b 	bl	acfa <assert_post_action>
    4a84:	e7d6      	b.n	4a34 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    4a86:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4a8a:	e000      	b.n	4a8e <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a8c:	4945      	ldr	r1, [pc, #276]	; (4ba4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a8e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4a92:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4a96:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    4a9e:	0963      	lsrs	r3, r4, #5
    4aa0:	d01f      	beq.n	4ae2 <next_sense_cond_call_handler+0x1be>
    4aa2:	2b01      	cmp	r3, #1
    4aa4:	d120      	bne.n	4ae8 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    4aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4aaa:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4aae:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ab0:	f013 0f01 	tst.w	r3, #1
    4ab4:	d01a      	beq.n	4aec <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    4ab6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4aba:	0964      	lsrs	r4, r4, #5
    4abc:	d024      	beq.n	4b08 <next_sense_cond_call_handler+0x1e4>
    4abe:	2c01      	cmp	r4, #1
    4ac0:	d025      	beq.n	4b0e <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    4ac2:	4c36      	ldr	r4, [pc, #216]	; (4b9c <next_sense_cond_call_handler+0x278>)
    4ac4:	f240 232e 	movw	r3, #558	; 0x22e
    4ac8:	4622      	mov	r2, r4
    4aca:	4932      	ldr	r1, [pc, #200]	; (4b94 <next_sense_cond_call_handler+0x270>)
    4acc:	4832      	ldr	r0, [pc, #200]	; (4b98 <next_sense_cond_call_handler+0x274>)
    4ace:	f005 ffbb 	bl	aa48 <printk>
    4ad2:	f240 212e 	movw	r1, #558	; 0x22e
    4ad6:	4620      	mov	r0, r4
    4ad8:	f006 f90f 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    4adc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4ae0:	e016      	b.n	4b10 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    4ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ae6:	e7e0      	b.n	4aaa <next_sense_cond_call_handler+0x186>
    switch (port)
    4ae8:	2300      	movs	r3, #0
    4aea:	e7de      	b.n	4aaa <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4aec:	4d2b      	ldr	r5, [pc, #172]	; (4b9c <next_sense_cond_call_handler+0x278>)
    4aee:	f240 2329 	movw	r3, #553	; 0x229
    4af2:	462a      	mov	r2, r5
    4af4:	492a      	ldr	r1, [pc, #168]	; (4ba0 <next_sense_cond_call_handler+0x27c>)
    4af6:	4828      	ldr	r0, [pc, #160]	; (4b98 <next_sense_cond_call_handler+0x274>)
    4af8:	f005 ffa6 	bl	aa48 <printk>
    4afc:	f240 2129 	movw	r1, #553	; 0x229
    4b00:	4628      	mov	r0, r5
    4b02:	f006 f8fa 	bl	acfa <assert_post_action>
    4b06:	e7d6      	b.n	4ab6 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    4b08:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4b0c:	e000      	b.n	4b10 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b0e:	4925      	ldr	r1, [pc, #148]	; (4ba4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b10:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4b14:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4b18:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b1c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4b20:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    4b24:	e029      	b.n	4b7a <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4b26:	f04f 0803 	mov.w	r8, #3
    4b2a:	e709      	b.n	4940 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    4b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b30:	e70e      	b.n	4950 <next_sense_cond_call_handler+0x2c>
    switch (port)
    4b32:	2300      	movs	r3, #0
    4b34:	e70c      	b.n	4950 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b36:	4f19      	ldr	r7, [pc, #100]	; (4b9c <next_sense_cond_call_handler+0x278>)
    4b38:	f240 2329 	movw	r3, #553	; 0x229
    4b3c:	463a      	mov	r2, r7
    4b3e:	4918      	ldr	r1, [pc, #96]	; (4ba0 <next_sense_cond_call_handler+0x27c>)
    4b40:	4815      	ldr	r0, [pc, #84]	; (4b98 <next_sense_cond_call_handler+0x274>)
    4b42:	f005 ff81 	bl	aa48 <printk>
    4b46:	f240 2129 	movw	r1, #553	; 0x229
    4b4a:	4638      	mov	r0, r7
    4b4c:	f006 f8d5 	bl	acfa <assert_post_action>
    4b50:	e705      	b.n	495e <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    4b52:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4b56:	e000      	b.n	4b5a <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b58:	4912      	ldr	r1, [pc, #72]	; (4ba4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b5a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    4b5e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    4b62:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4b6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4b6e:	2d03      	cmp	r5, #3
    4b70:	d007      	beq.n	4b82 <next_sense_cond_call_handler+0x25e>
    4b72:	2e02      	cmp	r6, #2
    4b74:	d003      	beq.n	4b7e <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4b76:	2e03      	cmp	r6, #3
    4b78:	d008      	beq.n	4b8c <next_sense_cond_call_handler+0x268>
}
    4b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4b7e:	2d01      	cmp	r5, #1
    4b80:	d1f9      	bne.n	4b76 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    4b82:	4629      	mov	r1, r5
    4b84:	4620      	mov	r0, r4
    4b86:	f7ff fde1 	bl	474c <call_handler>
}
    4b8a:	e7f6      	b.n	4b7a <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4b8c:	2d02      	cmp	r5, #2
    4b8e:	d1f4      	bne.n	4b7a <next_sense_cond_call_handler+0x256>
    4b90:	e7f7      	b.n	4b82 <next_sense_cond_call_handler+0x25e>
    4b92:	bf00      	nop
    4b94:	0000bc5c 	.word	0x0000bc5c
    4b98:	0000bc60 	.word	0x0000bc60
    4b9c:	0000c484 	.word	0x0000c484
    4ba0:	0000c4b8 	.word	0x0000c4b8
    4ba4:	50000300 	.word	0x50000300

00004ba8 <port_event_handle>:
{
    4ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bac:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4bae:	4a64      	ldr	r2, [pc, #400]	; (4d40 <port_event_handle+0x198>)
    4bb0:	466b      	mov	r3, sp
    4bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
    4bb6:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4bba:	2300      	movs	r3, #0
    4bbc:	a802      	add	r0, sp, #8
    4bbe:	e00b      	b.n	4bd8 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    4bc0:	aa04      	add	r2, sp, #16
    4bc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4bc6:	f852 2c10 	ldr.w	r2, [r2, #-16]
    4bca:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4bce:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4bd2:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4bd6:	3301      	adds	r3, #1
    4bd8:	2b01      	cmp	r3, #1
    4bda:	d9f1      	bls.n	4bc0 <port_event_handle+0x18>
    4bdc:	e0ab      	b.n	4d36 <port_event_handle+0x18e>
            mask = P0_FEATURE_PINS_PRESENT;
    4bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4be2:	e07f      	b.n	4ce4 <port_event_handle+0x13c>
    switch (port)
    4be4:	2300      	movs	r3, #0
    4be6:	e07d      	b.n	4ce4 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4be8:	4f56      	ldr	r7, [pc, #344]	; (4d44 <port_event_handle+0x19c>)
    4bea:	f240 2329 	movw	r3, #553	; 0x229
    4bee:	463a      	mov	r2, r7
    4bf0:	4955      	ldr	r1, [pc, #340]	; (4d48 <port_event_handle+0x1a0>)
    4bf2:	4856      	ldr	r0, [pc, #344]	; (4d4c <port_event_handle+0x1a4>)
    4bf4:	f005 ff28 	bl	aa48 <printk>
    4bf8:	f240 2129 	movw	r1, #553	; 0x229
    4bfc:	4638      	mov	r0, r7
    4bfe:	f006 f87c 	bl	acfa <assert_post_action>
    4c02:	e076      	b.n	4cf2 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    4c04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4c08:	e000      	b.n	4c0c <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c0a:	4b51      	ldr	r3, [pc, #324]	; (4d50 <port_event_handle+0x1a8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4c0c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    4c10:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    4c14:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4c18:	4631      	mov	r1, r6
    4c1a:	4620      	mov	r0, r4
    4c1c:	f7ff fe82 	bl	4924 <next_sense_cond_call_handler>
    switch (port)
    4c20:	0963      	lsrs	r3, r4, #5
    4c22:	d01f      	beq.n	4c64 <port_event_handle+0xbc>
    4c24:	2b01      	cmp	r3, #1
    4c26:	d120      	bne.n	4c6a <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    4c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4c2c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4c30:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c32:	f013 0f01 	tst.w	r3, #1
    4c36:	d01a      	beq.n	4c6e <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    4c38:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c3c:	0964      	lsrs	r4, r4, #5
    4c3e:	d024      	beq.n	4c8a <port_event_handle+0xe2>
    4c40:	2c01      	cmp	r4, #1
    4c42:	d025      	beq.n	4c90 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    4c44:	4c3f      	ldr	r4, [pc, #252]	; (4d44 <port_event_handle+0x19c>)
    4c46:	f240 232e 	movw	r3, #558	; 0x22e
    4c4a:	4622      	mov	r2, r4
    4c4c:	4941      	ldr	r1, [pc, #260]	; (4d54 <port_event_handle+0x1ac>)
    4c4e:	483f      	ldr	r0, [pc, #252]	; (4d4c <port_event_handle+0x1a4>)
    4c50:	f005 fefa 	bl	aa48 <printk>
    4c54:	f240 212e 	movw	r1, #558	; 0x22e
    4c58:	4620      	mov	r0, r4
    4c5a:	f006 f84e 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    4c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4c62:	e016      	b.n	4c92 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    4c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c68:	e7e0      	b.n	4c2c <port_event_handle+0x84>
    switch (port)
    4c6a:	2300      	movs	r3, #0
    4c6c:	e7de      	b.n	4c2c <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c6e:	4e35      	ldr	r6, [pc, #212]	; (4d44 <port_event_handle+0x19c>)
    4c70:	f240 2329 	movw	r3, #553	; 0x229
    4c74:	4632      	mov	r2, r6
    4c76:	4934      	ldr	r1, [pc, #208]	; (4d48 <port_event_handle+0x1a0>)
    4c78:	4834      	ldr	r0, [pc, #208]	; (4d4c <port_event_handle+0x1a4>)
    4c7a:	f005 fee5 	bl	aa48 <printk>
    4c7e:	f240 2129 	movw	r1, #553	; 0x229
    4c82:	4630      	mov	r0, r6
    4c84:	f006 f839 	bl	acfa <assert_post_action>
    4c88:	e7d6      	b.n	4c38 <port_event_handle+0x90>
        case 0: return NRF_P0;
    4c8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4c8e:	e000      	b.n	4c92 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c90:	4a2f      	ldr	r2, [pc, #188]	; (4d50 <port_event_handle+0x1a8>)
    reg->LATCH = (1 << pin_number);
    4c92:	2301      	movs	r3, #1
    4c94:	40b3      	lsls	r3, r6
    4c96:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    4c9a:	ab04      	add	r3, sp, #16
    4c9c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4ca0:	f853 4c08 	ldr.w	r4, [r3, #-8]
    4ca4:	2c00      	cmp	r4, #0
    4ca6:	d03b      	beq.n	4d20 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    4ca8:	fa94 f4a4 	rbit	r4, r4
    4cac:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4cb0:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4cb4:	f104 0208 	add.w	r2, r4, #8
    4cb8:	4b27      	ldr	r3, [pc, #156]	; (4d58 <port_event_handle+0x1b0>)
    4cba:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    4cbe:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4cc2:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    4cc4:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4cc8:	a802      	add	r0, sp, #8
    4cca:	2301      	movs	r3, #1
    4ccc:	fa03 f202 	lsl.w	r2, r3, r2
    4cd0:	5c43      	ldrb	r3, [r0, r1]
    4cd2:	ea23 0302 	bic.w	r3, r3, r2
    4cd6:	5443      	strb	r3, [r0, r1]
    switch (port)
    4cd8:	0963      	lsrs	r3, r4, #5
    4cda:	d080      	beq.n	4bde <port_event_handle+0x36>
    4cdc:	2b01      	cmp	r3, #1
    4cde:	d181      	bne.n	4be4 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    4ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4ce4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4ce8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4cea:	f013 0f01 	tst.w	r3, #1
    4cee:	f43f af7b 	beq.w	4be8 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    4cf2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4cf6:	0963      	lsrs	r3, r4, #5
    4cf8:	d084      	beq.n	4c04 <port_event_handle+0x5c>
    4cfa:	2b01      	cmp	r3, #1
    4cfc:	d085      	beq.n	4c0a <port_event_handle+0x62>
            NRFX_ASSERT(0);
    4cfe:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4d44 <port_event_handle+0x19c>
    4d02:	f240 232e 	movw	r3, #558	; 0x22e
    4d06:	4642      	mov	r2, r8
    4d08:	4912      	ldr	r1, [pc, #72]	; (4d54 <port_event_handle+0x1ac>)
    4d0a:	4810      	ldr	r0, [pc, #64]	; (4d4c <port_event_handle+0x1a4>)
    4d0c:	f005 fe9c 	bl	aa48 <printk>
    4d10:	f240 212e 	movw	r1, #558	; 0x22e
    4d14:	4640      	mov	r0, r8
    4d16:	f005 fff0 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    4d1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d1e:	e775      	b.n	4c0c <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4d20:	3501      	adds	r5, #1
    4d22:	2d01      	cmp	r5, #1
    4d24:	d9b9      	bls.n	4c9a <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d26:	4b0d      	ldr	r3, [pc, #52]	; (4d5c <port_event_handle+0x1b4>)
    4d28:	2200      	movs	r2, #0
    4d2a:	601a      	str	r2, [r3, #0]
    4d2c:	681b      	ldr	r3, [r3, #0]
    } while (latch_pending_read_and_check(latch));
    4d2e:	a802      	add	r0, sp, #8
    4d30:	f7ff fd22 	bl	4778 <latch_pending_read_and_check>
    4d34:	b108      	cbz	r0, 4d3a <port_event_handle+0x192>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4d36:	2500      	movs	r5, #0
    4d38:	e7f3      	b.n	4d22 <port_event_handle+0x17a>
}
    4d3a:	b004      	add	sp, #16
    4d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d40:	0000bb60 	.word	0x0000bb60
    4d44:	0000c484 	.word	0x0000c484
    4d48:	0000c4b8 	.word	0x0000c4b8
    4d4c:	0000bc60 	.word	0x0000bc60
    4d50:	50000300 	.word	0x50000300
    4d54:	0000bc5c 	.word	0x0000bc5c
    4d58:	20000058 	.word	0x20000058
    4d5c:	4000617c 	.word	0x4000617c

00004d60 <nrfx_gpiote_input_configure>:
{
    4d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d64:	4604      	mov	r4, r0
    4d66:	4615      	mov	r5, r2
    4d68:	461e      	mov	r6, r3
    if (p_input_config)
    4d6a:	2900      	cmp	r1, #0
    4d6c:	d062      	beq.n	4e34 <nrfx_gpiote_input_configure+0xd4>
    4d6e:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    4d70:	f006 fc6e 	bl	b650 <pin_is_task_output>
    4d74:	2800      	cmp	r0, #0
    4d76:	f040 80cb 	bne.w	4f10 <nrfx_gpiote_input_configure+0x1b0>
    switch (port)
    4d7a:	0963      	lsrs	r3, r4, #5
    4d7c:	d020      	beq.n	4dc0 <nrfx_gpiote_input_configure+0x60>
    4d7e:	2b01      	cmp	r3, #1
    4d80:	d121      	bne.n	4dc6 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    4d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4d86:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4d8a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d8c:	f013 0f01 	tst.w	r3, #1
    4d90:	d01b      	beq.n	4dca <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    4d92:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d96:	0963      	lsrs	r3, r4, #5
    4d98:	d025      	beq.n	4de6 <nrfx_gpiote_input_configure+0x86>
    4d9a:	2b01      	cmp	r3, #1
    4d9c:	d026      	beq.n	4dec <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    4d9e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 4f28 <nrfx_gpiote_input_configure+0x1c8>
    4da2:	f240 232e 	movw	r3, #558	; 0x22e
    4da6:	464a      	mov	r2, r9
    4da8:	495d      	ldr	r1, [pc, #372]	; (4f20 <nrfx_gpiote_input_configure+0x1c0>)
    4daa:	485e      	ldr	r0, [pc, #376]	; (4f24 <nrfx_gpiote_input_configure+0x1c4>)
    4dac:	f005 fe4c 	bl	aa48 <printk>
    4db0:	f240 212e 	movw	r1, #558	; 0x22e
    4db4:	4648      	mov	r0, r9
    4db6:	f005 ffa0 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    4dba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4dbe:	e016      	b.n	4dee <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    4dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4dc4:	e7df      	b.n	4d86 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    4dc6:	2300      	movs	r3, #0
    4dc8:	e7dd      	b.n	4d86 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4dca:	4f57      	ldr	r7, [pc, #348]	; (4f28 <nrfx_gpiote_input_configure+0x1c8>)
    4dcc:	f240 2329 	movw	r3, #553	; 0x229
    4dd0:	463a      	mov	r2, r7
    4dd2:	4956      	ldr	r1, [pc, #344]	; (4f2c <nrfx_gpiote_input_configure+0x1cc>)
    4dd4:	4853      	ldr	r0, [pc, #332]	; (4f24 <nrfx_gpiote_input_configure+0x1c4>)
    4dd6:	f005 fe37 	bl	aa48 <printk>
    4dda:	f240 2129 	movw	r1, #553	; 0x229
    4dde:	4638      	mov	r0, r7
    4de0:	f005 ff8b 	bl	acfa <assert_post_action>
    4de4:	e7d5      	b.n	4d92 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    4de6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4dea:	e000      	b.n	4dee <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dec:	4950      	ldr	r1, [pc, #320]	; (4f30 <nrfx_gpiote_input_configure+0x1d0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4dee:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    4df2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4df6:	f1b8 0f00 	cmp.w	r8, #0
    4dfa:	d03c      	beq.n	4e76 <nrfx_gpiote_input_configure+0x116>
    4dfc:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4dfe:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    4e02:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4e06:	f1b8 0f00 	cmp.w	r8, #0
    4e0a:	d036      	beq.n	4e7a <nrfx_gpiote_input_configure+0x11a>
    4e0c:	f898 2000 	ldrb.w	r2, [r8]
    4e10:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4e12:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    4e14:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    4e18:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4e1c:	4a45      	ldr	r2, [pc, #276]	; (4f34 <nrfx_gpiote_input_configure+0x1d4>)
    4e1e:	f104 0108 	add.w	r1, r4, #8
    4e22:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4e26:	f023 0302 	bic.w	r3, r3, #2
    4e2a:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4e2c:	f043 0301 	orr.w	r3, r3, #1
    4e30:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4e34:	b1b5      	cbz	r5, 4e64 <nrfx_gpiote_input_configure+0x104>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4e36:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4e3a:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    4e3e:	4620      	mov	r0, r4
    4e40:	f7ff fc32 	bl	46a8 <pin_is_output>
    4e44:	b1d8      	cbz	r0, 4e7e <nrfx_gpiote_input_configure+0x11e>
            if (use_evt)
    4e46:	f1b9 0f00 	cmp.w	r9, #0
    4e4a:	d163      	bne.n	4f14 <nrfx_gpiote_input_configure+0x1b4>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4e4c:	4b39      	ldr	r3, [pc, #228]	; (4f34 <nrfx_gpiote_input_configure+0x1d4>)
    4e4e:	f104 0208 	add.w	r2, r4, #8
    4e52:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    4e56:	f020 001c 	bic.w	r0, r0, #28
    4e5a:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4e5c:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    4e60:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    4e64:	2e00      	cmp	r6, #0
    4e66:	d059      	beq.n	4f1c <nrfx_gpiote_input_configure+0x1bc>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4e68:	6872      	ldr	r2, [r6, #4]
    4e6a:	6831      	ldr	r1, [r6, #0]
    4e6c:	4620      	mov	r0, r4
    4e6e:	f7ff fd03 	bl	4878 <pin_handler_set>
}
    4e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4e76:	2200      	movs	r2, #0
    4e78:	e7c1      	b.n	4dfe <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4e7a:	2200      	movs	r2, #0
    4e7c:	e7c9      	b.n	4e12 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4e7e:	4b2d      	ldr	r3, [pc, #180]	; (4f34 <nrfx_gpiote_input_configure+0x1d4>)
    4e80:	f104 0208 	add.w	r2, r4, #8
    4e84:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    4e88:	f027 0720 	bic.w	r7, r7, #32
    4e8c:	04ff      	lsls	r7, r7, #19
    4e8e:	0cff      	lsrs	r7, r7, #19
    4e90:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    4e94:	f1b9 0f00 	cmp.w	r9, #0
    4e98:	d0d8      	beq.n	4e4c <nrfx_gpiote_input_configure+0xec>
                if (!edge)
    4e9a:	f1b8 0f03 	cmp.w	r8, #3
    4e9e:	d83b      	bhi.n	4f18 <nrfx_gpiote_input_configure+0x1b8>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4ea0:	686b      	ldr	r3, [r5, #4]
    4ea2:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4ea4:	f1b8 0f00 	cmp.w	r8, #0
    4ea8:	d106      	bne.n	4eb8 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    4eaa:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    4eae:	4b22      	ldr	r3, [pc, #136]	; (4f38 <nrfx_gpiote_input_configure+0x1d8>)
    4eb0:	2200      	movs	r2, #0
    4eb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4eb6:	e7c9      	b.n	4e4c <nrfx_gpiote_input_configure+0xec>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    4eb8:	4640      	mov	r0, r8
    4eba:	f006 fbe0 	bl	b67e <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4ebe:	4b1e      	ldr	r3, [pc, #120]	; (4f38 <nrfx_gpiote_input_configure+0x1d8>)
    4ec0:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    4ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4ec8:	f021 0103 	bic.w	r1, r1, #3
    4ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4ed4:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    4ed8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ee0:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    4ee4:	0221      	lsls	r1, r4, #8
    4ee6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    4eea:	0400      	lsls	r0, r0, #16
    4eec:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ef0:	4301      	orrs	r1, r0
    4ef2:	ea4c 0101 	orr.w	r1, ip, r1
    4ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4efa:	036d      	lsls	r5, r5, #13
    4efc:	b2ad      	uxth	r5, r5
    4efe:	f104 0308 	add.w	r3, r4, #8
    4f02:	432f      	orrs	r7, r5
    4f04:	f047 0720 	orr.w	r7, r7, #32
    4f08:	4a0a      	ldr	r2, [pc, #40]	; (4f34 <nrfx_gpiote_input_configure+0x1d4>)
    4f0a:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    4f0e:	e79d      	b.n	4e4c <nrfx_gpiote_input_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    4f10:	480a      	ldr	r0, [pc, #40]	; (4f3c <nrfx_gpiote_input_configure+0x1dc>)
    4f12:	e7ae      	b.n	4e72 <nrfx_gpiote_input_configure+0x112>
                return NRFX_ERROR_INVALID_PARAM;
    4f14:	4809      	ldr	r0, [pc, #36]	; (4f3c <nrfx_gpiote_input_configure+0x1dc>)
    4f16:	e7ac      	b.n	4e72 <nrfx_gpiote_input_configure+0x112>
                    return NRFX_ERROR_INVALID_PARAM;
    4f18:	4808      	ldr	r0, [pc, #32]	; (4f3c <nrfx_gpiote_input_configure+0x1dc>)
    4f1a:	e7aa      	b.n	4e72 <nrfx_gpiote_input_configure+0x112>
        err = NRFX_SUCCESS;
    4f1c:	4808      	ldr	r0, [pc, #32]	; (4f40 <nrfx_gpiote_input_configure+0x1e0>)
    4f1e:	e7a8      	b.n	4e72 <nrfx_gpiote_input_configure+0x112>
    4f20:	0000bc5c 	.word	0x0000bc5c
    4f24:	0000bc60 	.word	0x0000bc60
    4f28:	0000c484 	.word	0x0000c484
    4f2c:	0000c4b8 	.word	0x0000c4b8
    4f30:	50000300 	.word	0x50000300
    4f34:	20000058 	.word	0x20000058
    4f38:	40006000 	.word	0x40006000
    4f3c:	0bad0004 	.word	0x0bad0004
    4f40:	0bad0000 	.word	0x0bad0000

00004f44 <nrfx_gpiote_output_configure>:
{
    4f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f48:	4604      	mov	r4, r0
    4f4a:	4615      	mov	r5, r2
    if (p_config)
    4f4c:	2900      	cmp	r1, #0
    4f4e:	f000 8086 	beq.w	505e <nrfx_gpiote_output_configure+0x11a>
    4f52:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4f54:	f006 fb8b 	bl	b66e <pin_is_input>
    4f58:	b128      	cbz	r0, 4f66 <nrfx_gpiote_output_configure+0x22>
    4f5a:	4620      	mov	r0, r4
    4f5c:	f7ff fb8e 	bl	467c <pin_in_use_by_te>
    4f60:	2800      	cmp	r0, #0
    4f62:	f040 80cc 	bne.w	50fe <nrfx_gpiote_output_configure+0x1ba>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4f66:	4620      	mov	r0, r4
    4f68:	f7ff fb92 	bl	4690 <pin_has_trigger>
    4f6c:	b118      	cbz	r0, 4f76 <nrfx_gpiote_output_configure+0x32>
    4f6e:	787b      	ldrb	r3, [r7, #1]
    4f70:	2b01      	cmp	r3, #1
    4f72:	f000 80c6 	beq.w	5102 <nrfx_gpiote_output_configure+0x1be>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4f76:	f107 0901 	add.w	r9, r7, #1
    4f7a:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    4f7e:	0963      	lsrs	r3, r4, #5
    4f80:	d020      	beq.n	4fc4 <nrfx_gpiote_output_configure+0x80>
    4f82:	2b01      	cmp	r3, #1
    4f84:	d121      	bne.n	4fca <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    4f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4f8a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4f8e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f90:	f013 0f01 	tst.w	r3, #1
    4f94:	d01b      	beq.n	4fce <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    4f96:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f9a:	0963      	lsrs	r3, r4, #5
    4f9c:	d025      	beq.n	4fea <nrfx_gpiote_output_configure+0xa6>
    4f9e:	2b01      	cmp	r3, #1
    4fa0:	d026      	beq.n	4ff0 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    4fa2:	f8df a178 	ldr.w	sl, [pc, #376]	; 511c <nrfx_gpiote_output_configure+0x1d8>
    4fa6:	f240 232e 	movw	r3, #558	; 0x22e
    4faa:	4652      	mov	r2, sl
    4fac:	4959      	ldr	r1, [pc, #356]	; (5114 <nrfx_gpiote_output_configure+0x1d0>)
    4fae:	485a      	ldr	r0, [pc, #360]	; (5118 <nrfx_gpiote_output_configure+0x1d4>)
    4fb0:	f005 fd4a 	bl	aa48 <printk>
    4fb4:	f240 212e 	movw	r1, #558	; 0x22e
    4fb8:	4650      	mov	r0, sl
    4fba:	f005 fe9e 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    4fbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4fc2:	e016      	b.n	4ff2 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    4fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fc8:	e7df      	b.n	4f8a <nrfx_gpiote_output_configure+0x46>
    switch (port)
    4fca:	2300      	movs	r3, #0
    4fcc:	e7dd      	b.n	4f8a <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fce:	4e53      	ldr	r6, [pc, #332]	; (511c <nrfx_gpiote_output_configure+0x1d8>)
    4fd0:	f240 2329 	movw	r3, #553	; 0x229
    4fd4:	4632      	mov	r2, r6
    4fd6:	4952      	ldr	r1, [pc, #328]	; (5120 <nrfx_gpiote_output_configure+0x1dc>)
    4fd8:	484f      	ldr	r0, [pc, #316]	; (5118 <nrfx_gpiote_output_configure+0x1d4>)
    4fda:	f005 fd35 	bl	aa48 <printk>
    4fde:	f240 2129 	movw	r1, #553	; 0x229
    4fe2:	4630      	mov	r0, r6
    4fe4:	f005 fe89 	bl	acfa <assert_post_action>
    4fe8:	e7d5      	b.n	4f96 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    4fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4fee:	e000      	b.n	4ff2 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ff0:	4a4c      	ldr	r2, [pc, #304]	; (5124 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ff2:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    4ff6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4ffa:	f1b9 0f00 	cmp.w	r9, #0
    4ffe:	d072      	beq.n	50e6 <nrfx_gpiote_output_configure+0x1a2>
    5000:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5002:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5006:	f1b8 0f00 	cmp.w	r8, #0
    500a:	d06e      	beq.n	50ea <nrfx_gpiote_output_configure+0x1a6>
    500c:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    500e:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5010:	2f00      	cmp	r7, #0
    5012:	d06c      	beq.n	50ee <nrfx_gpiote_output_configure+0x1aa>
    5014:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5018:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    501a:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    501e:	f1b9 0f00 	cmp.w	r9, #0
    5022:	d066      	beq.n	50f2 <nrfx_gpiote_output_configure+0x1ae>
    5024:	787b      	ldrb	r3, [r7, #1]
    5026:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5028:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    502c:	f1b8 0f00 	cmp.w	r8, #0
    5030:	d061      	beq.n	50f6 <nrfx_gpiote_output_configure+0x1b2>
    5032:	78b8      	ldrb	r0, [r7, #2]
    5034:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5036:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5038:	2f00      	cmp	r7, #0
    503a:	d05e      	beq.n	50fa <nrfx_gpiote_output_configure+0x1b6>
    503c:	7838      	ldrb	r0, [r7, #0]
    503e:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5040:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5042:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    5044:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5048:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    504c:	4a36      	ldr	r2, [pc, #216]	; (5128 <nrfx_gpiote_output_configure+0x1e4>)
    504e:	f104 0108 	add.w	r1, r4, #8
    5052:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5056:	f043 0303 	orr.w	r3, r3, #3
    505a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    505e:	2d00      	cmp	r5, #0
    5060:	d051      	beq.n	5106 <nrfx_gpiote_output_configure+0x1c2>
        if (pin_is_input(pin))
    5062:	4620      	mov	r0, r4
    5064:	f006 fb03 	bl	b66e <pin_is_input>
    5068:	2800      	cmp	r0, #0
    506a:	d14f      	bne.n	510c <nrfx_gpiote_output_configure+0x1c8>
        uint32_t ch = p_task_config->task_ch;
    506c:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    506e:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    5072:	4b2e      	ldr	r3, [pc, #184]	; (512c <nrfx_gpiote_output_configure+0x1e8>)
    5074:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5078:	492b      	ldr	r1, [pc, #172]	; (5128 <nrfx_gpiote_output_configure+0x1e4>)
    507a:	f104 0008 	add.w	r0, r4, #8
    507e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    5082:	f023 0320 	bic.w	r3, r3, #32
    5086:	04db      	lsls	r3, r3, #19
    5088:	0cdb      	lsrs	r3, r3, #19
    508a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    508e:	7869      	ldrb	r1, [r5, #1]
    5090:	2900      	cmp	r1, #0
    5092:	d03d      	beq.n	5110 <nrfx_gpiote_output_configure+0x1cc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5094:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5098:	4d24      	ldr	r5, [pc, #144]	; (512c <nrfx_gpiote_output_configure+0x1e8>)
    509a:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    509e:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    50a2:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    50a6:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    50aa:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    50ae:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    50b2:	0220      	lsls	r0, r4, #8
    50b4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    50b8:	0409      	lsls	r1, r1, #16
    50ba:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    50be:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    50c0:	ea4f 500c 	mov.w	r0, ip, lsl #20
    50c4:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    50c8:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    50ca:	4339      	orrs	r1, r7
    50cc:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    50d0:	0352      	lsls	r2, r2, #13
    50d2:	b292      	uxth	r2, r2
    50d4:	3408      	adds	r4, #8
    50d6:	431a      	orrs	r2, r3
    50d8:	f042 0220 	orr.w	r2, r2, #32
    50dc:	4b12      	ldr	r3, [pc, #72]	; (5128 <nrfx_gpiote_output_configure+0x1e4>)
    50de:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    50e2:	4813      	ldr	r0, [pc, #76]	; (5130 <nrfx_gpiote_output_configure+0x1ec>)
    50e4:	e010      	b.n	5108 <nrfx_gpiote_output_configure+0x1c4>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    50e6:	2300      	movs	r3, #0
    50e8:	e78b      	b.n	5002 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    50ea:	2000      	movs	r0, #0
    50ec:	e78f      	b.n	500e <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    50ee:	2000      	movs	r0, #0
    50f0:	e792      	b.n	5018 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    50f2:	2300      	movs	r3, #0
    50f4:	e798      	b.n	5028 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    50f6:	2000      	movs	r0, #0
    50f8:	e79d      	b.n	5036 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    50fa:	2000      	movs	r0, #0
    50fc:	e7a0      	b.n	5040 <nrfx_gpiote_output_configure+0xfc>
    50fe:	480d      	ldr	r0, [pc, #52]	; (5134 <nrfx_gpiote_output_configure+0x1f0>)
    5100:	e002      	b.n	5108 <nrfx_gpiote_output_configure+0x1c4>
    5102:	480c      	ldr	r0, [pc, #48]	; (5134 <nrfx_gpiote_output_configure+0x1f0>)
    5104:	e000      	b.n	5108 <nrfx_gpiote_output_configure+0x1c4>
    5106:	480a      	ldr	r0, [pc, #40]	; (5130 <nrfx_gpiote_output_configure+0x1ec>)
}
    5108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return NRFX_ERROR_INVALID_PARAM;
    510c:	4809      	ldr	r0, [pc, #36]	; (5134 <nrfx_gpiote_output_configure+0x1f0>)
    510e:	e7fb      	b.n	5108 <nrfx_gpiote_output_configure+0x1c4>
    return NRFX_SUCCESS;
    5110:	4807      	ldr	r0, [pc, #28]	; (5130 <nrfx_gpiote_output_configure+0x1ec>)
    5112:	e7f9      	b.n	5108 <nrfx_gpiote_output_configure+0x1c4>
    5114:	0000bc5c 	.word	0x0000bc5c
    5118:	0000bc60 	.word	0x0000bc60
    511c:	0000c484 	.word	0x0000c484
    5120:	0000c4b8 	.word	0x0000c4b8
    5124:	50000300 	.word	0x50000300
    5128:	20000058 	.word	0x20000058
    512c:	40006000 	.word	0x40006000
    5130:	0bad0000 	.word	0x0bad0000
    5134:	0bad0004 	.word	0x0bad0004

00005138 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5138:	4b01      	ldr	r3, [pc, #4]	; (5140 <nrfx_gpiote_global_callback_set+0x8>)
    513a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    513c:	60d9      	str	r1, [r3, #12]
}
    513e:	4770      	bx	lr
    5140:	20000058 	.word	0x20000058

00005144 <nrfx_gpiote_channel_get>:
{
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5148:	460d      	mov	r5, r1
    514a:	b159      	cbz	r1, 5164 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    514c:	4620      	mov	r0, r4
    514e:	f7ff fa95 	bl	467c <pin_in_use_by_te>
    5152:	b1a8      	cbz	r0, 5180 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5154:	3408      	adds	r4, #8
    5156:	4b0b      	ldr	r3, [pc, #44]	; (5184 <nrfx_gpiote_channel_get+0x40>)
    5158:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    515c:	0b5b      	lsrs	r3, r3, #13
    515e:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    5160:	4809      	ldr	r0, [pc, #36]	; (5188 <nrfx_gpiote_channel_get+0x44>)
}
    5162:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    5164:	4e09      	ldr	r6, [pc, #36]	; (518c <nrfx_gpiote_channel_get+0x48>)
    5166:	f240 2335 	movw	r3, #565	; 0x235
    516a:	4632      	mov	r2, r6
    516c:	4908      	ldr	r1, [pc, #32]	; (5190 <nrfx_gpiote_channel_get+0x4c>)
    516e:	4809      	ldr	r0, [pc, #36]	; (5194 <nrfx_gpiote_channel_get+0x50>)
    5170:	f005 fc6a 	bl	aa48 <printk>
    5174:	f240 2135 	movw	r1, #565	; 0x235
    5178:	4630      	mov	r0, r6
    517a:	f005 fdbe 	bl	acfa <assert_post_action>
    517e:	e7e5      	b.n	514c <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    5180:	4805      	ldr	r0, [pc, #20]	; (5198 <nrfx_gpiote_channel_get+0x54>)
    5182:	e7ee      	b.n	5162 <nrfx_gpiote_channel_get+0x1e>
    5184:	20000058 	.word	0x20000058
    5188:	0bad0000 	.word	0x0bad0000
    518c:	0000c720 	.word	0x0000c720
    5190:	0000c774 	.word	0x0000c774
    5194:	0000bc60 	.word	0x0000bc60
    5198:	0bad0004 	.word	0x0bad0004

0000519c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    519c:	4b0f      	ldr	r3, [pc, #60]	; (51dc <nrfx_gpiote_init+0x40>)
    519e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    51a2:	b10b      	cbz	r3, 51a8 <nrfx_gpiote_init+0xc>
        return err_code;
    51a4:	480e      	ldr	r0, [pc, #56]	; (51e0 <nrfx_gpiote_init+0x44>)
}
    51a6:	4770      	bx	lr
{
    51a8:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    51aa:	4c0c      	ldr	r4, [pc, #48]	; (51dc <nrfx_gpiote_init+0x40>)
    51ac:	2260      	movs	r2, #96	; 0x60
    51ae:	2100      	movs	r1, #0
    51b0:	f104 0010 	add.w	r0, r4, #16
    51b4:	f005 fecc 	bl	af50 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    51b8:	2006      	movs	r0, #6
    51ba:	f7fc fcd1 	bl	1b60 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    51be:	4b09      	ldr	r3, [pc, #36]	; (51e4 <nrfx_gpiote_init+0x48>)
    51c0:	2200      	movs	r2, #0
    51c2:	601a      	str	r2, [r3, #0]
    51c4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    51c6:	4b08      	ldr	r3, [pc, #32]	; (51e8 <nrfx_gpiote_init+0x4c>)
    51c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    51cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    51d0:	2301      	movs	r3, #1
    51d2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    51d6:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    51d8:	4804      	ldr	r0, [pc, #16]	; (51ec <nrfx_gpiote_init+0x50>)
}
    51da:	bd10      	pop	{r4, pc}
    51dc:	20000058 	.word	0x20000058
    51e0:	0bad0005 	.word	0x0bad0005
    51e4:	4000617c 	.word	0x4000617c
    51e8:	40006000 	.word	0x40006000
    51ec:	0bad0000 	.word	0x0bad0000

000051f0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    51f0:	4b03      	ldr	r3, [pc, #12]	; (5200 <nrfx_gpiote_is_init+0x10>)
    51f2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    51f6:	3800      	subs	r0, #0
    51f8:	bf18      	it	ne
    51fa:	2001      	movne	r0, #1
    51fc:	4770      	bx	lr
    51fe:	bf00      	nop
    5200:	20000058 	.word	0x20000058

00005204 <nrfx_gpiote_channel_free>:
{
    5204:	b508      	push	{r3, lr}
    5206:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5208:	4801      	ldr	r0, [pc, #4]	; (5210 <nrfx_gpiote_channel_free+0xc>)
    520a:	f7ff f84d 	bl	42a8 <nrfx_flag32_free>
}
    520e:	bd08      	pop	{r3, pc}
    5210:	200000c8 	.word	0x200000c8

00005214 <nrfx_gpiote_channel_alloc>:
{
    5214:	b508      	push	{r3, lr}
    5216:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5218:	4801      	ldr	r0, [pc, #4]	; (5220 <nrfx_gpiote_channel_alloc+0xc>)
    521a:	f7ff f821 	bl	4260 <nrfx_flag32_alloc>
}
    521e:	bd08      	pop	{r3, pc}
    5220:	200000c8 	.word	0x200000c8

00005224 <nrfx_gpiote_trigger_enable>:
{
    5224:	b570      	push	{r4, r5, r6, lr}
    5226:	4604      	mov	r4, r0
    5228:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    522a:	f7ff fa31 	bl	4690 <pin_has_trigger>
    522e:	b1b8      	cbz	r0, 5260 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5230:	4620      	mov	r0, r4
    5232:	f7ff fa23 	bl	467c <pin_in_use_by_te>
    5236:	b118      	cbz	r0, 5240 <nrfx_gpiote_trigger_enable+0x1c>
    5238:	4620      	mov	r0, r4
    523a:	f006 fa18 	bl	b66e <pin_is_input>
    523e:	b9e8      	cbnz	r0, 527c <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    5240:	2d00      	cmp	r5, #0
    5242:	d04c      	beq.n	52de <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5244:	f104 0308 	add.w	r3, r4, #8
    5248:	4a70      	ldr	r2, [pc, #448]	; (540c <nrfx_gpiote_trigger_enable+0x1e8>)
    524a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    524e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5252:	2b04      	cmp	r3, #4
    5254:	f000 8092 	beq.w	537c <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5258:	2b05      	cmp	r3, #5
    525a:	d14e      	bne.n	52fa <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    525c:	2602      	movs	r6, #2
    525e:	e08e      	b.n	537e <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    5260:	4e6b      	ldr	r6, [pc, #428]	; (5410 <nrfx_gpiote_trigger_enable+0x1ec>)
    5262:	f240 33df 	movw	r3, #991	; 0x3df
    5266:	4632      	mov	r2, r6
    5268:	496a      	ldr	r1, [pc, #424]	; (5414 <nrfx_gpiote_trigger_enable+0x1f0>)
    526a:	486b      	ldr	r0, [pc, #428]	; (5418 <nrfx_gpiote_trigger_enable+0x1f4>)
    526c:	f005 fbec 	bl	aa48 <printk>
    5270:	f240 31df 	movw	r1, #991	; 0x3df
    5274:	4630      	mov	r0, r6
    5276:	f005 fd40 	bl	acfa <assert_post_action>
    527a:	e7d9      	b.n	5230 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    527c:	4620      	mov	r0, r4
    527e:	f7ff fa1d 	bl	46bc <pin_te_get>
    5282:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    5284:	2807      	cmp	r0, #7
    5286:	d81c      	bhi.n	52c2 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5288:	00a3      	lsls	r3, r4, #2
    528a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    528e:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    5290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5294:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5298:	2200      	movs	r2, #0
    529a:	601a      	str	r2, [r3, #0]
    529c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    529e:	4a5f      	ldr	r2, [pc, #380]	; (541c <nrfx_gpiote_trigger_enable+0x1f8>)
    52a0:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    52a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    52a8:	f043 0301 	orr.w	r3, r3, #1
    52ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    52b0:	2d00      	cmp	r5, #0
    52b2:	f000 80a9 	beq.w	5408 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    52b6:	2001      	movs	r0, #1
    52b8:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    52bc:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    52c0:	e0a2      	b.n	5408 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    52c2:	4e57      	ldr	r6, [pc, #348]	; (5420 <nrfx_gpiote_trigger_enable+0x1fc>)
    52c4:	f44f 7323 	mov.w	r3, #652	; 0x28c
    52c8:	4632      	mov	r2, r6
    52ca:	4956      	ldr	r1, [pc, #344]	; (5424 <nrfx_gpiote_trigger_enable+0x200>)
    52cc:	4852      	ldr	r0, [pc, #328]	; (5418 <nrfx_gpiote_trigger_enable+0x1f4>)
    52ce:	f005 fbbb 	bl	aa48 <printk>
    52d2:	f44f 7123 	mov.w	r1, #652	; 0x28c
    52d6:	4630      	mov	r0, r6
    52d8:	f005 fd0f 	bl	acfa <assert_post_action>
    52dc:	e7d4      	b.n	5288 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    52de:	4d4c      	ldr	r5, [pc, #304]	; (5410 <nrfx_gpiote_trigger_enable+0x1ec>)
    52e0:	f240 33ee 	movw	r3, #1006	; 0x3ee
    52e4:	462a      	mov	r2, r5
    52e6:	4950      	ldr	r1, [pc, #320]	; (5428 <nrfx_gpiote_trigger_enable+0x204>)
    52e8:	484b      	ldr	r0, [pc, #300]	; (5418 <nrfx_gpiote_trigger_enable+0x1f4>)
    52ea:	f005 fbad 	bl	aa48 <printk>
    52ee:	f240 31ee 	movw	r1, #1006	; 0x3ee
    52f2:	4628      	mov	r0, r5
    52f4:	f005 fd01 	bl	acfa <assert_post_action>
    52f8:	e7a4      	b.n	5244 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    52fa:	0963      	lsrs	r3, r4, #5
    52fc:	d01f      	beq.n	533e <nrfx_gpiote_trigger_enable+0x11a>
    52fe:	2b01      	cmp	r3, #1
    5300:	d120      	bne.n	5344 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    5302:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5306:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    530a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    530c:	f013 0f01 	tst.w	r3, #1
    5310:	d01a      	beq.n	5348 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    5312:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5316:	0963      	lsrs	r3, r4, #5
    5318:	d024      	beq.n	5364 <nrfx_gpiote_trigger_enable+0x140>
    531a:	2b01      	cmp	r3, #1
    531c:	d025      	beq.n	536a <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    531e:	4e43      	ldr	r6, [pc, #268]	; (542c <nrfx_gpiote_trigger_enable+0x208>)
    5320:	f240 232e 	movw	r3, #558	; 0x22e
    5324:	4632      	mov	r2, r6
    5326:	4942      	ldr	r1, [pc, #264]	; (5430 <nrfx_gpiote_trigger_enable+0x20c>)
    5328:	483b      	ldr	r0, [pc, #236]	; (5418 <nrfx_gpiote_trigger_enable+0x1f4>)
    532a:	f005 fb8d 	bl	aa48 <printk>
    532e:	f240 212e 	movw	r1, #558	; 0x22e
    5332:	4630      	mov	r0, r6
    5334:	f005 fce1 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    5338:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    533c:	e016      	b.n	536c <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    533e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5342:	e7e0      	b.n	5306 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    5344:	2300      	movs	r3, #0
    5346:	e7de      	b.n	5306 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5348:	4d38      	ldr	r5, [pc, #224]	; (542c <nrfx_gpiote_trigger_enable+0x208>)
    534a:	f240 2329 	movw	r3, #553	; 0x229
    534e:	462a      	mov	r2, r5
    5350:	4938      	ldr	r1, [pc, #224]	; (5434 <nrfx_gpiote_trigger_enable+0x210>)
    5352:	4831      	ldr	r0, [pc, #196]	; (5418 <nrfx_gpiote_trigger_enable+0x1f4>)
    5354:	f005 fb78 	bl	aa48 <printk>
    5358:	f240 2129 	movw	r1, #553	; 0x229
    535c:	4628      	mov	r0, r5
    535e:	f005 fccc 	bl	acfa <assert_post_action>
    5362:	e7d6      	b.n	5312 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    5364:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5368:	e000      	b.n	536c <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    536a:	4b33      	ldr	r3, [pc, #204]	; (5438 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    536c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5370:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5372:	f013 0f01 	tst.w	r3, #1
    5376:	d024      	beq.n	53c2 <nrfx_gpiote_trigger_enable+0x19e>
    5378:	2603      	movs	r6, #3
    537a:	e000      	b.n	537e <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    537c:	2603      	movs	r6, #3
    switch (port)
    537e:	0963      	lsrs	r3, r4, #5
    5380:	d021      	beq.n	53c6 <nrfx_gpiote_trigger_enable+0x1a2>
    5382:	2b01      	cmp	r3, #1
    5384:	d122      	bne.n	53cc <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    5386:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    538a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    538e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5390:	f013 0f01 	tst.w	r3, #1
    5394:	d01c      	beq.n	53d0 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    5396:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    539a:	0964      	lsrs	r4, r4, #5
    539c:	d026      	beq.n	53ec <nrfx_gpiote_trigger_enable+0x1c8>
    539e:	2c01      	cmp	r4, #1
    53a0:	d027      	beq.n	53f2 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    53a2:	4c22      	ldr	r4, [pc, #136]	; (542c <nrfx_gpiote_trigger_enable+0x208>)
    53a4:	f240 232e 	movw	r3, #558	; 0x22e
    53a8:	4622      	mov	r2, r4
    53aa:	4921      	ldr	r1, [pc, #132]	; (5430 <nrfx_gpiote_trigger_enable+0x20c>)
    53ac:	481a      	ldr	r0, [pc, #104]	; (5418 <nrfx_gpiote_trigger_enable+0x1f4>)
    53ae:	f005 fb4b 	bl	aa48 <printk>
    53b2:	f240 212e 	movw	r1, #558	; 0x22e
    53b6:	4620      	mov	r0, r4
    53b8:	f005 fc9f 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    53bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    53c0:	e018      	b.n	53f4 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    53c2:	2602      	movs	r6, #2
    53c4:	e7db      	b.n	537e <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    53c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    53ca:	e7de      	b.n	538a <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    53cc:	2300      	movs	r3, #0
    53ce:	e7dc      	b.n	538a <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    53d0:	4d16      	ldr	r5, [pc, #88]	; (542c <nrfx_gpiote_trigger_enable+0x208>)
    53d2:	f240 2329 	movw	r3, #553	; 0x229
    53d6:	462a      	mov	r2, r5
    53d8:	4916      	ldr	r1, [pc, #88]	; (5434 <nrfx_gpiote_trigger_enable+0x210>)
    53da:	480f      	ldr	r0, [pc, #60]	; (5418 <nrfx_gpiote_trigger_enable+0x1f4>)
    53dc:	f005 fb34 	bl	aa48 <printk>
    53e0:	f240 2129 	movw	r1, #553	; 0x229
    53e4:	4628      	mov	r0, r5
    53e6:	f005 fc88 	bl	acfa <assert_post_action>
    53ea:	e7d4      	b.n	5396 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    53ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    53f0:	e000      	b.n	53f4 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    53f2:	4911      	ldr	r1, [pc, #68]	; (5438 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    53f4:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    53f8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    53fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5400:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5404:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    5408:	bd70      	pop	{r4, r5, r6, pc}
    540a:	bf00      	nop
    540c:	20000058 	.word	0x20000058
    5410:	0000c720 	.word	0x0000c720
    5414:	0000c7c4 	.word	0x0000c7c4
    5418:	0000bc60 	.word	0x0000bc60
    541c:	40006000 	.word	0x40006000
    5420:	0000c780 	.word	0x0000c780
    5424:	0000c7b8 	.word	0x0000c7b8
    5428:	0000c7dc 	.word	0x0000c7dc
    542c:	0000c484 	.word	0x0000c484
    5430:	0000bc5c 	.word	0x0000bc5c
    5434:	0000c4b8 	.word	0x0000c4b8
    5438:	50000300 	.word	0x50000300

0000543c <nrfx_gpiote_trigger_disable>:
{
    543c:	b538      	push	{r3, r4, r5, lr}
    543e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5440:	f7ff f91c 	bl	467c <pin_in_use_by_te>
    5444:	b1a0      	cbz	r0, 5470 <nrfx_gpiote_trigger_disable+0x34>
    5446:	4620      	mov	r0, r4
    5448:	f006 f911 	bl	b66e <pin_is_input>
    544c:	b180      	cbz	r0, 5470 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    544e:	4620      	mov	r0, r4
    5450:	f7ff f934 	bl	46bc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5454:	2201      	movs	r2, #1
    5456:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5458:	4b26      	ldr	r3, [pc, #152]	; (54f4 <nrfx_gpiote_trigger_disable+0xb8>)
    545a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    545e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5462:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    5466:	f022 0203 	bic.w	r2, r2, #3
    546a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    546e:	e040      	b.n	54f2 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    5470:	0963      	lsrs	r3, r4, #5
    5472:	d01f      	beq.n	54b4 <nrfx_gpiote_trigger_disable+0x78>
    5474:	2b01      	cmp	r3, #1
    5476:	d120      	bne.n	54ba <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    5478:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    547c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5480:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5482:	f013 0f01 	tst.w	r3, #1
    5486:	d01a      	beq.n	54be <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    5488:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    548c:	0964      	lsrs	r4, r4, #5
    548e:	d024      	beq.n	54da <nrfx_gpiote_trigger_disable+0x9e>
    5490:	2c01      	cmp	r4, #1
    5492:	d025      	beq.n	54e0 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    5494:	4c18      	ldr	r4, [pc, #96]	; (54f8 <nrfx_gpiote_trigger_disable+0xbc>)
    5496:	f240 232e 	movw	r3, #558	; 0x22e
    549a:	4622      	mov	r2, r4
    549c:	4917      	ldr	r1, [pc, #92]	; (54fc <nrfx_gpiote_trigger_disable+0xc0>)
    549e:	4818      	ldr	r0, [pc, #96]	; (5500 <nrfx_gpiote_trigger_disable+0xc4>)
    54a0:	f005 fad2 	bl	aa48 <printk>
    54a4:	f240 212e 	movw	r1, #558	; 0x22e
    54a8:	4620      	mov	r0, r4
    54aa:	f005 fc26 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    54ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    54b2:	e016      	b.n	54e2 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    54b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    54b8:	e7e0      	b.n	547c <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    54ba:	2300      	movs	r3, #0
    54bc:	e7de      	b.n	547c <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    54be:	4d0e      	ldr	r5, [pc, #56]	; (54f8 <nrfx_gpiote_trigger_disable+0xbc>)
    54c0:	f240 2329 	movw	r3, #553	; 0x229
    54c4:	462a      	mov	r2, r5
    54c6:	490f      	ldr	r1, [pc, #60]	; (5504 <nrfx_gpiote_trigger_disable+0xc8>)
    54c8:	480d      	ldr	r0, [pc, #52]	; (5500 <nrfx_gpiote_trigger_disable+0xc4>)
    54ca:	f005 fabd 	bl	aa48 <printk>
    54ce:	f240 2129 	movw	r1, #553	; 0x229
    54d2:	4628      	mov	r0, r5
    54d4:	f005 fc11 	bl	acfa <assert_post_action>
    54d8:	e7d6      	b.n	5488 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    54da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    54de:	e000      	b.n	54e2 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54e0:	4909      	ldr	r1, [pc, #36]	; (5508 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    54e2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    54e6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    54ea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    54ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    54f2:	bd38      	pop	{r3, r4, r5, pc}
    54f4:	40006000 	.word	0x40006000
    54f8:	0000c484 	.word	0x0000c484
    54fc:	0000bc5c 	.word	0x0000bc5c
    5500:	0000bc60 	.word	0x0000bc60
    5504:	0000c4b8 	.word	0x0000c4b8
    5508:	50000300 	.word	0x50000300

0000550c <nrfx_gpiote_pin_uninit>:
{
    550c:	b538      	push	{r3, r4, r5, lr}
    550e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5510:	f7ff f8aa 	bl	4668 <pin_in_use>
    5514:	b908      	cbnz	r0, 551a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5516:	4824      	ldr	r0, [pc, #144]	; (55a8 <nrfx_gpiote_pin_uninit+0x9c>)
}
    5518:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    551a:	4620      	mov	r0, r4
    551c:	f7ff ff8e 	bl	543c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5520:	4620      	mov	r0, r4
    5522:	f7ff f98d 	bl	4840 <pin_handler_trigger_uninit>
    switch (port)
    5526:	0963      	lsrs	r3, r4, #5
    5528:	d01f      	beq.n	556a <nrfx_gpiote_pin_uninit+0x5e>
    552a:	2b01      	cmp	r3, #1
    552c:	d120      	bne.n	5570 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    552e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5532:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5536:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5538:	f013 0f01 	tst.w	r3, #1
    553c:	d01a      	beq.n	5574 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    553e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5542:	0964      	lsrs	r4, r4, #5
    5544:	d024      	beq.n	5590 <nrfx_gpiote_pin_uninit+0x84>
    5546:	2c01      	cmp	r4, #1
    5548:	d025      	beq.n	5596 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    554a:	4c18      	ldr	r4, [pc, #96]	; (55ac <nrfx_gpiote_pin_uninit+0xa0>)
    554c:	f240 232e 	movw	r3, #558	; 0x22e
    5550:	4622      	mov	r2, r4
    5552:	4917      	ldr	r1, [pc, #92]	; (55b0 <nrfx_gpiote_pin_uninit+0xa4>)
    5554:	4817      	ldr	r0, [pc, #92]	; (55b4 <nrfx_gpiote_pin_uninit+0xa8>)
    5556:	f005 fa77 	bl	aa48 <printk>
    555a:	f240 212e 	movw	r1, #558	; 0x22e
    555e:	4620      	mov	r0, r4
    5560:	f005 fbcb 	bl	acfa <assert_post_action>
        case 0: return NRF_P0;
    5564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5568:	e016      	b.n	5598 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    556a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    556e:	e7e0      	b.n	5532 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    5570:	2300      	movs	r3, #0
    5572:	e7de      	b.n	5532 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5574:	4d0d      	ldr	r5, [pc, #52]	; (55ac <nrfx_gpiote_pin_uninit+0xa0>)
    5576:	f240 2329 	movw	r3, #553	; 0x229
    557a:	462a      	mov	r2, r5
    557c:	490e      	ldr	r1, [pc, #56]	; (55b8 <nrfx_gpiote_pin_uninit+0xac>)
    557e:	480d      	ldr	r0, [pc, #52]	; (55b4 <nrfx_gpiote_pin_uninit+0xa8>)
    5580:	f005 fa62 	bl	aa48 <printk>
    5584:	f240 2129 	movw	r1, #553	; 0x229
    5588:	4628      	mov	r0, r5
    558a:	f005 fbb6 	bl	acfa <assert_post_action>
    558e:	e7d6      	b.n	553e <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    5590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5594:	e000      	b.n	5598 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5596:	4b09      	ldr	r3, [pc, #36]	; (55bc <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    5598:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    559c:	2202      	movs	r2, #2
    559e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    55a2:	4807      	ldr	r0, [pc, #28]	; (55c0 <nrfx_gpiote_pin_uninit+0xb4>)
    55a4:	e7b8      	b.n	5518 <nrfx_gpiote_pin_uninit+0xc>
    55a6:	bf00      	nop
    55a8:	0bad0004 	.word	0x0bad0004
    55ac:	0000c484 	.word	0x0000c484
    55b0:	0000bc5c 	.word	0x0000bc5c
    55b4:	0000bc60 	.word	0x0000bc60
    55b8:	0000c4b8 	.word	0x0000c4b8
    55bc:	50000300 	.word	0x50000300
    55c0:	0bad0000 	.word	0x0bad0000

000055c4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    55c4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    55c6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    55c8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    55cc:	2100      	movs	r1, #0
    uint32_t status = 0;
    55ce:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    55d0:	e003      	b.n	55da <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    55d2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    55d4:	3304      	adds	r3, #4
    55d6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    55d8:	3101      	adds	r1, #1
    55da:	2907      	cmp	r1, #7
    55dc:	d814      	bhi.n	5608 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    55de:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    55e2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    55e6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    55e8:	2a00      	cmp	r2, #0
    55ea:	d0f2      	beq.n	55d2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    55ec:	4a0b      	ldr	r2, [pc, #44]	; (561c <nrfx_gpiote_irq_handler+0x58>)
    55ee:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    55f2:	4210      	tst	r0, r2
    55f4:	d0ed      	beq.n	55d2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    55f6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    55fa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    55fe:	2400      	movs	r4, #0
    5600:	6014      	str	r4, [r2, #0]
    5602:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    5604:	4305      	orrs	r5, r0
    5606:	e7e4      	b.n	55d2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5608:	4b05      	ldr	r3, [pc, #20]	; (5620 <nrfx_gpiote_irq_handler+0x5c>)
    560a:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    560c:	b91b      	cbnz	r3, 5616 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    560e:	4628      	mov	r0, r5
    5610:	f7ff f968 	bl	48e4 <gpiote_evt_handle>
}
    5614:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5616:	f7ff fac7 	bl	4ba8 <port_event_handle>
    561a:	e7f8      	b.n	560e <nrfx_gpiote_irq_handler+0x4a>
    561c:	40006000 	.word	0x40006000
    5620:	4000617c 	.word	0x4000617c

00005624 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5624:	b508      	push	{r3, lr}
    5626:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5628:	4801      	ldr	r0, [pc, #4]	; (5630 <nrfx_ppi_channel_alloc+0xc>)
    562a:	f7fe fe19 	bl	4260 <nrfx_flag32_alloc>
}
    562e:	bd08      	pop	{r3, pc}
    5630:	200000d4 	.word	0x200000d4

00005634 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5634:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5636:	4c14      	ldr	r4, [pc, #80]	; (5688 <_DoInit+0x54>)
    5638:	2303      	movs	r3, #3
    563a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    563c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    563e:	4a13      	ldr	r2, [pc, #76]	; (568c <_DoInit+0x58>)
    5640:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5642:	4b13      	ldr	r3, [pc, #76]	; (5690 <_DoInit+0x5c>)
    5644:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5646:	f44f 6380 	mov.w	r3, #1024	; 0x400
    564a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    564c:	2300      	movs	r3, #0
    564e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5650:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5652:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5654:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5656:	4a0f      	ldr	r2, [pc, #60]	; (5694 <_DoInit+0x60>)
    5658:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    565a:	2210      	movs	r2, #16
    565c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    565e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5660:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5662:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5664:	490c      	ldr	r1, [pc, #48]	; (5698 <_DoInit+0x64>)
    5666:	1de0      	adds	r0, r4, #7
    5668:	f005 fbf9 	bl	ae5e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    566c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5670:	490a      	ldr	r1, [pc, #40]	; (569c <_DoInit+0x68>)
    5672:	4620      	mov	r0, r4
    5674:	f005 fbf3 	bl	ae5e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5678:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    567c:	2320      	movs	r3, #32
    567e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5680:	f3bf 8f5f 	dmb	sy
}
    5684:	bd10      	pop	{r4, pc}
    5686:	bf00      	nop
    5688:	20000b4c 	.word	0x20000b4c
    568c:	0000c7e8 	.word	0x0000c7e8
    5690:	20000c04 	.word	0x20000c04
    5694:	20000bf4 	.word	0x20000bf4
    5698:	0000c7f4 	.word	0x0000c7f4
    569c:	0000c7f8 	.word	0x0000c7f8

000056a0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    56a0:	4b03      	ldr	r3, [pc, #12]	; (56b0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    56a2:	4a04      	ldr	r2, [pc, #16]	; (56b4 <z_device_state_init+0x14>)
    56a4:	4293      	cmp	r3, r2
    56a6:	d201      	bcs.n	56ac <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    56a8:	3318      	adds	r3, #24
    56aa:	e7fa      	b.n	56a2 <z_device_state_init+0x2>
	}
}
    56ac:	4770      	bx	lr
    56ae:	bf00      	nop
    56b0:	0000b8d0 	.word	0x0000b8d0
    56b4:	0000b978 	.word	0x0000b978

000056b8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    56b8:	b570      	push	{r4, r5, r6, lr}
    56ba:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56bc:	4b11      	ldr	r3, [pc, #68]	; (5704 <z_sys_init_run_level+0x4c>)
    56be:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    56c2:	e009      	b.n	56d8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    56c4:	4240      	negs	r0, r0
    56c6:	e017      	b.n	56f8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    56c8:	68eb      	ldr	r3, [r5, #12]
    56ca:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    56cc:	68ea      	ldr	r2, [r5, #12]
    56ce:	7853      	ldrb	r3, [r2, #1]
    56d0:	f043 0301 	orr.w	r3, r3, #1
    56d4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56d6:	3408      	adds	r4, #8
    56d8:	1c73      	adds	r3, r6, #1
    56da:	4a0a      	ldr	r2, [pc, #40]	; (5704 <z_sys_init_run_level+0x4c>)
    56dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56e0:	42a3      	cmp	r3, r4
    56e2:	d90d      	bls.n	5700 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    56e4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    56e6:	6823      	ldr	r3, [r4, #0]
    56e8:	4628      	mov	r0, r5
    56ea:	4798      	blx	r3
		if (dev != NULL) {
    56ec:	2d00      	cmp	r5, #0
    56ee:	d0f2      	beq.n	56d6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    56f0:	2800      	cmp	r0, #0
    56f2:	d0eb      	beq.n	56cc <z_sys_init_run_level+0x14>
				if (rc < 0) {
    56f4:	2800      	cmp	r0, #0
    56f6:	dbe5      	blt.n	56c4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    56f8:	28ff      	cmp	r0, #255	; 0xff
    56fa:	dde5      	ble.n	56c8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    56fc:	20ff      	movs	r0, #255	; 0xff
    56fe:	e7e3      	b.n	56c8 <z_sys_init_run_level+0x10>
		}
	}
}
    5700:	bd70      	pop	{r4, r5, r6, pc}
    5702:	bf00      	nop
    5704:	0000c800 	.word	0x0000c800

00005708 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5708:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    570a:	4605      	mov	r5, r0
    570c:	b328      	cbz	r0, 575a <z_impl_device_get_binding+0x52>
    570e:	7803      	ldrb	r3, [r0, #0]
    5710:	b32b      	cbz	r3, 575e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    5712:	4c14      	ldr	r4, [pc, #80]	; (5764 <z_impl_device_get_binding+0x5c>)
    5714:	e000      	b.n	5718 <z_impl_device_get_binding+0x10>
    5716:	3418      	adds	r4, #24
    5718:	4b13      	ldr	r3, [pc, #76]	; (5768 <z_impl_device_get_binding+0x60>)
    571a:	429c      	cmp	r4, r3
    571c:	d008      	beq.n	5730 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    571e:	4620      	mov	r0, r4
    5720:	f005 ffbc 	bl	b69c <z_device_ready>
    5724:	2800      	cmp	r0, #0
    5726:	d0f6      	beq.n	5716 <z_impl_device_get_binding+0xe>
    5728:	6823      	ldr	r3, [r4, #0]
    572a:	42ab      	cmp	r3, r5
    572c:	d1f3      	bne.n	5716 <z_impl_device_get_binding+0xe>
    572e:	e012      	b.n	5756 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    5730:	4c0c      	ldr	r4, [pc, #48]	; (5764 <z_impl_device_get_binding+0x5c>)
    5732:	e000      	b.n	5736 <z_impl_device_get_binding+0x2e>
    5734:	3418      	adds	r4, #24
    5736:	4b0c      	ldr	r3, [pc, #48]	; (5768 <z_impl_device_get_binding+0x60>)
    5738:	429c      	cmp	r4, r3
    573a:	d00b      	beq.n	5754 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    573c:	4620      	mov	r0, r4
    573e:	f005 ffad 	bl	b69c <z_device_ready>
    5742:	2800      	cmp	r0, #0
    5744:	d0f6      	beq.n	5734 <z_impl_device_get_binding+0x2c>
    5746:	6821      	ldr	r1, [r4, #0]
    5748:	4628      	mov	r0, r5
    574a:	f005 fbbd 	bl	aec8 <strcmp>
    574e:	2800      	cmp	r0, #0
    5750:	d1f0      	bne.n	5734 <z_impl_device_get_binding+0x2c>
    5752:	e000      	b.n	5756 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    5754:	2400      	movs	r4, #0
}
    5756:	4620      	mov	r0, r4
    5758:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    575a:	4604      	mov	r4, r0
    575c:	e7fb      	b.n	5756 <z_impl_device_get_binding+0x4e>
    575e:	2400      	movs	r4, #0
    5760:	e7f9      	b.n	5756 <z_impl_device_get_binding+0x4e>
    5762:	bf00      	nop
    5764:	0000b8d0 	.word	0x0000b8d0
    5768:	0000b978 	.word	0x0000b978

0000576c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    576e:	4604      	mov	r4, r0
    5770:	460e      	mov	r6, r1
	__asm__ volatile(
    5772:	f04f 0320 	mov.w	r3, #32
    5776:	f3ef 8711 	mrs	r7, BASEPRI
    577a:	f383 8812 	msr	BASEPRI_MAX, r3
    577e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5782:	f002 f871 	bl	7868 <z_impl_z_current_get>
    5786:	4605      	mov	r5, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5788:	4631      	mov	r1, r6
    578a:	4620      	mov	r0, r4
    578c:	f005 ff47 	bl	b61e <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5790:	2c04      	cmp	r4, #4
    5792:	d007      	beq.n	57a4 <z_fatal_error+0x38>
	__asm__ volatile(
    5794:	f387 8811 	msr	BASEPRI, r7
    5798:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    579c:	4628      	mov	r0, r5
    579e:	f7fc fd53 	bl	2248 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    57a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    57a4:	4c07      	ldr	r4, [pc, #28]	; (57c4 <z_fatal_error+0x58>)
    57a6:	238f      	movs	r3, #143	; 0x8f
    57a8:	4622      	mov	r2, r4
    57aa:	4907      	ldr	r1, [pc, #28]	; (57c8 <z_fatal_error+0x5c>)
    57ac:	4807      	ldr	r0, [pc, #28]	; (57cc <z_fatal_error+0x60>)
    57ae:	f005 f94b 	bl	aa48 <printk>
    57b2:	4807      	ldr	r0, [pc, #28]	; (57d0 <z_fatal_error+0x64>)
    57b4:	f005 f948 	bl	aa48 <printk>
    57b8:	218f      	movs	r1, #143	; 0x8f
    57ba:	4620      	mov	r0, r4
    57bc:	f005 fa9d 	bl	acfa <assert_post_action>
    57c0:	e7e8      	b.n	5794 <z_fatal_error+0x28>
    57c2:	bf00      	nop
    57c4:	0000c818 	.word	0x0000c818
    57c8:	0000c83c 	.word	0x0000c83c
    57cc:	0000bc60 	.word	0x0000bc60
    57d0:	0000c85c 	.word	0x0000c85c

000057d4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    57d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57d6:	b089      	sub	sp, #36	; 0x24
    57d8:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    57da:	4b15      	ldr	r3, [pc, #84]	; (5830 <init_idle_thread+0x5c>)
    57dc:	25b0      	movs	r5, #176	; 0xb0
    57de:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    57e2:	4b14      	ldr	r3, [pc, #80]	; (5834 <init_idle_thread+0x60>)
    57e4:	f44f 76b0 	mov.w	r6, #352	; 0x160
    57e8:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    57ec:	af06      	add	r7, sp, #24
    57ee:	4603      	mov	r3, r0
    57f0:	4a11      	ldr	r2, [pc, #68]	; (5838 <init_idle_thread+0x64>)
    57f2:	2108      	movs	r1, #8
    57f4:	4638      	mov	r0, r7
    57f6:	f005 f935 	bl	aa64 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    57fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    57fe:	480f      	ldr	r0, [pc, #60]	; (583c <init_idle_thread+0x68>)
    5800:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    5804:	9705      	str	r7, [sp, #20]
    5806:	2301      	movs	r3, #1
    5808:	9304      	str	r3, [sp, #16]
    580a:	230f      	movs	r3, #15
    580c:	9303      	str	r3, [sp, #12]
    580e:	2300      	movs	r3, #0
    5810:	9302      	str	r3, [sp, #8]
    5812:	9301      	str	r3, [sp, #4]
    5814:	9400      	str	r4, [sp, #0]
    5816:	4b0a      	ldr	r3, [pc, #40]	; (5840 <init_idle_thread+0x6c>)
    5818:	f44f 72a0 	mov.w	r2, #320	; 0x140
    581c:	4631      	mov	r1, r6
    581e:	4628      	mov	r0, r5
    5820:	f000 fa6a 	bl	5cf8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5824:	7b6b      	ldrb	r3, [r5, #13]
    5826:	f023 0304 	bic.w	r3, r3, #4
    582a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    582c:	b009      	add	sp, #36	; 0x24
    582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5830:	200003b0 	.word	0x200003b0
    5834:	20002860 	.word	0x20002860
    5838:	0000c894 	.word	0x0000c894
    583c:	20001004 	.word	0x20001004
    5840:	00005f81 	.word	0x00005f81

00005844 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    5844:	b570      	push	{r4, r5, r6, lr}
    5846:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    5848:	f001 fe46 	bl	74d8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    584c:	4d1b      	ldr	r5, [pc, #108]	; (58bc <prepare_multithreading+0x78>)
    584e:	4b1c      	ldr	r3, [pc, #112]	; (58c0 <prepare_multithreading+0x7c>)
    5850:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5852:	4b1c      	ldr	r3, [pc, #112]	; (58c4 <prepare_multithreading+0x80>)
    5854:	9305      	str	r3, [sp, #20]
    5856:	2301      	movs	r3, #1
    5858:	9304      	str	r3, [sp, #16]
    585a:	2400      	movs	r4, #0
    585c:	9403      	str	r4, [sp, #12]
    585e:	9402      	str	r4, [sp, #8]
    5860:	9401      	str	r4, [sp, #4]
    5862:	9400      	str	r4, [sp, #0]
    5864:	4b18      	ldr	r3, [pc, #96]	; (58c8 <prepare_multithreading+0x84>)
    5866:	f44f 6200 	mov.w	r2, #2048	; 0x800
    586a:	4918      	ldr	r1, [pc, #96]	; (58cc <prepare_multithreading+0x88>)
    586c:	4628      	mov	r0, r5
    586e:	f000 fa43 	bl	5cf8 <z_setup_new_thread>
    5872:	4606      	mov	r6, r0
    5874:	7b6b      	ldrb	r3, [r5, #13]
    5876:	f023 0304 	bic.w	r3, r3, #4
    587a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    587c:	4628      	mov	r0, r5
    587e:	f001 f9b1 	bl	6be4 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    5882:	2c00      	cmp	r4, #0
    5884:	dd02      	ble.n	588c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    5886:	4630      	mov	r0, r6
    5888:	b006      	add	sp, #24
    588a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    588c:	4620      	mov	r0, r4
    588e:	f7ff ffa1 	bl	57d4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5892:	4b0f      	ldr	r3, [pc, #60]	; (58d0 <prepare_multithreading+0x8c>)
    5894:	22b0      	movs	r2, #176	; 0xb0
    5896:	fb02 3204 	mla	r2, r2, r4, r3
    589a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    589e:	4b08      	ldr	r3, [pc, #32]	; (58c0 <prepare_multithreading+0x7c>)
    58a0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    58a4:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    58a6:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    58a8:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    58ac:	4a09      	ldr	r2, [pc, #36]	; (58d4 <prepare_multithreading+0x90>)
    58ae:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    58b2:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    58b6:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    58b8:	3401      	adds	r4, #1
    58ba:	e7e2      	b.n	5882 <prepare_multithreading+0x3e>
    58bc:	20000460 	.word	0x20000460
    58c0:	20001004 	.word	0x20001004
    58c4:	0000c8a0 	.word	0x0000c8a0
    58c8:	000058d9 	.word	0x000058d9
    58cc:	20002040 	.word	0x20002040
    58d0:	200003b0 	.word	0x200003b0
    58d4:	200029c0 	.word	0x200029c0

000058d8 <bg_thread_main>:
{
    58d8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    58da:	4b0a      	ldr	r3, [pc, #40]	; (5904 <bg_thread_main+0x2c>)
    58dc:	2201      	movs	r2, #1
    58de:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    58e0:	2002      	movs	r0, #2
    58e2:	f7ff fee9 	bl	56b8 <z_sys_init_run_level>
	boot_banner();
    58e6:	f002 fbf9 	bl	80dc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    58ea:	2003      	movs	r0, #3
    58ec:	f7ff fee4 	bl	56b8 <z_sys_init_run_level>
	z_init_static_threads();
    58f0:	f000 fac8 	bl	5e84 <z_init_static_threads>
	main();
    58f4:	f005 ffab 	bl	b84e <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    58f8:	4a03      	ldr	r2, [pc, #12]	; (5908 <bg_thread_main+0x30>)
    58fa:	7b13      	ldrb	r3, [r2, #12]
    58fc:	f023 0301 	bic.w	r3, r3, #1
    5900:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5902:	bd08      	pop	{r3, pc}
    5904:	20001a2d 	.word	0x20001a2d
    5908:	20000460 	.word	0x20000460

0000590c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    590c:	b508      	push	{r3, lr}
    590e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5910:	4a01      	ldr	r2, [pc, #4]	; (5918 <switch_to_main_thread+0xc>)
    5912:	4802      	ldr	r0, [pc, #8]	; (591c <switch_to_main_thread+0x10>)
    5914:	f7fc fa54 	bl	1dc0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5918:	000058d9 	.word	0x000058d9
    591c:	20000460 	.word	0x20000460

00005920 <z_bss_zero>:
{
    5920:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5922:	4803      	ldr	r0, [pc, #12]	; (5930 <z_bss_zero+0x10>)
    5924:	4a03      	ldr	r2, [pc, #12]	; (5934 <z_bss_zero+0x14>)
    5926:	1a12      	subs	r2, r2, r0
    5928:	2100      	movs	r1, #0
    592a:	f005 fb11 	bl	af50 <memset>
}
    592e:	bd08      	pop	{r3, pc}
    5930:	20000230 	.word	0x20000230
    5934:	20001bec 	.word	0x20001bec

00005938 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5938:	b500      	push	{lr}
    593a:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    593c:	4b1c      	ldr	r3, [pc, #112]	; (59b0 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    593e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5942:	4c1c      	ldr	r4, [pc, #112]	; (59b4 <z_cstart+0x7c>)
    5944:	6963      	ldr	r3, [r4, #20]
    5946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    594a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    594c:	23e0      	movs	r3, #224	; 0xe0
    594e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5952:	2500      	movs	r5, #0
    5954:	77e5      	strb	r5, [r4, #31]
    5956:	7625      	strb	r5, [r4, #24]
    5958:	7665      	strb	r5, [r4, #25]
    595a:	76a5      	strb	r5, [r4, #26]
    595c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5960:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5962:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5966:	6263      	str	r3, [r4, #36]	; 0x24
    5968:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    596c:	f7fc fbdc 	bl	2128 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5970:	f7fc f8d8 	bl	1b24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5978:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    597a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    597c:	f7fc fd22 	bl	23c4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5980:	f7fc fc78 	bl	2274 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    5984:	2401      	movs	r4, #1
    5986:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    598a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    598e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    5990:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5992:	4b09      	ldr	r3, [pc, #36]	; (59b8 <z_cstart+0x80>)
    5994:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5998:	f7ff fe82 	bl	56a0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    599c:	4628      	mov	r0, r5
    599e:	f7ff fe8b 	bl	56b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    59a2:	4620      	mov	r0, r4
    59a4:	f7ff fe88 	bl	56b8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    59a8:	f7ff ff4c 	bl	5844 <prepare_multithreading>
    59ac:	f7ff ffae 	bl	590c <switch_to_main_thread>
    59b0:	200031e0 	.word	0x200031e0
    59b4:	e000ed00 	.word	0xe000ed00
    59b8:	20001004 	.word	0x20001004

000059bc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    59bc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    59be:	4c10      	ldr	r4, [pc, #64]	; (5a00 <init_mem_slab_module+0x44>)
	int rc = 0;
    59c0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    59c2:	e016      	b.n	59f2 <init_mem_slab_module+0x36>
    59c4:	4e0f      	ldr	r6, [pc, #60]	; (5a04 <init_mem_slab_module+0x48>)
    59c6:	233c      	movs	r3, #60	; 0x3c
    59c8:	4632      	mov	r2, r6
    59ca:	490f      	ldr	r1, [pc, #60]	; (5a08 <init_mem_slab_module+0x4c>)
    59cc:	480f      	ldr	r0, [pc, #60]	; (5a0c <init_mem_slab_module+0x50>)
    59ce:	f005 f83b 	bl	aa48 <printk>
    59d2:	480f      	ldr	r0, [pc, #60]	; (5a10 <init_mem_slab_module+0x54>)
    59d4:	f005 f838 	bl	aa48 <printk>
    59d8:	213c      	movs	r1, #60	; 0x3c
    59da:	4630      	mov	r0, r6
    59dc:	f005 f98d 	bl	acfa <assert_post_action>
    59e0:	4b0c      	ldr	r3, [pc, #48]	; (5a14 <init_mem_slab_module+0x58>)
    59e2:	429c      	cmp	r4, r3
    59e4:	d209      	bcs.n	59fa <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    59e6:	4620      	mov	r0, r4
    59e8:	f005 fe65 	bl	b6b6 <create_free_list>
		if (rc < 0) {
    59ec:	1e05      	subs	r5, r0, #0
    59ee:	db04      	blt.n	59fa <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    59f0:	3420      	adds	r4, #32
    59f2:	4b08      	ldr	r3, [pc, #32]	; (5a14 <init_mem_slab_module+0x58>)
    59f4:	429c      	cmp	r4, r3
    59f6:	d9f3      	bls.n	59e0 <init_mem_slab_module+0x24>
    59f8:	e7e4      	b.n	59c4 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    59fa:	4628      	mov	r0, r5
    59fc:	bd70      	pop	{r4, r5, r6, pc}
    59fe:	bf00      	nop
    5a00:	200001cc 	.word	0x200001cc
    5a04:	0000c8a8 	.word	0x0000c8a8
    5a08:	0000c8d0 	.word	0x0000c8d0
    5a0c:	0000bc60 	.word	0x0000bc60
    5a10:	0000c8f0 	.word	0x0000c8f0
    5a14:	200001cc 	.word	0x200001cc

00005a18 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a1c:	b082      	sub	sp, #8
    5a1e:	4604      	mov	r4, r0
    5a20:	460e      	mov	r6, r1
    5a22:	4690      	mov	r8, r2
    5a24:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5a26:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5a2a:	f04f 0320 	mov.w	r3, #32
    5a2e:	f3ef 8711 	mrs	r7, BASEPRI
    5a32:	f383 8812 	msr	BASEPRI_MAX, r3
    5a36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a3a:	4628      	mov	r0, r5
    5a3c:	f000 f8da 	bl	5bf4 <z_spin_lock_valid>
    5a40:	b1c0      	cbz	r0, 5a74 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    5a42:	4628      	mov	r0, r5
    5a44:	f000 f8f6 	bl	5c34 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5a48:	69a3      	ldr	r3, [r4, #24]
    5a4a:	b323      	cbz	r3, 5a96 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    5a4c:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5a4e:	69a3      	ldr	r3, [r4, #24]
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5a54:	69e3      	ldr	r3, [r4, #28]
    5a56:	3301      	adds	r3, #1
    5a58:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5a5a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a5c:	4628      	mov	r0, r5
    5a5e:	f000 f8d9 	bl	5c14 <z_spin_unlock_valid>
    5a62:	b378      	cbz	r0, 5ac4 <k_mem_slab_alloc+0xac>
	__asm__ volatile(
    5a64:	f387 8811 	msr	BASEPRI, r7
    5a68:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    5a6c:	4620      	mov	r0, r4
    5a6e:	b002      	add	sp, #8
    5a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a74:	f8df a07c 	ldr.w	sl, [pc, #124]	; 5af4 <k_mem_slab_alloc+0xdc>
    5a78:	2381      	movs	r3, #129	; 0x81
    5a7a:	4652      	mov	r2, sl
    5a7c:	4919      	ldr	r1, [pc, #100]	; (5ae4 <k_mem_slab_alloc+0xcc>)
    5a7e:	481a      	ldr	r0, [pc, #104]	; (5ae8 <k_mem_slab_alloc+0xd0>)
    5a80:	f004 ffe2 	bl	aa48 <printk>
    5a84:	4629      	mov	r1, r5
    5a86:	4819      	ldr	r0, [pc, #100]	; (5aec <k_mem_slab_alloc+0xd4>)
    5a88:	f004 ffde 	bl	aa48 <printk>
    5a8c:	2181      	movs	r1, #129	; 0x81
    5a8e:	4650      	mov	r0, sl
    5a90:	f005 f933 	bl	acfa <assert_post_action>
    5a94:	e7d5      	b.n	5a42 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5a96:	ea58 0309 	orrs.w	r3, r8, r9
    5a9a:	d104      	bne.n	5aa6 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    5a9c:	2300      	movs	r3, #0
    5a9e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5aa0:	f06f 040b 	mvn.w	r4, #11
    5aa4:	e7da      	b.n	5a5c <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5aa6:	e9cd 8900 	strd	r8, r9, [sp]
    5aaa:	4622      	mov	r2, r4
    5aac:	4639      	mov	r1, r7
    5aae:	4628      	mov	r0, r5
    5ab0:	f001 fa70 	bl	6f94 <z_pend_curr>
		if (result == 0) {
    5ab4:	4604      	mov	r4, r0
    5ab6:	2800      	cmp	r0, #0
    5ab8:	d1d8      	bne.n	5a6c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5aba:	4b0d      	ldr	r3, [pc, #52]	; (5af0 <k_mem_slab_alloc+0xd8>)
    5abc:	689b      	ldr	r3, [r3, #8]
    5abe:	695b      	ldr	r3, [r3, #20]
    5ac0:	6033      	str	r3, [r6, #0]
		return result;
    5ac2:	e7d3      	b.n	5a6c <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ac4:	4e0b      	ldr	r6, [pc, #44]	; (5af4 <k_mem_slab_alloc+0xdc>)
    5ac6:	23ac      	movs	r3, #172	; 0xac
    5ac8:	4632      	mov	r2, r6
    5aca:	490b      	ldr	r1, [pc, #44]	; (5af8 <k_mem_slab_alloc+0xe0>)
    5acc:	4806      	ldr	r0, [pc, #24]	; (5ae8 <k_mem_slab_alloc+0xd0>)
    5ace:	f004 ffbb 	bl	aa48 <printk>
    5ad2:	4629      	mov	r1, r5
    5ad4:	4809      	ldr	r0, [pc, #36]	; (5afc <k_mem_slab_alloc+0xe4>)
    5ad6:	f004 ffb7 	bl	aa48 <printk>
    5ada:	21ac      	movs	r1, #172	; 0xac
    5adc:	4630      	mov	r0, r6
    5ade:	f005 f90c 	bl	acfa <assert_post_action>
    5ae2:	e7bf      	b.n	5a64 <k_mem_slab_alloc+0x4c>
    5ae4:	0000bdd0 	.word	0x0000bdd0
    5ae8:	0000bc60 	.word	0x0000bc60
    5aec:	0000bde8 	.word	0x0000bde8
    5af0:	20001004 	.word	0x20001004
    5af4:	0000bd78 	.word	0x0000bd78
    5af8:	0000bda0 	.word	0x0000bda0
    5afc:	0000bdb8 	.word	0x0000bdb8

00005b00 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b04:	4604      	mov	r4, r0
    5b06:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5b08:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    5b0c:	f04f 0320 	mov.w	r3, #32
    5b10:	f3ef 8711 	mrs	r7, BASEPRI
    5b14:	f383 8812 	msr	BASEPRI_MAX, r3
    5b18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b1c:	4630      	mov	r0, r6
    5b1e:	f000 f869 	bl	5bf4 <z_spin_lock_valid>
    5b22:	b1b0      	cbz	r0, 5b52 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    5b24:	4630      	mov	r0, r6
    5b26:	f000 f885 	bl	5c34 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5b2a:	69a3      	ldr	r3, [r4, #24]
    5b2c:	b313      	cbz	r3, 5b74 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    5b2e:	682b      	ldr	r3, [r5, #0]
    5b30:	69a2      	ldr	r2, [r4, #24]
    5b32:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5b34:	682b      	ldr	r3, [r5, #0]
    5b36:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5b38:	69e3      	ldr	r3, [r4, #28]
    5b3a:	3b01      	subs	r3, #1
    5b3c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b3e:	4630      	mov	r0, r6
    5b40:	f000 f868 	bl	5c14 <z_spin_unlock_valid>
    5b44:	b338      	cbz	r0, 5b96 <k_mem_slab_free+0x96>
	__asm__ volatile(
    5b46:	f387 8811 	msr	BASEPRI, r7
    5b4a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b52:	f8df 8070 	ldr.w	r8, [pc, #112]	; 5bc4 <k_mem_slab_free+0xc4>
    5b56:	2381      	movs	r3, #129	; 0x81
    5b58:	4642      	mov	r2, r8
    5b5a:	4917      	ldr	r1, [pc, #92]	; (5bb8 <k_mem_slab_free+0xb8>)
    5b5c:	4817      	ldr	r0, [pc, #92]	; (5bbc <k_mem_slab_free+0xbc>)
    5b5e:	f004 ff73 	bl	aa48 <printk>
    5b62:	4631      	mov	r1, r6
    5b64:	4816      	ldr	r0, [pc, #88]	; (5bc0 <k_mem_slab_free+0xc0>)
    5b66:	f004 ff6f 	bl	aa48 <printk>
    5b6a:	2181      	movs	r1, #129	; 0x81
    5b6c:	4640      	mov	r0, r8
    5b6e:	f005 f8c4 	bl	acfa <assert_post_action>
    5b72:	e7d7      	b.n	5b24 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5b74:	4620      	mov	r0, r4
    5b76:	f001 fc4b 	bl	7410 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5b7a:	2800      	cmp	r0, #0
    5b7c:	d0d7      	beq.n	5b2e <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5b7e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5b80:	2100      	movs	r1, #0
    5b82:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5b86:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    5b88:	f001 f82c 	bl	6be4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5b8c:	4639      	mov	r1, r7
    5b8e:	4630      	mov	r0, r6
    5b90:	f000 fda6 	bl	66e0 <z_reschedule>
			return;
    5b94:	e7db      	b.n	5b4e <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b96:	4c0b      	ldr	r4, [pc, #44]	; (5bc4 <k_mem_slab_free+0xc4>)
    5b98:	23ac      	movs	r3, #172	; 0xac
    5b9a:	4622      	mov	r2, r4
    5b9c:	490a      	ldr	r1, [pc, #40]	; (5bc8 <k_mem_slab_free+0xc8>)
    5b9e:	4807      	ldr	r0, [pc, #28]	; (5bbc <k_mem_slab_free+0xbc>)
    5ba0:	f004 ff52 	bl	aa48 <printk>
    5ba4:	4631      	mov	r1, r6
    5ba6:	4809      	ldr	r0, [pc, #36]	; (5bcc <k_mem_slab_free+0xcc>)
    5ba8:	f004 ff4e 	bl	aa48 <printk>
    5bac:	21ac      	movs	r1, #172	; 0xac
    5bae:	4620      	mov	r0, r4
    5bb0:	f005 f8a3 	bl	acfa <assert_post_action>
    5bb4:	e7c7      	b.n	5b46 <k_mem_slab_free+0x46>
    5bb6:	bf00      	nop
    5bb8:	0000bdd0 	.word	0x0000bdd0
    5bbc:	0000bc60 	.word	0x0000bc60
    5bc0:	0000bde8 	.word	0x0000bde8
    5bc4:	0000bd78 	.word	0x0000bd78
    5bc8:	0000bda0 	.word	0x0000bda0
    5bcc:	0000bdb8 	.word	0x0000bdb8

00005bd0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    5bd0:	b538      	push	{r3, r4, r5, lr}
    5bd2:	4614      	mov	r4, r2
    5bd4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5bd6:	ea54 0305 	orrs.w	r3, r4, r5
    5bda:	d102      	bne.n	5be2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    5bdc:	f005 fda9 	bl	b732 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    5be0:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5be2:	462b      	mov	r3, r5
    5be4:	4902      	ldr	r1, [pc, #8]	; (5bf0 <schedule_new_thread+0x20>)
    5be6:	3018      	adds	r0, #24
    5be8:	f001 ff48 	bl	7a7c <z_add_timeout>
    5bec:	e7f8      	b.n	5be0 <schedule_new_thread+0x10>
    5bee:	bf00      	nop
    5bf0:	00006d41 	.word	0x00006d41

00005bf4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5bf4:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    5bf6:	b13b      	cbz	r3, 5c08 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    5bf8:	f003 0303 	and.w	r3, r3, #3
    5bfc:	4a04      	ldr	r2, [pc, #16]	; (5c10 <z_spin_lock_valid+0x1c>)
    5bfe:	7d12      	ldrb	r2, [r2, #20]
    5c00:	4293      	cmp	r3, r2
    5c02:	d003      	beq.n	5c0c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    5c04:	2001      	movs	r0, #1
    5c06:	4770      	bx	lr
    5c08:	2001      	movs	r0, #1
    5c0a:	4770      	bx	lr
			return false;
    5c0c:	2000      	movs	r0, #0
}
    5c0e:	4770      	bx	lr
    5c10:	20001004 	.word	0x20001004

00005c14 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5c14:	6801      	ldr	r1, [r0, #0]
    5c16:	4a06      	ldr	r2, [pc, #24]	; (5c30 <z_spin_unlock_valid+0x1c>)
    5c18:	7d13      	ldrb	r3, [r2, #20]
    5c1a:	6892      	ldr	r2, [r2, #8]
    5c1c:	4313      	orrs	r3, r2
    5c1e:	4299      	cmp	r1, r3
    5c20:	d103      	bne.n	5c2a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    5c22:	2300      	movs	r3, #0
    5c24:	6003      	str	r3, [r0, #0]
	return true;
    5c26:	2001      	movs	r0, #1
    5c28:	4770      	bx	lr
		return false;
    5c2a:	2000      	movs	r0, #0
}
    5c2c:	4770      	bx	lr
    5c2e:	bf00      	nop
    5c30:	20001004 	.word	0x20001004

00005c34 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5c34:	4a02      	ldr	r2, [pc, #8]	; (5c40 <z_spin_lock_set_owner+0xc>)
    5c36:	7d13      	ldrb	r3, [r2, #20]
    5c38:	6892      	ldr	r2, [r2, #8]
    5c3a:	4313      	orrs	r3, r2
    5c3c:	6003      	str	r3, [r0, #0]
}
    5c3e:	4770      	bx	lr
    5c40:	20001004 	.word	0x20001004

00005c44 <z_thread_monitor_exit>:
{
    5c44:	b570      	push	{r4, r5, r6, lr}
    5c46:	4604      	mov	r4, r0
	__asm__ volatile(
    5c48:	f04f 0320 	mov.w	r3, #32
    5c4c:	f3ef 8511 	mrs	r5, BASEPRI
    5c50:	f383 8812 	msr	BASEPRI_MAX, r3
    5c54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c58:	481f      	ldr	r0, [pc, #124]	; (5cd8 <z_thread_monitor_exit+0x94>)
    5c5a:	f7ff ffcb 	bl	5bf4 <z_spin_lock_valid>
    5c5e:	b150      	cbz	r0, 5c76 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    5c60:	481d      	ldr	r0, [pc, #116]	; (5cd8 <z_thread_monitor_exit+0x94>)
    5c62:	f7ff ffe7 	bl	5c34 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    5c66:	4b1d      	ldr	r3, [pc, #116]	; (5cdc <z_thread_monitor_exit+0x98>)
    5c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c6a:	42a3      	cmp	r3, r4
    5c6c:	d114      	bne.n	5c98 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    5c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5c70:	4b1a      	ldr	r3, [pc, #104]	; (5cdc <z_thread_monitor_exit+0x98>)
    5c72:	629a      	str	r2, [r3, #40]	; 0x28
    5c74:	e017      	b.n	5ca6 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c76:	4e1a      	ldr	r6, [pc, #104]	; (5ce0 <z_thread_monitor_exit+0x9c>)
    5c78:	2381      	movs	r3, #129	; 0x81
    5c7a:	4632      	mov	r2, r6
    5c7c:	4919      	ldr	r1, [pc, #100]	; (5ce4 <z_thread_monitor_exit+0xa0>)
    5c7e:	481a      	ldr	r0, [pc, #104]	; (5ce8 <z_thread_monitor_exit+0xa4>)
    5c80:	f004 fee2 	bl	aa48 <printk>
    5c84:	4914      	ldr	r1, [pc, #80]	; (5cd8 <z_thread_monitor_exit+0x94>)
    5c86:	4819      	ldr	r0, [pc, #100]	; (5cec <z_thread_monitor_exit+0xa8>)
    5c88:	f004 fede 	bl	aa48 <printk>
    5c8c:	2181      	movs	r1, #129	; 0x81
    5c8e:	4630      	mov	r0, r6
    5c90:	f005 f833 	bl	acfa <assert_post_action>
    5c94:	e7e4      	b.n	5c60 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    5c96:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    5c98:	b113      	cbz	r3, 5ca0 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    5c9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    5c9c:	42a2      	cmp	r2, r4
    5c9e:	d1fa      	bne.n	5c96 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    5ca0:	b10b      	cbz	r3, 5ca6 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    5ca2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    5ca4:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ca6:	480c      	ldr	r0, [pc, #48]	; (5cd8 <z_thread_monitor_exit+0x94>)
    5ca8:	f7ff ffb4 	bl	5c14 <z_spin_unlock_valid>
    5cac:	b120      	cbz	r0, 5cb8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    5cae:	f385 8811 	msr	BASEPRI, r5
    5cb2:	f3bf 8f6f 	isb	sy
}
    5cb6:	bd70      	pop	{r4, r5, r6, pc}
    5cb8:	4c09      	ldr	r4, [pc, #36]	; (5ce0 <z_thread_monitor_exit+0x9c>)
    5cba:	23ac      	movs	r3, #172	; 0xac
    5cbc:	4622      	mov	r2, r4
    5cbe:	490c      	ldr	r1, [pc, #48]	; (5cf0 <z_thread_monitor_exit+0xac>)
    5cc0:	4809      	ldr	r0, [pc, #36]	; (5ce8 <z_thread_monitor_exit+0xa4>)
    5cc2:	f004 fec1 	bl	aa48 <printk>
    5cc6:	4904      	ldr	r1, [pc, #16]	; (5cd8 <z_thread_monitor_exit+0x94>)
    5cc8:	480a      	ldr	r0, [pc, #40]	; (5cf4 <z_thread_monitor_exit+0xb0>)
    5cca:	f004 febd 	bl	aa48 <printk>
    5cce:	21ac      	movs	r1, #172	; 0xac
    5cd0:	4620      	mov	r0, r4
    5cd2:	f005 f812 	bl	acfa <assert_post_action>
    5cd6:	e7ea      	b.n	5cae <z_thread_monitor_exit+0x6a>
    5cd8:	20001030 	.word	0x20001030
    5cdc:	20001004 	.word	0x20001004
    5ce0:	0000bd78 	.word	0x0000bd78
    5ce4:	0000bdd0 	.word	0x0000bdd0
    5ce8:	0000bc60 	.word	0x0000bc60
    5cec:	0000bde8 	.word	0x0000bde8
    5cf0:	0000bda0 	.word	0x0000bda0
    5cf4:	0000bdb8 	.word	0x0000bdb8

00005cf8 <z_setup_new_thread>:
{
    5cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cfc:	b085      	sub	sp, #20
    5cfe:	4604      	mov	r4, r0
    5d00:	460e      	mov	r6, r1
    5d02:	4690      	mov	r8, r2
    5d04:	461d      	mov	r5, r3
    5d06:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    5d0a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    5d0e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    5d10:	2f0f      	cmp	r7, #15
    5d12:	d05e      	beq.n	5dd2 <z_setup_new_thread+0xda>
    5d14:	f107 0310 	add.w	r3, r7, #16
    5d18:	2b1e      	cmp	r3, #30
    5d1a:	d85e      	bhi.n	5dda <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5d1c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    5d20:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    5d22:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    5d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5d26:	2204      	movs	r2, #4
    5d28:	4639      	mov	r1, r7
    5d2a:	4620      	mov	r0, r4
    5d2c:	f005 fd05 	bl	b73a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    5d30:	4642      	mov	r2, r8
    5d32:	4631      	mov	r1, r6
    5d34:	4620      	mov	r0, r4
    5d36:	f005 fce4 	bl	b702 <setup_thread_stack>
    5d3a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5d3e:	9302      	str	r3, [sp, #8]
    5d40:	f8cd a004 	str.w	sl, [sp, #4]
    5d44:	f8cd b000 	str.w	fp, [sp]
    5d48:	462b      	mov	r3, r5
    5d4a:	4602      	mov	r2, r0
    5d4c:	4631      	mov	r1, r6
    5d4e:	4620      	mov	r0, r4
    5d50:	f7fb ffe6 	bl	1d20 <arch_new_thread>
	new_thread->init_data = NULL;
    5d54:	2300      	movs	r3, #0
    5d56:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    5d58:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    5d5a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    5d5e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    5d62:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5d64:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    5d66:	f04f 0320 	mov.w	r3, #32
    5d6a:	f3ef 8611 	mrs	r6, BASEPRI
    5d6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d76:	4837      	ldr	r0, [pc, #220]	; (5e54 <z_setup_new_thread+0x15c>)
    5d78:	f7ff ff3c 	bl	5bf4 <z_spin_lock_valid>
    5d7c:	2800      	cmp	r0, #0
    5d7e:	d042      	beq.n	5e06 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    5d80:	4d34      	ldr	r5, [pc, #208]	; (5e54 <z_setup_new_thread+0x15c>)
    5d82:	4628      	mov	r0, r5
    5d84:	f7ff ff56 	bl	5c34 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    5d88:	4b33      	ldr	r3, [pc, #204]	; (5e58 <z_setup_new_thread+0x160>)
    5d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d8c:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    5d8e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d90:	4628      	mov	r0, r5
    5d92:	f7ff ff3f 	bl	5c14 <z_spin_unlock_valid>
    5d96:	2800      	cmp	r0, #0
    5d98:	d045      	beq.n	5e26 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    5d9a:	f386 8811 	msr	BASEPRI, r6
    5d9e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    5da2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5da4:	2b00      	cmp	r3, #0
    5da6:	d04e      	beq.n	5e46 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    5da8:	221f      	movs	r2, #31
    5daa:	4619      	mov	r1, r3
    5dac:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5db0:	f005 f85e 	bl	ae70 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    5db4:	2300      	movs	r3, #0
    5db6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    5dba:	4b27      	ldr	r3, [pc, #156]	; (5e58 <z_setup_new_thread+0x160>)
    5dbc:	689b      	ldr	r3, [r3, #8]
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	d045      	beq.n	5e4e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    5dc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5dc6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    5dca:	4638      	mov	r0, r7
    5dcc:	b005      	add	sp, #20
    5dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    5dd2:	4b22      	ldr	r3, [pc, #136]	; (5e5c <z_setup_new_thread+0x164>)
    5dd4:	429d      	cmp	r5, r3
    5dd6:	d19d      	bne.n	5d14 <z_setup_new_thread+0x1c>
    5dd8:	e7a0      	b.n	5d1c <z_setup_new_thread+0x24>
    5dda:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5e80 <z_setup_new_thread+0x188>
    5dde:	f240 13ff 	movw	r3, #511	; 0x1ff
    5de2:	464a      	mov	r2, r9
    5de4:	491e      	ldr	r1, [pc, #120]	; (5e60 <z_setup_new_thread+0x168>)
    5de6:	481f      	ldr	r0, [pc, #124]	; (5e64 <z_setup_new_thread+0x16c>)
    5de8:	f004 fe2e 	bl	aa48 <printk>
    5dec:	f06f 030f 	mvn.w	r3, #15
    5df0:	220e      	movs	r2, #14
    5df2:	4639      	mov	r1, r7
    5df4:	481c      	ldr	r0, [pc, #112]	; (5e68 <z_setup_new_thread+0x170>)
    5df6:	f004 fe27 	bl	aa48 <printk>
    5dfa:	f240 11ff 	movw	r1, #511	; 0x1ff
    5dfe:	4648      	mov	r0, r9
    5e00:	f004 ff7b 	bl	acfa <assert_post_action>
    5e04:	e78a      	b.n	5d1c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e06:	4d19      	ldr	r5, [pc, #100]	; (5e6c <z_setup_new_thread+0x174>)
    5e08:	2381      	movs	r3, #129	; 0x81
    5e0a:	462a      	mov	r2, r5
    5e0c:	4918      	ldr	r1, [pc, #96]	; (5e70 <z_setup_new_thread+0x178>)
    5e0e:	4815      	ldr	r0, [pc, #84]	; (5e64 <z_setup_new_thread+0x16c>)
    5e10:	f004 fe1a 	bl	aa48 <printk>
    5e14:	490f      	ldr	r1, [pc, #60]	; (5e54 <z_setup_new_thread+0x15c>)
    5e16:	4817      	ldr	r0, [pc, #92]	; (5e74 <z_setup_new_thread+0x17c>)
    5e18:	f004 fe16 	bl	aa48 <printk>
    5e1c:	2181      	movs	r1, #129	; 0x81
    5e1e:	4628      	mov	r0, r5
    5e20:	f004 ff6b 	bl	acfa <assert_post_action>
    5e24:	e7ac      	b.n	5d80 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e26:	4d11      	ldr	r5, [pc, #68]	; (5e6c <z_setup_new_thread+0x174>)
    5e28:	23ac      	movs	r3, #172	; 0xac
    5e2a:	462a      	mov	r2, r5
    5e2c:	4912      	ldr	r1, [pc, #72]	; (5e78 <z_setup_new_thread+0x180>)
    5e2e:	480d      	ldr	r0, [pc, #52]	; (5e64 <z_setup_new_thread+0x16c>)
    5e30:	f004 fe0a 	bl	aa48 <printk>
    5e34:	4907      	ldr	r1, [pc, #28]	; (5e54 <z_setup_new_thread+0x15c>)
    5e36:	4811      	ldr	r0, [pc, #68]	; (5e7c <z_setup_new_thread+0x184>)
    5e38:	f004 fe06 	bl	aa48 <printk>
    5e3c:	21ac      	movs	r1, #172	; 0xac
    5e3e:	4628      	mov	r0, r5
    5e40:	f004 ff5b 	bl	acfa <assert_post_action>
    5e44:	e7a9      	b.n	5d9a <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    5e46:	2300      	movs	r3, #0
    5e48:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    5e4c:	e7b5      	b.n	5dba <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    5e4e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    5e52:	e7ba      	b.n	5dca <z_setup_new_thread+0xd2>
    5e54:	20001030 	.word	0x20001030
    5e58:	20001004 	.word	0x20001004
    5e5c:	00005f81 	.word	0x00005f81
    5e60:	0000c968 	.word	0x0000c968
    5e64:	0000bc60 	.word	0x0000bc60
    5e68:	0000c9e8 	.word	0x0000c9e8
    5e6c:	0000bd78 	.word	0x0000bd78
    5e70:	0000bdd0 	.word	0x0000bdd0
    5e74:	0000bde8 	.word	0x0000bde8
    5e78:	0000bda0 	.word	0x0000bda0
    5e7c:	0000bdb8 	.word	0x0000bdb8
    5e80:	0000c910 	.word	0x0000c910

00005e84 <z_init_static_threads>:
{
    5e84:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    5e88:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    5e8a:	4c37      	ldr	r4, [pc, #220]	; (5f68 <z_init_static_threads+0xe4>)
    5e8c:	e027      	b.n	5ede <z_init_static_threads+0x5a>
    5e8e:	4d37      	ldr	r5, [pc, #220]	; (5f6c <z_init_static_threads+0xe8>)
    5e90:	f240 23cf 	movw	r3, #719	; 0x2cf
    5e94:	462a      	mov	r2, r5
    5e96:	4936      	ldr	r1, [pc, #216]	; (5f70 <z_init_static_threads+0xec>)
    5e98:	4836      	ldr	r0, [pc, #216]	; (5f74 <z_init_static_threads+0xf0>)
    5e9a:	f004 fdd5 	bl	aa48 <printk>
    5e9e:	4836      	ldr	r0, [pc, #216]	; (5f78 <z_init_static_threads+0xf4>)
    5ea0:	f004 fdd2 	bl	aa48 <printk>
    5ea4:	f240 21cf 	movw	r1, #719	; 0x2cf
    5ea8:	4628      	mov	r0, r5
    5eaa:	f004 ff26 	bl	acfa <assert_post_action>
    5eae:	4b33      	ldr	r3, [pc, #204]	; (5f7c <z_init_static_threads+0xf8>)
    5eb0:	429c      	cmp	r4, r3
    5eb2:	d218      	bcs.n	5ee6 <z_init_static_threads+0x62>
		z_setup_new_thread(
    5eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5eb6:	9305      	str	r3, [sp, #20]
    5eb8:	6a23      	ldr	r3, [r4, #32]
    5eba:	9304      	str	r3, [sp, #16]
    5ebc:	69e3      	ldr	r3, [r4, #28]
    5ebe:	9303      	str	r3, [sp, #12]
    5ec0:	69a3      	ldr	r3, [r4, #24]
    5ec2:	9302      	str	r3, [sp, #8]
    5ec4:	6963      	ldr	r3, [r4, #20]
    5ec6:	9301      	str	r3, [sp, #4]
    5ec8:	6923      	ldr	r3, [r4, #16]
    5eca:	9300      	str	r3, [sp, #0]
    5ecc:	68e3      	ldr	r3, [r4, #12]
    5ece:	68a2      	ldr	r2, [r4, #8]
    5ed0:	6861      	ldr	r1, [r4, #4]
    5ed2:	6820      	ldr	r0, [r4, #0]
    5ed4:	f7ff ff10 	bl	5cf8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5ed8:	6823      	ldr	r3, [r4, #0]
    5eda:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5edc:	3430      	adds	r4, #48	; 0x30
    5ede:	4b27      	ldr	r3, [pc, #156]	; (5f7c <z_init_static_threads+0xf8>)
    5ee0:	429c      	cmp	r4, r3
    5ee2:	d9e4      	bls.n	5eae <z_init_static_threads+0x2a>
    5ee4:	e7d3      	b.n	5e8e <z_init_static_threads+0xa>
	k_sched_lock();
    5ee6:	f000 fc49 	bl	677c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5eea:	4c1f      	ldr	r4, [pc, #124]	; (5f68 <z_init_static_threads+0xe4>)
    5eec:	e01b      	b.n	5f26 <z_init_static_threads+0xa2>
			schedule_new_thread(thread_data->init_thread,
    5eee:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    5ef0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5ef4:	ea4f 79e3 	mov.w	r9, r3, asr #31
			return (t * to_hz + off) / from_hz;
    5ef8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    5efc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    5f00:	03d8      	lsls	r0, r3, #15
    5f02:	f240 35e7 	movw	r5, #999	; 0x3e7
    5f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f0a:	2300      	movs	r3, #0
    5f0c:	1940      	adds	r0, r0, r5
    5f0e:	f04f 0500 	mov.w	r5, #0
    5f12:	eb45 0101 	adc.w	r1, r5, r1
    5f16:	f7fa f8f3 	bl	100 <__aeabi_uldivmod>
    5f1a:	4602      	mov	r2, r0
    5f1c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    5f1e:	4630      	mov	r0, r6
    5f20:	f7ff fe56 	bl	5bd0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    5f24:	3430      	adds	r4, #48	; 0x30
    5f26:	4b15      	ldr	r3, [pc, #84]	; (5f7c <z_init_static_threads+0xf8>)
    5f28:	429c      	cmp	r4, r3
    5f2a:	d807      	bhi.n	5f3c <z_init_static_threads+0xb8>
    5f2c:	4b13      	ldr	r3, [pc, #76]	; (5f7c <z_init_static_threads+0xf8>)
    5f2e:	429c      	cmp	r4, r3
    5f30:	d215      	bcs.n	5f5e <z_init_static_threads+0xda>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5f38:	d0f4      	beq.n	5f24 <z_init_static_threads+0xa0>
    5f3a:	e7d8      	b.n	5eee <z_init_static_threads+0x6a>
	_FOREACH_STATIC_THREAD(thread_data) {
    5f3c:	4d0b      	ldr	r5, [pc, #44]	; (5f6c <z_init_static_threads+0xe8>)
    5f3e:	f240 23ee 	movw	r3, #750	; 0x2ee
    5f42:	462a      	mov	r2, r5
    5f44:	490a      	ldr	r1, [pc, #40]	; (5f70 <z_init_static_threads+0xec>)
    5f46:	480b      	ldr	r0, [pc, #44]	; (5f74 <z_init_static_threads+0xf0>)
    5f48:	f004 fd7e 	bl	aa48 <printk>
    5f4c:	480a      	ldr	r0, [pc, #40]	; (5f78 <z_init_static_threads+0xf4>)
    5f4e:	f004 fd7b 	bl	aa48 <printk>
    5f52:	f240 21ee 	movw	r1, #750	; 0x2ee
    5f56:	4628      	mov	r0, r5
    5f58:	f004 fecf 	bl	acfa <assert_post_action>
    5f5c:	e7e6      	b.n	5f2c <z_init_static_threads+0xa8>
	k_sched_unlock();
    5f5e:	f001 f975 	bl	724c <k_sched_unlock>
}
    5f62:	b006      	add	sp, #24
    5f64:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    5f68:	2000016c 	.word	0x2000016c
    5f6c:	0000c910 	.word	0x0000c910
    5f70:	0000ca1c 	.word	0x0000ca1c
    5f74:	0000bc60 	.word	0x0000bc60
    5f78:	0000c8f0 	.word	0x0000c8f0
    5f7c:	200001cc 	.word	0x200001cc

00005f80 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5f80:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5f82:	4b12      	ldr	r3, [pc, #72]	; (5fcc <idle+0x4c>)
    5f84:	689b      	ldr	r3, [r3, #8]
    5f86:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	da0d      	bge.n	5faa <idle+0x2a>
    5f8e:	4c10      	ldr	r4, [pc, #64]	; (5fd0 <idle+0x50>)
    5f90:	2327      	movs	r3, #39	; 0x27
    5f92:	4622      	mov	r2, r4
    5f94:	490f      	ldr	r1, [pc, #60]	; (5fd4 <idle+0x54>)
    5f96:	4810      	ldr	r0, [pc, #64]	; (5fd8 <idle+0x58>)
    5f98:	f004 fd56 	bl	aa48 <printk>
    5f9c:	2127      	movs	r1, #39	; 0x27
    5f9e:	4620      	mov	r0, r4
    5fa0:	f004 feab 	bl	acfa <assert_post_action>
    5fa4:	e001      	b.n	5faa <idle+0x2a>
	arch_cpu_idle();
    5fa6:	f7fb fdc3 	bl	1b30 <arch_cpu_idle>
	__asm__ volatile(
    5faa:	f04f 0220 	mov.w	r2, #32
    5fae:	f3ef 8311 	mrs	r3, BASEPRI
    5fb2:	f382 8812 	msr	BASEPRI_MAX, r2
    5fb6:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5fba:	f001 feb5 	bl	7d28 <z_get_next_timeout_expiry>
    5fbe:	4b03      	ldr	r3, [pc, #12]	; (5fcc <idle+0x4c>)
    5fc0:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    5fc2:	f7fb fbe5 	bl	1790 <pm_system_suspend>
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d1ef      	bne.n	5faa <idle+0x2a>
    5fca:	e7ec      	b.n	5fa6 <idle+0x26>
    5fcc:	20001004 	.word	0x20001004
    5fd0:	0000ca4c 	.word	0x0000ca4c
    5fd4:	0000ca70 	.word	0x0000ca70
    5fd8:	0000bc60 	.word	0x0000bc60

00005fdc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5fe0:	b083      	sub	sp, #12
    5fe2:	4604      	mov	r4, r0
    5fe4:	4616      	mov	r6, r2
    5fe6:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5fe8:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5fec:	2900      	cmp	r1, #0
    5fee:	d12b      	bne.n	6048 <z_impl_k_mutex_lock+0x6c>
    5ff0:	f04f 0320 	mov.w	r3, #32
    5ff4:	f3ef 8711 	mrs	r7, BASEPRI
    5ff8:	f383 8812 	msr	BASEPRI_MAX, r3
    5ffc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6000:	487b      	ldr	r0, [pc, #492]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    6002:	f7ff fdf7 	bl	5bf4 <z_spin_lock_valid>
    6006:	2800      	cmp	r0, #0
    6008:	d02d      	beq.n	6066 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    600a:	4879      	ldr	r0, [pc, #484]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    600c:	f7ff fe12 	bl	5c34 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6010:	68e1      	ldr	r1, [r4, #12]
    6012:	2900      	cmp	r1, #0
    6014:	d138      	bne.n	6088 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    6016:	2900      	cmp	r1, #0
    6018:	d17d      	bne.n	6116 <z_impl_k_mutex_lock+0x13a>
    601a:	4b76      	ldr	r3, [pc, #472]	; (61f4 <z_impl_k_mutex_lock+0x218>)
    601c:	689b      	ldr	r3, [r3, #8]
    601e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6022:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    6024:	3101      	adds	r1, #1
    6026:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    6028:	4b72      	ldr	r3, [pc, #456]	; (61f4 <z_impl_k_mutex_lock+0x218>)
    602a:	689b      	ldr	r3, [r3, #8]
    602c:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    602e:	4870      	ldr	r0, [pc, #448]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    6030:	f7ff fdf0 	bl	5c14 <z_spin_unlock_valid>
    6034:	2800      	cmp	r0, #0
    6036:	d070      	beq.n	611a <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    6038:	f387 8811 	msr	BASEPRI, r7
    603c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    6040:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6042:	b003      	add	sp, #12
    6044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6048:	4f6b      	ldr	r7, [pc, #428]	; (61f8 <z_impl_k_mutex_lock+0x21c>)
    604a:	2365      	movs	r3, #101	; 0x65
    604c:	463a      	mov	r2, r7
    604e:	496b      	ldr	r1, [pc, #428]	; (61fc <z_impl_k_mutex_lock+0x220>)
    6050:	486b      	ldr	r0, [pc, #428]	; (6200 <z_impl_k_mutex_lock+0x224>)
    6052:	f004 fcf9 	bl	aa48 <printk>
    6056:	486b      	ldr	r0, [pc, #428]	; (6204 <z_impl_k_mutex_lock+0x228>)
    6058:	f004 fcf6 	bl	aa48 <printk>
    605c:	2165      	movs	r1, #101	; 0x65
    605e:	4638      	mov	r0, r7
    6060:	f004 fe4b 	bl	acfa <assert_post_action>
    6064:	e7c4      	b.n	5ff0 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 6210 <z_impl_k_mutex_lock+0x234>
    606a:	2381      	movs	r3, #129	; 0x81
    606c:	4642      	mov	r2, r8
    606e:	4966      	ldr	r1, [pc, #408]	; (6208 <z_impl_k_mutex_lock+0x22c>)
    6070:	4863      	ldr	r0, [pc, #396]	; (6200 <z_impl_k_mutex_lock+0x224>)
    6072:	f004 fce9 	bl	aa48 <printk>
    6076:	495e      	ldr	r1, [pc, #376]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    6078:	4864      	ldr	r0, [pc, #400]	; (620c <z_impl_k_mutex_lock+0x230>)
    607a:	f004 fce5 	bl	aa48 <printk>
    607e:	2181      	movs	r1, #129	; 0x81
    6080:	4640      	mov	r0, r8
    6082:	f004 fe3a 	bl	acfa <assert_post_action>
    6086:	e7c0      	b.n	600a <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6088:	68a2      	ldr	r2, [r4, #8]
    608a:	4b5a      	ldr	r3, [pc, #360]	; (61f4 <z_impl_k_mutex_lock+0x218>)
    608c:	689b      	ldr	r3, [r3, #8]
    608e:	429a      	cmp	r2, r3
    6090:	d0c1      	beq.n	6016 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6092:	ea55 0106 	orrs.w	r1, r5, r6
    6096:	bf0c      	ite	eq
    6098:	f04f 0801 	moveq.w	r8, #1
    609c:	f04f 0800 	movne.w	r8, #0
    60a0:	d04b      	beq.n	613a <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    60a2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    60a6:	4649      	mov	r1, r9
    60a8:	f993 000e 	ldrsb.w	r0, [r3, #14]
    60ac:	f005 fb56 	bl	b75c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    60b0:	4581      	cmp	r9, r0
    60b2:	dc5d      	bgt.n	6170 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    60b4:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    60b8:	9600      	str	r6, [sp, #0]
    60ba:	9501      	str	r5, [sp, #4]
    60bc:	4622      	mov	r2, r4
    60be:	4639      	mov	r1, r7
    60c0:	484b      	ldr	r0, [pc, #300]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    60c2:	f000 ff67 	bl	6f94 <z_pend_curr>
	if (got_mutex == 0) {
    60c6:	2800      	cmp	r0, #0
    60c8:	d0bb      	beq.n	6042 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    60ca:	f04f 0320 	mov.w	r3, #32
    60ce:	f3ef 8511 	mrs	r5, BASEPRI
    60d2:	f383 8812 	msr	BASEPRI_MAX, r3
    60d6:	f3bf 8f6f 	isb	sy
    60da:	4845      	ldr	r0, [pc, #276]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    60dc:	f7ff fd8a 	bl	5bf4 <z_spin_lock_valid>
    60e0:	2800      	cmp	r0, #0
    60e2:	d04b      	beq.n	617c <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    60e4:	4842      	ldr	r0, [pc, #264]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    60e6:	f7ff fda5 	bl	5c34 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    60ea:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60ec:	42a3      	cmp	r3, r4
    60ee:	d055      	beq.n	619c <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    60f0:	2b00      	cmp	r3, #0
    60f2:	d053      	beq.n	619c <z_impl_k_mutex_lock+0x1c0>
    60f4:	6921      	ldr	r1, [r4, #16]
    60f6:	f993 000e 	ldrsb.w	r0, [r3, #14]
    60fa:	f005 fb2f 	bl	b75c <new_prio_for_inheritance>
    60fe:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6100:	4620      	mov	r0, r4
    6102:	f005 fb36 	bl	b772 <adjust_owner_prio>
    6106:	2800      	cmp	r0, #0
    6108:	d14a      	bne.n	61a0 <z_impl_k_mutex_lock+0x1c4>
    610a:	f1b9 0f00 	cmp.w	r9, #0
    610e:	d049      	beq.n	61a4 <z_impl_k_mutex_lock+0x1c8>
    6110:	f04f 0801 	mov.w	r8, #1
    6114:	e046      	b.n	61a4 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    6116:	6923      	ldr	r3, [r4, #16]
    6118:	e783      	b.n	6022 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    611a:	4c3d      	ldr	r4, [pc, #244]	; (6210 <z_impl_k_mutex_lock+0x234>)
    611c:	23ac      	movs	r3, #172	; 0xac
    611e:	4622      	mov	r2, r4
    6120:	493c      	ldr	r1, [pc, #240]	; (6214 <z_impl_k_mutex_lock+0x238>)
    6122:	4837      	ldr	r0, [pc, #220]	; (6200 <z_impl_k_mutex_lock+0x224>)
    6124:	f004 fc90 	bl	aa48 <printk>
    6128:	4931      	ldr	r1, [pc, #196]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    612a:	483b      	ldr	r0, [pc, #236]	; (6218 <z_impl_k_mutex_lock+0x23c>)
    612c:	f004 fc8c 	bl	aa48 <printk>
    6130:	21ac      	movs	r1, #172	; 0xac
    6132:	4620      	mov	r0, r4
    6134:	f004 fde1 	bl	acfa <assert_post_action>
    6138:	e77e      	b.n	6038 <z_impl_k_mutex_lock+0x5c>
    613a:	482d      	ldr	r0, [pc, #180]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    613c:	f7ff fd6a 	bl	5c14 <z_spin_unlock_valid>
    6140:	b130      	cbz	r0, 6150 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    6142:	f387 8811 	msr	BASEPRI, r7
    6146:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    614a:	f06f 000f 	mvn.w	r0, #15
    614e:	e778      	b.n	6042 <z_impl_k_mutex_lock+0x66>
    6150:	4c2f      	ldr	r4, [pc, #188]	; (6210 <z_impl_k_mutex_lock+0x234>)
    6152:	23ac      	movs	r3, #172	; 0xac
    6154:	4622      	mov	r2, r4
    6156:	492f      	ldr	r1, [pc, #188]	; (6214 <z_impl_k_mutex_lock+0x238>)
    6158:	4829      	ldr	r0, [pc, #164]	; (6200 <z_impl_k_mutex_lock+0x224>)
    615a:	f004 fc75 	bl	aa48 <printk>
    615e:	4924      	ldr	r1, [pc, #144]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    6160:	482d      	ldr	r0, [pc, #180]	; (6218 <z_impl_k_mutex_lock+0x23c>)
    6162:	f004 fc71 	bl	aa48 <printk>
    6166:	21ac      	movs	r1, #172	; 0xac
    6168:	4620      	mov	r0, r4
    616a:	f004 fdc6 	bl	acfa <assert_post_action>
    616e:	e7e8      	b.n	6142 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    6170:	4601      	mov	r1, r0
    6172:	4620      	mov	r0, r4
    6174:	f005 fafd 	bl	b772 <adjust_owner_prio>
    6178:	4681      	mov	r9, r0
    617a:	e79d      	b.n	60b8 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    617c:	4e24      	ldr	r6, [pc, #144]	; (6210 <z_impl_k_mutex_lock+0x234>)
    617e:	2381      	movs	r3, #129	; 0x81
    6180:	4632      	mov	r2, r6
    6182:	4921      	ldr	r1, [pc, #132]	; (6208 <z_impl_k_mutex_lock+0x22c>)
    6184:	481e      	ldr	r0, [pc, #120]	; (6200 <z_impl_k_mutex_lock+0x224>)
    6186:	f004 fc5f 	bl	aa48 <printk>
    618a:	4919      	ldr	r1, [pc, #100]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    618c:	481f      	ldr	r0, [pc, #124]	; (620c <z_impl_k_mutex_lock+0x230>)
    618e:	f004 fc5b 	bl	aa48 <printk>
    6192:	2181      	movs	r1, #129	; 0x81
    6194:	4630      	mov	r0, r6
    6196:	f004 fdb0 	bl	acfa <assert_post_action>
    619a:	e7a3      	b.n	60e4 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    619c:	6921      	ldr	r1, [r4, #16]
    619e:	e7af      	b.n	6100 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    61a0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    61a4:	f1b8 0f00 	cmp.w	r8, #0
    61a8:	d006      	beq.n	61b8 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    61aa:	4629      	mov	r1, r5
    61ac:	4810      	ldr	r0, [pc, #64]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    61ae:	f000 fa97 	bl	66e0 <z_reschedule>
	return -EAGAIN;
    61b2:	f06f 000a 	mvn.w	r0, #10
    61b6:	e744      	b.n	6042 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61b8:	480d      	ldr	r0, [pc, #52]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    61ba:	f7ff fd2b 	bl	5c14 <z_spin_unlock_valid>
    61be:	b130      	cbz	r0, 61ce <z_impl_k_mutex_lock+0x1f2>
    61c0:	f385 8811 	msr	BASEPRI, r5
    61c4:	f3bf 8f6f 	isb	sy
    61c8:	f06f 000a 	mvn.w	r0, #10
    61cc:	e739      	b.n	6042 <z_impl_k_mutex_lock+0x66>
    61ce:	4c10      	ldr	r4, [pc, #64]	; (6210 <z_impl_k_mutex_lock+0x234>)
    61d0:	23ac      	movs	r3, #172	; 0xac
    61d2:	4622      	mov	r2, r4
    61d4:	490f      	ldr	r1, [pc, #60]	; (6214 <z_impl_k_mutex_lock+0x238>)
    61d6:	480a      	ldr	r0, [pc, #40]	; (6200 <z_impl_k_mutex_lock+0x224>)
    61d8:	f004 fc36 	bl	aa48 <printk>
    61dc:	4904      	ldr	r1, [pc, #16]	; (61f0 <z_impl_k_mutex_lock+0x214>)
    61de:	480e      	ldr	r0, [pc, #56]	; (6218 <z_impl_k_mutex_lock+0x23c>)
    61e0:	f004 fc32 	bl	aa48 <printk>
    61e4:	21ac      	movs	r1, #172	; 0xac
    61e6:	4620      	mov	r0, r4
    61e8:	f004 fd87 	bl	acfa <assert_post_action>
    61ec:	e7e8      	b.n	61c0 <z_impl_k_mutex_lock+0x1e4>
    61ee:	bf00      	nop
    61f0:	20001034 	.word	0x20001034
    61f4:	20001004 	.word	0x20001004
    61f8:	0000ca98 	.word	0x0000ca98
    61fc:	0000cabc 	.word	0x0000cabc
    6200:	0000bc60 	.word	0x0000bc60
    6204:	0000cad0 	.word	0x0000cad0
    6208:	0000bdd0 	.word	0x0000bdd0
    620c:	0000bde8 	.word	0x0000bde8
    6210:	0000bd78 	.word	0x0000bd78
    6214:	0000bda0 	.word	0x0000bda0
    6218:	0000bdb8 	.word	0x0000bdb8

0000621c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    621c:	b570      	push	{r4, r5, r6, lr}
    621e:	4604      	mov	r4, r0
    6220:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6224:	bb03      	cbnz	r3, 6268 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6226:	68a3      	ldr	r3, [r4, #8]
    6228:	2b00      	cmp	r3, #0
    622a:	f000 80a6 	beq.w	637a <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    622e:	4a56      	ldr	r2, [pc, #344]	; (6388 <z_impl_k_mutex_unlock+0x16c>)
    6230:	6892      	ldr	r2, [r2, #8]
    6232:	4293      	cmp	r3, r2
    6234:	f040 80a4 	bne.w	6380 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6238:	68e3      	ldr	r3, [r4, #12]
    623a:	b323      	cbz	r3, 6286 <z_impl_k_mutex_unlock+0x6a>
    623c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    6240:	bb6b      	cbnz	r3, 629e <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6242:	4b51      	ldr	r3, [pc, #324]	; (6388 <z_impl_k_mutex_unlock+0x16c>)
    6244:	689b      	ldr	r3, [r3, #8]
    6246:	7bdb      	ldrb	r3, [r3, #15]
    6248:	2b01      	cmp	r3, #1
    624a:	d037      	beq.n	62bc <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    624c:	4b4e      	ldr	r3, [pc, #312]	; (6388 <z_impl_k_mutex_unlock+0x16c>)
    624e:	689a      	ldr	r2, [r3, #8]
    6250:	7bd3      	ldrb	r3, [r2, #15]
    6252:	3b01      	subs	r3, #1
    6254:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6256:	68e3      	ldr	r3, [r4, #12]
    6258:	2b01      	cmp	r3, #1
    625a:	d93e      	bls.n	62da <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    625c:	3b01      	subs	r3, #1
    625e:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    6260:	f000 fff4 	bl	724c <k_sched_unlock>

	return 0;
    6264:	2000      	movs	r0, #0
}
    6266:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6268:	4d48      	ldr	r5, [pc, #288]	; (638c <z_impl_k_mutex_unlock+0x170>)
    626a:	23c7      	movs	r3, #199	; 0xc7
    626c:	462a      	mov	r2, r5
    626e:	4948      	ldr	r1, [pc, #288]	; (6390 <z_impl_k_mutex_unlock+0x174>)
    6270:	4848      	ldr	r0, [pc, #288]	; (6394 <z_impl_k_mutex_unlock+0x178>)
    6272:	f004 fbe9 	bl	aa48 <printk>
    6276:	4848      	ldr	r0, [pc, #288]	; (6398 <z_impl_k_mutex_unlock+0x17c>)
    6278:	f004 fbe6 	bl	aa48 <printk>
    627c:	21c7      	movs	r1, #199	; 0xc7
    627e:	4628      	mov	r0, r5
    6280:	f004 fd3b 	bl	acfa <assert_post_action>
    6284:	e7cf      	b.n	6226 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6286:	4d41      	ldr	r5, [pc, #260]	; (638c <z_impl_k_mutex_unlock+0x170>)
    6288:	23df      	movs	r3, #223	; 0xdf
    628a:	462a      	mov	r2, r5
    628c:	4943      	ldr	r1, [pc, #268]	; (639c <z_impl_k_mutex_unlock+0x180>)
    628e:	4841      	ldr	r0, [pc, #260]	; (6394 <z_impl_k_mutex_unlock+0x178>)
    6290:	f004 fbda 	bl	aa48 <printk>
    6294:	21df      	movs	r1, #223	; 0xdf
    6296:	4628      	mov	r0, r5
    6298:	f004 fd2f 	bl	acfa <assert_post_action>
    629c:	e7ce      	b.n	623c <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    629e:	4d40      	ldr	r5, [pc, #256]	; (63a0 <z_impl_k_mutex_unlock+0x184>)
    62a0:	23fd      	movs	r3, #253	; 0xfd
    62a2:	462a      	mov	r2, r5
    62a4:	493a      	ldr	r1, [pc, #232]	; (6390 <z_impl_k_mutex_unlock+0x174>)
    62a6:	483b      	ldr	r0, [pc, #236]	; (6394 <z_impl_k_mutex_unlock+0x178>)
    62a8:	f004 fbce 	bl	aa48 <printk>
    62ac:	483d      	ldr	r0, [pc, #244]	; (63a4 <z_impl_k_mutex_unlock+0x188>)
    62ae:	f004 fbcb 	bl	aa48 <printk>
    62b2:	21fd      	movs	r1, #253	; 0xfd
    62b4:	4628      	mov	r0, r5
    62b6:	f004 fd20 	bl	acfa <assert_post_action>
    62ba:	e7c2      	b.n	6242 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    62bc:	4d38      	ldr	r5, [pc, #224]	; (63a0 <z_impl_k_mutex_unlock+0x184>)
    62be:	23fe      	movs	r3, #254	; 0xfe
    62c0:	462a      	mov	r2, r5
    62c2:	4939      	ldr	r1, [pc, #228]	; (63a8 <z_impl_k_mutex_unlock+0x18c>)
    62c4:	4833      	ldr	r0, [pc, #204]	; (6394 <z_impl_k_mutex_unlock+0x178>)
    62c6:	f004 fbbf 	bl	aa48 <printk>
    62ca:	4836      	ldr	r0, [pc, #216]	; (63a4 <z_impl_k_mutex_unlock+0x188>)
    62cc:	f004 fbbc 	bl	aa48 <printk>
    62d0:	21fe      	movs	r1, #254	; 0xfe
    62d2:	4628      	mov	r0, r5
    62d4:	f004 fd11 	bl	acfa <assert_post_action>
    62d8:	e7b8      	b.n	624c <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    62da:	f04f 0320 	mov.w	r3, #32
    62de:	f3ef 8511 	mrs	r5, BASEPRI
    62e2:	f383 8812 	msr	BASEPRI_MAX, r3
    62e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62ea:	4830      	ldr	r0, [pc, #192]	; (63ac <z_impl_k_mutex_unlock+0x190>)
    62ec:	f7ff fc82 	bl	5bf4 <z_spin_lock_valid>
    62f0:	b1c0      	cbz	r0, 6324 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    62f2:	482e      	ldr	r0, [pc, #184]	; (63ac <z_impl_k_mutex_unlock+0x190>)
    62f4:	f7ff fc9e 	bl	5c34 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    62f8:	6921      	ldr	r1, [r4, #16]
    62fa:	4620      	mov	r0, r4
    62fc:	f005 fa39 	bl	b772 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6300:	4620      	mov	r0, r4
    6302:	f001 f885 	bl	7410 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6306:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6308:	b1e0      	cbz	r0, 6344 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    630a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    630e:	6123      	str	r3, [r4, #16]
    6310:	2300      	movs	r3, #0
    6312:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    6316:	f000 fc65 	bl	6be4 <z_ready_thread>
		z_reschedule(&lock, key);
    631a:	4629      	mov	r1, r5
    631c:	4823      	ldr	r0, [pc, #140]	; (63ac <z_impl_k_mutex_unlock+0x190>)
    631e:	f000 f9df 	bl	66e0 <z_reschedule>
    6322:	e79d      	b.n	6260 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6324:	4e22      	ldr	r6, [pc, #136]	; (63b0 <z_impl_k_mutex_unlock+0x194>)
    6326:	2381      	movs	r3, #129	; 0x81
    6328:	4632      	mov	r2, r6
    632a:	4922      	ldr	r1, [pc, #136]	; (63b4 <z_impl_k_mutex_unlock+0x198>)
    632c:	4819      	ldr	r0, [pc, #100]	; (6394 <z_impl_k_mutex_unlock+0x178>)
    632e:	f004 fb8b 	bl	aa48 <printk>
    6332:	491e      	ldr	r1, [pc, #120]	; (63ac <z_impl_k_mutex_unlock+0x190>)
    6334:	4820      	ldr	r0, [pc, #128]	; (63b8 <z_impl_k_mutex_unlock+0x19c>)
    6336:	f004 fb87 	bl	aa48 <printk>
    633a:	2181      	movs	r1, #129	; 0x81
    633c:	4630      	mov	r0, r6
    633e:	f004 fcdc 	bl	acfa <assert_post_action>
    6342:	e7d6      	b.n	62f2 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    6344:	2300      	movs	r3, #0
    6346:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6348:	4818      	ldr	r0, [pc, #96]	; (63ac <z_impl_k_mutex_unlock+0x190>)
    634a:	f7ff fc63 	bl	5c14 <z_spin_unlock_valid>
    634e:	b120      	cbz	r0, 635a <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    6350:	f385 8811 	msr	BASEPRI, r5
    6354:	f3bf 8f6f 	isb	sy
    6358:	e782      	b.n	6260 <z_impl_k_mutex_unlock+0x44>
    635a:	4c15      	ldr	r4, [pc, #84]	; (63b0 <z_impl_k_mutex_unlock+0x194>)
    635c:	23ac      	movs	r3, #172	; 0xac
    635e:	4622      	mov	r2, r4
    6360:	4916      	ldr	r1, [pc, #88]	; (63bc <z_impl_k_mutex_unlock+0x1a0>)
    6362:	480c      	ldr	r0, [pc, #48]	; (6394 <z_impl_k_mutex_unlock+0x178>)
    6364:	f004 fb70 	bl	aa48 <printk>
    6368:	4910      	ldr	r1, [pc, #64]	; (63ac <z_impl_k_mutex_unlock+0x190>)
    636a:	4815      	ldr	r0, [pc, #84]	; (63c0 <z_impl_k_mutex_unlock+0x1a4>)
    636c:	f004 fb6c 	bl	aa48 <printk>
    6370:	21ac      	movs	r1, #172	; 0xac
    6372:	4620      	mov	r0, r4
    6374:	f004 fcc1 	bl	acfa <assert_post_action>
    6378:	e7ea      	b.n	6350 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    637a:	f06f 0015 	mvn.w	r0, #21
    637e:	e772      	b.n	6266 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    6380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6384:	e76f      	b.n	6266 <z_impl_k_mutex_unlock+0x4a>
    6386:	bf00      	nop
    6388:	20001004 	.word	0x20001004
    638c:	0000ca98 	.word	0x0000ca98
    6390:	0000cabc 	.word	0x0000cabc
    6394:	0000bc60 	.word	0x0000bc60
    6398:	0000cad0 	.word	0x0000cad0
    639c:	0000caf8 	.word	0x0000caf8
    63a0:	0000cb10 	.word	0x0000cb10
    63a4:	0000cb3c 	.word	0x0000cb3c
    63a8:	0000cb40 	.word	0x0000cb40
    63ac:	20001034 	.word	0x20001034
    63b0:	0000bd78 	.word	0x0000bd78
    63b4:	0000bdd0 	.word	0x0000bdd0
    63b8:	0000bde8 	.word	0x0000bde8
    63bc:	0000bda0 	.word	0x0000bda0
    63c0:	0000bdb8 	.word	0x0000bdb8

000063c4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    63c4:	b570      	push	{r4, r5, r6, lr}
    63c6:	4604      	mov	r4, r0
	__asm__ volatile(
    63c8:	f04f 0320 	mov.w	r3, #32
    63cc:	f3ef 8511 	mrs	r5, BASEPRI
    63d0:	f383 8812 	msr	BASEPRI_MAX, r3
    63d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63d8:	4817      	ldr	r0, [pc, #92]	; (6438 <z_impl_k_sem_give+0x74>)
    63da:	f7ff fc0b 	bl	5bf4 <z_spin_lock_valid>
    63de:	b180      	cbz	r0, 6402 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    63e0:	4815      	ldr	r0, [pc, #84]	; (6438 <z_impl_k_sem_give+0x74>)
    63e2:	f7ff fc27 	bl	5c34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    63e6:	4620      	mov	r0, r4
    63e8:	f001 f812 	bl	7410 <z_unpend_first_thread>

	if (thread != NULL) {
    63ec:	b1c8      	cbz	r0, 6422 <z_impl_k_sem_give+0x5e>
    63ee:	2200      	movs	r2, #0
    63f0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    63f4:	f000 fbf6 	bl	6be4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    63f8:	4629      	mov	r1, r5
    63fa:	480f      	ldr	r0, [pc, #60]	; (6438 <z_impl_k_sem_give+0x74>)
    63fc:	f000 f970 	bl	66e0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6400:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6402:	4e0e      	ldr	r6, [pc, #56]	; (643c <z_impl_k_sem_give+0x78>)
    6404:	2381      	movs	r3, #129	; 0x81
    6406:	4632      	mov	r2, r6
    6408:	490d      	ldr	r1, [pc, #52]	; (6440 <z_impl_k_sem_give+0x7c>)
    640a:	480e      	ldr	r0, [pc, #56]	; (6444 <z_impl_k_sem_give+0x80>)
    640c:	f004 fb1c 	bl	aa48 <printk>
    6410:	4909      	ldr	r1, [pc, #36]	; (6438 <z_impl_k_sem_give+0x74>)
    6412:	480d      	ldr	r0, [pc, #52]	; (6448 <z_impl_k_sem_give+0x84>)
    6414:	f004 fb18 	bl	aa48 <printk>
    6418:	2181      	movs	r1, #129	; 0x81
    641a:	4630      	mov	r0, r6
    641c:	f004 fc6d 	bl	acfa <assert_post_action>
    6420:	e7de      	b.n	63e0 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6422:	68a3      	ldr	r3, [r4, #8]
    6424:	68e2      	ldr	r2, [r4, #12]
    6426:	4293      	cmp	r3, r2
    6428:	d003      	beq.n	6432 <z_impl_k_sem_give+0x6e>
    642a:	2201      	movs	r2, #1
    642c:	4413      	add	r3, r2
    642e:	60a3      	str	r3, [r4, #8]
}
    6430:	e7e2      	b.n	63f8 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6432:	2200      	movs	r2, #0
    6434:	e7fa      	b.n	642c <z_impl_k_sem_give+0x68>
    6436:	bf00      	nop
    6438:	20001038 	.word	0x20001038
    643c:	0000bd78 	.word	0x0000bd78
    6440:	0000bdd0 	.word	0x0000bdd0
    6444:	0000bc60 	.word	0x0000bc60
    6448:	0000bde8 	.word	0x0000bde8

0000644c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6450:	b082      	sub	sp, #8
    6452:	4604      	mov	r4, r0
    6454:	4616      	mov	r6, r2
    6456:	461f      	mov	r7, r3
    6458:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    645c:	b113      	cbz	r3, 6464 <z_impl_k_sem_take+0x18>
    645e:	ea56 0307 	orrs.w	r3, r6, r7
    6462:	d11f      	bne.n	64a4 <z_impl_k_sem_take+0x58>
    6464:	f04f 0320 	mov.w	r3, #32
    6468:	f3ef 8511 	mrs	r5, BASEPRI
    646c:	f383 8812 	msr	BASEPRI_MAX, r3
    6470:	f3bf 8f6f 	isb	sy
    6474:	4836      	ldr	r0, [pc, #216]	; (6550 <z_impl_k_sem_take+0x104>)
    6476:	f7ff fbbd 	bl	5bf4 <z_spin_lock_valid>
    647a:	b310      	cbz	r0, 64c2 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    647c:	4834      	ldr	r0, [pc, #208]	; (6550 <z_impl_k_sem_take+0x104>)
    647e:	f7ff fbd9 	bl	5c34 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6482:	68a3      	ldr	r3, [r4, #8]
    6484:	2b00      	cmp	r3, #0
    6486:	d03d      	beq.n	6504 <z_impl_k_sem_take+0xb8>
		sem->count--;
    6488:	3b01      	subs	r3, #1
    648a:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    648c:	4830      	ldr	r0, [pc, #192]	; (6550 <z_impl_k_sem_take+0x104>)
    648e:	f7ff fbc1 	bl	5c14 <z_spin_unlock_valid>
    6492:	b338      	cbz	r0, 64e4 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    6494:	f385 8811 	msr	BASEPRI, r5
    6498:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    649c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    649e:	b002      	add	sp, #8
    64a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    64a4:	4d2b      	ldr	r5, [pc, #172]	; (6554 <z_impl_k_sem_take+0x108>)
    64a6:	2379      	movs	r3, #121	; 0x79
    64a8:	462a      	mov	r2, r5
    64aa:	492b      	ldr	r1, [pc, #172]	; (6558 <z_impl_k_sem_take+0x10c>)
    64ac:	482b      	ldr	r0, [pc, #172]	; (655c <z_impl_k_sem_take+0x110>)
    64ae:	f004 facb 	bl	aa48 <printk>
    64b2:	482b      	ldr	r0, [pc, #172]	; (6560 <z_impl_k_sem_take+0x114>)
    64b4:	f004 fac8 	bl	aa48 <printk>
    64b8:	2179      	movs	r1, #121	; 0x79
    64ba:	4628      	mov	r0, r5
    64bc:	f004 fc1d 	bl	acfa <assert_post_action>
    64c0:	e7d0      	b.n	6464 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64c2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 656c <z_impl_k_sem_take+0x120>
    64c6:	2381      	movs	r3, #129	; 0x81
    64c8:	4642      	mov	r2, r8
    64ca:	4926      	ldr	r1, [pc, #152]	; (6564 <z_impl_k_sem_take+0x118>)
    64cc:	4823      	ldr	r0, [pc, #140]	; (655c <z_impl_k_sem_take+0x110>)
    64ce:	f004 fabb 	bl	aa48 <printk>
    64d2:	491f      	ldr	r1, [pc, #124]	; (6550 <z_impl_k_sem_take+0x104>)
    64d4:	4824      	ldr	r0, [pc, #144]	; (6568 <z_impl_k_sem_take+0x11c>)
    64d6:	f004 fab7 	bl	aa48 <printk>
    64da:	2181      	movs	r1, #129	; 0x81
    64dc:	4640      	mov	r0, r8
    64de:	f004 fc0c 	bl	acfa <assert_post_action>
    64e2:	e7cb      	b.n	647c <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64e4:	4c21      	ldr	r4, [pc, #132]	; (656c <z_impl_k_sem_take+0x120>)
    64e6:	23ac      	movs	r3, #172	; 0xac
    64e8:	4622      	mov	r2, r4
    64ea:	4921      	ldr	r1, [pc, #132]	; (6570 <z_impl_k_sem_take+0x124>)
    64ec:	481b      	ldr	r0, [pc, #108]	; (655c <z_impl_k_sem_take+0x110>)
    64ee:	f004 faab 	bl	aa48 <printk>
    64f2:	4917      	ldr	r1, [pc, #92]	; (6550 <z_impl_k_sem_take+0x104>)
    64f4:	481f      	ldr	r0, [pc, #124]	; (6574 <z_impl_k_sem_take+0x128>)
    64f6:	f004 faa7 	bl	aa48 <printk>
    64fa:	21ac      	movs	r1, #172	; 0xac
    64fc:	4620      	mov	r0, r4
    64fe:	f004 fbfc 	bl	acfa <assert_post_action>
    6502:	e7c7      	b.n	6494 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6504:	ea56 0307 	orrs.w	r3, r6, r7
    6508:	d007      	beq.n	651a <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    650a:	e9cd 6700 	strd	r6, r7, [sp]
    650e:	4622      	mov	r2, r4
    6510:	4629      	mov	r1, r5
    6512:	480f      	ldr	r0, [pc, #60]	; (6550 <z_impl_k_sem_take+0x104>)
    6514:	f000 fd3e 	bl	6f94 <z_pend_curr>
	return ret;
    6518:	e7c1      	b.n	649e <z_impl_k_sem_take+0x52>
    651a:	480d      	ldr	r0, [pc, #52]	; (6550 <z_impl_k_sem_take+0x104>)
    651c:	f7ff fb7a 	bl	5c14 <z_spin_unlock_valid>
    6520:	b130      	cbz	r0, 6530 <z_impl_k_sem_take+0xe4>
    6522:	f385 8811 	msr	BASEPRI, r5
    6526:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    652a:	f06f 000f 	mvn.w	r0, #15
    652e:	e7b6      	b.n	649e <z_impl_k_sem_take+0x52>
    6530:	4c0e      	ldr	r4, [pc, #56]	; (656c <z_impl_k_sem_take+0x120>)
    6532:	23ac      	movs	r3, #172	; 0xac
    6534:	4622      	mov	r2, r4
    6536:	490e      	ldr	r1, [pc, #56]	; (6570 <z_impl_k_sem_take+0x124>)
    6538:	4808      	ldr	r0, [pc, #32]	; (655c <z_impl_k_sem_take+0x110>)
    653a:	f004 fa85 	bl	aa48 <printk>
    653e:	4904      	ldr	r1, [pc, #16]	; (6550 <z_impl_k_sem_take+0x104>)
    6540:	480c      	ldr	r0, [pc, #48]	; (6574 <z_impl_k_sem_take+0x128>)
    6542:	f004 fa81 	bl	aa48 <printk>
    6546:	21ac      	movs	r1, #172	; 0xac
    6548:	4620      	mov	r0, r4
    654a:	f004 fbd6 	bl	acfa <assert_post_action>
    654e:	e7e8      	b.n	6522 <z_impl_k_sem_take+0xd6>
    6550:	20001038 	.word	0x20001038
    6554:	0000cb74 	.word	0x0000cb74
    6558:	0000cb94 	.word	0x0000cb94
    655c:	0000bc60 	.word	0x0000bc60
    6560:	0000cb3c 	.word	0x0000cb3c
    6564:	0000bdd0 	.word	0x0000bdd0
    6568:	0000bde8 	.word	0x0000bde8
    656c:	0000bd78 	.word	0x0000bd78
    6570:	0000bda0 	.word	0x0000bda0
    6574:	0000bdb8 	.word	0x0000bdb8

00006578 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    6578:	b538      	push	{r3, r4, r5, lr}
    657a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    657c:	6883      	ldr	r3, [r0, #8]
    657e:	b10b      	cbz	r3, 6584 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    6580:	68a0      	ldr	r0, [r4, #8]
    6582:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    6584:	4d06      	ldr	r5, [pc, #24]	; (65a0 <pended_on_thread+0x28>)
    6586:	f240 2383 	movw	r3, #643	; 0x283
    658a:	462a      	mov	r2, r5
    658c:	4905      	ldr	r1, [pc, #20]	; (65a4 <pended_on_thread+0x2c>)
    658e:	4806      	ldr	r0, [pc, #24]	; (65a8 <pended_on_thread+0x30>)
    6590:	f004 fa5a 	bl	aa48 <printk>
    6594:	f240 2183 	movw	r1, #643	; 0x283
    6598:	4628      	mov	r0, r5
    659a:	f004 fbae 	bl	acfa <assert_post_action>
    659e:	e7ef      	b.n	6580 <pended_on_thread+0x8>
    65a0:	0000cbe4 	.word	0x0000cbe4
    65a4:	0000cc08 	.word	0x0000cc08
    65a8:	0000bc60 	.word	0x0000bc60

000065ac <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    65ac:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    65ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    65b2:	bf08      	it	eq
    65b4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    65b8:	d100      	bne.n	65bc <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    65ba:	bd38      	pop	{r3, r4, r5, pc}
    65bc:	4902      	ldr	r1, [pc, #8]	; (65c8 <add_thread_timeout+0x1c>)
    65be:	3018      	adds	r0, #24
    65c0:	f001 fa5c 	bl	7a7c <z_add_timeout>
    65c4:	e7f9      	b.n	65ba <add_thread_timeout+0xe>
    65c6:	bf00      	nop
    65c8:	00006d41 	.word	0x00006d41

000065cc <z_reset_time_slice>:
{
    65cc:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    65ce:	4b08      	ldr	r3, [pc, #32]	; (65f0 <z_reset_time_slice+0x24>)
    65d0:	681b      	ldr	r3, [r3, #0]
    65d2:	b903      	cbnz	r3, 65d6 <z_reset_time_slice+0xa>
}
    65d4:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    65d6:	f7fd fccb 	bl	3f70 <sys_clock_elapsed>
    65da:	4603      	mov	r3, r0
    65dc:	4a04      	ldr	r2, [pc, #16]	; (65f0 <z_reset_time_slice+0x24>)
    65de:	6810      	ldr	r0, [r2, #0]
    65e0:	4403      	add	r3, r0
    65e2:	4a04      	ldr	r2, [pc, #16]	; (65f4 <z_reset_time_slice+0x28>)
    65e4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    65e6:	2100      	movs	r1, #0
    65e8:	f001 fbf0 	bl	7dcc <z_set_timeout_expiry>
}
    65ec:	e7f2      	b.n	65d4 <z_reset_time_slice+0x8>
    65ee:	bf00      	nop
    65f0:	20001048 	.word	0x20001048
    65f4:	20001004 	.word	0x20001004

000065f8 <k_sched_time_slice_set>:
{
    65f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65fc:	4606      	mov	r6, r0
    65fe:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    6600:	2400      	movs	r4, #0
	__asm__ volatile(
    6602:	f04f 0320 	mov.w	r3, #32
    6606:	f3ef 8711 	mrs	r7, BASEPRI
    660a:	f383 8812 	msr	BASEPRI_MAX, r3
    660e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6612:	4829      	ldr	r0, [pc, #164]	; (66b8 <k_sched_time_slice_set+0xc0>)
    6614:	f7ff faee 	bl	5bf4 <z_spin_lock_valid>
    6618:	b118      	cbz	r0, 6622 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    661a:	4827      	ldr	r0, [pc, #156]	; (66b8 <k_sched_time_slice_set+0xc0>)
    661c:	f7ff fb0a 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    6620:	e01d      	b.n	665e <k_sched_time_slice_set+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6622:	4d26      	ldr	r5, [pc, #152]	; (66bc <k_sched_time_slice_set+0xc4>)
    6624:	2381      	movs	r3, #129	; 0x81
    6626:	462a      	mov	r2, r5
    6628:	4925      	ldr	r1, [pc, #148]	; (66c0 <k_sched_time_slice_set+0xc8>)
    662a:	4826      	ldr	r0, [pc, #152]	; (66c4 <k_sched_time_slice_set+0xcc>)
    662c:	f004 fa0c 	bl	aa48 <printk>
    6630:	4921      	ldr	r1, [pc, #132]	; (66b8 <k_sched_time_slice_set+0xc0>)
    6632:	4825      	ldr	r0, [pc, #148]	; (66c8 <k_sched_time_slice_set+0xd0>)
    6634:	f004 fa08 	bl	aa48 <printk>
    6638:	2181      	movs	r1, #129	; 0x81
    663a:	4628      	mov	r0, r5
    663c:	f004 fb5d 	bl	acfa <assert_post_action>
    6640:	e7eb      	b.n	661a <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
    6642:	4b22      	ldr	r3, [pc, #136]	; (66cc <k_sched_time_slice_set+0xd4>)
    6644:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    6648:	f7ff ffc0 	bl	65cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    664c:	481a      	ldr	r0, [pc, #104]	; (66b8 <k_sched_time_slice_set+0xc0>)
    664e:	f7ff fae1 	bl	5c14 <z_spin_unlock_valid>
    6652:	b1f8      	cbz	r0, 6694 <k_sched_time_slice_set+0x9c>
	__asm__ volatile(
    6654:	f387 8811 	msr	BASEPRI, r7
    6658:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    665c:	2401      	movs	r4, #1
    665e:	bb4c      	cbnz	r4, 66b4 <k_sched_time_slice_set+0xbc>
		_current_cpu->slice_ticks = 0;
    6660:	2300      	movs	r3, #0
    6662:	4a1b      	ldr	r2, [pc, #108]	; (66d0 <k_sched_time_slice_set+0xd8>)
    6664:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    6666:	0c75      	lsrs	r5, r6, #17
    6668:	03f4      	lsls	r4, r6, #15
    666a:	f240 30e7 	movw	r0, #999	; 0x3e7
    666e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6672:	2300      	movs	r3, #0
    6674:	1820      	adds	r0, r4, r0
    6676:	f04f 0100 	mov.w	r1, #0
    667a:	eb45 0101 	adc.w	r1, r5, r1
    667e:	f7f9 fd3f 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    6682:	4b14      	ldr	r3, [pc, #80]	; (66d4 <k_sched_time_slice_set+0xdc>)
    6684:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6686:	2e00      	cmp	r6, #0
    6688:	dddb      	ble.n	6642 <k_sched_time_slice_set+0x4a>
			slice_time = MAX(2, slice_time);
    668a:	2802      	cmp	r0, #2
    668c:	bfb8      	it	lt
    668e:	2002      	movlt	r0, #2
    6690:	6018      	str	r0, [r3, #0]
    6692:	e7d6      	b.n	6642 <k_sched_time_slice_set+0x4a>
    6694:	4c09      	ldr	r4, [pc, #36]	; (66bc <k_sched_time_slice_set+0xc4>)
    6696:	23ac      	movs	r3, #172	; 0xac
    6698:	4622      	mov	r2, r4
    669a:	490f      	ldr	r1, [pc, #60]	; (66d8 <k_sched_time_slice_set+0xe0>)
    669c:	4809      	ldr	r0, [pc, #36]	; (66c4 <k_sched_time_slice_set+0xcc>)
    669e:	f004 f9d3 	bl	aa48 <printk>
    66a2:	4905      	ldr	r1, [pc, #20]	; (66b8 <k_sched_time_slice_set+0xc0>)
    66a4:	480d      	ldr	r0, [pc, #52]	; (66dc <k_sched_time_slice_set+0xe4>)
    66a6:	f004 f9cf 	bl	aa48 <printk>
    66aa:	21ac      	movs	r1, #172	; 0xac
    66ac:	4620      	mov	r0, r4
    66ae:	f004 fb24 	bl	acfa <assert_post_action>
    66b2:	e7cf      	b.n	6654 <k_sched_time_slice_set+0x5c>
}
    66b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66b8:	20001040 	.word	0x20001040
    66bc:	0000bd78 	.word	0x0000bd78
    66c0:	0000bdd0 	.word	0x0000bdd0
    66c4:	0000bc60 	.word	0x0000bc60
    66c8:	0000bde8 	.word	0x0000bde8
    66cc:	20001044 	.word	0x20001044
    66d0:	20001004 	.word	0x20001004
    66d4:	20001048 	.word	0x20001048
    66d8:	0000bda0 	.word	0x0000bda0
    66dc:	0000bdb8 	.word	0x0000bdb8

000066e0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    66e0:	b570      	push	{r4, r5, r6, lr}
    66e2:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    66e4:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    66e6:	b921      	cbnz	r1, 66f2 <z_reschedule+0x12>
    66e8:	f3ef 8305 	mrs	r3, IPSR
    66ec:	b913      	cbnz	r3, 66f4 <z_reschedule+0x14>
    66ee:	2101      	movs	r1, #1
    66f0:	e000      	b.n	66f4 <z_reschedule+0x14>
    66f2:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    66f4:	f011 0f01 	tst.w	r1, #1
    66f8:	d01c      	beq.n	6734 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    66fa:	4b1b      	ldr	r3, [pc, #108]	; (6768 <z_reschedule+0x88>)
    66fc:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    66fe:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    6700:	429a      	cmp	r2, r3
    6702:	d017      	beq.n	6734 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6704:	4620      	mov	r0, r4
    6706:	f7ff fa85 	bl	5c14 <z_spin_unlock_valid>
    670a:	b118      	cbz	r0, 6714 <z_reschedule+0x34>
	ret = arch_swap(key);
    670c:	4628      	mov	r0, r5
    670e:	f7fb faaf 	bl	1c70 <arch_swap>
		z_swap(lock, key);
    6712:	e017      	b.n	6744 <z_reschedule+0x64>
    6714:	4e15      	ldr	r6, [pc, #84]	; (676c <z_reschedule+0x8c>)
    6716:	23c3      	movs	r3, #195	; 0xc3
    6718:	4632      	mov	r2, r6
    671a:	4915      	ldr	r1, [pc, #84]	; (6770 <z_reschedule+0x90>)
    671c:	4815      	ldr	r0, [pc, #84]	; (6774 <z_reschedule+0x94>)
    671e:	f004 f993 	bl	aa48 <printk>
    6722:	4621      	mov	r1, r4
    6724:	4814      	ldr	r0, [pc, #80]	; (6778 <z_reschedule+0x98>)
    6726:	f004 f98f 	bl	aa48 <printk>
    672a:	21c3      	movs	r1, #195	; 0xc3
    672c:	4630      	mov	r0, r6
    672e:	f004 fae4 	bl	acfa <assert_post_action>
    6732:	e7eb      	b.n	670c <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6734:	4620      	mov	r0, r4
    6736:	f7ff fa6d 	bl	5c14 <z_spin_unlock_valid>
    673a:	b120      	cbz	r0, 6746 <z_reschedule+0x66>
    673c:	f385 8811 	msr	BASEPRI, r5
    6740:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    6744:	bd70      	pop	{r4, r5, r6, pc}
    6746:	4e09      	ldr	r6, [pc, #36]	; (676c <z_reschedule+0x8c>)
    6748:	23ac      	movs	r3, #172	; 0xac
    674a:	4632      	mov	r2, r6
    674c:	4908      	ldr	r1, [pc, #32]	; (6770 <z_reschedule+0x90>)
    674e:	4809      	ldr	r0, [pc, #36]	; (6774 <z_reschedule+0x94>)
    6750:	f004 f97a 	bl	aa48 <printk>
    6754:	4621      	mov	r1, r4
    6756:	4808      	ldr	r0, [pc, #32]	; (6778 <z_reschedule+0x98>)
    6758:	f004 f976 	bl	aa48 <printk>
    675c:	21ac      	movs	r1, #172	; 0xac
    675e:	4630      	mov	r0, r6
    6760:	f004 facb 	bl	acfa <assert_post_action>
    6764:	e7ea      	b.n	673c <z_reschedule+0x5c>
    6766:	bf00      	nop
    6768:	20001004 	.word	0x20001004
    676c:	0000bd78 	.word	0x0000bd78
    6770:	0000bda0 	.word	0x0000bda0
    6774:	0000bc60 	.word	0x0000bc60
    6778:	0000bdb8 	.word	0x0000bdb8

0000677c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    677c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    677e:	2400      	movs	r4, #0
	__asm__ volatile(
    6780:	f04f 0320 	mov.w	r3, #32
    6784:	f3ef 8511 	mrs	r5, BASEPRI
    6788:	f383 8812 	msr	BASEPRI_MAX, r3
    678c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6790:	482f      	ldr	r0, [pc, #188]	; (6850 <k_sched_lock+0xd4>)
    6792:	f7ff fa2f 	bl	5bf4 <z_spin_lock_valid>
    6796:	b118      	cbz	r0, 67a0 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    6798:	482d      	ldr	r0, [pc, #180]	; (6850 <k_sched_lock+0xd4>)
    679a:	f7ff fa4b 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    679e:	e041      	b.n	6824 <k_sched_lock+0xa8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67a0:	4e2c      	ldr	r6, [pc, #176]	; (6854 <k_sched_lock+0xd8>)
    67a2:	2381      	movs	r3, #129	; 0x81
    67a4:	4632      	mov	r2, r6
    67a6:	492c      	ldr	r1, [pc, #176]	; (6858 <k_sched_lock+0xdc>)
    67a8:	482c      	ldr	r0, [pc, #176]	; (685c <k_sched_lock+0xe0>)
    67aa:	f004 f94d 	bl	aa48 <printk>
    67ae:	4928      	ldr	r1, [pc, #160]	; (6850 <k_sched_lock+0xd4>)
    67b0:	482b      	ldr	r0, [pc, #172]	; (6860 <k_sched_lock+0xe4>)
    67b2:	f004 f949 	bl	aa48 <printk>
    67b6:	2181      	movs	r1, #129	; 0x81
    67b8:	4630      	mov	r0, r6
    67ba:	f004 fa9e 	bl	acfa <assert_post_action>
    67be:	e7eb      	b.n	6798 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
    67c0:	4c28      	ldr	r4, [pc, #160]	; (6864 <k_sched_lock+0xe8>)
    67c2:	23fd      	movs	r3, #253	; 0xfd
    67c4:	4622      	mov	r2, r4
    67c6:	4928      	ldr	r1, [pc, #160]	; (6868 <k_sched_lock+0xec>)
    67c8:	4824      	ldr	r0, [pc, #144]	; (685c <k_sched_lock+0xe0>)
    67ca:	f004 f93d 	bl	aa48 <printk>
    67ce:	4827      	ldr	r0, [pc, #156]	; (686c <k_sched_lock+0xf0>)
    67d0:	f004 f93a 	bl	aa48 <printk>
    67d4:	21fd      	movs	r1, #253	; 0xfd
    67d6:	4620      	mov	r0, r4
    67d8:	f004 fa8f 	bl	acfa <assert_post_action>
    67dc:	e027      	b.n	682e <k_sched_lock+0xb2>
	__ASSERT(_current->base.sched_locked != 1U, "");
    67de:	4c21      	ldr	r4, [pc, #132]	; (6864 <k_sched_lock+0xe8>)
    67e0:	23fe      	movs	r3, #254	; 0xfe
    67e2:	4622      	mov	r2, r4
    67e4:	4922      	ldr	r1, [pc, #136]	; (6870 <k_sched_lock+0xf4>)
    67e6:	481d      	ldr	r0, [pc, #116]	; (685c <k_sched_lock+0xe0>)
    67e8:	f004 f92e 	bl	aa48 <printk>
    67ec:	481f      	ldr	r0, [pc, #124]	; (686c <k_sched_lock+0xf0>)
    67ee:	f004 f92b 	bl	aa48 <printk>
    67f2:	21fe      	movs	r1, #254	; 0xfe
    67f4:	4620      	mov	r0, r4
    67f6:	f004 fa80 	bl	acfa <assert_post_action>
    67fa:	e01d      	b.n	6838 <k_sched_lock+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67fc:	4c15      	ldr	r4, [pc, #84]	; (6854 <k_sched_lock+0xd8>)
    67fe:	23ac      	movs	r3, #172	; 0xac
    6800:	4622      	mov	r2, r4
    6802:	491c      	ldr	r1, [pc, #112]	; (6874 <k_sched_lock+0xf8>)
    6804:	4815      	ldr	r0, [pc, #84]	; (685c <k_sched_lock+0xe0>)
    6806:	f004 f91f 	bl	aa48 <printk>
    680a:	4911      	ldr	r1, [pc, #68]	; (6850 <k_sched_lock+0xd4>)
    680c:	481a      	ldr	r0, [pc, #104]	; (6878 <k_sched_lock+0xfc>)
    680e:	f004 f91b 	bl	aa48 <printk>
    6812:	21ac      	movs	r1, #172	; 0xac
    6814:	4620      	mov	r0, r4
    6816:	f004 fa70 	bl	acfa <assert_post_action>
	__asm__ volatile(
    681a:	f385 8811 	msr	BASEPRI, r5
    681e:	f3bf 8f6f 	isb	sy
    6822:	2401      	movs	r4, #1
    6824:	b99c      	cbnz	r4, 684e <k_sched_lock+0xd2>
    6826:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    682a:	2b00      	cmp	r3, #0
    682c:	d1c8      	bne.n	67c0 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    682e:	4b13      	ldr	r3, [pc, #76]	; (687c <k_sched_lock+0x100>)
    6830:	689b      	ldr	r3, [r3, #8]
    6832:	7bdb      	ldrb	r3, [r3, #15]
    6834:	2b01      	cmp	r3, #1
    6836:	d0d2      	beq.n	67de <k_sched_lock+0x62>
	--_current->base.sched_locked;
    6838:	4b10      	ldr	r3, [pc, #64]	; (687c <k_sched_lock+0x100>)
    683a:	689a      	ldr	r2, [r3, #8]
    683c:	7bd3      	ldrb	r3, [r2, #15]
    683e:	3b01      	subs	r3, #1
    6840:	73d3      	strb	r3, [r2, #15]
    6842:	4803      	ldr	r0, [pc, #12]	; (6850 <k_sched_lock+0xd4>)
    6844:	f7ff f9e6 	bl	5c14 <z_spin_unlock_valid>
    6848:	2800      	cmp	r0, #0
    684a:	d1e6      	bne.n	681a <k_sched_lock+0x9e>
    684c:	e7d6      	b.n	67fc <k_sched_lock+0x80>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    684e:	bd70      	pop	{r4, r5, r6, pc}
    6850:	20001040 	.word	0x20001040
    6854:	0000bd78 	.word	0x0000bd78
    6858:	0000bdd0 	.word	0x0000bdd0
    685c:	0000bc60 	.word	0x0000bc60
    6860:	0000bde8 	.word	0x0000bde8
    6864:	0000cb10 	.word	0x0000cb10
    6868:	0000cabc 	.word	0x0000cabc
    686c:	0000cb3c 	.word	0x0000cb3c
    6870:	0000cb40 	.word	0x0000cb40
    6874:	0000bda0 	.word	0x0000bda0
    6878:	0000bdb8 	.word	0x0000bdb8
    687c:	20001004 	.word	0x20001004

00006880 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    6880:	b538      	push	{r3, r4, r5, lr}
    6882:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6884:	4b0c      	ldr	r3, [pc, #48]	; (68b8 <z_priq_dumb_remove+0x38>)
    6886:	4299      	cmp	r1, r3
    6888:	d007      	beq.n	689a <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    688a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    688c:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    688e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6890:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6892:	2300      	movs	r3, #0
    6894:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6896:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6898:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    689a:	4d08      	ldr	r5, [pc, #32]	; (68bc <z_priq_dumb_remove+0x3c>)
    689c:	f240 33e7 	movw	r3, #999	; 0x3e7
    68a0:	462a      	mov	r2, r5
    68a2:	4907      	ldr	r1, [pc, #28]	; (68c0 <z_priq_dumb_remove+0x40>)
    68a4:	4807      	ldr	r0, [pc, #28]	; (68c4 <z_priq_dumb_remove+0x44>)
    68a6:	f004 f8cf 	bl	aa48 <printk>
    68aa:	f240 31e7 	movw	r1, #999	; 0x3e7
    68ae:	4628      	mov	r0, r5
    68b0:	f004 fa23 	bl	acfa <assert_post_action>
    68b4:	e7e9      	b.n	688a <z_priq_dumb_remove+0xa>
    68b6:	bf00      	nop
    68b8:	200003b0 	.word	0x200003b0
    68bc:	0000cbe4 	.word	0x0000cbe4
    68c0:	0000cc20 	.word	0x0000cc20
    68c4:	0000bc60 	.word	0x0000bc60

000068c8 <update_cache>:
{
    68c8:	b538      	push	{r3, r4, r5, lr}
    68ca:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    68cc:	4818      	ldr	r0, [pc, #96]	; (6930 <update_cache+0x68>)
    68ce:	f004 ff92 	bl	b7f6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    68d2:	4605      	mov	r5, r0
    68d4:	b188      	cbz	r0, 68fa <update_cache+0x32>
	if (preempt_ok != 0) {
    68d6:	bb14      	cbnz	r4, 691e <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    68d8:	4b16      	ldr	r3, [pc, #88]	; (6934 <update_cache+0x6c>)
    68da:	689b      	ldr	r3, [r3, #8]
    68dc:	b183      	cbz	r3, 6900 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    68de:	4b15      	ldr	r3, [pc, #84]	; (6934 <update_cache+0x6c>)
    68e0:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    68e2:	7b5a      	ldrb	r2, [r3, #13]
    68e4:	f012 0f1f 	tst.w	r2, #31
    68e8:	d119      	bne.n	691e <update_cache+0x56>
	return node->next != NULL;
    68ea:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    68ec:	b9ba      	cbnz	r2, 691e <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    68ee:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    68f0:	2a7f      	cmp	r2, #127	; 0x7f
    68f2:	d914      	bls.n	691e <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    68f4:	4a0f      	ldr	r2, [pc, #60]	; (6934 <update_cache+0x6c>)
    68f6:	61d3      	str	r3, [r2, #28]
    68f8:	e019      	b.n	692e <update_cache+0x66>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    68fa:	4b0e      	ldr	r3, [pc, #56]	; (6934 <update_cache+0x6c>)
    68fc:	68dd      	ldr	r5, [r3, #12]
    68fe:	e7ea      	b.n	68d6 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    6900:	4c0d      	ldr	r4, [pc, #52]	; (6938 <update_cache+0x70>)
    6902:	2389      	movs	r3, #137	; 0x89
    6904:	4622      	mov	r2, r4
    6906:	490d      	ldr	r1, [pc, #52]	; (693c <update_cache+0x74>)
    6908:	480d      	ldr	r0, [pc, #52]	; (6940 <update_cache+0x78>)
    690a:	f004 f89d 	bl	aa48 <printk>
    690e:	480d      	ldr	r0, [pc, #52]	; (6944 <update_cache+0x7c>)
    6910:	f004 f89a 	bl	aa48 <printk>
    6914:	2189      	movs	r1, #137	; 0x89
    6916:	4620      	mov	r0, r4
    6918:	f004 f9ef 	bl	acfa <assert_post_action>
    691c:	e7df      	b.n	68de <update_cache+0x16>
		if (thread != _current) {
    691e:	4b05      	ldr	r3, [pc, #20]	; (6934 <update_cache+0x6c>)
    6920:	689b      	ldr	r3, [r3, #8]
    6922:	42ab      	cmp	r3, r5
    6924:	d001      	beq.n	692a <update_cache+0x62>
			z_reset_time_slice();
    6926:	f7ff fe51 	bl	65cc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    692a:	4b02      	ldr	r3, [pc, #8]	; (6934 <update_cache+0x6c>)
    692c:	61dd      	str	r5, [r3, #28]
}
    692e:	bd38      	pop	{r3, r4, r5, pc}
    6930:	20001024 	.word	0x20001024
    6934:	20001004 	.word	0x20001004
    6938:	0000cbe4 	.word	0x0000cbe4
    693c:	0000cc44 	.word	0x0000cc44
    6940:	0000bc60 	.word	0x0000bc60
    6944:	0000cb3c 	.word	0x0000cb3c

00006948 <move_thread_to_end_of_prio_q>:
{
    6948:	b538      	push	{r3, r4, r5, lr}
    694a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    694c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    694e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6952:	2b00      	cmp	r3, #0
    6954:	db2b      	blt.n	69ae <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    6956:	7b6b      	ldrb	r3, [r5, #13]
    6958:	f063 037f 	orn	r3, r3, #127	; 0x7f
    695c:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    695e:	4b22      	ldr	r3, [pc, #136]	; (69e8 <move_thread_to_end_of_prio_q+0xa0>)
    6960:	429d      	cmp	r5, r3
    6962:	d02c      	beq.n	69be <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    6964:	4b21      	ldr	r3, [pc, #132]	; (69ec <move_thread_to_end_of_prio_q+0xa4>)
    6966:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    696a:	429c      	cmp	r4, r3
    696c:	d039      	beq.n	69e2 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    696e:	b16c      	cbz	r4, 698c <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6970:	4621      	mov	r1, r4
    6972:	4628      	mov	r0, r5
    6974:	f004 ff20 	bl	b7b8 <z_sched_prio_cmp>
    6978:	2800      	cmp	r0, #0
    697a:	dc2c      	bgt.n	69d6 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    697c:	b134      	cbz	r4, 698c <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    697e:	4b1b      	ldr	r3, [pc, #108]	; (69ec <move_thread_to_end_of_prio_q+0xa4>)
    6980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6982:	429c      	cmp	r4, r3
    6984:	d002      	beq.n	698c <move_thread_to_end_of_prio_q+0x44>
    6986:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6988:	2c00      	cmp	r4, #0
    698a:	d1f0      	bne.n	696e <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    698c:	4b17      	ldr	r3, [pc, #92]	; (69ec <move_thread_to_end_of_prio_q+0xa4>)
    698e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6990:	f103 0120 	add.w	r1, r3, #32
    6994:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6996:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6998:	6015      	str	r5, [r2, #0]
	list->tail = node;
    699a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    699c:	4b13      	ldr	r3, [pc, #76]	; (69ec <move_thread_to_end_of_prio_q+0xa4>)
    699e:	6898      	ldr	r0, [r3, #8]
    69a0:	42a8      	cmp	r0, r5
    69a2:	bf14      	ite	ne
    69a4:	2000      	movne	r0, #0
    69a6:	2001      	moveq	r0, #1
    69a8:	f7ff ff8e 	bl	68c8 <update_cache>
}
    69ac:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    69ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    69b2:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    69b4:	4601      	mov	r1, r0
    69b6:	480e      	ldr	r0, [pc, #56]	; (69f0 <move_thread_to_end_of_prio_q+0xa8>)
    69b8:	f7ff ff62 	bl	6880 <z_priq_dumb_remove>
}
    69bc:	e7cb      	b.n	6956 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    69be:	4c0d      	ldr	r4, [pc, #52]	; (69f4 <move_thread_to_end_of_prio_q+0xac>)
    69c0:	23ba      	movs	r3, #186	; 0xba
    69c2:	4622      	mov	r2, r4
    69c4:	490c      	ldr	r1, [pc, #48]	; (69f8 <move_thread_to_end_of_prio_q+0xb0>)
    69c6:	480d      	ldr	r0, [pc, #52]	; (69fc <move_thread_to_end_of_prio_q+0xb4>)
    69c8:	f004 f83e 	bl	aa48 <printk>
    69cc:	21ba      	movs	r1, #186	; 0xba
    69ce:	4620      	mov	r0, r4
    69d0:	f004 f993 	bl	acfa <assert_post_action>
    69d4:	e7c6      	b.n	6964 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    69d6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    69d8:	606b      	str	r3, [r5, #4]
	node->next = successor;
    69da:	602c      	str	r4, [r5, #0]
	prev->next = node;
    69dc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    69de:	6065      	str	r5, [r4, #4]
}
    69e0:	e7dc      	b.n	699c <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    69e2:	2400      	movs	r4, #0
    69e4:	e7c3      	b.n	696e <move_thread_to_end_of_prio_q+0x26>
    69e6:	bf00      	nop
    69e8:	200003b0 	.word	0x200003b0
    69ec:	20001004 	.word	0x20001004
    69f0:	20001024 	.word	0x20001024
    69f4:	0000cbe4 	.word	0x0000cbe4
    69f8:	0000cc20 	.word	0x0000cc20
    69fc:	0000bc60 	.word	0x0000bc60

00006a00 <z_time_slice>:
{
    6a00:	b570      	push	{r4, r5, r6, lr}
    6a02:	4604      	mov	r4, r0
	__asm__ volatile(
    6a04:	f04f 0320 	mov.w	r3, #32
    6a08:	f3ef 8511 	mrs	r5, BASEPRI
    6a0c:	f383 8812 	msr	BASEPRI_MAX, r3
    6a10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a14:	483c      	ldr	r0, [pc, #240]	; (6b08 <z_time_slice+0x108>)
    6a16:	f7ff f8ed 	bl	5bf4 <z_spin_lock_valid>
    6a1a:	b338      	cbz	r0, 6a6c <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
    6a1c:	483a      	ldr	r0, [pc, #232]	; (6b08 <z_time_slice+0x108>)
    6a1e:	f7ff f909 	bl	5c34 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6a22:	4b3a      	ldr	r3, [pc, #232]	; (6b0c <z_time_slice+0x10c>)
    6a24:	689b      	ldr	r3, [r3, #8]
    6a26:	4a3a      	ldr	r2, [pc, #232]	; (6b10 <z_time_slice+0x110>)
    6a28:	6812      	ldr	r2, [r2, #0]
    6a2a:	4293      	cmp	r3, r2
    6a2c:	d02e      	beq.n	6a8c <z_time_slice+0x8c>
	pending_current = NULL;
    6a2e:	4a38      	ldr	r2, [pc, #224]	; (6b10 <z_time_slice+0x110>)
    6a30:	2100      	movs	r1, #0
    6a32:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    6a34:	4a37      	ldr	r2, [pc, #220]	; (6b14 <z_time_slice+0x114>)
    6a36:	6812      	ldr	r2, [r2, #0]
    6a38:	2a00      	cmp	r2, #0
    6a3a:	d048      	beq.n	6ace <z_time_slice+0xce>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6a3c:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    6a3e:	2a7f      	cmp	r2, #127	; 0x7f
    6a40:	d845      	bhi.n	6ace <z_time_slice+0xce>
	uint8_t state = thread->base.thread_state;
    6a42:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    6a44:	f012 0f1f 	tst.w	r2, #31
    6a48:	d141      	bne.n	6ace <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6a4a:	f993 100e 	ldrsb.w	r1, [r3, #14]
    6a4e:	4a32      	ldr	r2, [pc, #200]	; (6b18 <z_time_slice+0x118>)
    6a50:	6812      	ldr	r2, [r2, #0]
    6a52:	4291      	cmp	r1, r2
    6a54:	db3b      	blt.n	6ace <z_time_slice+0xce>
		&& !z_is_idle_thread_object(thread);
    6a56:	4a31      	ldr	r2, [pc, #196]	; (6b1c <z_time_slice+0x11c>)
    6a58:	4293      	cmp	r3, r2
    6a5a:	d038      	beq.n	6ace <z_time_slice+0xce>
		if (ticks >= _current_cpu->slice_ticks) {
    6a5c:	4a2b      	ldr	r2, [pc, #172]	; (6b0c <z_time_slice+0x10c>)
    6a5e:	6910      	ldr	r0, [r2, #16]
    6a60:	42a0      	cmp	r0, r4
    6a62:	dd2e      	ble.n	6ac2 <z_time_slice+0xc2>
			_current_cpu->slice_ticks -= ticks;
    6a64:	1b00      	subs	r0, r0, r4
    6a66:	4b29      	ldr	r3, [pc, #164]	; (6b0c <z_time_slice+0x10c>)
    6a68:	6118      	str	r0, [r3, #16]
    6a6a:	e033      	b.n	6ad4 <z_time_slice+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a6c:	4e2c      	ldr	r6, [pc, #176]	; (6b20 <z_time_slice+0x120>)
    6a6e:	2381      	movs	r3, #129	; 0x81
    6a70:	4632      	mov	r2, r6
    6a72:	492c      	ldr	r1, [pc, #176]	; (6b24 <z_time_slice+0x124>)
    6a74:	482c      	ldr	r0, [pc, #176]	; (6b28 <z_time_slice+0x128>)
    6a76:	f003 ffe7 	bl	aa48 <printk>
    6a7a:	4923      	ldr	r1, [pc, #140]	; (6b08 <z_time_slice+0x108>)
    6a7c:	482b      	ldr	r0, [pc, #172]	; (6b2c <z_time_slice+0x12c>)
    6a7e:	f003 ffe3 	bl	aa48 <printk>
    6a82:	2181      	movs	r1, #129	; 0x81
    6a84:	4630      	mov	r0, r6
    6a86:	f004 f938 	bl	acfa <assert_post_action>
    6a8a:	e7c7      	b.n	6a1c <z_time_slice+0x1c>
		z_reset_time_slice();
    6a8c:	f7ff fd9e 	bl	65cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a90:	481d      	ldr	r0, [pc, #116]	; (6b08 <z_time_slice+0x108>)
    6a92:	f7ff f8bf 	bl	5c14 <z_spin_unlock_valid>
    6a96:	b120      	cbz	r0, 6aa2 <z_time_slice+0xa2>
	__asm__ volatile(
    6a98:	f385 8811 	msr	BASEPRI, r5
    6a9c:	f3bf 8f6f 	isb	sy
		return;
    6aa0:	e020      	b.n	6ae4 <z_time_slice+0xe4>
    6aa2:	4c1f      	ldr	r4, [pc, #124]	; (6b20 <z_time_slice+0x120>)
    6aa4:	23ac      	movs	r3, #172	; 0xac
    6aa6:	4622      	mov	r2, r4
    6aa8:	4921      	ldr	r1, [pc, #132]	; (6b30 <z_time_slice+0x130>)
    6aaa:	481f      	ldr	r0, [pc, #124]	; (6b28 <z_time_slice+0x128>)
    6aac:	f003 ffcc 	bl	aa48 <printk>
    6ab0:	4915      	ldr	r1, [pc, #84]	; (6b08 <z_time_slice+0x108>)
    6ab2:	4820      	ldr	r0, [pc, #128]	; (6b34 <z_time_slice+0x134>)
    6ab4:	f003 ffc8 	bl	aa48 <printk>
    6ab8:	21ac      	movs	r1, #172	; 0xac
    6aba:	4620      	mov	r0, r4
    6abc:	f004 f91d 	bl	acfa <assert_post_action>
    6ac0:	e7ea      	b.n	6a98 <z_time_slice+0x98>
			move_thread_to_end_of_prio_q(_current);
    6ac2:	4618      	mov	r0, r3
    6ac4:	f7ff ff40 	bl	6948 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    6ac8:	f7ff fd80 	bl	65cc <z_reset_time_slice>
    6acc:	e002      	b.n	6ad4 <z_time_slice+0xd4>
		_current_cpu->slice_ticks = 0;
    6ace:	4b0f      	ldr	r3, [pc, #60]	; (6b0c <z_time_slice+0x10c>)
    6ad0:	2200      	movs	r2, #0
    6ad2:	611a      	str	r2, [r3, #16]
    6ad4:	480c      	ldr	r0, [pc, #48]	; (6b08 <z_time_slice+0x108>)
    6ad6:	f7ff f89d 	bl	5c14 <z_spin_unlock_valid>
    6ada:	b120      	cbz	r0, 6ae6 <z_time_slice+0xe6>
    6adc:	f385 8811 	msr	BASEPRI, r5
    6ae0:	f3bf 8f6f 	isb	sy
}
    6ae4:	bd70      	pop	{r4, r5, r6, pc}
    6ae6:	4c0e      	ldr	r4, [pc, #56]	; (6b20 <z_time_slice+0x120>)
    6ae8:	23ac      	movs	r3, #172	; 0xac
    6aea:	4622      	mov	r2, r4
    6aec:	4910      	ldr	r1, [pc, #64]	; (6b30 <z_time_slice+0x130>)
    6aee:	480e      	ldr	r0, [pc, #56]	; (6b28 <z_time_slice+0x128>)
    6af0:	f003 ffaa 	bl	aa48 <printk>
    6af4:	4904      	ldr	r1, [pc, #16]	; (6b08 <z_time_slice+0x108>)
    6af6:	480f      	ldr	r0, [pc, #60]	; (6b34 <z_time_slice+0x134>)
    6af8:	f003 ffa6 	bl	aa48 <printk>
    6afc:	21ac      	movs	r1, #172	; 0xac
    6afe:	4620      	mov	r0, r4
    6b00:	f004 f8fb 	bl	acfa <assert_post_action>
    6b04:	e7ea      	b.n	6adc <z_time_slice+0xdc>
    6b06:	bf00      	nop
    6b08:	20001040 	.word	0x20001040
    6b0c:	20001004 	.word	0x20001004
    6b10:	2000103c 	.word	0x2000103c
    6b14:	20001048 	.word	0x20001048
    6b18:	20001044 	.word	0x20001044
    6b1c:	200003b0 	.word	0x200003b0
    6b20:	0000bd78 	.word	0x0000bd78
    6b24:	0000bdd0 	.word	0x0000bdd0
    6b28:	0000bc60 	.word	0x0000bc60
    6b2c:	0000bde8 	.word	0x0000bde8
    6b30:	0000bda0 	.word	0x0000bda0
    6b34:	0000bdb8 	.word	0x0000bdb8

00006b38 <ready_thread>:
{
    6b38:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    6b3a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6b3c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6b40:	2a00      	cmp	r2, #0
    6b42:	db30      	blt.n	6ba6 <ready_thread+0x6e>
    6b44:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6b46:	f013 0f1f 	tst.w	r3, #31
    6b4a:	d105      	bne.n	6b58 <ready_thread+0x20>
	return node->next != NULL;
    6b4c:	6982      	ldr	r2, [r0, #24]
    6b4e:	b10a      	cbz	r2, 6b54 <ready_thread+0x1c>
    6b50:	2200      	movs	r2, #0
    6b52:	e002      	b.n	6b5a <ready_thread+0x22>
    6b54:	2201      	movs	r2, #1
    6b56:	e000      	b.n	6b5a <ready_thread+0x22>
    6b58:	2200      	movs	r2, #0
    6b5a:	b322      	cbz	r2, 6ba6 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    6b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b60:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b62:	4b1b      	ldr	r3, [pc, #108]	; (6bd0 <ready_thread+0x98>)
    6b64:	429c      	cmp	r4, r3
    6b66:	d01f      	beq.n	6ba8 <ready_thread+0x70>
	return list->head == list;
    6b68:	4b1a      	ldr	r3, [pc, #104]	; (6bd4 <ready_thread+0x9c>)
    6b6a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b6e:	429d      	cmp	r5, r3
    6b70:	d02c      	beq.n	6bcc <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b72:	b16d      	cbz	r5, 6b90 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6b74:	4629      	mov	r1, r5
    6b76:	4620      	mov	r0, r4
    6b78:	f004 fe1e 	bl	b7b8 <z_sched_prio_cmp>
    6b7c:	2800      	cmp	r0, #0
    6b7e:	dc1f      	bgt.n	6bc0 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6b80:	b135      	cbz	r5, 6b90 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    6b82:	4b14      	ldr	r3, [pc, #80]	; (6bd4 <ready_thread+0x9c>)
    6b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b86:	429d      	cmp	r5, r3
    6b88:	d002      	beq.n	6b90 <ready_thread+0x58>
    6b8a:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b8c:	2d00      	cmp	r5, #0
    6b8e:	d1f0      	bne.n	6b72 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    6b90:	4b10      	ldr	r3, [pc, #64]	; (6bd4 <ready_thread+0x9c>)
    6b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6b94:	f103 0120 	add.w	r1, r3, #32
    6b98:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6b9a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6b9c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6b9e:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    6ba0:	2000      	movs	r0, #0
    6ba2:	f7ff fe91 	bl	68c8 <update_cache>
}
    6ba6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6ba8:	4d0b      	ldr	r5, [pc, #44]	; (6bd8 <ready_thread+0xa0>)
    6baa:	23ba      	movs	r3, #186	; 0xba
    6bac:	462a      	mov	r2, r5
    6bae:	490b      	ldr	r1, [pc, #44]	; (6bdc <ready_thread+0xa4>)
    6bb0:	480b      	ldr	r0, [pc, #44]	; (6be0 <ready_thread+0xa8>)
    6bb2:	f003 ff49 	bl	aa48 <printk>
    6bb6:	21ba      	movs	r1, #186	; 0xba
    6bb8:	4628      	mov	r0, r5
    6bba:	f004 f89e 	bl	acfa <assert_post_action>
    6bbe:	e7d3      	b.n	6b68 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    6bc0:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6bc2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6bc4:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6bc6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6bc8:	606c      	str	r4, [r5, #4]
}
    6bca:	e7e9      	b.n	6ba0 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6bcc:	2500      	movs	r5, #0
    6bce:	e7d0      	b.n	6b72 <ready_thread+0x3a>
    6bd0:	200003b0 	.word	0x200003b0
    6bd4:	20001004 	.word	0x20001004
    6bd8:	0000cbe4 	.word	0x0000cbe4
    6bdc:	0000cc20 	.word	0x0000cc20
    6be0:	0000bc60 	.word	0x0000bc60

00006be4 <z_ready_thread>:
{
    6be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6be6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    6be8:	2400      	movs	r4, #0
	__asm__ volatile(
    6bea:	f04f 0320 	mov.w	r3, #32
    6bee:	f3ef 8611 	mrs	r6, BASEPRI
    6bf2:	f383 8812 	msr	BASEPRI_MAX, r3
    6bf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bfa:	481e      	ldr	r0, [pc, #120]	; (6c74 <z_ready_thread+0x90>)
    6bfc:	f7fe fffa 	bl	5bf4 <z_spin_lock_valid>
    6c00:	b118      	cbz	r0, 6c0a <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    6c02:	481c      	ldr	r0, [pc, #112]	; (6c74 <z_ready_thread+0x90>)
    6c04:	f7ff f816 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    6c08:	e027      	b.n	6c5a <z_ready_thread+0x76>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c0a:	4f1b      	ldr	r7, [pc, #108]	; (6c78 <z_ready_thread+0x94>)
    6c0c:	2381      	movs	r3, #129	; 0x81
    6c0e:	463a      	mov	r2, r7
    6c10:	491a      	ldr	r1, [pc, #104]	; (6c7c <z_ready_thread+0x98>)
    6c12:	481b      	ldr	r0, [pc, #108]	; (6c80 <z_ready_thread+0x9c>)
    6c14:	f003 ff18 	bl	aa48 <printk>
    6c18:	4916      	ldr	r1, [pc, #88]	; (6c74 <z_ready_thread+0x90>)
    6c1a:	481a      	ldr	r0, [pc, #104]	; (6c84 <z_ready_thread+0xa0>)
    6c1c:	f003 ff14 	bl	aa48 <printk>
    6c20:	2181      	movs	r1, #129	; 0x81
    6c22:	4638      	mov	r0, r7
    6c24:	f004 f869 	bl	acfa <assert_post_action>
    6c28:	e7eb      	b.n	6c02 <z_ready_thread+0x1e>
			ready_thread(thread);
    6c2a:	4628      	mov	r0, r5
    6c2c:	f7ff ff84 	bl	6b38 <ready_thread>
    6c30:	e019      	b.n	6c66 <z_ready_thread+0x82>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c32:	4c11      	ldr	r4, [pc, #68]	; (6c78 <z_ready_thread+0x94>)
    6c34:	23ac      	movs	r3, #172	; 0xac
    6c36:	4622      	mov	r2, r4
    6c38:	4913      	ldr	r1, [pc, #76]	; (6c88 <z_ready_thread+0xa4>)
    6c3a:	4811      	ldr	r0, [pc, #68]	; (6c80 <z_ready_thread+0x9c>)
    6c3c:	f003 ff04 	bl	aa48 <printk>
    6c40:	490c      	ldr	r1, [pc, #48]	; (6c74 <z_ready_thread+0x90>)
    6c42:	4812      	ldr	r0, [pc, #72]	; (6c8c <z_ready_thread+0xa8>)
    6c44:	f003 ff00 	bl	aa48 <printk>
    6c48:	21ac      	movs	r1, #172	; 0xac
    6c4a:	4620      	mov	r0, r4
    6c4c:	f004 f855 	bl	acfa <assert_post_action>
	__asm__ volatile(
    6c50:	f386 8811 	msr	BASEPRI, r6
    6c54:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6c58:	2401      	movs	r4, #1
    6c5a:	b954      	cbnz	r4, 6c72 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    6c5c:	4628      	mov	r0, r5
    6c5e:	f004 fda9 	bl	b7b4 <thread_active_elsewhere>
    6c62:	2800      	cmp	r0, #0
    6c64:	d0e1      	beq.n	6c2a <z_ready_thread+0x46>
    6c66:	4803      	ldr	r0, [pc, #12]	; (6c74 <z_ready_thread+0x90>)
    6c68:	f7fe ffd4 	bl	5c14 <z_spin_unlock_valid>
    6c6c:	2800      	cmp	r0, #0
    6c6e:	d1ef      	bne.n	6c50 <z_ready_thread+0x6c>
    6c70:	e7df      	b.n	6c32 <z_ready_thread+0x4e>
}
    6c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c74:	20001040 	.word	0x20001040
    6c78:	0000bd78 	.word	0x0000bd78
    6c7c:	0000bdd0 	.word	0x0000bdd0
    6c80:	0000bc60 	.word	0x0000bc60
    6c84:	0000bde8 	.word	0x0000bde8
    6c88:	0000bda0 	.word	0x0000bda0
    6c8c:	0000bdb8 	.word	0x0000bdb8

00006c90 <z_sched_start>:
{
    6c90:	b570      	push	{r4, r5, r6, lr}
    6c92:	4604      	mov	r4, r0
	__asm__ volatile(
    6c94:	f04f 0320 	mov.w	r3, #32
    6c98:	f3ef 8511 	mrs	r5, BASEPRI
    6c9c:	f383 8812 	msr	BASEPRI_MAX, r3
    6ca0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ca4:	481f      	ldr	r0, [pc, #124]	; (6d24 <z_sched_start+0x94>)
    6ca6:	f7fe ffa5 	bl	5bf4 <z_spin_lock_valid>
    6caa:	b188      	cbz	r0, 6cd0 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    6cac:	481d      	ldr	r0, [pc, #116]	; (6d24 <z_sched_start+0x94>)
    6cae:	f7fe ffc1 	bl	5c34 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6cb2:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    6cb4:	f013 0f04 	tst.w	r3, #4
    6cb8:	d01a      	beq.n	6cf0 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6cba:	f023 0304 	bic.w	r3, r3, #4
    6cbe:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    6cc0:	4620      	mov	r0, r4
    6cc2:	f7ff ff39 	bl	6b38 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6cc6:	4629      	mov	r1, r5
    6cc8:	4816      	ldr	r0, [pc, #88]	; (6d24 <z_sched_start+0x94>)
    6cca:	f7ff fd09 	bl	66e0 <z_reschedule>
}
    6cce:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cd0:	4e15      	ldr	r6, [pc, #84]	; (6d28 <z_sched_start+0x98>)
    6cd2:	2381      	movs	r3, #129	; 0x81
    6cd4:	4632      	mov	r2, r6
    6cd6:	4915      	ldr	r1, [pc, #84]	; (6d2c <z_sched_start+0x9c>)
    6cd8:	4815      	ldr	r0, [pc, #84]	; (6d30 <z_sched_start+0xa0>)
    6cda:	f003 feb5 	bl	aa48 <printk>
    6cde:	4911      	ldr	r1, [pc, #68]	; (6d24 <z_sched_start+0x94>)
    6ce0:	4814      	ldr	r0, [pc, #80]	; (6d34 <z_sched_start+0xa4>)
    6ce2:	f003 feb1 	bl	aa48 <printk>
    6ce6:	2181      	movs	r1, #129	; 0x81
    6ce8:	4630      	mov	r0, r6
    6cea:	f004 f806 	bl	acfa <assert_post_action>
    6cee:	e7dd      	b.n	6cac <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6cf0:	480c      	ldr	r0, [pc, #48]	; (6d24 <z_sched_start+0x94>)
    6cf2:	f7fe ff8f 	bl	5c14 <z_spin_unlock_valid>
    6cf6:	b120      	cbz	r0, 6d02 <z_sched_start+0x72>
	__asm__ volatile(
    6cf8:	f385 8811 	msr	BASEPRI, r5
    6cfc:	f3bf 8f6f 	isb	sy
		return;
    6d00:	e7e5      	b.n	6cce <z_sched_start+0x3e>
    6d02:	4c09      	ldr	r4, [pc, #36]	; (6d28 <z_sched_start+0x98>)
    6d04:	23ac      	movs	r3, #172	; 0xac
    6d06:	4622      	mov	r2, r4
    6d08:	490b      	ldr	r1, [pc, #44]	; (6d38 <z_sched_start+0xa8>)
    6d0a:	4809      	ldr	r0, [pc, #36]	; (6d30 <z_sched_start+0xa0>)
    6d0c:	f003 fe9c 	bl	aa48 <printk>
    6d10:	4904      	ldr	r1, [pc, #16]	; (6d24 <z_sched_start+0x94>)
    6d12:	480a      	ldr	r0, [pc, #40]	; (6d3c <z_sched_start+0xac>)
    6d14:	f003 fe98 	bl	aa48 <printk>
    6d18:	21ac      	movs	r1, #172	; 0xac
    6d1a:	4620      	mov	r0, r4
    6d1c:	f003 ffed 	bl	acfa <assert_post_action>
    6d20:	e7ea      	b.n	6cf8 <z_sched_start+0x68>
    6d22:	bf00      	nop
    6d24:	20001040 	.word	0x20001040
    6d28:	0000bd78 	.word	0x0000bd78
    6d2c:	0000bdd0 	.word	0x0000bdd0
    6d30:	0000bc60 	.word	0x0000bc60
    6d34:	0000bde8 	.word	0x0000bde8
    6d38:	0000bda0 	.word	0x0000bda0
    6d3c:	0000bdb8 	.word	0x0000bdb8

00006d40 <z_thread_timeout>:
{
    6d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d44:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    6d46:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    6d4a:	2500      	movs	r5, #0
	__asm__ volatile(
    6d4c:	f04f 0320 	mov.w	r3, #32
    6d50:	f3ef 8711 	mrs	r7, BASEPRI
    6d54:	f383 8812 	msr	BASEPRI_MAX, r3
    6d58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d5c:	4829      	ldr	r0, [pc, #164]	; (6e04 <z_thread_timeout+0xc4>)
    6d5e:	f7fe ff49 	bl	5bf4 <z_spin_lock_valid>
    6d62:	b118      	cbz	r0, 6d6c <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    6d64:	4827      	ldr	r0, [pc, #156]	; (6e04 <z_thread_timeout+0xc4>)
    6d66:	f7fe ff65 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    6d6a:	e02e      	b.n	6dca <z_thread_timeout+0x8a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d6c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 6e14 <z_thread_timeout+0xd4>
    6d70:	2381      	movs	r3, #129	; 0x81
    6d72:	4642      	mov	r2, r8
    6d74:	4924      	ldr	r1, [pc, #144]	; (6e08 <z_thread_timeout+0xc8>)
    6d76:	4825      	ldr	r0, [pc, #148]	; (6e0c <z_thread_timeout+0xcc>)
    6d78:	f003 fe66 	bl	aa48 <printk>
    6d7c:	4921      	ldr	r1, [pc, #132]	; (6e04 <z_thread_timeout+0xc4>)
    6d7e:	4824      	ldr	r0, [pc, #144]	; (6e10 <z_thread_timeout+0xd0>)
    6d80:	f003 fe62 	bl	aa48 <printk>
    6d84:	2181      	movs	r1, #129	; 0x81
    6d86:	4640      	mov	r0, r8
    6d88:	f003 ffb7 	bl	acfa <assert_post_action>
    6d8c:	e7ea      	b.n	6d64 <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6d8e:	4630      	mov	r0, r6
    6d90:	f7ff fbf2 	bl	6578 <pended_on_thread>
    6d94:	4631      	mov	r1, r6
    6d96:	f7ff fd73 	bl	6880 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6d9a:	7b73      	ldrb	r3, [r6, #13]
    6d9c:	f023 0302 	bic.w	r3, r3, #2
    6da0:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    6da2:	2300      	movs	r3, #0
    6da4:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6da6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6daa:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    6dae:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6db2:	4630      	mov	r0, r6
    6db4:	f7ff fec0 	bl	6b38 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6db8:	4812      	ldr	r0, [pc, #72]	; (6e04 <z_thread_timeout+0xc4>)
    6dba:	f7fe ff2b 	bl	5c14 <z_spin_unlock_valid>
    6dbe:	b178      	cbz	r0, 6de0 <z_thread_timeout+0xa0>
	__asm__ volatile(
    6dc0:	f387 8811 	msr	BASEPRI, r7
    6dc4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6dc8:	2501      	movs	r5, #1
    6dca:	b9cd      	cbnz	r5, 6e00 <z_thread_timeout+0xc0>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6dcc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6dd0:	f013 0f28 	tst.w	r3, #40	; 0x28
    6dd4:	d1f0      	bne.n	6db8 <z_thread_timeout+0x78>
			if (thread->base.pended_on != NULL) {
    6dd6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d1d7      	bne.n	6d8e <z_thread_timeout+0x4e>
    6dde:	e7e2      	b.n	6da6 <z_thread_timeout+0x66>
    6de0:	4d0c      	ldr	r5, [pc, #48]	; (6e14 <z_thread_timeout+0xd4>)
    6de2:	23ac      	movs	r3, #172	; 0xac
    6de4:	462a      	mov	r2, r5
    6de6:	490c      	ldr	r1, [pc, #48]	; (6e18 <z_thread_timeout+0xd8>)
    6de8:	4808      	ldr	r0, [pc, #32]	; (6e0c <z_thread_timeout+0xcc>)
    6dea:	f003 fe2d 	bl	aa48 <printk>
    6dee:	4905      	ldr	r1, [pc, #20]	; (6e04 <z_thread_timeout+0xc4>)
    6df0:	480a      	ldr	r0, [pc, #40]	; (6e1c <z_thread_timeout+0xdc>)
    6df2:	f003 fe29 	bl	aa48 <printk>
    6df6:	21ac      	movs	r1, #172	; 0xac
    6df8:	4628      	mov	r0, r5
    6dfa:	f003 ff7e 	bl	acfa <assert_post_action>
    6dfe:	e7df      	b.n	6dc0 <z_thread_timeout+0x80>
}
    6e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e04:	20001040 	.word	0x20001040
    6e08:	0000bdd0 	.word	0x0000bdd0
    6e0c:	0000bc60 	.word	0x0000bc60
    6e10:	0000bde8 	.word	0x0000bde8
    6e14:	0000bd78 	.word	0x0000bd78
    6e18:	0000bda0 	.word	0x0000bda0
    6e1c:	0000bdb8 	.word	0x0000bdb8

00006e20 <unready_thread>:
{
    6e20:	b510      	push	{r4, lr}
    6e22:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    6e24:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6e26:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	db08      	blt.n	6e40 <unready_thread+0x20>
	update_cache(thread == _current);
    6e2e:	4b08      	ldr	r3, [pc, #32]	; (6e50 <unready_thread+0x30>)
    6e30:	6898      	ldr	r0, [r3, #8]
    6e32:	42a0      	cmp	r0, r4
    6e34:	bf14      	ite	ne
    6e36:	2000      	movne	r0, #0
    6e38:	2001      	moveq	r0, #1
    6e3a:	f7ff fd45 	bl	68c8 <update_cache>
}
    6e3e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6e44:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6e46:	4601      	mov	r1, r0
    6e48:	4802      	ldr	r0, [pc, #8]	; (6e54 <unready_thread+0x34>)
    6e4a:	f7ff fd19 	bl	6880 <z_priq_dumb_remove>
}
    6e4e:	e7ee      	b.n	6e2e <unready_thread+0xe>
    6e50:	20001004 	.word	0x20001004
    6e54:	20001024 	.word	0x20001024

00006e58 <add_to_waitq_locked>:
{
    6e58:	b570      	push	{r4, r5, r6, lr}
    6e5a:	4605      	mov	r5, r0
    6e5c:	460e      	mov	r6, r1
	unready_thread(thread);
    6e5e:	f7ff ffdf 	bl	6e20 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6e62:	7b6b      	ldrb	r3, [r5, #13]
    6e64:	f043 0302 	orr.w	r3, r3, #2
    6e68:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    6e6a:	b1ce      	cbz	r6, 6ea0 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    6e6c:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6e6e:	4b17      	ldr	r3, [pc, #92]	; (6ecc <add_to_waitq_locked+0x74>)
    6e70:	429d      	cmp	r5, r3
    6e72:	d016      	beq.n	6ea2 <add_to_waitq_locked+0x4a>
	return list->head == list;
    6e74:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e76:	42a6      	cmp	r6, r4
    6e78:	d025      	beq.n	6ec6 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e7a:	b164      	cbz	r4, 6e96 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6e7c:	4621      	mov	r1, r4
    6e7e:	4628      	mov	r0, r5
    6e80:	f004 fc9a 	bl	b7b8 <z_sched_prio_cmp>
    6e84:	2800      	cmp	r0, #0
    6e86:	dc18      	bgt.n	6eba <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6e88:	b12c      	cbz	r4, 6e96 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    6e8a:	6873      	ldr	r3, [r6, #4]
    6e8c:	429c      	cmp	r4, r3
    6e8e:	d002      	beq.n	6e96 <add_to_waitq_locked+0x3e>
    6e90:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e92:	2c00      	cmp	r4, #0
    6e94:	d1f1      	bne.n	6e7a <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    6e96:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    6e98:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    6e9a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    6e9c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6e9e:	6075      	str	r5, [r6, #4]
}
    6ea0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6ea2:	4c0b      	ldr	r4, [pc, #44]	; (6ed0 <add_to_waitq_locked+0x78>)
    6ea4:	23ba      	movs	r3, #186	; 0xba
    6ea6:	4622      	mov	r2, r4
    6ea8:	490a      	ldr	r1, [pc, #40]	; (6ed4 <add_to_waitq_locked+0x7c>)
    6eaa:	480b      	ldr	r0, [pc, #44]	; (6ed8 <add_to_waitq_locked+0x80>)
    6eac:	f003 fdcc 	bl	aa48 <printk>
    6eb0:	21ba      	movs	r1, #186	; 0xba
    6eb2:	4620      	mov	r0, r4
    6eb4:	f003 ff21 	bl	acfa <assert_post_action>
    6eb8:	e7dc      	b.n	6e74 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    6eba:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6ebc:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6ebe:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6ec0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6ec2:	6065      	str	r5, [r4, #4]
}
    6ec4:	e7ec      	b.n	6ea0 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6ec6:	2400      	movs	r4, #0
    6ec8:	e7d7      	b.n	6e7a <add_to_waitq_locked+0x22>
    6eca:	bf00      	nop
    6ecc:	200003b0 	.word	0x200003b0
    6ed0:	0000cbe4 	.word	0x0000cbe4
    6ed4:	0000cc20 	.word	0x0000cc20
    6ed8:	0000bc60 	.word	0x0000bc60

00006edc <pend>:
{
    6edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ee0:	4605      	mov	r5, r0
    6ee2:	460f      	mov	r7, r1
    6ee4:	4691      	mov	r9, r2
    6ee6:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    6ee8:	2400      	movs	r4, #0
	__asm__ volatile(
    6eea:	f04f 0320 	mov.w	r3, #32
    6eee:	f3ef 8611 	mrs	r6, BASEPRI
    6ef2:	f383 8812 	msr	BASEPRI_MAX, r3
    6ef6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6efa:	481f      	ldr	r0, [pc, #124]	; (6f78 <pend+0x9c>)
    6efc:	f7fe fe7a 	bl	5bf4 <z_spin_lock_valid>
    6f00:	b118      	cbz	r0, 6f0a <pend+0x2e>
	z_spin_lock_set_owner(l);
    6f02:	481d      	ldr	r0, [pc, #116]	; (6f78 <pend+0x9c>)
    6f04:	f7fe fe96 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    6f08:	e024      	b.n	6f54 <pend+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f0a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6f88 <pend+0xac>
    6f0e:	2381      	movs	r3, #129	; 0x81
    6f10:	4652      	mov	r2, sl
    6f12:	491a      	ldr	r1, [pc, #104]	; (6f7c <pend+0xa0>)
    6f14:	481a      	ldr	r0, [pc, #104]	; (6f80 <pend+0xa4>)
    6f16:	f003 fd97 	bl	aa48 <printk>
    6f1a:	4917      	ldr	r1, [pc, #92]	; (6f78 <pend+0x9c>)
    6f1c:	4819      	ldr	r0, [pc, #100]	; (6f84 <pend+0xa8>)
    6f1e:	f003 fd93 	bl	aa48 <printk>
    6f22:	2181      	movs	r1, #129	; 0x81
    6f24:	4650      	mov	r0, sl
    6f26:	f003 fee8 	bl	acfa <assert_post_action>
    6f2a:	e7ea      	b.n	6f02 <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f2c:	4c16      	ldr	r4, [pc, #88]	; (6f88 <pend+0xac>)
    6f2e:	23ac      	movs	r3, #172	; 0xac
    6f30:	4622      	mov	r2, r4
    6f32:	4916      	ldr	r1, [pc, #88]	; (6f8c <pend+0xb0>)
    6f34:	4812      	ldr	r0, [pc, #72]	; (6f80 <pend+0xa4>)
    6f36:	f003 fd87 	bl	aa48 <printk>
    6f3a:	490f      	ldr	r1, [pc, #60]	; (6f78 <pend+0x9c>)
    6f3c:	4814      	ldr	r0, [pc, #80]	; (6f90 <pend+0xb4>)
    6f3e:	f003 fd83 	bl	aa48 <printk>
    6f42:	21ac      	movs	r1, #172	; 0xac
    6f44:	4620      	mov	r0, r4
    6f46:	f003 fed8 	bl	acfa <assert_post_action>
	__asm__ volatile(
    6f4a:	f386 8811 	msr	BASEPRI, r6
    6f4e:	f3bf 8f6f 	isb	sy
    6f52:	2401      	movs	r4, #1
    6f54:	b94c      	cbnz	r4, 6f6a <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    6f56:	4639      	mov	r1, r7
    6f58:	4628      	mov	r0, r5
    6f5a:	f7ff ff7d 	bl	6e58 <add_to_waitq_locked>
    6f5e:	4806      	ldr	r0, [pc, #24]	; (6f78 <pend+0x9c>)
    6f60:	f7fe fe58 	bl	5c14 <z_spin_unlock_valid>
    6f64:	2800      	cmp	r0, #0
    6f66:	d1f0      	bne.n	6f4a <pend+0x6e>
    6f68:	e7e0      	b.n	6f2c <pend+0x50>
	add_thread_timeout(thread, timeout);
    6f6a:	464a      	mov	r2, r9
    6f6c:	4643      	mov	r3, r8
    6f6e:	4628      	mov	r0, r5
    6f70:	f7ff fb1c 	bl	65ac <add_thread_timeout>
}
    6f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f78:	20001040 	.word	0x20001040
    6f7c:	0000bdd0 	.word	0x0000bdd0
    6f80:	0000bc60 	.word	0x0000bc60
    6f84:	0000bde8 	.word	0x0000bde8
    6f88:	0000bd78 	.word	0x0000bd78
    6f8c:	0000bda0 	.word	0x0000bda0
    6f90:	0000bdb8 	.word	0x0000bdb8

00006f94 <z_pend_curr>:
{
    6f94:	b570      	push	{r4, r5, r6, lr}
    6f96:	4604      	mov	r4, r0
    6f98:	460d      	mov	r5, r1
    6f9a:	4611      	mov	r1, r2
	pending_current = _current;
    6f9c:	4b0f      	ldr	r3, [pc, #60]	; (6fdc <z_pend_curr+0x48>)
    6f9e:	6898      	ldr	r0, [r3, #8]
    6fa0:	4b0f      	ldr	r3, [pc, #60]	; (6fe0 <z_pend_curr+0x4c>)
    6fa2:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    6fa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6fa8:	f7ff ff98 	bl	6edc <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fac:	4620      	mov	r0, r4
    6fae:	f7fe fe31 	bl	5c14 <z_spin_unlock_valid>
    6fb2:	b118      	cbz	r0, 6fbc <z_pend_curr+0x28>
    6fb4:	4628      	mov	r0, r5
    6fb6:	f7fa fe5b 	bl	1c70 <arch_swap>
}
    6fba:	bd70      	pop	{r4, r5, r6, pc}
    6fbc:	4e09      	ldr	r6, [pc, #36]	; (6fe4 <z_pend_curr+0x50>)
    6fbe:	23c3      	movs	r3, #195	; 0xc3
    6fc0:	4632      	mov	r2, r6
    6fc2:	4909      	ldr	r1, [pc, #36]	; (6fe8 <z_pend_curr+0x54>)
    6fc4:	4809      	ldr	r0, [pc, #36]	; (6fec <z_pend_curr+0x58>)
    6fc6:	f003 fd3f 	bl	aa48 <printk>
    6fca:	4621      	mov	r1, r4
    6fcc:	4808      	ldr	r0, [pc, #32]	; (6ff0 <z_pend_curr+0x5c>)
    6fce:	f003 fd3b 	bl	aa48 <printk>
    6fd2:	21c3      	movs	r1, #195	; 0xc3
    6fd4:	4630      	mov	r0, r6
    6fd6:	f003 fe90 	bl	acfa <assert_post_action>
    6fda:	e7eb      	b.n	6fb4 <z_pend_curr+0x20>
    6fdc:	20001004 	.word	0x20001004
    6fe0:	2000103c 	.word	0x2000103c
    6fe4:	0000bd78 	.word	0x0000bd78
    6fe8:	0000bda0 	.word	0x0000bda0
    6fec:	0000bc60 	.word	0x0000bc60
    6ff0:	0000bdb8 	.word	0x0000bdb8

00006ff4 <z_set_prio>:
{
    6ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ff8:	4604      	mov	r4, r0
    6ffa:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    6ffc:	2500      	movs	r5, #0
	__asm__ volatile(
    6ffe:	f04f 0320 	mov.w	r3, #32
    7002:	f3ef 8611 	mrs	r6, BASEPRI
    7006:	f383 8812 	msr	BASEPRI_MAX, r3
    700a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    700e:	4845      	ldr	r0, [pc, #276]	; (7124 <z_set_prio+0x130>)
    7010:	f7fe fdf0 	bl	5bf4 <z_spin_lock_valid>
    7014:	b128      	cbz	r0, 7022 <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
    7016:	4843      	ldr	r0, [pc, #268]	; (7124 <z_set_prio+0x130>)
    7018:	f7fe fe0c 	bl	5c34 <z_spin_lock_set_owner>
	bool need_sched = 0;
    701c:	f04f 0800 	mov.w	r8, #0
	return k;
    7020:	e01e      	b.n	7060 <z_set_prio+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7022:	f8df 8124 	ldr.w	r8, [pc, #292]	; 7148 <z_set_prio+0x154>
    7026:	2381      	movs	r3, #129	; 0x81
    7028:	4642      	mov	r2, r8
    702a:	493f      	ldr	r1, [pc, #252]	; (7128 <z_set_prio+0x134>)
    702c:	483f      	ldr	r0, [pc, #252]	; (712c <z_set_prio+0x138>)
    702e:	f003 fd0b 	bl	aa48 <printk>
    7032:	493c      	ldr	r1, [pc, #240]	; (7124 <z_set_prio+0x130>)
    7034:	483e      	ldr	r0, [pc, #248]	; (7130 <z_set_prio+0x13c>)
    7036:	f003 fd07 	bl	aa48 <printk>
    703a:	2181      	movs	r1, #129	; 0x81
    703c:	4640      	mov	r0, r8
    703e:	f003 fe5c 	bl	acfa <assert_post_action>
    7042:	e7e8      	b.n	7016 <z_set_prio+0x22>
		if (need_sched) {
    7044:	f013 0801 	ands.w	r8, r3, #1
    7048:	d116      	bne.n	7078 <z_set_prio+0x84>
			thread->base.prio = prio;
    704a:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    704c:	4835      	ldr	r0, [pc, #212]	; (7124 <z_set_prio+0x130>)
    704e:	f7fe fde1 	bl	5c14 <z_spin_unlock_valid>
    7052:	2800      	cmp	r0, #0
    7054:	d053      	beq.n	70fe <z_set_prio+0x10a>
	__asm__ volatile(
    7056:	f386 8811 	msr	BASEPRI, r6
    705a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    705e:	2501      	movs	r5, #1
    7060:	462b      	mov	r3, r5
    7062:	2d00      	cmp	r5, #0
    7064:	d15b      	bne.n	711e <z_set_prio+0x12a>
	uint8_t state = thread->base.thread_state;
    7066:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7068:	f012 0f1f 	tst.w	r2, #31
    706c:	d1ea      	bne.n	7044 <z_set_prio+0x50>
	return node->next != NULL;
    706e:	69a1      	ldr	r1, [r4, #24]
    7070:	2900      	cmp	r1, #0
    7072:	d1e7      	bne.n	7044 <z_set_prio+0x50>
    7074:	2301      	movs	r3, #1
    7076:	e7e5      	b.n	7044 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7078:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    707c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    707e:	4621      	mov	r1, r4
    7080:	482c      	ldr	r0, [pc, #176]	; (7134 <z_set_prio+0x140>)
    7082:	f7ff fbfd 	bl	6880 <z_priq_dumb_remove>
				thread->base.prio = prio;
    7086:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7088:	7b63      	ldrb	r3, [r4, #13]
    708a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    708e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7090:	4b29      	ldr	r3, [pc, #164]	; (7138 <z_set_prio+0x144>)
    7092:	429c      	cmp	r4, r3
    7094:	d01f      	beq.n	70d6 <z_set_prio+0xe2>
	return list->head == list;
    7096:	4b29      	ldr	r3, [pc, #164]	; (713c <z_set_prio+0x148>)
    7098:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    709c:	429d      	cmp	r5, r3
    709e:	d02c      	beq.n	70fa <z_set_prio+0x106>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70a0:	b16d      	cbz	r5, 70be <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
    70a2:	4629      	mov	r1, r5
    70a4:	4620      	mov	r0, r4
    70a6:	f004 fb87 	bl	b7b8 <z_sched_prio_cmp>
    70aa:	2800      	cmp	r0, #0
    70ac:	dc1f      	bgt.n	70ee <z_set_prio+0xfa>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    70ae:	b135      	cbz	r5, 70be <z_set_prio+0xca>
	return (node == list->tail) ? NULL : node->next;
    70b0:	4b22      	ldr	r3, [pc, #136]	; (713c <z_set_prio+0x148>)
    70b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70b4:	429d      	cmp	r5, r3
    70b6:	d002      	beq.n	70be <z_set_prio+0xca>
    70b8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70ba:	2d00      	cmp	r5, #0
    70bc:	d1f0      	bne.n	70a0 <z_set_prio+0xac>
	sys_dnode_t *const tail = list->tail;
    70be:	4b1f      	ldr	r3, [pc, #124]	; (713c <z_set_prio+0x148>)
    70c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    70c2:	f103 0120 	add.w	r1, r3, #32
    70c6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    70c8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    70ca:	6014      	str	r4, [r2, #0]
	list->tail = node;
    70cc:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    70ce:	2001      	movs	r0, #1
    70d0:	f7ff fbfa 	bl	68c8 <update_cache>
    70d4:	e7ba      	b.n	704c <z_set_prio+0x58>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    70d6:	4d1a      	ldr	r5, [pc, #104]	; (7140 <z_set_prio+0x14c>)
    70d8:	23ba      	movs	r3, #186	; 0xba
    70da:	462a      	mov	r2, r5
    70dc:	4919      	ldr	r1, [pc, #100]	; (7144 <z_set_prio+0x150>)
    70de:	4813      	ldr	r0, [pc, #76]	; (712c <z_set_prio+0x138>)
    70e0:	f003 fcb2 	bl	aa48 <printk>
    70e4:	21ba      	movs	r1, #186	; 0xba
    70e6:	4628      	mov	r0, r5
    70e8:	f003 fe07 	bl	acfa <assert_post_action>
    70ec:	e7d3      	b.n	7096 <z_set_prio+0xa2>
	sys_dnode_t *const prev = successor->prev;
    70ee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    70f0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    70f2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    70f4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    70f6:	606c      	str	r4, [r5, #4]
}
    70f8:	e7e9      	b.n	70ce <z_set_prio+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70fa:	2500      	movs	r5, #0
    70fc:	e7d0      	b.n	70a0 <z_set_prio+0xac>
    70fe:	4d12      	ldr	r5, [pc, #72]	; (7148 <z_set_prio+0x154>)
    7100:	23ac      	movs	r3, #172	; 0xac
    7102:	462a      	mov	r2, r5
    7104:	4911      	ldr	r1, [pc, #68]	; (714c <z_set_prio+0x158>)
    7106:	4809      	ldr	r0, [pc, #36]	; (712c <z_set_prio+0x138>)
    7108:	f003 fc9e 	bl	aa48 <printk>
    710c:	4905      	ldr	r1, [pc, #20]	; (7124 <z_set_prio+0x130>)
    710e:	4810      	ldr	r0, [pc, #64]	; (7150 <z_set_prio+0x15c>)
    7110:	f003 fc9a 	bl	aa48 <printk>
    7114:	21ac      	movs	r1, #172	; 0xac
    7116:	4628      	mov	r0, r5
    7118:	f003 fdef 	bl	acfa <assert_post_action>
    711c:	e79b      	b.n	7056 <z_set_prio+0x62>
}
    711e:	4640      	mov	r0, r8
    7120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7124:	20001040 	.word	0x20001040
    7128:	0000bdd0 	.word	0x0000bdd0
    712c:	0000bc60 	.word	0x0000bc60
    7130:	0000bde8 	.word	0x0000bde8
    7134:	20001024 	.word	0x20001024
    7138:	200003b0 	.word	0x200003b0
    713c:	20001004 	.word	0x20001004
    7140:	0000cbe4 	.word	0x0000cbe4
    7144:	0000cc20 	.word	0x0000cc20
    7148:	0000bd78 	.word	0x0000bd78
    714c:	0000bda0 	.word	0x0000bda0
    7150:	0000bdb8 	.word	0x0000bdb8

00007154 <z_impl_k_thread_suspend>:
{
    7154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7156:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7158:	3018      	adds	r0, #24
    715a:	f000 fd8b 	bl	7c74 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    715e:	2500      	movs	r5, #0
	__asm__ volatile(
    7160:	f04f 0320 	mov.w	r3, #32
    7164:	f3ef 8611 	mrs	r6, BASEPRI
    7168:	f383 8812 	msr	BASEPRI_MAX, r3
    716c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7170:	482d      	ldr	r0, [pc, #180]	; (7228 <z_impl_k_thread_suspend+0xd4>)
    7172:	f7fe fd3f 	bl	5bf4 <z_spin_lock_valid>
    7176:	b118      	cbz	r0, 7180 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    7178:	482b      	ldr	r0, [pc, #172]	; (7228 <z_impl_k_thread_suspend+0xd4>)
    717a:	f7fe fd5b 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    717e:	e02b      	b.n	71d8 <z_impl_k_thread_suspend+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7180:	4f2a      	ldr	r7, [pc, #168]	; (722c <z_impl_k_thread_suspend+0xd8>)
    7182:	2381      	movs	r3, #129	; 0x81
    7184:	463a      	mov	r2, r7
    7186:	492a      	ldr	r1, [pc, #168]	; (7230 <z_impl_k_thread_suspend+0xdc>)
    7188:	482a      	ldr	r0, [pc, #168]	; (7234 <z_impl_k_thread_suspend+0xe0>)
    718a:	f003 fc5d 	bl	aa48 <printk>
    718e:	4926      	ldr	r1, [pc, #152]	; (7228 <z_impl_k_thread_suspend+0xd4>)
    7190:	4829      	ldr	r0, [pc, #164]	; (7238 <z_impl_k_thread_suspend+0xe4>)
    7192:	f003 fc59 	bl	aa48 <printk>
    7196:	2181      	movs	r1, #129	; 0x81
    7198:	4638      	mov	r0, r7
    719a:	f003 fdae 	bl	acfa <assert_post_action>
    719e:	e7eb      	b.n	7178 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    71a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    71a4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    71a6:	4621      	mov	r1, r4
    71a8:	4824      	ldr	r0, [pc, #144]	; (723c <z_impl_k_thread_suspend+0xe8>)
    71aa:	f7ff fb69 	bl	6880 <z_priq_dumb_remove>
}
    71ae:	e019      	b.n	71e4 <z_impl_k_thread_suspend+0x90>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71b0:	4d1e      	ldr	r5, [pc, #120]	; (722c <z_impl_k_thread_suspend+0xd8>)
    71b2:	23ac      	movs	r3, #172	; 0xac
    71b4:	462a      	mov	r2, r5
    71b6:	4922      	ldr	r1, [pc, #136]	; (7240 <z_impl_k_thread_suspend+0xec>)
    71b8:	481e      	ldr	r0, [pc, #120]	; (7234 <z_impl_k_thread_suspend+0xe0>)
    71ba:	f003 fc45 	bl	aa48 <printk>
    71be:	491a      	ldr	r1, [pc, #104]	; (7228 <z_impl_k_thread_suspend+0xd4>)
    71c0:	4820      	ldr	r0, [pc, #128]	; (7244 <z_impl_k_thread_suspend+0xf0>)
    71c2:	f003 fc41 	bl	aa48 <printk>
    71c6:	21ac      	movs	r1, #172	; 0xac
    71c8:	4628      	mov	r0, r5
    71ca:	f003 fd96 	bl	acfa <assert_post_action>
	__asm__ volatile(
    71ce:	f386 8811 	msr	BASEPRI, r6
    71d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    71d6:	2501      	movs	r5, #1
    71d8:	b9b5      	cbnz	r5, 7208 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    71da:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    71dc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    71e0:	2b00      	cmp	r3, #0
    71e2:	dbdd      	blt.n	71a0 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    71e4:	7b63      	ldrb	r3, [r4, #13]
    71e6:	f043 0310 	orr.w	r3, r3, #16
    71ea:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    71ec:	4b16      	ldr	r3, [pc, #88]	; (7248 <z_impl_k_thread_suspend+0xf4>)
    71ee:	6898      	ldr	r0, [r3, #8]
    71f0:	42a0      	cmp	r0, r4
    71f2:	bf14      	ite	ne
    71f4:	2000      	movne	r0, #0
    71f6:	2001      	moveq	r0, #1
    71f8:	f7ff fb66 	bl	68c8 <update_cache>
    71fc:	480a      	ldr	r0, [pc, #40]	; (7228 <z_impl_k_thread_suspend+0xd4>)
    71fe:	f7fe fd09 	bl	5c14 <z_spin_unlock_valid>
    7202:	2800      	cmp	r0, #0
    7204:	d1e3      	bne.n	71ce <z_impl_k_thread_suspend+0x7a>
    7206:	e7d3      	b.n	71b0 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    7208:	4b0f      	ldr	r3, [pc, #60]	; (7248 <z_impl_k_thread_suspend+0xf4>)
    720a:	689b      	ldr	r3, [r3, #8]
    720c:	42a3      	cmp	r3, r4
    720e:	d000      	beq.n	7212 <z_impl_k_thread_suspend+0xbe>
}
    7210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    7212:	f04f 0320 	mov.w	r3, #32
    7216:	f3ef 8011 	mrs	r0, BASEPRI
    721a:	f383 8812 	msr	BASEPRI_MAX, r3
    721e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7222:	f004 fad3 	bl	b7cc <z_reschedule_irqlock>
    7226:	e7f3      	b.n	7210 <z_impl_k_thread_suspend+0xbc>
    7228:	20001040 	.word	0x20001040
    722c:	0000bd78 	.word	0x0000bd78
    7230:	0000bdd0 	.word	0x0000bdd0
    7234:	0000bc60 	.word	0x0000bc60
    7238:	0000bde8 	.word	0x0000bde8
    723c:	20001024 	.word	0x20001024
    7240:	0000bda0 	.word	0x0000bda0
    7244:	0000bdb8 	.word	0x0000bdb8
    7248:	20001004 	.word	0x20001004

0000724c <k_sched_unlock>:
{
    724c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    724e:	2400      	movs	r4, #0
    7250:	f04f 0320 	mov.w	r3, #32
    7254:	f3ef 8511 	mrs	r5, BASEPRI
    7258:	f383 8812 	msr	BASEPRI_MAX, r3
    725c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7260:	4838      	ldr	r0, [pc, #224]	; (7344 <k_sched_unlock+0xf8>)
    7262:	f7fe fcc7 	bl	5bf4 <z_spin_lock_valid>
    7266:	b118      	cbz	r0, 7270 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    7268:	4836      	ldr	r0, [pc, #216]	; (7344 <k_sched_unlock+0xf8>)
    726a:	f7fe fce3 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    726e:	e045      	b.n	72fc <k_sched_unlock+0xb0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7270:	4e35      	ldr	r6, [pc, #212]	; (7348 <k_sched_unlock+0xfc>)
    7272:	2381      	movs	r3, #129	; 0x81
    7274:	4632      	mov	r2, r6
    7276:	4935      	ldr	r1, [pc, #212]	; (734c <k_sched_unlock+0x100>)
    7278:	4835      	ldr	r0, [pc, #212]	; (7350 <k_sched_unlock+0x104>)
    727a:	f003 fbe5 	bl	aa48 <printk>
    727e:	4931      	ldr	r1, [pc, #196]	; (7344 <k_sched_unlock+0xf8>)
    7280:	4834      	ldr	r0, [pc, #208]	; (7354 <k_sched_unlock+0x108>)
    7282:	f003 fbe1 	bl	aa48 <printk>
    7286:	2181      	movs	r1, #129	; 0x81
    7288:	4630      	mov	r0, r6
    728a:	f003 fd36 	bl	acfa <assert_post_action>
    728e:	e7eb      	b.n	7268 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    7290:	4c31      	ldr	r4, [pc, #196]	; (7358 <k_sched_unlock+0x10c>)
    7292:	f240 3385 	movw	r3, #901	; 0x385
    7296:	4622      	mov	r2, r4
    7298:	4930      	ldr	r1, [pc, #192]	; (735c <k_sched_unlock+0x110>)
    729a:	482d      	ldr	r0, [pc, #180]	; (7350 <k_sched_unlock+0x104>)
    729c:	f003 fbd4 	bl	aa48 <printk>
    72a0:	482f      	ldr	r0, [pc, #188]	; (7360 <k_sched_unlock+0x114>)
    72a2:	f003 fbd1 	bl	aa48 <printk>
    72a6:	f240 3185 	movw	r1, #901	; 0x385
    72aa:	4620      	mov	r0, r4
    72ac:	f003 fd25 	bl	acfa <assert_post_action>
    72b0:	e02a      	b.n	7308 <k_sched_unlock+0xbc>
		__ASSERT(!arch_is_in_isr(), "");
    72b2:	4c29      	ldr	r4, [pc, #164]	; (7358 <k_sched_unlock+0x10c>)
    72b4:	f240 3386 	movw	r3, #902	; 0x386
    72b8:	4622      	mov	r2, r4
    72ba:	492a      	ldr	r1, [pc, #168]	; (7364 <k_sched_unlock+0x118>)
    72bc:	4824      	ldr	r0, [pc, #144]	; (7350 <k_sched_unlock+0x104>)
    72be:	f003 fbc3 	bl	aa48 <printk>
    72c2:	4827      	ldr	r0, [pc, #156]	; (7360 <k_sched_unlock+0x114>)
    72c4:	f003 fbc0 	bl	aa48 <printk>
    72c8:	f240 3186 	movw	r1, #902	; 0x386
    72cc:	4620      	mov	r0, r4
    72ce:	f003 fd14 	bl	acfa <assert_post_action>
    72d2:	e01d      	b.n	7310 <k_sched_unlock+0xc4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72d4:	4c1c      	ldr	r4, [pc, #112]	; (7348 <k_sched_unlock+0xfc>)
    72d6:	23ac      	movs	r3, #172	; 0xac
    72d8:	4622      	mov	r2, r4
    72da:	4923      	ldr	r1, [pc, #140]	; (7368 <k_sched_unlock+0x11c>)
    72dc:	481c      	ldr	r0, [pc, #112]	; (7350 <k_sched_unlock+0x104>)
    72de:	f003 fbb3 	bl	aa48 <printk>
    72e2:	4918      	ldr	r1, [pc, #96]	; (7344 <k_sched_unlock+0xf8>)
    72e4:	4821      	ldr	r0, [pc, #132]	; (736c <k_sched_unlock+0x120>)
    72e6:	f003 fbaf 	bl	aa48 <printk>
    72ea:	21ac      	movs	r1, #172	; 0xac
    72ec:	4620      	mov	r0, r4
    72ee:	f003 fd04 	bl	acfa <assert_post_action>
	__asm__ volatile(
    72f2:	f385 8811 	msr	BASEPRI, r5
    72f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    72fa:	2401      	movs	r4, #1
    72fc:	b9b4      	cbnz	r4, 732c <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    72fe:	4b1c      	ldr	r3, [pc, #112]	; (7370 <k_sched_unlock+0x124>)
    7300:	689b      	ldr	r3, [r3, #8]
    7302:	7bdb      	ldrb	r3, [r3, #15]
    7304:	2b00      	cmp	r3, #0
    7306:	d0c3      	beq.n	7290 <k_sched_unlock+0x44>
    7308:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    730c:	2b00      	cmp	r3, #0
    730e:	d1d0      	bne.n	72b2 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    7310:	4b17      	ldr	r3, [pc, #92]	; (7370 <k_sched_unlock+0x124>)
    7312:	689a      	ldr	r2, [r3, #8]
    7314:	7bd3      	ldrb	r3, [r2, #15]
    7316:	3301      	adds	r3, #1
    7318:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    731a:	2000      	movs	r0, #0
    731c:	f7ff fad4 	bl	68c8 <update_cache>
    7320:	4808      	ldr	r0, [pc, #32]	; (7344 <k_sched_unlock+0xf8>)
    7322:	f7fe fc77 	bl	5c14 <z_spin_unlock_valid>
    7326:	2800      	cmp	r0, #0
    7328:	d1e3      	bne.n	72f2 <k_sched_unlock+0xa6>
    732a:	e7d3      	b.n	72d4 <k_sched_unlock+0x88>
	__asm__ volatile(
    732c:	f04f 0320 	mov.w	r3, #32
    7330:	f3ef 8011 	mrs	r0, BASEPRI
    7334:	f383 8812 	msr	BASEPRI_MAX, r3
    7338:	f3bf 8f6f 	isb	sy
    733c:	f004 fa46 	bl	b7cc <z_reschedule_irqlock>
}
    7340:	bd70      	pop	{r4, r5, r6, pc}
    7342:	bf00      	nop
    7344:	20001040 	.word	0x20001040
    7348:	0000bd78 	.word	0x0000bd78
    734c:	0000bdd0 	.word	0x0000bdd0
    7350:	0000bc60 	.word	0x0000bc60
    7354:	0000bde8 	.word	0x0000bde8
    7358:	0000cbe4 	.word	0x0000cbe4
    735c:	0000cc6c 	.word	0x0000cc6c
    7360:	0000cb3c 	.word	0x0000cb3c
    7364:	0000cabc 	.word	0x0000cabc
    7368:	0000bda0 	.word	0x0000bda0
    736c:	0000bdb8 	.word	0x0000bdb8
    7370:	20001004 	.word	0x20001004

00007374 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    7374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    7376:	7b43      	ldrb	r3, [r0, #13]
    7378:	f013 0f08 	tst.w	r3, #8
    737c:	d145      	bne.n	740a <end_thread+0x96>
    737e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    7380:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7384:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7388:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    738a:	f013 0f80 	tst.w	r3, #128	; 0x80
    738e:	d114      	bne.n	73ba <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    7390:	68ab      	ldr	r3, [r5, #8]
    7392:	b15b      	cbz	r3, 73ac <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7394:	4628      	mov	r0, r5
    7396:	f7ff f8ef 	bl	6578 <pended_on_thread>
    739a:	4629      	mov	r1, r5
    739c:	f7ff fa70 	bl	6880 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    73a0:	7b6b      	ldrb	r3, [r5, #13]
    73a2:	f023 0302 	bic.w	r3, r3, #2
    73a6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    73a8:	2300      	movs	r3, #0
    73aa:	60ab      	str	r3, [r5, #8]
    73ac:	f105 0018 	add.w	r0, r5, #24
    73b0:	f000 fc60 	bl	7c74 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    73b4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    73b8:	e01c      	b.n	73f4 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    73ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    73be:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    73c0:	4601      	mov	r1, r0
    73c2:	4812      	ldr	r0, [pc, #72]	; (740c <end_thread+0x98>)
    73c4:	f7ff fa5c 	bl	6880 <z_priq_dumb_remove>
}
    73c8:	e7e2      	b.n	7390 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    73ca:	4620      	mov	r0, r4
    73cc:	f7ff f8d4 	bl	6578 <pended_on_thread>
    73d0:	4621      	mov	r1, r4
    73d2:	f7ff fa55 	bl	6880 <z_priq_dumb_remove>
    73d6:	7b63      	ldrb	r3, [r4, #13]
    73d8:	f023 0302 	bic.w	r3, r3, #2
    73dc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    73de:	2600      	movs	r6, #0
    73e0:	60a6      	str	r6, [r4, #8]
    73e2:	f104 0018 	add.w	r0, r4, #24
    73e6:	f000 fc45 	bl	7c74 <z_abort_timeout>
    73ea:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    73ee:	4620      	mov	r0, r4
    73f0:	f7ff fba2 	bl	6b38 <ready_thread>
	return list->head == list;
    73f4:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    73f6:	42bc      	cmp	r4, r7
    73f8:	d001      	beq.n	73fe <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    73fa:	2c00      	cmp	r4, #0
    73fc:	d1e5      	bne.n	73ca <end_thread+0x56>
		update_cache(1);
    73fe:	2001      	movs	r0, #1
    7400:	f7ff fa62 	bl	68c8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    7404:	4628      	mov	r0, r5
    7406:	f7fe fc1d 	bl	5c44 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    740c:	20001024 	.word	0x20001024

00007410 <z_unpend_first_thread>:
{
    7410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7412:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
    7414:	2500      	movs	r5, #0
    7416:	f04f 0320 	mov.w	r3, #32
    741a:	f3ef 8611 	mrs	r6, BASEPRI
    741e:	f383 8812 	msr	BASEPRI_MAX, r3
    7422:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7426:	4825      	ldr	r0, [pc, #148]	; (74bc <z_unpend_first_thread+0xac>)
    7428:	f7fe fbe4 	bl	5bf4 <z_spin_lock_valid>
    742c:	b120      	cbz	r0, 7438 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    742e:	4823      	ldr	r0, [pc, #140]	; (74bc <z_unpend_first_thread+0xac>)
    7430:	f7fe fc00 	bl	5c34 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    7434:	2400      	movs	r4, #0
	return k;
    7436:	e027      	b.n	7488 <z_unpend_first_thread+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7438:	4c21      	ldr	r4, [pc, #132]	; (74c0 <z_unpend_first_thread+0xb0>)
    743a:	2381      	movs	r3, #129	; 0x81
    743c:	4622      	mov	r2, r4
    743e:	4921      	ldr	r1, [pc, #132]	; (74c4 <z_unpend_first_thread+0xb4>)
    7440:	4821      	ldr	r0, [pc, #132]	; (74c8 <z_unpend_first_thread+0xb8>)
    7442:	f003 fb01 	bl	aa48 <printk>
    7446:	491d      	ldr	r1, [pc, #116]	; (74bc <z_unpend_first_thread+0xac>)
    7448:	4820      	ldr	r0, [pc, #128]	; (74cc <z_unpend_first_thread+0xbc>)
    744a:	f003 fafd 	bl	aa48 <printk>
    744e:	2181      	movs	r1, #129	; 0x81
    7450:	4620      	mov	r0, r4
    7452:	f003 fc52 	bl	acfa <assert_post_action>
    7456:	e7ea      	b.n	742e <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7458:	f7ff f88e 	bl	6578 <pended_on_thread>
    745c:	4621      	mov	r1, r4
    745e:	f7ff fa0f 	bl	6880 <z_priq_dumb_remove>
    7462:	7b63      	ldrb	r3, [r4, #13]
    7464:	f023 0302 	bic.w	r3, r3, #2
    7468:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    746a:	2300      	movs	r3, #0
    746c:	60a3      	str	r3, [r4, #8]
    746e:	f104 0018 	add.w	r0, r4, #24
    7472:	f000 fbff 	bl	7c74 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7476:	4811      	ldr	r0, [pc, #68]	; (74bc <z_unpend_first_thread+0xac>)
    7478:	f7fe fbcc 	bl	5c14 <z_spin_unlock_valid>
    747c:	b160      	cbz	r0, 7498 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    747e:	f386 8811 	msr	BASEPRI, r6
    7482:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7486:	2501      	movs	r5, #1
    7488:	b9b5      	cbnz	r5, 74b8 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    748a:	4638      	mov	r0, r7
    748c:	f004 f9b3 	bl	b7f6 <z_priq_dumb_best>
		if (thread != NULL) {
    7490:	4604      	mov	r4, r0
    7492:	2800      	cmp	r0, #0
    7494:	d1e0      	bne.n	7458 <z_unpend_first_thread+0x48>
    7496:	e7ee      	b.n	7476 <z_unpend_first_thread+0x66>
    7498:	4d09      	ldr	r5, [pc, #36]	; (74c0 <z_unpend_first_thread+0xb0>)
    749a:	23ac      	movs	r3, #172	; 0xac
    749c:	462a      	mov	r2, r5
    749e:	490c      	ldr	r1, [pc, #48]	; (74d0 <z_unpend_first_thread+0xc0>)
    74a0:	4809      	ldr	r0, [pc, #36]	; (74c8 <z_unpend_first_thread+0xb8>)
    74a2:	f003 fad1 	bl	aa48 <printk>
    74a6:	4905      	ldr	r1, [pc, #20]	; (74bc <z_unpend_first_thread+0xac>)
    74a8:	480a      	ldr	r0, [pc, #40]	; (74d4 <z_unpend_first_thread+0xc4>)
    74aa:	f003 facd 	bl	aa48 <printk>
    74ae:	21ac      	movs	r1, #172	; 0xac
    74b0:	4628      	mov	r0, r5
    74b2:	f003 fc22 	bl	acfa <assert_post_action>
    74b6:	e7e2      	b.n	747e <z_unpend_first_thread+0x6e>
}
    74b8:	4620      	mov	r0, r4
    74ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74bc:	20001040 	.word	0x20001040
    74c0:	0000bd78 	.word	0x0000bd78
    74c4:	0000bdd0 	.word	0x0000bdd0
    74c8:	0000bc60 	.word	0x0000bc60
    74cc:	0000bde8 	.word	0x0000bde8
    74d0:	0000bda0 	.word	0x0000bda0
    74d4:	0000bdb8 	.word	0x0000bdb8

000074d8 <z_sched_init>:
{
    74d8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    74da:	4804      	ldr	r0, [pc, #16]	; (74ec <z_sched_init+0x14>)
    74dc:	f004 f992 	bl	b804 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    74e0:	2100      	movs	r1, #0
    74e2:	4608      	mov	r0, r1
    74e4:	f7ff f888 	bl	65f8 <k_sched_time_slice_set>
}
    74e8:	bd08      	pop	{r3, pc}
    74ea:	bf00      	nop
    74ec:	20001020 	.word	0x20001020

000074f0 <z_impl_k_yield>:
{
    74f0:	b570      	push	{r4, r5, r6, lr}
    74f2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    74f6:	2b00      	cmp	r3, #0
    74f8:	d149      	bne.n	758e <z_impl_k_yield+0x9e>
	__asm__ volatile(
    74fa:	f04f 0320 	mov.w	r3, #32
    74fe:	f3ef 8611 	mrs	r6, BASEPRI
    7502:	f383 8812 	msr	BASEPRI_MAX, r3
    7506:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    750a:	4843      	ldr	r0, [pc, #268]	; (7618 <z_impl_k_yield+0x128>)
    750c:	f7fe fb72 	bl	5bf4 <z_spin_lock_valid>
    7510:	2800      	cmp	r0, #0
    7512:	d04d      	beq.n	75b0 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    7514:	4840      	ldr	r0, [pc, #256]	; (7618 <z_impl_k_yield+0x128>)
    7516:	f7fe fb8d 	bl	5c34 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    751a:	4c40      	ldr	r4, [pc, #256]	; (761c <z_impl_k_yield+0x12c>)
    751c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    751e:	7b4b      	ldrb	r3, [r1, #13]
    7520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7524:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7526:	f104 0020 	add.w	r0, r4, #32
    752a:	f7ff f9a9 	bl	6880 <z_priq_dumb_remove>
	queue_thread(_current);
    752e:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7530:	7b6b      	ldrb	r3, [r5, #13]
    7532:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7536:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7538:	4b39      	ldr	r3, [pc, #228]	; (7620 <z_impl_k_yield+0x130>)
    753a:	429d      	cmp	r5, r3
    753c:	d048      	beq.n	75d0 <z_impl_k_yield+0xe0>
	return list->head == list;
    753e:	4b37      	ldr	r3, [pc, #220]	; (761c <z_impl_k_yield+0x12c>)
    7540:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7544:	429c      	cmp	r4, r3
    7546:	d055      	beq.n	75f4 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7548:	b16c      	cbz	r4, 7566 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    754a:	4621      	mov	r1, r4
    754c:	4628      	mov	r0, r5
    754e:	f004 f933 	bl	b7b8 <z_sched_prio_cmp>
    7552:	2800      	cmp	r0, #0
    7554:	dc48      	bgt.n	75e8 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7556:	b134      	cbz	r4, 7566 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    7558:	4b30      	ldr	r3, [pc, #192]	; (761c <z_impl_k_yield+0x12c>)
    755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    755c:	429c      	cmp	r4, r3
    755e:	d002      	beq.n	7566 <z_impl_k_yield+0x76>
    7560:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7562:	2c00      	cmp	r4, #0
    7564:	d1f0      	bne.n	7548 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    7566:	4b2d      	ldr	r3, [pc, #180]	; (761c <z_impl_k_yield+0x12c>)
    7568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    756a:	f103 0120 	add.w	r1, r3, #32
    756e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    7570:	606a      	str	r2, [r5, #4]
	tail->next = node;
    7572:	6015      	str	r5, [r2, #0]
	list->tail = node;
    7574:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    7576:	2001      	movs	r0, #1
    7578:	f7ff f9a6 	bl	68c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    757c:	4826      	ldr	r0, [pc, #152]	; (7618 <z_impl_k_yield+0x128>)
    757e:	f7fe fb49 	bl	5c14 <z_spin_unlock_valid>
    7582:	2800      	cmp	r0, #0
    7584:	d038      	beq.n	75f8 <z_impl_k_yield+0x108>
    7586:	4630      	mov	r0, r6
    7588:	f7fa fb72 	bl	1c70 <arch_swap>
}
    758c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    758e:	4c25      	ldr	r4, [pc, #148]	; (7624 <z_impl_k_yield+0x134>)
    7590:	f240 43dc 	movw	r3, #1244	; 0x4dc
    7594:	4622      	mov	r2, r4
    7596:	4924      	ldr	r1, [pc, #144]	; (7628 <z_impl_k_yield+0x138>)
    7598:	4824      	ldr	r0, [pc, #144]	; (762c <z_impl_k_yield+0x13c>)
    759a:	f003 fa55 	bl	aa48 <printk>
    759e:	4824      	ldr	r0, [pc, #144]	; (7630 <z_impl_k_yield+0x140>)
    75a0:	f003 fa52 	bl	aa48 <printk>
    75a4:	f240 41dc 	movw	r1, #1244	; 0x4dc
    75a8:	4620      	mov	r0, r4
    75aa:	f003 fba6 	bl	acfa <assert_post_action>
    75ae:	e7a4      	b.n	74fa <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75b0:	4c20      	ldr	r4, [pc, #128]	; (7634 <z_impl_k_yield+0x144>)
    75b2:	2381      	movs	r3, #129	; 0x81
    75b4:	4622      	mov	r2, r4
    75b6:	4920      	ldr	r1, [pc, #128]	; (7638 <z_impl_k_yield+0x148>)
    75b8:	481c      	ldr	r0, [pc, #112]	; (762c <z_impl_k_yield+0x13c>)
    75ba:	f003 fa45 	bl	aa48 <printk>
    75be:	4916      	ldr	r1, [pc, #88]	; (7618 <z_impl_k_yield+0x128>)
    75c0:	481e      	ldr	r0, [pc, #120]	; (763c <z_impl_k_yield+0x14c>)
    75c2:	f003 fa41 	bl	aa48 <printk>
    75c6:	2181      	movs	r1, #129	; 0x81
    75c8:	4620      	mov	r0, r4
    75ca:	f003 fb96 	bl	acfa <assert_post_action>
    75ce:	e7a1      	b.n	7514 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    75d0:	4c14      	ldr	r4, [pc, #80]	; (7624 <z_impl_k_yield+0x134>)
    75d2:	23ba      	movs	r3, #186	; 0xba
    75d4:	4622      	mov	r2, r4
    75d6:	491a      	ldr	r1, [pc, #104]	; (7640 <z_impl_k_yield+0x150>)
    75d8:	4814      	ldr	r0, [pc, #80]	; (762c <z_impl_k_yield+0x13c>)
    75da:	f003 fa35 	bl	aa48 <printk>
    75de:	21ba      	movs	r1, #186	; 0xba
    75e0:	4620      	mov	r0, r4
    75e2:	f003 fb8a 	bl	acfa <assert_post_action>
    75e6:	e7aa      	b.n	753e <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    75e8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    75ea:	606b      	str	r3, [r5, #4]
	node->next = successor;
    75ec:	602c      	str	r4, [r5, #0]
	prev->next = node;
    75ee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    75f0:	6065      	str	r5, [r4, #4]
}
    75f2:	e7c0      	b.n	7576 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    75f4:	2400      	movs	r4, #0
    75f6:	e7a7      	b.n	7548 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75f8:	4c0e      	ldr	r4, [pc, #56]	; (7634 <z_impl_k_yield+0x144>)
    75fa:	23c3      	movs	r3, #195	; 0xc3
    75fc:	4622      	mov	r2, r4
    75fe:	4911      	ldr	r1, [pc, #68]	; (7644 <z_impl_k_yield+0x154>)
    7600:	480a      	ldr	r0, [pc, #40]	; (762c <z_impl_k_yield+0x13c>)
    7602:	f003 fa21 	bl	aa48 <printk>
    7606:	4904      	ldr	r1, [pc, #16]	; (7618 <z_impl_k_yield+0x128>)
    7608:	480f      	ldr	r0, [pc, #60]	; (7648 <z_impl_k_yield+0x158>)
    760a:	f003 fa1d 	bl	aa48 <printk>
    760e:	21c3      	movs	r1, #195	; 0xc3
    7610:	4620      	mov	r0, r4
    7612:	f003 fb72 	bl	acfa <assert_post_action>
    7616:	e7b6      	b.n	7586 <z_impl_k_yield+0x96>
    7618:	20001040 	.word	0x20001040
    761c:	20001004 	.word	0x20001004
    7620:	200003b0 	.word	0x200003b0
    7624:	0000cbe4 	.word	0x0000cbe4
    7628:	0000cabc 	.word	0x0000cabc
    762c:	0000bc60 	.word	0x0000bc60
    7630:	0000cb3c 	.word	0x0000cb3c
    7634:	0000bd78 	.word	0x0000bd78
    7638:	0000bdd0 	.word	0x0000bdd0
    763c:	0000bde8 	.word	0x0000bde8
    7640:	0000cc20 	.word	0x0000cc20
    7644:	0000bda0 	.word	0x0000bda0
    7648:	0000bdb8 	.word	0x0000bdb8

0000764c <z_tick_sleep>:
{
    764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7650:	4604      	mov	r4, r0
    7652:	460d      	mov	r5, r1
    7654:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7658:	2b00      	cmp	r3, #0
    765a:	d14f      	bne.n	76fc <z_tick_sleep+0xb0>
	if (ticks == 0) {
    765c:	ea54 0305 	orrs.w	r3, r4, r5
    7660:	d05e      	beq.n	7720 <z_tick_sleep+0xd4>
	if (Z_TICK_ABS(ticks) <= 0) {
    7662:	f06f 0301 	mvn.w	r3, #1
    7666:	1b1e      	subs	r6, r3, r4
    7668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    766c:	eb63 0705 	sbc.w	r7, r3, r5
    7670:	2e01      	cmp	r6, #1
    7672:	f177 0300 	sbcs.w	r3, r7, #0
    7676:	db57      	blt.n	7728 <z_tick_sleep+0xdc>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7678:	f06f 0601 	mvn.w	r6, #1
    767c:	1b36      	subs	r6, r6, r4
    767e:	f04f 0320 	mov.w	r3, #32
    7682:	f3ef 8911 	mrs	r9, BASEPRI
    7686:	f383 8812 	msr	BASEPRI_MAX, r3
    768a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    768e:	4842      	ldr	r0, [pc, #264]	; (7798 <z_tick_sleep+0x14c>)
    7690:	f7fe fab0 	bl	5bf4 <z_spin_lock_valid>
    7694:	2800      	cmp	r0, #0
    7696:	d04b      	beq.n	7730 <z_tick_sleep+0xe4>
	z_spin_lock_set_owner(l);
    7698:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7798 <z_tick_sleep+0x14c>
    769c:	4640      	mov	r0, r8
    769e:	f7fe fac9 	bl	5c34 <z_spin_lock_set_owner>
	pending_current = _current;
    76a2:	4f3e      	ldr	r7, [pc, #248]	; (779c <z_tick_sleep+0x150>)
    76a4:	68b8      	ldr	r0, [r7, #8]
    76a6:	4b3e      	ldr	r3, [pc, #248]	; (77a0 <z_tick_sleep+0x154>)
    76a8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    76aa:	f7ff fbb9 	bl	6e20 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    76ae:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    76b0:	4622      	mov	r2, r4
    76b2:	462b      	mov	r3, r5
    76b4:	493b      	ldr	r1, [pc, #236]	; (77a4 <z_tick_sleep+0x158>)
    76b6:	3018      	adds	r0, #24
    76b8:	f000 f9e0 	bl	7a7c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    76bc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    76be:	7b53      	ldrb	r3, [r2, #13]
    76c0:	f043 0310 	orr.w	r3, r3, #16
    76c4:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76c6:	4640      	mov	r0, r8
    76c8:	f7fe faa4 	bl	5c14 <z_spin_unlock_valid>
    76cc:	2800      	cmp	r0, #0
    76ce:	d03f      	beq.n	7750 <z_tick_sleep+0x104>
    76d0:	4648      	mov	r0, r9
    76d2:	f7fa facd 	bl	1c70 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    76d6:	4b31      	ldr	r3, [pc, #196]	; (779c <z_tick_sleep+0x150>)
    76d8:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    76da:	7b5b      	ldrb	r3, [r3, #13]
    76dc:	f013 0f10 	tst.w	r3, #16
    76e0:	d146      	bne.n	7770 <z_tick_sleep+0x124>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    76e2:	2500      	movs	r5, #0
    76e4:	f004 f8a9 	bl	b83a <sys_clock_tick_get_32>
    76e8:	1a34      	subs	r4, r6, r0
    76ea:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    76ee:	2c01      	cmp	r4, #1
    76f0:	f175 0300 	sbcs.w	r3, r5, #0
    76f4:	da4d      	bge.n	7792 <z_tick_sleep+0x146>
	return 0;
    76f6:	2000      	movs	r0, #0
}
    76f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    76fc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 77c8 <z_tick_sleep+0x17c>
    7700:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    7704:	4642      	mov	r2, r8
    7706:	4928      	ldr	r1, [pc, #160]	; (77a8 <z_tick_sleep+0x15c>)
    7708:	4828      	ldr	r0, [pc, #160]	; (77ac <z_tick_sleep+0x160>)
    770a:	f003 f99d 	bl	aa48 <printk>
    770e:	4828      	ldr	r0, [pc, #160]	; (77b0 <z_tick_sleep+0x164>)
    7710:	f003 f99a 	bl	aa48 <printk>
    7714:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    7718:	4640      	mov	r0, r8
    771a:	f003 faee 	bl	acfa <assert_post_action>
    771e:	e79d      	b.n	765c <z_tick_sleep+0x10>
	z_impl_k_yield();
    7720:	f7ff fee6 	bl	74f0 <z_impl_k_yield>
		return 0;
    7724:	2000      	movs	r0, #0
    7726:	e7e7      	b.n	76f8 <z_tick_sleep+0xac>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7728:	f004 f887 	bl	b83a <sys_clock_tick_get_32>
    772c:	1906      	adds	r6, r0, r4
    772e:	e7a6      	b.n	767e <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7730:	4f20      	ldr	r7, [pc, #128]	; (77b4 <z_tick_sleep+0x168>)
    7732:	2381      	movs	r3, #129	; 0x81
    7734:	463a      	mov	r2, r7
    7736:	4920      	ldr	r1, [pc, #128]	; (77b8 <z_tick_sleep+0x16c>)
    7738:	481c      	ldr	r0, [pc, #112]	; (77ac <z_tick_sleep+0x160>)
    773a:	f003 f985 	bl	aa48 <printk>
    773e:	4916      	ldr	r1, [pc, #88]	; (7798 <z_tick_sleep+0x14c>)
    7740:	481e      	ldr	r0, [pc, #120]	; (77bc <z_tick_sleep+0x170>)
    7742:	f003 f981 	bl	aa48 <printk>
    7746:	2181      	movs	r1, #129	; 0x81
    7748:	4638      	mov	r0, r7
    774a:	f003 fad6 	bl	acfa <assert_post_action>
    774e:	e7a3      	b.n	7698 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7750:	4c18      	ldr	r4, [pc, #96]	; (77b4 <z_tick_sleep+0x168>)
    7752:	23c3      	movs	r3, #195	; 0xc3
    7754:	4622      	mov	r2, r4
    7756:	491a      	ldr	r1, [pc, #104]	; (77c0 <z_tick_sleep+0x174>)
    7758:	4814      	ldr	r0, [pc, #80]	; (77ac <z_tick_sleep+0x160>)
    775a:	f003 f975 	bl	aa48 <printk>
    775e:	4641      	mov	r1, r8
    7760:	4818      	ldr	r0, [pc, #96]	; (77c4 <z_tick_sleep+0x178>)
    7762:	f003 f971 	bl	aa48 <printk>
    7766:	21c3      	movs	r1, #195	; 0xc3
    7768:	4620      	mov	r0, r4
    776a:	f003 fac6 	bl	acfa <assert_post_action>
    776e:	e7af      	b.n	76d0 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7770:	4c15      	ldr	r4, [pc, #84]	; (77c8 <z_tick_sleep+0x17c>)
    7772:	f240 5319 	movw	r3, #1305	; 0x519
    7776:	4622      	mov	r2, r4
    7778:	4914      	ldr	r1, [pc, #80]	; (77cc <z_tick_sleep+0x180>)
    777a:	480c      	ldr	r0, [pc, #48]	; (77ac <z_tick_sleep+0x160>)
    777c:	f003 f964 	bl	aa48 <printk>
    7780:	480b      	ldr	r0, [pc, #44]	; (77b0 <z_tick_sleep+0x164>)
    7782:	f003 f961 	bl	aa48 <printk>
    7786:	f240 5119 	movw	r1, #1305	; 0x519
    778a:	4620      	mov	r0, r4
    778c:	f003 fab5 	bl	acfa <assert_post_action>
    7790:	e7a7      	b.n	76e2 <z_tick_sleep+0x96>
		return ticks;
    7792:	4620      	mov	r0, r4
    7794:	e7b0      	b.n	76f8 <z_tick_sleep+0xac>
    7796:	bf00      	nop
    7798:	20001040 	.word	0x20001040
    779c:	20001004 	.word	0x20001004
    77a0:	2000103c 	.word	0x2000103c
    77a4:	00006d41 	.word	0x00006d41
    77a8:	0000cabc 	.word	0x0000cabc
    77ac:	0000bc60 	.word	0x0000bc60
    77b0:	0000cb3c 	.word	0x0000cb3c
    77b4:	0000bd78 	.word	0x0000bd78
    77b8:	0000bdd0 	.word	0x0000bdd0
    77bc:	0000bde8 	.word	0x0000bde8
    77c0:	0000bda0 	.word	0x0000bda0
    77c4:	0000bdb8 	.word	0x0000bdb8
    77c8:	0000cbe4 	.word	0x0000cbe4
    77cc:	0000cca0 	.word	0x0000cca0

000077d0 <z_impl_k_sleep>:
{
    77d0:	b570      	push	{r4, r5, r6, lr}
    77d2:	4604      	mov	r4, r0
    77d4:	460d      	mov	r5, r1
    77d6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    77da:	bb13      	cbnz	r3, 7822 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    77dc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    77e0:	bf08      	it	eq
    77e2:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    77e6:	d02d      	beq.n	7844 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    77e8:	4620      	mov	r0, r4
    77ea:	4629      	mov	r1, r5
    77ec:	f7ff ff2e 	bl	764c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    77f0:	4604      	mov	r4, r0
    77f2:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    77f4:	0169      	lsls	r1, r5, #5
    77f6:	0143      	lsls	r3, r0, #5
    77f8:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    77fc:	1a18      	subs	r0, r3, r0
    77fe:	eb62 0305 	sbc.w	r3, r2, r5
    7802:	009a      	lsls	r2, r3, #2
    7804:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    7808:	0081      	lsls	r1, r0, #2
    780a:	4613      	mov	r3, r2
    780c:	1908      	adds	r0, r1, r4
    780e:	eb45 0303 	adc.w	r3, r5, r3
    7812:	00da      	lsls	r2, r3, #3
    7814:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    7818:	00c1      	lsls	r1, r0, #3
    781a:	0bc8      	lsrs	r0, r1, #15
    781c:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    7820:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    7822:	4e0c      	ldr	r6, [pc, #48]	; (7854 <z_impl_k_sleep+0x84>)
    7824:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    7828:	4632      	mov	r2, r6
    782a:	490b      	ldr	r1, [pc, #44]	; (7858 <z_impl_k_sleep+0x88>)
    782c:	480b      	ldr	r0, [pc, #44]	; (785c <z_impl_k_sleep+0x8c>)
    782e:	f003 f90b 	bl	aa48 <printk>
    7832:	480b      	ldr	r0, [pc, #44]	; (7860 <z_impl_k_sleep+0x90>)
    7834:	f003 f908 	bl	aa48 <printk>
    7838:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    783c:	4630      	mov	r0, r6
    783e:	f003 fa5c 	bl	acfa <assert_post_action>
    7842:	e7cb      	b.n	77dc <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    7844:	4b07      	ldr	r3, [pc, #28]	; (7864 <z_impl_k_sleep+0x94>)
    7846:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7848:	f7ff fc84 	bl	7154 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    784c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7850:	e7e6      	b.n	7820 <z_impl_k_sleep+0x50>
    7852:	bf00      	nop
    7854:	0000cbe4 	.word	0x0000cbe4
    7858:	0000cabc 	.word	0x0000cabc
    785c:	0000bc60 	.word	0x0000bc60
    7860:	0000cb3c 	.word	0x0000cb3c
    7864:	20001004 	.word	0x20001004

00007868 <z_impl_z_current_get>:
}
    7868:	4b01      	ldr	r3, [pc, #4]	; (7870 <z_impl_z_current_get+0x8>)
    786a:	6898      	ldr	r0, [r3, #8]
    786c:	4770      	bx	lr
    786e:	bf00      	nop
    7870:	20001004 	.word	0x20001004

00007874 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    7874:	b570      	push	{r4, r5, r6, lr}
    7876:	4604      	mov	r4, r0
    7878:	f04f 0320 	mov.w	r3, #32
    787c:	f3ef 8511 	mrs	r5, BASEPRI
    7880:	f383 8812 	msr	BASEPRI_MAX, r3
    7884:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7888:	4840      	ldr	r0, [pc, #256]	; (798c <z_thread_abort+0x118>)
    788a:	f7fe f9b3 	bl	5bf4 <z_spin_lock_valid>
    788e:	b1b8      	cbz	r0, 78c0 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    7890:	483e      	ldr	r0, [pc, #248]	; (798c <z_thread_abort+0x118>)
    7892:	f7fe f9cf 	bl	5c34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7896:	7b63      	ldrb	r3, [r4, #13]
    7898:	f013 0f08 	tst.w	r3, #8
    789c:	d120      	bne.n	78e0 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    789e:	4620      	mov	r0, r4
    78a0:	f7ff fd68 	bl	7374 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    78a4:	4b3a      	ldr	r3, [pc, #232]	; (7990 <z_thread_abort+0x11c>)
    78a6:	689b      	ldr	r3, [r3, #8]
    78a8:	42a3      	cmp	r3, r4
    78aa:	d032      	beq.n	7912 <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78ac:	4837      	ldr	r0, [pc, #220]	; (798c <z_thread_abort+0x118>)
    78ae:	f7fe f9b1 	bl	5c14 <z_spin_unlock_valid>
    78b2:	2800      	cmp	r0, #0
    78b4:	d059      	beq.n	796a <z_thread_abort+0xf6>
	__asm__ volatile(
    78b6:	f385 8811 	msr	BASEPRI, r5
    78ba:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    78be:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78c0:	4e34      	ldr	r6, [pc, #208]	; (7994 <z_thread_abort+0x120>)
    78c2:	2381      	movs	r3, #129	; 0x81
    78c4:	4632      	mov	r2, r6
    78c6:	4934      	ldr	r1, [pc, #208]	; (7998 <z_thread_abort+0x124>)
    78c8:	4834      	ldr	r0, [pc, #208]	; (799c <z_thread_abort+0x128>)
    78ca:	f003 f8bd 	bl	aa48 <printk>
    78ce:	492f      	ldr	r1, [pc, #188]	; (798c <z_thread_abort+0x118>)
    78d0:	4833      	ldr	r0, [pc, #204]	; (79a0 <z_thread_abort+0x12c>)
    78d2:	f003 f8b9 	bl	aa48 <printk>
    78d6:	2181      	movs	r1, #129	; 0x81
    78d8:	4630      	mov	r0, r6
    78da:	f003 fa0e 	bl	acfa <assert_post_action>
    78de:	e7d7      	b.n	7890 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78e0:	482a      	ldr	r0, [pc, #168]	; (798c <z_thread_abort+0x118>)
    78e2:	f7fe f997 	bl	5c14 <z_spin_unlock_valid>
    78e6:	b120      	cbz	r0, 78f2 <z_thread_abort+0x7e>
    78e8:	f385 8811 	msr	BASEPRI, r5
    78ec:	f3bf 8f6f 	isb	sy
		return;
    78f0:	e7e5      	b.n	78be <z_thread_abort+0x4a>
    78f2:	4c28      	ldr	r4, [pc, #160]	; (7994 <z_thread_abort+0x120>)
    78f4:	23ac      	movs	r3, #172	; 0xac
    78f6:	4622      	mov	r2, r4
    78f8:	492a      	ldr	r1, [pc, #168]	; (79a4 <z_thread_abort+0x130>)
    78fa:	4828      	ldr	r0, [pc, #160]	; (799c <z_thread_abort+0x128>)
    78fc:	f003 f8a4 	bl	aa48 <printk>
    7900:	4922      	ldr	r1, [pc, #136]	; (798c <z_thread_abort+0x118>)
    7902:	4829      	ldr	r0, [pc, #164]	; (79a8 <z_thread_abort+0x134>)
    7904:	f003 f8a0 	bl	aa48 <printk>
    7908:	21ac      	movs	r1, #172	; 0xac
    790a:	4620      	mov	r0, r4
    790c:	f003 f9f5 	bl	acfa <assert_post_action>
    7910:	e7ea      	b.n	78e8 <z_thread_abort+0x74>
    7912:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    7916:	2b00      	cmp	r3, #0
    7918:	d1c8      	bne.n	78ac <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    791a:	481c      	ldr	r0, [pc, #112]	; (798c <z_thread_abort+0x118>)
    791c:	f7fe f97a 	bl	5c14 <z_spin_unlock_valid>
    7920:	b198      	cbz	r0, 794a <z_thread_abort+0xd6>
    7922:	4628      	mov	r0, r5
    7924:	f7fa f9a4 	bl	1c70 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    7928:	4c20      	ldr	r4, [pc, #128]	; (79ac <z_thread_abort+0x138>)
    792a:	f240 634b 	movw	r3, #1611	; 0x64b
    792e:	4622      	mov	r2, r4
    7930:	491f      	ldr	r1, [pc, #124]	; (79b0 <z_thread_abort+0x13c>)
    7932:	481a      	ldr	r0, [pc, #104]	; (799c <z_thread_abort+0x128>)
    7934:	f003 f888 	bl	aa48 <printk>
    7938:	481e      	ldr	r0, [pc, #120]	; (79b4 <z_thread_abort+0x140>)
    793a:	f003 f885 	bl	aa48 <printk>
    793e:	f240 614b 	movw	r1, #1611	; 0x64b
    7942:	4620      	mov	r0, r4
    7944:	f003 f9d9 	bl	acfa <assert_post_action>
    7948:	e7b0      	b.n	78ac <z_thread_abort+0x38>
    794a:	4c12      	ldr	r4, [pc, #72]	; (7994 <z_thread_abort+0x120>)
    794c:	23c3      	movs	r3, #195	; 0xc3
    794e:	4622      	mov	r2, r4
    7950:	4914      	ldr	r1, [pc, #80]	; (79a4 <z_thread_abort+0x130>)
    7952:	4812      	ldr	r0, [pc, #72]	; (799c <z_thread_abort+0x128>)
    7954:	f003 f878 	bl	aa48 <printk>
    7958:	490c      	ldr	r1, [pc, #48]	; (798c <z_thread_abort+0x118>)
    795a:	4813      	ldr	r0, [pc, #76]	; (79a8 <z_thread_abort+0x134>)
    795c:	f003 f874 	bl	aa48 <printk>
    7960:	21c3      	movs	r1, #195	; 0xc3
    7962:	4620      	mov	r0, r4
    7964:	f003 f9c9 	bl	acfa <assert_post_action>
    7968:	e7db      	b.n	7922 <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    796a:	4c0a      	ldr	r4, [pc, #40]	; (7994 <z_thread_abort+0x120>)
    796c:	23ac      	movs	r3, #172	; 0xac
    796e:	4622      	mov	r2, r4
    7970:	490c      	ldr	r1, [pc, #48]	; (79a4 <z_thread_abort+0x130>)
    7972:	480a      	ldr	r0, [pc, #40]	; (799c <z_thread_abort+0x128>)
    7974:	f003 f868 	bl	aa48 <printk>
    7978:	4904      	ldr	r1, [pc, #16]	; (798c <z_thread_abort+0x118>)
    797a:	480b      	ldr	r0, [pc, #44]	; (79a8 <z_thread_abort+0x134>)
    797c:	f003 f864 	bl	aa48 <printk>
    7980:	21ac      	movs	r1, #172	; 0xac
    7982:	4620      	mov	r0, r4
    7984:	f003 f9b9 	bl	acfa <assert_post_action>
    7988:	e795      	b.n	78b6 <z_thread_abort+0x42>
    798a:	bf00      	nop
    798c:	20001040 	.word	0x20001040
    7990:	20001004 	.word	0x20001004
    7994:	0000bd78 	.word	0x0000bd78
    7998:	0000bdd0 	.word	0x0000bdd0
    799c:	0000bc60 	.word	0x0000bc60
    79a0:	0000bde8 	.word	0x0000bde8
    79a4:	0000bda0 	.word	0x0000bda0
    79a8:	0000bdb8 	.word	0x0000bdb8
    79ac:	0000cbe4 	.word	0x0000cbe4
    79b0:	0000bc5c 	.word	0x0000bc5c
    79b4:	0000cce0 	.word	0x0000cce0

000079b8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    79b8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    79ba:	4806      	ldr	r0, [pc, #24]	; (79d4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    79bc:	4a06      	ldr	r2, [pc, #24]	; (79d8 <z_data_copy+0x20>)
    79be:	1a12      	subs	r2, r2, r0
    79c0:	4906      	ldr	r1, [pc, #24]	; (79dc <z_data_copy+0x24>)
    79c2:	f003 faa1 	bl	af08 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    79c6:	4a06      	ldr	r2, [pc, #24]	; (79e0 <z_data_copy+0x28>)
    79c8:	4906      	ldr	r1, [pc, #24]	; (79e4 <z_data_copy+0x2c>)
    79ca:	4807      	ldr	r0, [pc, #28]	; (79e8 <z_data_copy+0x30>)
    79cc:	f003 fa9c 	bl	af08 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    79d0:	bd08      	pop	{r3, pc}
    79d2:	bf00      	nop
    79d4:	20000000 	.word	0x20000000
    79d8:	2000022c 	.word	0x2000022c
    79dc:	0000cf08 	.word	0x0000cf08
    79e0:	00000000 	.word	0x00000000
    79e4:	0000cf08 	.word	0x0000cf08
    79e8:	20000000 	.word	0x20000000

000079ec <first>:
	return list->head == list;
    79ec:	4b03      	ldr	r3, [pc, #12]	; (79fc <first+0x10>)
    79ee:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79f0:	4298      	cmp	r0, r3
    79f2:	d000      	beq.n	79f6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    79f4:	4770      	bx	lr
    79f6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    79f8:	e7fc      	b.n	79f4 <first+0x8>
    79fa:	bf00      	nop
    79fc:	200000d8 	.word	0x200000d8

00007a00 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7a00:	b130      	cbz	r0, 7a10 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    7a02:	4a04      	ldr	r2, [pc, #16]	; (7a14 <next+0x14>)
    7a04:	6852      	ldr	r2, [r2, #4]
    7a06:	4290      	cmp	r0, r2
    7a08:	d001      	beq.n	7a0e <next+0xe>
    7a0a:	6800      	ldr	r0, [r0, #0]
    7a0c:	4770      	bx	lr
    7a0e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    7a10:	4770      	bx	lr
    7a12:	bf00      	nop
    7a14:	200000d8 	.word	0x200000d8

00007a18 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    7a18:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7a1a:	4b04      	ldr	r3, [pc, #16]	; (7a2c <elapsed+0x14>)
    7a1c:	681b      	ldr	r3, [r3, #0]
    7a1e:	b10b      	cbz	r3, 7a24 <elapsed+0xc>
    7a20:	2000      	movs	r0, #0
}
    7a22:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7a24:	f7fc faa4 	bl	3f70 <sys_clock_elapsed>
    7a28:	e7fb      	b.n	7a22 <elapsed+0xa>
    7a2a:	bf00      	nop
    7a2c:	2000104c 	.word	0x2000104c

00007a30 <next_timeout>:

static int32_t next_timeout(void)
{
    7a30:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    7a32:	f7ff ffdb 	bl	79ec <first>
    7a36:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    7a38:	f7ff ffee 	bl	7a18 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    7a3c:	b18c      	cbz	r4, 7a62 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7a3e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    7a42:	1a12      	subs	r2, r2, r0
    7a44:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    7a48:	2a01      	cmp	r2, #1
    7a4a:	f173 0100 	sbcs.w	r1, r3, #0
    7a4e:	db11      	blt.n	7a74 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7a50:	4610      	mov	r0, r2
    7a52:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7a56:	f173 0300 	sbcs.w	r3, r3, #0
    7a5a:	db04      	blt.n	7a66 <next_timeout+0x36>
    7a5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7a60:	e001      	b.n	7a66 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    7a62:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7a66:	4b04      	ldr	r3, [pc, #16]	; (7a78 <next_timeout+0x48>)
    7a68:	691b      	ldr	r3, [r3, #16]
    7a6a:	b113      	cbz	r3, 7a72 <next_timeout+0x42>
    7a6c:	4283      	cmp	r3, r0
    7a6e:	da00      	bge.n	7a72 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    7a70:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    7a72:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    7a74:	2000      	movs	r0, #0
    7a76:	e7f6      	b.n	7a66 <next_timeout+0x36>
    7a78:	20001004 	.word	0x20001004

00007a7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a80:	b087      	sub	sp, #28
    7a82:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7a88:	bf08      	it	eq
    7a8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7a8e:	f000 80d3 	beq.w	7c38 <z_add_timeout+0x1bc>
    7a92:	4604      	mov	r4, r0
    7a94:	4616      	mov	r6, r2
    7a96:	461f      	mov	r7, r3
	return node->next != NULL;
    7a98:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7a9a:	b16b      	cbz	r3, 7ab8 <z_add_timeout+0x3c>
    7a9c:	4d68      	ldr	r5, [pc, #416]	; (7c40 <z_add_timeout+0x1c4>)
    7a9e:	235d      	movs	r3, #93	; 0x5d
    7aa0:	462a      	mov	r2, r5
    7aa2:	4968      	ldr	r1, [pc, #416]	; (7c44 <z_add_timeout+0x1c8>)
    7aa4:	4868      	ldr	r0, [pc, #416]	; (7c48 <z_add_timeout+0x1cc>)
    7aa6:	f002 ffcf 	bl	aa48 <printk>
    7aaa:	4868      	ldr	r0, [pc, #416]	; (7c4c <z_add_timeout+0x1d0>)
    7aac:	f002 ffcc 	bl	aa48 <printk>
    7ab0:	215d      	movs	r1, #93	; 0x5d
    7ab2:	4628      	mov	r0, r5
    7ab4:	f003 f921 	bl	acfa <assert_post_action>
	to->fn = fn;
    7ab8:	9b00      	ldr	r3, [sp, #0]
    7aba:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
    7abc:	2500      	movs	r5, #0
	__asm__ volatile(
    7abe:	f04f 0320 	mov.w	r3, #32
    7ac2:	f3ef 8211 	mrs	r2, BASEPRI
    7ac6:	f383 8812 	msr	BASEPRI_MAX, r3
    7aca:	f3bf 8f6f 	isb	sy
    7ace:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ad0:	485f      	ldr	r0, [pc, #380]	; (7c50 <z_add_timeout+0x1d4>)
    7ad2:	f7fe f88f 	bl	5bf4 <z_spin_lock_valid>
    7ad6:	b140      	cbz	r0, 7aea <z_add_timeout+0x6e>
	z_spin_lock_set_owner(l);
    7ad8:	485d      	ldr	r0, [pc, #372]	; (7c50 <z_add_timeout+0x1d4>)
    7ada:	f7fe f8ab 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    7ade:	9b00      	ldr	r3, [sp, #0]
    7ae0:	9303      	str	r3, [sp, #12]
    7ae2:	e9cd ab00 	strd	sl, fp, [sp]
    7ae6:	46a3      	mov	fp, r4
    7ae8:	e040      	b.n	7b6c <z_add_timeout+0xf0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7aea:	2381      	movs	r3, #129	; 0x81
    7aec:	4a59      	ldr	r2, [pc, #356]	; (7c54 <z_add_timeout+0x1d8>)
    7aee:	495a      	ldr	r1, [pc, #360]	; (7c58 <z_add_timeout+0x1dc>)
    7af0:	4855      	ldr	r0, [pc, #340]	; (7c48 <z_add_timeout+0x1cc>)
    7af2:	f002 ffa9 	bl	aa48 <printk>
    7af6:	4956      	ldr	r1, [pc, #344]	; (7c50 <z_add_timeout+0x1d4>)
    7af8:	4858      	ldr	r0, [pc, #352]	; (7c5c <z_add_timeout+0x1e0>)
    7afa:	f002 ffa5 	bl	aa48 <printk>
    7afe:	2181      	movs	r1, #129	; 0x81
    7b00:	4854      	ldr	r0, [pc, #336]	; (7c54 <z_add_timeout+0x1d8>)
    7b02:	f003 f8fa 	bl	acfa <assert_post_action>
    7b06:	e7e7      	b.n	7ad8 <z_add_timeout+0x5c>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    7b08:	2201      	movs	r2, #1
    7b0a:	2300      	movs	r3, #0
    7b0c:	e052      	b.n	7bb4 <z_add_timeout+0x138>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7b0e:	f7ff ff83 	bl	7a18 <elapsed>
    7b12:	1833      	adds	r3, r6, r0
    7b14:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
    7b18:	1c5a      	adds	r2, r3, #1
    7b1a:	f144 0300 	adc.w	r3, r4, #0
    7b1e:	f8cb 2010 	str.w	r2, [fp, #16]
    7b22:	f8cb 3014 	str.w	r3, [fp, #20]
    7b26:	e049      	b.n	7bbc <z_add_timeout+0x140>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    7b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
    7b2c:	1aa2      	subs	r2, r4, r2
    7b2e:	9b05      	ldr	r3, [sp, #20]
    7b30:	eb65 0303 	sbc.w	r3, r5, r3
    7b34:	6102      	str	r2, [r0, #16]
    7b36:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    7b38:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    7b3a:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
    7b3e:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
    7b42:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
    7b46:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    7b4a:	2800      	cmp	r0, #0
    7b4c:	d04c      	beq.n	7be8 <z_add_timeout+0x16c>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7b4e:	f7ff ff4d 	bl	79ec <first>
    7b52:	4583      	cmp	fp, r0
    7b54:	d053      	beq.n	7bfe <z_add_timeout+0x182>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b56:	483e      	ldr	r0, [pc, #248]	; (7c50 <z_add_timeout+0x1d4>)
    7b58:	f7fe f85c 	bl	5c14 <z_spin_unlock_valid>
    7b5c:	2800      	cmp	r0, #0
    7b5e:	d05b      	beq.n	7c18 <z_add_timeout+0x19c>
	__asm__ volatile(
    7b60:	9b03      	ldr	r3, [sp, #12]
    7b62:	f383 8811 	msr	BASEPRI, r3
    7b66:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7b6a:	2501      	movs	r5, #1
    7b6c:	2d00      	cmp	r5, #0
    7b6e:	d163      	bne.n	7c38 <z_add_timeout+0x1bc>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7b70:	f06f 0301 	mvn.w	r3, #1
    7b74:	ebb3 0806 	subs.w	r8, r3, r6
    7b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7b7c:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7b80:	f1b8 0f00 	cmp.w	r8, #0
    7b84:	f179 0300 	sbcs.w	r3, r9, #0
    7b88:	dbc1      	blt.n	7b0e <z_add_timeout+0x92>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7b8a:	4a35      	ldr	r2, [pc, #212]	; (7c60 <z_add_timeout+0x1e4>)
    7b8c:	6813      	ldr	r3, [r2, #0]
    7b8e:	6852      	ldr	r2, [r2, #4]
    7b90:	18f3      	adds	r3, r6, r3
    7b92:	eb47 0202 	adc.w	r2, r7, r2
    7b96:	f06f 0101 	mvn.w	r1, #1
    7b9a:	1acb      	subs	r3, r1, r3
    7b9c:	9300      	str	r3, [sp, #0]
    7b9e:	eb60 0302 	sbc.w	r3, r0, r2
    7ba2:	9301      	str	r3, [sp, #4]
			to->dticks = MAX(1, ticks);
    7ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
    7ba8:	4602      	mov	r2, r0
    7baa:	460b      	mov	r3, r1
    7bac:	2801      	cmp	r0, #1
    7bae:	f171 0100 	sbcs.w	r1, r1, #0
    7bb2:	dba9      	blt.n	7b08 <z_add_timeout+0x8c>
    7bb4:	f8cb 2010 	str.w	r2, [fp, #16]
    7bb8:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    7bbc:	f7ff ff16 	bl	79ec <first>
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d0c2      	beq.n	7b4a <z_add_timeout+0xce>
			if (t->dticks > to->dticks) {
    7bc4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7bc8:	e9db 2304 	ldrd	r2, r3, [fp, #16]
    7bcc:	42a2      	cmp	r2, r4
    7bce:	eb73 0105 	sbcs.w	r1, r3, r5
    7bd2:	dba9      	blt.n	7b28 <z_add_timeout+0xac>
			to->dticks -= t->dticks;
    7bd4:	1b11      	subs	r1, r2, r4
    7bd6:	eb63 0305 	sbc.w	r3, r3, r5
    7bda:	f8cb 1010 	str.w	r1, [fp, #16]
    7bde:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    7be2:	f7ff ff0d 	bl	7a00 <next>
    7be6:	e7eb      	b.n	7bc0 <z_add_timeout+0x144>
	sys_dnode_t *const tail = list->tail;
    7be8:	4b1e      	ldr	r3, [pc, #120]	; (7c64 <z_add_timeout+0x1e8>)
    7bea:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    7bec:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
    7bf0:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
    7bf4:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
    7bf8:	f8c3 b004 	str.w	fp, [r3, #4]
}
    7bfc:	e7a7      	b.n	7b4e <z_add_timeout+0xd2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7bfe:	f7ff ff17 	bl	7a30 <next_timeout>

			if (next_time == 0 ||
    7c02:	4603      	mov	r3, r0
    7c04:	b118      	cbz	r0, 7c0e <z_add_timeout+0x192>
			    _current_cpu->slice_ticks != next_time) {
    7c06:	4a18      	ldr	r2, [pc, #96]	; (7c68 <z_add_timeout+0x1ec>)
    7c08:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    7c0a:	4282      	cmp	r2, r0
    7c0c:	d0a3      	beq.n	7b56 <z_add_timeout+0xda>
				sys_clock_set_timeout(next_time, false);
    7c0e:	2100      	movs	r1, #0
    7c10:	4618      	mov	r0, r3
    7c12:	f7fc f979 	bl	3f08 <sys_clock_set_timeout>
    7c16:	e79e      	b.n	7b56 <z_add_timeout+0xda>
    7c18:	4c0e      	ldr	r4, [pc, #56]	; (7c54 <z_add_timeout+0x1d8>)
    7c1a:	23ac      	movs	r3, #172	; 0xac
    7c1c:	4622      	mov	r2, r4
    7c1e:	4913      	ldr	r1, [pc, #76]	; (7c6c <z_add_timeout+0x1f0>)
    7c20:	4809      	ldr	r0, [pc, #36]	; (7c48 <z_add_timeout+0x1cc>)
    7c22:	f002 ff11 	bl	aa48 <printk>
    7c26:	490a      	ldr	r1, [pc, #40]	; (7c50 <z_add_timeout+0x1d4>)
    7c28:	4811      	ldr	r0, [pc, #68]	; (7c70 <z_add_timeout+0x1f4>)
    7c2a:	f002 ff0d 	bl	aa48 <printk>
    7c2e:	21ac      	movs	r1, #172	; 0xac
    7c30:	4620      	mov	r0, r4
    7c32:	f003 f862 	bl	acfa <assert_post_action>
    7c36:	e793      	b.n	7b60 <z_add_timeout+0xe4>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7c38:	b007      	add	sp, #28
    7c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c3e:	bf00      	nop
    7c40:	0000cd04 	.word	0x0000cd04
    7c44:	0000cd28 	.word	0x0000cd28
    7c48:	0000bc60 	.word	0x0000bc60
    7c4c:	0000cb3c 	.word	0x0000cb3c
    7c50:	20001050 	.word	0x20001050
    7c54:	0000bd78 	.word	0x0000bd78
    7c58:	0000bdd0 	.word	0x0000bdd0
    7c5c:	0000bde8 	.word	0x0000bde8
    7c60:	20000510 	.word	0x20000510
    7c64:	200000d8 	.word	0x200000d8
    7c68:	20001004 	.word	0x20001004
    7c6c:	0000bda0 	.word	0x0000bda0
    7c70:	0000bdb8 	.word	0x0000bdb8

00007c74 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c78:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    7c7a:	2400      	movs	r4, #0
	__asm__ volatile(
    7c7c:	f04f 0320 	mov.w	r3, #32
    7c80:	f3ef 8711 	mrs	r7, BASEPRI
    7c84:	f383 8812 	msr	BASEPRI_MAX, r3
    7c88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c8c:	481f      	ldr	r0, [pc, #124]	; (7d0c <z_abort_timeout+0x98>)
    7c8e:	f7fd ffb1 	bl	5bf4 <z_spin_lock_valid>
    7c92:	b128      	cbz	r0, 7ca0 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    7c94:	481d      	ldr	r0, [pc, #116]	; (7d0c <z_abort_timeout+0x98>)
    7c96:	f7fd ffcd 	bl	5c34 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    7c9a:	f06f 0815 	mvn.w	r8, #21
	return k;
    7c9e:	e01c      	b.n	7cda <z_abort_timeout+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ca0:	4e1b      	ldr	r6, [pc, #108]	; (7d10 <z_abort_timeout+0x9c>)
    7ca2:	2381      	movs	r3, #129	; 0x81
    7ca4:	4632      	mov	r2, r6
    7ca6:	491b      	ldr	r1, [pc, #108]	; (7d14 <z_abort_timeout+0xa0>)
    7ca8:	481b      	ldr	r0, [pc, #108]	; (7d18 <z_abort_timeout+0xa4>)
    7caa:	f002 fecd 	bl	aa48 <printk>
    7cae:	4917      	ldr	r1, [pc, #92]	; (7d0c <z_abort_timeout+0x98>)
    7cb0:	481a      	ldr	r0, [pc, #104]	; (7d1c <z_abort_timeout+0xa8>)
    7cb2:	f002 fec9 	bl	aa48 <printk>
    7cb6:	2181      	movs	r1, #129	; 0x81
    7cb8:	4630      	mov	r0, r6
    7cba:	f003 f81e 	bl	acfa <assert_post_action>
    7cbe:	e7e9      	b.n	7c94 <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
    7cc0:	4628      	mov	r0, r5
    7cc2:	f003 fda3 	bl	b80c <remove_timeout>
			ret = 0;
    7cc6:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cc8:	4810      	ldr	r0, [pc, #64]	; (7d0c <z_abort_timeout+0x98>)
    7cca:	f7fd ffa3 	bl	5c14 <z_spin_unlock_valid>
    7cce:	b150      	cbz	r0, 7ce6 <z_abort_timeout+0x72>
	__asm__ volatile(
    7cd0:	f387 8811 	msr	BASEPRI, r7
    7cd4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7cd8:	2401      	movs	r4, #1
    7cda:	4626      	mov	r6, r4
    7cdc:	b99c      	cbnz	r4, 7d06 <z_abort_timeout+0x92>
	return node->next != NULL;
    7cde:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d1ed      	bne.n	7cc0 <z_abort_timeout+0x4c>
    7ce4:	e7f0      	b.n	7cc8 <z_abort_timeout+0x54>
    7ce6:	4c0a      	ldr	r4, [pc, #40]	; (7d10 <z_abort_timeout+0x9c>)
    7ce8:	23ac      	movs	r3, #172	; 0xac
    7cea:	4622      	mov	r2, r4
    7cec:	490c      	ldr	r1, [pc, #48]	; (7d20 <z_abort_timeout+0xac>)
    7cee:	480a      	ldr	r0, [pc, #40]	; (7d18 <z_abort_timeout+0xa4>)
    7cf0:	f002 feaa 	bl	aa48 <printk>
    7cf4:	4905      	ldr	r1, [pc, #20]	; (7d0c <z_abort_timeout+0x98>)
    7cf6:	480b      	ldr	r0, [pc, #44]	; (7d24 <z_abort_timeout+0xb0>)
    7cf8:	f002 fea6 	bl	aa48 <printk>
    7cfc:	21ac      	movs	r1, #172	; 0xac
    7cfe:	4620      	mov	r0, r4
    7d00:	f002 fffb 	bl	acfa <assert_post_action>
    7d04:	e7e4      	b.n	7cd0 <z_abort_timeout+0x5c>
		}
	}

	return ret;
}
    7d06:	4640      	mov	r0, r8
    7d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d0c:	20001050 	.word	0x20001050
    7d10:	0000bd78 	.word	0x0000bd78
    7d14:	0000bdd0 	.word	0x0000bdd0
    7d18:	0000bc60 	.word	0x0000bc60
    7d1c:	0000bde8 	.word	0x0000bde8
    7d20:	0000bda0 	.word	0x0000bda0
    7d24:	0000bdb8 	.word	0x0000bdb8

00007d28 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7d28:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    7d2a:	2500      	movs	r5, #0
	__asm__ volatile(
    7d2c:	f04f 0320 	mov.w	r3, #32
    7d30:	f3ef 8611 	mrs	r6, BASEPRI
    7d34:	f383 8812 	msr	BASEPRI_MAX, r3
    7d38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d3c:	481c      	ldr	r0, [pc, #112]	; (7db0 <z_get_next_timeout_expiry+0x88>)
    7d3e:	f7fd ff59 	bl	5bf4 <z_spin_lock_valid>
    7d42:	b128      	cbz	r0, 7d50 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    7d44:	481a      	ldr	r0, [pc, #104]	; (7db0 <z_get_next_timeout_expiry+0x88>)
    7d46:	f7fd ff75 	bl	5c34 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    7d4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    7d4e:	e023      	b.n	7d98 <z_get_next_timeout_expiry+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d50:	4c18      	ldr	r4, [pc, #96]	; (7db4 <z_get_next_timeout_expiry+0x8c>)
    7d52:	2381      	movs	r3, #129	; 0x81
    7d54:	4622      	mov	r2, r4
    7d56:	4918      	ldr	r1, [pc, #96]	; (7db8 <z_get_next_timeout_expiry+0x90>)
    7d58:	4818      	ldr	r0, [pc, #96]	; (7dbc <z_get_next_timeout_expiry+0x94>)
    7d5a:	f002 fe75 	bl	aa48 <printk>
    7d5e:	4914      	ldr	r1, [pc, #80]	; (7db0 <z_get_next_timeout_expiry+0x88>)
    7d60:	4817      	ldr	r0, [pc, #92]	; (7dc0 <z_get_next_timeout_expiry+0x98>)
    7d62:	f002 fe71 	bl	aa48 <printk>
    7d66:	2181      	movs	r1, #129	; 0x81
    7d68:	4620      	mov	r0, r4
    7d6a:	f002 ffc6 	bl	acfa <assert_post_action>
    7d6e:	e7e9      	b.n	7d44 <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d70:	4d10      	ldr	r5, [pc, #64]	; (7db4 <z_get_next_timeout_expiry+0x8c>)
    7d72:	23ac      	movs	r3, #172	; 0xac
    7d74:	462a      	mov	r2, r5
    7d76:	4913      	ldr	r1, [pc, #76]	; (7dc4 <z_get_next_timeout_expiry+0x9c>)
    7d78:	4810      	ldr	r0, [pc, #64]	; (7dbc <z_get_next_timeout_expiry+0x94>)
    7d7a:	f002 fe65 	bl	aa48 <printk>
    7d7e:	490c      	ldr	r1, [pc, #48]	; (7db0 <z_get_next_timeout_expiry+0x88>)
    7d80:	4811      	ldr	r0, [pc, #68]	; (7dc8 <z_get_next_timeout_expiry+0xa0>)
    7d82:	f002 fe61 	bl	aa48 <printk>
    7d86:	21ac      	movs	r1, #172	; 0xac
    7d88:	4628      	mov	r0, r5
    7d8a:	f002 ffb6 	bl	acfa <assert_post_action>
	__asm__ volatile(
    7d8e:	f386 8811 	msr	BASEPRI, r6
    7d92:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7d96:	2501      	movs	r5, #1
    7d98:	b945      	cbnz	r5, 7dac <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    7d9a:	f7ff fe49 	bl	7a30 <next_timeout>
    7d9e:	4604      	mov	r4, r0
    7da0:	4803      	ldr	r0, [pc, #12]	; (7db0 <z_get_next_timeout_expiry+0x88>)
    7da2:	f7fd ff37 	bl	5c14 <z_spin_unlock_valid>
    7da6:	2800      	cmp	r0, #0
    7da8:	d1f1      	bne.n	7d8e <z_get_next_timeout_expiry+0x66>
    7daa:	e7e1      	b.n	7d70 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    7dac:	4620      	mov	r0, r4
    7dae:	bd70      	pop	{r4, r5, r6, pc}
    7db0:	20001050 	.word	0x20001050
    7db4:	0000bd78 	.word	0x0000bd78
    7db8:	0000bdd0 	.word	0x0000bdd0
    7dbc:	0000bc60 	.word	0x0000bc60
    7dc0:	0000bde8 	.word	0x0000bde8
    7dc4:	0000bda0 	.word	0x0000bda0
    7dc8:	0000bdb8 	.word	0x0000bdb8

00007dcc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dd0:	4607      	mov	r7, r0
    7dd2:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    7dd4:	2500      	movs	r5, #0
	__asm__ volatile(
    7dd6:	f04f 0320 	mov.w	r3, #32
    7dda:	f3ef 8611 	mrs	r6, BASEPRI
    7dde:	f383 8812 	msr	BASEPRI_MAX, r3
    7de2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7de6:	4825      	ldr	r0, [pc, #148]	; (7e7c <z_set_timeout_expiry+0xb0>)
    7de8:	f7fd ff04 	bl	5bf4 <z_spin_lock_valid>
    7dec:	b118      	cbz	r0, 7df6 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    7dee:	4823      	ldr	r0, [pc, #140]	; (7e7c <z_set_timeout_expiry+0xb0>)
    7df0:	f7fd ff20 	bl	5c34 <z_spin_lock_set_owner>
	return k;
    7df4:	e01e      	b.n	7e34 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7df6:	4c22      	ldr	r4, [pc, #136]	; (7e80 <z_set_timeout_expiry+0xb4>)
    7df8:	2381      	movs	r3, #129	; 0x81
    7dfa:	4622      	mov	r2, r4
    7dfc:	4921      	ldr	r1, [pc, #132]	; (7e84 <z_set_timeout_expiry+0xb8>)
    7dfe:	4822      	ldr	r0, [pc, #136]	; (7e88 <z_set_timeout_expiry+0xbc>)
    7e00:	f002 fe22 	bl	aa48 <printk>
    7e04:	491d      	ldr	r1, [pc, #116]	; (7e7c <z_set_timeout_expiry+0xb0>)
    7e06:	4821      	ldr	r0, [pc, #132]	; (7e8c <z_set_timeout_expiry+0xc0>)
    7e08:	f002 fe1e 	bl	aa48 <printk>
    7e0c:	2181      	movs	r1, #129	; 0x81
    7e0e:	4620      	mov	r0, r4
    7e10:	f002 ff73 	bl	acfa <assert_post_action>
    7e14:	e7eb      	b.n	7dee <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    7e16:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    7e18:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7e1c:	2801      	cmp	r0, #1
    7e1e:	dd00      	ble.n	7e22 <z_set_timeout_expiry+0x56>
    7e20:	b99c      	cbnz	r4, 7e4a <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e22:	4816      	ldr	r0, [pc, #88]	; (7e7c <z_set_timeout_expiry+0xb0>)
    7e24:	f7fd fef6 	bl	5c14 <z_spin_unlock_valid>
    7e28:	b1b0      	cbz	r0, 7e58 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    7e2a:	f386 8811 	msr	BASEPRI, r6
    7e2e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7e32:	2501      	movs	r5, #1
    7e34:	462c      	mov	r4, r5
    7e36:	b9fd      	cbnz	r5, 7e78 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    7e38:	f7ff fdfa 	bl	7a30 <next_timeout>
			      || (ticks <= next_to);
    7e3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    7e40:	d0e9      	beq.n	7e16 <z_set_timeout_expiry+0x4a>
    7e42:	42b8      	cmp	r0, r7
    7e44:	dbe8      	blt.n	7e18 <z_set_timeout_expiry+0x4c>
    7e46:	2401      	movs	r4, #1
    7e48:	e7e6      	b.n	7e18 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7e4a:	4641      	mov	r1, r8
    7e4c:	42b8      	cmp	r0, r7
    7e4e:	bfa8      	it	ge
    7e50:	4638      	movge	r0, r7
    7e52:	f7fc f859 	bl	3f08 <sys_clock_set_timeout>
    7e56:	e7e4      	b.n	7e22 <z_set_timeout_expiry+0x56>
    7e58:	4c09      	ldr	r4, [pc, #36]	; (7e80 <z_set_timeout_expiry+0xb4>)
    7e5a:	23ac      	movs	r3, #172	; 0xac
    7e5c:	4622      	mov	r2, r4
    7e5e:	490c      	ldr	r1, [pc, #48]	; (7e90 <z_set_timeout_expiry+0xc4>)
    7e60:	4809      	ldr	r0, [pc, #36]	; (7e88 <z_set_timeout_expiry+0xbc>)
    7e62:	f002 fdf1 	bl	aa48 <printk>
    7e66:	4905      	ldr	r1, [pc, #20]	; (7e7c <z_set_timeout_expiry+0xb0>)
    7e68:	480a      	ldr	r0, [pc, #40]	; (7e94 <z_set_timeout_expiry+0xc8>)
    7e6a:	f002 fded 	bl	aa48 <printk>
    7e6e:	21ac      	movs	r1, #172	; 0xac
    7e70:	4620      	mov	r0, r4
    7e72:	f002 ff42 	bl	acfa <assert_post_action>
    7e76:	e7d8      	b.n	7e2a <z_set_timeout_expiry+0x5e>
		}
	}
}
    7e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e7c:	20001050 	.word	0x20001050
    7e80:	0000bd78 	.word	0x0000bd78
    7e84:	0000bdd0 	.word	0x0000bdd0
    7e88:	0000bc60 	.word	0x0000bc60
    7e8c:	0000bde8 	.word	0x0000bde8
    7e90:	0000bda0 	.word	0x0000bda0
    7e94:	0000bdb8 	.word	0x0000bdb8

00007e98 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e9a:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7e9c:	f7fe fdb0 	bl	6a00 <z_time_slice>
	__asm__ volatile(
    7ea0:	f04f 0320 	mov.w	r3, #32
    7ea4:	f3ef 8411 	mrs	r4, BASEPRI
    7ea8:	f383 8812 	msr	BASEPRI_MAX, r3
    7eac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7eb0:	4854      	ldr	r0, [pc, #336]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7eb2:	f7fd fe9f 	bl	5bf4 <z_spin_lock_valid>
    7eb6:	b128      	cbz	r0, 7ec4 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    7eb8:	4852      	ldr	r0, [pc, #328]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7eba:	f7fd febb 	bl	5c34 <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7ebe:	4b52      	ldr	r3, [pc, #328]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7ec0:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7ec2:	e031      	b.n	7f28 <sys_clock_announce+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ec4:	4e51      	ldr	r6, [pc, #324]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7ec6:	2381      	movs	r3, #129	; 0x81
    7ec8:	4632      	mov	r2, r6
    7eca:	4951      	ldr	r1, [pc, #324]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7ecc:	4851      	ldr	r0, [pc, #324]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7ece:	f002 fdbb 	bl	aa48 <printk>
    7ed2:	494c      	ldr	r1, [pc, #304]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7ed4:	4850      	ldr	r0, [pc, #320]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7ed6:	f002 fdb7 	bl	aa48 <printk>
    7eda:	2181      	movs	r1, #129	; 0x81
    7edc:	4630      	mov	r0, r6
    7ede:	f002 ff0c 	bl	acfa <assert_post_action>
    7ee2:	e7e9      	b.n	7eb8 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ee4:	4e49      	ldr	r6, [pc, #292]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7ee6:	23ac      	movs	r3, #172	; 0xac
    7ee8:	4632      	mov	r2, r6
    7eea:	494c      	ldr	r1, [pc, #304]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7eec:	4849      	ldr	r0, [pc, #292]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7eee:	f002 fdab 	bl	aa48 <printk>
    7ef2:	4944      	ldr	r1, [pc, #272]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7ef4:	484a      	ldr	r0, [pc, #296]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7ef6:	f002 fda7 	bl	aa48 <printk>
    7efa:	21ac      	movs	r1, #172	; 0xac
    7efc:	4630      	mov	r0, r6
    7efe:	f002 fefc 	bl	acfa <assert_post_action>
    7f02:	e035      	b.n	7f70 <sys_clock_announce+0xd8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f04:	4d41      	ldr	r5, [pc, #260]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f06:	2381      	movs	r3, #129	; 0x81
    7f08:	462a      	mov	r2, r5
    7f0a:	4941      	ldr	r1, [pc, #260]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f0c:	4841      	ldr	r0, [pc, #260]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7f0e:	f002 fd9b 	bl	aa48 <printk>
    7f12:	493c      	ldr	r1, [pc, #240]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f14:	4840      	ldr	r0, [pc, #256]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7f16:	f002 fd97 	bl	aa48 <printk>
    7f1a:	2181      	movs	r1, #129	; 0x81
    7f1c:	4628      	mov	r0, r5
    7f1e:	f002 feec 	bl	acfa <assert_post_action>
	z_spin_lock_set_owner(l);
    7f22:	4838      	ldr	r0, [pc, #224]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f24:	f7fd fe86 	bl	5c34 <z_spin_lock_set_owner>
    7f28:	f7ff fd60 	bl	79ec <first>
    7f2c:	4605      	mov	r5, r0
    7f2e:	2800      	cmp	r0, #0
    7f30:	d033      	beq.n	7f9a <sys_clock_announce+0x102>
    7f32:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    7f36:	4b34      	ldr	r3, [pc, #208]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f38:	6819      	ldr	r1, [r3, #0]
    7f3a:	17cb      	asrs	r3, r1, #31
    7f3c:	42b1      	cmp	r1, r6
    7f3e:	41bb      	sbcs	r3, r7
    7f40:	db2b      	blt.n	7f9a <sys_clock_announce+0x102>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    7f42:	4838      	ldr	r0, [pc, #224]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7f44:	e9d0 2300 	ldrd	r2, r3, [r0]
    7f48:	1992      	adds	r2, r2, r6
    7f4a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
    7f4e:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
    7f52:	1b89      	subs	r1, r1, r6
    7f54:	4b2c      	ldr	r3, [pc, #176]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f56:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
    7f58:	2200      	movs	r2, #0
    7f5a:	2300      	movs	r3, #0
    7f5c:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
    7f60:	4628      	mov	r0, r5
    7f62:	f003 fc53 	bl	b80c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f66:	4827      	ldr	r0, [pc, #156]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f68:	f7fd fe54 	bl	5c14 <z_spin_unlock_valid>
    7f6c:	2800      	cmp	r0, #0
    7f6e:	d0b9      	beq.n	7ee4 <sys_clock_announce+0x4c>
	__asm__ volatile(
    7f70:	f384 8811 	msr	BASEPRI, r4
    7f74:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    7f78:	68ab      	ldr	r3, [r5, #8]
    7f7a:	4628      	mov	r0, r5
    7f7c:	4798      	blx	r3
	__asm__ volatile(
    7f7e:	f04f 0320 	mov.w	r3, #32
    7f82:	f3ef 8411 	mrs	r4, BASEPRI
    7f86:	f383 8812 	msr	BASEPRI_MAX, r3
    7f8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f8e:	481d      	ldr	r0, [pc, #116]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f90:	f7fd fe30 	bl	5bf4 <z_spin_lock_valid>
    7f94:	2800      	cmp	r0, #0
    7f96:	d1c4      	bne.n	7f22 <sys_clock_announce+0x8a>
    7f98:	e7b4      	b.n	7f04 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    7f9a:	b145      	cbz	r5, 7fae <sys_clock_announce+0x116>
		first()->dticks -= announce_remaining;
    7f9c:	4b1a      	ldr	r3, [pc, #104]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f9e:	6819      	ldr	r1, [r3, #0]
    7fa0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    7fa4:	1a52      	subs	r2, r2, r1
    7fa6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    7faa:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
    7fae:	481d      	ldr	r0, [pc, #116]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fb0:	4915      	ldr	r1, [pc, #84]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7fb2:	680d      	ldr	r5, [r1, #0]
    7fb4:	e9d0 2300 	ldrd	r2, r3, [r0]
    7fb8:	1952      	adds	r2, r2, r5
    7fba:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    7fbe:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    7fc2:	2500      	movs	r5, #0
    7fc4:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7fc6:	f7ff fd33 	bl	7a30 <next_timeout>
    7fca:	4629      	mov	r1, r5
    7fcc:	f7fb ff9c 	bl	3f08 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fd0:	480c      	ldr	r0, [pc, #48]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7fd2:	f7fd fe1f 	bl	5c14 <z_spin_unlock_valid>
    7fd6:	b120      	cbz	r0, 7fe2 <sys_clock_announce+0x14a>
	__asm__ volatile(
    7fd8:	f384 8811 	msr	BASEPRI, r4
    7fdc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7fe2:	4d0a      	ldr	r5, [pc, #40]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fe4:	23ac      	movs	r3, #172	; 0xac
    7fe6:	462a      	mov	r2, r5
    7fe8:	490c      	ldr	r1, [pc, #48]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7fea:	480a      	ldr	r0, [pc, #40]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fec:	f002 fd2c 	bl	aa48 <printk>
    7ff0:	4904      	ldr	r1, [pc, #16]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7ff2:	480b      	ldr	r0, [pc, #44]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7ff4:	f002 fd28 	bl	aa48 <printk>
    7ff8:	21ac      	movs	r1, #172	; 0xac
    7ffa:	4628      	mov	r0, r5
    7ffc:	f002 fe7d 	bl	acfa <assert_post_action>
    8000:	e7ea      	b.n	7fd8 <sys_clock_announce+0x140>
    8002:	bf00      	nop
    8004:	20001050 	.word	0x20001050
    8008:	2000104c 	.word	0x2000104c
    800c:	0000bd78 	.word	0x0000bd78
    8010:	0000bdd0 	.word	0x0000bdd0
    8014:	0000bc60 	.word	0x0000bc60
    8018:	0000bde8 	.word	0x0000bde8
    801c:	0000bda0 	.word	0x0000bda0
    8020:	0000bdb8 	.word	0x0000bdb8
    8024:	20000510 	.word	0x20000510

00008028 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    802a:	2400      	movs	r4, #0
	__asm__ volatile(
    802c:	f04f 0320 	mov.w	r3, #32
    8030:	f3ef 8511 	mrs	r5, BASEPRI
    8034:	f383 8812 	msr	BASEPRI_MAX, r3
    8038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    803c:	481f      	ldr	r0, [pc, #124]	; (80bc <sys_clock_tick_get+0x94>)
    803e:	f7fd fdd9 	bl	5bf4 <z_spin_lock_valid>
    8042:	b128      	cbz	r0, 8050 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    8044:	481d      	ldr	r0, [pc, #116]	; (80bc <sys_clock_tick_get+0x94>)
    8046:	f7fd fdf5 	bl	5c34 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    804a:	2600      	movs	r6, #0
    804c:	2700      	movs	r7, #0
	return k;
    804e:	e023      	b.n	8098 <sys_clock_tick_get+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8050:	4e1b      	ldr	r6, [pc, #108]	; (80c0 <sys_clock_tick_get+0x98>)
    8052:	2381      	movs	r3, #129	; 0x81
    8054:	4632      	mov	r2, r6
    8056:	491b      	ldr	r1, [pc, #108]	; (80c4 <sys_clock_tick_get+0x9c>)
    8058:	481b      	ldr	r0, [pc, #108]	; (80c8 <sys_clock_tick_get+0xa0>)
    805a:	f002 fcf5 	bl	aa48 <printk>
    805e:	4917      	ldr	r1, [pc, #92]	; (80bc <sys_clock_tick_get+0x94>)
    8060:	481a      	ldr	r0, [pc, #104]	; (80cc <sys_clock_tick_get+0xa4>)
    8062:	f002 fcf1 	bl	aa48 <printk>
    8066:	2181      	movs	r1, #129	; 0x81
    8068:	4630      	mov	r0, r6
    806a:	f002 fe46 	bl	acfa <assert_post_action>
    806e:	e7e9      	b.n	8044 <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8070:	4c13      	ldr	r4, [pc, #76]	; (80c0 <sys_clock_tick_get+0x98>)
    8072:	23ac      	movs	r3, #172	; 0xac
    8074:	4622      	mov	r2, r4
    8076:	4916      	ldr	r1, [pc, #88]	; (80d0 <sys_clock_tick_get+0xa8>)
    8078:	4813      	ldr	r0, [pc, #76]	; (80c8 <sys_clock_tick_get+0xa0>)
    807a:	f002 fce5 	bl	aa48 <printk>
    807e:	490f      	ldr	r1, [pc, #60]	; (80bc <sys_clock_tick_get+0x94>)
    8080:	4814      	ldr	r0, [pc, #80]	; (80d4 <sys_clock_tick_get+0xac>)
    8082:	f002 fce1 	bl	aa48 <printk>
    8086:	21ac      	movs	r1, #172	; 0xac
    8088:	4620      	mov	r0, r4
    808a:	f002 fe36 	bl	acfa <assert_post_action>
	__asm__ volatile(
    808e:	f385 8811 	msr	BASEPRI, r5
    8092:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8096:	2401      	movs	r4, #1
    8098:	b96c      	cbnz	r4, 80b6 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    809a:	f7fb ff69 	bl	3f70 <sys_clock_elapsed>
    809e:	4b0e      	ldr	r3, [pc, #56]	; (80d8 <sys_clock_tick_get+0xb0>)
    80a0:	e9d3 6700 	ldrd	r6, r7, [r3]
    80a4:	1836      	adds	r6, r6, r0
    80a6:	f147 0700 	adc.w	r7, r7, #0
    80aa:	4804      	ldr	r0, [pc, #16]	; (80bc <sys_clock_tick_get+0x94>)
    80ac:	f7fd fdb2 	bl	5c14 <z_spin_unlock_valid>
    80b0:	2800      	cmp	r0, #0
    80b2:	d1ec      	bne.n	808e <sys_clock_tick_get+0x66>
    80b4:	e7dc      	b.n	8070 <sys_clock_tick_get+0x48>
	}
	return t;
}
    80b6:	4630      	mov	r0, r6
    80b8:	4639      	mov	r1, r7
    80ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80bc:	20001050 	.word	0x20001050
    80c0:	0000bd78 	.word	0x0000bd78
    80c4:	0000bdd0 	.word	0x0000bdd0
    80c8:	0000bc60 	.word	0x0000bc60
    80cc:	0000bde8 	.word	0x0000bde8
    80d0:	0000bda0 	.word	0x0000bda0
    80d4:	0000bdb8 	.word	0x0000bdb8
    80d8:	20000510 	.word	0x20000510

000080dc <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    80dc:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    80de:	4a03      	ldr	r2, [pc, #12]	; (80ec <boot_banner+0x10>)
    80e0:	4903      	ldr	r1, [pc, #12]	; (80f0 <boot_banner+0x14>)
    80e2:	4804      	ldr	r0, [pc, #16]	; (80f4 <boot_banner+0x18>)
    80e4:	f002 fcb0 	bl	aa48 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    80e8:	bd08      	pop	{r3, pc}
    80ea:	bf00      	nop
    80ec:	0000c13c 	.word	0x0000c13c
    80f0:	0000cd48 	.word	0x0000cd48
    80f4:	0000cd58 	.word	0x0000cd58

000080f8 <nrf_cc3xx_platform_init>:
    80f8:	b510      	push	{r4, lr}
    80fa:	4c0c      	ldr	r4, [pc, #48]	; (812c <nrf_cc3xx_platform_init+0x34>)
    80fc:	6823      	ldr	r3, [r4, #0]
    80fe:	b113      	cbz	r3, 8106 <nrf_cc3xx_platform_init+0xe>
    8100:	4b0b      	ldr	r3, [pc, #44]	; (8130 <nrf_cc3xx_platform_init+0x38>)
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	b92b      	cbnz	r3, 8112 <nrf_cc3xx_platform_init+0x1a>
    8106:	f000 fe73 	bl	8df0 <CC_LibInit>
    810a:	b930      	cbnz	r0, 811a <nrf_cc3xx_platform_init+0x22>
    810c:	4b08      	ldr	r3, [pc, #32]	; (8130 <nrf_cc3xx_platform_init+0x38>)
    810e:	2201      	movs	r2, #1
    8110:	601a      	str	r2, [r3, #0]
    8112:	2301      	movs	r3, #1
    8114:	6023      	str	r3, [r4, #0]
    8116:	2000      	movs	r0, #0
    8118:	bd10      	pop	{r4, pc}
    811a:	3801      	subs	r0, #1
    811c:	2806      	cmp	r0, #6
    811e:	d901      	bls.n	8124 <nrf_cc3xx_platform_init+0x2c>
    8120:	4804      	ldr	r0, [pc, #16]	; (8134 <nrf_cc3xx_platform_init+0x3c>)
    8122:	bd10      	pop	{r4, pc}
    8124:	4b04      	ldr	r3, [pc, #16]	; (8138 <nrf_cc3xx_platform_init+0x40>)
    8126:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    812a:	bd10      	pop	{r4, pc}
    812c:	20001054 	.word	0x20001054
    8130:	20001058 	.word	0x20001058
    8134:	ffff8ffe 	.word	0xffff8ffe
    8138:	0000cd80 	.word	0x0000cd80

0000813c <nrf_cc3xx_platform_abort>:
    813c:	f3bf 8f4f 	dsb	sy
    8140:	4905      	ldr	r1, [pc, #20]	; (8158 <nrf_cc3xx_platform_abort+0x1c>)
    8142:	4b06      	ldr	r3, [pc, #24]	; (815c <nrf_cc3xx_platform_abort+0x20>)
    8144:	68ca      	ldr	r2, [r1, #12]
    8146:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    814a:	4313      	orrs	r3, r2
    814c:	60cb      	str	r3, [r1, #12]
    814e:	f3bf 8f4f 	dsb	sy
    8152:	bf00      	nop
    8154:	e7fd      	b.n	8152 <nrf_cc3xx_platform_abort+0x16>
    8156:	bf00      	nop
    8158:	e000ed00 	.word	0xe000ed00
    815c:	05fa0004 	.word	0x05fa0004

00008160 <CC_PalAbort>:
    8160:	b4f0      	push	{r4, r5, r6, r7}
    8162:	4f09      	ldr	r7, [pc, #36]	; (8188 <CC_PalAbort+0x28>)
    8164:	4e09      	ldr	r6, [pc, #36]	; (818c <CC_PalAbort+0x2c>)
    8166:	4c0a      	ldr	r4, [pc, #40]	; (8190 <CC_PalAbort+0x30>)
    8168:	4a0a      	ldr	r2, [pc, #40]	; (8194 <CC_PalAbort+0x34>)
    816a:	4d0b      	ldr	r5, [pc, #44]	; (8198 <CC_PalAbort+0x38>)
    816c:	490b      	ldr	r1, [pc, #44]	; (819c <CC_PalAbort+0x3c>)
    816e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    8172:	603b      	str	r3, [r7, #0]
    8174:	6852      	ldr	r2, [r2, #4]
    8176:	6033      	str	r3, [r6, #0]
    8178:	6023      	str	r3, [r4, #0]
    817a:	2400      	movs	r4, #0
    817c:	602b      	str	r3, [r5, #0]
    817e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    8182:	bcf0      	pop	{r4, r5, r6, r7}
    8184:	4710      	bx	r2
    8186:	bf00      	nop
    8188:	5002b400 	.word	0x5002b400
    818c:	5002b404 	.word	0x5002b404
    8190:	5002b408 	.word	0x5002b408
    8194:	200000e0 	.word	0x200000e0
    8198:	5002b40c 	.word	0x5002b40c
    819c:	5002a000 	.word	0x5002a000

000081a0 <nrf_cc3xx_platform_set_abort>:
    81a0:	e9d0 1200 	ldrd	r1, r2, [r0]
    81a4:	4b01      	ldr	r3, [pc, #4]	; (81ac <nrf_cc3xx_platform_set_abort+0xc>)
    81a6:	e9c3 1200 	strd	r1, r2, [r3]
    81aa:	4770      	bx	lr
    81ac:	200000e0 	.word	0x200000e0

000081b0 <nrf_cc3xx_platform_ctr_drbg_init>:
    81b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    81b4:	4c15      	ldr	r4, [pc, #84]	; (820c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    81b6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8214 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    81ba:	2800      	cmp	r0, #0
    81bc:	bf18      	it	ne
    81be:	4604      	movne	r4, r0
    81c0:	b083      	sub	sp, #12
    81c2:	6820      	ldr	r0, [r4, #0]
    81c4:	4540      	cmp	r0, r8
    81c6:	d01d      	beq.n	8204 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    81c8:	460d      	mov	r5, r1
    81ca:	4620      	mov	r0, r4
    81cc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    81d0:	f104 0904 	add.w	r9, r4, #4
    81d4:	4616      	mov	r6, r2
    81d6:	f504 778c 	add.w	r7, r4, #280	; 0x118
    81da:	f000 f8d3 	bl	8384 <mbedtls_platform_zeroize>
    81de:	4648      	mov	r0, r9
    81e0:	f000 fcf2 	bl	8bc8 <cc_mbedtls_entropy_init>
    81e4:	4638      	mov	r0, r7
    81e6:	f000 fb1f 	bl	8828 <cc_mbedtls_ctr_drbg_init>
    81ea:	4909      	ldr	r1, [pc, #36]	; (8210 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    81ec:	9600      	str	r6, [sp, #0]
    81ee:	464a      	mov	r2, r9
    81f0:	4638      	mov	r0, r7
    81f2:	462b      	mov	r3, r5
    81f4:	f000 fb2e 	bl	8854 <cc_mbedtls_ctr_drbg_seed>
    81f8:	b908      	cbnz	r0, 81fe <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    81fa:	f8c4 8000 	str.w	r8, [r4]
    81fe:	b003      	add	sp, #12
    8200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8204:	2000      	movs	r0, #0
    8206:	b003      	add	sp, #12
    8208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    820c:	20001a30 	.word	0x20001a30
    8210:	00008c45 	.word	0x00008c45
    8214:	5ac9bca5 	.word	0x5ac9bca5

00008218 <nrf_cc3xx_platform_ctr_drbg_get>:
    8218:	b5f0      	push	{r4, r5, r6, r7, lr}
    821a:	4c0d      	ldr	r4, [pc, #52]	; (8250 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    821c:	4e0d      	ldr	r6, [pc, #52]	; (8254 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    821e:	2800      	cmp	r0, #0
    8220:	bf08      	it	eq
    8222:	4620      	moveq	r0, r4
    8224:	b083      	sub	sp, #12
    8226:	6807      	ldr	r7, [r0, #0]
    8228:	42b7      	cmp	r7, r6
    822a:	d10e      	bne.n	824a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    822c:	2600      	movs	r6, #0
    822e:	461d      	mov	r5, r3
    8230:	f500 708c 	add.w	r0, r0, #280	; 0x118
    8234:	9600      	str	r6, [sp, #0]
    8236:	4633      	mov	r3, r6
    8238:	4614      	mov	r4, r2
    823a:	f000 fb57 	bl	88ec <cc_mbedtls_ctr_drbg_random_with_add>
    823e:	2800      	cmp	r0, #0
    8240:	bf18      	it	ne
    8242:	4634      	movne	r4, r6
    8244:	602c      	str	r4, [r5, #0]
    8246:	b003      	add	sp, #12
    8248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    824a:	4803      	ldr	r0, [pc, #12]	; (8258 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    824c:	e7fb      	b.n	8246 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    824e:	bf00      	nop
    8250:	20001a30 	.word	0x20001a30
    8254:	5ac9bca5 	.word	0x5ac9bca5
    8258:	ffff8fe8 	.word	0xffff8fe8

0000825c <mutex_free>:
    825c:	b510      	push	{r4, lr}
    825e:	4604      	mov	r4, r0
    8260:	b130      	cbz	r0, 8270 <mutex_free+0x14>
    8262:	6863      	ldr	r3, [r4, #4]
    8264:	06db      	lsls	r3, r3, #27
    8266:	d502      	bpl.n	826e <mutex_free+0x12>
    8268:	2300      	movs	r3, #0
    826a:	6023      	str	r3, [r4, #0]
    826c:	6063      	str	r3, [r4, #4]
    826e:	bd10      	pop	{r4, pc}
    8270:	4b02      	ldr	r3, [pc, #8]	; (827c <mutex_free+0x20>)
    8272:	4803      	ldr	r0, [pc, #12]	; (8280 <mutex_free+0x24>)
    8274:	685b      	ldr	r3, [r3, #4]
    8276:	4798      	blx	r3
    8278:	e7f3      	b.n	8262 <mutex_free+0x6>
    827a:	bf00      	nop
    827c:	200000e0 	.word	0x200000e0
    8280:	0000cd9c 	.word	0x0000cd9c

00008284 <mutex_unlock>:
    8284:	b168      	cbz	r0, 82a2 <mutex_unlock+0x1e>
    8286:	6843      	ldr	r3, [r0, #4]
    8288:	b13b      	cbz	r3, 829a <mutex_unlock+0x16>
    828a:	06db      	lsls	r3, r3, #27
    828c:	d507      	bpl.n	829e <mutex_unlock+0x1a>
    828e:	f3bf 8f5f 	dmb	sy
    8292:	2300      	movs	r3, #0
    8294:	6003      	str	r3, [r0, #0]
    8296:	4618      	mov	r0, r3
    8298:	4770      	bx	lr
    829a:	4803      	ldr	r0, [pc, #12]	; (82a8 <mutex_unlock+0x24>)
    829c:	4770      	bx	lr
    829e:	4803      	ldr	r0, [pc, #12]	; (82ac <mutex_unlock+0x28>)
    82a0:	4770      	bx	lr
    82a2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    82a6:	4770      	bx	lr
    82a8:	ffff8fea 	.word	0xffff8fea
    82ac:	ffff8fe9 	.word	0xffff8fe9

000082b0 <mutex_init>:
    82b0:	b510      	push	{r4, lr}
    82b2:	4604      	mov	r4, r0
    82b4:	b120      	cbz	r0, 82c0 <mutex_init+0x10>
    82b6:	2200      	movs	r2, #0
    82b8:	2311      	movs	r3, #17
    82ba:	6022      	str	r2, [r4, #0]
    82bc:	6063      	str	r3, [r4, #4]
    82be:	bd10      	pop	{r4, pc}
    82c0:	4801      	ldr	r0, [pc, #4]	; (82c8 <mutex_init+0x18>)
    82c2:	f7ff ff4d 	bl	8160 <CC_PalAbort>
    82c6:	e7f6      	b.n	82b6 <mutex_init+0x6>
    82c8:	0000cdc4 	.word	0x0000cdc4

000082cc <mutex_lock>:
    82cc:	b1c0      	cbz	r0, 8300 <mutex_lock+0x34>
    82ce:	6843      	ldr	r3, [r0, #4]
    82d0:	b1a3      	cbz	r3, 82fc <mutex_lock+0x30>
    82d2:	06db      	lsls	r3, r3, #27
    82d4:	d510      	bpl.n	82f8 <mutex_lock+0x2c>
    82d6:	2201      	movs	r2, #1
    82d8:	f3bf 8f5b 	dmb	ish
    82dc:	e850 3f00 	ldrex	r3, [r0]
    82e0:	e840 2100 	strex	r1, r2, [r0]
    82e4:	2900      	cmp	r1, #0
    82e6:	d1f9      	bne.n	82dc <mutex_lock+0x10>
    82e8:	f3bf 8f5b 	dmb	ish
    82ec:	2b01      	cmp	r3, #1
    82ee:	d0f3      	beq.n	82d8 <mutex_lock+0xc>
    82f0:	f3bf 8f5f 	dmb	sy
    82f4:	2000      	movs	r0, #0
    82f6:	4770      	bx	lr
    82f8:	4803      	ldr	r0, [pc, #12]	; (8308 <mutex_lock+0x3c>)
    82fa:	4770      	bx	lr
    82fc:	4803      	ldr	r0, [pc, #12]	; (830c <mutex_lock+0x40>)
    82fe:	4770      	bx	lr
    8300:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8304:	4770      	bx	lr
    8306:	bf00      	nop
    8308:	ffff8fe9 	.word	0xffff8fe9
    830c:	ffff8fea 	.word	0xffff8fea

00008310 <nrf_cc3xx_platform_set_mutexes>:
    8310:	b570      	push	{r4, r5, r6, lr}
    8312:	e9d0 2300 	ldrd	r2, r3, [r0]
    8316:	4c13      	ldr	r4, [pc, #76]	; (8364 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8318:	4d13      	ldr	r5, [pc, #76]	; (8368 <nrf_cc3xx_platform_set_mutexes+0x58>)
    831a:	e9c4 2300 	strd	r2, r3, [r4]
    831e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    8322:	e9c4 6302 	strd	r6, r3, [r4, #8]
    8326:	4b11      	ldr	r3, [pc, #68]	; (836c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8328:	6808      	ldr	r0, [r1, #0]
    832a:	6018      	str	r0, [r3, #0]
    832c:	6848      	ldr	r0, [r1, #4]
    832e:	6058      	str	r0, [r3, #4]
    8330:	6888      	ldr	r0, [r1, #8]
    8332:	6098      	str	r0, [r3, #8]
    8334:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    8338:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    833c:	60de      	str	r6, [r3, #12]
    833e:	6118      	str	r0, [r3, #16]
    8340:	06cb      	lsls	r3, r1, #27
    8342:	d50d      	bpl.n	8360 <nrf_cc3xx_platform_set_mutexes+0x50>
    8344:	2300      	movs	r3, #0
    8346:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    834a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    834e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    8352:	4790      	blx	r2
    8354:	6823      	ldr	r3, [r4, #0]
    8356:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    835a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    835e:	4718      	bx	r3
    8360:	bd70      	pop	{r4, r5, r6, pc}
    8362:	bf00      	nop
    8364:	200000f0 	.word	0x200000f0
    8368:	20001a30 	.word	0x20001a30
    836c:	20000100 	.word	0x20000100

00008370 <mbedtls_zeroize_internal>:
    8370:	b138      	cbz	r0, 8382 <mbedtls_zeroize_internal+0x12>
    8372:	b131      	cbz	r1, 8382 <mbedtls_zeroize_internal+0x12>
    8374:	4401      	add	r1, r0
    8376:	2200      	movs	r2, #0
    8378:	4603      	mov	r3, r0
    837a:	3001      	adds	r0, #1
    837c:	4281      	cmp	r1, r0
    837e:	701a      	strb	r2, [r3, #0]
    8380:	d1fa      	bne.n	8378 <mbedtls_zeroize_internal+0x8>
    8382:	4770      	bx	lr

00008384 <mbedtls_platform_zeroize>:
    8384:	b138      	cbz	r0, 8396 <mbedtls_platform_zeroize+0x12>
    8386:	b131      	cbz	r1, 8396 <mbedtls_platform_zeroize+0x12>
    8388:	4401      	add	r1, r0
    838a:	2200      	movs	r2, #0
    838c:	4603      	mov	r3, r0
    838e:	3001      	adds	r0, #1
    8390:	4288      	cmp	r0, r1
    8392:	701a      	strb	r2, [r3, #0]
    8394:	d1fa      	bne.n	838c <mbedtls_platform_zeroize+0x8>
    8396:	4770      	bx	lr

00008398 <block_cipher_df>:
    8398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    839c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    83a0:	b0b1      	sub	sp, #196	; 0xc4
    83a2:	f200 812e 	bhi.w	8602 <block_cipher_df+0x26a>
    83a6:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8614 <block_cipher_df+0x27c>
    83aa:	4614      	mov	r4, r2
    83ac:	460d      	mov	r5, r1
    83ae:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    83b2:	2100      	movs	r1, #0
    83b4:	4682      	mov	sl, r0
    83b6:	4648      	mov	r0, r9
    83b8:	f002 fdca 	bl	af50 <memset>
    83bc:	a813      	add	r0, sp, #76	; 0x4c
    83be:	f001 f9e5 	bl	978c <cc_mbedtls_aes_init>
    83c2:	2600      	movs	r6, #0
    83c4:	4629      	mov	r1, r5
    83c6:	2320      	movs	r3, #32
    83c8:	ba65      	rev16	r5, r4
    83ca:	4622      	mov	r2, r4
    83cc:	f109 0018 	add.w	r0, r9, #24
    83d0:	f8a9 5012 	strh.w	r5, [r9, #18]
    83d4:	f889 3017 	strb.w	r3, [r9, #23]
    83d8:	f8a9 6010 	strh.w	r6, [r9, #16]
    83dc:	f002 fd94 	bl	af08 <memcpy>
    83e0:	eb09 0304 	add.w	r3, r9, r4
    83e4:	2280      	movs	r2, #128	; 0x80
    83e6:	4d88      	ldr	r5, [pc, #544]	; (8608 <block_cipher_df+0x270>)
    83e8:	761a      	strb	r2, [r3, #24]
    83ea:	4b88      	ldr	r3, [pc, #544]	; (860c <block_cipher_df+0x274>)
    83ec:	9503      	str	r5, [sp, #12]
    83ee:	9304      	str	r3, [sp, #16]
    83f0:	a813      	add	r0, sp, #76	; 0x4c
    83f2:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
    83f6:	a903      	add	r1, sp, #12
    83f8:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
    83fc:	e9cd 5305 	strd	r5, r3, [sp, #20]
    8400:	f001 f9da 	bl	97b8 <cc_mbedtls_aes_setkey_enc>
    8404:	4680      	mov	r8, r0
    8406:	2800      	cmp	r0, #0
    8408:	f040 80da 	bne.w	85c0 <block_cipher_df+0x228>
    840c:	f104 0319 	add.w	r3, r4, #25
    8410:	9301      	str	r3, [sp, #4]
    8412:	af07      	add	r7, sp, #28
    8414:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
    8418:	2210      	movs	r2, #16
    841a:	2100      	movs	r1, #0
    841c:	4638      	mov	r0, r7
    841e:	f002 fd97 	bl	af50 <memset>
    8422:	4c7b      	ldr	r4, [pc, #492]	; (8610 <block_cipher_df+0x278>)
    8424:	9d01      	ldr	r5, [sp, #4]
    8426:	f89d 601d 	ldrb.w	r6, [sp, #29]
    842a:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    842e:	f89d e01c 	ldrb.w	lr, [sp, #28]
    8432:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    8436:	f89d c01f 	ldrb.w	ip, [sp, #31]
    843a:	f89d 001e 	ldrb.w	r0, [sp, #30]
    843e:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    8442:	404e      	eors	r6, r1
    8444:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
    8448:	f88d 601d 	strb.w	r6, [sp, #29]
    844c:	ea8e 0303 	eor.w	r3, lr, r3
    8450:	4050      	eors	r0, r2
    8452:	ea8c 0101 	eor.w	r1, ip, r1
    8456:	f89d 2020 	ldrb.w	r2, [sp, #32]
    845a:	f88d 301c 	strb.w	r3, [sp, #28]
    845e:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
    8462:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
    8466:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
    846a:	f88d 001e 	strb.w	r0, [sp, #30]
    846e:	f88d 101f 	strb.w	r1, [sp, #31]
    8472:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    8476:	f814 1c09 	ldrb.w	r1, [r4, #-9]
    847a:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
    847e:	405a      	eors	r2, r3
    8480:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8484:	f88d 2020 	strb.w	r2, [sp, #32]
    8488:	ea8c 0606 	eor.w	r6, ip, r6
    848c:	4048      	eors	r0, r1
    848e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
    8492:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    8496:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    849a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
    849e:	ea8e 0303 	eor.w	r3, lr, r3
    84a2:	f814 6c06 	ldrb.w	r6, [r4, #-6]
    84a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    84aa:	ea8c 0101 	eor.w	r1, ip, r1
    84ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    84b2:	f814 cc07 	ldrb.w	ip, [r4, #-7]
    84b6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    84ba:	ea82 020c 	eor.w	r2, r2, ip
    84be:	4073      	eors	r3, r6
    84c0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    84c4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    84c8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    84cc:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
    84d0:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
    84d4:	f814 2c05 	ldrb.w	r2, [r4, #-5]
    84d8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    84dc:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    84e0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
    84e4:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
    84e8:	ea8e 0202 	eor.w	r2, lr, r2
    84ec:	4041      	eors	r1, r0
    84ee:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    84f2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    84f6:	4073      	eors	r3, r6
    84f8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    84fc:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
    8500:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    8504:	ea8c 0000 	eor.w	r0, ip, r0
    8508:	4056      	eors	r6, r2
    850a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
    850e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
    8512:	463b      	mov	r3, r7
    8514:	463a      	mov	r2, r7
    8516:	2101      	movs	r1, #1
    8518:	a813      	add	r0, sp, #76	; 0x4c
    851a:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
    851e:	f001 f965 	bl	97ec <cc_mbedtls_aes_crypt_ecb>
    8522:	2d10      	cmp	r5, #16
    8524:	bf94      	ite	ls
    8526:	1b6d      	subls	r5, r5, r5
    8528:	3d10      	subhi	r5, #16
    852a:	2800      	cmp	r0, #0
    852c:	d167      	bne.n	85fe <block_cipher_df+0x266>
    852e:	3410      	adds	r4, #16
    8530:	2d00      	cmp	r5, #0
    8532:	f47f af78 	bne.w	8426 <block_cipher_df+0x8e>
    8536:	eb0b 0008 	add.w	r0, fp, r8
    853a:	2210      	movs	r2, #16
    853c:	4639      	mov	r1, r7
    853e:	f002 fce3 	bl	af08 <memcpy>
    8542:	f899 3003 	ldrb.w	r3, [r9, #3]
    8546:	f108 0810 	add.w	r8, r8, #16
    854a:	3301      	adds	r3, #1
    854c:	f1b8 0f20 	cmp.w	r8, #32
    8550:	f889 3003 	strb.w	r3, [r9, #3]
    8554:	f47f af60 	bne.w	8418 <block_cipher_df+0x80>
    8558:	2280      	movs	r2, #128	; 0x80
    855a:	4659      	mov	r1, fp
    855c:	a813      	add	r0, sp, #76	; 0x4c
    855e:	f001 f92b 	bl	97b8 <cc_mbedtls_aes_setkey_enc>
    8562:	4680      	mov	r8, r0
    8564:	bb78      	cbnz	r0, 85c6 <block_cipher_df+0x22e>
    8566:	f10a 0520 	add.w	r5, sl, #32
    856a:	4654      	mov	r4, sl
    856c:	ab0f      	add	r3, sp, #60	; 0x3c
    856e:	461a      	mov	r2, r3
    8570:	2101      	movs	r1, #1
    8572:	a813      	add	r0, sp, #76	; 0x4c
    8574:	f001 f93a 	bl	97ec <cc_mbedtls_aes_crypt_ecb>
    8578:	2210      	movs	r2, #16
    857a:	4680      	mov	r8, r0
    857c:	a90f      	add	r1, sp, #60	; 0x3c
    857e:	4620      	mov	r0, r4
    8580:	4414      	add	r4, r2
    8582:	f1b8 0f00 	cmp.w	r8, #0
    8586:	d11e      	bne.n	85c6 <block_cipher_df+0x22e>
    8588:	f002 fcbe 	bl	af08 <memcpy>
    858c:	42ac      	cmp	r4, r5
    858e:	d1ed      	bne.n	856c <block_cipher_df+0x1d4>
    8590:	a813      	add	r0, sp, #76	; 0x4c
    8592:	f001 f90b 	bl	97ac <cc_mbedtls_aes_free>
    8596:	481f      	ldr	r0, [pc, #124]	; (8614 <block_cipher_df+0x27c>)
    8598:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    859c:	f7ff fef2 	bl	8384 <mbedtls_platform_zeroize>
    85a0:	4658      	mov	r0, fp
    85a2:	2120      	movs	r1, #32
    85a4:	f7ff feee 	bl	8384 <mbedtls_platform_zeroize>
    85a8:	a803      	add	r0, sp, #12
    85aa:	2110      	movs	r1, #16
    85ac:	f7ff feea 	bl	8384 <mbedtls_platform_zeroize>
    85b0:	4638      	mov	r0, r7
    85b2:	2110      	movs	r1, #16
    85b4:	f7ff fee6 	bl	8384 <mbedtls_platform_zeroize>
    85b8:	4640      	mov	r0, r8
    85ba:	b031      	add	sp, #196	; 0xc4
    85bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85c0:	af07      	add	r7, sp, #28
    85c2:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
    85c6:	a813      	add	r0, sp, #76	; 0x4c
    85c8:	f001 f8f0 	bl	97ac <cc_mbedtls_aes_free>
    85cc:	4811      	ldr	r0, [pc, #68]	; (8614 <block_cipher_df+0x27c>)
    85ce:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    85d2:	f7ff fed7 	bl	8384 <mbedtls_platform_zeroize>
    85d6:	4658      	mov	r0, fp
    85d8:	2120      	movs	r1, #32
    85da:	f7ff fed3 	bl	8384 <mbedtls_platform_zeroize>
    85de:	a803      	add	r0, sp, #12
    85e0:	2110      	movs	r1, #16
    85e2:	f7ff fecf 	bl	8384 <mbedtls_platform_zeroize>
    85e6:	4638      	mov	r0, r7
    85e8:	2110      	movs	r1, #16
    85ea:	f7ff fecb 	bl	8384 <mbedtls_platform_zeroize>
    85ee:	4650      	mov	r0, sl
    85f0:	2120      	movs	r1, #32
    85f2:	f7ff fec7 	bl	8384 <mbedtls_platform_zeroize>
    85f6:	4640      	mov	r0, r8
    85f8:	b031      	add	sp, #196	; 0xc4
    85fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85fe:	4680      	mov	r8, r0
    8600:	e7e1      	b.n	85c6 <block_cipher_df+0x22e>
    8602:	f06f 0837 	mvn.w	r8, #55	; 0x37
    8606:	e7f6      	b.n	85f6 <block_cipher_df+0x25e>
    8608:	03020100 	.word	0x03020100
    860c:	07060504 	.word	0x07060504
    8610:	2000107c 	.word	0x2000107c
    8614:	2000106c 	.word	0x2000106c

00008618 <ctr_drbg_update_internal>:
    8618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    861c:	b088      	sub	sp, #32
    861e:	4604      	mov	r4, r0
    8620:	2220      	movs	r2, #32
    8622:	460d      	mov	r5, r1
    8624:	4668      	mov	r0, sp
    8626:	2100      	movs	r1, #0
    8628:	eb04 0802 	add.w	r8, r4, r2
    862c:	f002 fc90 	bl	af50 <memset>
    8630:	466e      	mov	r6, sp
    8632:	7be2      	ldrb	r2, [r4, #15]
    8634:	3201      	adds	r2, #1
    8636:	b2d2      	uxtb	r2, r2
    8638:	73e2      	strb	r2, [r4, #15]
    863a:	2a00      	cmp	r2, #0
    863c:	d14d      	bne.n	86da <ctr_drbg_update_internal+0xc2>
    863e:	7ba2      	ldrb	r2, [r4, #14]
    8640:	3201      	adds	r2, #1
    8642:	b2d2      	uxtb	r2, r2
    8644:	73a2      	strb	r2, [r4, #14]
    8646:	2a00      	cmp	r2, #0
    8648:	d147      	bne.n	86da <ctr_drbg_update_internal+0xc2>
    864a:	7b63      	ldrb	r3, [r4, #13]
    864c:	3301      	adds	r3, #1
    864e:	b2db      	uxtb	r3, r3
    8650:	7363      	strb	r3, [r4, #13]
    8652:	2b00      	cmp	r3, #0
    8654:	d141      	bne.n	86da <ctr_drbg_update_internal+0xc2>
    8656:	7b23      	ldrb	r3, [r4, #12]
    8658:	3301      	adds	r3, #1
    865a:	b2db      	uxtb	r3, r3
    865c:	7323      	strb	r3, [r4, #12]
    865e:	2b00      	cmp	r3, #0
    8660:	d13b      	bne.n	86da <ctr_drbg_update_internal+0xc2>
    8662:	7ae3      	ldrb	r3, [r4, #11]
    8664:	3301      	adds	r3, #1
    8666:	b2db      	uxtb	r3, r3
    8668:	72e3      	strb	r3, [r4, #11]
    866a:	2b00      	cmp	r3, #0
    866c:	d135      	bne.n	86da <ctr_drbg_update_internal+0xc2>
    866e:	7aa3      	ldrb	r3, [r4, #10]
    8670:	3301      	adds	r3, #1
    8672:	b2db      	uxtb	r3, r3
    8674:	72a3      	strb	r3, [r4, #10]
    8676:	2b00      	cmp	r3, #0
    8678:	d12f      	bne.n	86da <ctr_drbg_update_internal+0xc2>
    867a:	7a63      	ldrb	r3, [r4, #9]
    867c:	3301      	adds	r3, #1
    867e:	b2db      	uxtb	r3, r3
    8680:	7263      	strb	r3, [r4, #9]
    8682:	bb53      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    8684:	7a23      	ldrb	r3, [r4, #8]
    8686:	3301      	adds	r3, #1
    8688:	b2db      	uxtb	r3, r3
    868a:	7223      	strb	r3, [r4, #8]
    868c:	bb2b      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    868e:	79e3      	ldrb	r3, [r4, #7]
    8690:	3301      	adds	r3, #1
    8692:	b2db      	uxtb	r3, r3
    8694:	71e3      	strb	r3, [r4, #7]
    8696:	bb03      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    8698:	79a3      	ldrb	r3, [r4, #6]
    869a:	3301      	adds	r3, #1
    869c:	b2db      	uxtb	r3, r3
    869e:	71a3      	strb	r3, [r4, #6]
    86a0:	b9db      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    86a2:	7963      	ldrb	r3, [r4, #5]
    86a4:	3301      	adds	r3, #1
    86a6:	b2db      	uxtb	r3, r3
    86a8:	7163      	strb	r3, [r4, #5]
    86aa:	b9b3      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    86ac:	7923      	ldrb	r3, [r4, #4]
    86ae:	3301      	adds	r3, #1
    86b0:	b2db      	uxtb	r3, r3
    86b2:	7123      	strb	r3, [r4, #4]
    86b4:	b98b      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    86b6:	78e3      	ldrb	r3, [r4, #3]
    86b8:	3301      	adds	r3, #1
    86ba:	b2db      	uxtb	r3, r3
    86bc:	70e3      	strb	r3, [r4, #3]
    86be:	b963      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    86c0:	78a3      	ldrb	r3, [r4, #2]
    86c2:	3301      	adds	r3, #1
    86c4:	b2db      	uxtb	r3, r3
    86c6:	70a3      	strb	r3, [r4, #2]
    86c8:	b93b      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    86ca:	7863      	ldrb	r3, [r4, #1]
    86cc:	3301      	adds	r3, #1
    86ce:	b2db      	uxtb	r3, r3
    86d0:	7063      	strb	r3, [r4, #1]
    86d2:	b913      	cbnz	r3, 86da <ctr_drbg_update_internal+0xc2>
    86d4:	7823      	ldrb	r3, [r4, #0]
    86d6:	3301      	adds	r3, #1
    86d8:	7023      	strb	r3, [r4, #0]
    86da:	4633      	mov	r3, r6
    86dc:	4622      	mov	r2, r4
    86de:	2101      	movs	r1, #1
    86e0:	4640      	mov	r0, r8
    86e2:	f001 f883 	bl	97ec <cc_mbedtls_aes_crypt_ecb>
    86e6:	4607      	mov	r7, r0
    86e8:	2800      	cmp	r0, #0
    86ea:	d12b      	bne.n	8744 <ctr_drbg_update_internal+0x12c>
    86ec:	3610      	adds	r6, #16
    86ee:	ab08      	add	r3, sp, #32
    86f0:	429e      	cmp	r6, r3
    86f2:	d19e      	bne.n	8632 <ctr_drbg_update_internal+0x1a>
    86f4:	9e01      	ldr	r6, [sp, #4]
    86f6:	686a      	ldr	r2, [r5, #4]
    86f8:	9f00      	ldr	r7, [sp, #0]
    86fa:	6829      	ldr	r1, [r5, #0]
    86fc:	68ab      	ldr	r3, [r5, #8]
    86fe:	4072      	eors	r2, r6
    8700:	9e02      	ldr	r6, [sp, #8]
    8702:	9201      	str	r2, [sp, #4]
    8704:	4079      	eors	r1, r7
    8706:	4073      	eors	r3, r6
    8708:	9100      	str	r1, [sp, #0]
    870a:	9e03      	ldr	r6, [sp, #12]
    870c:	68e9      	ldr	r1, [r5, #12]
    870e:	692a      	ldr	r2, [r5, #16]
    8710:	9302      	str	r3, [sp, #8]
    8712:	4071      	eors	r1, r6
    8714:	9e04      	ldr	r6, [sp, #16]
    8716:	696b      	ldr	r3, [r5, #20]
    8718:	9103      	str	r1, [sp, #12]
    871a:	4056      	eors	r6, r2
    871c:	9a05      	ldr	r2, [sp, #20]
    871e:	9604      	str	r6, [sp, #16]
    8720:	ea83 0102 	eor.w	r1, r3, r2
    8724:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    8728:	9d06      	ldr	r5, [sp, #24]
    872a:	9105      	str	r1, [sp, #20]
    872c:	4055      	eors	r5, r2
    872e:	9a07      	ldr	r2, [sp, #28]
    8730:	4640      	mov	r0, r8
    8732:	4053      	eors	r3, r2
    8734:	4669      	mov	r1, sp
    8736:	2280      	movs	r2, #128	; 0x80
    8738:	e9cd 5306 	strd	r5, r3, [sp, #24]
    873c:	f001 f83c 	bl	97b8 <cc_mbedtls_aes_setkey_enc>
    8740:	4607      	mov	r7, r0
    8742:	b138      	cbz	r0, 8754 <ctr_drbg_update_internal+0x13c>
    8744:	4668      	mov	r0, sp
    8746:	2120      	movs	r1, #32
    8748:	f7ff fe1c 	bl	8384 <mbedtls_platform_zeroize>
    874c:	4638      	mov	r0, r7
    874e:	b008      	add	sp, #32
    8750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8754:	2210      	movs	r2, #16
    8756:	4620      	mov	r0, r4
    8758:	eb0d 0102 	add.w	r1, sp, r2
    875c:	f002 fbd4 	bl	af08 <memcpy>
    8760:	e7f0      	b.n	8744 <ctr_drbg_update_internal+0x12c>
    8762:	bf00      	nop

00008764 <mbedtls_ctr_drbg_reseed_internal>:
    8764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8768:	4604      	mov	r4, r0
    876a:	6980      	ldr	r0, [r0, #24]
    876c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    8770:	d852      	bhi.n	8818 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    8772:	461d      	mov	r5, r3
    8774:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    8778:	42ab      	cmp	r3, r5
    877a:	d34d      	bcc.n	8818 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    877c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    8780:	1a18      	subs	r0, r3, r0
    8782:	4290      	cmp	r0, r2
    8784:	4616      	mov	r6, r2
    8786:	d347      	bcc.n	8818 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    8788:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8824 <mbedtls_ctr_drbg_reseed_internal+0xc0>
    878c:	f44f 72c0 	mov.w	r2, #384	; 0x180
    8790:	460f      	mov	r7, r1
    8792:	4648      	mov	r0, r9
    8794:	2100      	movs	r1, #0
    8796:	f002 fbdb 	bl	af50 <memset>
    879a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    879e:	69a2      	ldr	r2, [r4, #24]
    87a0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    87a4:	4649      	mov	r1, r9
    87a6:	4798      	blx	r3
    87a8:	2800      	cmp	r0, #0
    87aa:	d138      	bne.n	881e <mbedtls_ctr_drbg_reseed_internal+0xba>
    87ac:	f8d4 8018 	ldr.w	r8, [r4, #24]
    87b0:	b13d      	cbz	r5, 87c2 <mbedtls_ctr_drbg_reseed_internal+0x5e>
    87b2:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
    87b6:	462a      	mov	r2, r5
    87b8:	eb09 0108 	add.w	r1, r9, r8
    87bc:	4798      	blx	r3
    87be:	bb70      	cbnz	r0, 881e <mbedtls_ctr_drbg_reseed_internal+0xba>
    87c0:	44a8      	add	r8, r5
    87c2:	b107      	cbz	r7, 87c6 <mbedtls_ctr_drbg_reseed_internal+0x62>
    87c4:	b9c6      	cbnz	r6, 87f8 <mbedtls_ctr_drbg_reseed_internal+0x94>
    87c6:	4917      	ldr	r1, [pc, #92]	; (8824 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    87c8:	4642      	mov	r2, r8
    87ca:	4608      	mov	r0, r1
    87cc:	f7ff fde4 	bl	8398 <block_cipher_df>
    87d0:	4605      	mov	r5, r0
    87d2:	b138      	cbz	r0, 87e4 <mbedtls_ctr_drbg_reseed_internal+0x80>
    87d4:	4813      	ldr	r0, [pc, #76]	; (8824 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    87d6:	f44f 71c0 	mov.w	r1, #384	; 0x180
    87da:	f7ff fdd3 	bl	8384 <mbedtls_platform_zeroize>
    87de:	4628      	mov	r0, r5
    87e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    87e4:	490f      	ldr	r1, [pc, #60]	; (8824 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    87e6:	4620      	mov	r0, r4
    87e8:	f7ff ff16 	bl	8618 <ctr_drbg_update_internal>
    87ec:	4605      	mov	r5, r0
    87ee:	2800      	cmp	r0, #0
    87f0:	d1f0      	bne.n	87d4 <mbedtls_ctr_drbg_reseed_internal+0x70>
    87f2:	2301      	movs	r3, #1
    87f4:	6123      	str	r3, [r4, #16]
    87f6:	e7ed      	b.n	87d4 <mbedtls_ctr_drbg_reseed_internal+0x70>
    87f8:	4639      	mov	r1, r7
    87fa:	eb09 0008 	add.w	r0, r9, r8
    87fe:	4632      	mov	r2, r6
    8800:	f002 fb82 	bl	af08 <memcpy>
    8804:	4907      	ldr	r1, [pc, #28]	; (8824 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    8806:	44b0      	add	r8, r6
    8808:	4642      	mov	r2, r8
    880a:	4608      	mov	r0, r1
    880c:	f7ff fdc4 	bl	8398 <block_cipher_df>
    8810:	4605      	mov	r5, r0
    8812:	2800      	cmp	r0, #0
    8814:	d1de      	bne.n	87d4 <mbedtls_ctr_drbg_reseed_internal+0x70>
    8816:	e7e5      	b.n	87e4 <mbedtls_ctr_drbg_reseed_internal+0x80>
    8818:	f06f 0537 	mvn.w	r5, #55	; 0x37
    881c:	e7df      	b.n	87de <mbedtls_ctr_drbg_reseed_internal+0x7a>
    881e:	f06f 0533 	mvn.w	r5, #51	; 0x33
    8822:	e7dc      	b.n	87de <mbedtls_ctr_drbg_reseed_internal+0x7a>
    8824:	2000120c 	.word	0x2000120c

00008828 <cc_mbedtls_ctr_drbg_init>:
    8828:	b510      	push	{r4, lr}
    882a:	22a4      	movs	r2, #164	; 0xa4
    882c:	4604      	mov	r4, r0
    882e:	2100      	movs	r1, #0
    8830:	f002 fb8e 	bl	af50 <memset>
    8834:	4b06      	ldr	r3, [pc, #24]	; (8850 <cc_mbedtls_ctr_drbg_init+0x28>)
    8836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    883a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    883e:	6121      	str	r1, [r4, #16]
    8840:	61e2      	str	r2, [r4, #28]
    8842:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    8846:	681b      	ldr	r3, [r3, #0]
    8848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    884c:	4718      	bx	r3
    884e:	bf00      	nop
    8850:	20000144 	.word	0x20000144

00008854 <cc_mbedtls_ctr_drbg_seed>:
    8854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8858:	b085      	sub	sp, #20
    885a:	4605      	mov	r5, r0
    885c:	460f      	mov	r7, r1
    885e:	4616      	mov	r6, r2
    8860:	4668      	mov	r0, sp
    8862:	2210      	movs	r2, #16
    8864:	2100      	movs	r1, #0
    8866:	4699      	mov	r9, r3
    8868:	f002 fb72 	bl	af50 <memset>
    886c:	4b1d      	ldr	r3, [pc, #116]	; (88e4 <cc_mbedtls_ctr_drbg_seed+0x90>)
    886e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
    8872:	681b      	ldr	r3, [r3, #0]
    8874:	4640      	mov	r0, r8
    8876:	4798      	blx	r3
    8878:	b120      	cbz	r0, 8884 <cc_mbedtls_ctr_drbg_seed+0x30>
    887a:	4604      	mov	r4, r0
    887c:	4620      	mov	r0, r4
    887e:	b005      	add	sp, #20
    8880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8884:	f105 0420 	add.w	r4, r5, #32
    8888:	4620      	mov	r0, r4
    888a:	f000 ff7f 	bl	978c <cc_mbedtls_aes_init>
    888e:	69aa      	ldr	r2, [r5, #24]
    8890:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
    8894:	692e      	ldr	r6, [r5, #16]
    8896:	b9e2      	cbnz	r2, 88d2 <cc_mbedtls_ctr_drbg_seed+0x7e>
    8898:	2220      	movs	r2, #32
    889a:	2e00      	cmp	r6, #0
    889c:	61aa      	str	r2, [r5, #24]
    889e:	db1f      	blt.n	88e0 <cc_mbedtls_ctr_drbg_seed+0x8c>
    88a0:	4620      	mov	r0, r4
    88a2:	4669      	mov	r1, sp
    88a4:	2280      	movs	r2, #128	; 0x80
    88a6:	f000 ff87 	bl	97b8 <cc_mbedtls_aes_setkey_enc>
    88aa:	4604      	mov	r4, r0
    88ac:	b930      	cbnz	r0, 88bc <cc_mbedtls_ctr_drbg_seed+0x68>
    88ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    88b0:	4633      	mov	r3, r6
    88b2:	4649      	mov	r1, r9
    88b4:	4628      	mov	r0, r5
    88b6:	f7ff ff55 	bl	8764 <mbedtls_ctr_drbg_reseed_internal>
    88ba:	4604      	mov	r4, r0
    88bc:	4b0a      	ldr	r3, [pc, #40]	; (88e8 <cc_mbedtls_ctr_drbg_seed+0x94>)
    88be:	4640      	mov	r0, r8
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	4798      	blx	r3
    88c4:	2800      	cmp	r0, #0
    88c6:	bf18      	it	ne
    88c8:	4604      	movne	r4, r0
    88ca:	4620      	mov	r0, r4
    88cc:	b005      	add	sp, #20
    88ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    88d2:	2e00      	cmp	r6, #0
    88d4:	dae4      	bge.n	88a0 <cc_mbedtls_ctr_drbg_seed+0x4c>
    88d6:	2a17      	cmp	r2, #23
    88d8:	d802      	bhi.n	88e0 <cc_mbedtls_ctr_drbg_seed+0x8c>
    88da:	1c53      	adds	r3, r2, #1
    88dc:	085e      	lsrs	r6, r3, #1
    88de:	e7df      	b.n	88a0 <cc_mbedtls_ctr_drbg_seed+0x4c>
    88e0:	2600      	movs	r6, #0
    88e2:	e7dd      	b.n	88a0 <cc_mbedtls_ctr_drbg_seed+0x4c>
    88e4:	20000148 	.word	0x20000148
    88e8:	2000014c 	.word	0x2000014c

000088ec <cc_mbedtls_ctr_drbg_random_with_add>:
    88ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88f0:	b08d      	sub	sp, #52	; 0x34
    88f2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    88f6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    88fa:	f200 80e4 	bhi.w	8ac6 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
    88fe:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    8902:	f200 80dd 	bhi.w	8ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
    8906:	4604      	mov	r4, r0
    8908:	4615      	mov	r5, r2
    890a:	460e      	mov	r6, r1
    890c:	2220      	movs	r2, #32
    890e:	2100      	movs	r1, #0
    8910:	a804      	add	r0, sp, #16
    8912:	461f      	mov	r7, r3
    8914:	f002 fb1c 	bl	af50 <memset>
    8918:	4b6c      	ldr	r3, [pc, #432]	; (8acc <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
    891a:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    891e:	681b      	ldr	r3, [r3, #0]
    8920:	4648      	mov	r0, r9
    8922:	4798      	blx	r3
    8924:	4683      	mov	fp, r0
    8926:	2800      	cmp	r0, #0
    8928:	f040 8093 	bne.w	8a52 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    892c:	6922      	ldr	r2, [r4, #16]
    892e:	69e3      	ldr	r3, [r4, #28]
    8930:	429a      	cmp	r2, r3
    8932:	f300 8092 	bgt.w	8a5a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    8936:	6963      	ldr	r3, [r4, #20]
    8938:	2b00      	cmp	r3, #0
    893a:	f040 808e 	bne.w	8a5a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    893e:	f1b8 0f00 	cmp.w	r8, #0
    8942:	f040 80a9 	bne.w	8a98 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
    8946:	f8df a188 	ldr.w	sl, [pc, #392]	; 8ad0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    894a:	466f      	mov	r7, sp
    894c:	2d00      	cmp	r5, #0
    894e:	f000 8098 	beq.w	8a82 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    8952:	f104 0820 	add.w	r8, r4, #32
    8956:	466f      	mov	r7, sp
    8958:	e00e      	b.n	8978 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
    895a:	2d10      	cmp	r5, #16
    895c:	46ab      	mov	fp, r5
    895e:	bf28      	it	cs
    8960:	f04f 0b10 	movcs.w	fp, #16
    8964:	4630      	mov	r0, r6
    8966:	465a      	mov	r2, fp
    8968:	4639      	mov	r1, r7
    896a:	f002 facd 	bl	af08 <memcpy>
    896e:	ebb5 050b 	subs.w	r5, r5, fp
    8972:	445e      	add	r6, fp
    8974:	f000 8085 	beq.w	8a82 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    8978:	7be3      	ldrb	r3, [r4, #15]
    897a:	3301      	adds	r3, #1
    897c:	b2db      	uxtb	r3, r3
    897e:	73e3      	strb	r3, [r4, #15]
    8980:	2b00      	cmp	r3, #0
    8982:	d14d      	bne.n	8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    8984:	7ba3      	ldrb	r3, [r4, #14]
    8986:	3301      	adds	r3, #1
    8988:	b2db      	uxtb	r3, r3
    898a:	73a3      	strb	r3, [r4, #14]
    898c:	2b00      	cmp	r3, #0
    898e:	d147      	bne.n	8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    8990:	7b63      	ldrb	r3, [r4, #13]
    8992:	3301      	adds	r3, #1
    8994:	b2db      	uxtb	r3, r3
    8996:	7363      	strb	r3, [r4, #13]
    8998:	2b00      	cmp	r3, #0
    899a:	d141      	bne.n	8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    899c:	7b23      	ldrb	r3, [r4, #12]
    899e:	3301      	adds	r3, #1
    89a0:	b2db      	uxtb	r3, r3
    89a2:	7323      	strb	r3, [r4, #12]
    89a4:	2b00      	cmp	r3, #0
    89a6:	d13b      	bne.n	8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89a8:	7ae3      	ldrb	r3, [r4, #11]
    89aa:	3301      	adds	r3, #1
    89ac:	b2db      	uxtb	r3, r3
    89ae:	72e3      	strb	r3, [r4, #11]
    89b0:	2b00      	cmp	r3, #0
    89b2:	d135      	bne.n	8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89b4:	7aa3      	ldrb	r3, [r4, #10]
    89b6:	3301      	adds	r3, #1
    89b8:	b2db      	uxtb	r3, r3
    89ba:	72a3      	strb	r3, [r4, #10]
    89bc:	2b00      	cmp	r3, #0
    89be:	d12f      	bne.n	8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89c0:	7a63      	ldrb	r3, [r4, #9]
    89c2:	3301      	adds	r3, #1
    89c4:	b2db      	uxtb	r3, r3
    89c6:	7263      	strb	r3, [r4, #9]
    89c8:	bb53      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89ca:	7a23      	ldrb	r3, [r4, #8]
    89cc:	3301      	adds	r3, #1
    89ce:	b2db      	uxtb	r3, r3
    89d0:	7223      	strb	r3, [r4, #8]
    89d2:	bb2b      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89d4:	79e3      	ldrb	r3, [r4, #7]
    89d6:	3301      	adds	r3, #1
    89d8:	b2db      	uxtb	r3, r3
    89da:	71e3      	strb	r3, [r4, #7]
    89dc:	bb03      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89de:	79a3      	ldrb	r3, [r4, #6]
    89e0:	3301      	adds	r3, #1
    89e2:	b2db      	uxtb	r3, r3
    89e4:	71a3      	strb	r3, [r4, #6]
    89e6:	b9db      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89e8:	7963      	ldrb	r3, [r4, #5]
    89ea:	3301      	adds	r3, #1
    89ec:	b2db      	uxtb	r3, r3
    89ee:	7163      	strb	r3, [r4, #5]
    89f0:	b9b3      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89f2:	7923      	ldrb	r3, [r4, #4]
    89f4:	3301      	adds	r3, #1
    89f6:	b2db      	uxtb	r3, r3
    89f8:	7123      	strb	r3, [r4, #4]
    89fa:	b98b      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    89fc:	78e3      	ldrb	r3, [r4, #3]
    89fe:	3301      	adds	r3, #1
    8a00:	b2db      	uxtb	r3, r3
    8a02:	70e3      	strb	r3, [r4, #3]
    8a04:	b963      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    8a06:	78a3      	ldrb	r3, [r4, #2]
    8a08:	3301      	adds	r3, #1
    8a0a:	b2db      	uxtb	r3, r3
    8a0c:	70a3      	strb	r3, [r4, #2]
    8a0e:	b93b      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    8a10:	7863      	ldrb	r3, [r4, #1]
    8a12:	3301      	adds	r3, #1
    8a14:	b2db      	uxtb	r3, r3
    8a16:	7063      	strb	r3, [r4, #1]
    8a18:	b913      	cbnz	r3, 8a20 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    8a1a:	7823      	ldrb	r3, [r4, #0]
    8a1c:	3301      	adds	r3, #1
    8a1e:	7023      	strb	r3, [r4, #0]
    8a20:	463b      	mov	r3, r7
    8a22:	4622      	mov	r2, r4
    8a24:	2101      	movs	r1, #1
    8a26:	4640      	mov	r0, r8
    8a28:	f000 fee0 	bl	97ec <cc_mbedtls_aes_crypt_ecb>
    8a2c:	4683      	mov	fp, r0
    8a2e:	2800      	cmp	r0, #0
    8a30:	d093      	beq.n	895a <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
    8a32:	f8da 3000 	ldr.w	r3, [sl]
    8a36:	4648      	mov	r0, r9
    8a38:	4798      	blx	r3
    8a3a:	2120      	movs	r1, #32
    8a3c:	4603      	mov	r3, r0
    8a3e:	a804      	add	r0, sp, #16
    8a40:	2b00      	cmp	r3, #0
    8a42:	bf18      	it	ne
    8a44:	469b      	movne	fp, r3
    8a46:	f7ff fc9d 	bl	8384 <mbedtls_platform_zeroize>
    8a4a:	4638      	mov	r0, r7
    8a4c:	2110      	movs	r1, #16
    8a4e:	f7ff fc99 	bl	8384 <mbedtls_platform_zeroize>
    8a52:	4658      	mov	r0, fp
    8a54:	b00d      	add	sp, #52	; 0x34
    8a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a5a:	4642      	mov	r2, r8
    8a5c:	4639      	mov	r1, r7
    8a5e:	2300      	movs	r3, #0
    8a60:	4620      	mov	r0, r4
    8a62:	f7ff fe7f 	bl	8764 <mbedtls_ctr_drbg_reseed_internal>
    8a66:	f8df a068 	ldr.w	sl, [pc, #104]	; 8ad0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    8a6a:	2800      	cmp	r0, #0
    8a6c:	f43f af6d 	beq.w	894a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    8a70:	f8da 3000 	ldr.w	r3, [sl]
    8a74:	4648      	mov	r0, r9
    8a76:	4798      	blx	r3
    8a78:	4683      	mov	fp, r0
    8a7a:	2800      	cmp	r0, #0
    8a7c:	f43f af65 	beq.w	894a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    8a80:	e7e7      	b.n	8a52 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    8a82:	a904      	add	r1, sp, #16
    8a84:	4620      	mov	r0, r4
    8a86:	f7ff fdc7 	bl	8618 <ctr_drbg_update_internal>
    8a8a:	4683      	mov	fp, r0
    8a8c:	2800      	cmp	r0, #0
    8a8e:	d1d0      	bne.n	8a32 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    8a90:	6923      	ldr	r3, [r4, #16]
    8a92:	3301      	adds	r3, #1
    8a94:	6123      	str	r3, [r4, #16]
    8a96:	e7cc      	b.n	8a32 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    8a98:	4642      	mov	r2, r8
    8a9a:	4639      	mov	r1, r7
    8a9c:	a804      	add	r0, sp, #16
    8a9e:	f7ff fc7b 	bl	8398 <block_cipher_df>
    8aa2:	4683      	mov	fp, r0
    8aa4:	b118      	cbz	r0, 8aae <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
    8aa6:	f8df a028 	ldr.w	sl, [pc, #40]	; 8ad0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    8aaa:	466f      	mov	r7, sp
    8aac:	e7c1      	b.n	8a32 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    8aae:	a904      	add	r1, sp, #16
    8ab0:	4620      	mov	r0, r4
    8ab2:	f7ff fdb1 	bl	8618 <ctr_drbg_update_internal>
    8ab6:	4683      	mov	fp, r0
    8ab8:	2800      	cmp	r0, #0
    8aba:	f43f af44 	beq.w	8946 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    8abe:	e7f2      	b.n	8aa6 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
    8ac0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    8ac4:	e7c5      	b.n	8a52 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    8ac6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
    8aca:	e7c2      	b.n	8a52 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    8acc:	20000148 	.word	0x20000148
    8ad0:	2000014c 	.word	0x2000014c

00008ad4 <entropy_update>:
    8ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ad8:	2b20      	cmp	r3, #32
    8ada:	b08b      	sub	sp, #44	; 0x2c
    8adc:	461d      	mov	r5, r3
    8ade:	4606      	mov	r6, r0
    8ae0:	4689      	mov	r9, r1
    8ae2:	4690      	mov	r8, r2
    8ae4:	d826      	bhi.n	8b34 <entropy_update+0x60>
    8ae6:	b2db      	uxtb	r3, r3
    8ae8:	af02      	add	r7, sp, #8
    8aea:	6831      	ldr	r1, [r6, #0]
    8aec:	f88d 9004 	strb.w	r9, [sp, #4]
    8af0:	f88d 3005 	strb.w	r3, [sp, #5]
    8af4:	f106 0904 	add.w	r9, r6, #4
    8af8:	b921      	cbnz	r1, 8b04 <entropy_update+0x30>
    8afa:	4648      	mov	r0, r9
    8afc:	f000 feba 	bl	9874 <cc_mbedtls_sha256_starts>
    8b00:	4604      	mov	r4, r0
    8b02:	b940      	cbnz	r0, 8b16 <entropy_update+0x42>
    8b04:	2301      	movs	r3, #1
    8b06:	6033      	str	r3, [r6, #0]
    8b08:	2202      	movs	r2, #2
    8b0a:	a901      	add	r1, sp, #4
    8b0c:	4648      	mov	r0, r9
    8b0e:	f000 fec5 	bl	989c <cc_mbedtls_sha256_update>
    8b12:	4604      	mov	r4, r0
    8b14:	b138      	cbz	r0, 8b26 <entropy_update+0x52>
    8b16:	4638      	mov	r0, r7
    8b18:	2120      	movs	r1, #32
    8b1a:	f7ff fc33 	bl	8384 <mbedtls_platform_zeroize>
    8b1e:	4620      	mov	r0, r4
    8b20:	b00b      	add	sp, #44	; 0x2c
    8b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8b26:	462a      	mov	r2, r5
    8b28:	4641      	mov	r1, r8
    8b2a:	4648      	mov	r0, r9
    8b2c:	f000 feb6 	bl	989c <cc_mbedtls_sha256_update>
    8b30:	4604      	mov	r4, r0
    8b32:	e7f0      	b.n	8b16 <entropy_update+0x42>
    8b34:	af02      	add	r7, sp, #8
    8b36:	4619      	mov	r1, r3
    8b38:	4610      	mov	r0, r2
    8b3a:	2300      	movs	r3, #0
    8b3c:	463a      	mov	r2, r7
    8b3e:	f000 ffad 	bl	9a9c <cc_mbedtls_sha256>
    8b42:	4604      	mov	r4, r0
    8b44:	2800      	cmp	r0, #0
    8b46:	d1e6      	bne.n	8b16 <entropy_update+0x42>
    8b48:	2320      	movs	r3, #32
    8b4a:	461d      	mov	r5, r3
    8b4c:	46b8      	mov	r8, r7
    8b4e:	e7cc      	b.n	8aea <entropy_update+0x16>

00008b50 <entropy_gather_internal.part.0>:
    8b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b52:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    8b56:	b0a7      	sub	sp, #156	; 0x9c
    8b58:	2b00      	cmp	r3, #0
    8b5a:	bfd8      	it	le
    8b5c:	ae02      	addle	r6, sp, #8
    8b5e:	dd2c      	ble.n	8bba <entropy_gather_internal.part.0+0x6a>
    8b60:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    8b64:	4605      	mov	r5, r0
    8b66:	2300      	movs	r3, #0
    8b68:	ae02      	add	r6, sp, #8
    8b6a:	9301      	str	r3, [sp, #4]
    8b6c:	f1a4 0701 	sub.w	r7, r4, #1
    8b70:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    8b74:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    8b78:	4631      	mov	r1, r6
    8b7a:	ab01      	add	r3, sp, #4
    8b7c:	2290      	movs	r2, #144	; 0x90
    8b7e:	47a0      	blx	r4
    8b80:	fab7 f787 	clz	r7, r7
    8b84:	097f      	lsrs	r7, r7, #5
    8b86:	4604      	mov	r4, r0
    8b88:	b910      	cbnz	r0, 8b90 <entropy_gather_internal.part.0+0x40>
    8b8a:	9b01      	ldr	r3, [sp, #4]
    8b8c:	b93b      	cbnz	r3, 8b9e <entropy_gather_internal.part.0+0x4e>
    8b8e:	b1a7      	cbz	r7, 8bba <entropy_gather_internal.part.0+0x6a>
    8b90:	4630      	mov	r0, r6
    8b92:	2190      	movs	r1, #144	; 0x90
    8b94:	f7ff fbf6 	bl	8384 <mbedtls_platform_zeroize>
    8b98:	4620      	mov	r0, r4
    8b9a:	b027      	add	sp, #156	; 0x9c
    8b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b9e:	4601      	mov	r1, r0
    8ba0:	4632      	mov	r2, r6
    8ba2:	4628      	mov	r0, r5
    8ba4:	f7ff ff96 	bl	8ad4 <entropy_update>
    8ba8:	b950      	cbnz	r0, 8bc0 <entropy_gather_internal.part.0+0x70>
    8baa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    8bae:	9a01      	ldr	r2, [sp, #4]
    8bb0:	4413      	add	r3, r2
    8bb2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    8bb6:	2f00      	cmp	r7, #0
    8bb8:	d1ea      	bne.n	8b90 <entropy_gather_internal.part.0+0x40>
    8bba:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    8bbe:	e7e7      	b.n	8b90 <entropy_gather_internal.part.0+0x40>
    8bc0:	4604      	mov	r4, r0
    8bc2:	4620      	mov	r0, r4
    8bc4:	b027      	add	sp, #156	; 0x9c
    8bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008bc8 <cc_mbedtls_entropy_init>:
    8bc8:	b570      	push	{r4, r5, r6, lr}
    8bca:	2500      	movs	r5, #0
    8bcc:	4604      	mov	r4, r0
    8bce:	4629      	mov	r1, r5
    8bd0:	2214      	movs	r2, #20
    8bd2:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    8bd6:	30f8      	adds	r0, #248	; 0xf8
    8bd8:	f002 f9ba 	bl	af50 <memset>
    8bdc:	4b15      	ldr	r3, [pc, #84]	; (8c34 <cc_mbedtls_entropy_init+0x6c>)
    8bde:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    8be2:	681b      	ldr	r3, [r3, #0]
    8be4:	4630      	mov	r0, r6
    8be6:	4798      	blx	r3
    8be8:	4620      	mov	r0, r4
    8bea:	f840 5b04 	str.w	r5, [r0], #4
    8bee:	f000 fe27 	bl	9840 <cc_mbedtls_sha256_init>
    8bf2:	4b11      	ldr	r3, [pc, #68]	; (8c38 <cc_mbedtls_entropy_init+0x70>)
    8bf4:	4630      	mov	r0, r6
    8bf6:	681b      	ldr	r3, [r3, #0]
    8bf8:	4798      	blx	r3
    8bfa:	b9c8      	cbnz	r0, 8c30 <cc_mbedtls_entropy_init+0x68>
    8bfc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    8c00:	42ab      	cmp	r3, r5
    8c02:	dc0f      	bgt.n	8c24 <cc_mbedtls_entropy_init+0x5c>
    8c04:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8c08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    8c0c:	490b      	ldr	r1, [pc, #44]	; (8c3c <cc_mbedtls_entropy_init+0x74>)
    8c0e:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    8c12:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
    8c16:	3301      	adds	r3, #1
    8c18:	2020      	movs	r0, #32
    8c1a:	2101      	movs	r1, #1
    8c1c:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
    8c20:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    8c24:	4b06      	ldr	r3, [pc, #24]	; (8c40 <cc_mbedtls_entropy_init+0x78>)
    8c26:	4630      	mov	r0, r6
    8c28:	681b      	ldr	r3, [r3, #0]
    8c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c2e:	4718      	bx	r3
    8c30:	bd70      	pop	{r4, r5, r6, pc}
    8c32:	bf00      	nop
    8c34:	20000144 	.word	0x20000144
    8c38:	20000148 	.word	0x20000148
    8c3c:	00009691 	.word	0x00009691
    8c40:	2000014c 	.word	0x2000014c

00008c44 <cc_mbedtls_entropy_func>:
    8c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c48:	2a20      	cmp	r2, #32
    8c4a:	b088      	sub	sp, #32
    8c4c:	d876      	bhi.n	8d3c <cc_mbedtls_entropy_func+0xf8>
    8c4e:	4b3d      	ldr	r3, [pc, #244]	; (8d44 <cc_mbedtls_entropy_func+0x100>)
    8c50:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    8c54:	681b      	ldr	r3, [r3, #0]
    8c56:	4604      	mov	r4, r0
    8c58:	4648      	mov	r0, r9
    8c5a:	4617      	mov	r7, r2
    8c5c:	4688      	mov	r8, r1
    8c5e:	4798      	blx	r3
    8c60:	4605      	mov	r5, r0
    8c62:	bba0      	cbnz	r0, 8cce <cc_mbedtls_entropy_func+0x8a>
    8c64:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    8c68:	f240 1601 	movw	r6, #257	; 0x101
    8c6c:	e001      	b.n	8c72 <cc_mbedtls_entropy_func+0x2e>
    8c6e:	3e01      	subs	r6, #1
    8c70:	d060      	beq.n	8d34 <cc_mbedtls_entropy_func+0xf0>
    8c72:	4620      	mov	r0, r4
    8c74:	b37b      	cbz	r3, 8cd6 <cc_mbedtls_entropy_func+0x92>
    8c76:	f7ff ff6b 	bl	8b50 <entropy_gather_internal.part.0>
    8c7a:	4605      	mov	r5, r0
    8c7c:	bb68      	cbnz	r0, 8cda <cc_mbedtls_entropy_func+0x96>
    8c7e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    8c82:	2b00      	cmp	r3, #0
    8c84:	ddf3      	ble.n	8c6e <cc_mbedtls_entropy_func+0x2a>
    8c86:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    8c8a:	4290      	cmp	r0, r2
    8c8c:	d3ef      	bcc.n	8c6e <cc_mbedtls_entropy_func+0x2a>
    8c8e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    8c92:	2a01      	cmp	r2, #1
    8c94:	d1eb      	bne.n	8c6e <cc_mbedtls_entropy_func+0x2a>
    8c96:	281f      	cmp	r0, #31
    8c98:	d9e9      	bls.n	8c6e <cc_mbedtls_entropy_func+0x2a>
    8c9a:	466e      	mov	r6, sp
    8c9c:	4629      	mov	r1, r5
    8c9e:	2220      	movs	r2, #32
    8ca0:	4630      	mov	r0, r6
    8ca2:	f104 0a04 	add.w	sl, r4, #4
    8ca6:	f002 f953 	bl	af50 <memset>
    8caa:	4631      	mov	r1, r6
    8cac:	4650      	mov	r0, sl
    8cae:	f000 fe1f 	bl	98f0 <cc_mbedtls_sha256_finish>
    8cb2:	4605      	mov	r5, r0
    8cb4:	b198      	cbz	r0, 8cde <cc_mbedtls_entropy_func+0x9a>
    8cb6:	4630      	mov	r0, r6
    8cb8:	2120      	movs	r1, #32
    8cba:	f7ff fb63 	bl	8384 <mbedtls_platform_zeroize>
    8cbe:	4b22      	ldr	r3, [pc, #136]	; (8d48 <cc_mbedtls_entropy_func+0x104>)
    8cc0:	4648      	mov	r0, r9
    8cc2:	681b      	ldr	r3, [r3, #0]
    8cc4:	4798      	blx	r3
    8cc6:	2800      	cmp	r0, #0
    8cc8:	bf18      	it	ne
    8cca:	f06f 051d 	mvnne.w	r5, #29
    8cce:	4628      	mov	r0, r5
    8cd0:	b008      	add	sp, #32
    8cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cd6:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    8cda:	466e      	mov	r6, sp
    8cdc:	e7eb      	b.n	8cb6 <cc_mbedtls_entropy_func+0x72>
    8cde:	4650      	mov	r0, sl
    8ce0:	f000 fdc2 	bl	9868 <cc_mbedtls_sha256_free>
    8ce4:	4650      	mov	r0, sl
    8ce6:	f000 fdab 	bl	9840 <cc_mbedtls_sha256_init>
    8cea:	4629      	mov	r1, r5
    8cec:	4650      	mov	r0, sl
    8cee:	f000 fdc1 	bl	9874 <cc_mbedtls_sha256_starts>
    8cf2:	4605      	mov	r5, r0
    8cf4:	2800      	cmp	r0, #0
    8cf6:	d1de      	bne.n	8cb6 <cc_mbedtls_entropy_func+0x72>
    8cf8:	4650      	mov	r0, sl
    8cfa:	2220      	movs	r2, #32
    8cfc:	4631      	mov	r1, r6
    8cfe:	f000 fdcd 	bl	989c <cc_mbedtls_sha256_update>
    8d02:	4605      	mov	r5, r0
    8d04:	2800      	cmp	r0, #0
    8d06:	d1d6      	bne.n	8cb6 <cc_mbedtls_entropy_func+0x72>
    8d08:	4603      	mov	r3, r0
    8d0a:	4632      	mov	r2, r6
    8d0c:	2120      	movs	r1, #32
    8d0e:	4630      	mov	r0, r6
    8d10:	f000 fec4 	bl	9a9c <cc_mbedtls_sha256>
    8d14:	4605      	mov	r5, r0
    8d16:	2800      	cmp	r0, #0
    8d18:	d1cd      	bne.n	8cb6 <cc_mbedtls_entropy_func+0x72>
    8d1a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    8d1e:	2b00      	cmp	r3, #0
    8d20:	bfc4      	itt	gt
    8d22:	2300      	movgt	r3, #0
    8d24:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    8d28:	463a      	mov	r2, r7
    8d2a:	4640      	mov	r0, r8
    8d2c:	4631      	mov	r1, r6
    8d2e:	f002 f8eb 	bl	af08 <memcpy>
    8d32:	e7c0      	b.n	8cb6 <cc_mbedtls_entropy_func+0x72>
    8d34:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    8d38:	466e      	mov	r6, sp
    8d3a:	e7bc      	b.n	8cb6 <cc_mbedtls_entropy_func+0x72>
    8d3c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    8d40:	e7c5      	b.n	8cce <cc_mbedtls_entropy_func+0x8a>
    8d42:	bf00      	nop
    8d44:	20000148 	.word	0x20000148
    8d48:	2000014c 	.word	0x2000014c

00008d4c <RndStartupTest.constprop.0>:
    8d4c:	b530      	push	{r4, r5, lr}
    8d4e:	b0c3      	sub	sp, #268	; 0x10c
    8d50:	22dc      	movs	r2, #220	; 0xdc
    8d52:	2100      	movs	r1, #0
    8d54:	a80b      	add	r0, sp, #44	; 0x2c
    8d56:	f002 f8fb 	bl	af50 <memset>
    8d5a:	2228      	movs	r2, #40	; 0x28
    8d5c:	2100      	movs	r1, #0
    8d5e:	a801      	add	r0, sp, #4
    8d60:	f002 f8f6 	bl	af50 <memset>
    8d64:	a801      	add	r0, sp, #4
    8d66:	f000 fec1 	bl	9aec <RNG_PLAT_SetUserRngParameters>
    8d6a:	4604      	mov	r4, r0
    8d6c:	b110      	cbz	r0, 8d74 <RndStartupTest.constprop.0+0x28>
    8d6e:	4620      	mov	r0, r4
    8d70:	b043      	add	sp, #268	; 0x10c
    8d72:	bd30      	pop	{r4, r5, pc}
    8d74:	4d18      	ldr	r5, [pc, #96]	; (8dd8 <RndStartupTest.constprop.0+0x8c>)
    8d76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8d7a:	6828      	ldr	r0, [r5, #0]
    8d7c:	f000 f93c 	bl	8ff8 <CC_PalMutexLock>
    8d80:	4604      	mov	r4, r0
    8d82:	b9c0      	cbnz	r0, 8db6 <RndStartupTest.constprop.0+0x6a>
    8d84:	2000      	movs	r0, #0
    8d86:	f000 f967 	bl	9058 <CC_PalPowerSaveModeSelect>
    8d8a:	bb00      	cbnz	r0, 8dce <RndStartupTest.constprop.0+0x82>
    8d8c:	4a13      	ldr	r2, [pc, #76]	; (8ddc <RndStartupTest.constprop.0+0x90>)
    8d8e:	a901      	add	r1, sp, #4
    8d90:	a80b      	add	r0, sp, #44	; 0x2c
    8d92:	f000 fc6f 	bl	9674 <LLF_RND_RunTrngStartupTest>
    8d96:	4604      	mov	r4, r0
    8d98:	2001      	movs	r0, #1
    8d9a:	f000 f95d 	bl	9058 <CC_PalPowerSaveModeSelect>
    8d9e:	b990      	cbnz	r0, 8dc6 <RndStartupTest.constprop.0+0x7a>
    8da0:	6828      	ldr	r0, [r5, #0]
    8da2:	f000 f931 	bl	9008 <CC_PalMutexUnlock>
    8da6:	2800      	cmp	r0, #0
    8da8:	d0e1      	beq.n	8d6e <RndStartupTest.constprop.0+0x22>
    8daa:	480d      	ldr	r0, [pc, #52]	; (8de0 <RndStartupTest.constprop.0+0x94>)
    8dac:	f7ff f9d8 	bl	8160 <CC_PalAbort>
    8db0:	4620      	mov	r0, r4
    8db2:	b043      	add	sp, #268	; 0x10c
    8db4:	bd30      	pop	{r4, r5, pc}
    8db6:	480b      	ldr	r0, [pc, #44]	; (8de4 <RndStartupTest.constprop.0+0x98>)
    8db8:	f7ff f9d2 	bl	8160 <CC_PalAbort>
    8dbc:	2c01      	cmp	r4, #1
    8dbe:	bf08      	it	eq
    8dc0:	2405      	moveq	r4, #5
    8dc2:	d0ed      	beq.n	8da0 <RndStartupTest.constprop.0+0x54>
    8dc4:	e7de      	b.n	8d84 <RndStartupTest.constprop.0+0x38>
    8dc6:	4808      	ldr	r0, [pc, #32]	; (8de8 <RndStartupTest.constprop.0+0x9c>)
    8dc8:	f7ff f9ca 	bl	8160 <CC_PalAbort>
    8dcc:	e7e8      	b.n	8da0 <RndStartupTest.constprop.0+0x54>
    8dce:	4807      	ldr	r0, [pc, #28]	; (8dec <RndStartupTest.constprop.0+0xa0>)
    8dd0:	f7ff f9c6 	bl	8160 <CC_PalAbort>
    8dd4:	e7da      	b.n	8d8c <RndStartupTest.constprop.0+0x40>
    8dd6:	bf00      	nop
    8dd8:	20000140 	.word	0x20000140
    8ddc:	200013f4 	.word	0x200013f4
    8de0:	0000ce40 	.word	0x0000ce40
    8de4:	0000cde8 	.word	0x0000cde8
    8de8:	0000ce20 	.word	0x0000ce20
    8dec:	0000ce00 	.word	0x0000ce00

00008df0 <CC_LibInit>:
    8df0:	b510      	push	{r4, lr}
    8df2:	b082      	sub	sp, #8
    8df4:	f000 f854 	bl	8ea0 <CC_HalInit>
    8df8:	b128      	cbz	r0, 8e06 <CC_LibInit+0x16>
    8dfa:	f000 f8a3 	bl	8f44 <CC_PalTerminate>
    8dfe:	2403      	movs	r4, #3
    8e00:	4620      	mov	r0, r4
    8e02:	b002      	add	sp, #8
    8e04:	bd10      	pop	{r4, pc}
    8e06:	f000 f86f 	bl	8ee8 <CC_PalInit>
    8e0a:	b9d0      	cbnz	r0, 8e42 <CC_LibInit+0x52>
    8e0c:	f000 f924 	bl	9058 <CC_PalPowerSaveModeSelect>
    8e10:	b9d8      	cbnz	r0, 8e4a <CC_LibInit+0x5a>
    8e12:	4b1e      	ldr	r3, [pc, #120]	; (8e8c <CC_LibInit+0x9c>)
    8e14:	681b      	ldr	r3, [r3, #0]
    8e16:	0e1b      	lsrs	r3, r3, #24
    8e18:	2bf0      	cmp	r3, #240	; 0xf0
    8e1a:	d10a      	bne.n	8e32 <CC_LibInit+0x42>
    8e1c:	4a1c      	ldr	r2, [pc, #112]	; (8e90 <CC_LibInit+0xa0>)
    8e1e:	4b1d      	ldr	r3, [pc, #116]	; (8e94 <CC_LibInit+0xa4>)
    8e20:	6812      	ldr	r2, [r2, #0]
    8e22:	429a      	cmp	r2, r3
    8e24:	d029      	beq.n	8e7a <CC_LibInit+0x8a>
    8e26:	f000 f83d 	bl	8ea4 <CC_HalTerminate>
    8e2a:	2407      	movs	r4, #7
    8e2c:	f000 f88a 	bl	8f44 <CC_PalTerminate>
    8e30:	e7e6      	b.n	8e00 <CC_LibInit+0x10>
    8e32:	f000 f837 	bl	8ea4 <CC_HalTerminate>
    8e36:	f000 f885 	bl	8f44 <CC_PalTerminate>
    8e3a:	2406      	movs	r4, #6
    8e3c:	4620      	mov	r0, r4
    8e3e:	b002      	add	sp, #8
    8e40:	bd10      	pop	{r4, pc}
    8e42:	2404      	movs	r4, #4
    8e44:	4620      	mov	r0, r4
    8e46:	b002      	add	sp, #8
    8e48:	bd10      	pop	{r4, pc}
    8e4a:	f000 f82b 	bl	8ea4 <CC_HalTerminate>
    8e4e:	f000 f879 	bl	8f44 <CC_PalTerminate>
    8e52:	f7ff ff7b 	bl	8d4c <RndStartupTest.constprop.0>
    8e56:	4604      	mov	r4, r0
    8e58:	b958      	cbnz	r0, 8e72 <CC_LibInit+0x82>
    8e5a:	4602      	mov	r2, r0
    8e5c:	4601      	mov	r1, r0
    8e5e:	f7ff f9a7 	bl	81b0 <nrf_cc3xx_platform_ctr_drbg_init>
    8e62:	b930      	cbnz	r0, 8e72 <CC_LibInit+0x82>
    8e64:	490c      	ldr	r1, [pc, #48]	; (8e98 <CC_LibInit+0xa8>)
    8e66:	ab01      	add	r3, sp, #4
    8e68:	2268      	movs	r2, #104	; 0x68
    8e6a:	f7ff f9d5 	bl	8218 <nrf_cc3xx_platform_ctr_drbg_get>
    8e6e:	2800      	cmp	r0, #0
    8e70:	d0c6      	beq.n	8e00 <CC_LibInit+0x10>
    8e72:	2405      	movs	r4, #5
    8e74:	4620      	mov	r0, r4
    8e76:	b002      	add	sp, #8
    8e78:	bd10      	pop	{r4, pc}
    8e7a:	2001      	movs	r0, #1
    8e7c:	f000 f8ec 	bl	9058 <CC_PalPowerSaveModeSelect>
    8e80:	2800      	cmp	r0, #0
    8e82:	d1e2      	bne.n	8e4a <CC_LibInit+0x5a>
    8e84:	4b05      	ldr	r3, [pc, #20]	; (8e9c <CC_LibInit+0xac>)
    8e86:	6018      	str	r0, [r3, #0]
    8e88:	e7e3      	b.n	8e52 <CC_LibInit+0x62>
    8e8a:	bf00      	nop
    8e8c:	5002b928 	.word	0x5002b928
    8e90:	5002ba24 	.word	0x5002ba24
    8e94:	20e00000 	.word	0x20e00000
    8e98:	2000138c 	.word	0x2000138c
    8e9c:	5002ba0c 	.word	0x5002ba0c

00008ea0 <CC_HalInit>:
    8ea0:	2000      	movs	r0, #0
    8ea2:	4770      	bx	lr

00008ea4 <CC_HalTerminate>:
    8ea4:	2000      	movs	r0, #0
    8ea6:	4770      	bx	lr

00008ea8 <CC_HalClearInterruptBit>:
    8ea8:	0543      	lsls	r3, r0, #21
    8eaa:	d503      	bpl.n	8eb4 <CC_HalClearInterruptBit+0xc>
    8eac:	4b03      	ldr	r3, [pc, #12]	; (8ebc <CC_HalClearInterruptBit+0x14>)
    8eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8eb2:	601a      	str	r2, [r3, #0]
    8eb4:	4b02      	ldr	r3, [pc, #8]	; (8ec0 <CC_HalClearInterruptBit+0x18>)
    8eb6:	6018      	str	r0, [r3, #0]
    8eb8:	4770      	bx	lr
    8eba:	bf00      	nop
    8ebc:	5002b108 	.word	0x5002b108
    8ec0:	5002ba08 	.word	0x5002ba08

00008ec4 <CC_HalMaskInterrupt>:
    8ec4:	4b01      	ldr	r3, [pc, #4]	; (8ecc <CC_HalMaskInterrupt+0x8>)
    8ec6:	6018      	str	r0, [r3, #0]
    8ec8:	4770      	bx	lr
    8eca:	bf00      	nop
    8ecc:	5002ba04 	.word	0x5002ba04

00008ed0 <CC_HalWaitInterrupt>:
    8ed0:	b108      	cbz	r0, 8ed6 <CC_HalWaitInterrupt+0x6>
    8ed2:	f000 b86f 	b.w	8fb4 <CC_PalWaitInterrupt>
    8ed6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    8eda:	4770      	bx	lr

00008edc <CC_HalWaitInterruptRND>:
    8edc:	b108      	cbz	r0, 8ee2 <CC_HalWaitInterruptRND+0x6>
    8ede:	f000 b84f 	b.w	8f80 <CC_PalWaitInterruptRND>
    8ee2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    8ee6:	4770      	bx	lr

00008ee8 <CC_PalInit>:
    8ee8:	b510      	push	{r4, lr}
    8eea:	4811      	ldr	r0, [pc, #68]	; (8f30 <CC_PalInit+0x48>)
    8eec:	f000 f870 	bl	8fd0 <CC_PalMutexCreate>
    8ef0:	b100      	cbz	r0, 8ef4 <CC_PalInit+0xc>
    8ef2:	bd10      	pop	{r4, pc}
    8ef4:	480f      	ldr	r0, [pc, #60]	; (8f34 <CC_PalInit+0x4c>)
    8ef6:	f000 f86b 	bl	8fd0 <CC_PalMutexCreate>
    8efa:	2800      	cmp	r0, #0
    8efc:	d1f9      	bne.n	8ef2 <CC_PalInit+0xa>
    8efe:	4c0e      	ldr	r4, [pc, #56]	; (8f38 <CC_PalInit+0x50>)
    8f00:	4620      	mov	r0, r4
    8f02:	f000 f865 	bl	8fd0 <CC_PalMutexCreate>
    8f06:	2800      	cmp	r0, #0
    8f08:	d1f3      	bne.n	8ef2 <CC_PalInit+0xa>
    8f0a:	4b0c      	ldr	r3, [pc, #48]	; (8f3c <CC_PalInit+0x54>)
    8f0c:	480c      	ldr	r0, [pc, #48]	; (8f40 <CC_PalInit+0x58>)
    8f0e:	601c      	str	r4, [r3, #0]
    8f10:	f000 f85e 	bl	8fd0 <CC_PalMutexCreate>
    8f14:	4601      	mov	r1, r0
    8f16:	2800      	cmp	r0, #0
    8f18:	d1eb      	bne.n	8ef2 <CC_PalInit+0xa>
    8f1a:	f000 f82d 	bl	8f78 <CC_PalDmaInit>
    8f1e:	4604      	mov	r4, r0
    8f20:	b108      	cbz	r0, 8f26 <CC_PalInit+0x3e>
    8f22:	4620      	mov	r0, r4
    8f24:	bd10      	pop	{r4, pc}
    8f26:	f000 f879 	bl	901c <CC_PalPowerSaveModeInit>
    8f2a:	4620      	mov	r0, r4
    8f2c:	e7fa      	b.n	8f24 <CC_PalInit+0x3c>
    8f2e:	bf00      	nop
    8f30:	2000013c 	.word	0x2000013c
    8f34:	20000130 	.word	0x20000130
    8f38:	20000138 	.word	0x20000138
    8f3c:	20000140 	.word	0x20000140
    8f40:	20000134 	.word	0x20000134

00008f44 <CC_PalTerminate>:
    8f44:	b508      	push	{r3, lr}
    8f46:	4808      	ldr	r0, [pc, #32]	; (8f68 <CC_PalTerminate+0x24>)
    8f48:	f000 f84c 	bl	8fe4 <CC_PalMutexDestroy>
    8f4c:	4807      	ldr	r0, [pc, #28]	; (8f6c <CC_PalTerminate+0x28>)
    8f4e:	f000 f849 	bl	8fe4 <CC_PalMutexDestroy>
    8f52:	4807      	ldr	r0, [pc, #28]	; (8f70 <CC_PalTerminate+0x2c>)
    8f54:	f000 f846 	bl	8fe4 <CC_PalMutexDestroy>
    8f58:	4806      	ldr	r0, [pc, #24]	; (8f74 <CC_PalTerminate+0x30>)
    8f5a:	f000 f843 	bl	8fe4 <CC_PalMutexDestroy>
    8f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8f62:	f000 b80b 	b.w	8f7c <CC_PalDmaTerminate>
    8f66:	bf00      	nop
    8f68:	2000013c 	.word	0x2000013c
    8f6c:	20000130 	.word	0x20000130
    8f70:	20000138 	.word	0x20000138
    8f74:	20000134 	.word	0x20000134

00008f78 <CC_PalDmaInit>:
    8f78:	2000      	movs	r0, #0
    8f7a:	4770      	bx	lr

00008f7c <CC_PalDmaTerminate>:
    8f7c:	4770      	bx	lr
    8f7e:	bf00      	nop

00008f80 <CC_PalWaitInterruptRND>:
    8f80:	b410      	push	{r4}
    8f82:	4c08      	ldr	r4, [pc, #32]	; (8fa4 <CC_PalWaitInterruptRND+0x24>)
    8f84:	4602      	mov	r2, r0
    8f86:	6823      	ldr	r3, [r4, #0]
    8f88:	4213      	tst	r3, r2
    8f8a:	d0fc      	beq.n	8f86 <CC_PalWaitInterruptRND+0x6>
    8f8c:	b121      	cbz	r1, 8f98 <CC_PalWaitInterruptRND+0x18>
    8f8e:	4b06      	ldr	r3, [pc, #24]	; (8fa8 <CC_PalWaitInterruptRND+0x28>)
    8f90:	4806      	ldr	r0, [pc, #24]	; (8fac <CC_PalWaitInterruptRND+0x2c>)
    8f92:	681b      	ldr	r3, [r3, #0]
    8f94:	600b      	str	r3, [r1, #0]
    8f96:	6003      	str	r3, [r0, #0]
    8f98:	4b05      	ldr	r3, [pc, #20]	; (8fb0 <CC_PalWaitInterruptRND+0x30>)
    8f9a:	601a      	str	r2, [r3, #0]
    8f9c:	2000      	movs	r0, #0
    8f9e:	bc10      	pop	{r4}
    8fa0:	4770      	bx	lr
    8fa2:	bf00      	nop
    8fa4:	5002ba00 	.word	0x5002ba00
    8fa8:	5002b104 	.word	0x5002b104
    8fac:	5002b108 	.word	0x5002b108
    8fb0:	5002ba08 	.word	0x5002ba08

00008fb4 <CC_PalWaitInterrupt>:
    8fb4:	4904      	ldr	r1, [pc, #16]	; (8fc8 <CC_PalWaitInterrupt+0x14>)
    8fb6:	4602      	mov	r2, r0
    8fb8:	680b      	ldr	r3, [r1, #0]
    8fba:	421a      	tst	r2, r3
    8fbc:	d0fc      	beq.n	8fb8 <CC_PalWaitInterrupt+0x4>
    8fbe:	4b03      	ldr	r3, [pc, #12]	; (8fcc <CC_PalWaitInterrupt+0x18>)
    8fc0:	2000      	movs	r0, #0
    8fc2:	601a      	str	r2, [r3, #0]
    8fc4:	4770      	bx	lr
    8fc6:	bf00      	nop
    8fc8:	5002ba00 	.word	0x5002ba00
    8fcc:	5002ba08 	.word	0x5002ba08

00008fd0 <CC_PalMutexCreate>:
    8fd0:	b508      	push	{r3, lr}
    8fd2:	4b03      	ldr	r3, [pc, #12]	; (8fe0 <CC_PalMutexCreate+0x10>)
    8fd4:	6802      	ldr	r2, [r0, #0]
    8fd6:	681b      	ldr	r3, [r3, #0]
    8fd8:	6810      	ldr	r0, [r2, #0]
    8fda:	4798      	blx	r3
    8fdc:	2000      	movs	r0, #0
    8fde:	bd08      	pop	{r3, pc}
    8fe0:	200000f0 	.word	0x200000f0

00008fe4 <CC_PalMutexDestroy>:
    8fe4:	b508      	push	{r3, lr}
    8fe6:	4b03      	ldr	r3, [pc, #12]	; (8ff4 <CC_PalMutexDestroy+0x10>)
    8fe8:	6802      	ldr	r2, [r0, #0]
    8fea:	685b      	ldr	r3, [r3, #4]
    8fec:	6810      	ldr	r0, [r2, #0]
    8fee:	4798      	blx	r3
    8ff0:	2000      	movs	r0, #0
    8ff2:	bd08      	pop	{r3, pc}
    8ff4:	200000f0 	.word	0x200000f0

00008ff8 <CC_PalMutexLock>:
    8ff8:	4b02      	ldr	r3, [pc, #8]	; (9004 <CC_PalMutexLock+0xc>)
    8ffa:	6802      	ldr	r2, [r0, #0]
    8ffc:	689b      	ldr	r3, [r3, #8]
    8ffe:	6810      	ldr	r0, [r2, #0]
    9000:	4718      	bx	r3
    9002:	bf00      	nop
    9004:	200000f0 	.word	0x200000f0

00009008 <CC_PalMutexUnlock>:
    9008:	b508      	push	{r3, lr}
    900a:	4b03      	ldr	r3, [pc, #12]	; (9018 <CC_PalMutexUnlock+0x10>)
    900c:	6802      	ldr	r2, [r0, #0]
    900e:	68db      	ldr	r3, [r3, #12]
    9010:	6810      	ldr	r0, [r2, #0]
    9012:	4798      	blx	r3
    9014:	2000      	movs	r0, #0
    9016:	bd08      	pop	{r3, pc}
    9018:	200000f0 	.word	0x200000f0

0000901c <CC_PalPowerSaveModeInit>:
    901c:	b570      	push	{r4, r5, r6, lr}
    901e:	4c09      	ldr	r4, [pc, #36]	; (9044 <CC_PalPowerSaveModeInit+0x28>)
    9020:	4d09      	ldr	r5, [pc, #36]	; (9048 <CC_PalPowerSaveModeInit+0x2c>)
    9022:	6920      	ldr	r0, [r4, #16]
    9024:	68ab      	ldr	r3, [r5, #8]
    9026:	4798      	blx	r3
    9028:	b118      	cbz	r0, 9032 <CC_PalPowerSaveModeInit+0x16>
    902a:	4b08      	ldr	r3, [pc, #32]	; (904c <CC_PalPowerSaveModeInit+0x30>)
    902c:	4808      	ldr	r0, [pc, #32]	; (9050 <CC_PalPowerSaveModeInit+0x34>)
    902e:	685b      	ldr	r3, [r3, #4]
    9030:	4798      	blx	r3
    9032:	4a08      	ldr	r2, [pc, #32]	; (9054 <CC_PalPowerSaveModeInit+0x38>)
    9034:	68eb      	ldr	r3, [r5, #12]
    9036:	6920      	ldr	r0, [r4, #16]
    9038:	2100      	movs	r1, #0
    903a:	6011      	str	r1, [r2, #0]
    903c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9040:	4718      	bx	r3
    9042:	bf00      	nop
    9044:	20000100 	.word	0x20000100
    9048:	200000f0 	.word	0x200000f0
    904c:	200000e0 	.word	0x200000e0
    9050:	0000ce58 	.word	0x0000ce58
    9054:	20001614 	.word	0x20001614

00009058 <CC_PalPowerSaveModeSelect>:
    9058:	b570      	push	{r4, r5, r6, lr}
    905a:	4d1a      	ldr	r5, [pc, #104]	; (90c4 <CC_PalPowerSaveModeSelect+0x6c>)
    905c:	4e1a      	ldr	r6, [pc, #104]	; (90c8 <CC_PalPowerSaveModeSelect+0x70>)
    905e:	4604      	mov	r4, r0
    9060:	68b2      	ldr	r2, [r6, #8]
    9062:	6928      	ldr	r0, [r5, #16]
    9064:	4790      	blx	r2
    9066:	b9f0      	cbnz	r0, 90a6 <CC_PalPowerSaveModeSelect+0x4e>
    9068:	b15c      	cbz	r4, 9082 <CC_PalPowerSaveModeSelect+0x2a>
    906a:	4c18      	ldr	r4, [pc, #96]	; (90cc <CC_PalPowerSaveModeSelect+0x74>)
    906c:	6823      	ldr	r3, [r4, #0]
    906e:	b1ab      	cbz	r3, 909c <CC_PalPowerSaveModeSelect+0x44>
    9070:	2b01      	cmp	r3, #1
    9072:	d01a      	beq.n	90aa <CC_PalPowerSaveModeSelect+0x52>
    9074:	3b01      	subs	r3, #1
    9076:	6023      	str	r3, [r4, #0]
    9078:	6928      	ldr	r0, [r5, #16]
    907a:	68f3      	ldr	r3, [r6, #12]
    907c:	4798      	blx	r3
    907e:	2000      	movs	r0, #0
    9080:	bd70      	pop	{r4, r5, r6, pc}
    9082:	4c12      	ldr	r4, [pc, #72]	; (90cc <CC_PalPowerSaveModeSelect+0x74>)
    9084:	6821      	ldr	r1, [r4, #0]
    9086:	b939      	cbnz	r1, 9098 <CC_PalPowerSaveModeSelect+0x40>
    9088:	4b11      	ldr	r3, [pc, #68]	; (90d0 <CC_PalPowerSaveModeSelect+0x78>)
    908a:	4a12      	ldr	r2, [pc, #72]	; (90d4 <CC_PalPowerSaveModeSelect+0x7c>)
    908c:	2001      	movs	r0, #1
    908e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    9092:	6813      	ldr	r3, [r2, #0]
    9094:	2b00      	cmp	r3, #0
    9096:	d1fc      	bne.n	9092 <CC_PalPowerSaveModeSelect+0x3a>
    9098:	3101      	adds	r1, #1
    909a:	6021      	str	r1, [r4, #0]
    909c:	68f3      	ldr	r3, [r6, #12]
    909e:	6928      	ldr	r0, [r5, #16]
    90a0:	4798      	blx	r3
    90a2:	2000      	movs	r0, #0
    90a4:	bd70      	pop	{r4, r5, r6, pc}
    90a6:	480c      	ldr	r0, [pc, #48]	; (90d8 <CC_PalPowerSaveModeSelect+0x80>)
    90a8:	bd70      	pop	{r4, r5, r6, pc}
    90aa:	4a0a      	ldr	r2, [pc, #40]	; (90d4 <CC_PalPowerSaveModeSelect+0x7c>)
    90ac:	6813      	ldr	r3, [r2, #0]
    90ae:	2b00      	cmp	r3, #0
    90b0:	d1fc      	bne.n	90ac <CC_PalPowerSaveModeSelect+0x54>
    90b2:	4a07      	ldr	r2, [pc, #28]	; (90d0 <CC_PalPowerSaveModeSelect+0x78>)
    90b4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    90b8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    90bc:	f7ff ff02 	bl	8ec4 <CC_HalMaskInterrupt>
    90c0:	6823      	ldr	r3, [r4, #0]
    90c2:	e7d7      	b.n	9074 <CC_PalPowerSaveModeSelect+0x1c>
    90c4:	20000100 	.word	0x20000100
    90c8:	200000f0 	.word	0x200000f0
    90cc:	20001614 	.word	0x20001614
    90d0:	5002a000 	.word	0x5002a000
    90d4:	5002b910 	.word	0x5002b910
    90d8:	ffff8fe9 	.word	0xffff8fe9

000090dc <mutex_init>:
    90dc:	4b01      	ldr	r3, [pc, #4]	; (90e4 <mutex_init+0x8>)
    90de:	681b      	ldr	r3, [r3, #0]
    90e0:	4718      	bx	r3
    90e2:	bf00      	nop
    90e4:	200000f0 	.word	0x200000f0

000090e8 <mutex_lock>:
    90e8:	4b01      	ldr	r3, [pc, #4]	; (90f0 <mutex_lock+0x8>)
    90ea:	689b      	ldr	r3, [r3, #8]
    90ec:	4718      	bx	r3
    90ee:	bf00      	nop
    90f0:	200000f0 	.word	0x200000f0

000090f4 <mutex_unlock>:
    90f4:	4b01      	ldr	r3, [pc, #4]	; (90fc <mutex_unlock+0x8>)
    90f6:	68db      	ldr	r3, [r3, #12]
    90f8:	4718      	bx	r3
    90fa:	bf00      	nop
    90fc:	200000f0 	.word	0x200000f0

00009100 <startTrngHW>:
    9100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9104:	2800      	cmp	r0, #0
    9106:	d07b      	beq.n	9200 <startTrngHW+0x100>
    9108:	460c      	mov	r4, r1
    910a:	2900      	cmp	r1, #0
    910c:	d078      	beq.n	9200 <startTrngHW+0x100>
    910e:	461d      	mov	r5, r3
    9110:	2b00      	cmp	r3, #0
    9112:	d075      	beq.n	9200 <startTrngHW+0x100>
    9114:	4606      	mov	r6, r0
    9116:	b122      	cbz	r2, 9122 <startTrngHW+0x22>
    9118:	2201      	movs	r2, #1
    911a:	2300      	movs	r3, #0
    911c:	602a      	str	r2, [r5, #0]
    911e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    9122:	682b      	ldr	r3, [r5, #0]
    9124:	2b00      	cmp	r3, #0
    9126:	d067      	beq.n	91f8 <startTrngHW+0xf8>
    9128:	4629      	mov	r1, r5
    912a:	4620      	mov	r0, r4
    912c:	f000 fda4 	bl	9c78 <LLF_RND_GetFastestRosc>
    9130:	4607      	mov	r7, r0
    9132:	2800      	cmp	r0, #0
    9134:	d161      	bne.n	91fa <startTrngHW+0xfa>
    9136:	6828      	ldr	r0, [r5, #0]
    9138:	4621      	mov	r1, r4
    913a:	f000 fd7f 	bl	9c3c <LLF_RND_GetRoscSampleCnt>
    913e:	4607      	mov	r7, r0
    9140:	2800      	cmp	r0, #0
    9142:	d15a      	bne.n	91fa <startTrngHW+0xfa>
    9144:	682b      	ldr	r3, [r5, #0]
    9146:	2b08      	cmp	r3, #8
    9148:	d069      	beq.n	921e <startTrngHW+0x11e>
    914a:	2b04      	cmp	r3, #4
    914c:	d06a      	beq.n	9224 <startTrngHW+0x124>
    914e:	f1a3 0802 	sub.w	r8, r3, #2
    9152:	fab8 f888 	clz	r8, r8
    9156:	ea4f 1858 	mov.w	r8, r8, lsr #5
    915a:	4b34      	ldr	r3, [pc, #208]	; (922c <startTrngHW+0x12c>)
    915c:	4934      	ldr	r1, [pc, #208]	; (9230 <startTrngHW+0x130>)
    915e:	4a35      	ldr	r2, [pc, #212]	; (9234 <startTrngHW+0x134>)
    9160:	2001      	movs	r0, #1
    9162:	6018      	str	r0, [r3, #0]
    9164:	469c      	mov	ip, r3
    9166:	6008      	str	r0, [r1, #0]
    9168:	f8cc 0000 	str.w	r0, [ip]
    916c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    916e:	6013      	str	r3, [r2, #0]
    9170:	6811      	ldr	r1, [r2, #0]
    9172:	428b      	cmp	r3, r1
    9174:	d1f8      	bne.n	9168 <startTrngHW+0x68>
    9176:	4b30      	ldr	r3, [pc, #192]	; (9238 <startTrngHW+0x138>)
    9178:	f04f 0900 	mov.w	r9, #0
    917c:	f8c3 9000 	str.w	r9, [r3]
    9180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9184:	f7ff fe90 	bl	8ea8 <CC_HalClearInterruptBit>
    9188:	4b2c      	ldr	r3, [pc, #176]	; (923c <startTrngHW+0x13c>)
    918a:	f06f 021b 	mvn.w	r2, #27
    918e:	601a      	str	r2, [r3, #0]
    9190:	4648      	mov	r0, r9
    9192:	f7ff fe97 	bl	8ec4 <CC_HalMaskInterrupt>
    9196:	4a2a      	ldr	r2, [pc, #168]	; (9240 <startTrngHW+0x140>)
    9198:	4b2a      	ldr	r3, [pc, #168]	; (9244 <startTrngHW+0x144>)
    919a:	f8c2 8000 	str.w	r8, [r2]
    919e:	6818      	ldr	r0, [r3, #0]
    91a0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    91a4:	f7ff fe8e 	bl	8ec4 <CC_HalMaskInterrupt>
    91a8:	4b27      	ldr	r3, [pc, #156]	; (9248 <startTrngHW+0x148>)
    91aa:	220a      	movs	r2, #10
    91ac:	601a      	str	r2, [r3, #0]
    91ae:	9908      	ldr	r1, [sp, #32]
    91b0:	6923      	ldr	r3, [r4, #16]
    91b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91b4:	2901      	cmp	r1, #1
    91b6:	d027      	beq.n	9208 <startTrngHW+0x108>
    91b8:	4924      	ldr	r1, [pc, #144]	; (924c <startTrngHW+0x14c>)
    91ba:	fba1 1303 	umull	r1, r3, r1, r3
    91be:	091b      	lsrs	r3, r3, #4
    91c0:	fb03 f302 	mul.w	r3, r3, r2
    91c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91c8:	4921      	ldr	r1, [pc, #132]	; (9250 <startTrngHW+0x150>)
    91ca:	4a1b      	ldr	r2, [pc, #108]	; (9238 <startTrngHW+0x138>)
    91cc:	03db      	lsls	r3, r3, #15
    91ce:	099b      	lsrs	r3, r3, #6
    91d0:	600b      	str	r3, [r1, #0]
    91d2:	2301      	movs	r3, #1
    91d4:	6013      	str	r3, [r2, #0]
    91d6:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
    91da:	682a      	ldr	r2, [r5, #0]
    91dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    91e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    91e4:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    91e8:	682a      	ldr	r2, [r5, #0]
    91ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    91ee:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    91f2:	4638      	mov	r0, r7
    91f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    91f8:	4f16      	ldr	r7, [pc, #88]	; (9254 <startTrngHW+0x154>)
    91fa:	4638      	mov	r0, r7
    91fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9200:	4f15      	ldr	r7, [pc, #84]	; (9258 <startTrngHW+0x158>)
    9202:	4638      	mov	r0, r7
    9204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9208:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    920c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    9210:	3101      	adds	r1, #1
    9212:	d002      	beq.n	921a <startTrngHW+0x11a>
    9214:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    9218:	e7ce      	b.n	91b8 <startTrngHW+0xb8>
    921a:	2316      	movs	r3, #22
    921c:	e7d0      	b.n	91c0 <startTrngHW+0xc0>
    921e:	f04f 0803 	mov.w	r8, #3
    9222:	e79a      	b.n	915a <startTrngHW+0x5a>
    9224:	f04f 0802 	mov.w	r8, #2
    9228:	e797      	b.n	915a <startTrngHW+0x5a>
    922a:	bf00      	nop
    922c:	5002b1c4 	.word	0x5002b1c4
    9230:	5002b140 	.word	0x5002b140
    9234:	5002b130 	.word	0x5002b130
    9238:	5002b12c 	.word	0x5002b12c
    923c:	5002b100 	.word	0x5002b100
    9240:	5002b10c 	.word	0x5002b10c
    9244:	5002ba04 	.word	0x5002ba04
    9248:	5002b138 	.word	0x5002b138
    924c:	aaaaaaab 	.word	0xaaaaaaab
    9250:	5002b1d8 	.word	0x5002b1d8
    9254:	00f10c31 	.word	0x00f10c31
    9258:	00f10c35 	.word	0x00f10c35

0000925c <LLF_RND_RepetitionCounterTest.part.0>:
    925c:	b4f0      	push	{r4, r5, r6, r7}
    925e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
    9262:	2400      	movs	r4, #0
    9264:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    9268:	4626      	mov	r6, r4
    926a:	4627      	mov	r7, r4
    926c:	e006      	b.n	927c <LLF_RND_RepetitionCounterTest.part.0+0x20>
    926e:	429f      	cmp	r7, r3
    9270:	d016      	beq.n	92a0 <LLF_RND_RepetitionCounterTest.part.0+0x44>
    9272:	2601      	movs	r6, #1
    9274:	4565      	cmp	r5, ip
    9276:	d819      	bhi.n	92ac <LLF_RND_RepetitionCounterTest.part.0+0x50>
    9278:	462c      	mov	r4, r5
    927a:	461f      	mov	r7, r3
    927c:	0963      	lsrs	r3, r4, #5
    927e:	f004 011f 	and.w	r1, r4, #31
    9282:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    9286:	291f      	cmp	r1, #31
    9288:	fa23 f301 	lsr.w	r3, r3, r1
    928c:	f104 0501 	add.w	r5, r4, #1
    9290:	bf18      	it	ne
    9292:	f003 0301 	andne.w	r3, r3, #1
    9296:	2c00      	cmp	r4, #0
    9298:	d1e9      	bne.n	926e <LLF_RND_RepetitionCounterTest.part.0+0x12>
    929a:	2601      	movs	r6, #1
    929c:	4635      	mov	r5, r6
    929e:	e7eb      	b.n	9278 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
    92a0:	3601      	adds	r6, #1
    92a2:	4296      	cmp	r6, r2
    92a4:	d1e6      	bne.n	9274 <LLF_RND_RepetitionCounterTest.part.0+0x18>
    92a6:	4803      	ldr	r0, [pc, #12]	; (92b4 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
    92a8:	bcf0      	pop	{r4, r5, r6, r7}
    92aa:	4770      	bx	lr
    92ac:	2000      	movs	r0, #0
    92ae:	bcf0      	pop	{r4, r5, r6, r7}
    92b0:	4770      	bx	lr
    92b2:	bf00      	nop
    92b4:	00f10c36 	.word	0x00f10c36

000092b8 <LLF_RND_AdaptiveProportionTest>:
    92b8:	2800      	cmp	r0, #0
    92ba:	d061      	beq.n	9380 <LLF_RND_AdaptiveProportionTest+0xc8>
    92bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92c0:	1e4c      	subs	r4, r1, #1
    92c2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    92c6:	d227      	bcs.n	9318 <LLF_RND_AdaptiveProportionTest+0x60>
    92c8:	b333      	cbz	r3, 9318 <LLF_RND_AdaptiveProportionTest+0x60>
    92ca:	b32a      	cbz	r2, 9318 <LLF_RND_AdaptiveProportionTest+0x60>
    92cc:	00cd      	lsls	r5, r1, #3
    92ce:	2b01      	cmp	r3, #1
    92d0:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
    92d4:	d030      	beq.n	9338 <LLF_RND_AdaptiveProportionTest+0x80>
    92d6:	2100      	movs	r1, #0
    92d8:	468c      	mov	ip, r1
    92da:	460f      	mov	r7, r1
    92dc:	460e      	mov	r6, r1
    92de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    92e2:	094c      	lsrs	r4, r1, #5
    92e4:	f001 051f 	and.w	r5, r1, #31
    92e8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    92ec:	2d1f      	cmp	r5, #31
    92ee:	fa24 f405 	lsr.w	r4, r4, r5
    92f2:	bf18      	it	ne
    92f4:	f004 0401 	andne.w	r4, r4, #1
    92f8:	b921      	cbnz	r1, 9304 <LLF_RND_AdaptiveProportionTest+0x4c>
    92fa:	2601      	movs	r6, #1
    92fc:	46b4      	mov	ip, r6
    92fe:	4631      	mov	r1, r6
    9300:	4627      	mov	r7, r4
    9302:	e7ee      	b.n	92e2 <LLF_RND_AdaptiveProportionTest+0x2a>
    9304:	42b3      	cmp	r3, r6
    9306:	d013      	beq.n	9330 <LLF_RND_AdaptiveProportionTest+0x78>
    9308:	42a7      	cmp	r7, r4
    930a:	d101      	bne.n	9310 <LLF_RND_AdaptiveProportionTest+0x58>
    930c:	f10c 0c01 	add.w	ip, ip, #1
    9310:	4546      	cmp	r6, r8
    9312:	d104      	bne.n	931e <LLF_RND_AdaptiveProportionTest+0x66>
    9314:	4562      	cmp	r2, ip
    9316:	d202      	bcs.n	931e <LLF_RND_AdaptiveProportionTest+0x66>
    9318:	481a      	ldr	r0, [pc, #104]	; (9384 <LLF_RND_AdaptiveProportionTest+0xcc>)
    931a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    931e:	463c      	mov	r4, r7
    9320:	3101      	adds	r1, #1
    9322:	458e      	cmp	lr, r1
    9324:	f106 0601 	add.w	r6, r6, #1
    9328:	d2ea      	bcs.n	9300 <LLF_RND_AdaptiveProportionTest+0x48>
    932a:	2000      	movs	r0, #0
    932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9330:	2600      	movs	r6, #0
    9332:	f04f 0c01 	mov.w	ip, #1
    9336:	e7f3      	b.n	9320 <LLF_RND_AdaptiveProportionTest+0x68>
    9338:	2600      	movs	r6, #0
    933a:	46b4      	mov	ip, r6
    933c:	4637      	mov	r7, r6
    933e:	4634      	mov	r4, r6
    9340:	0961      	lsrs	r1, r4, #5
    9342:	f004 031f 	and.w	r3, r4, #31
    9346:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    934a:	2b1f      	cmp	r3, #31
    934c:	fa21 f103 	lsr.w	r1, r1, r3
    9350:	bf18      	it	ne
    9352:	f001 0101 	andne.w	r1, r1, #1
    9356:	b13c      	cbz	r4, 9368 <LLF_RND_AdaptiveProportionTest+0xb0>
    9358:	b95f      	cbnz	r7, 9372 <LLF_RND_AdaptiveProportionTest+0xba>
    935a:	458c      	cmp	ip, r1
    935c:	d001      	beq.n	9362 <LLF_RND_AdaptiveProportionTest+0xaa>
    935e:	4661      	mov	r1, ip
    9360:	e008      	b.n	9374 <LLF_RND_AdaptiveProportionTest+0xbc>
    9362:	3601      	adds	r6, #1
    9364:	4661      	mov	r1, ip
    9366:	e005      	b.n	9374 <LLF_RND_AdaptiveProportionTest+0xbc>
    9368:	2601      	movs	r6, #1
    936a:	4634      	mov	r4, r6
    936c:	468c      	mov	ip, r1
    936e:	2701      	movs	r7, #1
    9370:	e7e6      	b.n	9340 <LLF_RND_AdaptiveProportionTest+0x88>
    9372:	463e      	mov	r6, r7
    9374:	42b2      	cmp	r2, r6
    9376:	d3cf      	bcc.n	9318 <LLF_RND_AdaptiveProportionTest+0x60>
    9378:	3401      	adds	r4, #1
    937a:	42ac      	cmp	r4, r5
    937c:	d1f6      	bne.n	936c <LLF_RND_AdaptiveProportionTest+0xb4>
    937e:	e7d4      	b.n	932a <LLF_RND_AdaptiveProportionTest+0x72>
    9380:	4800      	ldr	r0, [pc, #0]	; (9384 <LLF_RND_AdaptiveProportionTest+0xcc>)
    9382:	4770      	bx	lr
    9384:	00f10c37 	.word	0x00f10c37

00009388 <getTrngSource>:
    9388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    938c:	b08d      	sub	sp, #52	; 0x34
    938e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
    9392:	4607      	mov	r7, r0
    9394:	460c      	mov	r4, r1
    9396:	2d00      	cmp	r5, #0
    9398:	d14d      	bne.n	9436 <getTrngSource+0xae>
    939a:	f8d1 a010 	ldr.w	sl, [r1, #16]
    939e:	601e      	str	r6, [r3, #0]
    93a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93a2:	2100      	movs	r1, #0
    93a4:	6019      	str	r1, [r3, #0]
    93a6:	2a00      	cmp	r2, #0
    93a8:	f000 8120 	beq.w	95ec <getTrngSource+0x264>
    93ac:	4a9b      	ldr	r2, [pc, #620]	; (961c <getTrngSource+0x294>)
    93ae:	4b9c      	ldr	r3, [pc, #624]	; (9620 <getTrngSource+0x298>)
    93b0:	6811      	ldr	r1, [r2, #0]
    93b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    93b4:	681b      	ldr	r3, [r3, #0]
    93b6:	429a      	cmp	r2, r3
    93b8:	d148      	bne.n	944c <getTrngSource+0xc4>
    93ba:	290a      	cmp	r1, #10
    93bc:	d146      	bne.n	944c <getTrngSource+0xc4>
    93be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    93c2:	9304      	str	r3, [sp, #16]
    93c4:	4b97      	ldr	r3, [pc, #604]	; (9624 <getTrngSource+0x29c>)
    93c6:	fba3 230a 	umull	r2, r3, r3, sl
    93ca:	ea4f 0b93 	mov.w	fp, r3, lsr #2
    93ce:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    93d2:	f106 0208 	add.w	r2, r6, #8
    93d6:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
    93da:	2304      	movs	r3, #4
    93dc:	9203      	str	r2, [sp, #12]
    93de:	9302      	str	r3, [sp, #8]
    93e0:	46b8      	mov	r8, r7
    93e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93e4:	f8c3 a000 	str.w	sl, [r3]
    93e8:	f1ba 0f00 	cmp.w	sl, #0
    93ec:	f000 80c4 	beq.w	9578 <getTrngSource+0x1f0>
    93f0:	9e03      	ldr	r6, [sp, #12]
    93f2:	4655      	mov	r5, sl
    93f4:	f04f 0900 	mov.w	r9, #0
    93f8:	f000 fc4e 	bl	9c98 <LLF_RND_TurnOffTrng>
    93fc:	2300      	movs	r3, #0
    93fe:	9305      	str	r3, [sp, #20]
    9400:	f1b8 0f00 	cmp.w	r8, #0
    9404:	f000 80e6 	beq.w	95d4 <getTrngSource+0x24c>
    9408:	2c00      	cmp	r4, #0
    940a:	f000 80e3 	beq.w	95d4 <getTrngSource+0x24c>
    940e:	9b04      	ldr	r3, [sp, #16]
    9410:	2b00      	cmp	r3, #0
    9412:	f000 80dd 	beq.w	95d0 <getTrngSource+0x248>
    9416:	a904      	add	r1, sp, #16
    9418:	4620      	mov	r0, r4
    941a:	f000 fc2d 	bl	9c78 <LLF_RND_GetFastestRosc>
    941e:	b1b8      	cbz	r0, 9450 <getTrngSource+0xc8>
    9420:	4b81      	ldr	r3, [pc, #516]	; (9628 <getTrngSource+0x2a0>)
    9422:	4298      	cmp	r0, r3
    9424:	f040 80a8 	bne.w	9578 <getTrngSource+0x1f0>
    9428:	9002      	str	r0, [sp, #8]
    942a:	f000 fc35 	bl	9c98 <LLF_RND_TurnOffTrng>
    942e:	9802      	ldr	r0, [sp, #8]
    9430:	b00d      	add	sp, #52	; 0x34
    9432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9436:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    943a:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    943e:	3001      	adds	r0, #1
    9440:	bf14      	ite	ne
    9442:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
    9446:	f44f 7a04 	moveq.w	sl, #528	; 0x210
    944a:	e7a8      	b.n	939e <getTrngSource+0x16>
    944c:	4877      	ldr	r0, [pc, #476]	; (962c <getTrngSource+0x2a4>)
    944e:	e7eb      	b.n	9428 <getTrngSource+0xa0>
    9450:	9804      	ldr	r0, [sp, #16]
    9452:	4621      	mov	r1, r4
    9454:	f000 fbf2 	bl	9c3c <LLF_RND_GetRoscSampleCnt>
    9458:	2800      	cmp	r0, #0
    945a:	d1e1      	bne.n	9420 <getTrngSource+0x98>
    945c:	9f04      	ldr	r7, [sp, #16]
    945e:	2f08      	cmp	r7, #8
    9460:	f000 80ba 	beq.w	95d8 <getTrngSource+0x250>
    9464:	2f04      	cmp	r7, #4
    9466:	f000 80b9 	beq.w	95dc <getTrngSource+0x254>
    946a:	f1a7 0702 	sub.w	r7, r7, #2
    946e:	fab7 f787 	clz	r7, r7
    9472:	097f      	lsrs	r7, r7, #5
    9474:	496e      	ldr	r1, [pc, #440]	; (9630 <getTrngSource+0x2a8>)
    9476:	2301      	movs	r3, #1
    9478:	600b      	str	r3, [r1, #0]
    947a:	f841 3c84 	str.w	r3, [r1, #-132]
    947e:	4619      	mov	r1, r3
    9480:	4b6b      	ldr	r3, [pc, #428]	; (9630 <getTrngSource+0x2a8>)
    9482:	4867      	ldr	r0, [pc, #412]	; (9620 <getTrngSource+0x298>)
    9484:	6019      	str	r1, [r3, #0]
    9486:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9488:	6003      	str	r3, [r0, #0]
    948a:	6800      	ldr	r0, [r0, #0]
    948c:	4283      	cmp	r3, r0
    948e:	d1f7      	bne.n	9480 <getTrngSource+0xf8>
    9490:	4a68      	ldr	r2, [pc, #416]	; (9634 <getTrngSource+0x2ac>)
    9492:	2300      	movs	r3, #0
    9494:	6013      	str	r3, [r2, #0]
    9496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    949a:	f7ff fd05 	bl	8ea8 <CC_HalClearInterruptBit>
    949e:	2300      	movs	r3, #0
    94a0:	4618      	mov	r0, r3
    94a2:	4b65      	ldr	r3, [pc, #404]	; (9638 <getTrngSource+0x2b0>)
    94a4:	f06f 011b 	mvn.w	r1, #27
    94a8:	6019      	str	r1, [r3, #0]
    94aa:	f7ff fd0b 	bl	8ec4 <CC_HalMaskInterrupt>
    94ae:	4963      	ldr	r1, [pc, #396]	; (963c <getTrngSource+0x2b4>)
    94b0:	4b63      	ldr	r3, [pc, #396]	; (9640 <getTrngSource+0x2b8>)
    94b2:	600f      	str	r7, [r1, #0]
    94b4:	6818      	ldr	r0, [r3, #0]
    94b6:	4f5b      	ldr	r7, [pc, #364]	; (9624 <getTrngSource+0x29c>)
    94b8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    94bc:	f7ff fd02 	bl	8ec4 <CC_HalMaskInterrupt>
    94c0:	4b56      	ldr	r3, [pc, #344]	; (961c <getTrngSource+0x294>)
    94c2:	4860      	ldr	r0, [pc, #384]	; (9644 <getTrngSource+0x2bc>)
    94c4:	210a      	movs	r1, #10
    94c6:	6019      	str	r1, [r3, #0]
    94c8:	6921      	ldr	r1, [r4, #16]
    94ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    94cc:	fba7 c101 	umull	ip, r1, r7, r1
    94d0:	0909      	lsrs	r1, r1, #4
    94d2:	fb03 f301 	mul.w	r3, r3, r1
    94d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    94da:	03db      	lsls	r3, r3, #15
    94dc:	099b      	lsrs	r3, r3, #6
    94de:	6003      	str	r3, [r0, #0]
    94e0:	4b54      	ldr	r3, [pc, #336]	; (9634 <getTrngSource+0x2ac>)
    94e2:	2201      	movs	r2, #1
    94e4:	601a      	str	r2, [r3, #0]
    94e6:	9904      	ldr	r1, [sp, #16]
    94e8:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    94ec:	020b      	lsls	r3, r1, #8
    94ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    94f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    94f6:	4313      	orrs	r3, r2
    94f8:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    94fc:	a805      	add	r0, sp, #20
    94fe:	f000 fb8d 	bl	9c1c <LLF_RND_WaitRngInterrupt>
    9502:	9b05      	ldr	r3, [sp, #20]
    9504:	f003 031a 	and.w	r3, r3, #26
    9508:	4303      	orrs	r3, r0
    950a:	d135      	bne.n	9578 <getTrngSource+0x1f0>
    950c:	4a4e      	ldr	r2, [pc, #312]	; (9648 <getTrngSource+0x2c0>)
    950e:	4b4f      	ldr	r3, [pc, #316]	; (964c <getTrngSource+0x2c4>)
    9510:	6812      	ldr	r2, [r2, #0]
    9512:	9206      	str	r2, [sp, #24]
    9514:	681a      	ldr	r2, [r3, #0]
    9516:	9207      	str	r2, [sp, #28]
    9518:	685a      	ldr	r2, [r3, #4]
    951a:	9208      	str	r2, [sp, #32]
    951c:	689a      	ldr	r2, [r3, #8]
    951e:	9209      	str	r2, [sp, #36]	; 0x24
    9520:	68da      	ldr	r2, [r3, #12]
    9522:	920a      	str	r2, [sp, #40]	; 0x28
    9524:	3310      	adds	r3, #16
    9526:	fba7 2705 	umull	r2, r7, r7, r5
    952a:	681b      	ldr	r3, [r3, #0]
    952c:	930b      	str	r3, [sp, #44]	; 0x2c
    952e:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    9532:	d102      	bne.n	953a <getTrngSource+0x1b2>
    9534:	f1bb 0f00 	cmp.w	fp, #0
    9538:	d141      	bne.n	95be <getTrngSource+0x236>
    953a:	2218      	movs	r2, #24
    953c:	4630      	mov	r0, r6
    953e:	eb0d 0102 	add.w	r1, sp, r2
    9542:	f000 fb0f 	bl	9b64 <CC_PalMemCopyPlat>
    9546:	3d18      	subs	r5, #24
    9548:	3618      	adds	r6, #24
    954a:	f109 0901 	add.w	r9, r9, #1
    954e:	2d00      	cmp	r5, #0
    9550:	f47f af52 	bne.w	93f8 <getTrngSource+0x70>
    9554:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
    9558:	d85d      	bhi.n	9616 <getTrngSource+0x28e>
    955a:	9d03      	ldr	r5, [sp, #12]
    955c:	6962      	ldr	r2, [r4, #20]
    955e:	4651      	mov	r1, sl
    9560:	4628      	mov	r0, r5
    9562:	f7ff fe7b 	bl	925c <LLF_RND_RepetitionCounterTest.part.0>
    9566:	2800      	cmp	r0, #0
    9568:	d04b      	beq.n	9602 <getTrngSource+0x27a>
    956a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    956c:	2300      	movs	r3, #0
    956e:	6013      	str	r3, [r2, #0]
    9570:	4b2d      	ldr	r3, [pc, #180]	; (9628 <getTrngSource+0x2a0>)
    9572:	4298      	cmp	r0, r3
    9574:	f43f af58 	beq.w	9428 <getTrngSource+0xa0>
    9578:	9d04      	ldr	r5, [sp, #16]
    957a:	2d08      	cmp	r5, #8
    957c:	d034      	beq.n	95e8 <getTrngSource+0x260>
    957e:	2200      	movs	r2, #0
    9580:	ab04      	add	r3, sp, #16
    9582:	006d      	lsls	r5, r5, #1
    9584:	9200      	str	r2, [sp, #0]
    9586:	4621      	mov	r1, r4
    9588:	4640      	mov	r0, r8
    958a:	9504      	str	r5, [sp, #16]
    958c:	f7ff fdb8 	bl	9100 <startTrngHW>
    9590:	4b2f      	ldr	r3, [pc, #188]	; (9650 <getTrngSource+0x2c8>)
    9592:	4298      	cmp	r0, r3
    9594:	d024      	beq.n	95e0 <getTrngSource+0x258>
    9596:	2800      	cmp	r0, #0
    9598:	f47f af46 	bne.w	9428 <getTrngSource+0xa0>
    959c:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    95a0:	0a13      	lsrs	r3, r2, #8
    95a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    95a6:	4313      	orrs	r3, r2
    95a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    95ac:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    95b0:	9b02      	ldr	r3, [sp, #8]
    95b2:	3b01      	subs	r3, #1
    95b4:	9302      	str	r3, [sp, #8]
    95b6:	f47f af14 	bne.w	93e2 <getTrngSource+0x5a>
    95ba:	2000      	movs	r0, #0
    95bc:	e734      	b.n	9428 <getTrngSource+0xa0>
    95be:	4630      	mov	r0, r6
    95c0:	465a      	mov	r2, fp
    95c2:	a906      	add	r1, sp, #24
    95c4:	f000 face 	bl	9b64 <CC_PalMemCopyPlat>
    95c8:	eba5 050b 	sub.w	r5, r5, fp
    95cc:	445e      	add	r6, fp
    95ce:	e7bc      	b.n	954a <getTrngSource+0x1c2>
    95d0:	481f      	ldr	r0, [pc, #124]	; (9650 <getTrngSource+0x2c8>)
    95d2:	e725      	b.n	9420 <getTrngSource+0x98>
    95d4:	481f      	ldr	r0, [pc, #124]	; (9654 <getTrngSource+0x2cc>)
    95d6:	e723      	b.n	9420 <getTrngSource+0x98>
    95d8:	2703      	movs	r7, #3
    95da:	e74b      	b.n	9474 <getTrngSource+0xec>
    95dc:	2702      	movs	r7, #2
    95de:	e749      	b.n	9474 <getTrngSource+0xec>
    95e0:	6a23      	ldr	r3, [r4, #32]
    95e2:	2b00      	cmp	r3, #0
    95e4:	f43f af20 	beq.w	9428 <getTrngSource+0xa0>
    95e8:	481b      	ldr	r0, [pc, #108]	; (9658 <getTrngSource+0x2d0>)
    95ea:	e71d      	b.n	9428 <getTrngSource+0xa0>
    95ec:	9500      	str	r5, [sp, #0]
    95ee:	ab04      	add	r3, sp, #16
    95f0:	2201      	movs	r2, #1
    95f2:	4621      	mov	r1, r4
    95f4:	4638      	mov	r0, r7
    95f6:	f7ff fd83 	bl	9100 <startTrngHW>
    95fa:	2800      	cmp	r0, #0
    95fc:	f43f aee2 	beq.w	93c4 <getTrngSource+0x3c>
    9600:	e712      	b.n	9428 <getTrngSource+0xa0>
    9602:	69a2      	ldr	r2, [r4, #24]
    9604:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9608:	4651      	mov	r1, sl
    960a:	4628      	mov	r0, r5
    960c:	f7ff fe54 	bl	92b8 <LLF_RND_AdaptiveProportionTest>
    9610:	2800      	cmp	r0, #0
    9612:	d1aa      	bne.n	956a <getTrngSource+0x1e2>
    9614:	e7d1      	b.n	95ba <getTrngSource+0x232>
    9616:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9618:	601d      	str	r5, [r3, #0]
    961a:	e7ad      	b.n	9578 <getTrngSource+0x1f0>
    961c:	5002b138 	.word	0x5002b138
    9620:	5002b130 	.word	0x5002b130
    9624:	aaaaaaab 	.word	0xaaaaaaab
    9628:	00f10c02 	.word	0x00f10c02
    962c:	00f10c30 	.word	0x00f10c30
    9630:	5002b1c4 	.word	0x5002b1c4
    9634:	5002b12c 	.word	0x5002b12c
    9638:	5002b100 	.word	0x5002b100
    963c:	5002b10c 	.word	0x5002b10c
    9640:	5002ba04 	.word	0x5002ba04
    9644:	5002b1d8 	.word	0x5002b1d8
    9648:	5002b114 	.word	0x5002b114
    964c:	5002b118 	.word	0x5002b118
    9650:	00f10c31 	.word	0x00f10c31
    9654:	00f10c35 	.word	0x00f10c35
    9658:	00f10c32 	.word	0x00f10c32

0000965c <LLF_RND_GetTrngSource>:
    965c:	b430      	push	{r4, r5}
    965e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    9662:	9d04      	ldr	r5, [sp, #16]
    9664:	9402      	str	r4, [sp, #8]
    9666:	2400      	movs	r4, #0
    9668:	e9cd 5403 	strd	r5, r4, [sp, #12]
    966c:	bc30      	pop	{r4, r5}
    966e:	f7ff be8b 	b.w	9388 <getTrngSource>
    9672:	bf00      	nop

00009674 <LLF_RND_RunTrngStartupTest>:
    9674:	b510      	push	{r4, lr}
    9676:	b086      	sub	sp, #24
    9678:	ab05      	add	r3, sp, #20
    967a:	2401      	movs	r4, #1
    967c:	e9cd 2401 	strd	r2, r4, [sp, #4]
    9680:	9300      	str	r3, [sp, #0]
    9682:	2200      	movs	r2, #0
    9684:	ab04      	add	r3, sp, #16
    9686:	f7ff fe7f 	bl	9388 <getTrngSource>
    968a:	b006      	add	sp, #24
    968c:	bd10      	pop	{r4, pc}
    968e:	bf00      	nop

00009690 <mbedtls_hardware_poll>:
    9690:	b5f0      	push	{r4, r5, r6, r7, lr}
    9692:	b089      	sub	sp, #36	; 0x24
    9694:	9205      	str	r2, [sp, #20]
    9696:	2900      	cmp	r1, #0
    9698:	d064      	beq.n	9764 <mbedtls_hardware_poll+0xd4>
    969a:	461c      	mov	r4, r3
    969c:	2b00      	cmp	r3, #0
    969e:	d061      	beq.n	9764 <mbedtls_hardware_poll+0xd4>
    96a0:	4615      	mov	r5, r2
    96a2:	2a00      	cmp	r2, #0
    96a4:	d05e      	beq.n	9764 <mbedtls_hardware_poll+0xd4>
    96a6:	4f31      	ldr	r7, [pc, #196]	; (976c <mbedtls_hardware_poll+0xdc>)
    96a8:	460e      	mov	r6, r1
    96aa:	6838      	ldr	r0, [r7, #0]
    96ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    96b0:	f7ff fca2 	bl	8ff8 <CC_PalMutexLock>
    96b4:	2800      	cmp	r0, #0
    96b6:	d14b      	bne.n	9750 <mbedtls_hardware_poll+0xc0>
    96b8:	2000      	movs	r0, #0
    96ba:	f7ff fccd 	bl	9058 <CC_PalPowerSaveModeSelect>
    96be:	2800      	cmp	r0, #0
    96c0:	d142      	bne.n	9748 <mbedtls_hardware_poll+0xb8>
    96c2:	482b      	ldr	r0, [pc, #172]	; (9770 <mbedtls_hardware_poll+0xe0>)
    96c4:	f000 fa12 	bl	9aec <RNG_PLAT_SetUserRngParameters>
    96c8:	b1d8      	cbz	r0, 9702 <mbedtls_hardware_poll+0x72>
    96ca:	2001      	movs	r0, #1
    96cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    96d0:	f7ff fcc2 	bl	9058 <CC_PalPowerSaveModeSelect>
    96d4:	2800      	cmp	r0, #0
    96d6:	d133      	bne.n	9740 <mbedtls_hardware_poll+0xb0>
    96d8:	4826      	ldr	r0, [pc, #152]	; (9774 <mbedtls_hardware_poll+0xe4>)
    96da:	f44f 7108 	mov.w	r1, #544	; 0x220
    96de:	f7fe fe47 	bl	8370 <mbedtls_zeroize_internal>
    96e2:	4825      	ldr	r0, [pc, #148]	; (9778 <mbedtls_hardware_poll+0xe8>)
    96e4:	21dc      	movs	r1, #220	; 0xdc
    96e6:	f7fe fe43 	bl	8370 <mbedtls_zeroize_internal>
    96ea:	4821      	ldr	r0, [pc, #132]	; (9770 <mbedtls_hardware_poll+0xe0>)
    96ec:	2128      	movs	r1, #40	; 0x28
    96ee:	f7fe fe3f 	bl	8370 <mbedtls_zeroize_internal>
    96f2:	6838      	ldr	r0, [r7, #0]
    96f4:	f7ff fc88 	bl	9008 <CC_PalMutexUnlock>
    96f8:	2800      	cmp	r0, #0
    96fa:	d12d      	bne.n	9758 <mbedtls_hardware_poll+0xc8>
    96fc:	4630      	mov	r0, r6
    96fe:	b009      	add	sp, #36	; 0x24
    9700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9702:	491c      	ldr	r1, [pc, #112]	; (9774 <mbedtls_hardware_poll+0xe4>)
    9704:	9003      	str	r0, [sp, #12]
    9706:	ab07      	add	r3, sp, #28
    9708:	4602      	mov	r2, r0
    970a:	9102      	str	r1, [sp, #8]
    970c:	9300      	str	r3, [sp, #0]
    970e:	4918      	ldr	r1, [pc, #96]	; (9770 <mbedtls_hardware_poll+0xe0>)
    9710:	4819      	ldr	r0, [pc, #100]	; (9778 <mbedtls_hardware_poll+0xe8>)
    9712:	9401      	str	r4, [sp, #4]
    9714:	ab05      	add	r3, sp, #20
    9716:	f7ff ffa1 	bl	965c <LLF_RND_GetTrngSource>
    971a:	4603      	mov	r3, r0
    971c:	2800      	cmp	r0, #0
    971e:	d1d4      	bne.n	96ca <mbedtls_hardware_poll+0x3a>
    9720:	6822      	ldr	r2, [r4, #0]
    9722:	42aa      	cmp	r2, r5
    9724:	d3d1      	bcc.n	96ca <mbedtls_hardware_poll+0x3a>
    9726:	9907      	ldr	r1, [sp, #28]
    9728:	4630      	mov	r0, r6
    972a:	3108      	adds	r1, #8
    972c:	462a      	mov	r2, r5
    972e:	461e      	mov	r6, r3
    9730:	f000 fa18 	bl	9b64 <CC_PalMemCopyPlat>
    9734:	6025      	str	r5, [r4, #0]
    9736:	2001      	movs	r0, #1
    9738:	f7ff fc8e 	bl	9058 <CC_PalPowerSaveModeSelect>
    973c:	2800      	cmp	r0, #0
    973e:	d0cb      	beq.n	96d8 <mbedtls_hardware_poll+0x48>
    9740:	480e      	ldr	r0, [pc, #56]	; (977c <mbedtls_hardware_poll+0xec>)
    9742:	f7fe fd0d 	bl	8160 <CC_PalAbort>
    9746:	e7c7      	b.n	96d8 <mbedtls_hardware_poll+0x48>
    9748:	480d      	ldr	r0, [pc, #52]	; (9780 <mbedtls_hardware_poll+0xf0>)
    974a:	f7fe fd09 	bl	8160 <CC_PalAbort>
    974e:	e7b8      	b.n	96c2 <mbedtls_hardware_poll+0x32>
    9750:	480c      	ldr	r0, [pc, #48]	; (9784 <mbedtls_hardware_poll+0xf4>)
    9752:	f7fe fd05 	bl	8160 <CC_PalAbort>
    9756:	e7af      	b.n	96b8 <mbedtls_hardware_poll+0x28>
    9758:	480b      	ldr	r0, [pc, #44]	; (9788 <mbedtls_hardware_poll+0xf8>)
    975a:	f7fe fd01 	bl	8160 <CC_PalAbort>
    975e:	4630      	mov	r0, r6
    9760:	b009      	add	sp, #36	; 0x24
    9762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9764:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9768:	e7c8      	b.n	96fc <mbedtls_hardware_poll+0x6c>
    976a:	bf00      	nop
    976c:	20000140 	.word	0x20000140
    9770:	20001914 	.word	0x20001914
    9774:	200016f4 	.word	0x200016f4
    9778:	20001618 	.word	0x20001618
    977c:	0000ce20 	.word	0x0000ce20
    9780:	0000ce00 	.word	0x0000ce00
    9784:	0000cde8 	.word	0x0000cde8
    9788:	0000ce78 	.word	0x0000ce78

0000978c <cc_mbedtls_aes_init>:
    978c:	b510      	push	{r4, lr}
    978e:	4604      	mov	r4, r0
    9790:	b130      	cbz	r0, 97a0 <cc_mbedtls_aes_init+0x14>
    9792:	2200      	movs	r2, #0
    9794:	2301      	movs	r3, #1
    9796:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    979a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    979e:	bd10      	pop	{r4, pc}
    97a0:	4801      	ldr	r0, [pc, #4]	; (97a8 <cc_mbedtls_aes_init+0x1c>)
    97a2:	f7fe fcdd 	bl	8160 <CC_PalAbort>
    97a6:	e7f4      	b.n	9792 <cc_mbedtls_aes_init+0x6>
    97a8:	0000ce90 	.word	0x0000ce90

000097ac <cc_mbedtls_aes_free>:
    97ac:	b118      	cbz	r0, 97b6 <cc_mbedtls_aes_free+0xa>
    97ae:	2274      	movs	r2, #116	; 0x74
    97b0:	2100      	movs	r1, #0
    97b2:	f000 b9d9 	b.w	9b68 <CC_PalMemSetPlat>
    97b6:	4770      	bx	lr

000097b8 <cc_mbedtls_aes_setkey_enc>:
    97b8:	b190      	cbz	r0, 97e0 <cc_mbedtls_aes_setkey_enc+0x28>
    97ba:	b1a1      	cbz	r1, 97e6 <cc_mbedtls_aes_setkey_enc+0x2e>
    97bc:	b510      	push	{r4, lr}
    97be:	2a80      	cmp	r2, #128	; 0x80
    97c0:	f04f 0400 	mov.w	r4, #0
    97c4:	6384      	str	r4, [r0, #56]	; 0x38
    97c6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    97ca:	d106      	bne.n	97da <cc_mbedtls_aes_setkey_enc+0x22>
    97cc:	6304      	str	r4, [r0, #48]	; 0x30
    97ce:	2210      	movs	r2, #16
    97d0:	3010      	adds	r0, #16
    97d2:	f000 f9c7 	bl	9b64 <CC_PalMemCopyPlat>
    97d6:	4620      	mov	r0, r4
    97d8:	bd10      	pop	{r4, pc}
    97da:	f06f 001f 	mvn.w	r0, #31
    97de:	bd10      	pop	{r4, pc}
    97e0:	f06f 0021 	mvn.w	r0, #33	; 0x21
    97e4:	4770      	bx	lr
    97e6:	f06f 001f 	mvn.w	r0, #31
    97ea:	4770      	bx	lr

000097ec <cc_mbedtls_aes_crypt_ecb>:
    97ec:	b320      	cbz	r0, 9838 <cc_mbedtls_aes_crypt_ecb+0x4c>
    97ee:	b31a      	cbz	r2, 9838 <cc_mbedtls_aes_crypt_ecb+0x4c>
    97f0:	b313      	cbz	r3, 9838 <cc_mbedtls_aes_crypt_ecb+0x4c>
    97f2:	2901      	cmp	r1, #1
    97f4:	d820      	bhi.n	9838 <cc_mbedtls_aes_crypt_ecb+0x4c>
    97f6:	b570      	push	{r4, r5, r6, lr}
    97f8:	4604      	mov	r4, r0
    97fa:	6b81      	ldr	r1, [r0, #56]	; 0x38
    97fc:	b086      	sub	sp, #24
    97fe:	d016      	beq.n	982e <cc_mbedtls_aes_crypt_ecb+0x42>
    9800:	2901      	cmp	r1, #1
    9802:	d116      	bne.n	9832 <cc_mbedtls_aes_crypt_ecb+0x46>
    9804:	2100      	movs	r1, #0
    9806:	2510      	movs	r5, #16
    9808:	ae04      	add	r6, sp, #16
    980a:	6361      	str	r1, [r4, #52]	; 0x34
    980c:	4610      	mov	r0, r2
    980e:	e9cd 5600 	strd	r5, r6, [sp]
    9812:	aa02      	add	r2, sp, #8
    9814:	4629      	mov	r1, r5
    9816:	f000 fa4d 	bl	9cb4 <SetDataBuffersInfo>
    981a:	b950      	cbnz	r0, 9832 <cc_mbedtls_aes_crypt_ecb+0x46>
    981c:	462b      	mov	r3, r5
    981e:	4632      	mov	r2, r6
    9820:	a902      	add	r1, sp, #8
    9822:	4620      	mov	r0, r4
    9824:	f000 fcda 	bl	a1dc <ProcessAesDrv>
    9828:	b918      	cbnz	r0, 9832 <cc_mbedtls_aes_crypt_ecb+0x46>
    982a:	b006      	add	sp, #24
    982c:	bd70      	pop	{r4, r5, r6, pc}
    982e:	2900      	cmp	r1, #0
    9830:	d0e8      	beq.n	9804 <cc_mbedtls_aes_crypt_ecb+0x18>
    9832:	f06f 0021 	mvn.w	r0, #33	; 0x21
    9836:	e7f8      	b.n	982a <cc_mbedtls_aes_crypt_ecb+0x3e>
    9838:	f06f 0021 	mvn.w	r0, #33	; 0x21
    983c:	4770      	bx	lr
    983e:	bf00      	nop

00009840 <cc_mbedtls_sha256_init>:
    9840:	b510      	push	{r4, lr}
    9842:	4604      	mov	r4, r0
    9844:	b128      	cbz	r0, 9852 <cc_mbedtls_sha256_init+0x12>
    9846:	4620      	mov	r0, r4
    9848:	21f0      	movs	r1, #240	; 0xf0
    984a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    984e:	f000 b98d 	b.w	9b6c <CC_PalMemSetZeroPlat>
    9852:	4804      	ldr	r0, [pc, #16]	; (9864 <cc_mbedtls_sha256_init+0x24>)
    9854:	f7fe fc84 	bl	8160 <CC_PalAbort>
    9858:	4620      	mov	r0, r4
    985a:	21f0      	movs	r1, #240	; 0xf0
    985c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9860:	f000 b984 	b.w	9b6c <CC_PalMemSetZeroPlat>
    9864:	0000cea4 	.word	0x0000cea4

00009868 <cc_mbedtls_sha256_free>:
    9868:	b110      	cbz	r0, 9870 <cc_mbedtls_sha256_free+0x8>
    986a:	21f0      	movs	r1, #240	; 0xf0
    986c:	f7fe bd80 	b.w	8370 <mbedtls_zeroize_internal>
    9870:	4770      	bx	lr
    9872:	bf00      	nop

00009874 <cc_mbedtls_sha256_starts>:
    9874:	b508      	push	{r3, lr}
    9876:	b161      	cbz	r1, 9892 <cc_mbedtls_sha256_starts+0x1e>
    9878:	2901      	cmp	r1, #1
    987a:	d107      	bne.n	988c <cc_mbedtls_sha256_starts+0x18>
    987c:	2102      	movs	r1, #2
    987e:	f000 f85b 	bl	9938 <mbedtls_sha_starts_internal>
    9882:	2800      	cmp	r0, #0
    9884:	bf18      	it	ne
    9886:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    988a:	bd08      	pop	{r3, pc}
    988c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9890:	bd08      	pop	{r3, pc}
    9892:	2101      	movs	r1, #1
    9894:	f000 f850 	bl	9938 <mbedtls_sha_starts_internal>
    9898:	e7f3      	b.n	9882 <cc_mbedtls_sha256_starts+0xe>
    989a:	bf00      	nop

0000989c <cc_mbedtls_sha256_update>:
    989c:	b570      	push	{r4, r5, r6, lr}
    989e:	188e      	adds	r6, r1, r2
    98a0:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    98a4:	b0a0      	sub	sp, #128	; 0x80
    98a6:	460b      	mov	r3, r1
    98a8:	4614      	mov	r4, r2
    98aa:	4605      	mov	r5, r0
    98ac:	d801      	bhi.n	98b2 <cc_mbedtls_sha256_update+0x16>
    98ae:	2a80      	cmp	r2, #128	; 0x80
    98b0:	d90c      	bls.n	98cc <cc_mbedtls_sha256_update+0x30>
    98b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    98b6:	d917      	bls.n	98e8 <cc_mbedtls_sha256_update+0x4c>
    98b8:	4622      	mov	r2, r4
    98ba:	4619      	mov	r1, r3
    98bc:	4628      	mov	r0, r5
    98be:	f000 f87d 	bl	99bc <mbedtls_sha_update_internal>
    98c2:	4604      	mov	r4, r0
    98c4:	b984      	cbnz	r4, 98e8 <cc_mbedtls_sha256_update+0x4c>
    98c6:	4620      	mov	r0, r4
    98c8:	b020      	add	sp, #128	; 0x80
    98ca:	bd70      	pop	{r4, r5, r6, pc}
    98cc:	4668      	mov	r0, sp
    98ce:	f000 f949 	bl	9b64 <CC_PalMemCopyPlat>
    98d2:	4622      	mov	r2, r4
    98d4:	4669      	mov	r1, sp
    98d6:	4628      	mov	r0, r5
    98d8:	f000 f870 	bl	99bc <mbedtls_sha_update_internal>
    98dc:	2180      	movs	r1, #128	; 0x80
    98de:	4604      	mov	r4, r0
    98e0:	4668      	mov	r0, sp
    98e2:	f000 f943 	bl	9b6c <CC_PalMemSetZeroPlat>
    98e6:	e7ed      	b.n	98c4 <cc_mbedtls_sha256_update+0x28>
    98e8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    98ec:	e7eb      	b.n	98c6 <cc_mbedtls_sha256_update+0x2a>
    98ee:	bf00      	nop

000098f0 <cc_mbedtls_sha256_finish>:
    98f0:	b570      	push	{r4, r5, r6, lr}
    98f2:	b1e8      	cbz	r0, 9930 <cc_mbedtls_sha256_finish+0x40>
    98f4:	460e      	mov	r6, r1
    98f6:	b1d9      	cbz	r1, 9930 <cc_mbedtls_sha256_finish+0x40>
    98f8:	4604      	mov	r4, r0
    98fa:	f000 f831 	bl	9960 <mbedtls_sha_finish_internal>
    98fe:	4605      	mov	r5, r0
    9900:	b9b0      	cbnz	r0, 9930 <cc_mbedtls_sha256_finish+0x40>
    9902:	6823      	ldr	r3, [r4, #0]
    9904:	2b01      	cmp	r3, #1
    9906:	d00b      	beq.n	9920 <cc_mbedtls_sha256_finish+0x30>
    9908:	2b02      	cmp	r3, #2
    990a:	d001      	beq.n	9910 <cc_mbedtls_sha256_finish+0x20>
    990c:	4628      	mov	r0, r5
    990e:	bd70      	pop	{r4, r5, r6, pc}
    9910:	f104 0108 	add.w	r1, r4, #8
    9914:	4630      	mov	r0, r6
    9916:	221c      	movs	r2, #28
    9918:	f000 f924 	bl	9b64 <CC_PalMemCopyPlat>
    991c:	4628      	mov	r0, r5
    991e:	bd70      	pop	{r4, r5, r6, pc}
    9920:	f104 0108 	add.w	r1, r4, #8
    9924:	4630      	mov	r0, r6
    9926:	2220      	movs	r2, #32
    9928:	f000 f91c 	bl	9b64 <CC_PalMemCopyPlat>
    992c:	4628      	mov	r0, r5
    992e:	bd70      	pop	{r4, r5, r6, pc}
    9930:	f06f 0536 	mvn.w	r5, #54	; 0x36
    9934:	e7ea      	b.n	990c <cc_mbedtls_sha256_finish+0x1c>
    9936:	bf00      	nop

00009938 <mbedtls_sha_starts_internal>:
    9938:	b178      	cbz	r0, 995a <mbedtls_sha_starts_internal+0x22>
    993a:	b538      	push	{r3, r4, r5, lr}
    993c:	4604      	mov	r4, r0
    993e:	460d      	mov	r5, r1
    9940:	21f0      	movs	r1, #240	; 0xf0
    9942:	f000 f913 	bl	9b6c <CC_PalMemSetZeroPlat>
    9946:	2340      	movs	r3, #64	; 0x40
    9948:	6025      	str	r5, [r4, #0]
    994a:	65e3      	str	r3, [r4, #92]	; 0x5c
    994c:	4620      	mov	r0, r4
    994e:	f000 f9e5 	bl	9d1c <InitHashDrv>
    9952:	3800      	subs	r0, #0
    9954:	bf18      	it	ne
    9956:	2001      	movne	r0, #1
    9958:	bd38      	pop	{r3, r4, r5, pc}
    995a:	2001      	movs	r0, #1
    995c:	4770      	bx	lr
    995e:	bf00      	nop

00009960 <mbedtls_sha_finish_internal>:
    9960:	b570      	push	{r4, r5, r6, lr}
    9962:	6e05      	ldr	r5, [r0, #96]	; 0x60
    9964:	b0a4      	sub	sp, #144	; 0x90
    9966:	4604      	mov	r4, r0
    9968:	ae04      	add	r6, sp, #16
    996a:	b9e5      	cbnz	r5, 99a6 <mbedtls_sha_finish_internal+0x46>
    996c:	2201      	movs	r2, #1
    996e:	2300      	movs	r3, #0
    9970:	6062      	str	r2, [r4, #4]
    9972:	4630      	mov	r0, r6
    9974:	e9cd 3300 	strd	r3, r3, [sp]
    9978:	aa02      	add	r2, sp, #8
    997a:	4629      	mov	r1, r5
    997c:	f000 f99a 	bl	9cb4 <SetDataBuffersInfo>
    9980:	b110      	cbz	r0, 9988 <mbedtls_sha_finish_internal+0x28>
    9982:	2001      	movs	r0, #1
    9984:	b024      	add	sp, #144	; 0x90
    9986:	bd70      	pop	{r4, r5, r6, pc}
    9988:	462a      	mov	r2, r5
    998a:	a902      	add	r1, sp, #8
    998c:	4620      	mov	r0, r4
    998e:	f000 f9ef 	bl	9d70 <ProcessHashDrv>
    9992:	2800      	cmp	r0, #0
    9994:	d1f5      	bne.n	9982 <mbedtls_sha_finish_internal+0x22>
    9996:	4620      	mov	r0, r4
    9998:	f000 fb18 	bl	9fcc <FinishHashDrv>
    999c:	2800      	cmp	r0, #0
    999e:	d1f0      	bne.n	9982 <mbedtls_sha_finish_internal+0x22>
    99a0:	6620      	str	r0, [r4, #96]	; 0x60
    99a2:	b024      	add	sp, #144	; 0x90
    99a4:	bd70      	pop	{r4, r5, r6, pc}
    99a6:	2d80      	cmp	r5, #128	; 0x80
    99a8:	462a      	mov	r2, r5
    99aa:	4630      	mov	r0, r6
    99ac:	bf28      	it	cs
    99ae:	2280      	movcs	r2, #128	; 0x80
    99b0:	f104 0164 	add.w	r1, r4, #100	; 0x64
    99b4:	f000 f8d6 	bl	9b64 <CC_PalMemCopyPlat>
    99b8:	6e25      	ldr	r5, [r4, #96]	; 0x60
    99ba:	e7d7      	b.n	996c <mbedtls_sha_finish_internal+0xc>

000099bc <mbedtls_sha_update_internal>:
    99bc:	2800      	cmp	r0, #0
    99be:	d054      	beq.n	9a6a <mbedtls_sha_update_internal+0xae>
    99c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    99c2:	4614      	mov	r4, r2
    99c4:	b0a5      	sub	sp, #148	; 0x94
    99c6:	b1b2      	cbz	r2, 99f6 <mbedtls_sha_update_internal+0x3a>
    99c8:	460e      	mov	r6, r1
    99ca:	b351      	cbz	r1, 9a22 <mbedtls_sha_update_internal+0x66>
    99cc:	4605      	mov	r5, r0
    99ce:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    99d2:	1a1a      	subs	r2, r3, r0
    99d4:	fbb2 f7f3 	udiv	r7, r2, r3
    99d8:	fb03 2717 	mls	r7, r3, r7, r2
    99dc:	42a7      	cmp	r7, r4
    99de:	bf28      	it	cs
    99e0:	4627      	movcs	r7, r4
    99e2:	2f00      	cmp	r7, #0
    99e4:	d143      	bne.n	9a6e <mbedtls_sha_update_internal+0xb2>
    99e6:	4283      	cmp	r3, r0
    99e8:	d008      	beq.n	99fc <mbedtls_sha_update_internal+0x40>
    99ea:	fbb4 f7f3 	udiv	r7, r4, r3
    99ee:	fb03 f707 	mul.w	r7, r3, r7
    99f2:	b9cf      	cbnz	r7, 9a28 <mbedtls_sha_update_internal+0x6c>
    99f4:	bb6c      	cbnz	r4, 9a52 <mbedtls_sha_update_internal+0x96>
    99f6:	2000      	movs	r0, #0
    99f8:	b025      	add	sp, #148	; 0x94
    99fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99fc:	2b80      	cmp	r3, #128	; 0x80
    99fe:	bf28      	it	cs
    9a00:	2380      	movcs	r3, #128	; 0x80
    9a02:	461a      	mov	r2, r3
    9a04:	f105 0164 	add.w	r1, r5, #100	; 0x64
    9a08:	a804      	add	r0, sp, #16
    9a0a:	f000 f8ab 	bl	9b64 <CC_PalMemCopyPlat>
    9a0e:	2300      	movs	r3, #0
    9a10:	e9cd 3300 	strd	r3, r3, [sp]
    9a14:	a804      	add	r0, sp, #16
    9a16:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    9a18:	aa02      	add	r2, sp, #8
    9a1a:	f000 f94b 	bl	9cb4 <SetDataBuffersInfo>
    9a1e:	2800      	cmp	r0, #0
    9a20:	d032      	beq.n	9a88 <mbedtls_sha_update_internal+0xcc>
    9a22:	2001      	movs	r0, #1
    9a24:	b025      	add	sp, #148	; 0x94
    9a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a28:	2300      	movs	r3, #0
    9a2a:	e9cd 3300 	strd	r3, r3, [sp]
    9a2e:	aa02      	add	r2, sp, #8
    9a30:	4639      	mov	r1, r7
    9a32:	4630      	mov	r0, r6
    9a34:	f000 f93e 	bl	9cb4 <SetDataBuffersInfo>
    9a38:	2800      	cmp	r0, #0
    9a3a:	d1f2      	bne.n	9a22 <mbedtls_sha_update_internal+0x66>
    9a3c:	a902      	add	r1, sp, #8
    9a3e:	463a      	mov	r2, r7
    9a40:	4628      	mov	r0, r5
    9a42:	f000 f995 	bl	9d70 <ProcessHashDrv>
    9a46:	2800      	cmp	r0, #0
    9a48:	d1eb      	bne.n	9a22 <mbedtls_sha_update_internal+0x66>
    9a4a:	1be4      	subs	r4, r4, r7
    9a4c:	443e      	add	r6, r7
    9a4e:	2c00      	cmp	r4, #0
    9a50:	d0d1      	beq.n	99f6 <mbedtls_sha_update_internal+0x3a>
    9a52:	6e28      	ldr	r0, [r5, #96]	; 0x60
    9a54:	3019      	adds	r0, #25
    9a56:	4622      	mov	r2, r4
    9a58:	4631      	mov	r1, r6
    9a5a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    9a5e:	f000 f881 	bl	9b64 <CC_PalMemCopyPlat>
    9a62:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    9a64:	4422      	add	r2, r4
    9a66:	662a      	str	r2, [r5, #96]	; 0x60
    9a68:	e7c5      	b.n	99f6 <mbedtls_sha_update_internal+0x3a>
    9a6a:	2001      	movs	r0, #1
    9a6c:	4770      	bx	lr
    9a6e:	f105 0364 	add.w	r3, r5, #100	; 0x64
    9a72:	4418      	add	r0, r3
    9a74:	463a      	mov	r2, r7
    9a76:	f000 f875 	bl	9b64 <CC_PalMemCopyPlat>
    9a7a:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
    9a7e:	4438      	add	r0, r7
    9a80:	443e      	add	r6, r7
    9a82:	1be4      	subs	r4, r4, r7
    9a84:	6628      	str	r0, [r5, #96]	; 0x60
    9a86:	e7ae      	b.n	99e6 <mbedtls_sha_update_internal+0x2a>
    9a88:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    9a8a:	a902      	add	r1, sp, #8
    9a8c:	4628      	mov	r0, r5
    9a8e:	f000 f96f 	bl	9d70 <ProcessHashDrv>
    9a92:	2800      	cmp	r0, #0
    9a94:	d1c5      	bne.n	9a22 <mbedtls_sha_update_internal+0x66>
    9a96:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    9a98:	6628      	str	r0, [r5, #96]	; 0x60
    9a9a:	e7a6      	b.n	99ea <mbedtls_sha_update_internal+0x2e>

00009a9c <cc_mbedtls_sha256>:
    9a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a9e:	461c      	mov	r4, r3
    9aa0:	4605      	mov	r5, r0
    9aa2:	4811      	ldr	r0, [pc, #68]	; (9ae8 <cc_mbedtls_sha256+0x4c>)
    9aa4:	460e      	mov	r6, r1
    9aa6:	4617      	mov	r7, r2
    9aa8:	f7ff feca 	bl	9840 <cc_mbedtls_sha256_init>
    9aac:	4621      	mov	r1, r4
    9aae:	480e      	ldr	r0, [pc, #56]	; (9ae8 <cc_mbedtls_sha256+0x4c>)
    9ab0:	f7ff fee0 	bl	9874 <cc_mbedtls_sha256_starts>
    9ab4:	4604      	mov	r4, r0
    9ab6:	b120      	cbz	r0, 9ac2 <cc_mbedtls_sha256+0x26>
    9ab8:	480b      	ldr	r0, [pc, #44]	; (9ae8 <cc_mbedtls_sha256+0x4c>)
    9aba:	f7ff fed5 	bl	9868 <cc_mbedtls_sha256_free>
    9abe:	4620      	mov	r0, r4
    9ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ac2:	4809      	ldr	r0, [pc, #36]	; (9ae8 <cc_mbedtls_sha256+0x4c>)
    9ac4:	4632      	mov	r2, r6
    9ac6:	4629      	mov	r1, r5
    9ac8:	f7ff fee8 	bl	989c <cc_mbedtls_sha256_update>
    9acc:	4604      	mov	r4, r0
    9ace:	2800      	cmp	r0, #0
    9ad0:	d1f2      	bne.n	9ab8 <cc_mbedtls_sha256+0x1c>
    9ad2:	4639      	mov	r1, r7
    9ad4:	4804      	ldr	r0, [pc, #16]	; (9ae8 <cc_mbedtls_sha256+0x4c>)
    9ad6:	f7ff ff0b 	bl	98f0 <cc_mbedtls_sha256_finish>
    9ada:	4604      	mov	r4, r0
    9adc:	4802      	ldr	r0, [pc, #8]	; (9ae8 <cc_mbedtls_sha256+0x4c>)
    9ade:	f7ff fec3 	bl	9868 <cc_mbedtls_sha256_free>
    9ae2:	4620      	mov	r0, r4
    9ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ae6:	bf00      	nop
    9ae8:	2000193c 	.word	0x2000193c

00009aec <RNG_PLAT_SetUserRngParameters>:
    9aec:	b530      	push	{r4, r5, lr}
    9aee:	b083      	sub	sp, #12
    9af0:	231c      	movs	r3, #28
    9af2:	a901      	add	r1, sp, #4
    9af4:	4604      	mov	r4, r0
    9af6:	9301      	str	r3, [sp, #4]
    9af8:	f000 f83c 	bl	9b74 <CC_PalTrngParamGet>
    9afc:	4605      	mov	r5, r0
    9afe:	b938      	cbnz	r0, 9b10 <RNG_PLAT_SetUserRngParameters+0x24>
    9b00:	9b01      	ldr	r3, [sp, #4]
    9b02:	2b1c      	cmp	r3, #28
    9b04:	d007      	beq.n	9b16 <RNG_PLAT_SetUserRngParameters+0x2a>
    9b06:	4d15      	ldr	r5, [pc, #84]	; (9b5c <RNG_PLAT_SetUserRngParameters+0x70>)
    9b08:	4620      	mov	r0, r4
    9b0a:	211c      	movs	r1, #28
    9b0c:	f000 f82e 	bl	9b6c <CC_PalMemSetZeroPlat>
    9b10:	4628      	mov	r0, r5
    9b12:	b003      	add	sp, #12
    9b14:	bd30      	pop	{r4, r5, pc}
    9b16:	e9d4 3200 	ldrd	r3, r2, [r4]
    9b1a:	2101      	movs	r1, #1
    9b1c:	3b00      	subs	r3, #0
    9b1e:	bf18      	it	ne
    9b20:	2301      	movne	r3, #1
    9b22:	61e1      	str	r1, [r4, #28]
    9b24:	b10a      	cbz	r2, 9b2a <RNG_PLAT_SetUserRngParameters+0x3e>
    9b26:	f043 0302 	orr.w	r3, r3, #2
    9b2a:	68a2      	ldr	r2, [r4, #8]
    9b2c:	b932      	cbnz	r2, 9b3c <RNG_PLAT_SetUserRngParameters+0x50>
    9b2e:	68e2      	ldr	r2, [r4, #12]
    9b30:	b942      	cbnz	r2, 9b44 <RNG_PLAT_SetUserRngParameters+0x58>
    9b32:	e9c4 3208 	strd	r3, r2, [r4, #32]
    9b36:	b97b      	cbnz	r3, 9b58 <RNG_PLAT_SetUserRngParameters+0x6c>
    9b38:	4d09      	ldr	r5, [pc, #36]	; (9b60 <RNG_PLAT_SetUserRngParameters+0x74>)
    9b3a:	e7e5      	b.n	9b08 <RNG_PLAT_SetUserRngParameters+0x1c>
    9b3c:	68e2      	ldr	r2, [r4, #12]
    9b3e:	f043 0304 	orr.w	r3, r3, #4
    9b42:	b13a      	cbz	r2, 9b54 <RNG_PLAT_SetUserRngParameters+0x68>
    9b44:	f043 0308 	orr.w	r3, r3, #8
    9b48:	2200      	movs	r2, #0
    9b4a:	4628      	mov	r0, r5
    9b4c:	e9c4 3208 	strd	r3, r2, [r4, #32]
    9b50:	b003      	add	sp, #12
    9b52:	bd30      	pop	{r4, r5, pc}
    9b54:	e9c4 3208 	strd	r3, r2, [r4, #32]
    9b58:	4615      	mov	r5, r2
    9b5a:	e7d9      	b.n	9b10 <RNG_PLAT_SetUserRngParameters+0x24>
    9b5c:	00f00c37 	.word	0x00f00c37
    9b60:	00f00c0e 	.word	0x00f00c0e

00009b64 <CC_PalMemCopyPlat>:
    9b64:	f001 b9ba 	b.w	aedc <memmove>

00009b68 <CC_PalMemSetPlat>:
    9b68:	f001 b9f2 	b.w	af50 <memset>

00009b6c <CC_PalMemSetZeroPlat>:
    9b6c:	460a      	mov	r2, r1
    9b6e:	2100      	movs	r1, #0
    9b70:	f001 b9ee 	b.w	af50 <memset>

00009b74 <CC_PalTrngParamGet>:
    9b74:	b118      	cbz	r0, 9b7e <CC_PalTrngParamGet+0xa>
    9b76:	b111      	cbz	r1, 9b7e <CC_PalTrngParamGet+0xa>
    9b78:	680b      	ldr	r3, [r1, #0]
    9b7a:	2b1c      	cmp	r3, #28
    9b7c:	d001      	beq.n	9b82 <CC_PalTrngParamGet+0xe>
    9b7e:	2001      	movs	r0, #1
    9b80:	4770      	bx	lr
    9b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9b86:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    9b8a:	3201      	adds	r2, #1
    9b8c:	bf14      	ite	ne
    9b8e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
    9b92:	f241 225c 	movweq	r2, #4700	; 0x125c
    9b96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9b9a:	6002      	str	r2, [r0, #0]
    9b9c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    9ba0:	3201      	adds	r2, #1
    9ba2:	bf14      	ite	ne
    9ba4:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
    9ba8:	f641 1264 	movweq	r2, #6500	; 0x1964
    9bac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9bb0:	6042      	str	r2, [r0, #4]
    9bb2:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    9bb6:	3201      	adds	r2, #1
    9bb8:	bf14      	ite	ne
    9bba:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
    9bbe:	f640 62d8 	movweq	r2, #3800	; 0xed8
    9bc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9bc6:	6082      	str	r2, [r0, #8]
    9bc8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    9bcc:	3201      	adds	r2, #1
    9bce:	bf14      	ite	ne
    9bd0:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
    9bd4:	f241 3288 	movweq	r2, #5000	; 0x1388
    9bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9bdc:	60c2      	str	r2, [r0, #12]
    9bde:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    9be2:	3201      	adds	r2, #1
    9be4:	bf14      	ite	ne
    9be6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
    9bea:	2290      	moveq	r2, #144	; 0x90
    9bec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9bf0:	6102      	str	r2, [r0, #16]
    9bf2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    9bf6:	3201      	adds	r2, #1
    9bf8:	bf14      	ite	ne
    9bfa:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
    9bfe:	2251      	moveq	r2, #81	; 0x51
    9c00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9c04:	6142      	str	r2, [r0, #20]
    9c06:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    9c0a:	3201      	adds	r2, #1
    9c0c:	bf14      	ite	ne
    9c0e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
    9c12:	f240 3337 	movweq	r3, #823	; 0x337
    9c16:	6183      	str	r3, [r0, #24]
    9c18:	2000      	movs	r0, #0
    9c1a:	4770      	bx	lr

00009c1c <LLF_RND_WaitRngInterrupt>:
    9c1c:	b508      	push	{r3, lr}
    9c1e:	4601      	mov	r1, r0
    9c20:	f44f 6080 	mov.w	r0, #1024	; 0x400
    9c24:	f7ff f95a 	bl	8edc <CC_HalWaitInterruptRND>
    9c28:	4902      	ldr	r1, [pc, #8]	; (9c34 <LLF_RND_WaitRngInterrupt+0x18>)
    9c2a:	4a03      	ldr	r2, [pc, #12]	; (9c38 <LLF_RND_WaitRngInterrupt+0x1c>)
    9c2c:	2300      	movs	r3, #0
    9c2e:	600b      	str	r3, [r1, #0]
    9c30:	6013      	str	r3, [r2, #0]
    9c32:	bd08      	pop	{r3, pc}
    9c34:	5002b1c8 	.word	0x5002b1c8
    9c38:	5002b12c 	.word	0x5002b12c

00009c3c <LLF_RND_GetRoscSampleCnt>:
    9c3c:	3801      	subs	r0, #1
    9c3e:	2807      	cmp	r0, #7
    9c40:	d805      	bhi.n	9c4e <LLF_RND_GetRoscSampleCnt+0x12>
    9c42:	e8df f000 	tbb	[pc, r0]
    9c46:	0e0a      	.short	0x0e0a
    9c48:	04041204 	.word	0x04041204
    9c4c:	0604      	.short	0x0604
    9c4e:	4809      	ldr	r0, [pc, #36]	; (9c74 <LLF_RND_GetRoscSampleCnt+0x38>)
    9c50:	4770      	bx	lr
    9c52:	68cb      	ldr	r3, [r1, #12]
    9c54:	624b      	str	r3, [r1, #36]	; 0x24
    9c56:	2000      	movs	r0, #0
    9c58:	4770      	bx	lr
    9c5a:	680b      	ldr	r3, [r1, #0]
    9c5c:	624b      	str	r3, [r1, #36]	; 0x24
    9c5e:	2000      	movs	r0, #0
    9c60:	4770      	bx	lr
    9c62:	684b      	ldr	r3, [r1, #4]
    9c64:	624b      	str	r3, [r1, #36]	; 0x24
    9c66:	2000      	movs	r0, #0
    9c68:	4770      	bx	lr
    9c6a:	688b      	ldr	r3, [r1, #8]
    9c6c:	624b      	str	r3, [r1, #36]	; 0x24
    9c6e:	2000      	movs	r0, #0
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	00f10c31 	.word	0x00f10c31

00009c78 <LLF_RND_GetFastestRosc>:
    9c78:	680b      	ldr	r3, [r1, #0]
    9c7a:	e002      	b.n	9c82 <LLF_RND_GetFastestRosc+0xa>
    9c7c:	2b08      	cmp	r3, #8
    9c7e:	600b      	str	r3, [r1, #0]
    9c80:	d806      	bhi.n	9c90 <LLF_RND_GetFastestRosc+0x18>
    9c82:	6a02      	ldr	r2, [r0, #32]
    9c84:	4213      	tst	r3, r2
    9c86:	ea4f 0343 	mov.w	r3, r3, lsl #1
    9c8a:	d0f7      	beq.n	9c7c <LLF_RND_GetFastestRosc+0x4>
    9c8c:	2000      	movs	r0, #0
    9c8e:	4770      	bx	lr
    9c90:	4800      	ldr	r0, [pc, #0]	; (9c94 <LLF_RND_GetFastestRosc+0x1c>)
    9c92:	4770      	bx	lr
    9c94:	00f10c31 	.word	0x00f10c31

00009c98 <LLF_RND_TurnOffTrng>:
    9c98:	4904      	ldr	r1, [pc, #16]	; (9cac <LLF_RND_TurnOffTrng+0x14>)
    9c9a:	4a05      	ldr	r2, [pc, #20]	; (9cb0 <LLF_RND_TurnOffTrng+0x18>)
    9c9c:	2300      	movs	r3, #0
    9c9e:	600b      	str	r3, [r1, #0]
    9ca0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    9ca4:	6013      	str	r3, [r2, #0]
    9ca6:	f7ff b8ff 	b.w	8ea8 <CC_HalClearInterruptBit>
    9caa:	bf00      	nop
    9cac:	5002b12c 	.word	0x5002b12c
    9cb0:	5002b1c4 	.word	0x5002b1c4

00009cb4 <SetDataBuffersInfo>:
    9cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cb6:	b083      	sub	sp, #12
    9cb8:	2400      	movs	r4, #0
    9cba:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    9cbe:	f88d 4007 	strb.w	r4, [sp, #7]
    9cc2:	d325      	bcc.n	9d10 <SetDataBuffersInfo+0x5c>
    9cc4:	460c      	mov	r4, r1
    9cc6:	4404      	add	r4, r0
    9cc8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    9ccc:	4605      	mov	r5, r0
    9cce:	d81f      	bhi.n	9d10 <SetDataBuffersInfo+0x5c>
    9cd0:	4617      	mov	r7, r2
    9cd2:	461e      	mov	r6, r3
    9cd4:	2201      	movs	r2, #1
    9cd6:	f10d 0307 	add.w	r3, sp, #7
    9cda:	f000 fe7f 	bl	a9dc <CC_PalDataBufferAttrGet>
    9cde:	4604      	mov	r4, r0
    9ce0:	b9b0      	cbnz	r0, 9d10 <SetDataBuffersInfo+0x5c>
    9ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ce8:	603d      	str	r5, [r7, #0]
    9cea:	713b      	strb	r3, [r7, #4]
    9cec:	b192      	cbz	r2, 9d14 <SetDataBuffersInfo+0x60>
    9cee:	b14e      	cbz	r6, 9d04 <SetDataBuffersInfo+0x50>
    9cf0:	4602      	mov	r2, r0
    9cf2:	9908      	ldr	r1, [sp, #32]
    9cf4:	f10d 0307 	add.w	r3, sp, #7
    9cf8:	4630      	mov	r0, r6
    9cfa:	f000 fe6f 	bl	a9dc <CC_PalDataBufferAttrGet>
    9cfe:	b938      	cbnz	r0, 9d10 <SetDataBuffersInfo+0x5c>
    9d00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d06:	4620      	mov	r0, r4
    9d08:	6016      	str	r6, [r2, #0]
    9d0a:	7113      	strb	r3, [r2, #4]
    9d0c:	b003      	add	sp, #12
    9d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d10:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    9d14:	4620      	mov	r0, r4
    9d16:	b003      	add	sp, #12
    9d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d1a:	bf00      	nop

00009d1c <InitHashDrv>:
    9d1c:	b1e8      	cbz	r0, 9d5a <InitHashDrv+0x3e>
    9d1e:	b510      	push	{r4, lr}
    9d20:	6804      	ldr	r4, [r0, #0]
    9d22:	2c01      	cmp	r4, #1
    9d24:	d004      	beq.n	9d30 <InitHashDrv+0x14>
    9d26:	2c02      	cmp	r4, #2
    9d28:	d010      	beq.n	9d4c <InitHashDrv+0x30>
    9d2a:	b144      	cbz	r4, 9d3e <InitHashDrv+0x22>
    9d2c:	480c      	ldr	r0, [pc, #48]	; (9d60 <InitHashDrv+0x44>)
    9d2e:	bd10      	pop	{r4, pc}
    9d30:	490c      	ldr	r1, [pc, #48]	; (9d64 <InitHashDrv+0x48>)
    9d32:	2220      	movs	r2, #32
    9d34:	3008      	adds	r0, #8
    9d36:	f7ff ff15 	bl	9b64 <CC_PalMemCopyPlat>
    9d3a:	2000      	movs	r0, #0
    9d3c:	bd10      	pop	{r4, pc}
    9d3e:	490a      	ldr	r1, [pc, #40]	; (9d68 <InitHashDrv+0x4c>)
    9d40:	2214      	movs	r2, #20
    9d42:	3008      	adds	r0, #8
    9d44:	f7ff ff0e 	bl	9b64 <CC_PalMemCopyPlat>
    9d48:	4620      	mov	r0, r4
    9d4a:	bd10      	pop	{r4, pc}
    9d4c:	4907      	ldr	r1, [pc, #28]	; (9d6c <InitHashDrv+0x50>)
    9d4e:	2220      	movs	r2, #32
    9d50:	3008      	adds	r0, #8
    9d52:	f7ff ff07 	bl	9b64 <CC_PalMemCopyPlat>
    9d56:	2000      	movs	r0, #0
    9d58:	bd10      	pop	{r4, pc}
    9d5a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    9d5e:	4770      	bx	lr
    9d60:	00f30001 	.word	0x00f30001
    9d64:	0000cee8 	.word	0x0000cee8
    9d68:	0000ceb4 	.word	0x0000ceb4
    9d6c:	0000cec8 	.word	0x0000cec8

00009d70 <ProcessHashDrv>:
    9d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d74:	2900      	cmp	r1, #0
    9d76:	f000 80ef 	beq.w	9f58 <ProcessHashDrv+0x1e8>
    9d7a:	4604      	mov	r4, r0
    9d7c:	2800      	cmp	r0, #0
    9d7e:	f000 80ef 	beq.w	9f60 <ProcessHashDrv+0x1f0>
    9d82:	6803      	ldr	r3, [r0, #0]
    9d84:	4617      	mov	r7, r2
    9d86:	460e      	mov	r6, r1
    9d88:	2b00      	cmp	r3, #0
    9d8a:	f000 80b9 	beq.w	9f00 <ProcessHashDrv+0x190>
    9d8e:	3b01      	subs	r3, #1
    9d90:	2b01      	cmp	r3, #1
    9d92:	f200 80cd 	bhi.w	9f30 <ProcessHashDrv+0x1c0>
    9d96:	4874      	ldr	r0, [pc, #464]	; (9f68 <ProcessHashDrv+0x1f8>)
    9d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9d9c:	f04f 0802 	mov.w	r8, #2
    9da0:	f7ff f92a 	bl	8ff8 <CC_PalMutexLock>
    9da4:	2800      	cmp	r0, #0
    9da6:	f040 80b5 	bne.w	9f14 <ProcessHashDrv+0x1a4>
    9daa:	2000      	movs	r0, #0
    9dac:	f7ff f954 	bl	9058 <CC_PalPowerSaveModeSelect>
    9db0:	4605      	mov	r5, r0
    9db2:	2800      	cmp	r0, #0
    9db4:	f040 80b8 	bne.w	9f28 <ProcessHashDrv+0x1b8>
    9db8:	4a6c      	ldr	r2, [pc, #432]	; (9f6c <ProcessHashDrv+0x1fc>)
    9dba:	6813      	ldr	r3, [r2, #0]
    9dbc:	2b00      	cmp	r3, #0
    9dbe:	d1fc      	bne.n	9dba <ProcessHashDrv+0x4a>
    9dc0:	486b      	ldr	r0, [pc, #428]	; (9f70 <ProcessHashDrv+0x200>)
    9dc2:	6803      	ldr	r3, [r0, #0]
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d1fc      	bne.n	9dc2 <ProcessHashDrv+0x52>
    9dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9dcc:	f7ff f86c 	bl	8ea8 <CC_HalClearInterruptBit>
    9dd0:	4b68      	ldr	r3, [pc, #416]	; (9f74 <ProcessHashDrv+0x204>)
    9dd2:	6818      	ldr	r0, [r3, #0]
    9dd4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    9dd8:	f7ff f874 	bl	8ec4 <CC_HalMaskInterrupt>
    9ddc:	4866      	ldr	r0, [pc, #408]	; (9f78 <ProcessHashDrv+0x208>)
    9dde:	4a67      	ldr	r2, [pc, #412]	; (9f7c <ProcessHashDrv+0x20c>)
    9de0:	4967      	ldr	r1, [pc, #412]	; (9f80 <ProcessHashDrv+0x210>)
    9de2:	2301      	movs	r3, #1
    9de4:	6003      	str	r3, [r0, #0]
    9de6:	2007      	movs	r0, #7
    9de8:	6010      	str	r0, [r2, #0]
    9dea:	600b      	str	r3, [r1, #0]
    9dec:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
    9df0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9df2:	6013      	str	r3, [r2, #0]
    9df4:	4b63      	ldr	r3, [pc, #396]	; (9f84 <ProcessHashDrv+0x214>)
    9df6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9df8:	6051      	str	r1, [r2, #4]
    9dfa:	f8c3 8000 	str.w	r8, [r3]
    9dfe:	6823      	ldr	r3, [r4, #0]
    9e00:	b15b      	cbz	r3, 9e1a <ProcessHashDrv+0xaa>
    9e02:	3b01      	subs	r3, #1
    9e04:	2b01      	cmp	r3, #1
    9e06:	d817      	bhi.n	9e38 <ProcessHashDrv+0xc8>
    9e08:	4b5f      	ldr	r3, [pc, #380]	; (9f88 <ProcessHashDrv+0x218>)
    9e0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9e0c:	601a      	str	r2, [r3, #0]
    9e0e:	6a22      	ldr	r2, [r4, #32]
    9e10:	f843 2c04 	str.w	r2, [r3, #-4]
    9e14:	69e2      	ldr	r2, [r4, #28]
    9e16:	f843 2c08 	str.w	r2, [r3, #-8]
    9e1a:	4b5c      	ldr	r3, [pc, #368]	; (9f8c <ProcessHashDrv+0x21c>)
    9e1c:	69a2      	ldr	r2, [r4, #24]
    9e1e:	601a      	str	r2, [r3, #0]
    9e20:	6962      	ldr	r2, [r4, #20]
    9e22:	f843 2c04 	str.w	r2, [r3, #-4]
    9e26:	6922      	ldr	r2, [r4, #16]
    9e28:	f843 2c08 	str.w	r2, [r3, #-8]
    9e2c:	68e2      	ldr	r2, [r4, #12]
    9e2e:	f843 2c0c 	str.w	r2, [r3, #-12]
    9e32:	68a2      	ldr	r2, [r4, #8]
    9e34:	f843 2c10 	str.w	r2, [r3, #-16]
    9e38:	4a55      	ldr	r2, [pc, #340]	; (9f90 <ProcessHashDrv+0x220>)
    9e3a:	6813      	ldr	r3, [r2, #0]
    9e3c:	2b00      	cmp	r3, #0
    9e3e:	d1fc      	bne.n	9e3a <ProcessHashDrv+0xca>
    9e40:	2f00      	cmp	r7, #0
    9e42:	d059      	beq.n	9ef8 <ProcessHashDrv+0x188>
    9e44:	6863      	ldr	r3, [r4, #4]
    9e46:	2b01      	cmp	r3, #1
    9e48:	bf04      	itt	eq
    9e4a:	4a52      	ldreq	r2, [pc, #328]	; (9f94 <ProcessHashDrv+0x224>)
    9e4c:	6013      	streq	r3, [r2, #0]
    9e4e:	4a52      	ldr	r2, [pc, #328]	; (9f98 <ProcessHashDrv+0x228>)
    9e50:	4b52      	ldr	r3, [pc, #328]	; (9f9c <ProcessHashDrv+0x22c>)
    9e52:	6831      	ldr	r1, [r6, #0]
    9e54:	6011      	str	r1, [r2, #0]
    9e56:	2040      	movs	r0, #64	; 0x40
    9e58:	601f      	str	r7, [r3, #0]
    9e5a:	f7ff f839 	bl	8ed0 <CC_HalWaitInterrupt>
    9e5e:	4605      	mov	r5, r0
    9e60:	4a4b      	ldr	r2, [pc, #300]	; (9f90 <ProcessHashDrv+0x220>)
    9e62:	6813      	ldr	r3, [r2, #0]
    9e64:	2b00      	cmp	r3, #0
    9e66:	d1fc      	bne.n	9e62 <ProcessHashDrv+0xf2>
    9e68:	4a41      	ldr	r2, [pc, #260]	; (9f70 <ProcessHashDrv+0x200>)
    9e6a:	6813      	ldr	r3, [r2, #0]
    9e6c:	2b00      	cmp	r3, #0
    9e6e:	d1fc      	bne.n	9e6a <ProcessHashDrv+0xfa>
    9e70:	6823      	ldr	r3, [r4, #0]
    9e72:	b15b      	cbz	r3, 9e8c <ProcessHashDrv+0x11c>
    9e74:	3b01      	subs	r3, #1
    9e76:	2b01      	cmp	r3, #1
    9e78:	d817      	bhi.n	9eaa <ProcessHashDrv+0x13a>
    9e7a:	4a43      	ldr	r2, [pc, #268]	; (9f88 <ProcessHashDrv+0x218>)
    9e7c:	4b48      	ldr	r3, [pc, #288]	; (9fa0 <ProcessHashDrv+0x230>)
    9e7e:	6812      	ldr	r2, [r2, #0]
    9e80:	6262      	str	r2, [r4, #36]	; 0x24
    9e82:	681a      	ldr	r2, [r3, #0]
    9e84:	6222      	str	r2, [r4, #32]
    9e86:	3b04      	subs	r3, #4
    9e88:	681b      	ldr	r3, [r3, #0]
    9e8a:	61e3      	str	r3, [r4, #28]
    9e8c:	4a3f      	ldr	r2, [pc, #252]	; (9f8c <ProcessHashDrv+0x21c>)
    9e8e:	4b45      	ldr	r3, [pc, #276]	; (9fa4 <ProcessHashDrv+0x234>)
    9e90:	6812      	ldr	r2, [r2, #0]
    9e92:	61a2      	str	r2, [r4, #24]
    9e94:	681a      	ldr	r2, [r3, #0]
    9e96:	6162      	str	r2, [r4, #20]
    9e98:	f853 2c04 	ldr.w	r2, [r3, #-4]
    9e9c:	6122      	str	r2, [r4, #16]
    9e9e:	f853 2c08 	ldr.w	r2, [r3, #-8]
    9ea2:	60e2      	str	r2, [r4, #12]
    9ea4:	3b0c      	subs	r3, #12
    9ea6:	681b      	ldr	r3, [r3, #0]
    9ea8:	60a3      	str	r3, [r4, #8]
    9eaa:	4b3f      	ldr	r3, [pc, #252]	; (9fa8 <ProcessHashDrv+0x238>)
    9eac:	4a3f      	ldr	r2, [pc, #252]	; (9fac <ProcessHashDrv+0x23c>)
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	64a3      	str	r3, [r4, #72]	; 0x48
    9eb2:	6812      	ldr	r2, [r2, #0]
    9eb4:	4b32      	ldr	r3, [pc, #200]	; (9f80 <ProcessHashDrv+0x210>)
    9eb6:	64e2      	str	r2, [r4, #76]	; 0x4c
    9eb8:	4836      	ldr	r0, [pc, #216]	; (9f94 <ProcessHashDrv+0x224>)
    9eba:	493d      	ldr	r1, [pc, #244]	; (9fb0 <ProcessHashDrv+0x240>)
    9ebc:	2201      	movs	r2, #1
    9ebe:	601a      	str	r2, [r3, #0]
    9ec0:	2300      	movs	r3, #0
    9ec2:	4a33      	ldr	r2, [pc, #204]	; (9f90 <ProcessHashDrv+0x220>)
    9ec4:	6003      	str	r3, [r0, #0]
    9ec6:	600b      	str	r3, [r1, #0]
    9ec8:	6813      	ldr	r3, [r2, #0]
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d1fc      	bne.n	9ec8 <ProcessHashDrv+0x158>
    9ece:	4a2a      	ldr	r2, [pc, #168]	; (9f78 <ProcessHashDrv+0x208>)
    9ed0:	6013      	str	r3, [r2, #0]
    9ed2:	2d00      	cmp	r5, #0
    9ed4:	d13a      	bne.n	9f4c <ProcessHashDrv+0x1dc>
    9ed6:	4b27      	ldr	r3, [pc, #156]	; (9f74 <ProcessHashDrv+0x204>)
    9ed8:	6818      	ldr	r0, [r3, #0]
    9eda:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    9ede:	f7fe fff1 	bl	8ec4 <CC_HalMaskInterrupt>
    9ee2:	2001      	movs	r0, #1
    9ee4:	f7ff f8b8 	bl	9058 <CC_PalPowerSaveModeSelect>
    9ee8:	bb60      	cbnz	r0, 9f44 <ProcessHashDrv+0x1d4>
    9eea:	481f      	ldr	r0, [pc, #124]	; (9f68 <ProcessHashDrv+0x1f8>)
    9eec:	f7ff f88c 	bl	9008 <CC_PalMutexUnlock>
    9ef0:	bb10      	cbnz	r0, 9f38 <ProcessHashDrv+0x1c8>
    9ef2:	4628      	mov	r0, r5
    9ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ef8:	4b2d      	ldr	r3, [pc, #180]	; (9fb0 <ProcessHashDrv+0x240>)
    9efa:	2204      	movs	r2, #4
    9efc:	601a      	str	r2, [r3, #0]
    9efe:	e7af      	b.n	9e60 <ProcessHashDrv+0xf0>
    9f00:	4819      	ldr	r0, [pc, #100]	; (9f68 <ProcessHashDrv+0x1f8>)
    9f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f06:	f04f 0801 	mov.w	r8, #1
    9f0a:	f7ff f875 	bl	8ff8 <CC_PalMutexLock>
    9f0e:	2800      	cmp	r0, #0
    9f10:	f43f af4b 	beq.w	9daa <ProcessHashDrv+0x3a>
    9f14:	4827      	ldr	r0, [pc, #156]	; (9fb4 <ProcessHashDrv+0x244>)
    9f16:	f7fe f923 	bl	8160 <CC_PalAbort>
    9f1a:	2000      	movs	r0, #0
    9f1c:	f7ff f89c 	bl	9058 <CC_PalPowerSaveModeSelect>
    9f20:	4605      	mov	r5, r0
    9f22:	2800      	cmp	r0, #0
    9f24:	f43f af48 	beq.w	9db8 <ProcessHashDrv+0x48>
    9f28:	4823      	ldr	r0, [pc, #140]	; (9fb8 <ProcessHashDrv+0x248>)
    9f2a:	f7fe f919 	bl	8160 <CC_PalAbort>
    9f2e:	e743      	b.n	9db8 <ProcessHashDrv+0x48>
    9f30:	4d22      	ldr	r5, [pc, #136]	; (9fbc <ProcessHashDrv+0x24c>)
    9f32:	4628      	mov	r0, r5
    9f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f38:	4821      	ldr	r0, [pc, #132]	; (9fc0 <ProcessHashDrv+0x250>)
    9f3a:	f7fe f911 	bl	8160 <CC_PalAbort>
    9f3e:	4628      	mov	r0, r5
    9f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f44:	481f      	ldr	r0, [pc, #124]	; (9fc4 <ProcessHashDrv+0x254>)
    9f46:	f7fe f90b 	bl	8160 <CC_PalAbort>
    9f4a:	e7ce      	b.n	9eea <ProcessHashDrv+0x17a>
    9f4c:	f104 0008 	add.w	r0, r4, #8
    9f50:	2110      	movs	r1, #16
    9f52:	f7ff fe0b 	bl	9b6c <CC_PalMemSetZeroPlat>
    9f56:	e7be      	b.n	9ed6 <ProcessHashDrv+0x166>
    9f58:	4d1b      	ldr	r5, [pc, #108]	; (9fc8 <ProcessHashDrv+0x258>)
    9f5a:	4628      	mov	r0, r5
    9f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f60:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
    9f64:	e7c5      	b.n	9ef2 <ProcessHashDrv+0x182>
    9f66:	bf00      	nop
    9f68:	2000013c 	.word	0x2000013c
    9f6c:	5002b91c 	.word	0x5002b91c
    9f70:	5002bc20 	.word	0x5002bc20
    9f74:	5002ba04 	.word	0x5002ba04
    9f78:	5002b818 	.word	0x5002b818
    9f7c:	5002b900 	.word	0x5002b900
    9f80:	5002b7c4 	.word	0x5002b7c4
    9f84:	5002b7c0 	.word	0x5002b7c0
    9f88:	5002b65c 	.word	0x5002b65c
    9f8c:	5002b650 	.word	0x5002b650
    9f90:	5002b910 	.word	0x5002b910
    9f94:	5002b684 	.word	0x5002b684
    9f98:	5002bc28 	.word	0x5002bc28
    9f9c:	5002bc2c 	.word	0x5002bc2c
    9fa0:	5002b658 	.word	0x5002b658
    9fa4:	5002b64c 	.word	0x5002b64c
    9fa8:	5002b7cc 	.word	0x5002b7cc
    9fac:	5002b7d0 	.word	0x5002b7d0
    9fb0:	5002b7c8 	.word	0x5002b7c8
    9fb4:	0000cde8 	.word	0x0000cde8
    9fb8:	0000ce00 	.word	0x0000ce00
    9fbc:	00f30001 	.word	0x00f30001
    9fc0:	0000ce40 	.word	0x0000ce40
    9fc4:	0000ce20 	.word	0x0000ce20
    9fc8:	00f30003 	.word	0x00f30003

00009fcc <FinishHashDrv>:
    9fcc:	2800      	cmp	r0, #0
    9fce:	d03b      	beq.n	a048 <FinishHashDrv+0x7c>
    9fd0:	b4f0      	push	{r4, r5, r6, r7}
    9fd2:	b082      	sub	sp, #8
    9fd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    9fd6:	9301      	str	r3, [sp, #4]
    9fd8:	6883      	ldr	r3, [r0, #8]
    9fda:	fa93 fc83 	rev.w	ip, r3
    9fde:	9b01      	ldr	r3, [sp, #4]
    9fe0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
    9fe4:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
    9fe8:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
    9fec:	ba1b      	rev	r3, r3
    9fee:	6243      	str	r3, [r0, #36]	; 0x24
    9ff0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9ff2:	9301      	str	r3, [sp, #4]
    9ff4:	ba09      	rev	r1, r1
    9ff6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9ff8:	61c1      	str	r1, [r0, #28]
    9ffa:	ba12      	rev	r2, r2
    9ffc:	6202      	str	r2, [r0, #32]
    9ffe:	ba3f      	rev	r7, r7
    a000:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
    a004:	ba36      	rev	r6, r6
    a006:	ba2d      	rev	r5, r5
    a008:	ba24      	rev	r4, r4
    a00a:	e9c0 c702 	strd	ip, r7, [r0, #8]
    a00e:	e9c0 6504 	strd	r6, r5, [r0, #16]
    a012:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    a014:	6b06      	ldr	r6, [r0, #48]	; 0x30
    a016:	6b45      	ldr	r5, [r0, #52]	; 0x34
    a018:	6184      	str	r4, [r0, #24]
    a01a:	fa93 fc83 	rev.w	ip, r3
    a01e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    a020:	9b01      	ldr	r3, [sp, #4]
    a022:	ba3f      	rev	r7, r7
    a024:	ba36      	rev	r6, r6
    a026:	ba2d      	rev	r5, r5
    a028:	ba24      	rev	r4, r4
    a02a:	ba09      	rev	r1, r1
    a02c:	ba12      	rev	r2, r2
    a02e:	ba1b      	rev	r3, r3
    a030:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
    a034:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    a038:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    a03c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    a040:	2000      	movs	r0, #0
    a042:	b002      	add	sp, #8
    a044:	bcf0      	pop	{r4, r5, r6, r7}
    a046:	4770      	bx	lr
    a048:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    a04c:	4770      	bx	lr
    a04e:	bf00      	nop

0000a050 <LoadAesKey>:
    a050:	2800      	cmp	r0, #0
    a052:	d03b      	beq.n	a0cc <LoadAesKey+0x7c>
    a054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    a058:	2b00      	cmp	r3, #0
    a05a:	d02c      	beq.n	a0b6 <LoadAesKey+0x66>
    a05c:	2b03      	cmp	r3, #3
    a05e:	b510      	push	{r4, lr}
    a060:	d00f      	beq.n	a082 <LoadAesKey+0x32>
    a062:	481c      	ldr	r0, [pc, #112]	; (a0d4 <LoadAesKey+0x84>)
    a064:	4c1c      	ldr	r4, [pc, #112]	; (a0d8 <LoadAesKey+0x88>)
    a066:	6822      	ldr	r2, [r4, #0]
    a068:	4b1c      	ldr	r3, [pc, #112]	; (a0dc <LoadAesKey+0x8c>)
    a06a:	6812      	ldr	r2, [r2, #0]
    a06c:	601a      	str	r2, [r3, #0]
    a06e:	6822      	ldr	r2, [r4, #0]
    a070:	6852      	ldr	r2, [r2, #4]
    a072:	605a      	str	r2, [r3, #4]
    a074:	6822      	ldr	r2, [r4, #0]
    a076:	6892      	ldr	r2, [r2, #8]
    a078:	609a      	str	r2, [r3, #8]
    a07a:	6822      	ldr	r2, [r4, #0]
    a07c:	68d2      	ldr	r2, [r2, #12]
    a07e:	60da      	str	r2, [r3, #12]
    a080:	bd10      	pop	{r4, pc}
    a082:	6b01      	ldr	r1, [r0, #48]	; 0x30
    a084:	6c00      	ldr	r0, [r0, #64]	; 0x40
    a086:	4c14      	ldr	r4, [pc, #80]	; (a0d8 <LoadAesKey+0x88>)
    a088:	f000 fba4 	bl	a7d4 <kmu_validate_kdr_slot_and_size>
    a08c:	2800      	cmp	r0, #0
    a08e:	d1ea      	bne.n	a066 <LoadAesKey+0x16>
    a090:	6821      	ldr	r1, [r4, #0]
    a092:	4a12      	ldr	r2, [pc, #72]	; (a0dc <LoadAesKey+0x8c>)
    a094:	6809      	ldr	r1, [r1, #0]
    a096:	6011      	str	r1, [r2, #0]
    a098:	6821      	ldr	r1, [r4, #0]
    a09a:	4b11      	ldr	r3, [pc, #68]	; (a0e0 <LoadAesKey+0x90>)
    a09c:	6849      	ldr	r1, [r1, #4]
    a09e:	6019      	str	r1, [r3, #0]
    a0a0:	6821      	ldr	r1, [r4, #0]
    a0a2:	6889      	ldr	r1, [r1, #8]
    a0a4:	6091      	str	r1, [r2, #8]
    a0a6:	6822      	ldr	r2, [r4, #0]
    a0a8:	68d2      	ldr	r2, [r2, #12]
    a0aa:	609a      	str	r2, [r3, #8]
    a0ac:	f000 fb9e 	bl	a7ec <kmu_use_kdr_key>
    a0b0:	2800      	cmp	r0, #0
    a0b2:	d1d8      	bne.n	a066 <LoadAesKey+0x16>
    a0b4:	bd10      	pop	{r4, pc}
    a0b6:	4a09      	ldr	r2, [pc, #36]	; (a0dc <LoadAesKey+0x8c>)
    a0b8:	6901      	ldr	r1, [r0, #16]
    a0ba:	6011      	str	r1, [r2, #0]
    a0bc:	6941      	ldr	r1, [r0, #20]
    a0be:	6051      	str	r1, [r2, #4]
    a0c0:	6981      	ldr	r1, [r0, #24]
    a0c2:	6091      	str	r1, [r2, #8]
    a0c4:	69c1      	ldr	r1, [r0, #28]
    a0c6:	60d1      	str	r1, [r2, #12]
    a0c8:	4618      	mov	r0, r3
    a0ca:	4770      	bx	lr
    a0cc:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    a0d0:	4770      	bx	lr
    a0d2:	bf00      	nop
    a0d4:	00f10009 	.word	0x00f10009
    a0d8:	2000012c 	.word	0x2000012c
    a0dc:	5002b400 	.word	0x5002b400
    a0e0:	5002b404 	.word	0x5002b404

0000a0e4 <InitAes.part.0>:
    a0e4:	4a32      	ldr	r2, [pc, #200]	; (a1b0 <InitAes.part.0+0xcc>)
    a0e6:	b510      	push	{r4, lr}
    a0e8:	4604      	mov	r4, r0
    a0ea:	6813      	ldr	r3, [r2, #0]
    a0ec:	2b00      	cmp	r3, #0
    a0ee:	d1fc      	bne.n	a0ea <InitAes.part.0+0x6>
    a0f0:	4a30      	ldr	r2, [pc, #192]	; (a1b4 <InitAes.part.0+0xd0>)
    a0f2:	6813      	ldr	r3, [r2, #0]
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d1fc      	bne.n	a0f2 <InitAes.part.0+0xe>
    a0f8:	4a2f      	ldr	r2, [pc, #188]	; (a1b8 <InitAes.part.0+0xd4>)
    a0fa:	6813      	ldr	r3, [r2, #0]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d1fc      	bne.n	a0fa <InitAes.part.0+0x16>
    a100:	4a2e      	ldr	r2, [pc, #184]	; (a1bc <InitAes.part.0+0xd8>)
    a102:	6813      	ldr	r3, [r2, #0]
    a104:	2b00      	cmp	r3, #0
    a106:	d1fc      	bne.n	a102 <InitAes.part.0+0x1e>
    a108:	4a2d      	ldr	r2, [pc, #180]	; (a1c0 <InitAes.part.0+0xdc>)
    a10a:	6813      	ldr	r3, [r2, #0]
    a10c:	2b00      	cmp	r3, #0
    a10e:	d1fc      	bne.n	a10a <InitAes.part.0+0x26>
    a110:	4a2c      	ldr	r2, [pc, #176]	; (a1c4 <InitAes.part.0+0xe0>)
    a112:	6813      	ldr	r3, [r2, #0]
    a114:	2b00      	cmp	r3, #0
    a116:	d1fc      	bne.n	a112 <InitAes.part.0+0x2e>
    a118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a11c:	f7fe fec4 	bl	8ea8 <CC_HalClearInterruptBit>
    a120:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a122:	f023 0304 	bic.w	r3, r3, #4
    a126:	2b03      	cmp	r3, #3
    a128:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a12a:	d036      	beq.n	a19a <InitAes.part.0+0xb6>
    a12c:	2b01      	cmp	r3, #1
    a12e:	4b26      	ldr	r3, [pc, #152]	; (a1c8 <InitAes.part.0+0xe4>)
    a130:	6818      	ldr	r0, [r3, #0]
    a132:	bf0c      	ite	eq
    a134:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    a138:	f020 0020 	bicne.w	r0, r0, #32
    a13c:	f7fe fec2 	bl	8ec4 <CC_HalMaskInterrupt>
    a140:	4b22      	ldr	r3, [pc, #136]	; (a1cc <InitAes.part.0+0xe8>)
    a142:	4a1b      	ldr	r2, [pc, #108]	; (a1b0 <InitAes.part.0+0xcc>)
    a144:	2101      	movs	r1, #1
    a146:	6019      	str	r1, [r3, #0]
    a148:	6813      	ldr	r3, [r2, #0]
    a14a:	2b00      	cmp	r3, #0
    a14c:	d1fc      	bne.n	a148 <InitAes.part.0+0x64>
    a14e:	4a19      	ldr	r2, [pc, #100]	; (a1b4 <InitAes.part.0+0xd0>)
    a150:	6813      	ldr	r3, [r2, #0]
    a152:	2b00      	cmp	r3, #0
    a154:	d1fc      	bne.n	a150 <InitAes.part.0+0x6c>
    a156:	491e      	ldr	r1, [pc, #120]	; (a1d0 <InitAes.part.0+0xec>)
    a158:	4a15      	ldr	r2, [pc, #84]	; (a1b0 <InitAes.part.0+0xcc>)
    a15a:	600b      	str	r3, [r1, #0]
    a15c:	6813      	ldr	r3, [r2, #0]
    a15e:	2b00      	cmp	r3, #0
    a160:	d1fc      	bne.n	a15c <InitAes.part.0+0x78>
    a162:	4a14      	ldr	r2, [pc, #80]	; (a1b4 <InitAes.part.0+0xd0>)
    a164:	6813      	ldr	r3, [r2, #0]
    a166:	2b00      	cmp	r3, #0
    a168:	d1fc      	bne.n	a164 <InitAes.part.0+0x80>
    a16a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    a16c:	f022 0104 	bic.w	r1, r2, #4
    a170:	2903      	cmp	r1, #3
    a172:	bf18      	it	ne
    a174:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    a176:	4917      	ldr	r1, [pc, #92]	; (a1d4 <InitAes.part.0+0xf0>)
    a178:	ea4f 0282 	mov.w	r2, r2, lsl #2
    a17c:	bf18      	it	ne
    a17e:	f003 0301 	andne.w	r3, r3, #1
    a182:	f002 021c 	and.w	r2, r2, #28
    a186:	4313      	orrs	r3, r2
    a188:	600b      	str	r3, [r1, #0]
    a18a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a18c:	2b07      	cmp	r3, #7
    a18e:	d102      	bne.n	a196 <InitAes.part.0+0xb2>
    a190:	4b11      	ldr	r3, [pc, #68]	; (a1d8 <InitAes.part.0+0xf4>)
    a192:	2201      	movs	r2, #1
    a194:	601a      	str	r2, [r3, #0]
    a196:	2000      	movs	r0, #0
    a198:	bd10      	pop	{r4, pc}
    a19a:	2b01      	cmp	r3, #1
    a19c:	4b0a      	ldr	r3, [pc, #40]	; (a1c8 <InitAes.part.0+0xe4>)
    a19e:	6818      	ldr	r0, [r3, #0]
    a1a0:	bf0c      	ite	eq
    a1a2:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    a1a6:	f020 0010 	bicne.w	r0, r0, #16
    a1aa:	f7fe fe8b 	bl	8ec4 <CC_HalMaskInterrupt>
    a1ae:	e7c7      	b.n	a140 <InitAes.part.0+0x5c>
    a1b0:	5002b910 	.word	0x5002b910
    a1b4:	5002b470 	.word	0x5002b470
    a1b8:	5002bd20 	.word	0x5002bd20
    a1bc:	5002bc20 	.word	0x5002bc20
    a1c0:	5002bd38 	.word	0x5002bd38
    a1c4:	5002bc38 	.word	0x5002bc38
    a1c8:	5002ba04 	.word	0x5002ba04
    a1cc:	5002b900 	.word	0x5002b900
    a1d0:	5002b4bc 	.word	0x5002b4bc
    a1d4:	5002b4c0 	.word	0x5002b4c0
    a1d8:	5002b47c 	.word	0x5002b47c

0000a1dc <ProcessAesDrv>:
    a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1e0:	b087      	sub	sp, #28
    a1e2:	2900      	cmp	r1, #0
    a1e4:	f000 80a5 	beq.w	a332 <ProcessAesDrv+0x156>
    a1e8:	4616      	mov	r6, r2
    a1ea:	2a00      	cmp	r2, #0
    a1ec:	f000 80a1 	beq.w	a332 <ProcessAesDrv+0x156>
    a1f0:	4604      	mov	r4, r0
    a1f2:	2800      	cmp	r0, #0
    a1f4:	f000 813f 	beq.w	a476 <ProcessAesDrv+0x29a>
    a1f8:	461f      	mov	r7, r3
    a1fa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a1fc:	460d      	mov	r5, r1
    a1fe:	2b00      	cmp	r3, #0
    a200:	d150      	bne.n	a2a4 <ProcessAesDrv+0xc8>
    a202:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    a206:	d252      	bcs.n	a2ae <ProcessAesDrv+0xd2>
    a208:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    a20c:	2b04      	cmp	r3, #4
    a20e:	f000 8109 	beq.w	a424 <ProcessAesDrv+0x248>
    a212:	f04f 0800 	mov.w	r8, #0
    a216:	48aa      	ldr	r0, [pc, #680]	; (a4c0 <ProcessAesDrv+0x2e4>)
    a218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a21c:	f7fe feec 	bl	8ff8 <CC_PalMutexLock>
    a220:	2800      	cmp	r0, #0
    a222:	f040 80de 	bne.w	a3e2 <ProcessAesDrv+0x206>
    a226:	2000      	movs	r0, #0
    a228:	f7fe ff16 	bl	9058 <CC_PalPowerSaveModeSelect>
    a22c:	2800      	cmp	r0, #0
    a22e:	f040 80e1 	bne.w	a3f4 <ProcessAesDrv+0x218>
    a232:	4ba4      	ldr	r3, [pc, #656]	; (a4c4 <ProcessAesDrv+0x2e8>)
    a234:	4aa4      	ldr	r2, [pc, #656]	; (a4c8 <ProcessAesDrv+0x2ec>)
    a236:	2101      	movs	r1, #1
    a238:	6019      	str	r1, [r3, #0]
    a23a:	6813      	ldr	r3, [r2, #0]
    a23c:	2b00      	cmp	r3, #0
    a23e:	d1fc      	bne.n	a23a <ProcessAesDrv+0x5e>
    a240:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a242:	2b03      	cmp	r3, #3
    a244:	dc39      	bgt.n	a2ba <ProcessAesDrv+0xde>
    a246:	2b00      	cmp	r3, #0
    a248:	da3a      	bge.n	a2c0 <ProcessAesDrv+0xe4>
    a24a:	f8df 92c8 	ldr.w	r9, [pc, #712]	; a514 <ProcessAesDrv+0x338>
    a24e:	4a9e      	ldr	r2, [pc, #632]	; (a4c8 <ProcessAesDrv+0x2ec>)
    a250:	6813      	ldr	r3, [r2, #0]
    a252:	2b00      	cmp	r3, #0
    a254:	d1fc      	bne.n	a250 <ProcessAesDrv+0x74>
    a256:	f1b8 0f00 	cmp.w	r8, #0
    a25a:	f040 80da 	bne.w	a412 <ProcessAesDrv+0x236>
    a25e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a260:	f023 0304 	bic.w	r3, r3, #4
    a264:	2b03      	cmp	r3, #3
    a266:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a268:	d058      	beq.n	a31c <ProcessAesDrv+0x140>
    a26a:	2b01      	cmp	r3, #1
    a26c:	4b97      	ldr	r3, [pc, #604]	; (a4cc <ProcessAesDrv+0x2f0>)
    a26e:	6818      	ldr	r0, [r3, #0]
    a270:	bf0c      	ite	eq
    a272:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    a276:	f040 0020 	orrne.w	r0, r0, #32
    a27a:	f7fe fe23 	bl	8ec4 <CC_HalMaskInterrupt>
    a27e:	4b91      	ldr	r3, [pc, #580]	; (a4c4 <ProcessAesDrv+0x2e8>)
    a280:	2200      	movs	r2, #0
    a282:	601a      	str	r2, [r3, #0]
    a284:	2001      	movs	r0, #1
    a286:	f7fe fee7 	bl	9058 <CC_PalPowerSaveModeSelect>
    a28a:	2800      	cmp	r0, #0
    a28c:	f040 80bd 	bne.w	a40a <ProcessAesDrv+0x22e>
    a290:	488b      	ldr	r0, [pc, #556]	; (a4c0 <ProcessAesDrv+0x2e4>)
    a292:	f7fe feb9 	bl	9008 <CC_PalMutexUnlock>
    a296:	2800      	cmp	r0, #0
    a298:	f040 80b0 	bne.w	a3fc <ProcessAesDrv+0x220>
    a29c:	4648      	mov	r0, r9
    a29e:	b007      	add	sp, #28
    a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2a4:	2b01      	cmp	r3, #1
    a2a6:	d1af      	bne.n	a208 <ProcessAesDrv+0x2c>
    a2a8:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    a2ac:	d3ac      	bcc.n	a208 <ProcessAesDrv+0x2c>
    a2ae:	f8df 9268 	ldr.w	r9, [pc, #616]	; a518 <ProcessAesDrv+0x33c>
    a2b2:	4648      	mov	r0, r9
    a2b4:	b007      	add	sp, #28
    a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2ba:	3b06      	subs	r3, #6
    a2bc:	2b01      	cmp	r3, #1
    a2be:	d8c4      	bhi.n	a24a <ProcessAesDrv+0x6e>
    a2c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a2c2:	2b01      	cmp	r3, #1
    a2c4:	f200 80d4 	bhi.w	a470 <ProcessAesDrv+0x294>
    a2c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a2ca:	2b01      	cmp	r3, #1
    a2cc:	d837      	bhi.n	a33e <ProcessAesDrv+0x162>
    a2ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a2d0:	2b01      	cmp	r3, #1
    a2d2:	f200 8131 	bhi.w	a538 <ProcessAesDrv+0x35c>
    a2d6:	4620      	mov	r0, r4
    a2d8:	f7ff ff04 	bl	a0e4 <InitAes.part.0>
    a2dc:	4681      	mov	r9, r0
    a2de:	2800      	cmp	r0, #0
    a2e0:	d1b5      	bne.n	a24e <ProcessAesDrv+0x72>
    a2e2:	4620      	mov	r0, r4
    a2e4:	f7ff feb4 	bl	a050 <LoadAesKey>
    a2e8:	4681      	mov	r9, r0
    a2ea:	2800      	cmp	r0, #0
    a2ec:	d1af      	bne.n	a24e <ProcessAesDrv+0x72>
    a2ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a2f0:	2b07      	cmp	r3, #7
    a2f2:	d8aa      	bhi.n	a24a <ProcessAesDrv+0x6e>
    a2f4:	a201      	add	r2, pc, #4	; (adr r2, a2fc <ProcessAesDrv+0x120>)
    a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a2fa:	bf00      	nop
    a2fc:	0000a359 	.word	0x0000a359
    a300:	0000a345 	.word	0x0000a345
    a304:	0000a4b5 	.word	0x0000a4b5
    a308:	0000a345 	.word	0x0000a345
    a30c:	0000a24b 	.word	0x0000a24b
    a310:	0000a24b 	.word	0x0000a24b
    a314:	0000a4b5 	.word	0x0000a4b5
    a318:	0000a345 	.word	0x0000a345
    a31c:	2b01      	cmp	r3, #1
    a31e:	4b6b      	ldr	r3, [pc, #428]	; (a4cc <ProcessAesDrv+0x2f0>)
    a320:	6818      	ldr	r0, [r3, #0]
    a322:	bf0c      	ite	eq
    a324:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    a328:	f040 0010 	orrne.w	r0, r0, #16
    a32c:	f7fe fdca 	bl	8ec4 <CC_HalMaskInterrupt>
    a330:	e7a5      	b.n	a27e <ProcessAesDrv+0xa2>
    a332:	f8df 91e8 	ldr.w	r9, [pc, #488]	; a51c <ProcessAesDrv+0x340>
    a336:	4648      	mov	r0, r9
    a338:	b007      	add	sp, #28
    a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a33e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; a520 <ProcessAesDrv+0x344>
    a342:	e784      	b.n	a24e <ProcessAesDrv+0x72>
    a344:	4b62      	ldr	r3, [pc, #392]	; (a4d0 <ProcessAesDrv+0x2f4>)
    a346:	6822      	ldr	r2, [r4, #0]
    a348:	601a      	str	r2, [r3, #0]
    a34a:	6862      	ldr	r2, [r4, #4]
    a34c:	605a      	str	r2, [r3, #4]
    a34e:	68a2      	ldr	r2, [r4, #8]
    a350:	609a      	str	r2, [r3, #8]
    a352:	68e2      	ldr	r2, [r4, #12]
    a354:	60da      	str	r2, [r3, #12]
    a356:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a358:	682a      	ldr	r2, [r5, #0]
    a35a:	f023 0304 	bic.w	r3, r3, #4
    a35e:	2b03      	cmp	r3, #3
    a360:	d009      	beq.n	a376 <ProcessAesDrv+0x19a>
    a362:	6e21      	ldr	r1, [r4, #96]	; 0x60
    a364:	6833      	ldr	r3, [r6, #0]
    a366:	2901      	cmp	r1, #1
    a368:	bf07      	ittee	eq
    a36a:	485a      	ldreq	r0, [pc, #360]	; (a4d4 <ProcessAesDrv+0x2f8>)
    a36c:	495a      	ldreq	r1, [pc, #360]	; (a4d8 <ProcessAesDrv+0x2fc>)
    a36e:	485b      	ldrne	r0, [pc, #364]	; (a4dc <ProcessAesDrv+0x300>)
    a370:	495b      	ldrne	r1, [pc, #364]	; (a4e0 <ProcessAesDrv+0x304>)
    a372:	6003      	str	r3, [r0, #0]
    a374:	600f      	str	r7, [r1, #0]
    a376:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a378:	2b01      	cmp	r3, #1
    a37a:	bf0b      	itete	eq
    a37c:	4b59      	ldreq	r3, [pc, #356]	; (a4e4 <ProcessAesDrv+0x308>)
    a37e:	4b5a      	ldrne	r3, [pc, #360]	; (a4e8 <ProcessAesDrv+0x30c>)
    a380:	495a      	ldreq	r1, [pc, #360]	; (a4ec <ProcessAesDrv+0x310>)
    a382:	495b      	ldrne	r1, [pc, #364]	; (a4f0 <ProcessAesDrv+0x314>)
    a384:	600a      	str	r2, [r1, #0]
    a386:	601f      	str	r7, [r3, #0]
    a388:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a38a:	f023 0304 	bic.w	r3, r3, #4
    a38e:	2b03      	cmp	r3, #3
    a390:	d074      	beq.n	a47c <ProcessAesDrv+0x2a0>
    a392:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a394:	2b01      	cmp	r3, #1
    a396:	bf0c      	ite	eq
    a398:	2080      	moveq	r0, #128	; 0x80
    a39a:	2020      	movne	r0, #32
    a39c:	f7fe fd98 	bl	8ed0 <CC_HalWaitInterrupt>
    a3a0:	4681      	mov	r9, r0
    a3a2:	2800      	cmp	r0, #0
    a3a4:	f47f af53 	bne.w	a24e <ProcessAesDrv+0x72>
    a3a8:	4b47      	ldr	r3, [pc, #284]	; (a4c8 <ProcessAesDrv+0x2ec>)
    a3aa:	681a      	ldr	r2, [r3, #0]
    a3ac:	2a00      	cmp	r2, #0
    a3ae:	d1fc      	bne.n	a3aa <ProcessAesDrv+0x1ce>
    a3b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a3b2:	3b01      	subs	r3, #1
    a3b4:	4691      	mov	r9, r2
    a3b6:	2b06      	cmp	r3, #6
    a3b8:	d810      	bhi.n	a3dc <ProcessAesDrv+0x200>
    a3ba:	e8df f003 	tbb	[pc, r3]
    a3be:	7d04      	.short	0x7d04
    a3c0:	7d0f0f04 	.word	0x7d0f0f04
    a3c4:	04          	.byte	0x04
    a3c5:	00          	.byte	0x00
    a3c6:	4a42      	ldr	r2, [pc, #264]	; (a4d0 <ProcessAesDrv+0x2f4>)
    a3c8:	4b4a      	ldr	r3, [pc, #296]	; (a4f4 <ProcessAesDrv+0x318>)
    a3ca:	6812      	ldr	r2, [r2, #0]
    a3cc:	6022      	str	r2, [r4, #0]
    a3ce:	681a      	ldr	r2, [r3, #0]
    a3d0:	6062      	str	r2, [r4, #4]
    a3d2:	685a      	ldr	r2, [r3, #4]
    a3d4:	60a2      	str	r2, [r4, #8]
    a3d6:	3308      	adds	r3, #8
    a3d8:	681b      	ldr	r3, [r3, #0]
    a3da:	60e3      	str	r3, [r4, #12]
    a3dc:	2301      	movs	r3, #1
    a3de:	65a3      	str	r3, [r4, #88]	; 0x58
    a3e0:	e735      	b.n	a24e <ProcessAesDrv+0x72>
    a3e2:	4845      	ldr	r0, [pc, #276]	; (a4f8 <ProcessAesDrv+0x31c>)
    a3e4:	f7fd febc 	bl	8160 <CC_PalAbort>
    a3e8:	2000      	movs	r0, #0
    a3ea:	f7fe fe35 	bl	9058 <CC_PalPowerSaveModeSelect>
    a3ee:	2800      	cmp	r0, #0
    a3f0:	f43f af1f 	beq.w	a232 <ProcessAesDrv+0x56>
    a3f4:	4841      	ldr	r0, [pc, #260]	; (a4fc <ProcessAesDrv+0x320>)
    a3f6:	f7fd feb3 	bl	8160 <CC_PalAbort>
    a3fa:	e71a      	b.n	a232 <ProcessAesDrv+0x56>
    a3fc:	4840      	ldr	r0, [pc, #256]	; (a500 <ProcessAesDrv+0x324>)
    a3fe:	f7fd feaf 	bl	8160 <CC_PalAbort>
    a402:	4648      	mov	r0, r9
    a404:	b007      	add	sp, #28
    a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a40a:	483e      	ldr	r0, [pc, #248]	; (a504 <ProcessAesDrv+0x328>)
    a40c:	f7fd fea8 	bl	8160 <CC_PalAbort>
    a410:	e73e      	b.n	a290 <ProcessAesDrv+0xb4>
    a412:	2304      	movs	r3, #4
    a414:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    a418:	2120      	movs	r1, #32
    a41a:	f104 0010 	add.w	r0, r4, #16
    a41e:	f7ff fba5 	bl	9b6c <CC_PalMemSetZeroPlat>
    a422:	e71c      	b.n	a25e <ProcessAesDrv+0x82>
    a424:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a426:	6c20      	ldr	r0, [r4, #64]	; 0x40
    a428:	f000 f9c8 	bl	a7bc <kmu_validate_slot_and_size>
    a42c:	b9e8      	cbnz	r0, a46a <ProcessAesDrv+0x28e>
    a42e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; a524 <ProcessAesDrv+0x348>
    a432:	f8df b0f4 	ldr.w	fp, [pc, #244]	; a528 <ProcessAesDrv+0x34c>
    a436:	f8d8 3000 	ldr.w	r3, [r8]
    a43a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; a52c <ProcessAesDrv+0x350>
    a43e:	681b      	ldr	r3, [r3, #0]
    a440:	f8cb 3000 	str.w	r3, [fp]
    a444:	f8d8 3000 	ldr.w	r3, [r8]
    a448:	f8df 90e4 	ldr.w	r9, [pc, #228]	; a530 <ProcessAesDrv+0x354>
    a44c:	685b      	ldr	r3, [r3, #4]
    a44e:	f8ca 3000 	str.w	r3, [sl]
    a452:	f8d8 3000 	ldr.w	r3, [r8]
    a456:	4a2c      	ldr	r2, [pc, #176]	; (a508 <ProcessAesDrv+0x32c>)
    a458:	689b      	ldr	r3, [r3, #8]
    a45a:	f8c9 3000 	str.w	r3, [r9]
    a45e:	f8d8 3000 	ldr.w	r3, [r8]
    a462:	68db      	ldr	r3, [r3, #12]
    a464:	6013      	str	r3, [r2, #0]
    a466:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a468:	b171      	cbz	r1, a488 <ProcessAesDrv+0x2ac>
    a46a:	f04f 0801 	mov.w	r8, #1
    a46e:	e6d2      	b.n	a216 <ProcessAesDrv+0x3a>
    a470:	f8df 90c0 	ldr.w	r9, [pc, #192]	; a534 <ProcessAesDrv+0x358>
    a474:	e6eb      	b.n	a24e <ProcessAesDrv+0x72>
    a476:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
    a47a:	e70f      	b.n	a29c <ProcessAesDrv+0xc0>
    a47c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a47e:	2b01      	cmp	r3, #1
    a480:	bf0c      	ite	eq
    a482:	2040      	moveq	r0, #64	; 0x40
    a484:	2010      	movne	r0, #16
    a486:	e789      	b.n	a39c <ProcessAesDrv+0x1c0>
    a488:	f104 0310 	add.w	r3, r4, #16
    a48c:	4618      	mov	r0, r3
    a48e:	9305      	str	r3, [sp, #20]
    a490:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    a494:	e9cd 3200 	strd	r3, r2, [sp]
    a498:	9002      	str	r0, [sp, #8]
    a49a:	2010      	movs	r0, #16
    a49c:	9003      	str	r0, [sp, #12]
    a49e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    a4a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    a4a4:	f000 f9ae 	bl	a804 <kmu_derive_cmac>
    a4a8:	2800      	cmp	r0, #0
    a4aa:	d148      	bne.n	a53e <ProcessAesDrv+0x362>
    a4ac:	2300      	movs	r3, #0
    a4ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    a4b2:	e7da      	b.n	a46a <ProcessAesDrv+0x28e>
    a4b4:	4b15      	ldr	r3, [pc, #84]	; (a50c <ProcessAesDrv+0x330>)
    a4b6:	e746      	b.n	a346 <ProcessAesDrv+0x16a>
    a4b8:	4a14      	ldr	r2, [pc, #80]	; (a50c <ProcessAesDrv+0x330>)
    a4ba:	4b15      	ldr	r3, [pc, #84]	; (a510 <ProcessAesDrv+0x334>)
    a4bc:	e785      	b.n	a3ca <ProcessAesDrv+0x1ee>
    a4be:	bf00      	nop
    a4c0:	2000013c 	.word	0x2000013c
    a4c4:	5002b810 	.word	0x5002b810
    a4c8:	5002b910 	.word	0x5002b910
    a4cc:	5002ba04 	.word	0x5002ba04
    a4d0:	5002b440 	.word	0x5002b440
    a4d4:	5002bd28 	.word	0x5002bd28
    a4d8:	5002bd2c 	.word	0x5002bd2c
    a4dc:	5002bd30 	.word	0x5002bd30
    a4e0:	5002bd34 	.word	0x5002bd34
    a4e4:	5002bc2c 	.word	0x5002bc2c
    a4e8:	5002bc34 	.word	0x5002bc34
    a4ec:	5002bc28 	.word	0x5002bc28
    a4f0:	5002bc30 	.word	0x5002bc30
    a4f4:	5002b444 	.word	0x5002b444
    a4f8:	0000cde8 	.word	0x0000cde8
    a4fc:	0000ce00 	.word	0x0000ce00
    a500:	0000ce40 	.word	0x0000ce40
    a504:	0000ce20 	.word	0x0000ce20
    a508:	5002b40c 	.word	0x5002b40c
    a50c:	5002b460 	.word	0x5002b460
    a510:	5002b464 	.word	0x5002b464
    a514:	00f10001 	.word	0x00f10001
    a518:	00f10005 	.word	0x00f10005
    a51c:	00f1000b 	.word	0x00f1000b
    a520:	00f10003 	.word	0x00f10003
    a524:	2000012c 	.word	0x2000012c
    a528:	5002b400 	.word	0x5002b400
    a52c:	5002b404 	.word	0x5002b404
    a530:	5002b408 	.word	0x5002b408
    a534:	00f10002 	.word	0x00f10002
    a538:	f8df 9038 	ldr.w	r9, [pc, #56]	; a574 <ProcessAesDrv+0x398>
    a53c:	e687      	b.n	a24e <ProcessAesDrv+0x72>
    a53e:	f8d8 3000 	ldr.w	r3, [r8]
    a542:	4a0b      	ldr	r2, [pc, #44]	; (a570 <ProcessAesDrv+0x394>)
    a544:	681b      	ldr	r3, [r3, #0]
    a546:	f8cb 3000 	str.w	r3, [fp]
    a54a:	f8d8 3000 	ldr.w	r3, [r8]
    a54e:	685b      	ldr	r3, [r3, #4]
    a550:	f8ca 3000 	str.w	r3, [sl]
    a554:	f8d8 3000 	ldr.w	r3, [r8]
    a558:	689b      	ldr	r3, [r3, #8]
    a55a:	f8c9 3000 	str.w	r3, [r9]
    a55e:	f8d8 3000 	ldr.w	r3, [r8]
    a562:	68db      	ldr	r3, [r3, #12]
    a564:	6013      	str	r3, [r2, #0]
    a566:	9805      	ldr	r0, [sp, #20]
    a568:	2110      	movs	r1, #16
    a56a:	f7ff faff 	bl	9b6c <CC_PalMemSetZeroPlat>
    a56e:	e79d      	b.n	a4ac <ProcessAesDrv+0x2d0>
    a570:	5002b40c 	.word	0x5002b40c
    a574:	00f10004 	.word	0x00f10004

0000a578 <FinishAesDrv>:
    a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a57c:	b301      	cbz	r1, a5c0 <FinishAesDrv+0x48>
    a57e:	b1fa      	cbz	r2, a5c0 <FinishAesDrv+0x48>
    a580:	4604      	mov	r4, r0
    a582:	2800      	cmp	r0, #0
    a584:	d07a      	beq.n	a67c <FinishAesDrv+0x104>
    a586:	461d      	mov	r5, r3
    a588:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a58a:	2b07      	cmp	r3, #7
    a58c:	460e      	mov	r6, r1
    a58e:	d01b      	beq.n	a5c8 <FinishAesDrv+0x50>
    a590:	b95d      	cbnz	r5, a5aa <FinishAesDrv+0x32>
    a592:	2b03      	cmp	r3, #3
    a594:	d110      	bne.n	a5b8 <FinishAesDrv+0x40>
    a596:	6d83      	ldr	r3, [r0, #88]	; 0x58
    a598:	b973      	cbnz	r3, a5b8 <FinishAesDrv+0x40>
    a59a:	f100 0364 	add.w	r3, r0, #100	; 0x64
    a59e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    a5a2:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    a5a6:	600b      	str	r3, [r1, #0]
    a5a8:	2510      	movs	r5, #16
    a5aa:	462b      	mov	r3, r5
    a5ac:	4631      	mov	r1, r6
    a5ae:	4620      	mov	r0, r4
    a5b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a5b4:	f7ff be12 	b.w	a1dc <ProcessAesDrv>
    a5b8:	462f      	mov	r7, r5
    a5ba:	4638      	mov	r0, r7
    a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5c0:	4f66      	ldr	r7, [pc, #408]	; (a75c <FinishAesDrv+0x1e4>)
    a5c2:	4638      	mov	r0, r7
    a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a5ca:	2b00      	cmp	r3, #0
    a5cc:	d159      	bne.n	a682 <FinishAesDrv+0x10a>
    a5ce:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    a5d2:	d25b      	bcs.n	a68c <FinishAesDrv+0x114>
    a5d4:	b915      	cbnz	r5, a5dc <FinishAesDrv+0x64>
    a5d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
    a5d8:	2b00      	cmp	r3, #0
    a5da:	d157      	bne.n	a68c <FinishAesDrv+0x114>
    a5dc:	4860      	ldr	r0, [pc, #384]	; (a760 <FinishAesDrv+0x1e8>)
    a5de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a5e2:	f7fe fd09 	bl	8ff8 <CC_PalMutexLock>
    a5e6:	2800      	cmp	r0, #0
    a5e8:	f040 8097 	bne.w	a71a <FinishAesDrv+0x1a2>
    a5ec:	2000      	movs	r0, #0
    a5ee:	f7fe fd33 	bl	9058 <CC_PalPowerSaveModeSelect>
    a5f2:	2800      	cmp	r0, #0
    a5f4:	f040 808d 	bne.w	a712 <FinishAesDrv+0x19a>
    a5f8:	4b5a      	ldr	r3, [pc, #360]	; (a764 <FinishAesDrv+0x1ec>)
    a5fa:	4a5b      	ldr	r2, [pc, #364]	; (a768 <FinishAesDrv+0x1f0>)
    a5fc:	2101      	movs	r1, #1
    a5fe:	6019      	str	r1, [r3, #0]
    a600:	6813      	ldr	r3, [r2, #0]
    a602:	2b00      	cmp	r3, #0
    a604:	d1fc      	bne.n	a600 <FinishAesDrv+0x88>
    a606:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a608:	2b03      	cmp	r3, #3
    a60a:	dd20      	ble.n	a64e <FinishAesDrv+0xd6>
    a60c:	3b06      	subs	r3, #6
    a60e:	2b01      	cmp	r3, #1
    a610:	d81f      	bhi.n	a652 <FinishAesDrv+0xda>
    a612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a614:	2b01      	cmp	r3, #1
    a616:	d83b      	bhi.n	a690 <FinishAesDrv+0x118>
    a618:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a61a:	2b01      	cmp	r3, #1
    a61c:	f200 8085 	bhi.w	a72a <FinishAesDrv+0x1b2>
    a620:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a622:	2b01      	cmp	r3, #1
    a624:	f200 8083 	bhi.w	a72e <FinishAesDrv+0x1b6>
    a628:	4620      	mov	r0, r4
    a62a:	f7ff fd5b 	bl	a0e4 <InitAes.part.0>
    a62e:	4607      	mov	r7, r0
    a630:	b980      	cbnz	r0, a654 <FinishAesDrv+0xdc>
    a632:	4620      	mov	r0, r4
    a634:	f7ff fd0c 	bl	a050 <LoadAesKey>
    a638:	4607      	mov	r7, r0
    a63a:	b958      	cbnz	r0, a654 <FinishAesDrv+0xdc>
    a63c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a63e:	2b07      	cmp	r3, #7
    a640:	d807      	bhi.n	a652 <FinishAesDrv+0xda>
    a642:	e8df f003 	tbb	[pc, r3]
    a646:	2730      	.short	0x2730
    a648:	06062755 	.word	0x06062755
    a64c:	2755      	.short	0x2755
    a64e:	2b00      	cmp	r3, #0
    a650:	dadf      	bge.n	a612 <FinishAesDrv+0x9a>
    a652:	4f46      	ldr	r7, [pc, #280]	; (a76c <FinishAesDrv+0x1f4>)
    a654:	4a44      	ldr	r2, [pc, #272]	; (a768 <FinishAesDrv+0x1f0>)
    a656:	6813      	ldr	r3, [r2, #0]
    a658:	2b00      	cmp	r3, #0
    a65a:	d1fc      	bne.n	a656 <FinishAesDrv+0xde>
    a65c:	4a41      	ldr	r2, [pc, #260]	; (a764 <FinishAesDrv+0x1ec>)
    a65e:	2001      	movs	r0, #1
    a660:	6013      	str	r3, [r2, #0]
    a662:	f7fe fcf9 	bl	9058 <CC_PalPowerSaveModeSelect>
    a666:	2800      	cmp	r0, #0
    a668:	d15b      	bne.n	a722 <FinishAesDrv+0x1aa>
    a66a:	483d      	ldr	r0, [pc, #244]	; (a760 <FinishAesDrv+0x1e8>)
    a66c:	f7fe fccc 	bl	9008 <CC_PalMutexUnlock>
    a670:	2800      	cmp	r0, #0
    a672:	d0a2      	beq.n	a5ba <FinishAesDrv+0x42>
    a674:	483e      	ldr	r0, [pc, #248]	; (a770 <FinishAesDrv+0x1f8>)
    a676:	f7fd fd73 	bl	8160 <CC_PalAbort>
    a67a:	e79e      	b.n	a5ba <FinishAesDrv+0x42>
    a67c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    a680:	e79b      	b.n	a5ba <FinishAesDrv+0x42>
    a682:	2b01      	cmp	r3, #1
    a684:	d1a6      	bne.n	a5d4 <FinishAesDrv+0x5c>
    a686:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    a68a:	d3a3      	bcc.n	a5d4 <FinishAesDrv+0x5c>
    a68c:	4f39      	ldr	r7, [pc, #228]	; (a774 <FinishAesDrv+0x1fc>)
    a68e:	e794      	b.n	a5ba <FinishAesDrv+0x42>
    a690:	4f39      	ldr	r7, [pc, #228]	; (a778 <FinishAesDrv+0x200>)
    a692:	e7df      	b.n	a654 <FinishAesDrv+0xdc>
    a694:	4b39      	ldr	r3, [pc, #228]	; (a77c <FinishAesDrv+0x204>)
    a696:	6822      	ldr	r2, [r4, #0]
    a698:	601a      	str	r2, [r3, #0]
    a69a:	6862      	ldr	r2, [r4, #4]
    a69c:	605a      	str	r2, [r3, #4]
    a69e:	68a2      	ldr	r2, [r4, #8]
    a6a0:	609a      	str	r2, [r3, #8]
    a6a2:	68e2      	ldr	r2, [r4, #12]
    a6a4:	60da      	str	r2, [r3, #12]
    a6a6:	4936      	ldr	r1, [pc, #216]	; (a780 <FinishAesDrv+0x208>)
    a6a8:	4a36      	ldr	r2, [pc, #216]	; (a784 <FinishAesDrv+0x20c>)
    a6aa:	2301      	movs	r3, #1
    a6ac:	600b      	str	r3, [r1, #0]
    a6ae:	6015      	str	r5, [r2, #0]
    a6b0:	2d00      	cmp	r5, #0
    a6b2:	d13e      	bne.n	a732 <FinishAesDrv+0x1ba>
    a6b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
    a6b6:	b90a      	cbnz	r2, a6bc <FinishAesDrv+0x144>
    a6b8:	4a33      	ldr	r2, [pc, #204]	; (a788 <FinishAesDrv+0x210>)
    a6ba:	6013      	str	r3, [r2, #0]
    a6bc:	4b2a      	ldr	r3, [pc, #168]	; (a768 <FinishAesDrv+0x1f0>)
    a6be:	681f      	ldr	r7, [r3, #0]
    a6c0:	2f00      	cmp	r7, #0
    a6c2:	d1fc      	bne.n	a6be <FinishAesDrv+0x146>
    a6c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a6c6:	3b01      	subs	r3, #1
    a6c8:	2b06      	cmp	r3, #6
    a6ca:	d8c3      	bhi.n	a654 <FinishAesDrv+0xdc>
    a6cc:	a201      	add	r2, pc, #4	; (adr r2, a6d4 <FinishAesDrv+0x15c>)
    a6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a6d2:	bf00      	nop
    a6d4:	0000a6f5 	.word	0x0000a6f5
    a6d8:	0000a70d 	.word	0x0000a70d
    a6dc:	0000a6f5 	.word	0x0000a6f5
    a6e0:	0000a655 	.word	0x0000a655
    a6e4:	0000a655 	.word	0x0000a655
    a6e8:	0000a70d 	.word	0x0000a70d
    a6ec:	0000a6f5 	.word	0x0000a6f5
    a6f0:	4b26      	ldr	r3, [pc, #152]	; (a78c <FinishAesDrv+0x214>)
    a6f2:	e7d0      	b.n	a696 <FinishAesDrv+0x11e>
    a6f4:	4a21      	ldr	r2, [pc, #132]	; (a77c <FinishAesDrv+0x204>)
    a6f6:	4b26      	ldr	r3, [pc, #152]	; (a790 <FinishAesDrv+0x218>)
    a6f8:	6812      	ldr	r2, [r2, #0]
    a6fa:	6022      	str	r2, [r4, #0]
    a6fc:	681a      	ldr	r2, [r3, #0]
    a6fe:	6062      	str	r2, [r4, #4]
    a700:	685a      	ldr	r2, [r3, #4]
    a702:	60a2      	str	r2, [r4, #8]
    a704:	3308      	adds	r3, #8
    a706:	681b      	ldr	r3, [r3, #0]
    a708:	60e3      	str	r3, [r4, #12]
    a70a:	e7a3      	b.n	a654 <FinishAesDrv+0xdc>
    a70c:	4a1f      	ldr	r2, [pc, #124]	; (a78c <FinishAesDrv+0x214>)
    a70e:	4b21      	ldr	r3, [pc, #132]	; (a794 <FinishAesDrv+0x21c>)
    a710:	e7f2      	b.n	a6f8 <FinishAesDrv+0x180>
    a712:	4821      	ldr	r0, [pc, #132]	; (a798 <FinishAesDrv+0x220>)
    a714:	f7fd fd24 	bl	8160 <CC_PalAbort>
    a718:	e76e      	b.n	a5f8 <FinishAesDrv+0x80>
    a71a:	4820      	ldr	r0, [pc, #128]	; (a79c <FinishAesDrv+0x224>)
    a71c:	f7fd fd20 	bl	8160 <CC_PalAbort>
    a720:	e764      	b.n	a5ec <FinishAesDrv+0x74>
    a722:	481f      	ldr	r0, [pc, #124]	; (a7a0 <FinishAesDrv+0x228>)
    a724:	f7fd fd1c 	bl	8160 <CC_PalAbort>
    a728:	e79f      	b.n	a66a <FinishAesDrv+0xf2>
    a72a:	4f1e      	ldr	r7, [pc, #120]	; (a7a4 <FinishAesDrv+0x22c>)
    a72c:	e792      	b.n	a654 <FinishAesDrv+0xdc>
    a72e:	4f1e      	ldr	r7, [pc, #120]	; (a7a8 <FinishAesDrv+0x230>)
    a730:	e790      	b.n	a654 <FinishAesDrv+0xdc>
    a732:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    a734:	6833      	ldr	r3, [r6, #0]
    a736:	2a01      	cmp	r2, #1
    a738:	d00a      	beq.n	a750 <FinishAesDrv+0x1d8>
    a73a:	491c      	ldr	r1, [pc, #112]	; (a7ac <FinishAesDrv+0x234>)
    a73c:	4a1c      	ldr	r2, [pc, #112]	; (a7b0 <FinishAesDrv+0x238>)
    a73e:	600b      	str	r3, [r1, #0]
    a740:	2010      	movs	r0, #16
    a742:	6015      	str	r5, [r2, #0]
    a744:	f7fe fbc4 	bl	8ed0 <CC_HalWaitInterrupt>
    a748:	4607      	mov	r7, r0
    a74a:	2800      	cmp	r0, #0
    a74c:	d0b6      	beq.n	a6bc <FinishAesDrv+0x144>
    a74e:	e781      	b.n	a654 <FinishAesDrv+0xdc>
    a750:	4918      	ldr	r1, [pc, #96]	; (a7b4 <FinishAesDrv+0x23c>)
    a752:	4a19      	ldr	r2, [pc, #100]	; (a7b8 <FinishAesDrv+0x240>)
    a754:	600b      	str	r3, [r1, #0]
    a756:	2040      	movs	r0, #64	; 0x40
    a758:	6015      	str	r5, [r2, #0]
    a75a:	e7f3      	b.n	a744 <FinishAesDrv+0x1cc>
    a75c:	00f1000b 	.word	0x00f1000b
    a760:	2000013c 	.word	0x2000013c
    a764:	5002b810 	.word	0x5002b810
    a768:	5002b910 	.word	0x5002b910
    a76c:	00f10001 	.word	0x00f10001
    a770:	0000ce40 	.word	0x0000ce40
    a774:	00f10005 	.word	0x00f10005
    a778:	00f10002 	.word	0x00f10002
    a77c:	5002b440 	.word	0x5002b440
    a780:	5002b47c 	.word	0x5002b47c
    a784:	5002b4bc 	.word	0x5002b4bc
    a788:	5002b524 	.word	0x5002b524
    a78c:	5002b460 	.word	0x5002b460
    a790:	5002b444 	.word	0x5002b444
    a794:	5002b464 	.word	0x5002b464
    a798:	0000ce00 	.word	0x0000ce00
    a79c:	0000cde8 	.word	0x0000cde8
    a7a0:	0000ce20 	.word	0x0000ce20
    a7a4:	00f10003 	.word	0x00f10003
    a7a8:	00f10004 	.word	0x00f10004
    a7ac:	5002bc30 	.word	0x5002bc30
    a7b0:	5002bc34 	.word	0x5002bc34
    a7b4:	5002bc28 	.word	0x5002bc28
    a7b8:	5002bc2c 	.word	0x5002bc2c

0000a7bc <kmu_validate_slot_and_size>:
    a7bc:	b921      	cbnz	r1, a7c8 <kmu_validate_slot_and_size+0xc>
    a7be:	4b03      	ldr	r3, [pc, #12]	; (a7cc <kmu_validate_slot_and_size+0x10>)
    a7c0:	2800      	cmp	r0, #0
    a7c2:	bf18      	it	ne
    a7c4:	4618      	movne	r0, r3
    a7c6:	4770      	bx	lr
    a7c8:	4801      	ldr	r0, [pc, #4]	; (a7d0 <kmu_validate_slot_and_size+0x14>)
    a7ca:	4770      	bx	lr
    a7cc:	00f70001 	.word	0x00f70001
    a7d0:	00f70003 	.word	0x00f70003

0000a7d4 <kmu_validate_kdr_slot_and_size>:
    a7d4:	b921      	cbnz	r1, a7e0 <kmu_validate_kdr_slot_and_size+0xc>
    a7d6:	4b03      	ldr	r3, [pc, #12]	; (a7e4 <kmu_validate_kdr_slot_and_size+0x10>)
    a7d8:	2800      	cmp	r0, #0
    a7da:	bf18      	it	ne
    a7dc:	4618      	movne	r0, r3
    a7de:	4770      	bx	lr
    a7e0:	4801      	ldr	r0, [pc, #4]	; (a7e8 <kmu_validate_kdr_slot_and_size+0x14>)
    a7e2:	4770      	bx	lr
    a7e4:	00f70001 	.word	0x00f70001
    a7e8:	00f70003 	.word	0x00f70003

0000a7ec <kmu_use_kdr_key>:
    a7ec:	4903      	ldr	r1, [pc, #12]	; (a7fc <kmu_use_kdr_key+0x10>)
    a7ee:	4b04      	ldr	r3, [pc, #16]	; (a800 <kmu_use_kdr_key+0x14>)
    a7f0:	2000      	movs	r0, #0
    a7f2:	2201      	movs	r2, #1
    a7f4:	6008      	str	r0, [r1, #0]
    a7f6:	601a      	str	r2, [r3, #0]
    a7f8:	4770      	bx	lr
    a7fa:	bf00      	nop
    a7fc:	5002ba38 	.word	0x5002ba38
    a800:	5002b478 	.word	0x5002b478

0000a804 <kmu_derive_cmac>:
    a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a808:	b0cd      	sub	sp, #308	; 0x134
    a80a:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
    a80e:	460f      	mov	r7, r1
    a810:	2100      	movs	r1, #0
    a812:	460c      	mov	r4, r1
    a814:	4681      	mov	r9, r0
    a816:	4616      	mov	r6, r2
    a818:	a80e      	add	r0, sp, #56	; 0x38
    a81a:	2274      	movs	r2, #116	; 0x74
    a81c:	469b      	mov	fp, r3
    a81e:	f000 fb97 	bl	af50 <memset>
    a822:	4621      	mov	r1, r4
    a824:	2280      	movs	r2, #128	; 0x80
    a826:	a82c      	add	r0, sp, #176	; 0xb0
    a828:	942b      	str	r4, [sp, #172]	; 0xac
    a82a:	f000 fb91 	bl	af50 <memset>
    a82e:	2384      	movs	r3, #132	; 0x84
    a830:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    a834:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    a838:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    a83c:	9305      	str	r3, [sp, #20]
    a83e:	d860      	bhi.n	a902 <kmu_derive_cmac+0xfe>
    a840:	ab05      	add	r3, sp, #20
    a842:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
    a846:	9301      	str	r3, [sp, #4]
    a848:	9502      	str	r5, [sp, #8]
    a84a:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    a84e:	4659      	mov	r1, fp
    a850:	4630      	mov	r0, r6
    a852:	f8cd a000 	str.w	sl, [sp]
    a856:	f000 f865 	bl	a924 <UtilCmacBuildDataForDerivation>
    a85a:	2800      	cmp	r0, #0
    a85c:	d14c      	bne.n	a8f8 <kmu_derive_cmac+0xf4>
    a85e:	2303      	movs	r3, #3
    a860:	f88d 3013 	strb.w	r3, [sp, #19]
    a864:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a868:	901c      	str	r0, [sp, #112]	; 0x70
    a86a:	2200      	movs	r2, #0
    a86c:	2110      	movs	r1, #16
    a86e:	a80e      	add	r0, sp, #56	; 0x38
    a870:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    a874:	2607      	movs	r6, #7
    a876:	2301      	movs	r3, #1
    a878:	2401      	movs	r4, #1
    a87a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
    a87e:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
    a882:	971a      	str	r7, [sp, #104]	; 0x68
    a884:	961b      	str	r6, [sp, #108]	; 0x6c
    a886:	9426      	str	r4, [sp, #152]	; 0x98
    a888:	f10d 0920 	add.w	r9, sp, #32
    a88c:	f7ff f96e 	bl	9b6c <CC_PalMemSetZeroPlat>
    a890:	2110      	movs	r1, #16
    a892:	e9cd 1900 	strd	r1, r9, [sp]
    a896:	ab0a      	add	r3, sp, #40	; 0x28
    a898:	9905      	ldr	r1, [sp, #20]
    a89a:	4650      	mov	r0, sl
    a89c:	aa06      	add	r2, sp, #24
    a89e:	f7ff fa09 	bl	9cb4 <SetDataBuffersInfo>
    a8a2:	4607      	mov	r7, r0
    a8a4:	b150      	cbz	r0, a8bc <kmu_derive_cmac+0xb8>
    a8a6:	e01e      	b.n	a8e6 <kmu_derive_cmac+0xe2>
    a8a8:	f7ff f95c 	bl	9b64 <CC_PalMemCopyPlat>
    a8ac:	2110      	movs	r1, #16
    a8ae:	a80e      	add	r0, sp, #56	; 0x38
    a8b0:	f7ff f95c 	bl	9b6c <CC_PalMemSetZeroPlat>
    a8b4:	3401      	adds	r4, #1
    a8b6:	1bad      	subs	r5, r5, r6
    a8b8:	b2e4      	uxtb	r4, r4
    a8ba:	d027      	beq.n	a90c <kmu_derive_cmac+0x108>
    a8bc:	9b05      	ldr	r3, [sp, #20]
    a8be:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
    a8c2:	2d10      	cmp	r5, #16
    a8c4:	464a      	mov	r2, r9
    a8c6:	a906      	add	r1, sp, #24
    a8c8:	a80e      	add	r0, sp, #56	; 0x38
    a8ca:	462e      	mov	r6, r5
    a8cc:	bf28      	it	cs
    a8ce:	2610      	movcs	r6, #16
    a8d0:	f7ff fe52 	bl	a578 <FinishAesDrv>
    a8d4:	4603      	mov	r3, r0
    a8d6:	4632      	mov	r2, r6
    a8d8:	eb08 0007 	add.w	r0, r8, r7
    a8dc:	a90e      	add	r1, sp, #56	; 0x38
    a8de:	4437      	add	r7, r6
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	d0e1      	beq.n	a8a8 <kmu_derive_cmac+0xa4>
    a8e4:	461f      	mov	r7, r3
    a8e6:	a80e      	add	r0, sp, #56	; 0x38
    a8e8:	2274      	movs	r2, #116	; 0x74
    a8ea:	2100      	movs	r1, #0
    a8ec:	f7ff f93c 	bl	9b68 <CC_PalMemSetPlat>
    a8f0:	4638      	mov	r0, r7
    a8f2:	b04d      	add	sp, #308	; 0x134
    a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8f8:	4f08      	ldr	r7, [pc, #32]	; (a91c <kmu_derive_cmac+0x118>)
    a8fa:	4638      	mov	r0, r7
    a8fc:	b04d      	add	sp, #308	; 0x134
    a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a902:	4f07      	ldr	r7, [pc, #28]	; (a920 <kmu_derive_cmac+0x11c>)
    a904:	4638      	mov	r0, r7
    a906:	b04d      	add	sp, #308	; 0x134
    a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a90c:	a80e      	add	r0, sp, #56	; 0x38
    a90e:	2274      	movs	r2, #116	; 0x74
    a910:	2100      	movs	r1, #0
    a912:	462f      	mov	r7, r5
    a914:	f7ff f928 	bl	9b68 <CC_PalMemSetPlat>
    a918:	e7ea      	b.n	a8f0 <kmu_derive_cmac+0xec>
    a91a:	bf00      	nop
    a91c:	00f1000e 	.word	0x00f1000e
    a920:	00f1000f 	.word	0x00f1000f

0000a924 <UtilCmacBuildDataForDerivation>:
    a924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a928:	b082      	sub	sp, #8
    a92a:	2600      	movs	r6, #0
    a92c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a92e:	9601      	str	r6, [sp, #4]
    a930:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    a934:	d83c      	bhi.n	a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a936:	00ee      	lsls	r6, r5, #3
    a938:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    a93c:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
    a940:	461f      	mov	r7, r3
    a942:	bf34      	ite	cc
    a944:	2303      	movcc	r3, #3
    a946:	2304      	movcs	r3, #4
    a948:	2d3f      	cmp	r5, #63	; 0x3f
    a94a:	460c      	mov	r4, r1
    a94c:	9300      	str	r3, [sp, #0]
    a94e:	d82f      	bhi.n	a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a950:	b370      	cbz	r0, a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a952:	4690      	mov	r8, r2
    a954:	b117      	cbz	r7, a95c <UtilCmacBuildDataForDerivation+0x38>
    a956:	b35a      	cbz	r2, a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a958:	2f40      	cmp	r7, #64	; 0x40
    a95a:	d829      	bhi.n	a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a95c:	9a08      	ldr	r2, [sp, #32]
    a95e:	b33a      	cbz	r2, a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a960:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a962:	6811      	ldr	r1, [r2, #0]
    a964:	b321      	cbz	r1, a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a966:	19e2      	adds	r2, r4, r7
    a968:	4413      	add	r3, r2
    a96a:	4299      	cmp	r1, r3
    a96c:	d320      	bcc.n	a9b0 <UtilCmacBuildDataForDerivation+0x8c>
    a96e:	9b08      	ldr	r3, [sp, #32]
    a970:	4622      	mov	r2, r4
    a972:	4601      	mov	r1, r0
    a974:	1c58      	adds	r0, r3, #1
    a976:	f7ff f8f5 	bl	9b64 <CC_PalMemCopyPlat>
    a97a:	9b08      	ldr	r3, [sp, #32]
    a97c:	4423      	add	r3, r4
    a97e:	2200      	movs	r2, #0
    a980:	3402      	adds	r4, #2
    a982:	705a      	strb	r2, [r3, #1]
    a984:	bb07      	cbnz	r7, a9c8 <UtilCmacBuildDataForDerivation+0xa4>
    a986:	2eff      	cmp	r6, #255	; 0xff
    a988:	9600      	str	r6, [sp, #0]
    a98a:	d915      	bls.n	a9b8 <UtilCmacBuildDataForDerivation+0x94>
    a98c:	9b08      	ldr	r3, [sp, #32]
    a98e:	0235      	lsls	r5, r6, #8
    a990:	b2ad      	uxth	r5, r5
    a992:	1918      	adds	r0, r3, r4
    a994:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    a998:	2202      	movs	r2, #2
    a99a:	a901      	add	r1, sp, #4
    a99c:	9501      	str	r5, [sp, #4]
    a99e:	f7ff f8e1 	bl	9b64 <CC_PalMemCopyPlat>
    a9a2:	3402      	adds	r4, #2
    a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9a6:	2000      	movs	r0, #0
    a9a8:	601c      	str	r4, [r3, #0]
    a9aa:	b002      	add	sp, #8
    a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9b0:	4809      	ldr	r0, [pc, #36]	; (a9d8 <UtilCmacBuildDataForDerivation+0xb4>)
    a9b2:	b002      	add	sp, #8
    a9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9b8:	9b08      	ldr	r3, [sp, #32]
    a9ba:	2201      	movs	r2, #1
    a9bc:	1918      	adds	r0, r3, r4
    a9be:	4669      	mov	r1, sp
    a9c0:	f7ff f8d0 	bl	9b64 <CC_PalMemCopyPlat>
    a9c4:	3401      	adds	r4, #1
    a9c6:	e7ed      	b.n	a9a4 <UtilCmacBuildDataForDerivation+0x80>
    a9c8:	9b08      	ldr	r3, [sp, #32]
    a9ca:	4641      	mov	r1, r8
    a9cc:	1918      	adds	r0, r3, r4
    a9ce:	463a      	mov	r2, r7
    a9d0:	f7ff f8c8 	bl	9b64 <CC_PalMemCopyPlat>
    a9d4:	443c      	add	r4, r7
    a9d6:	e7d6      	b.n	a986 <UtilCmacBuildDataForDerivation+0x62>
    a9d8:	80000006 	.word	0x80000006

0000a9dc <CC_PalDataBufferAttrGet>:
    a9dc:	2000      	movs	r0, #0
    a9de:	7018      	strb	r0, [r3, #0]
    a9e0:	4770      	bx	lr
    a9e2:	bf00      	nop

0000a9e4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a9e4:	4770      	bx	lr

0000a9e6 <sys_notify_validate>:
	if (notify == NULL) {
    a9e6:	4602      	mov	r2, r0
    a9e8:	b158      	cbz	r0, aa02 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a9ea:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a9ec:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    a9f0:	2b01      	cmp	r3, #1
    a9f2:	d003      	beq.n	a9fc <sys_notify_validate+0x16>
    a9f4:	2b03      	cmp	r3, #3
    a9f6:	d107      	bne.n	aa08 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    a9f8:	6803      	ldr	r3, [r0, #0]
    a9fa:	b143      	cbz	r3, aa0e <sys_notify_validate+0x28>
		notify->result = 0;
    a9fc:	2000      	movs	r0, #0
    a9fe:	6090      	str	r0, [r2, #8]
    aa00:	4770      	bx	lr
		return -EINVAL;
    aa02:	f06f 0015 	mvn.w	r0, #21
    aa06:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    aa08:	f06f 0015 	mvn.w	r0, #21
    aa0c:	4770      	bx	lr
			rv = -EINVAL;
    aa0e:	f06f 0015 	mvn.w	r0, #21
}
    aa12:	4770      	bx	lr

0000aa14 <arch_printk_char_out>:
}
    aa14:	2000      	movs	r0, #0
    aa16:	4770      	bx	lr

0000aa18 <str_out>:
{
    aa18:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    aa1a:	680c      	ldr	r4, [r1, #0]
    aa1c:	b154      	cbz	r4, aa34 <str_out+0x1c>
    aa1e:	688a      	ldr	r2, [r1, #8]
    aa20:	684b      	ldr	r3, [r1, #4]
    aa22:	429a      	cmp	r2, r3
    aa24:	da06      	bge.n	aa34 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    aa26:	3b01      	subs	r3, #1
    aa28:	429a      	cmp	r2, r3
    aa2a:	d008      	beq.n	aa3e <str_out+0x26>
		ctx->str[ctx->count++] = c;
    aa2c:	1c53      	adds	r3, r2, #1
    aa2e:	608b      	str	r3, [r1, #8]
    aa30:	54a0      	strb	r0, [r4, r2]
    aa32:	e002      	b.n	aa3a <str_out+0x22>
		ctx->count++;
    aa34:	688b      	ldr	r3, [r1, #8]
    aa36:	3301      	adds	r3, #1
    aa38:	608b      	str	r3, [r1, #8]
}
    aa3a:	bc10      	pop	{r4}
    aa3c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    aa3e:	1c53      	adds	r3, r2, #1
    aa40:	608b      	str	r3, [r1, #8]
    aa42:	2300      	movs	r3, #0
    aa44:	54a3      	strb	r3, [r4, r2]
    aa46:	e7f8      	b.n	aa3a <str_out+0x22>

0000aa48 <printk>:
{
    aa48:	b40f      	push	{r0, r1, r2, r3}
    aa4a:	b500      	push	{lr}
    aa4c:	b083      	sub	sp, #12
    aa4e:	a904      	add	r1, sp, #16
    aa50:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    aa54:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    aa56:	f7f5 fd81 	bl	55c <vprintk>
}
    aa5a:	b003      	add	sp, #12
    aa5c:	f85d eb04 	ldr.w	lr, [sp], #4
    aa60:	b004      	add	sp, #16
    aa62:	4770      	bx	lr

0000aa64 <snprintk>:
{
    aa64:	b40c      	push	{r2, r3}
    aa66:	b500      	push	{lr}
    aa68:	b083      	sub	sp, #12
    aa6a:	ab04      	add	r3, sp, #16
    aa6c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    aa70:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    aa72:	f7f5 fd83 	bl	57c <vsnprintk>
}
    aa76:	b003      	add	sp, #12
    aa78:	f85d eb04 	ldr.w	lr, [sp], #4
    aa7c:	b002      	add	sp, #8
    aa7e:	4770      	bx	lr

0000aa80 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    aa80:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa84:	8b81      	ldrh	r1, [r0, #28]
    aa86:	f021 0107 	bic.w	r1, r1, #7
    aa8a:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    aa8c:	8381      	strh	r1, [r0, #28]
}
    aa8e:	4770      	bx	lr

0000aa90 <notify_monitors>:
{
    aa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa94:	4606      	mov	r6, r0
    aa96:	460f      	mov	r7, r1
    aa98:	4690      	mov	r8, r2
	return list->head;
    aa9a:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    aa9c:	b119      	cbz	r1, aaa6 <notify_monitors+0x16>
    aa9e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    aaa0:	b131      	cbz	r1, aab0 <notify_monitors+0x20>
	return node->next;
    aaa2:	680c      	ldr	r4, [r1, #0]
    aaa4:	e004      	b.n	aab0 <notify_monitors+0x20>
    aaa6:	460c      	mov	r4, r1
    aaa8:	e002      	b.n	aab0 <notify_monitors+0x20>
    aaaa:	4623      	mov	r3, r4
    aaac:	4621      	mov	r1, r4
    aaae:	461c      	mov	r4, r3
    aab0:	b159      	cbz	r1, aaca <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    aab2:	684d      	ldr	r5, [r1, #4]
    aab4:	4643      	mov	r3, r8
    aab6:	463a      	mov	r2, r7
    aab8:	4630      	mov	r0, r6
    aaba:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    aabc:	2c00      	cmp	r4, #0
    aabe:	d0f4      	beq.n	aaaa <notify_monitors+0x1a>
    aac0:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    aac2:	2c00      	cmp	r4, #0
    aac4:	d0f2      	beq.n	aaac <notify_monitors+0x1c>
	return node->next;
    aac6:	6823      	ldr	r3, [r4, #0]
    aac8:	e7f0      	b.n	aaac <notify_monitors+0x1c>
}
    aaca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aace <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aace:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    aad0:	f013 0307 	ands.w	r3, r3, #7
    aad4:	d103      	bne.n	aade <process_recheck+0x10>
	return list->head;
    aad6:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    aad8:	b10a      	cbz	r2, aade <process_recheck+0x10>
		evt = EVT_START;
    aada:	2003      	movs	r0, #3
    aadc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    aade:	2b02      	cmp	r3, #2
    aae0:	d003      	beq.n	aaea <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    aae2:	2b01      	cmp	r3, #1
    aae4:	d006      	beq.n	aaf4 <process_recheck+0x26>
	int evt = EVT_NOP;
    aae6:	2000      	movs	r0, #0
    aae8:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    aaea:	8bc2      	ldrh	r2, [r0, #30]
    aaec:	2a00      	cmp	r2, #0
    aaee:	d1f8      	bne.n	aae2 <process_recheck+0x14>
		evt = EVT_STOP;
    aaf0:	2004      	movs	r0, #4
    aaf2:	4770      	bx	lr
    aaf4:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    aaf6:	b10b      	cbz	r3, aafc <process_recheck+0x2e>
		evt = EVT_RESET;
    aaf8:	2005      	movs	r0, #5
}
    aafa:	4770      	bx	lr
	int evt = EVT_NOP;
    aafc:	2000      	movs	r0, #0
    aafe:	4770      	bx	lr

0000ab00 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    ab00:	b158      	cbz	r0, ab1a <validate_args+0x1a>
{
    ab02:	b510      	push	{r4, lr}
    ab04:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    ab06:	b159      	cbz	r1, ab20 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    ab08:	1d08      	adds	r0, r1, #4
    ab0a:	f7ff ff6c 	bl	a9e6 <sys_notify_validate>
	if ((rv == 0)
    ab0e:	b918      	cbnz	r0, ab18 <validate_args+0x18>
	    && ((cli->notify.flags
    ab10:	68a3      	ldr	r3, [r4, #8]
    ab12:	f033 0303 	bics.w	r3, r3, #3
    ab16:	d106      	bne.n	ab26 <validate_args+0x26>
}
    ab18:	bd10      	pop	{r4, pc}
		return -EINVAL;
    ab1a:	f06f 0015 	mvn.w	r0, #21
}
    ab1e:	4770      	bx	lr
		return -EINVAL;
    ab20:	f06f 0015 	mvn.w	r0, #21
    ab24:	e7f8      	b.n	ab18 <validate_args+0x18>
		rv = -EINVAL;
    ab26:	f06f 0015 	mvn.w	r0, #21
    ab2a:	e7f5      	b.n	ab18 <validate_args+0x18>

0000ab2c <notify_one>:
{
    ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab30:	4607      	mov	r7, r0
    ab32:	460c      	mov	r4, r1
    ab34:	4616      	mov	r6, r2
    ab36:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ab38:	4619      	mov	r1, r3
    ab3a:	1d20      	adds	r0, r4, #4
    ab3c:	f7f5 fcda 	bl	4f4 <sys_notify_finalize>
	if (cb) {
    ab40:	b128      	cbz	r0, ab4e <notify_one+0x22>
    ab42:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    ab44:	462b      	mov	r3, r5
    ab46:	4632      	mov	r2, r6
    ab48:	4621      	mov	r1, r4
    ab4a:	4638      	mov	r0, r7
    ab4c:	47c0      	blx	r8
}
    ab4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ab52 <notify_all>:
{
    ab52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ab56:	4681      	mov	r9, r0
    ab58:	460c      	mov	r4, r1
    ab5a:	4690      	mov	r8, r2
    ab5c:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    ab5e:	e005      	b.n	ab6c <notify_all+0x1a>
	list->tail = node;
    ab60:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    ab62:	463b      	mov	r3, r7
    ab64:	4642      	mov	r2, r8
    ab66:	4648      	mov	r0, r9
    ab68:	f7ff ffe0 	bl	ab2c <notify_one>
	return list->head;
    ab6c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    ab6e:	b129      	cbz	r1, ab7c <notify_all+0x2a>
	return node->next;
    ab70:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    ab72:	6025      	str	r5, [r4, #0]
	return list->tail;
    ab74:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ab76:	428e      	cmp	r6, r1
    ab78:	d1f3      	bne.n	ab62 <notify_all+0x10>
    ab7a:	e7f1      	b.n	ab60 <notify_all+0xe>
}
    ab7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ab80 <onoff_manager_init>:
	if ((mgr == NULL)
    ab80:	b170      	cbz	r0, aba0 <onoff_manager_init+0x20>
{
    ab82:	b538      	push	{r3, r4, r5, lr}
    ab84:	460c      	mov	r4, r1
    ab86:	4605      	mov	r5, r0
	    || (transitions == NULL)
    ab88:	b169      	cbz	r1, aba6 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    ab8a:	680b      	ldr	r3, [r1, #0]
    ab8c:	b173      	cbz	r3, abac <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    ab8e:	684b      	ldr	r3, [r1, #4]
    ab90:	b17b      	cbz	r3, abb2 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ab92:	2220      	movs	r2, #32
    ab94:	2100      	movs	r1, #0
    ab96:	f000 f9db 	bl	af50 <memset>
    ab9a:	612c      	str	r4, [r5, #16]
	return 0;
    ab9c:	2000      	movs	r0, #0
}
    ab9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    aba0:	f06f 0015 	mvn.w	r0, #21
}
    aba4:	4770      	bx	lr
		return -EINVAL;
    aba6:	f06f 0015 	mvn.w	r0, #21
    abaa:	e7f8      	b.n	ab9e <onoff_manager_init+0x1e>
    abac:	f06f 0015 	mvn.w	r0, #21
    abb0:	e7f5      	b.n	ab9e <onoff_manager_init+0x1e>
    abb2:	f06f 0015 	mvn.w	r0, #21
    abb6:	e7f2      	b.n	ab9e <onoff_manager_init+0x1e>

0000abb8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    abb8:	b508      	push	{r3, lr}
    abba:	4604      	mov	r4, r0
    abbc:	4608      	mov	r0, r1
    abbe:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    abc0:	461a      	mov	r2, r3
    abc2:	47a0      	blx	r4
	return z_impl_z_current_get();
    abc4:	f7fc fe50 	bl	7868 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    abc8:	f7f7 fb3e 	bl	2248 <z_impl_k_thread_abort>

0000abcc <extract_decimal>:
{
    abcc:	b410      	push	{r4}
    abce:	4604      	mov	r4, r0
	const char *sp = *str;
    abd0:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    abd2:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    abd4:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    abd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    abda:	2909      	cmp	r1, #9
    abdc:	d806      	bhi.n	abec <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    abde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    abe2:	3201      	adds	r2, #1
    abe4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    abe8:	3830      	subs	r0, #48	; 0x30
    abea:	e7f3      	b.n	abd4 <extract_decimal+0x8>
	*str = sp;
    abec:	6022      	str	r2, [r4, #0]
}
    abee:	bc10      	pop	{r4}
    abf0:	4770      	bx	lr

0000abf2 <encode_uint>:
{
    abf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abf6:	b083      	sub	sp, #12
    abf8:	4604      	mov	r4, r0
    abfa:	460d      	mov	r5, r1
    abfc:	9201      	str	r2, [sp, #4]
    abfe:	469a      	mov	sl, r3
    ac00:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    ac04:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    ac06:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    ac0a:	2b6f      	cmp	r3, #111	; 0x6f
    ac0c:	d00f      	beq.n	ac2e <encode_uint+0x3c>
    ac0e:	d906      	bls.n	ac1e <encode_uint+0x2c>
    ac10:	2b70      	cmp	r3, #112	; 0x70
    ac12:	d00f      	beq.n	ac34 <encode_uint+0x42>
    ac14:	2b78      	cmp	r3, #120	; 0x78
    ac16:	d110      	bne.n	ac3a <encode_uint+0x48>
		return 16;
    ac18:	f04f 0910 	mov.w	r9, #16
    ac1c:	e026      	b.n	ac6c <encode_uint+0x7a>
	switch (specifier) {
    ac1e:	2b58      	cmp	r3, #88	; 0x58
    ac20:	d002      	beq.n	ac28 <encode_uint+0x36>
    ac22:	f04f 090a 	mov.w	r9, #10
    ac26:	e021      	b.n	ac6c <encode_uint+0x7a>
		return 16;
    ac28:	f04f 0910 	mov.w	r9, #16
    ac2c:	e01e      	b.n	ac6c <encode_uint+0x7a>
		return 8;
    ac2e:	f04f 0908 	mov.w	r9, #8
    ac32:	e01b      	b.n	ac6c <encode_uint+0x7a>
		return 16;
    ac34:	f04f 0910 	mov.w	r9, #16
    ac38:	e018      	b.n	ac6c <encode_uint+0x7a>
	switch (specifier) {
    ac3a:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    ac3e:	e015      	b.n	ac6c <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ac40:	f1bb 0f19 	cmp.w	fp, #25
    ac44:	d820      	bhi.n	ac88 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    ac46:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ac48:	3237      	adds	r2, #55	; 0x37
    ac4a:	b2d2      	uxtb	r2, r2
    ac4c:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    ac50:	4632      	mov	r2, r6
    ac52:	463b      	mov	r3, r7
    ac54:	4620      	mov	r0, r4
    ac56:	4629      	mov	r1, r5
    ac58:	f7f5 fa52 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    ac5c:	42bd      	cmp	r5, r7
    ac5e:	bf08      	it	eq
    ac60:	42b4      	cmpeq	r4, r6
    ac62:	d315      	bcc.n	ac90 <encode_uint+0x9e>
    ac64:	45d0      	cmp	r8, sl
    ac66:	d913      	bls.n	ac90 <encode_uint+0x9e>
		value /= radix;
    ac68:	4604      	mov	r4, r0
    ac6a:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    ac6c:	464e      	mov	r6, r9
    ac6e:	2700      	movs	r7, #0
    ac70:	464a      	mov	r2, r9
    ac72:	463b      	mov	r3, r7
    ac74:	4620      	mov	r0, r4
    ac76:	4629      	mov	r1, r5
    ac78:	f7f5 fa42 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ac7c:	2a09      	cmp	r2, #9
    ac7e:	d8df      	bhi.n	ac40 <encode_uint+0x4e>
    ac80:	b2d2      	uxtb	r2, r2
    ac82:	3230      	adds	r2, #48	; 0x30
    ac84:	b2d2      	uxtb	r2, r2
    ac86:	e7e1      	b.n	ac4c <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    ac88:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ac8a:	3257      	adds	r2, #87	; 0x57
    ac8c:	b2d2      	uxtb	r2, r2
    ac8e:	e7dd      	b.n	ac4c <encode_uint+0x5a>
	if (conv->flag_hash) {
    ac90:	9b01      	ldr	r3, [sp, #4]
    ac92:	781b      	ldrb	r3, [r3, #0]
    ac94:	f013 0f20 	tst.w	r3, #32
    ac98:	d005      	beq.n	aca6 <encode_uint+0xb4>
		if (radix == 8) {
    ac9a:	f1b9 0f08 	cmp.w	r9, #8
    ac9e:	d006      	beq.n	acae <encode_uint+0xbc>
		} else if (radix == 16) {
    aca0:	f1b9 0f10 	cmp.w	r9, #16
    aca4:	d009      	beq.n	acba <encode_uint+0xc8>
}
    aca6:	4640      	mov	r0, r8
    aca8:	b003      	add	sp, #12
    acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    acae:	9a01      	ldr	r2, [sp, #4]
    acb0:	7893      	ldrb	r3, [r2, #2]
    acb2:	f043 0308 	orr.w	r3, r3, #8
    acb6:	7093      	strb	r3, [r2, #2]
    acb8:	e7f5      	b.n	aca6 <encode_uint+0xb4>
			conv->altform_0c = true;
    acba:	9a01      	ldr	r2, [sp, #4]
    acbc:	7893      	ldrb	r3, [r2, #2]
    acbe:	f043 0310 	orr.w	r3, r3, #16
    acc2:	7093      	strb	r3, [r2, #2]
    acc4:	e7ef      	b.n	aca6 <encode_uint+0xb4>

0000acc6 <outs>:
{
    acc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acca:	4607      	mov	r7, r0
    accc:	460e      	mov	r6, r1
    acce:	4614      	mov	r4, r2
    acd0:	4698      	mov	r8, r3
	size_t count = 0;
    acd2:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    acd4:	e006      	b.n	ace4 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    acd6:	4631      	mov	r1, r6
    acd8:	f814 0b01 	ldrb.w	r0, [r4], #1
    acdc:	47b8      	blx	r7
		if (rc < 0) {
    acde:	2800      	cmp	r0, #0
    ace0:	db09      	blt.n	acf6 <outs+0x30>
		++count;
    ace2:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ace4:	4544      	cmp	r4, r8
    ace6:	d3f6      	bcc.n	acd6 <outs+0x10>
    ace8:	f1b8 0f00 	cmp.w	r8, #0
    acec:	d102      	bne.n	acf4 <outs+0x2e>
    acee:	7823      	ldrb	r3, [r4, #0]
    acf0:	2b00      	cmp	r3, #0
    acf2:	d1f0      	bne.n	acd6 <outs+0x10>
	return (int)count;
    acf4:	4628      	mov	r0, r5
}
    acf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000acfa <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    acfa:	4040      	eors	r0, r0
    acfc:	f380 8811 	msr	BASEPRI, r0
    ad00:	f04f 0004 	mov.w	r0, #4
    ad04:	df02      	svc	2
}
    ad06:	4770      	bx	lr

0000ad08 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    ad08:	4770      	bx	lr

0000ad0a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    ad0a:	2200      	movs	r2, #0
    ad0c:	6002      	str	r2, [r0, #0]
    ad0e:	6042      	str	r2, [r0, #4]
    ad10:	6082      	str	r2, [r0, #8]
}
    ad12:	4770      	bx	lr

0000ad14 <abort_function>:
{
    ad14:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    ad16:	2000      	movs	r0, #0
    ad18:	f7f6 fc86 	bl	1628 <sys_reboot>

0000ad1c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ad1c:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    ad1e:	f7fa fd25 	bl	576c <z_fatal_error>
}
    ad22:	bd08      	pop	{r3, pc}

0000ad24 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    ad24:	b508      	push	{r3, lr}
    ad26:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    ad28:	6800      	ldr	r0, [r0, #0]
    ad2a:	f7ff fff7 	bl	ad1c <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    ad2e:	bd08      	pop	{r3, pc}

0000ad30 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    ad30:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    ad32:	2100      	movs	r1, #0
    ad34:	2001      	movs	r0, #1
    ad36:	f7ff fff1 	bl	ad1c <z_arm_fatal_error>
}
    ad3a:	bd08      	pop	{r3, pc}

0000ad3c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    ad3c:	b508      	push	{r3, lr}
	handler();
    ad3e:	f7f6 ff77 	bl	1c30 <z_SysNmiOnReset>
	z_arm_int_exit();
    ad42:	f7f7 f873 	bl	1e2c <z_arm_exc_exit>
}
    ad46:	bd08      	pop	{r3, pc}

0000ad48 <memory_fault_recoverable>:
}
    ad48:	2000      	movs	r0, #0
    ad4a:	4770      	bx	lr

0000ad4c <debug_monitor>:
	*recoverable = false;
    ad4c:	2300      	movs	r3, #0
    ad4e:	700b      	strb	r3, [r1, #0]
}
    ad50:	4770      	bx	lr

0000ad52 <fault_handle>:
{
    ad52:	b508      	push	{r3, lr}
	*recoverable = false;
    ad54:	2300      	movs	r3, #0
    ad56:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    ad58:	1ecb      	subs	r3, r1, #3
    ad5a:	2b09      	cmp	r3, #9
    ad5c:	d81a      	bhi.n	ad94 <fault_handle+0x42>
    ad5e:	e8df f003 	tbb	[pc, r3]
    ad62:	0905      	.short	0x0905
    ad64:	1919110d 	.word	0x1919110d
    ad68:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    ad6c:	4611      	mov	r1, r2
    ad6e:	f7f7 f90b 	bl	1f88 <hard_fault>
		break;
    ad72:	e010      	b.n	ad96 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    ad74:	2100      	movs	r1, #0
    ad76:	f7f7 f8a3 	bl	1ec0 <mem_manage_fault>
		break;
    ad7a:	e00c      	b.n	ad96 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    ad7c:	2100      	movs	r1, #0
    ad7e:	f7f7 f863 	bl	1e48 <bus_fault>
		break;
    ad82:	e008      	b.n	ad96 <fault_handle+0x44>
		reason = usage_fault(esf);
    ad84:	f7f7 f88a 	bl	1e9c <usage_fault>
		break;
    ad88:	e005      	b.n	ad96 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    ad8a:	4611      	mov	r1, r2
    ad8c:	f7ff ffde 	bl	ad4c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ad90:	2000      	movs	r0, #0
		break;
    ad92:	e000      	b.n	ad96 <fault_handle+0x44>
	*recoverable = false;
    ad94:	2000      	movs	r0, #0
}
    ad96:	bd08      	pop	{r3, pc}

0000ad98 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    ad98:	6843      	ldr	r3, [r0, #4]
    ad9a:	1e5a      	subs	r2, r3, #1
		&&
    ad9c:	4213      	tst	r3, r2
    ad9e:	d106      	bne.n	adae <mpu_partition_is_valid+0x16>
		&&
    ada0:	2b1f      	cmp	r3, #31
    ada2:	d906      	bls.n	adb2 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    ada4:	6803      	ldr	r3, [r0, #0]
		&&
    ada6:	421a      	tst	r2, r3
    ada8:	d005      	beq.n	adb6 <mpu_partition_is_valid+0x1e>
    adaa:	2000      	movs	r0, #0
    adac:	4770      	bx	lr
    adae:	2000      	movs	r0, #0
    adb0:	4770      	bx	lr
    adb2:	2000      	movs	r0, #0
    adb4:	4770      	bx	lr
    adb6:	2001      	movs	r0, #1
}
    adb8:	4770      	bx	lr

0000adba <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    adba:	2807      	cmp	r0, #7
    adbc:	d805      	bhi.n	adca <region_allocate_and_init+0x10>
{
    adbe:	b510      	push	{r4, lr}
    adc0:	4604      	mov	r4, r0
	region_init(index, region_conf);
    adc2:	f7f7 fa77 	bl	22b4 <region_init>
	return index;
    adc6:	4620      	mov	r0, r4
}
    adc8:	bd10      	pop	{r4, pc}
		return -EINVAL;
    adca:	f06f 0015 	mvn.w	r0, #21
}
    adce:	4770      	bx	lr

0000add0 <mpu_configure_region>:
{
    add0:	b500      	push	{lr}
    add2:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    add4:	680b      	ldr	r3, [r1, #0]
    add6:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    add8:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    adda:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    addc:	2b20      	cmp	r3, #32
    adde:	d912      	bls.n	ae06 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    ade0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ade4:	d811      	bhi.n	ae0a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    ade6:	3b01      	subs	r3, #1
    ade8:	fab3 f383 	clz	r3, r3
    adec:	f1c3 031f 	rsb	r3, r3, #31
    adf0:	005b      	lsls	r3, r3, #1
    adf2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    adf6:	4313      	orrs	r3, r2
    adf8:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    adfa:	a901      	add	r1, sp, #4
    adfc:	f7ff ffdd 	bl	adba <region_allocate_and_init>
}
    ae00:	b005      	add	sp, #20
    ae02:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    ae06:	2308      	movs	r3, #8
    ae08:	e7f5      	b.n	adf6 <mpu_configure_region+0x26>
		return REGION_4G;
    ae0a:	233e      	movs	r3, #62	; 0x3e
    ae0c:	e7f3      	b.n	adf6 <mpu_configure_region+0x26>

0000ae0e <mpu_configure_regions>:
{
    ae0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ae12:	4680      	mov	r8, r0
    ae14:	460f      	mov	r7, r1
    ae16:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    ae18:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    ae1a:	2500      	movs	r5, #0
    ae1c:	e009      	b.n	ae32 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    ae1e:	4621      	mov	r1, r4
    ae20:	b2f0      	uxtb	r0, r6
    ae22:	f7ff ffd5 	bl	add0 <mpu_configure_region>
    ae26:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    ae28:	f110 0f16 	cmn.w	r0, #22
    ae2c:	d014      	beq.n	ae58 <mpu_configure_regions+0x4a>
		reg_index++;
    ae2e:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    ae30:	3501      	adds	r5, #1
    ae32:	42bd      	cmp	r5, r7
    ae34:	da10      	bge.n	ae58 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    ae36:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    ae3a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    ae3e:	6862      	ldr	r2, [r4, #4]
    ae40:	2a00      	cmp	r2, #0
    ae42:	d0f5      	beq.n	ae30 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    ae44:	f1b9 0f00 	cmp.w	r9, #0
    ae48:	d0e9      	beq.n	ae1e <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    ae4a:	4620      	mov	r0, r4
    ae4c:	f7ff ffa4 	bl	ad98 <mpu_partition_is_valid>
		if (do_sanity_check &&
    ae50:	2800      	cmp	r0, #0
    ae52:	d1e4      	bne.n	ae1e <mpu_configure_regions+0x10>
			return -EINVAL;
    ae54:	f06f 0615 	mvn.w	r6, #21
}
    ae58:	4630      	mov	r0, r6
    ae5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ae5e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    ae5e:	4602      	mov	r2, r0
    ae60:	780b      	ldrb	r3, [r1, #0]
    ae62:	b11b      	cbz	r3, ae6c <strcpy+0xe>
		*d = *s;
    ae64:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    ae68:	3101      	adds	r1, #1
    ae6a:	e7f9      	b.n	ae60 <strcpy+0x2>
	}

	*d = '\0';
    ae6c:	7013      	strb	r3, [r2, #0]

	return dest;
}
    ae6e:	4770      	bx	lr

0000ae70 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    ae70:	4603      	mov	r3, r0
    ae72:	b1a2      	cbz	r2, ae9e <strncpy+0x2e>
{
    ae74:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    ae76:	780c      	ldrb	r4, [r1, #0]
    ae78:	b12c      	cbz	r4, ae86 <strncpy+0x16>
		*d = *s;
    ae7a:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    ae7e:	3101      	adds	r1, #1
		d++;
		n--;
    ae80:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    ae82:	2a00      	cmp	r2, #0
    ae84:	d1f7      	bne.n	ae76 <strncpy+0x6>
	}

	while (n > 0) {
    ae86:	b122      	cbz	r2, ae92 <strncpy+0x22>
		*d = '\0';
    ae88:	2100      	movs	r1, #0
    ae8a:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    ae8e:	3a01      	subs	r2, #1
    ae90:	e7f9      	b.n	ae86 <strncpy+0x16>
	}

	return dest;
}
    ae92:	bc10      	pop	{r4}
    ae94:	4770      	bx	lr
		*d = '\0';
    ae96:	2100      	movs	r1, #0
    ae98:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ae9c:	3a01      	subs	r2, #1
	while (n > 0) {
    ae9e:	2a00      	cmp	r2, #0
    aea0:	d1f9      	bne.n	ae96 <strncpy+0x26>
    aea2:	4770      	bx	lr

0000aea4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    aea4:	4603      	mov	r3, r0
	size_t n = 0;
    aea6:	2000      	movs	r0, #0

	while (*s != '\0') {
    aea8:	781a      	ldrb	r2, [r3, #0]
    aeaa:	b112      	cbz	r2, aeb2 <strlen+0xe>
		s++;
    aeac:	3301      	adds	r3, #1
		n++;
    aeae:	3001      	adds	r0, #1
    aeb0:	e7fa      	b.n	aea8 <strlen+0x4>
	}

	return n;
}
    aeb2:	4770      	bx	lr

0000aeb4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    aeb4:	4603      	mov	r3, r0
	size_t n = 0;
    aeb6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    aeb8:	781a      	ldrb	r2, [r3, #0]
    aeba:	b122      	cbz	r2, aec6 <strnlen+0x12>
    aebc:	4288      	cmp	r0, r1
    aebe:	d202      	bcs.n	aec6 <strnlen+0x12>
		s++;
    aec0:	3301      	adds	r3, #1
		n++;
    aec2:	3001      	adds	r0, #1
    aec4:	e7f8      	b.n	aeb8 <strnlen+0x4>
	}

	return n;
}
    aec6:	4770      	bx	lr

0000aec8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    aec8:	7803      	ldrb	r3, [r0, #0]
    aeca:	780a      	ldrb	r2, [r1, #0]
    aecc:	4293      	cmp	r3, r2
    aece:	d103      	bne.n	aed8 <strcmp+0x10>
    aed0:	b113      	cbz	r3, aed8 <strcmp+0x10>
		s1++;
    aed2:	3001      	adds	r0, #1
		s2++;
    aed4:	3101      	adds	r1, #1
    aed6:	e7f7      	b.n	aec8 <strcmp>
	}

	return *s1 - *s2;
}
    aed8:	1a98      	subs	r0, r3, r2
    aeda:	4770      	bx	lr

0000aedc <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    aedc:	1a43      	subs	r3, r0, r1
    aede:	4293      	cmp	r3, r2
    aee0:	d30b      	bcc.n	aefa <memmove+0x1e>
	char *dest = d;
    aee2:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    aee4:	b17a      	cbz	r2, af06 <memmove+0x2a>
{
    aee6:	b410      	push	{r4}
			*dest = *src;
    aee8:	f811 4b01 	ldrb.w	r4, [r1], #1
    aeec:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
    aef0:	3a01      	subs	r2, #1
		while (n > 0) {
    aef2:	2a00      	cmp	r2, #0
    aef4:	d1f8      	bne.n	aee8 <memmove+0xc>
		}
	}

	return d;
}
    aef6:	bc10      	pop	{r4}
    aef8:	4770      	bx	lr
		while (n > 0) {
    aefa:	b11a      	cbz	r2, af04 <memmove+0x28>
			n--;
    aefc:	3a01      	subs	r2, #1
			dest[n] = src[n];
    aefe:	5c8b      	ldrb	r3, [r1, r2]
    af00:	5483      	strb	r3, [r0, r2]
    af02:	e7fa      	b.n	aefa <memmove+0x1e>
    af04:	4770      	bx	lr
    af06:	4770      	bx	lr

0000af08 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    af08:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    af0a:	ea80 0301 	eor.w	r3, r0, r1
    af0e:	f013 0f03 	tst.w	r3, #3
    af12:	d001      	beq.n	af18 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    af14:	4603      	mov	r3, r0
    af16:	e017      	b.n	af48 <memcpy+0x40>
    af18:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    af1a:	f013 0f03 	tst.w	r3, #3
    af1e:	d00b      	beq.n	af38 <memcpy+0x30>
			if (n == 0) {
    af20:	b1a2      	cbz	r2, af4c <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    af22:	f811 4b01 	ldrb.w	r4, [r1], #1
    af26:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    af2a:	3a01      	subs	r2, #1
    af2c:	e7f5      	b.n	af1a <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    af2e:	f851 4b04 	ldr.w	r4, [r1], #4
    af32:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    af36:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    af38:	2a03      	cmp	r2, #3
    af3a:	d8f8      	bhi.n	af2e <memcpy+0x26>
    af3c:	e004      	b.n	af48 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    af3e:	f811 4b01 	ldrb.w	r4, [r1], #1
    af42:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    af46:	3a01      	subs	r2, #1
	while (n > 0) {
    af48:	2a00      	cmp	r2, #0
    af4a:	d1f8      	bne.n	af3e <memcpy+0x36>
	}

	return d;
}
    af4c:	bc10      	pop	{r4}
    af4e:	4770      	bx	lr

0000af50 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    af50:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    af52:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    af54:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    af56:	f013 0f03 	tst.w	r3, #3
    af5a:	d004      	beq.n	af66 <memset+0x16>
		if (n == 0) {
    af5c:	b19a      	cbz	r2, af86 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    af5e:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    af62:	3a01      	subs	r2, #1
    af64:	e7f7      	b.n	af56 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    af66:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    af68:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    af6c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    af70:	2a03      	cmp	r2, #3
    af72:	d906      	bls.n	af82 <memset+0x32>
		*(d_word++) = c_word;
    af74:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    af78:	3a04      	subs	r2, #4
    af7a:	e7f9      	b.n	af70 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    af7c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    af80:	3a01      	subs	r2, #1
	while (n > 0) {
    af82:	2a00      	cmp	r2, #0
    af84:	d1fa      	bne.n	af7c <memset+0x2c>
	}

	return buf;
}
    af86:	bc10      	pop	{r4}
    af88:	4770      	bx	lr

0000af8a <_stdout_hook_default>:
}
    af8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    af8e:	4770      	bx	lr

0000af90 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    af90:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    af92:	f7f7 fa77 	bl	2484 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    af96:	bd08      	pop	{r3, pc}

0000af98 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    af98:	b084      	sub	sp, #16
    af9a:	ab04      	add	r3, sp, #16
    af9c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    afa0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    afa4:	2b06      	cmp	r3, #6
    afa6:	d001      	beq.n	afac <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    afa8:	b004      	add	sp, #16
    afaa:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    afac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    afb0:	2201      	movs	r2, #1
    afb2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    afb6:	f3bf 8f4f 	dsb	sy
        __WFE();
    afba:	bf20      	wfe
    while (true)
    afbc:	e7fd      	b.n	afba <pm_power_state_set+0x22>

0000afbe <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    afbe:	b084      	sub	sp, #16
    afc0:	ab04      	add	r3, sp, #16
    afc2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    afc6:	2300      	movs	r3, #0
    afc8:	f383 8811 	msr	BASEPRI, r3
    afcc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    afd0:	b004      	add	sp, #16
    afd2:	4770      	bx	lr

0000afd4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    afd4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    afd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    afda:	0089      	lsls	r1, r1, #2
    afdc:	3140      	adds	r1, #64	; 0x40
}
    afde:	4408      	add	r0, r1
    afe0:	4770      	bx	lr

0000afe2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    afe2:	6840      	ldr	r0, [r0, #4]
}
    afe4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    afe8:	4770      	bx	lr

0000afea <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    afea:	6900      	ldr	r0, [r0, #16]
}
    afec:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    aff0:	4770      	bx	lr

0000aff2 <set_off_state>:
	__asm__ volatile(
    aff2:	f04f 0320 	mov.w	r3, #32
    aff6:	f3ef 8211 	mrs	r2, BASEPRI
    affa:	f383 8812 	msr	BASEPRI_MAX, r3
    affe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b002:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b004:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b008:	d001      	beq.n	b00e <set_off_state+0x1c>
    b00a:	428b      	cmp	r3, r1
    b00c:	d107      	bne.n	b01e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b00e:	2301      	movs	r3, #1
    b010:	6003      	str	r3, [r0, #0]
	int err = 0;
    b012:	2000      	movs	r0, #0
	__asm__ volatile(
    b014:	f382 8811 	msr	BASEPRI, r2
    b018:	f3bf 8f6f 	isb	sy
}
    b01c:	4770      	bx	lr
		err = -EPERM;
    b01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b022:	e7f7      	b.n	b014 <set_off_state+0x22>

0000b024 <set_starting_state>:
{
    b024:	b410      	push	{r4}
	__asm__ volatile(
    b026:	f04f 0320 	mov.w	r3, #32
    b02a:	f3ef 8211 	mrs	r2, BASEPRI
    b02e:	f383 8812 	msr	BASEPRI_MAX, r3
    b032:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b036:	6803      	ldr	r3, [r0, #0]
    b038:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b03c:	f003 0307 	and.w	r3, r3, #7
    b040:	2b01      	cmp	r3, #1
    b042:	d009      	beq.n	b058 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    b044:	428c      	cmp	r4, r1
    b046:	d00a      	beq.n	b05e <set_starting_state+0x3a>
		err = -EPERM;
    b048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    b04c:	f382 8811 	msr	BASEPRI, r2
    b050:	f3bf 8f6f 	isb	sy
}
    b054:	bc10      	pop	{r4}
    b056:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b058:	6001      	str	r1, [r0, #0]
	int err = 0;
    b05a:	2000      	movs	r0, #0
    b05c:	e7f6      	b.n	b04c <set_starting_state+0x28>
		err = -EALREADY;
    b05e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b062:	e7f3      	b.n	b04c <set_starting_state+0x28>

0000b064 <set_on_state>:
	__asm__ volatile(
    b064:	f04f 0320 	mov.w	r3, #32
    b068:	f3ef 8211 	mrs	r2, BASEPRI
    b06c:	f383 8812 	msr	BASEPRI_MAX, r3
    b070:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b074:	6803      	ldr	r3, [r0, #0]
    b076:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b07a:	f043 0302 	orr.w	r3, r3, #2
    b07e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b080:	f382 8811 	msr	BASEPRI, r2
    b084:	f3bf 8f6f 	isb	sy
}
    b088:	4770      	bx	lr

0000b08a <clkstarted_handle>:
{
    b08a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b08c:	4606      	mov	r6, r0
    b08e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    b090:	f7ff ffa0 	bl	afd4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    b094:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    b096:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    b098:	2300      	movs	r3, #0
    b09a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    b09e:	f7ff ffe1 	bl	b064 <set_on_state>
	if (callback) {
    b0a2:	b11d      	cbz	r5, b0ac <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b0a4:	463a      	mov	r2, r7
    b0a6:	4621      	mov	r1, r4
    b0a8:	4630      	mov	r0, r6
    b0aa:	47a8      	blx	r5
}
    b0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b0ae <async_start>:
{
    b0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0b2:	4606      	mov	r6, r0
    b0b4:	4690      	mov	r8, r2
    b0b6:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    b0b8:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    b0ba:	4629      	mov	r1, r5
    b0bc:	f7ff ff8a 	bl	afd4 <get_sub_data>
    b0c0:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    b0c2:	9906      	ldr	r1, [sp, #24]
    b0c4:	3008      	adds	r0, #8
    b0c6:	f7ff ffad 	bl	b024 <set_starting_state>
	if (err < 0) {
    b0ca:	2800      	cmp	r0, #0
    b0cc:	db09      	blt.n	b0e2 <async_start+0x34>
	subdata->cb = cb;
    b0ce:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    b0d2:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    b0d4:	4629      	mov	r1, r5
    b0d6:	4630      	mov	r0, r6
    b0d8:	f7ff ff83 	bl	afe2 <get_sub_config>
    b0dc:	6803      	ldr	r3, [r0, #0]
    b0de:	4798      	blx	r3
	return 0;
    b0e0:	2000      	movs	r0, #0
}
    b0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b0e6 <api_start>:
{
    b0e6:	b510      	push	{r4, lr}
    b0e8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b0ea:	2480      	movs	r4, #128	; 0x80
    b0ec:	9400      	str	r4, [sp, #0]
    b0ee:	f7ff ffde 	bl	b0ae <async_start>
}
    b0f2:	b002      	add	sp, #8
    b0f4:	bd10      	pop	{r4, pc}

0000b0f6 <onoff_started_callback>:
{
    b0f6:	b510      	push	{r4, lr}
    b0f8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    b0fa:	b2c9      	uxtb	r1, r1
    b0fc:	f7ff ff75 	bl	afea <get_onoff_manager>
	notify(mgr, 0);
    b100:	2100      	movs	r1, #0
    b102:	47a0      	blx	r4
}
    b104:	bd10      	pop	{r4, pc}

0000b106 <hfclk_start>:
{
    b106:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b108:	2001      	movs	r0, #1
    b10a:	f7f9 f939 	bl	4380 <nrfx_clock_start>
}
    b10e:	bd08      	pop	{r3, pc}

0000b110 <lfclk_start>:
{
    b110:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b112:	2000      	movs	r0, #0
    b114:	f7f9 f934 	bl	4380 <nrfx_clock_start>
}
    b118:	bd08      	pop	{r3, pc}

0000b11a <hfclk_stop>:
{
    b11a:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b11c:	2001      	movs	r0, #1
    b11e:	f7f9 f995 	bl	444c <nrfx_clock_stop>
}
    b122:	bd08      	pop	{r3, pc}

0000b124 <lfclk_stop>:
{
    b124:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b126:	2000      	movs	r0, #0
    b128:	f7f9 f990 	bl	444c <nrfx_clock_stop>
}
    b12c:	bd08      	pop	{r3, pc}

0000b12e <api_stop>:
{
    b12e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    b130:	2280      	movs	r2, #128	; 0x80
    b132:	f7f7 fb01 	bl	2738 <stop>
}
    b136:	bd08      	pop	{r3, pc}

0000b138 <blocking_start_callback>:
{
    b138:	b508      	push	{r3, lr}
    b13a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b13c:	f7fb f942 	bl	63c4 <z_impl_k_sem_give>
}
    b140:	bd08      	pop	{r3, pc}

0000b142 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    b142:	f010 0f10 	tst.w	r0, #16
    b146:	d104      	bne.n	b152 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    b148:	f010 0f20 	tst.w	r0, #32
    b14c:	d103      	bne.n	b156 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    b14e:	2000      	movs	r0, #0
    b150:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    b152:	2003      	movs	r0, #3
    b154:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    b156:	2001      	movs	r0, #1
}
    b158:	4770      	bx	lr

0000b15a <gpio_nrfx_port_get_raw>:
	return port->config;
    b15a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b15c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b15e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    b162:	600b      	str	r3, [r1, #0]
}
    b164:	2000      	movs	r0, #0
    b166:	4770      	bx	lr

0000b168 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    b168:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b16a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    b16c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    b170:	4042      	eors	r2, r0
    b172:	400a      	ands	r2, r1
    b174:	4042      	eors	r2, r0
    p_reg->OUT = value;
    b176:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    b17a:	2000      	movs	r0, #0
    b17c:	4770      	bx	lr

0000b17e <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    b17e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b180:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    b182:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    b186:	2000      	movs	r0, #0
    b188:	4770      	bx	lr

0000b18a <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    b18a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b18c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    b18e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    b192:	2000      	movs	r0, #0
    b194:	4770      	bx	lr

0000b196 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    b196:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b198:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b19a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    b19e:	404b      	eors	r3, r1
    p_reg->OUT = value;
    b1a0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    b1a4:	2000      	movs	r0, #0
    b1a6:	4770      	bx	lr

0000b1a8 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    b1a8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    b1ac:	d007      	beq.n	b1be <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b1ae:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    b1b2:	d00d      	beq.n	b1d0 <get_trigger+0x28>
    b1b4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    b1b8:	d008      	beq.n	b1cc <get_trigger+0x24>
    b1ba:	2001      	movs	r0, #1
}
    b1bc:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    b1be:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    b1c2:	d001      	beq.n	b1c8 <get_trigger+0x20>
    b1c4:	2005      	movs	r0, #5
    b1c6:	4770      	bx	lr
    b1c8:	2004      	movs	r0, #4
    b1ca:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b1cc:	2002      	movs	r0, #2
    b1ce:	4770      	bx	lr
    b1d0:	2003      	movs	r0, #3
    b1d2:	4770      	bx	lr

0000b1d4 <endtx_isr>:
	return dev->config;
    b1d4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b1d6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b1d8:	f04f 0120 	mov.w	r1, #32
    b1dc:	f3ef 8211 	mrs	r2, BASEPRI
    b1e0:	f381 8812 	msr	BASEPRI_MAX, r1
    b1e4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b1e8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b1ec:	b131      	cbz	r1, b1fc <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1ee:	2100      	movs	r1, #0
    b1f0:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    b1f4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1f8:	2101      	movs	r1, #1
    b1fa:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    b1fc:	f382 8811 	msr	BASEPRI, r2
    b200:	f3bf 8f6f 	isb	sy
}
    b204:	4770      	bx	lr

0000b206 <uarte_nrfx_isr_int>:
{
    b206:	b538      	push	{r3, r4, r5, lr}
    b208:	4604      	mov	r4, r0
	return dev->config;
    b20a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b20c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    b20e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b212:	f413 7f80 	tst.w	r3, #256	; 0x100
    b216:	d002      	beq.n	b21e <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b218:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b21c:	b9db      	cbnz	r3, b256 <uarte_nrfx_isr_int+0x50>
	return dev->config;
    b21e:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b220:	685b      	ldr	r3, [r3, #4]
    b222:	f013 0f10 	tst.w	r3, #16
    b226:	d015      	beq.n	b254 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    b228:	f04f 0220 	mov.w	r2, #32
    b22c:	f3ef 8311 	mrs	r3, BASEPRI
    b230:	f382 8812 	msr	BASEPRI_MAX, r2
    b234:	f3bf 8f6f 	isb	sy
    b238:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b23c:	b112      	cbz	r2, b244 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b23e:	2200      	movs	r2, #0
    b240:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    b244:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b248:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    b24c:	f383 8811 	msr	BASEPRI, r3
    b250:	f3bf 8f6f 	isb	sy
}
    b254:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    b256:	f7ff ffbd 	bl	b1d4 <endtx_isr>
    b25a:	e7e0      	b.n	b21e <uarte_nrfx_isr_int+0x18>

0000b25c <uarte_nrfx_configure>:
{
    b25c:	b570      	push	{r4, r5, r6, lr}
    b25e:	b082      	sub	sp, #8
    b260:	4605      	mov	r5, r0
    b262:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    b264:	794b      	ldrb	r3, [r1, #5]
    b266:	2b01      	cmp	r3, #1
    b268:	d006      	beq.n	b278 <uarte_nrfx_configure+0x1c>
    b26a:	2b03      	cmp	r3, #3
    b26c:	d011      	beq.n	b292 <uarte_nrfx_configure+0x36>
    b26e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    b272:	4618      	mov	r0, r3
    b274:	b002      	add	sp, #8
    b276:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    b278:	2300      	movs	r3, #0
    b27a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b27e:	79a3      	ldrb	r3, [r4, #6]
    b280:	2b03      	cmp	r3, #3
    b282:	d138      	bne.n	b2f6 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    b284:	79e3      	ldrb	r3, [r4, #7]
    b286:	b143      	cbz	r3, b29a <uarte_nrfx_configure+0x3e>
    b288:	2b01      	cmp	r3, #1
    b28a:	d010      	beq.n	b2ae <uarte_nrfx_configure+0x52>
    b28c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b290:	e7ef      	b.n	b272 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    b292:	2310      	movs	r3, #16
    b294:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    b298:	e7f1      	b.n	b27e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    b29a:	2300      	movs	r3, #0
    b29c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    b2a0:	7923      	ldrb	r3, [r4, #4]
    b2a2:	b143      	cbz	r3, b2b6 <uarte_nrfx_configure+0x5a>
    b2a4:	2b02      	cmp	r3, #2
    b2a6:	d022      	beq.n	b2ee <uarte_nrfx_configure+0x92>
    b2a8:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b2ac:	e7e1      	b.n	b272 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    b2ae:	2301      	movs	r3, #1
    b2b0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    b2b4:	e7f4      	b.n	b2a0 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    b2b6:	2300      	movs	r3, #0
    b2b8:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b2bc:	6821      	ldr	r1, [r4, #0]
    b2be:	4628      	mov	r0, r5
    b2c0:	f7f7 fe5a 	bl	2f78 <baudrate_set>
    b2c4:	4603      	mov	r3, r0
    b2c6:	b9c8      	cbnz	r0, b2fc <uarte_nrfx_configure+0xa0>
	return dev->config;
    b2c8:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    b2ca:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b2cc:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    b2d0:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    b2d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b2d8:	4331      	orrs	r1, r6
    b2da:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b2dc:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    b2e0:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    b2e2:	3204      	adds	r2, #4
    b2e4:	e894 0003 	ldmia.w	r4, {r0, r1}
    b2e8:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    b2ec:	e7c1      	b.n	b272 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b2ee:	230e      	movs	r3, #14
    b2f0:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    b2f4:	e7e2      	b.n	b2bc <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    b2f6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b2fa:	e7ba      	b.n	b272 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    b2fc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b300:	e7b7      	b.n	b272 <uarte_nrfx_configure+0x16>

0000b302 <uarte_nrfx_config_get>:
{
    b302:	460b      	mov	r3, r1
	return dev->data;
    b304:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    b306:	6891      	ldr	r1, [r2, #8]
    b308:	6850      	ldr	r0, [r2, #4]
    b30a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b30e:	2000      	movs	r0, #0
    b310:	4770      	bx	lr

0000b312 <uarte_nrfx_err_check>:
	return dev->config;
    b312:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b314:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b316:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b31a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b31e:	4770      	bx	lr

0000b320 <is_tx_ready>:
	return dev->config;
    b320:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b322:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b324:	685b      	ldr	r3, [r3, #4]
    b326:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b32a:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b32e:	b929      	cbnz	r1, b33c <is_tx_ready+0x1c>
    b330:	b933      	cbnz	r3, b340 <is_tx_ready+0x20>
    b332:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    b336:	b92b      	cbnz	r3, b344 <is_tx_ready+0x24>
    b338:	2000      	movs	r0, #0
    b33a:	4770      	bx	lr
    b33c:	2001      	movs	r0, #1
    b33e:	4770      	bx	lr
    b340:	2000      	movs	r0, #0
    b342:	4770      	bx	lr
    b344:	2001      	movs	r0, #1
}
    b346:	4770      	bx	lr

0000b348 <uarte_enable>:
	return dev->config;
    b348:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b34a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b34c:	2208      	movs	r2, #8
    b34e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b352:	4770      	bx	lr

0000b354 <tx_start>:
{
    b354:	b510      	push	{r4, lr}
	return dev->config;
    b356:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b358:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b35a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b35e:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b362:	2300      	movs	r3, #0
    b364:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b368:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    b36c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    b370:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    b374:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b376:	685b      	ldr	r3, [r3, #4]
    b378:	f013 0f10 	tst.w	r3, #16
    b37c:	d102      	bne.n	b384 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b37e:	2301      	movs	r3, #1
    b380:	60a3      	str	r3, [r4, #8]
}
    b382:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    b384:	2101      	movs	r1, #1
    b386:	f7ff ffdf 	bl	b348 <uarte_enable>
    p_reg->INTENSET = mask;
    b38a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b38e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    b392:	e7f4      	b.n	b37e <tx_start+0x2a>

0000b394 <uarte_nrfx_poll_in>:
{
    b394:	b410      	push	{r4}
	return dev->data;
    b396:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    b398:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b39a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b39c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b3a0:	b152      	cbz	r2, b3b8 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    b3a2:	7c62      	ldrb	r2, [r4, #17]
    b3a4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3a6:	2000      	movs	r0, #0
    b3a8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b3ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3b0:	2201      	movs	r2, #1
    b3b2:	601a      	str	r2, [r3, #0]
}
    b3b4:	bc10      	pop	{r4}
    b3b6:	4770      	bx	lr
		return -1;
    b3b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b3bc:	e7fa      	b.n	b3b4 <uarte_nrfx_poll_in+0x20>

0000b3be <wait_tx_ready>:
{
    b3be:	b570      	push	{r4, r5, r6, lr}
    b3c0:	4606      	mov	r6, r0
    b3c2:	e014      	b.n	b3ee <wait_tx_ready+0x30>
		if (res) {
    b3c4:	b17d      	cbz	r5, b3e6 <wait_tx_ready+0x28>
	__asm__ volatile(
    b3c6:	f04f 0320 	mov.w	r3, #32
    b3ca:	f3ef 8411 	mrs	r4, BASEPRI
    b3ce:	f383 8812 	msr	BASEPRI_MAX, r3
    b3d2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b3d6:	4630      	mov	r0, r6
    b3d8:	f7ff ffa2 	bl	b320 <is_tx_ready>
    b3dc:	b9a0      	cbnz	r0, b408 <wait_tx_ready+0x4a>
	__asm__ volatile(
    b3de:	f384 8811 	msr	BASEPRI, r4
    b3e2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    b3e6:	2021      	movs	r0, #33	; 0x21
    b3e8:	2100      	movs	r1, #0
    b3ea:	f7fc f9f1 	bl	77d0 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b3ee:	2464      	movs	r4, #100	; 0x64
    b3f0:	4630      	mov	r0, r6
    b3f2:	f7ff ff95 	bl	b320 <is_tx_ready>
    b3f6:	4605      	mov	r5, r0
    b3f8:	2800      	cmp	r0, #0
    b3fa:	d1e3      	bne.n	b3c4 <wait_tx_ready+0x6>
    b3fc:	2001      	movs	r0, #1
    b3fe:	f000 f923 	bl	b648 <nrfx_busy_wait>
    b402:	3c01      	subs	r4, #1
    b404:	d1f4      	bne.n	b3f0 <wait_tx_ready+0x32>
    b406:	e7dd      	b.n	b3c4 <wait_tx_ready+0x6>
}
    b408:	4620      	mov	r0, r4
    b40a:	bd70      	pop	{r4, r5, r6, pc}

0000b40c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b40e:	4604      	mov	r4, r0
	return dev->config;
    b410:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    b412:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    b414:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b416:	2100      	movs	r1, #0
    b418:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    b41c:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    b41e:	f7f7 feaf 	bl	3180 <uarte_nrfx_pins_configure>
	return dev->data;
    b422:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    b424:	3104      	adds	r1, #4
    b426:	4620      	mov	r0, r4
    b428:	f7ff ff18 	bl	b25c <uarte_nrfx_configure>
	if (err) {
    b42c:	4604      	mov	r4, r0
    b42e:	bb68      	cbnz	r0, b48c <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b430:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b432:	f013 0f02 	tst.w	r3, #2
    b436:	d12b      	bne.n	b490 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b438:	2308      	movs	r3, #8
    b43a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    b43e:	7a33      	ldrb	r3, [r6, #8]
    b440:	b95b      	cbnz	r3, b45a <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b442:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    b446:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    b44a:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b44e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b452:	2301      	movs	r3, #1
    b454:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b458:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b45a:	6873      	ldr	r3, [r6, #4]
    b45c:	f013 0f02 	tst.w	r3, #2
    b460:	d103      	bne.n	b46a <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    b462:	f44f 7380 	mov.w	r3, #256	; 0x100
    b466:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b46a:	6873      	ldr	r3, [r6, #4]
    b46c:	f013 0f10 	tst.w	r3, #16
    b470:	d003      	beq.n	b47a <uarte_instance_init+0x6e>
    b472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b476:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    b47a:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b47c:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b480:	2300      	movs	r3, #0
    b482:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b486:	2301      	movs	r3, #1
    b488:	60ab      	str	r3, [r5, #8]
    b48a:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    b48c:	4620      	mov	r0, r4
    b48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    b490:	4639      	mov	r1, r7
    b492:	4628      	mov	r0, r5
    b494:	f7f7 fe50 	bl	3138 <endtx_stoptx_ppi_init>
		if (err < 0) {
    b498:	2800      	cmp	r0, #0
    b49a:	dacd      	bge.n	b438 <uarte_instance_init+0x2c>
			return err;
    b49c:	4604      	mov	r4, r0
    b49e:	e7f5      	b.n	b48c <uarte_instance_init+0x80>

0000b4a0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b4a0:	b510      	push	{r4, lr}
    b4a2:	4604      	mov	r4, r0
    b4a4:	2200      	movs	r2, #0
    b4a6:	2101      	movs	r1, #1
    b4a8:	2002      	movs	r0, #2
    b4aa:	f7f6 fb8b 	bl	1bc4 <z_arm_irq_priority_set>
    b4ae:	2002      	movs	r0, #2
    b4b0:	f7f6 fb56 	bl	1b60 <arch_irq_enable>
    b4b4:	2100      	movs	r1, #0
    b4b6:	4620      	mov	r0, r4
    b4b8:	f7ff ffa8 	bl	b40c <uarte_instance_init>
    b4bc:	bd10      	pop	{r4, pc}

0000b4be <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b4be:	b510      	push	{r4, lr}
    b4c0:	4604      	mov	r4, r0
    b4c2:	2200      	movs	r2, #0
    b4c4:	2101      	movs	r1, #1
    b4c6:	2028      	movs	r0, #40	; 0x28
    b4c8:	f7f6 fb7c 	bl	1bc4 <z_arm_irq_priority_set>
    b4cc:	2028      	movs	r0, #40	; 0x28
    b4ce:	f7f6 fb47 	bl	1b60 <arch_irq_enable>
    b4d2:	2100      	movs	r1, #0
    b4d4:	4620      	mov	r0, r4
    b4d6:	f7ff ff99 	bl	b40c <uarte_instance_init>
    b4da:	bd10      	pop	{r4, pc}

0000b4dc <rng_pool_put>:
{
    b4dc:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
    b4de:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
    b4e0:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
    b4e2:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
    b4e4:	1a9a      	subs	r2, r3, r2
    b4e6:	ea34 0202 	bics.w	r2, r4, r2
    b4ea:	d008      	beq.n	b4fe <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
    b4ec:	18c2      	adds	r2, r0, r3
    b4ee:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
    b4f0:	3301      	adds	r3, #1
    b4f2:	b25b      	sxtb	r3, r3
    b4f4:	4023      	ands	r3, r4
    b4f6:	7083      	strb	r3, [r0, #2]
	return 0;
    b4f8:	2000      	movs	r0, #0
}
    b4fa:	bc10      	pop	{r4}
    b4fc:	4770      	bx	lr
		return -ENOBUFS;
    b4fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b502:	e7fa      	b.n	b4fa <rng_pool_put+0x1e>

0000b504 <rng_pool_init>:
	rngp->first_alloc = 0U;
    b504:	2300      	movs	r3, #0
    b506:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
    b508:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
    b50a:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
    b50c:	3901      	subs	r1, #1
    b50e:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
    b510:	7102      	strb	r2, [r0, #4]
}
    b512:	4770      	bx	lr

0000b514 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
    b514:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    b516:	2200      	movs	r2, #0
    b518:	4611      	mov	r1, r2
    b51a:	4610      	mov	r0, r2
    b51c:	f7fc fe48 	bl	81b0 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    b520:	b900      	cbnz	r0, b524 <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
    b522:	bd08      	pop	{r3, pc}
			return -EINVAL;
    b524:	f06f 0015 	mvn.w	r0, #21
    b528:	e7fb      	b.n	b522 <entropy_cc3xx_rng_init+0xe>

0000b52a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b52a:	4770      	bx	lr

0000b52c <counter_sub>:
	return (a - b) & COUNTER_MAX;
    b52c:	1a40      	subs	r0, r0, r1
}
    b52e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b532:	4770      	bx	lr

0000b534 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b534:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b538:	009b      	lsls	r3, r3, #2
    b53a:	b29b      	uxth	r3, r3
    b53c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b540:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    b544:	2200      	movs	r2, #0
    b546:	601a      	str	r2, [r3, #0]
    b548:	681b      	ldr	r3, [r3, #0]
}
    b54a:	4770      	bx	lr

0000b54c <absolute_time_to_cc>:
}
    b54c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b550:	4770      	bx	lr

0000b552 <full_int_lock>:
	__asm__ volatile(
    b552:	f04f 0320 	mov.w	r3, #32
    b556:	f3ef 8011 	mrs	r0, BASEPRI
    b55a:	f383 8812 	msr	BASEPRI_MAX, r3
    b55e:	f3bf 8f6f 	isb	sy
}
    b562:	4770      	bx	lr

0000b564 <full_int_unlock>:
	__asm__ volatile(
    b564:	f380 8811 	msr	BASEPRI, r0
    b568:	f3bf 8f6f 	isb	sy
}
    b56c:	4770      	bx	lr

0000b56e <set_absolute_alarm>:
{
    b56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b570:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    b572:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    b576:	f7f8 fabb 	bl	3af0 <get_comparator>
    b57a:	4607      	mov	r7, r0
    b57c:	e019      	b.n	b5b2 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    b57e:	2013      	movs	r0, #19
    b580:	f000 f95f 	bl	b842 <z_impl_k_busy_wait>
}
    b584:	e022      	b.n	b5cc <set_absolute_alarm+0x5e>
		event_clear(chan);
    b586:	4630      	mov	r0, r6
    b588:	f7ff ffd4 	bl	b534 <event_clear>
		event_enable(chan);
    b58c:	4630      	mov	r0, r6
    b58e:	f7f8 fab7 	bl	3b00 <event_enable>
		set_comparator(chan, cc_val);
    b592:	4629      	mov	r1, r5
    b594:	4630      	mov	r0, r6
    b596:	f7f8 faa1 	bl	3adc <set_comparator>
		now2 = counter();
    b59a:	f7f8 fac5 	bl	3b28 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    b59e:	4284      	cmp	r4, r0
    b5a0:	d01e      	beq.n	b5e0 <set_absolute_alarm+0x72>
    b5a2:	1c81      	adds	r1, r0, #2
    b5a4:	4628      	mov	r0, r5
    b5a6:	f7ff ffc1 	bl	b52c <counter_sub>
	} while ((now2 != now) &&
    b5aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b5ae:	d917      	bls.n	b5e0 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    b5b0:	462f      	mov	r7, r5
		now = counter();
    b5b2:	f7f8 fab9 	bl	3b28 <counter>
    b5b6:	4604      	mov	r4, r0
		set_comparator(chan, now);
    b5b8:	4601      	mov	r1, r0
    b5ba:	4630      	mov	r0, r6
    b5bc:	f7f8 fa8e 	bl	3adc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    b5c0:	4621      	mov	r1, r4
    b5c2:	4638      	mov	r0, r7
    b5c4:	f7ff ffb2 	bl	b52c <counter_sub>
    b5c8:	2801      	cmp	r0, #1
    b5ca:	d0d8      	beq.n	b57e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    b5cc:	1ca7      	adds	r7, r4, #2
    b5ce:	4639      	mov	r1, r7
    b5d0:	4628      	mov	r0, r5
    b5d2:	f7ff ffab 	bl	b52c <counter_sub>
    b5d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b5da:	d9d4      	bls.n	b586 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    b5dc:	463d      	mov	r5, r7
    b5de:	e7d2      	b.n	b586 <set_absolute_alarm+0x18>
}
    b5e0:	4628      	mov	r0, r5
    b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b5e4 <compare_set>:
{
    b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5e6:	b083      	sub	sp, #12
    b5e8:	4604      	mov	r4, r0
    b5ea:	4617      	mov	r7, r2
    b5ec:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    b5ee:	f7f8 faa1 	bl	3b34 <compare_int_lock>
    b5f2:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5f6:	9301      	str	r3, [sp, #4]
    b5f8:	9b08      	ldr	r3, [sp, #32]
    b5fa:	9300      	str	r3, [sp, #0]
    b5fc:	463a      	mov	r2, r7
    b5fe:	462b      	mov	r3, r5
    b600:	4620      	mov	r0, r4
    b602:	f7f8 fb85 	bl	3d10 <compare_set_nolocks>
    b606:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    b608:	4631      	mov	r1, r6
    b60a:	4620      	mov	r0, r4
    b60c:	f7f8 faf6 	bl	3bfc <compare_int_unlock>
}
    b610:	4628      	mov	r0, r5
    b612:	b003      	add	sp, #12
    b614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b616 <sys_clock_cycle_get_32>:
{
    b616:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b618:	f7f8 fb5a 	bl	3cd0 <z_nrf_rtc_timer_read>
}
    b61c:	bd08      	pop	{r3, pc}

0000b61e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    b61e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    b620:	2000      	movs	r0, #0
    b622:	f7f6 ff87 	bl	2534 <sys_arch_reboot>

0000b626 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    b626:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    b628:	f7fc fd66 	bl	80f8 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
    b62c:	bd08      	pop	{r3, pc}

0000b62e <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    b62e:	b510      	push	{r4, lr}
    b630:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b632:	f7f6 f9a5 	bl	1980 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b636:	f7f6 fa61 	bl	1afc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    b63a:	4620      	mov	r0, r4
    b63c:	f7ff fff3 	bl	b626 <hw_cc3xx_init_internal>
	return res;
}
    b640:	bd10      	pop	{r4, pc}

0000b642 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    b642:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    b644:	4780      	blx	r0
}
    b646:	bd08      	pop	{r3, pc}

0000b648 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    b648:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    b64a:	f000 f8fa 	bl	b842 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    b64e:	bd08      	pop	{r3, pc}

0000b650 <pin_is_task_output>:
{
    b650:	b510      	push	{r4, lr}
    b652:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b654:	f7f9 f828 	bl	46a8 <pin_is_output>
    b658:	b128      	cbz	r0, b666 <pin_is_task_output+0x16>
    b65a:	4620      	mov	r0, r4
    b65c:	f7f9 f80e 	bl	467c <pin_in_use_by_te>
    b660:	b118      	cbz	r0, b66a <pin_is_task_output+0x1a>
    b662:	2001      	movs	r0, #1
    b664:	e000      	b.n	b668 <pin_is_task_output+0x18>
    b666:	2000      	movs	r0, #0
}
    b668:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b66a:	2000      	movs	r0, #0
    b66c:	e7fc      	b.n	b668 <pin_is_task_output+0x18>

0000b66e <pin_is_input>:
{
    b66e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    b670:	f7f9 f81a 	bl	46a8 <pin_is_output>
    b674:	f080 0001 	eor.w	r0, r0, #1
}
    b678:	b2c0      	uxtb	r0, r0
    b67a:	bd08      	pop	{r3, pc}

0000b67c <gpiote_polarity_to_trigger>:
}
    b67c:	4770      	bx	lr

0000b67e <gpiote_trigger_to_polarity>:
}
    b67e:	4770      	bx	lr

0000b680 <is_level>:
}
    b680:	2803      	cmp	r0, #3
    b682:	bf94      	ite	ls
    b684:	2000      	movls	r0, #0
    b686:	2001      	movhi	r0, #1
    b688:	4770      	bx	lr

0000b68a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    b68a:	b508      	push	{r3, lr}
  _DoInit();
    b68c:	f7f9 ffd2 	bl	5634 <_DoInit>
}
    b690:	bd08      	pop	{r3, pc}

0000b692 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    b692:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    b694:	f7ff fff9 	bl	b68a <SEGGER_RTT_Init>

	return 0;
}
    b698:	2000      	movs	r0, #0
    b69a:	bd08      	pop	{r3, pc}

0000b69c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b69c:	b148      	cbz	r0, b6b2 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b69e:	68c3      	ldr	r3, [r0, #12]
    b6a0:	8818      	ldrh	r0, [r3, #0]
    b6a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b6a6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    b6aa:	bf14      	ite	ne
    b6ac:	2000      	movne	r0, #0
    b6ae:	2001      	moveq	r0, #1
    b6b0:	4770      	bx	lr
		return false;
    b6b2:	2000      	movs	r0, #0
}
    b6b4:	4770      	bx	lr

0000b6b6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b6b6:	6902      	ldr	r2, [r0, #16]
    b6b8:	6943      	ldr	r3, [r0, #20]
    b6ba:	431a      	orrs	r2, r3
    b6bc:	f012 0203 	ands.w	r2, r2, #3
    b6c0:	d10d      	bne.n	b6de <create_free_list+0x28>
	slab->free_list = NULL;
    b6c2:	2100      	movs	r1, #0
    b6c4:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    b6c6:	e005      	b.n	b6d4 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    b6c8:	6981      	ldr	r1, [r0, #24]
    b6ca:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    b6cc:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    b6ce:	6901      	ldr	r1, [r0, #16]
    b6d0:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    b6d2:	3201      	adds	r2, #1
    b6d4:	68c1      	ldr	r1, [r0, #12]
    b6d6:	4291      	cmp	r1, r2
    b6d8:	d8f6      	bhi.n	b6c8 <create_free_list+0x12>
	return 0;
    b6da:	2000      	movs	r0, #0
    b6dc:	4770      	bx	lr
		return -EINVAL;
    b6de:	f06f 0015 	mvn.w	r0, #21
}
    b6e2:	4770      	bx	lr

0000b6e4 <k_mem_slab_init>:
{
    b6e4:	b510      	push	{r4, lr}
    b6e6:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    b6e8:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    b6ea:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    b6ec:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    b6ee:	2300      	movs	r3, #0
    b6f0:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    b6f2:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    b6f4:	f7ff ffdf 	bl	b6b6 <create_free_list>
	if (rc < 0) {
    b6f8:	2800      	cmp	r0, #0
    b6fa:	db01      	blt.n	b700 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    b6fc:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    b6fe:	6064      	str	r4, [r4, #4]
}
    b700:	bd10      	pop	{r4, pc}

0000b702 <setup_thread_stack>:
{
    b702:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b704:	3207      	adds	r2, #7
    b706:	f022 0207 	bic.w	r2, r2, #7
    b70a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    b70e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    b712:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    b716:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    b71a:	2200      	movs	r2, #0
    b71c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    b720:	18c8      	adds	r0, r1, r3
    b722:	bc10      	pop	{r4}
    b724:	4770      	bx	lr

0000b726 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b726:	f3ef 8005 	mrs	r0, IPSR
}
    b72a:	3800      	subs	r0, #0
    b72c:	bf18      	it	ne
    b72e:	2001      	movne	r0, #1
    b730:	4770      	bx	lr

0000b732 <z_impl_k_thread_start>:
{
    b732:	b508      	push	{r3, lr}
	z_sched_start(thread);
    b734:	f7fb faac 	bl	6c90 <z_sched_start>
}
    b738:	bd08      	pop	{r3, pc}

0000b73a <z_init_thread_base>:
{
    b73a:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    b73c:	2400      	movs	r4, #0
    b73e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    b740:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    b742:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    b744:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    b746:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    b748:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    b74a:	61c4      	str	r4, [r0, #28]
}
    b74c:	bc10      	pop	{r4}
    b74e:	4770      	bx	lr

0000b750 <z_pm_save_idle_exit>:
{
    b750:	b508      	push	{r3, lr}
	pm_system_resume();
    b752:	f7f5 ff7d 	bl	1650 <pm_system_resume>
	sys_clock_idle_exit();
    b756:	f7ff fee8 	bl	b52a <sys_clock_idle_exit>
}
    b75a:	bd08      	pop	{r3, pc}

0000b75c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    b75c:	4288      	cmp	r0, r1
    b75e:	da00      	bge.n	b762 <new_prio_for_inheritance+0x6>
    b760:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    b762:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    b766:	db01      	blt.n	b76c <new_prio_for_inheritance+0x10>
    b768:	4608      	mov	r0, r1
    b76a:	4770      	bx	lr
    b76c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    b770:	4770      	bx	lr

0000b772 <adjust_owner_prio>:
{
    b772:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    b774:	6880      	ldr	r0, [r0, #8]
    b776:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b77a:	428b      	cmp	r3, r1
    b77c:	d101      	bne.n	b782 <adjust_owner_prio+0x10>
	return false;
    b77e:	2000      	movs	r0, #0
}
    b780:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    b782:	f7fb fc37 	bl	6ff4 <z_set_prio>
    b786:	e7fb      	b.n	b780 <adjust_owner_prio+0xe>

0000b788 <z_impl_k_mutex_init>:
{
    b788:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b78a:	2000      	movs	r0, #0
    b78c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    b78e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    b790:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    b792:	605b      	str	r3, [r3, #4]
}
    b794:	4770      	bx	lr

0000b796 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    b796:	b13a      	cbz	r2, b7a8 <z_impl_k_sem_init+0x12>
    b798:	428a      	cmp	r2, r1
    b79a:	d308      	bcc.n	b7ae <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    b79c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    b79e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    b7a0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    b7a2:	6040      	str	r0, [r0, #4]
	return 0;
    b7a4:	2000      	movs	r0, #0
    b7a6:	4770      	bx	lr
		return -EINVAL;
    b7a8:	f06f 0015 	mvn.w	r0, #21
    b7ac:	4770      	bx	lr
    b7ae:	f06f 0015 	mvn.w	r0, #21
}
    b7b2:	4770      	bx	lr

0000b7b4 <thread_active_elsewhere>:
}
    b7b4:	2000      	movs	r0, #0
    b7b6:	4770      	bx	lr

0000b7b8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    b7b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b7bc:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    b7c0:	4283      	cmp	r3, r0
    b7c2:	d001      	beq.n	b7c8 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    b7c4:	1ac0      	subs	r0, r0, r3
    b7c6:	4770      	bx	lr
	return 0;
    b7c8:	2000      	movs	r0, #0
}
    b7ca:	4770      	bx	lr

0000b7cc <z_reschedule_irqlock>:
{
    b7cc:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b7ce:	4603      	mov	r3, r0
    b7d0:	b920      	cbnz	r0, b7dc <z_reschedule_irqlock+0x10>
    b7d2:	f3ef 8205 	mrs	r2, IPSR
    b7d6:	b942      	cbnz	r2, b7ea <z_reschedule_irqlock+0x1e>
    b7d8:	2201      	movs	r2, #1
    b7da:	e000      	b.n	b7de <z_reschedule_irqlock+0x12>
    b7dc:	2200      	movs	r2, #0
	if (resched(key)) {
    b7de:	b932      	cbnz	r2, b7ee <z_reschedule_irqlock+0x22>
    b7e0:	f383 8811 	msr	BASEPRI, r3
    b7e4:	f3bf 8f6f 	isb	sy
}
    b7e8:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b7ea:	2200      	movs	r2, #0
    b7ec:	e7f7      	b.n	b7de <z_reschedule_irqlock+0x12>
    b7ee:	4618      	mov	r0, r3
    b7f0:	f7f6 fa3e 	bl	1c70 <arch_swap>
	return ret;
    b7f4:	e7f8      	b.n	b7e8 <z_reschedule_irqlock+0x1c>

0000b7f6 <z_priq_dumb_best>:
{
    b7f6:	4603      	mov	r3, r0
	return list->head == list;
    b7f8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b7fa:	4283      	cmp	r3, r0
    b7fc:	d000      	beq.n	b800 <z_priq_dumb_best+0xa>
}
    b7fe:	4770      	bx	lr
	struct k_thread *thread = NULL;
    b800:	2000      	movs	r0, #0
	return thread;
    b802:	e7fc      	b.n	b7fe <z_priq_dumb_best+0x8>

0000b804 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    b804:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    b806:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    b808:	6083      	str	r3, [r0, #8]
}
    b80a:	4770      	bx	lr

0000b80c <remove_timeout>:
{
    b80c:	b538      	push	{r3, r4, r5, lr}
    b80e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    b810:	f7fc f8f6 	bl	7a00 <next>
    b814:	b148      	cbz	r0, b82a <remove_timeout+0x1e>
    b816:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    b818:	6920      	ldr	r0, [r4, #16]
    b81a:	6965      	ldr	r5, [r4, #20]
    b81c:	6913      	ldr	r3, [r2, #16]
    b81e:	6951      	ldr	r1, [r2, #20]
    b820:	181b      	adds	r3, r3, r0
    b822:	eb45 0101 	adc.w	r1, r5, r1
    b826:	6113      	str	r3, [r2, #16]
    b828:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    b82a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    b82c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    b82e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b830:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b832:	2300      	movs	r3, #0
    b834:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    b836:	6063      	str	r3, [r4, #4]
}
    b838:	bd38      	pop	{r3, r4, r5, pc}

0000b83a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    b83a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    b83c:	f7fc fbf4 	bl	8028 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    b840:	bd08      	pop	{r3, pc}

0000b842 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    b842:	b900      	cbnz	r0, b846 <z_impl_k_busy_wait+0x4>
    b844:	4770      	bx	lr
{
    b846:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    b848:	f7f6 fe8a 	bl	2560 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    b84c:	bd08      	pop	{r3, pc}

0000b84e <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
    b84e:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
    b850:	4770      	bx	lr
	...

0000b854 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b854:	f7f8 bc30 	b.w	40b8 <SystemInit>
