
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001a20 	.word	0x20001a20
}
   4:	000020f1 	.word	0x000020f1
   8:	00008299 	.word	0x00008299
   c:	000020a9 	.word	0x000020a9
  10:	000020a9 	.word	0x000020a9
  14:	000020a9 	.word	0x000020a9
  18:	000020a9 	.word	0x000020a9
	...
  2c:	00001c71 	.word	0x00001c71
  30:	000020a9 	.word	0x000020a9
  34:	00000000 	.word	0x00000000
  38:	00001c19 	.word	0x00001c19
  3c:	000020a9 	.word	0x000020a9

00000040 <_irq_vector_table>:
  40:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  50:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  60:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  70:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  80:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  90:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  a0:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  b0:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  c0:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  d0:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  e0:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...
  f0:	00001d5d 00001d5d 00001d5d 00001d5d     ]...]...]...]...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <shared_code_section>:
/* STEP 11 - Define mutex to protect access to shared code section */
K_MUTEX_DEFINE(test_mutex);

// Shared code run by both threads
void shared_code_section(void)
{
     3f4:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
     3f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     3fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     3fe:	4814      	ldr	r0, [pc, #80]	; (450 <CONFIG_FLASH_SIZE+0x50>)
     400:	f005 fb30 	bl	5a64 <z_impl_k_mutex_lock>
	/* STEP 12.1 - Lock the mutex */
	k_mutex_lock(&test_mutex, K_FOREVER);

	/* STEP 6 - Increment partner and decrement partner changed */
	/* according to logic defined in exercise text */
	increment_partner += 1;
     404:	4813      	ldr	r0, [pc, #76]	; (454 <CONFIG_FLASH_SIZE+0x54>)
     406:	6802      	ldr	r2, [r0, #0]
     408:	3201      	adds	r2, #1
	increment_partner = increment_partner % COMBINED_TOTAL; 
     40a:	4913      	ldr	r1, [pc, #76]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     40c:	fb81 3102 	smull	r3, r1, r1, r2
     410:	17d3      	asrs	r3, r2, #31
     412:	ebc3 1321 	rsb	r3, r3, r1, asr #4
     416:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     41a:	00d9      	lsls	r1, r3, #3
     41c:	1a53      	subs	r3, r2, r1
     41e:	6003      	str	r3, [r0, #0]

	decrement_partner -= 1;
     420:	4a0e      	ldr	r2, [pc, #56]	; (45c <CONFIG_FLASH_SIZE+0x5c>)
     422:	6813      	ldr	r3, [r2, #0]
     424:	3b01      	subs	r3, #1
     426:	6013      	str	r3, [r2, #0]
	if (decrement_partner == 0) 
     428:	b913      	cbnz	r3, 430 <CONFIG_FLASH_SIZE+0x30>
	{
		decrement_partner = COMBINED_TOTAL;
     42a:	4613      	mov	r3, r2
     42c:	2228      	movs	r2, #40	; 0x28
     42e:	601a      	str	r2, [r3, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     430:	4807      	ldr	r0, [pc, #28]	; (450 <CONFIG_FLASH_SIZE+0x50>)
     432:	f005 fc37 	bl	5ca4 <z_impl_k_mutex_unlock>

	/* STEP 12.2 - Unlock the mutex */
	k_mutex_unlock(&test_mutex);

	/* STEP 7 - Print counter values if they do not add up to COMBINED_TOTAL */
	if(increment_partner + decrement_partner != COMBINED_TOTAL )
     436:	4b07      	ldr	r3, [pc, #28]	; (454 <CONFIG_FLASH_SIZE+0x54>)
     438:	6819      	ldr	r1, [r3, #0]
     43a:	4b08      	ldr	r3, [pc, #32]	; (45c <CONFIG_FLASH_SIZE+0x5c>)
     43c:	681a      	ldr	r2, [r3, #0]
     43e:	188b      	adds	r3, r1, r2
     440:	2b28      	cmp	r3, #40	; 0x28
     442:	d100      	bne.n	446 <CONFIG_FLASH_SIZE+0x46>
	{
		printk("Increment_partner (%d) + Decrement_partner (%d) = %d \n",
	                increment_partner, decrement_partner, (increment_partner + decrement_partner));
	}
}
     444:	bd08      	pop	{r3, pc}
		printk("Increment_partner (%d) + Decrement_partner (%d) = %d \n",
     446:	4806      	ldr	r0, [pc, #24]	; (460 <CONFIG_FLASH_SIZE+0x60>)
     448:	f007 fdac 	bl	7fa4 <printk>
     44c:	e7fa      	b.n	444 <CONFIG_FLASH_SIZE+0x44>
     44e:	bf00      	nop
     450:	20000204 	.word	0x20000204
     454:	20000500 	.word	0x20000500
     458:	66666667 	.word	0x66666667
     45c:	20000000 	.word	0x20000000
     460:	00008fd8 	.word	0x00008fd8

00000464 <thread0>:

/* STEP 4 - Functions for thread0 and thread1 with a shared code section */
void thread0(void)
{
     464:	b508      	push	{r3, lr}
	printk("Thread 0 started\n");
     466:	4803      	ldr	r0, [pc, #12]	; (474 <thread0+0x10>)
     468:	f007 fd9c 	bl	7fa4 <printk>
	while (1) {
		shared_code_section(); 
     46c:	f7ff ffc2 	bl	3f4 <shared_code_section>
	while (1) {
     470:	e7fc      	b.n	46c <thread0+0x8>
     472:	bf00      	nop
     474:	00009010 	.word	0x00009010

00000478 <thread1>:
	}
}

void thread1(void)
{
     478:	b508      	push	{r3, lr}
	printk("Thread 1 started\n");
     47a:	4803      	ldr	r0, [pc, #12]	; (488 <thread1+0x10>)
     47c:	f007 fd92 	bl	7fa4 <printk>
	while (1) {
		shared_code_section(); 
     480:	f7ff ffb8 	bl	3f4 <shared_code_section>
	while (1) {
     484:	e7fc      	b.n	480 <thread1+0x8>
     486:	bf00      	nop
     488:	00009024 	.word	0x00009024

0000048c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     48c:	b538      	push	{r3, r4, r5, lr}
     48e:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     490:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     492:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     496:	6081      	str	r1, [r0, #8]
	switch (method) {
     498:	2b02      	cmp	r3, #2
     49a:	d903      	bls.n	4a4 <sys_notify_finalize+0x18>
     49c:	2b03      	cmp	r3, #3
     49e:	d102      	bne.n	4a6 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     4a0:	6800      	ldr	r0, [r0, #0]
		break;
     4a2:	e00e      	b.n	4c2 <sys_notify_finalize+0x36>
	switch (method) {
     4a4:	b963      	cbnz	r3, 4c0 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     4a6:	4d08      	ldr	r5, [pc, #32]	; (4c8 <sys_notify_finalize+0x3c>)
     4a8:	2345      	movs	r3, #69	; 0x45
     4aa:	462a      	mov	r2, r5
     4ac:	4907      	ldr	r1, [pc, #28]	; (4cc <sys_notify_finalize+0x40>)
     4ae:	4808      	ldr	r0, [pc, #32]	; (4d0 <sys_notify_finalize+0x44>)
     4b0:	f007 fd78 	bl	7fa4 <printk>
     4b4:	2145      	movs	r1, #69	; 0x45
     4b6:	4628      	mov	r0, r5
     4b8:	f007 fecd 	bl	8256 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     4bc:	2000      	movs	r0, #0
     4be:	e000      	b.n	4c2 <sys_notify_finalize+0x36>
	switch (method) {
     4c0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     4c2:	2300      	movs	r3, #0
     4c4:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     4c6:	bd38      	pop	{r3, r4, r5, pc}
     4c8:	00009050 	.word	0x00009050
     4cc:	00009074 	.word	0x00009074
     4d0:	00009078 	.word	0x00009078

000004d4 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     4d4:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     4d6:	680b      	ldr	r3, [r1, #0]
     4d8:	3301      	adds	r3, #1
     4da:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     4dc:	4b01      	ldr	r3, [pc, #4]	; (4e4 <char_out+0x10>)
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	4798      	blx	r3
}
     4e2:	bd08      	pop	{r3, pc}
     4e4:	20000004 	.word	0x20000004

000004e8 <__printk_hook_install>:
	_char_out = fn;
     4e8:	4b01      	ldr	r3, [pc, #4]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     4ea:	6018      	str	r0, [r3, #0]
}
     4ec:	4770      	bx	lr
     4ee:	bf00      	nop
     4f0:	20000004 	.word	0x20000004

000004f4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     4f4:	b500      	push	{lr}
     4f6:	b083      	sub	sp, #12
     4f8:	4602      	mov	r2, r0
     4fa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     4fc:	2100      	movs	r1, #0
     4fe:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     500:	a901      	add	r1, sp, #4
     502:	4803      	ldr	r0, [pc, #12]	; (510 <vprintk+0x1c>)
     504:	f000 fb72 	bl	bec <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     508:	b003      	add	sp, #12
     50a:	f85d fb04 	ldr.w	pc, [sp], #4
     50e:	bf00      	nop
     510:	000004d5 	.word	0x000004d5

00000514 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     514:	b510      	push	{r4, lr}
     516:	b084      	sub	sp, #16
     518:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     51a:	9001      	str	r0, [sp, #4]
     51c:	9102      	str	r1, [sp, #8]
     51e:	2100      	movs	r1, #0
     520:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     522:	a901      	add	r1, sp, #4
     524:	4805      	ldr	r0, [pc, #20]	; (53c <vsnprintk+0x28>)
     526:	f000 fb61 	bl	bec <cbvprintf>

	if (ctx.count < ctx.max) {
     52a:	9b03      	ldr	r3, [sp, #12]
     52c:	9a02      	ldr	r2, [sp, #8]
     52e:	4293      	cmp	r3, r2
     530:	da01      	bge.n	536 <vsnprintk+0x22>
		str[ctx.count] = '\0';
     532:	2200      	movs	r2, #0
     534:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     536:	9803      	ldr	r0, [sp, #12]
     538:	b004      	add	sp, #16
     53a:	bd10      	pop	{r4, pc}
     53c:	00007f75 	.word	0x00007f75

00000540 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     540:	b538      	push	{r3, r4, r5, lr}
     542:	4604      	mov	r4, r0
     544:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     546:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     548:	2a00      	cmp	r2, #0
     54a:	db14      	blt.n	576 <process_complete+0x36>
     54c:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     550:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     552:	2a01      	cmp	r2, #1
     554:	d91b      	bls.n	58e <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     556:	2b04      	cmp	r3, #4
     558:	d04f      	beq.n	5fa <process_complete+0xba>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     55a:	4c2e      	ldr	r4, [pc, #184]	; (614 <process_complete+0xd4>)
     55c:	f240 131b 	movw	r3, #283	; 0x11b
     560:	4622      	mov	r2, r4
     562:	492d      	ldr	r1, [pc, #180]	; (618 <process_complete+0xd8>)
     564:	482d      	ldr	r0, [pc, #180]	; (61c <process_complete+0xdc>)
     566:	f007 fd1d 	bl	7fa4 <printk>
     56a:	f240 111b 	movw	r1, #283	; 0x11b
     56e:	4620      	mov	r0, r4
     570:	f007 fe71 	bl	8256 <assert_post_action>
	}
}
     574:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     576:	e9d0 0100 	ldrd	r0, r1, [r0]
     57a:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     57e:	2300      	movs	r3, #0
     580:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     582:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     584:	2101      	movs	r1, #1
     586:	4620      	mov	r0, r4
     588:	f007 fd28 	bl	7fdc <set_state>
     58c:	e7f2      	b.n	574 <process_complete+0x34>
		*clients = mgr->clients;
     58e:	e9d0 0100 	ldrd	r0, r1, [r0]
     592:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
     596:	2200      	movs	r2, #0
     598:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     59a:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     59c:	2b06      	cmp	r3, #6
     59e:	d00f      	beq.n	5c0 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     5a0:	2b05      	cmp	r3, #5
     5a2:	d11c      	bne.n	5de <process_complete+0x9e>
			set_state(mgr, ONOFF_STATE_OFF);
     5a4:	2100      	movs	r1, #0
     5a6:	4620      	mov	r0, r4
     5a8:	f007 fd18 	bl	7fdc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     5ac:	4620      	mov	r0, r4
     5ae:	f007 fd3c 	bl	802a <process_recheck>
     5b2:	2800      	cmp	r0, #0
     5b4:	d0de      	beq.n	574 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5b6:	8ba3      	ldrh	r3, [r4, #28]
     5b8:	f043 0320 	orr.w	r3, r3, #32
     5bc:	83a3      	strh	r3, [r4, #28]
     5be:	e7d9      	b.n	574 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     5c0:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5c2:	b13b      	cbz	r3, 5d4 <process_complete+0x94>
				mgr->refs += 1U;
     5c4:	8be2      	ldrh	r2, [r4, #30]
     5c6:	3201      	adds	r2, #1
     5c8:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     5ca:	2b00      	cmp	r3, #0
     5cc:	d0f9      	beq.n	5c2 <process_complete+0x82>
	return node->next;
     5ce:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5d0:	2b00      	cmp	r3, #0
     5d2:	d1f6      	bne.n	5c2 <process_complete+0x82>
			set_state(mgr, ONOFF_STATE_ON);
     5d4:	2102      	movs	r1, #2
     5d6:	4620      	mov	r0, r4
     5d8:	f007 fd00 	bl	7fdc <set_state>
     5dc:	e7e6      	b.n	5ac <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     5de:	4d0d      	ldr	r5, [pc, #52]	; (614 <process_complete+0xd4>)
     5e0:	f240 1309 	movw	r3, #265	; 0x109
     5e4:	462a      	mov	r2, r5
     5e6:	490e      	ldr	r1, [pc, #56]	; (620 <process_complete+0xe0>)
     5e8:	480c      	ldr	r0, [pc, #48]	; (61c <process_complete+0xdc>)
     5ea:	f007 fcdb 	bl	7fa4 <printk>
     5ee:	f240 1109 	movw	r1, #265	; 0x109
     5f2:	4628      	mov	r0, r5
     5f4:	f007 fe2f 	bl	8256 <assert_post_action>
     5f8:	e7d4      	b.n	5a4 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     5fa:	2100      	movs	r1, #0
     5fc:	f007 fcee 	bl	7fdc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     600:	4620      	mov	r0, r4
     602:	f007 fd12 	bl	802a <process_recheck>
     606:	2800      	cmp	r0, #0
     608:	d0b4      	beq.n	574 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     60a:	8ba3      	ldrh	r3, [r4, #28]
     60c:	f043 0320 	orr.w	r3, r3, #32
     610:	83a3      	strh	r3, [r4, #28]
     612:	e7af      	b.n	574 <process_complete+0x34>
     614:	00009098 	.word	0x00009098
     618:	00009074 	.word	0x00009074
     61c:	00009078 	.word	0x00009078
     620:	000090bc 	.word	0x000090bc

00000624 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     628:	b083      	sub	sp, #12
     62a:	4604      	mov	r4, r0
     62c:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     62e:	8b83      	ldrh	r3, [r0, #28]
     630:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     634:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     638:	460d      	mov	r5, r1
     63a:	b131      	cbz	r1, 64a <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     63c:	f1b8 0f00 	cmp.w	r8, #0
     640:	d112      	bne.n	668 <process_event+0x44>
	list->head = NULL;
     642:	2300      	movs	r3, #0
     644:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     646:	9301      	str	r3, [sp, #4]
}
     648:	e0aa      	b.n	7a0 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     64a:	f8df 930c 	ldr.w	r9, [pc, #780]	; 958 <CONFIG_ISR_STACK_SIZE+0x158>
     64e:	f240 1333 	movw	r3, #307	; 0x133
     652:	464a      	mov	r2, r9
     654:	49be      	ldr	r1, [pc, #760]	; (950 <CONFIG_ISR_STACK_SIZE+0x150>)
     656:	48bf      	ldr	r0, [pc, #764]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     658:	f007 fca4 	bl	7fa4 <printk>
     65c:	f240 1133 	movw	r1, #307	; 0x133
     660:	4648      	mov	r0, r9
     662:	f007 fdf8 	bl	8256 <assert_post_action>
     666:	e7e9      	b.n	63c <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     668:	2d01      	cmp	r5, #1
     66a:	d013      	beq.n	694 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     66c:	2d02      	cmp	r5, #2
     66e:	d116      	bne.n	69e <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     670:	8ba3      	ldrh	r3, [r4, #28]
     672:	f043 0320 	orr.w	r3, r3, #32
     676:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     678:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     67a:	4620      	mov	r0, r4
     67c:	f005 f80e 	bl	569c <z_spin_unlock_valid>
     680:	2800      	cmp	r0, #0
     682:	f000 81a3 	beq.w	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     686:	f386 8811 	msr	BASEPRI, r6
     68a:	f3bf 8f6f 	isb	sy
}
     68e:	b003      	add	sp, #12
     690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     694:	8ba3      	ldrh	r3, [r4, #28]
     696:	f043 0310 	orr.w	r3, r3, #16
     69a:	83a3      	strh	r3, [r4, #28]
     69c:	e7ec      	b.n	678 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     69e:	4dae      	ldr	r5, [pc, #696]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     6a0:	f44f 739e 	mov.w	r3, #316	; 0x13c
     6a4:	462a      	mov	r2, r5
     6a6:	49ad      	ldr	r1, [pc, #692]	; (95c <CONFIG_ISR_STACK_SIZE+0x15c>)
     6a8:	48aa      	ldr	r0, [pc, #680]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     6aa:	f007 fc7b 	bl	7fa4 <printk>
     6ae:	f44f 719e 	mov.w	r1, #316	; 0x13c
     6b2:	4628      	mov	r0, r5
     6b4:	f007 fdcf 	bl	8256 <assert_post_action>
     6b8:	e7da      	b.n	670 <process_event+0x4c>
			evt = process_recheck(mgr);
     6ba:	4620      	mov	r0, r4
     6bc:	f007 fcb5 	bl	802a <process_recheck>
     6c0:	4605      	mov	r5, r0
     6c2:	e06f      	b.n	7a4 <process_event+0x180>
			res = mgr->last_res;
     6c4:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     6c8:	464a      	mov	r2, r9
     6ca:	4669      	mov	r1, sp
     6cc:	4620      	mov	r0, r4
     6ce:	f7ff ff37 	bl	540 <process_complete>
		onoff_transition_fn transit = NULL;
     6d2:	2500      	movs	r5, #0
     6d4:	e011      	b.n	6fa <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     6d6:	2f00      	cmp	r7, #0
     6d8:	f040 8081 	bne.w	7de <process_event+0x1ba>
	return list->head;
     6dc:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     6de:	2b00      	cmp	r3, #0
     6e0:	f000 808b 	beq.w	7fa <process_event+0x1d6>
			transit = mgr->transitions->start;
     6e4:	6923      	ldr	r3, [r4, #16]
     6e6:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     6e8:	2d00      	cmp	r5, #0
     6ea:	f000 8094 	beq.w	816 <CONFIG_ISR_STACK_SIZE+0x16>
			set_state(mgr, ONOFF_STATE_TO_ON);
     6ee:	2106      	movs	r1, #6
     6f0:	4620      	mov	r0, r4
     6f2:	f007 fc73 	bl	7fdc <set_state>
		res = 0;
     6f6:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6fa:	8ba3      	ldrh	r3, [r4, #28]
     6fc:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     700:	45b8      	cmp	r8, r7
     702:	f000 810b 	beq.w	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     706:	68a2      	ldr	r2, [r4, #8]
     708:	2a00      	cmp	r2, #0
     70a:	f000 8109 	beq.w	920 <CONFIG_ISR_STACK_SIZE+0x120>
     70e:	2201      	movs	r2, #1
		if (do_monitors
     710:	4617      	mov	r7, r2
     712:	b91a      	cbnz	r2, 71c <process_event+0xf8>
     714:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     716:	2a00      	cmp	r2, #0
     718:	f000 8104 	beq.w	924 <CONFIG_ISR_STACK_SIZE+0x124>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     71c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     720:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     722:	f104 0a14 	add.w	sl, r4, #20
     726:	4650      	mov	r0, sl
     728:	f004 ffb8 	bl	569c <z_spin_unlock_valid>
     72c:	2800      	cmp	r0, #0
     72e:	f000 80fd 	beq.w	92c <CONFIG_ISR_STACK_SIZE+0x12c>
     732:	f386 8811 	msr	BASEPRI, r6
     736:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     73a:	2f00      	cmp	r7, #0
     73c:	f040 8126 	bne.w	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     740:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     742:	b12b      	cbz	r3, 750 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     744:	464b      	mov	r3, r9
     746:	4642      	mov	r2, r8
     748:	4669      	mov	r1, sp
     74a:	4620      	mov	r0, r4
     74c:	f007 fcaf 	bl	80ae <notify_all>
			if (transit != NULL) {
     750:	b115      	cbz	r5, 758 <process_event+0x134>
				transit(mgr, transition_complete);
     752:	4983      	ldr	r1, [pc, #524]	; (960 <CONFIG_ISR_STACK_SIZE+0x160>)
     754:	4620      	mov	r0, r4
     756:	47a8      	blx	r5
	__asm__ volatile(
     758:	f04f 0320 	mov.w	r3, #32
     75c:	f3ef 8611 	mrs	r6, BASEPRI
     760:	f383 8812 	msr	BASEPRI_MAX, r3
     764:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     768:	4650      	mov	r0, sl
     76a:	f004 ff87 	bl	567c <z_spin_lock_valid>
     76e:	2800      	cmp	r0, #0
     770:	f000 8112 	beq.w	998 <CONFIG_ISR_STACK_SIZE+0x198>
	z_spin_lock_set_owner(l);
     774:	4650      	mov	r0, sl
     776:	f004 ffa1 	bl	56bc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     77a:	8ba3      	ldrh	r3, [r4, #28]
     77c:	f023 0308 	bic.w	r3, r3, #8
     780:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     782:	8ba3      	ldrh	r3, [r4, #28]
     784:	f013 0f10 	tst.w	r3, #16
     788:	f000 8116 	beq.w	9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     78c:	f023 0310 	bic.w	r3, r3, #16
     790:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     792:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     794:	8ba7      	ldrh	r7, [r4, #28]
     796:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     79a:	2d00      	cmp	r5, #0
     79c:	f43f af6c 	beq.w	678 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     7a0:	2d02      	cmp	r5, #2
     7a2:	d08a      	beq.n	6ba <process_event+0x96>
		if (evt == EVT_NOP) {
     7a4:	2d00      	cmp	r5, #0
     7a6:	f43f af67 	beq.w	678 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     7aa:	2d01      	cmp	r5, #1
     7ac:	d08a      	beq.n	6c4 <process_event+0xa0>
		} else if (evt == EVT_START) {
     7ae:	2d03      	cmp	r5, #3
     7b0:	d091      	beq.n	6d6 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     7b2:	2d04      	cmp	r5, #4
     7b4:	d03e      	beq.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
		} else if (evt == EVT_RESET) {
     7b6:	2d05      	cmp	r5, #5
     7b8:	f040 80a0 	bne.w	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     7bc:	2f01      	cmp	r7, #1
     7be:	d172      	bne.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     7c0:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7c2:	2b00      	cmp	r3, #0
     7c4:	d07d      	beq.n	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
			transit = mgr->transitions->reset;
     7c6:	6923      	ldr	r3, [r4, #16]
     7c8:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     7ca:	2d00      	cmp	r5, #0
     7cc:	f000 8087 	beq.w	8de <CONFIG_ISR_STACK_SIZE+0xde>
			set_state(mgr, ONOFF_STATE_RESETTING);
     7d0:	2105      	movs	r1, #5
     7d2:	4620      	mov	r0, r4
     7d4:	f007 fc02 	bl	7fdc <set_state>
		res = 0;
     7d8:	f04f 0900 	mov.w	r9, #0
     7dc:	e78d      	b.n	6fa <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     7de:	4d5e      	ldr	r5, [pc, #376]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     7e0:	f44f 73ab 	mov.w	r3, #342	; 0x156
     7e4:	462a      	mov	r2, r5
     7e6:	495f      	ldr	r1, [pc, #380]	; (964 <CONFIG_ISR_STACK_SIZE+0x164>)
     7e8:	485a      	ldr	r0, [pc, #360]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     7ea:	f007 fbdb 	bl	7fa4 <printk>
     7ee:	f44f 71ab 	mov.w	r1, #342	; 0x156
     7f2:	4628      	mov	r0, r5
     7f4:	f007 fd2f 	bl	8256 <assert_post_action>
     7f8:	e770      	b.n	6dc <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7fa:	4d57      	ldr	r5, [pc, #348]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     7fc:	f240 1357 	movw	r3, #343	; 0x157
     800:	462a      	mov	r2, r5
     802:	4959      	ldr	r1, [pc, #356]	; (968 <CONFIG_ISR_STACK_SIZE+0x168>)
     804:	4853      	ldr	r0, [pc, #332]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     806:	f007 fbcd 	bl	7fa4 <printk>
     80a:	f240 1157 	movw	r1, #343	; 0x157
     80e:	4628      	mov	r0, r5
     810:	f007 fd21 	bl	8256 <assert_post_action>
     814:	e766      	b.n	6e4 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     816:	f8df 8140 	ldr.w	r8, [pc, #320]	; 958 <CONFIG_ISR_STACK_SIZE+0x158>
     81a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     81e:	4642      	mov	r2, r8
     820:	4952      	ldr	r1, [pc, #328]	; (96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     822:	484c      	ldr	r0, [pc, #304]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     824:	f007 fbbe 	bl	7fa4 <printk>
     828:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     82c:	4640      	mov	r0, r8
     82e:	f007 fd12 	bl	8256 <assert_post_action>
     832:	e75c      	b.n	6ee <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     834:	2f02      	cmp	r7, #2
     836:	d10b      	bne.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			__ASSERT_NO_MSG(mgr->refs == 0);
     838:	8be3      	ldrh	r3, [r4, #30]
     83a:	b9bb      	cbnz	r3, 86c <CONFIG_ISR_STACK_SIZE+0x6c>
			transit = mgr->transitions->stop;
     83c:	6923      	ldr	r3, [r4, #16]
     83e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     840:	b315      	cbz	r5, 888 <CONFIG_ISR_STACK_SIZE+0x88>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     842:	2104      	movs	r1, #4
     844:	4620      	mov	r0, r4
     846:	f007 fbc9 	bl	7fdc <set_state>
		res = 0;
     84a:	f04f 0900 	mov.w	r9, #0
     84e:	e754      	b.n	6fa <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     850:	4d41      	ldr	r5, [pc, #260]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     852:	f240 135d 	movw	r3, #349	; 0x15d
     856:	462a      	mov	r2, r5
     858:	4945      	ldr	r1, [pc, #276]	; (970 <CONFIG_ISR_STACK_SIZE+0x170>)
     85a:	483e      	ldr	r0, [pc, #248]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     85c:	f007 fba2 	bl	7fa4 <printk>
     860:	f240 115d 	movw	r1, #349	; 0x15d
     864:	4628      	mov	r0, r5
     866:	f007 fcf6 	bl	8256 <assert_post_action>
     86a:	e7e5      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
			__ASSERT_NO_MSG(mgr->refs == 0);
     86c:	4d3a      	ldr	r5, [pc, #232]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     86e:	f44f 73af 	mov.w	r3, #350	; 0x15e
     872:	462a      	mov	r2, r5
     874:	493f      	ldr	r1, [pc, #252]	; (974 <CONFIG_ISR_STACK_SIZE+0x174>)
     876:	4837      	ldr	r0, [pc, #220]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     878:	f007 fb94 	bl	7fa4 <printk>
     87c:	f44f 71af 	mov.w	r1, #350	; 0x15e
     880:	4628      	mov	r0, r5
     882:	f007 fce8 	bl	8256 <assert_post_action>
     886:	e7d9      	b.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
			__ASSERT_NO_MSG(transit != NULL);
     888:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 958 <CONFIG_ISR_STACK_SIZE+0x158>
     88c:	f240 1361 	movw	r3, #353	; 0x161
     890:	4642      	mov	r2, r8
     892:	4936      	ldr	r1, [pc, #216]	; (96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     894:	482f      	ldr	r0, [pc, #188]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     896:	f007 fb85 	bl	7fa4 <printk>
     89a:	f240 1161 	movw	r1, #353	; 0x161
     89e:	4640      	mov	r0, r8
     8a0:	f007 fcd9 	bl	8256 <assert_post_action>
     8a4:	e7cd      	b.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     8a6:	4d2c      	ldr	r5, [pc, #176]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     8a8:	f44f 73b2 	mov.w	r3, #356	; 0x164
     8ac:	462a      	mov	r2, r5
     8ae:	4932      	ldr	r1, [pc, #200]	; (978 <CONFIG_ISR_STACK_SIZE+0x178>)
     8b0:	4828      	ldr	r0, [pc, #160]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     8b2:	f007 fb77 	bl	7fa4 <printk>
     8b6:	f44f 71b2 	mov.w	r1, #356	; 0x164
     8ba:	4628      	mov	r0, r5
     8bc:	f007 fccb 	bl	8256 <assert_post_action>
     8c0:	e77e      	b.n	7c0 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     8c2:	4d25      	ldr	r5, [pc, #148]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     8c4:	f240 1365 	movw	r3, #357	; 0x165
     8c8:	462a      	mov	r2, r5
     8ca:	4927      	ldr	r1, [pc, #156]	; (968 <CONFIG_ISR_STACK_SIZE+0x168>)
     8cc:	4821      	ldr	r0, [pc, #132]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     8ce:	f007 fb69 	bl	7fa4 <printk>
     8d2:	f240 1165 	movw	r1, #357	; 0x165
     8d6:	4628      	mov	r0, r5
     8d8:	f007 fcbd 	bl	8256 <assert_post_action>
     8dc:	e773      	b.n	7c6 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     8de:	f8df 8078 	ldr.w	r8, [pc, #120]	; 958 <CONFIG_ISR_STACK_SIZE+0x158>
     8e2:	f44f 73b4 	mov.w	r3, #360	; 0x168
     8e6:	4642      	mov	r2, r8
     8e8:	4920      	ldr	r1, [pc, #128]	; (96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     8ea:	481a      	ldr	r0, [pc, #104]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     8ec:	f007 fb5a 	bl	7fa4 <printk>
     8f0:	f44f 71b4 	mov.w	r1, #360	; 0x168
     8f4:	4640      	mov	r0, r8
     8f6:	f007 fcae 	bl	8256 <assert_post_action>
     8fa:	e769      	b.n	7d0 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     8fc:	4d16      	ldr	r5, [pc, #88]	; (958 <CONFIG_ISR_STACK_SIZE+0x158>)
     8fe:	f240 136b 	movw	r3, #363	; 0x16b
     902:	462a      	mov	r2, r5
     904:	491d      	ldr	r1, [pc, #116]	; (97c <CONFIG_ISR_STACK_SIZE+0x17c>)
     906:	4813      	ldr	r0, [pc, #76]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     908:	f007 fb4c 	bl	7fa4 <printk>
     90c:	f240 116b 	movw	r1, #363	; 0x16b
     910:	4628      	mov	r0, r5
     912:	f007 fca0 	bl	8256 <assert_post_action>
		onoff_transition_fn transit = NULL;
     916:	2500      	movs	r5, #0
		res = 0;
     918:	46a9      	mov	r9, r5
     91a:	e6ee      	b.n	6fa <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     91c:	2200      	movs	r2, #0
     91e:	e6f7      	b.n	710 <process_event+0xec>
     920:	2200      	movs	r2, #0
     922:	e6f5      	b.n	710 <process_event+0xec>
		    || (transit != NULL)) {
     924:	2d00      	cmp	r5, #0
     926:	f47f aef9 	bne.w	71c <process_event+0xf8>
     92a:	e72a      	b.n	782 <process_event+0x15e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     92c:	f8df b058 	ldr.w	fp, [pc, #88]	; 988 <CONFIG_ISR_STACK_SIZE+0x188>
     930:	23ac      	movs	r3, #172	; 0xac
     932:	465a      	mov	r2, fp
     934:	4912      	ldr	r1, [pc, #72]	; (980 <CONFIG_ISR_STACK_SIZE+0x180>)
     936:	4807      	ldr	r0, [pc, #28]	; (954 <CONFIG_ISR_STACK_SIZE+0x154>)
     938:	f007 fb34 	bl	7fa4 <printk>
     93c:	4651      	mov	r1, sl
     93e:	4811      	ldr	r0, [pc, #68]	; (984 <CONFIG_ISR_STACK_SIZE+0x184>)
     940:	f007 fb30 	bl	7fa4 <printk>
     944:	21ac      	movs	r1, #172	; 0xac
     946:	4658      	mov	r0, fp
     948:	f007 fc85 	bl	8256 <assert_post_action>
     94c:	e6f1      	b.n	732 <process_event+0x10e>
     94e:	bf00      	nop
     950:	000090e4 	.word	0x000090e4
     954:	00009078 	.word	0x00009078
     958:	00009098 	.word	0x00009098
     95c:	000090f4 	.word	0x000090f4
     960:	00000a05 	.word	0x00000a05
     964:	00009108 	.word	0x00009108
     968:	00009114 	.word	0x00009114
     96c:	00009138 	.word	0x00009138
     970:	00009150 	.word	0x00009150
     974:	00009168 	.word	0x00009168
     978:	00009178 	.word	0x00009178
     97c:	00009074 	.word	0x00009074
     980:	000091b8 	.word	0x000091b8
     984:	000091d0 	.word	0x000091d0
     988:	00009190 	.word	0x00009190
				notify_monitors(mgr, state, res);
     98c:	464a      	mov	r2, r9
     98e:	4641      	mov	r1, r8
     990:	4620      	mov	r0, r4
     992:	f007 fb2b 	bl	7fec <notify_monitors>
     996:	e6d3      	b.n	740 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     998:	4d14      	ldr	r5, [pc, #80]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     99a:	2381      	movs	r3, #129	; 0x81
     99c:	462a      	mov	r2, r5
     99e:	4914      	ldr	r1, [pc, #80]	; (9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>)
     9a0:	4814      	ldr	r0, [pc, #80]	; (9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>)
     9a2:	f007 faff 	bl	7fa4 <printk>
     9a6:	4651      	mov	r1, sl
     9a8:	4813      	ldr	r0, [pc, #76]	; (9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>)
     9aa:	f007 fafb 	bl	7fa4 <printk>
     9ae:	2181      	movs	r1, #129	; 0x81
     9b0:	4628      	mov	r0, r5
     9b2:	f007 fc50 	bl	8256 <assert_post_action>
     9b6:	e6dd      	b.n	774 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     9b8:	f013 0f20 	tst.w	r3, #32
     9bc:	d004      	beq.n	9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     9be:	f023 0320 	bic.w	r3, r3, #32
     9c2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     9c4:	2502      	movs	r5, #2
     9c6:	e6e5      	b.n	794 <process_event+0x170>
		evt = EVT_NOP;
     9c8:	2500      	movs	r5, #0
     9ca:	e6e3      	b.n	794 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     9cc:	4d07      	ldr	r5, [pc, #28]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     9ce:	23ac      	movs	r3, #172	; 0xac
     9d0:	462a      	mov	r2, r5
     9d2:	490a      	ldr	r1, [pc, #40]	; (9fc <CONFIG_ISR_STACK_SIZE+0x1fc>)
     9d4:	4807      	ldr	r0, [pc, #28]	; (9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>)
     9d6:	f007 fae5 	bl	7fa4 <printk>
     9da:	4621      	mov	r1, r4
     9dc:	4808      	ldr	r0, [pc, #32]	; (a00 <CONFIG_ISR_STACK_SIZE+0x200>)
     9de:	f007 fae1 	bl	7fa4 <printk>
     9e2:	21ac      	movs	r1, #172	; 0xac
     9e4:	4628      	mov	r0, r5
     9e6:	f007 fc36 	bl	8256 <assert_post_action>
     9ea:	e64c      	b.n	686 <process_event+0x62>
     9ec:	00009190 	.word	0x00009190
     9f0:	000091e8 	.word	0x000091e8
     9f4:	00009078 	.word	0x00009078
     9f8:	00009200 	.word	0x00009200
     9fc:	000091b8 	.word	0x000091b8
     a00:	000091d0 	.word	0x000091d0

00000a04 <transition_complete>:
{
     a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a08:	4604      	mov	r4, r0
     a0a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     a0c:	f100 0614 	add.w	r6, r0, #20
     a10:	f04f 0320 	mov.w	r3, #32
     a14:	f3ef 8711 	mrs	r7, BASEPRI
     a18:	f383 8812 	msr	BASEPRI_MAX, r3
     a1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a20:	4630      	mov	r0, r6
     a22:	f004 fe2b 	bl	567c <z_spin_lock_valid>
     a26:	b150      	cbz	r0, a3e <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
     a28:	4630      	mov	r0, r6
     a2a:	f004 fe47 	bl	56bc <z_spin_lock_set_owner>
	mgr->last_res = res;
     a2e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     a30:	463a      	mov	r2, r7
     a32:	2101      	movs	r1, #1
     a34:	4620      	mov	r0, r4
     a36:	f7ff fdf5 	bl	624 <process_event>
}
     a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a3e:	f8df 802c 	ldr.w	r8, [pc, #44]	; a6c <transition_complete+0x68>
     a42:	2381      	movs	r3, #129	; 0x81
     a44:	4642      	mov	r2, r8
     a46:	4906      	ldr	r1, [pc, #24]	; (a60 <transition_complete+0x5c>)
     a48:	4806      	ldr	r0, [pc, #24]	; (a64 <transition_complete+0x60>)
     a4a:	f007 faab 	bl	7fa4 <printk>
     a4e:	4631      	mov	r1, r6
     a50:	4805      	ldr	r0, [pc, #20]	; (a68 <transition_complete+0x64>)
     a52:	f007 faa7 	bl	7fa4 <printk>
     a56:	2181      	movs	r1, #129	; 0x81
     a58:	4640      	mov	r0, r8
     a5a:	f007 fbfc 	bl	8256 <assert_post_action>
     a5e:	e7e3      	b.n	a28 <transition_complete+0x24>
     a60:	000091e8 	.word	0x000091e8
     a64:	00009078 	.word	0x00009078
     a68:	00009200 	.word	0x00009200
     a6c:	00009190 	.word	0x00009190

00000a70 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a74:	4604      	mov	r4, r0
     a76:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     a78:	f007 faf0 	bl	805c <validate_args>

	if (rv < 0) {
     a7c:	1e06      	subs	r6, r0, #0
     a7e:	db58      	blt.n	b32 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     a80:	f104 0714 	add.w	r7, r4, #20
     a84:	f04f 0320 	mov.w	r3, #32
     a88:	f3ef 8911 	mrs	r9, BASEPRI
     a8c:	f383 8812 	msr	BASEPRI_MAX, r3
     a90:	f3bf 8f6f 	isb	sy
     a94:	4638      	mov	r0, r7
     a96:	f004 fdf1 	bl	567c <z_spin_lock_valid>
     a9a:	b1e8      	cbz	r0, ad8 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
     a9c:	4638      	mov	r0, r7
     a9e:	f004 fe0d 	bl	56bc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     aa2:	8ba5      	ldrh	r5, [r4, #28]
     aa4:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     aa8:	8be3      	ldrh	r3, [r4, #30]
     aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
     aae:	4293      	cmp	r3, r2
     ab0:	d056      	beq.n	b60 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
     ab2:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
     ab4:	2d02      	cmp	r5, #2
     ab6:	d01f      	beq.n	af8 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
     ab8:	b32d      	cbz	r5, b06 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
     aba:	2d04      	cmp	r5, #4
     abc:	d023      	beq.n	b06 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
     abe:	2d06      	cmp	r5, #6
     ac0:	d021      	beq.n	b06 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
     ac2:	2d05      	cmp	r5, #5
     ac4:	d053      	beq.n	b6e <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     ac6:	2d01      	cmp	r5, #1
     ac8:	d136      	bne.n	b38 <onoff_request+0xc8>
		rv = -EIO;
     aca:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     ace:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     ad2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     ad4:	4652      	mov	r2, sl
     ad6:	e01c      	b.n	b12 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     ad8:	4d3c      	ldr	r5, [pc, #240]	; (bcc <onoff_request+0x15c>)
     ada:	2381      	movs	r3, #129	; 0x81
     adc:	462a      	mov	r2, r5
     ade:	493c      	ldr	r1, [pc, #240]	; (bd0 <onoff_request+0x160>)
     ae0:	483c      	ldr	r0, [pc, #240]	; (bd4 <onoff_request+0x164>)
     ae2:	f007 fa5f 	bl	7fa4 <printk>
     ae6:	4639      	mov	r1, r7
     ae8:	483b      	ldr	r0, [pc, #236]	; (bd8 <onoff_request+0x168>)
     aea:	f007 fa5b 	bl	7fa4 <printk>
     aee:	2181      	movs	r1, #129	; 0x81
     af0:	4628      	mov	r0, r5
     af2:	f007 fbb0 	bl	8256 <assert_post_action>
     af6:	e7d1      	b.n	a9c <onoff_request+0x2c>
		mgr->refs += 1U;
     af8:	3301      	adds	r3, #1
     afa:	83e3      	strh	r3, [r4, #30]
		notify = true;
     afc:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
     b00:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
     b02:	461a      	mov	r2, r3
     b04:	e005      	b.n	b12 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
     b06:	fab5 f385 	clz	r3, r5
     b0a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
     b0c:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
     b10:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
     b12:	b142      	cbz	r2, b26 <onoff_request+0xb6>
	parent->next = child;
     b14:	2200      	movs	r2, #0
     b16:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
     b1a:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     b1c:	b372      	cbz	r2, b7c <onoff_request+0x10c>
	parent->next = child;
     b1e:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
     b22:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
     b26:	b373      	cbz	r3, b86 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
     b28:	464a      	mov	r2, r9
     b2a:	2102      	movs	r1, #2
     b2c:	4620      	mov	r0, r4
     b2e:	f7ff fd79 	bl	624 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
     b32:	4630      	mov	r0, r6
     b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     b38:	4e28      	ldr	r6, [pc, #160]	; (bdc <onoff_request+0x16c>)
     b3a:	f240 13c9 	movw	r3, #457	; 0x1c9
     b3e:	4632      	mov	r2, r6
     b40:	4927      	ldr	r1, [pc, #156]	; (be0 <onoff_request+0x170>)
     b42:	4824      	ldr	r0, [pc, #144]	; (bd4 <onoff_request+0x164>)
     b44:	f007 fa2e 	bl	7fa4 <printk>
     b48:	f240 11c9 	movw	r1, #457	; 0x1c9
     b4c:	4630      	mov	r0, r6
     b4e:	f007 fb82 	bl	8256 <assert_post_action>
		rv = -EIO;
     b52:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     b56:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     b5a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     b5c:	4652      	mov	r2, sl
     b5e:	e7d8      	b.n	b12 <onoff_request+0xa2>
		rv = -EAGAIN;
     b60:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
     b64:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     b68:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     b6a:	4652      	mov	r2, sl
     b6c:	e7d1      	b.n	b12 <onoff_request+0xa2>
		rv = -ENOTSUP;
     b6e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
     b72:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     b76:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     b78:	4652      	mov	r2, sl
     b7a:	e7ca      	b.n	b12 <onoff_request+0xa2>
     b7c:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
     b80:	f8c4 8000 	str.w	r8, [r4]
}
     b84:	e7cf      	b.n	b26 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     b86:	4638      	mov	r0, r7
     b88:	f004 fd88 	bl	569c <z_spin_unlock_valid>
     b8c:	b168      	cbz	r0, baa <onoff_request+0x13a>
	__asm__ volatile(
     b8e:	f389 8811 	msr	BASEPRI, r9
     b92:	f3bf 8f6f 	isb	sy
		if (notify) {
     b96:	f1ba 0f00 	cmp.w	sl, #0
     b9a:	d0ca      	beq.n	b32 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
     b9c:	2300      	movs	r3, #0
     b9e:	462a      	mov	r2, r5
     ba0:	4641      	mov	r1, r8
     ba2:	4620      	mov	r0, r4
     ba4:	f007 fa70 	bl	8088 <notify_one>
     ba8:	e7c3      	b.n	b32 <onoff_request+0xc2>
     baa:	f8df b020 	ldr.w	fp, [pc, #32]	; bcc <onoff_request+0x15c>
     bae:	23ac      	movs	r3, #172	; 0xac
     bb0:	465a      	mov	r2, fp
     bb2:	490c      	ldr	r1, [pc, #48]	; (be4 <onoff_request+0x174>)
     bb4:	4807      	ldr	r0, [pc, #28]	; (bd4 <onoff_request+0x164>)
     bb6:	f007 f9f5 	bl	7fa4 <printk>
     bba:	4639      	mov	r1, r7
     bbc:	480a      	ldr	r0, [pc, #40]	; (be8 <onoff_request+0x178>)
     bbe:	f007 f9f1 	bl	7fa4 <printk>
     bc2:	21ac      	movs	r1, #172	; 0xac
     bc4:	4658      	mov	r0, fp
     bc6:	f007 fb46 	bl	8256 <assert_post_action>
     bca:	e7e0      	b.n	b8e <onoff_request+0x11e>
     bcc:	00009190 	.word	0x00009190
     bd0:	000091e8 	.word	0x000091e8
     bd4:	00009078 	.word	0x00009078
     bd8:	00009200 	.word	0x00009200
     bdc:	00009098 	.word	0x00009098
     be0:	00009178 	.word	0x00009178
     be4:	000091b8 	.word	0x000091b8
     be8:	000091d0 	.word	0x000091d0

00000bec <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf0:	b093      	sub	sp, #76	; 0x4c
     bf2:	4606      	mov	r6, r0
     bf4:	460d      	mov	r5, r1
     bf6:	4692      	mov	sl, r2
     bf8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     bfa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     bfc:	f89a 0000 	ldrb.w	r0, [sl]
     c00:	2800      	cmp	r0, #0
     c02:	f000 84d6 	beq.w	15b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b2>
		if (*fp != '%') {
     c06:	2825      	cmp	r0, #37	; 0x25
     c08:	d008      	beq.n	c1c <cbvprintf+0x30>
			OUTC(*fp++);
     c0a:	f10a 0a01 	add.w	sl, sl, #1
     c0e:	4629      	mov	r1, r5
     c10:	47b0      	blx	r6
     c12:	2800      	cmp	r0, #0
     c14:	f2c0 84ce 	blt.w	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
     c18:	3401      	adds	r4, #1
			continue;
     c1a:	e7ef      	b.n	bfc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     c1c:	2300      	movs	r3, #0
     c1e:	9306      	str	r3, [sp, #24]
     c20:	9307      	str	r3, [sp, #28]
     c22:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     c24:	9308      	str	r3, [sp, #32]
     c26:	9309      	str	r3, [sp, #36]	; 0x24
     c28:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     c2a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     c2e:	f89a 3001 	ldrb.w	r3, [sl, #1]
     c32:	2b25      	cmp	r3, #37	; 0x25
     c34:	d001      	beq.n	c3a <cbvprintf+0x4e>
	bool loop = true;
     c36:	2701      	movs	r7, #1
     c38:	e02c      	b.n	c94 <cbvprintf+0xa8>
		conv->specifier = *sp++;
     c3a:	f10a 0802 	add.w	r8, sl, #2
     c3e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     c42:	e1a8      	b.n	f96 <cbvprintf+0x3aa>
			conv->flag_dash = true;
     c44:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c48:	f043 0304 	orr.w	r3, r3, #4
     c4c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     c50:	b1ff      	cbz	r7, c92 <cbvprintf+0xa6>
			++sp;
     c52:	f108 0801 	add.w	r8, r8, #1
     c56:	e01c      	b.n	c92 <cbvprintf+0xa6>
			conv->flag_plus = true;
     c58:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c5c:	f043 0308 	orr.w	r3, r3, #8
     c60:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     c64:	e7f4      	b.n	c50 <cbvprintf+0x64>
			conv->flag_space = true;
     c66:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c6a:	f043 0310 	orr.w	r3, r3, #16
     c6e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     c72:	e7ed      	b.n	c50 <cbvprintf+0x64>
			conv->flag_hash = true;
     c74:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c78:	f043 0320 	orr.w	r3, r3, #32
     c7c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     c80:	e7e6      	b.n	c50 <cbvprintf+0x64>
			conv->flag_zero = true;
     c82:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c8a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     c8e:	e7df      	b.n	c50 <cbvprintf+0x64>
		switch (*sp) {
     c90:	2700      	movs	r7, #0
	} while (loop);
     c92:	b34f      	cbz	r7, ce8 <cbvprintf+0xfc>
		switch (*sp) {
     c94:	f898 3000 	ldrb.w	r3, [r8]
     c98:	3b20      	subs	r3, #32
     c9a:	2b10      	cmp	r3, #16
     c9c:	d8f8      	bhi.n	c90 <cbvprintf+0xa4>
     c9e:	a201      	add	r2, pc, #4	; (adr r2, ca4 <cbvprintf+0xb8>)
     ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ca4:	00000c67 	.word	0x00000c67
     ca8:	00000c91 	.word	0x00000c91
     cac:	00000c91 	.word	0x00000c91
     cb0:	00000c75 	.word	0x00000c75
     cb4:	00000c91 	.word	0x00000c91
     cb8:	00000c91 	.word	0x00000c91
     cbc:	00000c91 	.word	0x00000c91
     cc0:	00000c91 	.word	0x00000c91
     cc4:	00000c91 	.word	0x00000c91
     cc8:	00000c91 	.word	0x00000c91
     ccc:	00000c91 	.word	0x00000c91
     cd0:	00000c59 	.word	0x00000c59
     cd4:	00000c91 	.word	0x00000c91
     cd8:	00000c45 	.word	0x00000c45
     cdc:	00000c91 	.word	0x00000c91
     ce0:	00000c91 	.word	0x00000c91
     ce4:	00000c83 	.word	0x00000c83
	if (conv->flag_zero && conv->flag_dash) {
     ce8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cec:	f003 0344 	and.w	r3, r3, #68	; 0x44
     cf0:	2b44      	cmp	r3, #68	; 0x44
     cf2:	d06d      	beq.n	dd0 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     cf4:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     cf8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     d00:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     d04:	f898 3000 	ldrb.w	r3, [r8]
     d08:	2b2a      	cmp	r3, #42	; 0x2a
     d0a:	d068      	beq.n	dde <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     d0c:	a805      	add	r0, sp, #20
     d0e:	f007 fa0b 	bl	8128 <extract_decimal>
	if (sp != wp) {
     d12:	9b05      	ldr	r3, [sp, #20]
     d14:	4598      	cmp	r8, r3
     d16:	d012      	beq.n	d3e <cbvprintf+0x152>
		conv->width_present = true;
     d18:	f89d 3020 	ldrb.w	r3, [sp, #32]
     d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     d20:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     d24:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     d26:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     d2a:	2800      	cmp	r0, #0
     d2c:	db60      	blt.n	df0 <cbvprintf+0x204>
     d2e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     d30:	4313      	orrs	r3, r2
     d32:	f89d 2020 	ldrb.w	r2, [sp, #32]
     d36:	f363 0241 	bfi	r2, r3, #1, #1
     d3a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     d3e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     d40:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	2b2e      	cmp	r3, #46	; 0x2e
     d46:	bf14      	ite	ne
     d48:	2300      	movne	r3, #0
     d4a:	2301      	moveq	r3, #1
     d4c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     d50:	f363 0241 	bfi	r2, r3, #1, #1
     d54:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     d58:	2b00      	cmp	r3, #0
     d5a:	d04b      	beq.n	df4 <cbvprintf+0x208>
	++sp;
     d5c:	9b05      	ldr	r3, [sp, #20]
     d5e:	1c5a      	adds	r2, r3, #1
     d60:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     d62:	785b      	ldrb	r3, [r3, #1]
     d64:	2b2a      	cmp	r3, #42	; 0x2a
     d66:	d048      	beq.n	dfa <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
     d68:	a805      	add	r0, sp, #20
     d6a:	f007 f9dd 	bl	8128 <extract_decimal>
	conv->prec_value = prec;
     d6e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     d70:	f89d 3020 	ldrb.w	r3, [sp, #32]
     d74:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     d78:	2800      	cmp	r0, #0
     d7a:	db47      	blt.n	e0c <cbvprintf+0x220>
     d7c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     d7e:	4313      	orrs	r3, r2
     d80:	f89d 2020 	ldrb.w	r2, [sp, #32]
     d84:	f363 0241 	bfi	r2, r3, #1, #1
     d88:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     d8c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     d90:	f898 3000 	ldrb.w	r3, [r8]
     d94:	3b4c      	subs	r3, #76	; 0x4c
     d96:	2b2e      	cmp	r3, #46	; 0x2e
     d98:	f200 80dc 	bhi.w	f54 <cbvprintf+0x368>
     d9c:	e8df f003 	tbb	[pc, r3]
     da0:	dadadaca 	.word	0xdadadaca
     da4:	dadadada 	.word	0xdadadada
     da8:	dadadada 	.word	0xdadadada
     dac:	dadadada 	.word	0xdadadada
     db0:	dadadada 	.word	0xdadadada
     db4:	dadadada 	.word	0xdadadada
     db8:	dadadada 	.word	0xdadadada
     dbc:	da6ada38 	.word	0xda6ada38
     dc0:	dadada51 	.word	0xdadada51
     dc4:	dadadada 	.word	0xdadadada
     dc8:	dadadac0 	.word	0xdadadac0
     dcc:	dada      	.short	0xdada
     dce:	b6          	.byte	0xb6
     dcf:	00          	.byte	0x00
		conv->flag_zero = false;
     dd0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     dd4:	f36f 1386 	bfc	r3, #6, #1
     dd8:	f88d 3020 	strb.w	r3, [sp, #32]
     ddc:	e78a      	b.n	cf4 <cbvprintf+0x108>
		conv->width_star = true;
     dde:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     de2:	f043 0301 	orr.w	r3, r3, #1
     de6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     dea:	4643      	mov	r3, r8
     dec:	3301      	adds	r3, #1
     dee:	e7a7      	b.n	d40 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     df0:	2201      	movs	r2, #1
     df2:	e79d      	b.n	d30 <cbvprintf+0x144>
		return sp;
     df4:	f8dd 8014 	ldr.w	r8, [sp, #20]
     df8:	e7ca      	b.n	d90 <cbvprintf+0x1a4>
		conv->prec_star = true;
     dfa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     dfe:	f043 0304 	orr.w	r3, r3, #4
     e02:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     e06:	f102 0801 	add.w	r8, r2, #1
     e0a:	e7c1      	b.n	d90 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     e0c:	2201      	movs	r2, #1
     e0e:	e7b6      	b.n	d7e <cbvprintf+0x192>
		if (*++sp == 'h') {
     e10:	f108 0201 	add.w	r2, r8, #1
     e14:	f898 3001 	ldrb.w	r3, [r8, #1]
     e18:	2b68      	cmp	r3, #104	; 0x68
     e1a:	d008      	beq.n	e2e <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
     e1c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e20:	2102      	movs	r1, #2
     e22:	f361 03c6 	bfi	r3, r1, #3, #4
     e26:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     e2a:	4690      	mov	r8, r2
     e2c:	e02b      	b.n	e86 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
     e2e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e32:	2201      	movs	r2, #1
     e34:	f362 03c6 	bfi	r3, r2, #3, #4
     e38:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     e3c:	f108 0802 	add.w	r8, r8, #2
     e40:	e021      	b.n	e86 <cbvprintf+0x29a>
		if (*++sp == 'l') {
     e42:	f108 0201 	add.w	r2, r8, #1
     e46:	f898 3001 	ldrb.w	r3, [r8, #1]
     e4a:	2b6c      	cmp	r3, #108	; 0x6c
     e4c:	d008      	beq.n	e60 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
     e4e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e52:	2103      	movs	r1, #3
     e54:	f361 03c6 	bfi	r3, r1, #3, #4
     e58:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     e5c:	4690      	mov	r8, r2
     e5e:	e012      	b.n	e86 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
     e60:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e64:	2204      	movs	r2, #4
     e66:	f362 03c6 	bfi	r3, r2, #3, #4
     e6a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     e6e:	f108 0802 	add.w	r8, r8, #2
     e72:	e008      	b.n	e86 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
     e74:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e78:	2205      	movs	r2, #5
     e7a:	f362 03c6 	bfi	r3, r2, #3, #4
     e7e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     e82:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     e86:	f818 3b01 	ldrb.w	r3, [r8], #1
     e8a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     e8e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     e92:	2a37      	cmp	r2, #55	; 0x37
     e94:	f200 8150 	bhi.w	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
     e98:	e8df f012 	tbh	[pc, r2, lsl #1]
     e9c:	014e0126 	.word	0x014e0126
     ea0:	014e014e 	.word	0x014e014e
     ea4:	01260126 	.word	0x01260126
     ea8:	014e0126 	.word	0x014e0126
     eac:	014e014e 	.word	0x014e014e
     eb0:	014e014e 	.word	0x014e014e
     eb4:	014e014e 	.word	0x014e014e
     eb8:	014e014e 	.word	0x014e014e
     ebc:	014e014e 	.word	0x014e014e
     ec0:	014e014e 	.word	0x014e014e
     ec4:	014e014e 	.word	0x014e014e
     ec8:	0113014e 	.word	0x0113014e
     ecc:	014e014e 	.word	0x014e014e
     ed0:	014e014e 	.word	0x014e014e
     ed4:	014e014e 	.word	0x014e014e
     ed8:	014e014e 	.word	0x014e014e
     edc:	014e0126 	.word	0x014e0126
     ee0:	00630113 	.word	0x00630113
     ee4:	01260126 	.word	0x01260126
     ee8:	014e0126 	.word	0x014e0126
     eec:	014e0063 	.word	0x014e0063
     ef0:	014e014e 	.word	0x014e014e
     ef4:	012f014e 	.word	0x012f014e
     ef8:	013f0113 	.word	0x013f0113
     efc:	014e014e 	.word	0x014e014e
     f00:	014e013f 	.word	0x014e013f
     f04:	014e0113 	.word	0x014e0113
     f08:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     f0c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f10:	2206      	movs	r2, #6
     f12:	f362 03c6 	bfi	r3, r2, #3, #4
     f16:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     f1a:	f108 0801 	add.w	r8, r8, #1
		break;
     f1e:	e7b2      	b.n	e86 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
     f20:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f24:	2207      	movs	r2, #7
     f26:	f362 03c6 	bfi	r3, r2, #3, #4
     f2a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     f2e:	f108 0801 	add.w	r8, r8, #1
		break;
     f32:	e7a8      	b.n	e86 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
     f34:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f38:	2208      	movs	r2, #8
     f3a:	f362 03c6 	bfi	r3, r2, #3, #4
     f3e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     f42:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     f46:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f4a:	f043 0302 	orr.w	r3, r3, #2
     f4e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     f52:	e798      	b.n	e86 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
     f54:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f58:	f36f 03c6 	bfc	r3, #3, #4
     f5c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     f60:	e791      	b.n	e86 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
     f62:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     f66:	2101      	movs	r1, #1
     f68:	f361 0202 	bfi	r2, r1, #0, #3
     f6c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     f70:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     f74:	f002 0278 	and.w	r2, r2, #120	; 0x78
     f78:	2a40      	cmp	r2, #64	; 0x40
     f7a:	f000 80aa 	beq.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
		if (conv->specifier == 'c') {
     f7e:	2b63      	cmp	r3, #99	; 0x63
     f80:	f000 80ae 	beq.w	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
	conv->unsupported |= unsupported;
     f84:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f88:	f3c3 0240 	ubfx	r2, r3, #1, #1
     f8c:	4317      	orrs	r7, r2
     f8e:	f367 0341 	bfi	r3, r7, #1, #1
     f92:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     f96:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f9a:	f013 0f01 	tst.w	r3, #1
     f9e:	f000 80da 	beq.w	1156 <CONFIG_FPROTECT_BLOCK_SIZE+0x156>
			width = va_arg(ap, int);
     fa2:	9b03      	ldr	r3, [sp, #12]
     fa4:	1d1a      	adds	r2, r3, #4
     fa6:	9203      	str	r2, [sp, #12]
     fa8:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     faa:	2f00      	cmp	r7, #0
     fac:	f2c0 80cb 	blt.w	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     fb0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     fb4:	f013 0f04 	tst.w	r3, #4
     fb8:	f000 80df 	beq.w	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
			int arg = va_arg(ap, int);
     fbc:	9b03      	ldr	r3, [sp, #12]
     fbe:	1d1a      	adds	r2, r3, #4
     fc0:	9203      	str	r2, [sp, #12]
     fc2:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     fc6:	f1bb 0f00 	cmp.w	fp, #0
     fca:	f2c0 80cd 	blt.w	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     fce:	2300      	movs	r3, #0
     fd0:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     fd2:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     fd4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     fd8:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     fdc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     fe0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     fe4:	2b01      	cmp	r3, #1
     fe6:	f000 80d1 	beq.w	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     fea:	2b02      	cmp	r3, #2
     fec:	f000 8116 	beq.w	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     ff0:	2b04      	cmp	r3, #4
     ff2:	f000 8167 	beq.w	12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     ff6:	2b03      	cmp	r3, #3
     ff8:	f000 817e 	beq.w	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     ffc:	f89d 9020 	ldrb.w	r9, [sp, #32]
    1000:	f019 0303 	ands.w	r3, r9, #3
    1004:	9302      	str	r3, [sp, #8]
    1006:	f040 817d 	bne.w	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    100a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    100e:	3b25      	subs	r3, #37	; 0x25
    1010:	2b53      	cmp	r3, #83	; 0x53
    1012:	f200 8233 	bhi.w	147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
    1016:	e8df f013 	tbh	[pc, r3, lsl #1]
    101a:	0181      	.short	0x0181
    101c:	02310231 	.word	0x02310231
    1020:	02310231 	.word	0x02310231
    1024:	02310231 	.word	0x02310231
    1028:	02310231 	.word	0x02310231
    102c:	02310231 	.word	0x02310231
    1030:	02310231 	.word	0x02310231
    1034:	02310231 	.word	0x02310231
    1038:	02310231 	.word	0x02310231
    103c:	02310231 	.word	0x02310231
    1040:	02310231 	.word	0x02310231
    1044:	02310231 	.word	0x02310231
    1048:	02310231 	.word	0x02310231
    104c:	02310231 	.word	0x02310231
    1050:	02310231 	.word	0x02310231
    1054:	02310231 	.word	0x02310231
    1058:	02310231 	.word	0x02310231
    105c:	02310231 	.word	0x02310231
    1060:	02310231 	.word	0x02310231
    1064:	02310231 	.word	0x02310231
    1068:	02310231 	.word	0x02310231
    106c:	02310231 	.word	0x02310231
    1070:	02310231 	.word	0x02310231
    1074:	02310231 	.word	0x02310231
    1078:	02310231 	.word	0x02310231
    107c:	02310231 	.word	0x02310231
    1080:	023101c7 	.word	0x023101c7
    1084:	02310231 	.word	0x02310231
    1088:	02310231 	.word	0x02310231
    108c:	02310231 	.word	0x02310231
    1090:	02310231 	.word	0x02310231
    1094:	01a10231 	.word	0x01a10231
    1098:	023101ab 	.word	0x023101ab
    109c:	02310231 	.word	0x02310231
    10a0:	01ab0231 	.word	0x01ab0231
    10a4:	02310231 	.word	0x02310231
    10a8:	02310231 	.word	0x02310231
    10ac:	01c70208 	.word	0x01c70208
    10b0:	023101ea 	.word	0x023101ea
    10b4:	018f0231 	.word	0x018f0231
    10b8:	01c70231 	.word	0x01c70231
    10bc:	02310231 	.word	0x02310231
    10c0:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    10c2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    10c6:	2102      	movs	r1, #2
    10c8:	f361 0202 	bfi	r2, r1, #0, #3
    10cc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    10d0:	e74e      	b.n	f70 <cbvprintf+0x384>
			conv->invalid = true;
    10d2:	f89d 1020 	ldrb.w	r1, [sp, #32]
    10d6:	f041 0101 	orr.w	r1, r1, #1
    10da:	f88d 1020 	strb.w	r1, [sp, #32]
    10de:	e74e      	b.n	f7e <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    10e0:	1e17      	subs	r7, r2, #0
    10e2:	bf18      	it	ne
    10e4:	2701      	movne	r7, #1
    10e6:	e74d      	b.n	f84 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    10e8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10ec:	2204      	movs	r2, #4
    10ee:	f362 0302 	bfi	r3, r2, #0, #3
    10f2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    10f6:	2701      	movs	r7, #1
			break;
    10f8:	e744      	b.n	f84 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    10fa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10fe:	2203      	movs	r2, #3
    1100:	f362 0302 	bfi	r3, r2, #0, #3
    1104:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    1108:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    110c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1110:	2b40      	cmp	r3, #64	; 0x40
    1112:	f47f af37 	bne.w	f84 <cbvprintf+0x398>
			unsupported = true;
    1116:	2701      	movs	r7, #1
    1118:	e734      	b.n	f84 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    111a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    111e:	2203      	movs	r2, #3
    1120:	f362 0302 	bfi	r3, r2, #0, #3
    1124:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    1128:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    112c:	f013 0f78 	tst.w	r3, #120	; 0x78
    1130:	f43f af28 	beq.w	f84 <cbvprintf+0x398>
			unsupported = true;
    1134:	2701      	movs	r7, #1
    1136:	e725      	b.n	f84 <cbvprintf+0x398>
		conv->invalid = true;
    1138:	f89d 3020 	ldrb.w	r3, [sp, #32]
    113c:	f043 0301 	orr.w	r3, r3, #1
    1140:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    1144:	e71e      	b.n	f84 <cbvprintf+0x398>
				conv->flag_dash = true;
    1146:	f89d 3020 	ldrb.w	r3, [sp, #32]
    114a:	f043 0304 	orr.w	r3, r3, #4
    114e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    1152:	427f      	negs	r7, r7
    1154:	e72c      	b.n	fb0 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    1156:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    115a:	2b00      	cmp	r3, #0
    115c:	db02      	blt.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
		int width = -1;
    115e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1162:	e725      	b.n	fb0 <cbvprintf+0x3c4>
			width = conv->width_value;
    1164:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1166:	e723      	b.n	fb0 <cbvprintf+0x3c4>
				conv->prec_present = false;
    1168:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    116c:	f36f 0341 	bfc	r3, #1, #1
    1170:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    1174:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    1178:	e729      	b.n	fce <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    117a:	f013 0f02 	tst.w	r3, #2
    117e:	d002      	beq.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
			precision = conv->prec_value;
    1180:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    1184:	e723      	b.n	fce <cbvprintf+0x3e2>
		int precision = -1;
    1186:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    118a:	e720      	b.n	fce <cbvprintf+0x3e2>
			switch (length_mod) {
    118c:	1ecb      	subs	r3, r1, #3
    118e:	2b04      	cmp	r3, #4
    1190:	d804      	bhi.n	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    1192:	e8df f003 	tbb	[pc, r3]
    1196:	1d0b      	.short	0x1d0b
    1198:	3529      	.short	0x3529
    119a:	35          	.byte	0x35
    119b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    119c:	9b03      	ldr	r3, [sp, #12]
    119e:	1d1a      	adds	r2, r3, #4
    11a0:	9203      	str	r2, [sp, #12]
    11a2:	681a      	ldr	r2, [r3, #0]
    11a4:	17d3      	asrs	r3, r2, #31
    11a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    11aa:	e006      	b.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
					value->sint = va_arg(ap, long);
    11ac:	9b03      	ldr	r3, [sp, #12]
    11ae:	1d1a      	adds	r2, r3, #4
    11b0:	9203      	str	r2, [sp, #12]
    11b2:	681a      	ldr	r2, [r3, #0]
    11b4:	17d3      	asrs	r3, r2, #31
    11b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    11ba:	2901      	cmp	r1, #1
    11bc:	d028      	beq.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
			} else if (length_mod == LENGTH_H) {
    11be:	2902      	cmp	r1, #2
    11c0:	f47f af1c 	bne.w	ffc <cbvprintf+0x410>
				value->sint = (short)value->sint;
    11c4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    11c8:	17d3      	asrs	r3, r2, #31
    11ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    11ce:	e715      	b.n	ffc <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    11d0:	9b03      	ldr	r3, [sp, #12]
    11d2:	3307      	adds	r3, #7
    11d4:	f023 0307 	bic.w	r3, r3, #7
    11d8:	f103 0208 	add.w	r2, r3, #8
    11dc:	9203      	str	r2, [sp, #12]
    11de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    11e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    11e6:	e7e8      	b.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
					(sint_value_type)va_arg(ap, intmax_t);
    11e8:	9b03      	ldr	r3, [sp, #12]
    11ea:	3307      	adds	r3, #7
    11ec:	f023 0307 	bic.w	r3, r3, #7
    11f0:	f103 0208 	add.w	r2, r3, #8
    11f4:	9203      	str	r2, [sp, #12]
    11f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    11fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    11fe:	e7dc      	b.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1200:	9b03      	ldr	r3, [sp, #12]
    1202:	1d1a      	adds	r2, r3, #4
    1204:	9203      	str	r2, [sp, #12]
    1206:	681a      	ldr	r2, [r3, #0]
    1208:	17d3      	asrs	r3, r2, #31
				value->sint =
    120a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    120e:	e7d4      	b.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
				value->sint = (char)value->sint;
    1210:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1214:	9306      	str	r3, [sp, #24]
    1216:	2300      	movs	r3, #0
    1218:	9307      	str	r3, [sp, #28]
    121a:	e6ef      	b.n	ffc <cbvprintf+0x410>
			switch (length_mod) {
    121c:	1ecb      	subs	r3, r1, #3
    121e:	2b04      	cmp	r3, #4
    1220:	d804      	bhi.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    1222:	e8df f003 	tbb	[pc, r3]
    1226:	1f0b      	.short	0x1f0b
    1228:	4135      	.short	0x4135
    122a:	41          	.byte	0x41
    122b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    122c:	9b03      	ldr	r3, [sp, #12]
    122e:	1d1a      	adds	r2, r3, #4
    1230:	9203      	str	r2, [sp, #12]
    1232:	681b      	ldr	r3, [r3, #0]
    1234:	9306      	str	r3, [sp, #24]
    1236:	2300      	movs	r3, #0
    1238:	9307      	str	r3, [sp, #28]
				break;
    123a:	e01e      	b.n	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
				    && (conv->specifier == 'c')) {
    123c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    1240:	2b63      	cmp	r3, #99	; 0x63
    1242:	d007      	beq.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
					value->uint = va_arg(ap, unsigned long);
    1244:	9b03      	ldr	r3, [sp, #12]
    1246:	1d1a      	adds	r2, r3, #4
    1248:	9203      	str	r2, [sp, #12]
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	9306      	str	r3, [sp, #24]
    124e:	2300      	movs	r3, #0
    1250:	9307      	str	r3, [sp, #28]
    1252:	e012      	b.n	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
					value->uint = (wchar_t)va_arg(ap,
    1254:	9b03      	ldr	r3, [sp, #12]
    1256:	1d1a      	adds	r2, r3, #4
    1258:	9203      	str	r2, [sp, #12]
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	9306      	str	r3, [sp, #24]
    125e:	2300      	movs	r3, #0
    1260:	9307      	str	r3, [sp, #28]
    1262:	e00a      	b.n	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
					(uint_value_type)va_arg(ap,
    1264:	9b03      	ldr	r3, [sp, #12]
    1266:	3307      	adds	r3, #7
    1268:	f023 0307 	bic.w	r3, r3, #7
    126c:	f103 0208 	add.w	r2, r3, #8
    1270:	9203      	str	r2, [sp, #12]
    1272:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1276:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    127a:	2901      	cmp	r1, #1
    127c:	d01c      	beq.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
			} else if (length_mod == LENGTH_H) {
    127e:	2902      	cmp	r1, #2
    1280:	f47f aebc 	bne.w	ffc <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    1284:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1288:	9306      	str	r3, [sp, #24]
    128a:	2300      	movs	r3, #0
    128c:	9307      	str	r3, [sp, #28]
    128e:	e6b5      	b.n	ffc <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    1290:	9b03      	ldr	r3, [sp, #12]
    1292:	3307      	adds	r3, #7
    1294:	f023 0307 	bic.w	r3, r3, #7
    1298:	f103 0208 	add.w	r2, r3, #8
    129c:	9203      	str	r2, [sp, #12]
    129e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    12a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    12a6:	e7e8      	b.n	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
					(uint_value_type)va_arg(ap, size_t);
    12a8:	9b03      	ldr	r3, [sp, #12]
    12aa:	1d1a      	adds	r2, r3, #4
    12ac:	9203      	str	r2, [sp, #12]
    12ae:	681b      	ldr	r3, [r3, #0]
				value->uint =
    12b0:	9306      	str	r3, [sp, #24]
    12b2:	2300      	movs	r3, #0
    12b4:	9307      	str	r3, [sp, #28]
				break;
    12b6:	e7e0      	b.n	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
				value->uint = (unsigned char)value->uint;
    12b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    12bc:	9306      	str	r3, [sp, #24]
    12be:	2300      	movs	r3, #0
    12c0:	9307      	str	r3, [sp, #28]
    12c2:	e69b      	b.n	ffc <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    12c4:	2908      	cmp	r1, #8
    12c6:	d00b      	beq.n	12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
				value->dbl = va_arg(ap, double);
    12c8:	9b03      	ldr	r3, [sp, #12]
    12ca:	3307      	adds	r3, #7
    12cc:	f023 0307 	bic.w	r3, r3, #7
    12d0:	f103 0208 	add.w	r2, r3, #8
    12d4:	9203      	str	r2, [sp, #12]
    12d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12da:	e9cd 2306 	strd	r2, r3, [sp, #24]
    12de:	e68d      	b.n	ffc <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    12e0:	9b03      	ldr	r3, [sp, #12]
    12e2:	3307      	adds	r3, #7
    12e4:	f023 0307 	bic.w	r3, r3, #7
    12e8:	f103 0208 	add.w	r2, r3, #8
    12ec:	9203      	str	r2, [sp, #12]
    12ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    12f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    12f6:	e681      	b.n	ffc <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    12f8:	9b03      	ldr	r3, [sp, #12]
    12fa:	1d1a      	adds	r2, r3, #4
    12fc:	9203      	str	r2, [sp, #12]
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	9306      	str	r3, [sp, #24]
    1302:	e67b      	b.n	ffc <cbvprintf+0x410>
			OUTS(sp, fp);
    1304:	4643      	mov	r3, r8
    1306:	4652      	mov	r2, sl
    1308:	4629      	mov	r1, r5
    130a:	4630      	mov	r0, r6
    130c:	f006 ff89 	bl	8222 <outs>
    1310:	2800      	cmp	r0, #0
    1312:	f2c0 814f 	blt.w	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    1316:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1318:	46c2      	mov	sl, r8
			continue;
    131a:	e46f      	b.n	bfc <cbvprintf+0x10>
		case '%':
			OUTC('%');
    131c:	4629      	mov	r1, r5
    131e:	2025      	movs	r0, #37	; 0x25
    1320:	47b0      	blx	r6
    1322:	2800      	cmp	r0, #0
    1324:	f2c0 8146 	blt.w	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    1328:	3401      	adds	r4, #1
		char sign = 0;
    132a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    132e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    1332:	f04f 0a00 	mov.w	sl, #0
			break;
    1336:	e0a7      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
		case 's': {
			bps = (const char *)value->ptr;
    1338:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    133c:	f1bb 0f00 	cmp.w	fp, #0
    1340:	db08      	blt.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
				len = strnlen(bps, precision);
    1342:	4659      	mov	r1, fp
    1344:	4650      	mov	r0, sl
    1346:	f007 f863 	bl	8410 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    134a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    134e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    1352:	e099      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
				len = strlen(bps);
    1354:	4650      	mov	r0, sl
    1356:	f007 f853 	bl	8400 <strlen>
    135a:	e7f6      	b.n	134a <CONFIG_FPROTECT_BLOCK_SIZE+0x34a>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    135c:	9b06      	ldr	r3, [sp, #24]
    135e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    1362:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    1366:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    136a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    136e:	e08b      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1370:	f019 0f08 	tst.w	r9, #8
    1374:	d105      	bne.n	1382 <CONFIG_FPROTECT_BLOCK_SIZE+0x382>
				sign = '+';
			} else if (conv->flag_space) {
    1376:	f019 0910 	ands.w	r9, r9, #16
    137a:	d004      	beq.n	1386 <CONFIG_FPROTECT_BLOCK_SIZE+0x386>
				sign = ' ';
    137c:	f04f 0920 	mov.w	r9, #32
    1380:	e001      	b.n	1386 <CONFIG_FPROTECT_BLOCK_SIZE+0x386>
				sign = '+';
    1382:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1386:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    138a:	2a00      	cmp	r2, #0
    138c:	f173 0100 	sbcs.w	r1, r3, #0
    1390:	db02      	blt.n	1398 <CONFIG_FPROTECT_BLOCK_SIZE+0x398>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1392:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1396:	e009      	b.n	13ac <CONFIG_FPROTECT_BLOCK_SIZE+0x3ac>
				value->uint = (uint_value_type)-sint;
    1398:	4252      	negs	r2, r2
    139a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    139e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    13a2:	f04f 092d 	mov.w	r9, #45	; 0x2d
    13a6:	e001      	b.n	13ac <CONFIG_FPROTECT_BLOCK_SIZE+0x3ac>
		switch (conv->specifier) {
    13a8:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    13ac:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    13b0:	9300      	str	r3, [sp, #0]
    13b2:	ab0c      	add	r3, sp, #48	; 0x30
    13b4:	aa08      	add	r2, sp, #32
    13b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    13ba:	f006 fec8 	bl	814e <encode_uint>
    13be:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    13c0:	f1bb 0f00 	cmp.w	fp, #0
    13c4:	f2c0 8090 	blt.w	14e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e8>
				size_t len = bpe - bps;
    13c8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    13cc:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    13d0:	f89d 2020 	ldrb.w	r2, [sp, #32]
    13d4:	f36f 1286 	bfc	r2, #6, #1
    13d8:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    13dc:	459b      	cmp	fp, r3
    13de:	f240 8086 	bls.w	14ee <CONFIG_FPROTECT_BLOCK_SIZE+0x4ee>
					conv->pad0_value = precision - (int)len;
    13e2:	ebab 0303 	sub.w	r3, fp, r3
    13e6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    13e8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    13ec:	e04c      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    13ee:	9806      	ldr	r0, [sp, #24]
    13f0:	b930      	cbnz	r0, 1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
		char sign = 0;
    13f2:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    13f6:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 15bc <CONFIG_FPROTECT_BLOCK_SIZE+0x5bc>
			bps = "(nil)";
    13fa:	f1ab 0a05 	sub.w	sl, fp, #5
    13fe:	e043      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1400:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1404:	9300      	str	r3, [sp, #0]
    1406:	ab0c      	add	r3, sp, #48	; 0x30
    1408:	aa08      	add	r2, sp, #32
    140a:	2100      	movs	r1, #0
    140c:	f006 fe9f 	bl	814e <encode_uint>
    1410:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1412:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1416:	f043 0310 	orr.w	r3, r3, #16
    141a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    141e:	2378      	movs	r3, #120	; 0x78
    1420:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    1424:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    1428:	e7ca      	b.n	13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    142a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    142c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1430:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1434:	2b07      	cmp	r3, #7
    1436:	d806      	bhi.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
    1438:	e8df f003 	tbb	[pc, r3]
    143c:	100e0c04 	.word	0x100e0c04
    1440:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    1444:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1446:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    144a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    144e:	f04f 0a00 	mov.w	sl, #0
}
    1452:	e019      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
		*(signed char *)dp = (signed char)count;
    1454:	7014      	strb	r4, [r2, #0]
		break;
    1456:	e7f6      	b.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
		*(short *)dp = (short)count;
    1458:	8014      	strh	r4, [r2, #0]
		break;
    145a:	e7f4      	b.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
		*(long *)dp = (long)count;
    145c:	6014      	str	r4, [r2, #0]
		break;
    145e:	e7f2      	b.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
		*(long long *)dp = (long long)count;
    1460:	4620      	mov	r0, r4
    1462:	17e1      	asrs	r1, r4, #31
    1464:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    1468:	e7ed      	b.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
		*(intmax_t *)dp = (intmax_t)count;
    146a:	4620      	mov	r0, r4
    146c:	17e1      	asrs	r1, r4, #31
    146e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    1472:	e7e8      	b.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
		*(size_t *)dp = (size_t)count;
    1474:	6014      	str	r4, [r2, #0]
		break;
    1476:	e7e6      	b.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1478:	6014      	str	r4, [r2, #0]
		break;
    147a:	e7e4      	b.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
		switch (conv->specifier) {
    147c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1480:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1484:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1488:	f1ba 0f00 	cmp.w	sl, #0
    148c:	f000 808e 	beq.w	15ac <CONFIG_FPROTECT_BLOCK_SIZE+0x5ac>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1490:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    1494:	f1b9 0f00 	cmp.w	r9, #0
    1498:	d000      	beq.n	149c <CONFIG_FPROTECT_BLOCK_SIZE+0x49c>
			nj_len += 1U;
    149a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    149c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    14a0:	f011 0f10 	tst.w	r1, #16
    14a4:	d026      	beq.n	14f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f4>
			nj_len += 2U;
    14a6:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    14a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14aa:	4413      	add	r3, r2
		if (conv->pad_fp) {
    14ac:	f011 0f40 	tst.w	r1, #64	; 0x40
    14b0:	d001      	beq.n	14b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b6>
			nj_len += conv->pad0_pre_exp;
    14b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    14b4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    14b6:	2f00      	cmp	r7, #0
    14b8:	dd32      	ble.n	1520 <CONFIG_FPROTECT_BLOCK_SIZE+0x520>
			width -= (int)nj_len;
    14ba:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    14bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    14c0:	f013 0f04 	tst.w	r3, #4
    14c4:	d12c      	bne.n	1520 <CONFIG_FPROTECT_BLOCK_SIZE+0x520>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    14c6:	f013 0f40 	tst.w	r3, #64	; 0x40
    14ca:	d018      	beq.n	14fe <CONFIG_FPROTECT_BLOCK_SIZE+0x4fe>
					if (sign != 0) {
    14cc:	f1b9 0f00 	cmp.w	r9, #0
    14d0:	d018      	beq.n	1504 <CONFIG_FPROTECT_BLOCK_SIZE+0x504>
						OUTC(sign);
    14d2:	4629      	mov	r1, r5
    14d4:	4648      	mov	r0, r9
    14d6:	47b0      	blx	r6
    14d8:	2800      	cmp	r0, #0
    14da:	db6b      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    14dc:	3401      	adds	r4, #1
						sign = 0;
    14de:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    14e2:	2330      	movs	r3, #48	; 0x30
    14e4:	9302      	str	r3, [sp, #8]
    14e6:	e00f      	b.n	1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>
		const char *bpe = buf + sizeof(buf);
    14e8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    14ec:	e7cc      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
    14ee:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    14f2:	e7c9      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
		} else if (conv->altform_0) {
    14f4:	f011 0f08 	tst.w	r1, #8
    14f8:	d0d6      	beq.n	14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>
			nj_len += 1U;
    14fa:	3201      	adds	r2, #1
    14fc:	e7d4      	b.n	14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>
				char pad = ' ';
    14fe:	2320      	movs	r3, #32
    1500:	9302      	str	r3, [sp, #8]
    1502:	e001      	b.n	1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>
					pad = '0';
    1504:	2330      	movs	r3, #48	; 0x30
    1506:	9302      	str	r3, [sp, #8]
    1508:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    150a:	1e5f      	subs	r7, r3, #1
    150c:	2b00      	cmp	r3, #0
    150e:	dd07      	ble.n	1520 <CONFIG_FPROTECT_BLOCK_SIZE+0x520>
					OUTC(pad);
    1510:	4629      	mov	r1, r5
    1512:	9802      	ldr	r0, [sp, #8]
    1514:	47b0      	blx	r6
    1516:	2800      	cmp	r0, #0
    1518:	db4c      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    151a:	3401      	adds	r4, #1
				while (width-- > 0) {
    151c:	463b      	mov	r3, r7
    151e:	e7f4      	b.n	150a <CONFIG_FPROTECT_BLOCK_SIZE+0x50a>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1520:	f1b9 0f00 	cmp.w	r9, #0
    1524:	d005      	beq.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
			OUTC(sign);
    1526:	4629      	mov	r1, r5
    1528:	4648      	mov	r0, r9
    152a:	47b0      	blx	r6
    152c:	2800      	cmp	r0, #0
    152e:	db41      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    1530:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1532:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1536:	f3c3 1200 	ubfx	r2, r3, #4, #1
    153a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    153e:	4313      	orrs	r3, r2
    1540:	d005      	beq.n	154e <CONFIG_FPROTECT_BLOCK_SIZE+0x54e>
				OUTC('0');
    1542:	4629      	mov	r1, r5
    1544:	2030      	movs	r0, #48	; 0x30
    1546:	47b0      	blx	r6
    1548:	2800      	cmp	r0, #0
    154a:	db33      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    154c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    154e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1552:	f013 0f10 	tst.w	r3, #16
    1556:	d006      	beq.n	1566 <CONFIG_FPROTECT_BLOCK_SIZE+0x566>
				OUTC(conv->specifier);
    1558:	4629      	mov	r1, r5
    155a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    155e:	47b0      	blx	r6
    1560:	2800      	cmp	r0, #0
    1562:	db27      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    1564:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1566:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    1568:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    156c:	2b00      	cmp	r3, #0
    156e:	dd07      	ble.n	1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
				OUTC('0');
    1570:	4629      	mov	r1, r5
    1572:	2030      	movs	r0, #48	; 0x30
    1574:	47b0      	blx	r6
    1576:	2800      	cmp	r0, #0
    1578:	db1c      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    157a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    157c:	464b      	mov	r3, r9
    157e:	e7f3      	b.n	1568 <CONFIG_FPROTECT_BLOCK_SIZE+0x568>
			}

			OUTS(bps, bpe);
    1580:	465b      	mov	r3, fp
    1582:	4652      	mov	r2, sl
    1584:	4629      	mov	r1, r5
    1586:	4630      	mov	r0, r6
    1588:	f006 fe4b 	bl	8222 <outs>
    158c:	2800      	cmp	r0, #0
    158e:	db11      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    1590:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1592:	2f00      	cmp	r7, #0
    1594:	dd07      	ble.n	15a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a6>
			OUTC(' ');
    1596:	4629      	mov	r1, r5
    1598:	2020      	movs	r0, #32
    159a:	47b0      	blx	r6
    159c:	2800      	cmp	r0, #0
    159e:	db09      	blt.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    15a0:	3401      	adds	r4, #1
			--width;
    15a2:	3f01      	subs	r7, #1
    15a4:	e7f5      	b.n	1592 <CONFIG_FPROTECT_BLOCK_SIZE+0x592>
		fp = extract_conversion(conv, sp);
    15a6:	46c2      	mov	sl, r8
    15a8:	f7ff bb28 	b.w	bfc <cbvprintf+0x10>
    15ac:	46c2      	mov	sl, r8
    15ae:	f7ff bb25 	b.w	bfc <cbvprintf+0x10>
		}
	}

	return count;
    15b2:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    15b4:	b013      	add	sp, #76	; 0x4c
    15b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ba:	bf00      	nop
    15bc:	0000921d 	.word	0x0000921d

000015c0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    15c0:	b508      	push	{r3, lr}
	__asm__ volatile(
    15c2:	f04f 0220 	mov.w	r2, #32
    15c6:	f3ef 8311 	mrs	r3, BASEPRI
    15ca:	f382 8812 	msr	BASEPRI_MAX, r2
    15ce:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    15d2:	f000 ff47 	bl	2464 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    15d6:	4803      	ldr	r0, [pc, #12]	; (15e4 <sys_reboot+0x24>)
    15d8:	f006 fce4 	bl	7fa4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    15dc:	f000 fa74 	bl	1ac8 <arch_cpu_idle>
    15e0:	e7fc      	b.n	15dc <sys_reboot+0x1c>
    15e2:	bf00      	nop
    15e4:	00009220 	.word	0x00009220

000015e8 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    15e8:	b570      	push	{r4, r5, r6, lr}
    15ea:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    15ec:	4b42      	ldr	r3, [pc, #264]	; (16f8 <pm_system_resume+0x110>)
    15ee:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    15f0:	f004 031f 	and.w	r3, r4, #31
    15f4:	2201      	movs	r2, #1
    15f6:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    15f8:	0961      	lsrs	r1, r4, #5
    15fa:	4b40      	ldr	r3, [pc, #256]	; (16fc <pm_system_resume+0x114>)
    15fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1600:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1602:	f3bf 8f5b 	dmb	ish
    1606:	e853 1f00 	ldrex	r1, [r3]
    160a:	ea01 0500 	and.w	r5, r1, r0
    160e:	e843 5600 	strex	r6, r5, [r3]
    1612:	2e00      	cmp	r6, #0
    1614:	d1f7      	bne.n	1606 <pm_system_resume+0x1e>
    1616:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    161a:	420a      	tst	r2, r1
    161c:	d05a      	beq.n	16d4 <pm_system_resume+0xec>
		exit_pos_ops(z_power_states[id]);
    161e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1622:	4a37      	ldr	r2, [pc, #220]	; (1700 <pm_system_resume+0x118>)
    1624:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    162c:	ab04      	add	r3, sp, #16
    162e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1632:	4b34      	ldr	r3, [pc, #208]	; (1704 <pm_system_resume+0x11c>)
    1634:	b19b      	cbz	r3, 165e <pm_system_resume+0x76>
		pm_power_state_exit_post_ops(info);
    1636:	f006 ff4c 	bl	84d2 <pm_power_state_exit_post_ops>
    163a:	f04f 0320 	mov.w	r3, #32
    163e:	f3ef 8611 	mrs	r6, BASEPRI
    1642:	f383 8812 	msr	BASEPRI_MAX, r3
    1646:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    164a:	482f      	ldr	r0, [pc, #188]	; (1708 <pm_system_resume+0x120>)
    164c:	f004 f816 	bl	567c <z_spin_lock_valid>
    1650:	b158      	cbz	r0, 166a <pm_system_resume+0x82>
	z_spin_lock_set_owner(l);
    1652:	482d      	ldr	r0, [pc, #180]	; (1708 <pm_system_resume+0x120>)
    1654:	f004 f832 	bl	56bc <z_spin_lock_set_owner>
	return list->head;
    1658:	4b2c      	ldr	r3, [pc, #176]	; (170c <pm_system_resume+0x124>)
    165a:	681d      	ldr	r5, [r3, #0]
    165c:	e01a      	b.n	1694 <pm_system_resume+0xac>
	__asm__ volatile(
    165e:	2300      	movs	r3, #0
    1660:	f383 8811 	msr	BASEPRI, r3
    1664:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1668:	e7e7      	b.n	163a <pm_system_resume+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    166a:	4d29      	ldr	r5, [pc, #164]	; (1710 <pm_system_resume+0x128>)
    166c:	2381      	movs	r3, #129	; 0x81
    166e:	462a      	mov	r2, r5
    1670:	4928      	ldr	r1, [pc, #160]	; (1714 <pm_system_resume+0x12c>)
    1672:	4829      	ldr	r0, [pc, #164]	; (1718 <pm_system_resume+0x130>)
    1674:	f006 fc96 	bl	7fa4 <printk>
    1678:	4923      	ldr	r1, [pc, #140]	; (1708 <pm_system_resume+0x120>)
    167a:	4828      	ldr	r0, [pc, #160]	; (171c <pm_system_resume+0x134>)
    167c:	f006 fc92 	bl	7fa4 <printk>
    1680:	2181      	movs	r1, #129	; 0x81
    1682:	4628      	mov	r0, r5
    1684:	f006 fde7 	bl	8256 <assert_post_action>
    1688:	e7e3      	b.n	1652 <pm_system_resume+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    168a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    168c:	b10d      	cbz	r5, 1692 <pm_system_resume+0xaa>
	return node->next;
    168e:	682b      	ldr	r3, [r5, #0]
    1690:	b16b      	cbz	r3, 16ae <pm_system_resume+0xc6>
{
    1692:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1694:	b15d      	cbz	r5, 16ae <pm_system_resume+0xc6>
			callback = notifier->state_exit;
    1696:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    1698:	2a00      	cmp	r2, #0
    169a:	d0f6      	beq.n	168a <pm_system_resume+0xa2>
			callback(z_power_states[_current_cpu->id].state);
    169c:	4b16      	ldr	r3, [pc, #88]	; (16f8 <pm_system_resume+0x110>)
    169e:	7d1b      	ldrb	r3, [r3, #20]
    16a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16a4:	4916      	ldr	r1, [pc, #88]	; (1700 <pm_system_resume+0x118>)
    16a6:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    16aa:	4790      	blx	r2
    16ac:	e7ed      	b.n	168a <pm_system_resume+0xa2>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    16ae:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    16b0:	4815      	ldr	r0, [pc, #84]	; (1708 <pm_system_resume+0x120>)
    16b2:	f003 fff3 	bl	569c <z_spin_unlock_valid>
    16b6:	b178      	cbz	r0, 16d8 <pm_system_resume+0xf0>
	__asm__ volatile(
    16b8:	f385 8811 	msr	BASEPRI, r5
    16bc:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    16c0:	4a0f      	ldr	r2, [pc, #60]	; (1700 <pm_system_resume+0x118>)
    16c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    16c6:	00a1      	lsls	r1, r4, #2
    16c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    16cc:	2300      	movs	r3, #0
    16ce:	5053      	str	r3, [r2, r1]
    16d0:	6063      	str	r3, [r4, #4]
    16d2:	60a3      	str	r3, [r4, #8]
			0, 0};
	}
}
    16d4:	b004      	add	sp, #16
    16d6:	bd70      	pop	{r4, r5, r6, pc}
    16d8:	4e0d      	ldr	r6, [pc, #52]	; (1710 <pm_system_resume+0x128>)
    16da:	23ac      	movs	r3, #172	; 0xac
    16dc:	4632      	mov	r2, r6
    16de:	4910      	ldr	r1, [pc, #64]	; (1720 <pm_system_resume+0x138>)
    16e0:	480d      	ldr	r0, [pc, #52]	; (1718 <pm_system_resume+0x130>)
    16e2:	f006 fc5f 	bl	7fa4 <printk>
    16e6:	4908      	ldr	r1, [pc, #32]	; (1708 <pm_system_resume+0x120>)
    16e8:	480e      	ldr	r0, [pc, #56]	; (1724 <pm_system_resume+0x13c>)
    16ea:	f006 fc5b 	bl	7fa4 <printk>
    16ee:	21ac      	movs	r1, #172	; 0xac
    16f0:	4630      	mov	r0, r6
    16f2:	f006 fdb0 	bl	8256 <assert_post_action>
    16f6:	e7df      	b.n	16b8 <pm_system_resume+0xd0>
    16f8:	20000fa8 	.word	0x20000fa8
    16fc:	20000510 	.word	0x20000510
    1700:	20000514 	.word	0x20000514
    1704:	000084d3 	.word	0x000084d3
    1708:	20000504 	.word	0x20000504
    170c:	20000508 	.word	0x20000508
    1710:	00009190 	.word	0x00009190
    1714:	000091e8 	.word	0x000091e8
    1718:	00009078 	.word	0x00009078
    171c:	00009200 	.word	0x00009200
    1720:	000091b8 	.word	0x000091b8
    1724:	000091d0 	.word	0x000091d0

00001728 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1728:	b5f0      	push	{r4, r5, r6, r7, lr}
    172a:	b089      	sub	sp, #36	; 0x24
    172c:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    172e:	4b6b      	ldr	r3, [pc, #428]	; (18dc <pm_system_suspend+0x1b4>)
    1730:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1732:	f004 031f 	and.w	r3, r4, #31
    1736:	2201      	movs	r2, #1
    1738:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    173a:	0961      	lsrs	r1, r4, #5
    173c:	4b68      	ldr	r3, [pc, #416]	; (18e0 <pm_system_suspend+0x1b8>)
    173e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1742:	f3bf 8f5b 	dmb	ish
    1746:	e853 1f00 	ldrex	r1, [r3]
    174a:	ea41 0002 	orr.w	r0, r1, r2
    174e:	e843 0600 	strex	r6, r0, [r3]
    1752:	2e00      	cmp	r6, #0
    1754:	d1f7      	bne.n	1746 <pm_system_suspend+0x1e>
    1756:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    175a:	420a      	tst	r2, r1
    175c:	d01e      	beq.n	179c <pm_system_suspend+0x74>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    175e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1762:	4a60      	ldr	r2, [pc, #384]	; (18e4 <pm_system_suspend+0x1bc>)
    1764:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1768:	2b00      	cmp	r3, #0
    176a:	f000 80b5 	beq.w	18d8 <pm_system_suspend+0x1b0>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    176e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    1772:	d123      	bne.n	17bc <pm_system_suspend+0x94>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1774:	f004 fd46 	bl	6204 <k_sched_lock>
	__asm__ volatile(
    1778:	f04f 0320 	mov.w	r3, #32
    177c:	f3ef 8611 	mrs	r6, BASEPRI
    1780:	f383 8812 	msr	BASEPRI_MAX, r3
    1784:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1788:	4857      	ldr	r0, [pc, #348]	; (18e8 <pm_system_suspend+0x1c0>)
    178a:	f003 ff77 	bl	567c <z_spin_lock_valid>
    178e:	b358      	cbz	r0, 17e8 <pm_system_suspend+0xc0>
	z_spin_lock_set_owner(l);
    1790:	4855      	ldr	r0, [pc, #340]	; (18e8 <pm_system_suspend+0x1c0>)
    1792:	f003 ff93 	bl	56bc <z_spin_lock_set_owner>
	return list->head;
    1796:	4b55      	ldr	r3, [pc, #340]	; (18ec <pm_system_suspend+0x1c4>)
    1798:	681d      	ldr	r5, [r3, #0]
    179a:	e03a      	b.n	1812 <pm_system_suspend+0xea>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    179c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    17a0:	4b50      	ldr	r3, [pc, #320]	; (18e4 <pm_system_suspend+0x1bc>)
    17a2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    17a6:	466f      	mov	r7, sp
    17a8:	462a      	mov	r2, r5
    17aa:	4621      	mov	r1, r4
    17ac:	4638      	mov	r0, r7
    17ae:	f006 fd5a 	bl	8266 <pm_policy_next_state>
    17b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    17b6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    17ba:	e7d0      	b.n	175e <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    17bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    17c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    17c4:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    17c6:	0c59      	lsrs	r1, r3, #17
    17c8:	03d8      	lsls	r0, r3, #15
    17ca:	4e49      	ldr	r6, [pc, #292]	; (18f0 <pm_system_suspend+0x1c8>)
    17cc:	4a49      	ldr	r2, [pc, #292]	; (18f4 <pm_system_suspend+0x1cc>)
    17ce:	2300      	movs	r3, #0
    17d0:	1980      	adds	r0, r0, r6
    17d2:	f04f 0600 	mov.w	r6, #0
    17d6:	eb46 0101 	adc.w	r1, r6, r1
    17da:	f7fe fc91 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    17de:	2101      	movs	r1, #1
    17e0:	1a28      	subs	r0, r5, r0
    17e2:	f006 f837 	bl	7854 <z_set_timeout_expiry>
    17e6:	e7c5      	b.n	1774 <pm_system_suspend+0x4c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    17e8:	4d43      	ldr	r5, [pc, #268]	; (18f8 <pm_system_suspend+0x1d0>)
    17ea:	2381      	movs	r3, #129	; 0x81
    17ec:	462a      	mov	r2, r5
    17ee:	4943      	ldr	r1, [pc, #268]	; (18fc <pm_system_suspend+0x1d4>)
    17f0:	4843      	ldr	r0, [pc, #268]	; (1900 <pm_system_suspend+0x1d8>)
    17f2:	f006 fbd7 	bl	7fa4 <printk>
    17f6:	493c      	ldr	r1, [pc, #240]	; (18e8 <pm_system_suspend+0x1c0>)
    17f8:	4842      	ldr	r0, [pc, #264]	; (1904 <pm_system_suspend+0x1dc>)
    17fa:	f006 fbd3 	bl	7fa4 <printk>
    17fe:	2181      	movs	r1, #129	; 0x81
    1800:	4628      	mov	r0, r5
    1802:	f006 fd28 	bl	8256 <assert_post_action>
    1806:	e7c3      	b.n	1790 <pm_system_suspend+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1808:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    180a:	b10d      	cbz	r5, 1810 <pm_system_suspend+0xe8>
	return node->next;
    180c:	682b      	ldr	r3, [r5, #0]
    180e:	b16b      	cbz	r3, 182c <pm_system_suspend+0x104>
{
    1810:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1812:	b15d      	cbz	r5, 182c <pm_system_suspend+0x104>
			callback = notifier->state_entry;
    1814:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    1816:	2a00      	cmp	r2, #0
    1818:	d0f6      	beq.n	1808 <pm_system_suspend+0xe0>
			callback(z_power_states[_current_cpu->id].state);
    181a:	4b30      	ldr	r3, [pc, #192]	; (18dc <pm_system_suspend+0x1b4>)
    181c:	7d1b      	ldrb	r3, [r3, #20]
    181e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1822:	4930      	ldr	r1, [pc, #192]	; (18e4 <pm_system_suspend+0x1bc>)
    1824:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1828:	4790      	blx	r2
    182a:	e7ed      	b.n	1808 <pm_system_suspend+0xe0>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    182c:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    182e:	482e      	ldr	r0, [pc, #184]	; (18e8 <pm_system_suspend+0x1c0>)
    1830:	f003 ff34 	bl	569c <z_spin_unlock_valid>
    1834:	2800      	cmp	r0, #0
    1836:	d03f      	beq.n	18b8 <pm_system_suspend+0x190>
	__asm__ volatile(
    1838:	f385 8811 	msr	BASEPRI, r5
    183c:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1840:	f004 031f 	and.w	r3, r4, #31
    1844:	2101      	movs	r1, #1
    1846:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1848:	0963      	lsrs	r3, r4, #5
    184a:	4a2f      	ldr	r2, [pc, #188]	; (1908 <pm_system_suspend+0x1e0>)
    184c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1850:	f3bf 8f5b 	dmb	ish
    1854:	e853 2f00 	ldrex	r2, [r3]
    1858:	430a      	orrs	r2, r1
    185a:	e843 2000 	strex	r0, r2, [r3]
    185e:	2800      	cmp	r0, #0
    1860:	d1f8      	bne.n	1854 <pm_system_suspend+0x12c>
    1862:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    1866:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    186a:	4a1e      	ldr	r2, [pc, #120]	; (18e4 <pm_system_suspend+0x1bc>)
    186c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1870:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1874:	ab08      	add	r3, sp, #32
    1876:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    187a:	4b24      	ldr	r3, [pc, #144]	; (190c <pm_system_suspend+0x1e4>)
    187c:	b10b      	cbz	r3, 1882 <pm_system_suspend+0x15a>
		pm_power_state_set(info);
    187e:	f006 fe15 	bl	84ac <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1882:	f7ff feb1 	bl	15e8 <pm_system_resume>
	k_sched_unlock();
    1886:	f005 fa25 	bl	6cd4 <k_sched_unlock>
	bool ret = true;
    188a:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    188c:	f004 021f 	and.w	r2, r4, #31
    1890:	2301      	movs	r3, #1
    1892:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1894:	0964      	lsrs	r4, r4, #5
    1896:	4a12      	ldr	r2, [pc, #72]	; (18e0 <pm_system_suspend+0x1b8>)
    1898:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    189c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    189e:	f3bf 8f5b 	dmb	ish
    18a2:	e854 2f00 	ldrex	r2, [r4]
    18a6:	401a      	ands	r2, r3
    18a8:	e844 2100 	strex	r1, r2, [r4]
    18ac:	2900      	cmp	r1, #0
    18ae:	d1f8      	bne.n	18a2 <pm_system_suspend+0x17a>
    18b0:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    18b4:	b009      	add	sp, #36	; 0x24
    18b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18b8:	4e0f      	ldr	r6, [pc, #60]	; (18f8 <pm_system_suspend+0x1d0>)
    18ba:	23ac      	movs	r3, #172	; 0xac
    18bc:	4632      	mov	r2, r6
    18be:	4914      	ldr	r1, [pc, #80]	; (1910 <pm_system_suspend+0x1e8>)
    18c0:	480f      	ldr	r0, [pc, #60]	; (1900 <pm_system_suspend+0x1d8>)
    18c2:	f006 fb6f 	bl	7fa4 <printk>
    18c6:	4908      	ldr	r1, [pc, #32]	; (18e8 <pm_system_suspend+0x1c0>)
    18c8:	4812      	ldr	r0, [pc, #72]	; (1914 <pm_system_suspend+0x1ec>)
    18ca:	f006 fb6b 	bl	7fa4 <printk>
    18ce:	21ac      	movs	r1, #172	; 0xac
    18d0:	4630      	mov	r0, r6
    18d2:	f006 fcc0 	bl	8256 <assert_post_action>
    18d6:	e7af      	b.n	1838 <pm_system_suspend+0x110>
		ret = false;
    18d8:	2000      	movs	r0, #0
    18da:	e7d7      	b.n	188c <pm_system_suspend+0x164>
    18dc:	20000fa8 	.word	0x20000fa8
    18e0:	20000520 	.word	0x20000520
    18e4:	20000514 	.word	0x20000514
    18e8:	20000504 	.word	0x20000504
    18ec:	20000508 	.word	0x20000508
    18f0:	000f423f 	.word	0x000f423f
    18f4:	000f4240 	.word	0x000f4240
    18f8:	00009190 	.word	0x00009190
    18fc:	000091e8 	.word	0x000091e8
    1900:	00009078 	.word	0x00009078
    1904:	00009200 	.word	0x00009200
    1908:	20000510 	.word	0x20000510
    190c:	000084ad 	.word	0x000084ad
    1910:	000091b8 	.word	0x000091b8
    1914:	000091d0 	.word	0x000091d0

00001918 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1918:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    191a:	4802      	ldr	r0, [pc, #8]	; (1924 <nrf_cc3xx_platform_abort_init+0xc>)
    191c:	f006 f97e 	bl	7c1c <nrf_cc3xx_platform_set_abort>
}
    1920:	bd08      	pop	{r3, pc}
    1922:	bf00      	nop
    1924:	0000924c 	.word	0x0000924c

00001928 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1928:	b1d0      	cbz	r0, 1960 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    192a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    192c:	6842      	ldr	r2, [r0, #4]
    192e:	2a04      	cmp	r2, #4
    1930:	d005      	beq.n	193e <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1932:	b1d2      	cbz	r2, 196a <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1934:	6800      	ldr	r0, [r0, #0]
    1936:	f004 f9b5 	bl	5ca4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    193a:	2000      	movs	r0, #0
    }
}
    193c:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    193e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1940:	2200      	movs	r2, #0
    1942:	f3bf 8f5b 	dmb	ish
    1946:	e853 1f00 	ldrex	r1, [r3]
    194a:	2901      	cmp	r1, #1
    194c:	d103      	bne.n	1956 <mutex_unlock_platform+0x2e>
    194e:	e843 2000 	strex	r0, r2, [r3]
    1952:	2800      	cmp	r0, #0
    1954:	d1f7      	bne.n	1946 <mutex_unlock_platform+0x1e>
    1956:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    195a:	d104      	bne.n	1966 <mutex_unlock_platform+0x3e>
    195c:	4610      	mov	r0, r2
    195e:	e7ed      	b.n	193c <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1960:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1964:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1966:	4802      	ldr	r0, [pc, #8]	; (1970 <mutex_unlock_platform+0x48>)
    1968:	e7e8      	b.n	193c <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    196a:	4802      	ldr	r0, [pc, #8]	; (1974 <mutex_unlock_platform+0x4c>)
    196c:	e7e6      	b.n	193c <mutex_unlock_platform+0x14>
    196e:	bf00      	nop
    1970:	ffff8fe9 	.word	0xffff8fe9
    1974:	ffff8fea 	.word	0xffff8fea

00001978 <mutex_lock_platform>:
    if(mutex == NULL) {
    1978:	b320      	cbz	r0, 19c4 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    197a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    197c:	6842      	ldr	r2, [r0, #4]
    197e:	2a04      	cmp	r2, #4
    1980:	d002      	beq.n	1988 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1982:	b992      	cbnz	r2, 19aa <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1984:	4811      	ldr	r0, [pc, #68]	; (19cc <mutex_lock_platform+0x54>)
    1986:	e00f      	b.n	19a8 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1988:	6803      	ldr	r3, [r0, #0]
    198a:	2201      	movs	r2, #1
    198c:	f3bf 8f5b 	dmb	ish
    1990:	e853 1f00 	ldrex	r1, [r3]
    1994:	2900      	cmp	r1, #0
    1996:	d103      	bne.n	19a0 <mutex_lock_platform+0x28>
    1998:	e843 2000 	strex	r0, r2, [r3]
    199c:	2800      	cmp	r0, #0
    199e:	d1f7      	bne.n	1990 <mutex_lock_platform+0x18>
    19a0:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    19a4:	d10c      	bne.n	19c0 <mutex_lock_platform+0x48>
    19a6:	2000      	movs	r0, #0
}
    19a8:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    19aa:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    19ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    19b4:	f004 f856 	bl	5a64 <z_impl_k_mutex_lock>
        if (ret == 0) {
    19b8:	2800      	cmp	r0, #0
    19ba:	d0f5      	beq.n	19a8 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    19bc:	4804      	ldr	r0, [pc, #16]	; (19d0 <mutex_lock_platform+0x58>)
    19be:	e7f3      	b.n	19a8 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    19c0:	4803      	ldr	r0, [pc, #12]	; (19d0 <mutex_lock_platform+0x58>)
    19c2:	e7f1      	b.n	19a8 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    19c4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	ffff8fea 	.word	0xffff8fea
    19d0:	ffff8fe9 	.word	0xffff8fe9

000019d4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    19d4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    19d6:	4604      	mov	r4, r0
    19d8:	b188      	cbz	r0, 19fe <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    19da:	6863      	ldr	r3, [r4, #4]
    19dc:	2b04      	cmp	r3, #4
    19de:	d00d      	beq.n	19fc <mutex_free_platform+0x28>
    19e0:	2b08      	cmp	r3, #8
    19e2:	d00b      	beq.n	19fc <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    19e4:	b153      	cbz	r3, 19fc <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    19e6:	f013 0f02 	tst.w	r3, #2
    19ea:	d00d      	beq.n	1a08 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    19ec:	4621      	mov	r1, r4
    19ee:	4809      	ldr	r0, [pc, #36]	; (1a14 <mutex_free_platform+0x40>)
    19f0:	f003 fdca 	bl	5588 <k_mem_slab_free>
        mutex->mutex = NULL;
    19f4:	2300      	movs	r3, #0
    19f6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    19f8:	2300      	movs	r3, #0
    19fa:	6063      	str	r3, [r4, #4]
}
    19fc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    19fe:	4b06      	ldr	r3, [pc, #24]	; (1a18 <mutex_free_platform+0x44>)
    1a00:	685b      	ldr	r3, [r3, #4]
    1a02:	4806      	ldr	r0, [pc, #24]	; (1a1c <mutex_free_platform+0x48>)
    1a04:	4798      	blx	r3
    1a06:	e7e8      	b.n	19da <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1a08:	2214      	movs	r2, #20
    1a0a:	2100      	movs	r1, #0
    1a0c:	6820      	ldr	r0, [r4, #0]
    1a0e:	f006 fd2d 	bl	846c <memset>
    1a12:	e7f1      	b.n	19f8 <mutex_free_platform+0x24>
    1a14:	20000524 	.word	0x20000524
    1a18:	200000e0 	.word	0x200000e0
    1a1c:	00009254 	.word	0x00009254

00001a20 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1a20:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1a22:	4604      	mov	r4, r0
    1a24:	b178      	cbz	r0, 1a46 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1a26:	6863      	ldr	r3, [r4, #4]
    1a28:	2b04      	cmp	r3, #4
    1a2a:	d00b      	beq.n	1a44 <mutex_init_platform+0x24>
    1a2c:	2b08      	cmp	r3, #8
    1a2e:	d009      	beq.n	1a44 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1a30:	b90b      	cbnz	r3, 1a36 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    1a32:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1a34:	b163      	cbz	r3, 1a50 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1a36:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1a38:	f007 f905 	bl	8c46 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1a3c:	6863      	ldr	r3, [r4, #4]
    1a3e:	f043 0301 	orr.w	r3, r3, #1
    1a42:	6063      	str	r3, [r4, #4]
}
    1a44:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1a46:	4b0f      	ldr	r3, [pc, #60]	; (1a84 <mutex_init_platform+0x64>)
    1a48:	685b      	ldr	r3, [r3, #4]
    1a4a:	480f      	ldr	r0, [pc, #60]	; (1a88 <mutex_init_platform+0x68>)
    1a4c:	4798      	blx	r3
    1a4e:	e7ea      	b.n	1a26 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1a58:	4621      	mov	r1, r4
    1a5a:	480c      	ldr	r0, [pc, #48]	; (1a8c <mutex_init_platform+0x6c>)
    1a5c:	f003 fd20 	bl	54a0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1a60:	b908      	cbnz	r0, 1a66 <mutex_init_platform+0x46>
    1a62:	6823      	ldr	r3, [r4, #0]
    1a64:	b91b      	cbnz	r3, 1a6e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1a66:	4b07      	ldr	r3, [pc, #28]	; (1a84 <mutex_init_platform+0x64>)
    1a68:	685b      	ldr	r3, [r3, #4]
    1a6a:	4809      	ldr	r0, [pc, #36]	; (1a90 <mutex_init_platform+0x70>)
    1a6c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1a6e:	2214      	movs	r2, #20
    1a70:	2100      	movs	r1, #0
    1a72:	6820      	ldr	r0, [r4, #0]
    1a74:	f006 fcfa 	bl	846c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1a78:	6863      	ldr	r3, [r4, #4]
    1a7a:	f043 0302 	orr.w	r3, r3, #2
    1a7e:	6063      	str	r3, [r4, #4]
    1a80:	e7d9      	b.n	1a36 <mutex_init_platform+0x16>
    1a82:	bf00      	nop
    1a84:	200000e0 	.word	0x200000e0
    1a88:	00009254 	.word	0x00009254
    1a8c:	20000524 	.word	0x20000524
    1a90:	0000927c 	.word	0x0000927c

00001a94 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1a94:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1a96:	2340      	movs	r3, #64	; 0x40
    1a98:	2214      	movs	r2, #20
    1a9a:	4904      	ldr	r1, [pc, #16]	; (1aac <nrf_cc3xx_platform_mutex_init+0x18>)
    1a9c:	4804      	ldr	r0, [pc, #16]	; (1ab0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1a9e:	f007 f880 	bl	8ba2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1aa2:	4904      	ldr	r1, [pc, #16]	; (1ab4 <nrf_cc3xx_platform_mutex_init+0x20>)
    1aa4:	4804      	ldr	r0, [pc, #16]	; (1ab8 <nrf_cc3xx_platform_mutex_init+0x24>)
    1aa6:	f006 f91b 	bl	7ce0 <nrf_cc3xx_platform_set_mutexes>
}
    1aaa:	bd08      	pop	{r3, pc}
    1aac:	20000544 	.word	0x20000544
    1ab0:	20000524 	.word	0x20000524
    1ab4:	000092bc 	.word	0x000092bc
    1ab8:	000092ac 	.word	0x000092ac

00001abc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1abc:	4901      	ldr	r1, [pc, #4]	; (1ac4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1abe:	2210      	movs	r2, #16
	str	r2, [r1]
    1ac0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1ac2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1ac4:	e000ed10 	.word	0xe000ed10

00001ac8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1ac8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1aca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1acc:	f380 8811 	msr	BASEPRI, r0
	isb
    1ad0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1ad4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1ad8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1ada:	b662      	cpsie	i
	isb
    1adc:	f3bf 8f6f 	isb	sy

	bx	lr
    1ae0:	4770      	bx	lr
    1ae2:	bf00      	nop

00001ae4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1ae4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1ae6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1ae8:	f381 8811 	msr	BASEPRI, r1

	wfe
    1aec:	bf20      	wfe

	msr	BASEPRI, r0
    1aee:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1af2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop

00001af8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1af8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1afa:	2b00      	cmp	r3, #0
    1afc:	db08      	blt.n	1b10 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1afe:	f000 001f 	and.w	r0, r0, #31
    1b02:	095b      	lsrs	r3, r3, #5
    1b04:	2201      	movs	r2, #1
    1b06:	fa02 f000 	lsl.w	r0, r2, r0
    1b0a:	4a02      	ldr	r2, [pc, #8]	; (1b14 <arch_irq_enable+0x1c>)
    1b0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1b10:	4770      	bx	lr
    1b12:	bf00      	nop
    1b14:	e000e100 	.word	0xe000e100

00001b18 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1b18:	0942      	lsrs	r2, r0, #5
    1b1a:	4b05      	ldr	r3, [pc, #20]	; (1b30 <arch_irq_is_enabled+0x18>)
    1b1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b20:	f000 001f 	and.w	r0, r0, #31
    1b24:	2301      	movs	r3, #1
    1b26:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b2a:	4010      	ands	r0, r2
    1b2c:	4770      	bx	lr
    1b2e:	bf00      	nop
    1b30:	e000e100 	.word	0xe000e100

00001b34 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b36:	4605      	mov	r5, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1b38:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1b3a:	2c07      	cmp	r4, #7
    1b3c:	d80b      	bhi.n	1b56 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b3e:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b40:	2b00      	cmp	r3, #0
    1b42:	db1b      	blt.n	1b7c <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b44:	0164      	lsls	r4, r4, #5
    1b46:	b2e4      	uxtb	r4, r4
    1b48:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1b4c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1b50:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
    1b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b56:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1b58:	4f0c      	ldr	r7, [pc, #48]	; (1b8c <z_arm_irq_priority_set+0x58>)
    1b5a:	2359      	movs	r3, #89	; 0x59
    1b5c:	463a      	mov	r2, r7
    1b5e:	490c      	ldr	r1, [pc, #48]	; (1b90 <z_arm_irq_priority_set+0x5c>)
    1b60:	480c      	ldr	r0, [pc, #48]	; (1b94 <z_arm_irq_priority_set+0x60>)
    1b62:	f006 fa1f 	bl	7fa4 <printk>
    1b66:	2307      	movs	r3, #7
    1b68:	462a      	mov	r2, r5
    1b6a:	4631      	mov	r1, r6
    1b6c:	480a      	ldr	r0, [pc, #40]	; (1b98 <z_arm_irq_priority_set+0x64>)
    1b6e:	f006 fa19 	bl	7fa4 <printk>
    1b72:	2159      	movs	r1, #89	; 0x59
    1b74:	4638      	mov	r0, r7
    1b76:	f006 fb6e 	bl	8256 <assert_post_action>
    1b7a:	e7e0      	b.n	1b3e <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b7c:	f005 050f 	and.w	r5, r5, #15
    1b80:	0164      	lsls	r4, r4, #5
    1b82:	b2e4      	uxtb	r4, r4
    1b84:	4b05      	ldr	r3, [pc, #20]	; (1b9c <z_arm_irq_priority_set+0x68>)
    1b86:	555c      	strb	r4, [r3, r5]
}
    1b88:	e7e4      	b.n	1b54 <z_arm_irq_priority_set+0x20>
    1b8a:	bf00      	nop
    1b8c:	000092d0 	.word	0x000092d0
    1b90:	00009308 	.word	0x00009308
    1b94:	00009078 	.word	0x00009078
    1b98:	00009324 	.word	0x00009324
    1b9c:	e000ed14 	.word	0xe000ed14

00001ba0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1ba0:	bf30      	wfi
    b z_SysNmiOnReset
    1ba2:	f7ff bffd 	b.w	1ba0 <z_SysNmiOnReset>
    1ba6:	bf00      	nop

00001ba8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1ba8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1baa:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <z_arm_prep_c+0x30>)
    1bac:	4a0b      	ldr	r2, [pc, #44]	; (1bdc <z_arm_prep_c+0x34>)
    1bae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1bb2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bb8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1bbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1bc0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1bc8:	f003 fbee 	bl	53a8 <z_bss_zero>
	z_data_copy();
    1bcc:	f005 fc38 	bl	7440 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1bd0:	f000 fa74 	bl	20bc <z_arm_interrupt_init>
	z_cstart();
    1bd4:	f003 fbf4 	bl	53c0 <z_cstart>
    1bd8:	e000ed00 	.word	0xe000ed00
    1bdc:	00000000 	.word	0x00000000

00001be0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1be0:	4a0a      	ldr	r2, [pc, #40]	; (1c0c <arch_swap+0x2c>)
    1be2:	6893      	ldr	r3, [r2, #8]
    1be4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1be8:	4909      	ldr	r1, [pc, #36]	; (1c10 <arch_swap+0x30>)
    1bea:	6809      	ldr	r1, [r1, #0]
    1bec:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1bf0:	4908      	ldr	r1, [pc, #32]	; (1c14 <arch_swap+0x34>)
    1bf2:	684b      	ldr	r3, [r1, #4]
    1bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1bf8:	604b      	str	r3, [r1, #4]
    1bfa:	2300      	movs	r3, #0
    1bfc:	f383 8811 	msr	BASEPRI, r3
    1c00:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1c04:	6893      	ldr	r3, [r2, #8]
}
    1c06:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    1c0a:	4770      	bx	lr
    1c0c:	20000fa8 	.word	0x20000fa8
    1c10:	00009a08 	.word	0x00009a08
    1c14:	e000ed00 	.word	0xe000ed00

00001c18 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1c18:	4913      	ldr	r1, [pc, #76]	; (1c68 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1c1a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1c1c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1c20:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1c22:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1c26:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1c2a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1c2c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1c30:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1c34:	4f0d      	ldr	r7, [pc, #52]	; (1c6c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1c36:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1c3a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1c3c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1c3e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1c40:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1c44:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1c46:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1c4a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1c4e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1c50:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1c52:	f000 fad5 	bl	2200 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1c56:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1c5a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1c5e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1c62:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1c66:	4770      	bx	lr
    ldr r1, =_kernel
    1c68:	20000fa8 	.word	0x20000fa8
    ldr v4, =_SCS_ICSR
    1c6c:	e000ed04 	.word	0xe000ed04

00001c70 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1c70:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1c74:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1c76:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1c7a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1c7e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1c80:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1c84:	2902      	cmp	r1, #2
    beq _oops
    1c86:	d0ff      	beq.n	1c88 <_oops>

00001c88 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1c88:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1c8a:	f006 faf9 	bl	8280 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1c8e:	bd01      	pop	{r0, pc}

00001c90 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1c90:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1c92:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1c96:	490d      	ldr	r1, [pc, #52]	; (1ccc <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1c98:	f021 0101 	bic.w	r1, r1, #1
    1c9c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1ca0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1caa:	9b02      	ldr	r3, [sp, #8]
    1cac:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1cb0:	9b03      	ldr	r3, [sp, #12]
    1cb2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1cba:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    1cbe:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1cc0:	2300      	movs	r3, #0
    1cc2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1cc6:	bc10      	pop	{r4}
    1cc8:	4770      	bx	lr
    1cca:	bf00      	nop
    1ccc:	00008115 	.word	0x00008115

00001cd0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1cd0:	4b16      	ldr	r3, [pc, #88]	; (1d2c <z_check_thread_stack_fail+0x5c>)
    1cd2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    1cd4:	b1da      	cbz	r2, 1d0e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1cd6:	f110 0f16 	cmn.w	r0, #22
    1cda:	d01a      	beq.n	1d12 <z_check_thread_stack_fail+0x42>
{
    1cdc:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1cde:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1ce2:	f1a3 0420 	sub.w	r4, r3, #32
    1ce6:	4284      	cmp	r4, r0
    1ce8:	d805      	bhi.n	1cf6 <z_check_thread_stack_fail+0x26>
    1cea:	4283      	cmp	r3, r0
    1cec:	d908      	bls.n	1d00 <z_check_thread_stack_fail+0x30>
    1cee:	428b      	cmp	r3, r1
    1cf0:	d808      	bhi.n	1d04 <z_check_thread_stack_fail+0x34>
    1cf2:	2100      	movs	r1, #0
    1cf4:	e000      	b.n	1cf8 <z_check_thread_stack_fail+0x28>
    1cf6:	2100      	movs	r1, #0
    1cf8:	b931      	cbnz	r1, 1d08 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1cfa:	2000      	movs	r0, #0
}
    1cfc:	bc10      	pop	{r4}
    1cfe:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1d00:	2100      	movs	r1, #0
    1d02:	e7f9      	b.n	1cf8 <z_check_thread_stack_fail+0x28>
    1d04:	2101      	movs	r1, #1
    1d06:	e7f7      	b.n	1cf8 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    1d08:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    1d0c:	e7f6      	b.n	1cfc <z_check_thread_stack_fail+0x2c>
		return 0;
    1d0e:	2000      	movs	r0, #0
    1d10:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1d12:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1d16:	428b      	cmp	r3, r1
    1d18:	bf94      	ite	ls
    1d1a:	2100      	movls	r1, #0
    1d1c:	2101      	movhi	r1, #1
    1d1e:	b909      	cbnz	r1, 1d24 <z_check_thread_stack_fail+0x54>
	return 0;
    1d20:	2000      	movs	r0, #0
}
    1d22:	4770      	bx	lr
		return thread->stack_info.start;
    1d24:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    1d28:	4770      	bx	lr
    1d2a:	bf00      	nop
    1d2c:	20000fa8 	.word	0x20000fa8

00001d30 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1d30:	b508      	push	{r3, lr}
    1d32:	460d      	mov	r5, r1
    1d34:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1d36:	4b08      	ldr	r3, [pc, #32]	; (1d58 <arch_switch_to_main_thread+0x28>)
    1d38:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1d3a:	f000 fa61 	bl	2200 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1d3e:	4620      	mov	r0, r4
    1d40:	f385 8809 	msr	PSP, r5
    1d44:	2100      	movs	r1, #0
    1d46:	b663      	cpsie	if
    1d48:	f381 8811 	msr	BASEPRI, r1
    1d4c:	f3bf 8f6f 	isb	sy
    1d50:	2200      	movs	r2, #0
    1d52:	2300      	movs	r3, #0
    1d54:	f006 f9de 	bl	8114 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1d58:	20000fa8 	.word	0x20000fa8

00001d5c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1d5c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1d5e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1d60:	4a0b      	ldr	r2, [pc, #44]	; (1d90 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1d62:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1d64:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1d66:	bf1e      	ittt	ne
	movne	r1, #0
    1d68:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1d6a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1d6c:	f006 ff4f 	blne	8c0e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1d70:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1d72:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d76:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d7a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1d7e:	4905      	ldr	r1, [pc, #20]	; (1d94 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d80:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d82:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d84:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d8a:	4903      	ldr	r1, [pc, #12]	; (1d98 <_isr_wrapper+0x3c>)
	bx r1
    1d8c:	4708      	bx	r1
    1d8e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1d90:	20000fa8 	.word	0x20000fa8
	ldr r1, =_sw_isr_table
    1d94:	00008dd8 	.word	0x00008dd8
	ldr r1, =z_arm_int_exit
    1d98:	00001d9d 	.word	0x00001d9d

00001d9c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1d9c:	4b04      	ldr	r3, [pc, #16]	; (1db0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1d9e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1da0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1da2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1da4:	d003      	beq.n	1dae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1da6:	4903      	ldr	r1, [pc, #12]	; (1db4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1dac:	600a      	str	r2, [r1, #0]

00001dae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1dae:	4770      	bx	lr
	ldr r3, =_kernel
    1db0:	20000fa8 	.word	0x20000fa8
	ldr r1, =_SCS_ICSR
    1db4:	e000ed04 	.word	0xe000ed04

00001db8 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1db8:	b510      	push	{r4, lr}
    1dba:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1dbc:	4b12      	ldr	r3, [pc, #72]	; (1e08 <bus_fault+0x50>)
    1dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1dc4:	f413 7f00 	tst.w	r3, #512	; 0x200
    1dc8:	d00b      	beq.n	1de2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1dca:	4b0f      	ldr	r3, [pc, #60]	; (1e08 <bus_fault+0x50>)
    1dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1dd0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1dd4:	d005      	beq.n	1de2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1dd6:	b121      	cbz	r1, 1de2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1dd8:	4a0b      	ldr	r2, [pc, #44]	; (1e08 <bus_fault+0x50>)
    1dda:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1ddc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1de0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1de2:	4b09      	ldr	r3, [pc, #36]	; (1e08 <bus_fault+0x50>)
    1de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1de8:	f413 7f80 	tst.w	r3, #256	; 0x100
    1dec:	d101      	bne.n	1df2 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1dee:	4b06      	ldr	r3, [pc, #24]	; (1e08 <bus_fault+0x50>)
    1df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1df2:	4a05      	ldr	r2, [pc, #20]	; (1e08 <bus_fault+0x50>)
    1df4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1df6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1dfa:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1dfc:	2101      	movs	r1, #1
    1dfe:	f006 fa51 	bl	82a4 <memory_fault_recoverable>
    1e02:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1e04:	2000      	movs	r0, #0
    1e06:	bd10      	pop	{r4, pc}
    1e08:	e000ed00 	.word	0xe000ed00

00001e0c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e0c:	4b07      	ldr	r3, [pc, #28]	; (1e2c <usage_fault+0x20>)
    1e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e1c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1e20:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1e24:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1e26:	2000      	movs	r0, #0
    1e28:	4770      	bx	lr
    1e2a:	bf00      	nop
    1e2c:	e000ed00 	.word	0xe000ed00

00001e30 <mem_manage_fault>:
{
    1e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e32:	4605      	mov	r5, r0
    1e34:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e36:	4b2b      	ldr	r3, [pc, #172]	; (1ee4 <mem_manage_fault+0xb4>)
    1e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e3e:	f013 0f02 	tst.w	r3, #2
    1e42:	d00c      	beq.n	1e5e <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    1e44:	4b27      	ldr	r3, [pc, #156]	; (1ee4 <mem_manage_fault+0xb4>)
    1e46:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e4a:	f013 0f80 	tst.w	r3, #128	; 0x80
    1e4e:	d025      	beq.n	1e9c <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    1e50:	b139      	cbz	r1, 1e62 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1e52:	4a24      	ldr	r2, [pc, #144]	; (1ee4 <mem_manage_fault+0xb4>)
    1e54:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1e5a:	6293      	str	r3, [r2, #40]	; 0x28
    1e5c:	e001      	b.n	1e62 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    1e5e:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1e62:	4b20      	ldr	r3, [pc, #128]	; (1ee4 <mem_manage_fault+0xb4>)
    1e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e6a:	f013 0f10 	tst.w	r3, #16
    1e6e:	d104      	bne.n	1e7a <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1e70:	4b1c      	ldr	r3, [pc, #112]	; (1ee4 <mem_manage_fault+0xb4>)
    1e72:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1e74:	f014 0402 	ands.w	r4, r4, #2
    1e78:	d004      	beq.n	1e84 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1e7a:	4b1a      	ldr	r3, [pc, #104]	; (1ee4 <mem_manage_fault+0xb4>)
    1e7c:	685c      	ldr	r4, [r3, #4]
    1e7e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    1e82:	d10e      	bne.n	1ea2 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1e84:	4a17      	ldr	r2, [pc, #92]	; (1ee4 <mem_manage_fault+0xb4>)
    1e86:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e88:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1e8c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e8e:	2101      	movs	r1, #1
    1e90:	4628      	mov	r0, r5
    1e92:	f006 fa07 	bl	82a4 <memory_fault_recoverable>
    1e96:	7030      	strb	r0, [r6, #0]
}
    1e98:	4620      	mov	r0, r4
    1e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t mmfar = -EINVAL;
    1e9c:	f06f 0015 	mvn.w	r0, #21
    1ea0:	e7df      	b.n	1e62 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1ea2:	4629      	mov	r1, r5
    1ea4:	f7ff ff14 	bl	1cd0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1ea8:	4607      	mov	r7, r0
    1eaa:	b9b0      	cbnz	r0, 1eda <mem_manage_fault+0xaa>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1eac:	4b0d      	ldr	r3, [pc, #52]	; (1ee4 <mem_manage_fault+0xb4>)
    1eae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1eb0:	f014 0410 	ands.w	r4, r4, #16
    1eb4:	d0e6      	beq.n	1e84 <mem_manage_fault+0x54>
    1eb6:	4c0c      	ldr	r4, [pc, #48]	; (1ee8 <mem_manage_fault+0xb8>)
    1eb8:	f240 1349 	movw	r3, #329	; 0x149
    1ebc:	4622      	mov	r2, r4
    1ebe:	490b      	ldr	r1, [pc, #44]	; (1eec <mem_manage_fault+0xbc>)
    1ec0:	480b      	ldr	r0, [pc, #44]	; (1ef0 <mem_manage_fault+0xc0>)
    1ec2:	f006 f86f 	bl	7fa4 <printk>
    1ec6:	480b      	ldr	r0, [pc, #44]	; (1ef4 <mem_manage_fault+0xc4>)
    1ec8:	f006 f86c 	bl	7fa4 <printk>
    1ecc:	f240 1149 	movw	r1, #329	; 0x149
    1ed0:	4620      	mov	r0, r4
    1ed2:	f006 f9c0 	bl	8256 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1ed6:	463c      	mov	r4, r7
    1ed8:	e7d4      	b.n	1e84 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1eda:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1ede:	2402      	movs	r4, #2
    1ee0:	e7d0      	b.n	1e84 <mem_manage_fault+0x54>
    1ee2:	bf00      	nop
    1ee4:	e000ed00 	.word	0xe000ed00
    1ee8:	00009364 	.word	0x00009364
    1eec:	000093a0 	.word	0x000093a0
    1ef0:	00009078 	.word	0x00009078
    1ef4:	000093ec 	.word	0x000093ec

00001ef8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1ef8:	b538      	push	{r3, r4, r5, lr}
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1efa:	2300      	movs	r3, #0
    1efc:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1efe:	4b2c      	ldr	r3, [pc, #176]	; (1fb0 <hard_fault+0xb8>)
    1f00:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1f02:	f014 0402 	ands.w	r4, r4, #2
    1f06:	d150      	bne.n	1faa <hard_fault+0xb2>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	db4e      	blt.n	1fac <hard_fault+0xb4>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1f0e:	4b28      	ldr	r3, [pc, #160]	; (1fb0 <hard_fault+0xb8>)
    1f10:	6add      	ldr	r5, [r3, #44]	; 0x2c
    1f12:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    1f16:	d036      	beq.n	1f86 <hard_fault+0x8e>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1f18:	6983      	ldr	r3, [r0, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    1f1a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1f1e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1f22:	429a      	cmp	r2, r3
    1f24:	d010      	beq.n	1f48 <hard_fault+0x50>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    1f26:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1f2a:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1f2e:	781b      	ldrb	r3, [r3, #0]
    1f30:	b963      	cbnz	r3, 1f4c <hard_fault+0x54>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    1f32:	4b20      	ldr	r3, [pc, #128]	; (1fb4 <hard_fault+0xbc>)
    1f34:	781b      	ldrb	r3, [r3, #0]
    1f36:	b97b      	cbnz	r3, 1f58 <hard_fault+0x60>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    1f38:	4b1f      	ldr	r3, [pc, #124]	; (1fb8 <hard_fault+0xc0>)
    1f3a:	881b      	ldrh	r3, [r3, #0]
    1f3c:	b29b      	uxth	r3, r3
    1f3e:	b18b      	cbz	r3, 1f64 <hard_fault+0x6c>
			reason = usage_fault(esf);
    1f40:	f7ff ff64 	bl	1e0c <usage_fault>
    1f44:	4604      	mov	r4, r0
    1f46:	e031      	b.n	1fac <hard_fault+0xb4>
			reason = esf->basic.r0;
    1f48:	6804      	ldr	r4, [r0, #0]
    1f4a:	e02f      	b.n	1fac <hard_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1f4c:	460a      	mov	r2, r1
    1f4e:	2101      	movs	r1, #1
    1f50:	f7ff ff6e 	bl	1e30 <mem_manage_fault>
    1f54:	4604      	mov	r4, r0
    1f56:	e029      	b.n	1fac <hard_fault+0xb4>
			reason = bus_fault(esf, 1, recoverable);
    1f58:	460a      	mov	r2, r1
    1f5a:	2101      	movs	r1, #1
    1f5c:	f7ff ff2c 	bl	1db8 <bus_fault>
    1f60:	4604      	mov	r4, r0
    1f62:	e023      	b.n	1fac <hard_fault+0xb4>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
		} else if (SAU->SFSR != 0) {
			secure_fault(esf);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
		} else {
			__ASSERT(0,
    1f64:	4d15      	ldr	r5, [pc, #84]	; (1fbc <hard_fault+0xc4>)
    1f66:	f240 23c3 	movw	r3, #707	; 0x2c3
    1f6a:	462a      	mov	r2, r5
    1f6c:	4914      	ldr	r1, [pc, #80]	; (1fc0 <hard_fault+0xc8>)
    1f6e:	4815      	ldr	r0, [pc, #84]	; (1fc4 <hard_fault+0xcc>)
    1f70:	f006 f818 	bl	7fa4 <printk>
    1f74:	4814      	ldr	r0, [pc, #80]	; (1fc8 <hard_fault+0xd0>)
    1f76:	f006 f815 	bl	7fa4 <printk>
    1f7a:	f240 21c3 	movw	r1, #707	; 0x2c3
    1f7e:	4628      	mov	r0, r5
    1f80:	f006 f969 	bl	8256 <assert_post_action>
    1f84:	e012      	b.n	1fac <hard_fault+0xb4>
			"Fault escalation without FSR info");
		}
	} else {
		__ASSERT(0,
    1f86:	4c0d      	ldr	r4, [pc, #52]	; (1fbc <hard_fault+0xc4>)
    1f88:	f240 23c7 	movw	r3, #711	; 0x2c7
    1f8c:	4622      	mov	r2, r4
    1f8e:	490c      	ldr	r1, [pc, #48]	; (1fc0 <hard_fault+0xc8>)
    1f90:	480c      	ldr	r0, [pc, #48]	; (1fc4 <hard_fault+0xcc>)
    1f92:	f006 f807 	bl	7fa4 <printk>
    1f96:	480d      	ldr	r0, [pc, #52]	; (1fcc <hard_fault+0xd4>)
    1f98:	f006 f804 	bl	7fa4 <printk>
    1f9c:	f240 21c7 	movw	r1, #711	; 0x2c7
    1fa0:	4620      	mov	r0, r4
    1fa2:	f006 f958 	bl	8256 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1fa6:	462c      	mov	r4, r5
    1fa8:	e000      	b.n	1fac <hard_fault+0xb4>
    1faa:	2400      	movs	r4, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1fac:	4620      	mov	r0, r4
    1fae:	bd38      	pop	{r3, r4, r5, pc}
    1fb0:	e000ed00 	.word	0xe000ed00
    1fb4:	e000ed29 	.word	0xe000ed29
    1fb8:	e000ed2a 	.word	0xe000ed2a
    1fbc:	00009364 	.word	0x00009364
    1fc0:	00009074 	.word	0x00009074
    1fc4:	00009078 	.word	0x00009078
    1fc8:	00009410 	.word	0x00009410
    1fcc:	00009434 	.word	0x00009434

00001fd0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1fd4:	4b2b      	ldr	r3, [pc, #172]	; (2084 <z_arm_fault+0xb4>)
    1fd6:	685d      	ldr	r5, [r3, #4]
    1fd8:	f3c5 0508 	ubfx	r5, r5, #0, #9
    1fdc:	2300      	movs	r3, #0
    1fde:	f383 8811 	msr	BASEPRI, r3
    1fe2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1fe6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1fea:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1fee:	d10d      	bne.n	200c <z_arm_fault+0x3c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1ff0:	f002 030c 	and.w	r3, r2, #12
    1ff4:	2b08      	cmp	r3, #8
    1ff6:	d027      	beq.n	2048 <z_arm_fault+0x78>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1ff8:	f012 0f08 	tst.w	r2, #8
    1ffc:	d003      	beq.n	2006 <z_arm_fault+0x36>
			ptr_esf =  (z_arch_esf_t *)psp;
    1ffe:	460c      	mov	r4, r1
	*nested_exc = false;
    2000:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2002:	b9ac      	cbnz	r4, 2030 <z_arm_fault+0x60>
    2004:	e004      	b.n	2010 <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    2006:	4604      	mov	r4, r0
			*nested_exc = true;
    2008:	2601      	movs	r6, #1
    200a:	e7fa      	b.n	2002 <z_arm_fault+0x32>
	*nested_exc = false;
    200c:	2600      	movs	r6, #0
		return NULL;
    200e:	4634      	mov	r4, r6
	__ASSERT(esf != NULL,
    2010:	4f1d      	ldr	r7, [pc, #116]	; (2088 <z_arm_fault+0xb8>)
    2012:	f240 33f2 	movw	r3, #1010	; 0x3f2
    2016:	463a      	mov	r2, r7
    2018:	491c      	ldr	r1, [pc, #112]	; (208c <z_arm_fault+0xbc>)
    201a:	481d      	ldr	r0, [pc, #116]	; (2090 <z_arm_fault+0xc0>)
    201c:	f005 ffc2 	bl	7fa4 <printk>
    2020:	481c      	ldr	r0, [pc, #112]	; (2094 <z_arm_fault+0xc4>)
    2022:	f005 ffbf 	bl	7fa4 <printk>
    2026:	f240 31f2 	movw	r1, #1010	; 0x3f2
    202a:	4638      	mov	r0, r7
    202c:	f006 f913 	bl	8256 <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    2030:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    2034:	4629      	mov	r1, r5
    2036:	4620      	mov	r0, r4
    2038:	f006 f939 	bl	82ae <fault_handle>
    203c:	4605      	mov	r5, r0
	if (recoverable) {
    203e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2042:	b123      	cbz	r3, 204e <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    2044:	b00b      	add	sp, #44	; 0x2c
    2046:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*nested_exc = false;
    2048:	2600      	movs	r6, #0
		return NULL;
    204a:	4634      	mov	r4, r6
    204c:	e7e0      	b.n	2010 <z_arm_fault+0x40>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    204e:	2220      	movs	r2, #32
    2050:	4621      	mov	r1, r4
    2052:	a801      	add	r0, sp, #4
    2054:	f006 f9e6 	bl	8424 <memcpy>
	if (nested_exc) {
    2058:	b14e      	cbz	r6, 206e <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    205a:	9b08      	ldr	r3, [sp, #32]
    205c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2060:	b95a      	cbnz	r2, 207a <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2062:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2066:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    206a:	9308      	str	r3, [sp, #32]
    206c:	e005      	b.n	207a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    206e:	9b08      	ldr	r3, [sp, #32]
    2070:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2074:	f023 0301 	bic.w	r3, r3, #1
    2078:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    207a:	a901      	add	r1, sp, #4
    207c:	4628      	mov	r0, r5
    207e:	f006 f8fb 	bl	8278 <z_arm_fatal_error>
    2082:	e7df      	b.n	2044 <z_arm_fault+0x74>
    2084:	e000ed00 	.word	0xe000ed00
    2088:	00009364 	.word	0x00009364
    208c:	00009464 	.word	0x00009464
    2090:	00009078 	.word	0x00009078
    2094:	00009478 	.word	0x00009478

00002098 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2098:	4a02      	ldr	r2, [pc, #8]	; (20a4 <z_arm_fault_init+0xc>)
    209a:	6953      	ldr	r3, [r2, #20]
    209c:	f043 0310 	orr.w	r3, r3, #16
    20a0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    20a2:	4770      	bx	lr
    20a4:	e000ed00 	.word	0xe000ed00

000020a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    20a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    20ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    20b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    20b2:	4672      	mov	r2, lr
	bl z_arm_fault
    20b4:	f7ff ff8c 	bl	1fd0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    20b8:	bd01      	pop	{r0, pc}
    20ba:	bf00      	nop

000020bc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    20bc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    20be:	e006      	b.n	20ce <z_arm_interrupt_init+0x12>
    20c0:	f002 010f 	and.w	r1, r2, #15
    20c4:	4b09      	ldr	r3, [pc, #36]	; (20ec <z_arm_interrupt_init+0x30>)
    20c6:	440b      	add	r3, r1
    20c8:	2120      	movs	r1, #32
    20ca:	7619      	strb	r1, [r3, #24]
    20cc:	3201      	adds	r2, #1
    20ce:	2a2f      	cmp	r2, #47	; 0x2f
    20d0:	dc0a      	bgt.n	20e8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    20d2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    20d4:	2b00      	cmp	r3, #0
    20d6:	dbf3      	blt.n	20c0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    20d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    20dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    20e0:	2120      	movs	r1, #32
    20e2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    20e6:	e7f1      	b.n	20cc <z_arm_interrupt_init+0x10>
	}
}
    20e8:	4770      	bx	lr
    20ea:	bf00      	nop
    20ec:	e000ecfc 	.word	0xe000ecfc

000020f0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    20f0:	2000      	movs	r0, #0
    msr CONTROL, r0
    20f2:	f380 8814 	msr	CONTROL, r0
    isb
    20f6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    20fa:	f006 fdfb 	bl	8cf4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    20fe:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2100:	490d      	ldr	r1, [pc, #52]	; (2138 <__start+0x48>)
    str r0, [r1]
    2102:	6008      	str	r0, [r1, #0]
    dsb
    2104:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2108:	480c      	ldr	r0, [pc, #48]	; (213c <__start+0x4c>)
    msr msp, r0
    210a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    210e:	f000 f829 	bl	2164 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2112:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2114:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2118:	4809      	ldr	r0, [pc, #36]	; (2140 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    211a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    211e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2120:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2124:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2128:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    212a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    212c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2130:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2134:	f7ff fd38 	bl	1ba8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2138:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    213c:	20001a20 	.word	0x20001a20
    ldr r0, =z_interrupt_stacks
    2140:	20001ba0 	.word	0x20001ba0

00002144 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2144:	4b06      	ldr	r3, [pc, #24]	; (2160 <z_arm_clear_arm_mpu_config+0x1c>)
    2146:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    2148:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    214c:	2300      	movs	r3, #0
    214e:	4283      	cmp	r3, r0
    2150:	da05      	bge.n	215e <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    2152:	4a03      	ldr	r2, [pc, #12]	; (2160 <z_arm_clear_arm_mpu_config+0x1c>)
    2154:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2156:	2100      	movs	r1, #0
    2158:	6111      	str	r1, [r2, #16]
    215a:	3301      	adds	r3, #1
    215c:	e7f7      	b.n	214e <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    215e:	4770      	bx	lr
    2160:	e000ed90 	.word	0xe000ed90

00002164 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2164:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2166:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2168:	2400      	movs	r4, #0
    216a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    216e:	f7ff ffe9 	bl	2144 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2172:	4623      	mov	r3, r4
    2174:	e008      	b.n	2188 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    2176:	f103 0120 	add.w	r1, r3, #32
    217a:	4a0e      	ldr	r2, [pc, #56]	; (21b4 <z_arm_init_arch_hw_at_boot+0x50>)
    217c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2180:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2184:	3301      	adds	r3, #1
    2186:	b2db      	uxtb	r3, r3
    2188:	2b07      	cmp	r3, #7
    218a:	d9f4      	bls.n	2176 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    218c:	2300      	movs	r3, #0
    218e:	e008      	b.n	21a2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2190:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2194:	4a07      	ldr	r2, [pc, #28]	; (21b4 <z_arm_init_arch_hw_at_boot+0x50>)
    2196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    219a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    219e:	3301      	adds	r3, #1
    21a0:	b2db      	uxtb	r3, r3
    21a2:	2b07      	cmp	r3, #7
    21a4:	d9f4      	bls.n	2190 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    21a6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    21a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21ac:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    21b0:	bd10      	pop	{r4, pc}
    21b2:	bf00      	nop
    21b4:	e000e100 	.word	0xe000e100

000021b8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    21b8:	b508      	push	{r3, lr}
	if (_current == thread) {
    21ba:	4b08      	ldr	r3, [pc, #32]	; (21dc <z_impl_k_thread_abort+0x24>)
    21bc:	689b      	ldr	r3, [r3, #8]
    21be:	4283      	cmp	r3, r0
    21c0:	d002      	beq.n	21c8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    21c2:	f005 f89b 	bl	72fc <z_thread_abort>
}
    21c6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    21c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    21cc:	2b00      	cmp	r3, #0
    21ce:	d0f8      	beq.n	21c2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21d0:	4a03      	ldr	r2, [pc, #12]	; (21e0 <z_impl_k_thread_abort+0x28>)
    21d2:	6853      	ldr	r3, [r2, #4]
    21d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    21d8:	6053      	str	r3, [r2, #4]
    21da:	e7f2      	b.n	21c2 <z_impl_k_thread_abort+0xa>
    21dc:	20000fa8 	.word	0x20000fa8
    21e0:	e000ed00 	.word	0xe000ed00

000021e4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    21e4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    21e6:	4b03      	ldr	r3, [pc, #12]	; (21f4 <z_arm_configure_static_mpu_regions+0x10>)
    21e8:	4a03      	ldr	r2, [pc, #12]	; (21f8 <z_arm_configure_static_mpu_regions+0x14>)
    21ea:	2101      	movs	r1, #1
    21ec:	4803      	ldr	r0, [pc, #12]	; (21fc <z_arm_configure_static_mpu_regions+0x18>)
    21ee:	f000 f85d 	bl	22ac <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    21f2:	bd08      	pop	{r3, pc}
    21f4:	20040000 	.word	0x20040000
    21f8:	20000000 	.word	0x20000000
    21fc:	000094b8 	.word	0x000094b8

00002200 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2200:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2202:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    2206:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2208:	4804      	ldr	r0, [pc, #16]	; (221c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    220a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    220c:	2320      	movs	r3, #32
    220e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2210:	4b03      	ldr	r3, [pc, #12]	; (2220 <z_arm_configure_dynamic_mpu_regions+0x20>)
    2212:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2214:	2101      	movs	r1, #1
    2216:	f000 f86b 	bl	22f0 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    221a:	bd08      	pop	{r3, pc}
    221c:	20000a44 	.word	0x20000a44
    2220:	150b0000 	.word	0x150b0000

00002224 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2224:	4a06      	ldr	r2, [pc, #24]	; (2240 <region_init+0x1c>)
    2226:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2228:	680b      	ldr	r3, [r1, #0]
    222a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    222e:	4303      	orrs	r3, r0
    2230:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2234:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2236:	688b      	ldr	r3, [r1, #8]
    2238:	f043 0301 	orr.w	r3, r3, #1
    223c:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    223e:	4770      	bx	lr
    2240:	e000ed90 	.word	0xe000ed90

00002244 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    2244:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    2246:	4c03      	ldr	r4, [pc, #12]	; (2254 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2248:	2301      	movs	r3, #1
    224a:	7822      	ldrb	r2, [r4, #0]
    224c:	f006 f88d 	bl	836a <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2250:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2252:	bd10      	pop	{r4, pc}
    2254:	20001010 	.word	0x20001010

00002258 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2258:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    225a:	2300      	movs	r3, #0
    225c:	4a08      	ldr	r2, [pc, #32]	; (2280 <mpu_configure_dynamic_mpu_regions+0x28>)
    225e:	7812      	ldrb	r2, [r2, #0]
    2260:	f006 f883 	bl	836a <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2264:	f110 0f16 	cmn.w	r0, #22
    2268:	d008      	beq.n	227c <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    226a:	4603      	mov	r3, r0
    226c:	2b07      	cmp	r3, #7
    226e:	dc05      	bgt.n	227c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    2270:	4a04      	ldr	r2, [pc, #16]	; (2284 <mpu_configure_dynamic_mpu_regions+0x2c>)
    2272:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2274:	2100      	movs	r1, #0
    2276:	6111      	str	r1, [r2, #16]
    2278:	3301      	adds	r3, #1
    227a:	e7f7      	b.n	226c <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    227c:	bd08      	pop	{r3, pc}
    227e:	bf00      	nop
    2280:	20001010 	.word	0x20001010
    2284:	e000ed90 	.word	0xe000ed90

00002288 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2288:	4b03      	ldr	r3, [pc, #12]	; (2298 <arm_core_mpu_enable+0x10>)
    228a:	2205      	movs	r2, #5
    228c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    228e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2292:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2296:	4770      	bx	lr
    2298:	e000ed90 	.word	0xe000ed90

0000229c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    229c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    22a0:	4b01      	ldr	r3, [pc, #4]	; (22a8 <arm_core_mpu_disable+0xc>)
    22a2:	2200      	movs	r2, #0
    22a4:	605a      	str	r2, [r3, #4]
}
    22a6:	4770      	bx	lr
    22a8:	e000ed90 	.word	0xe000ed90

000022ac <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    22ac:	b538      	push	{r3, r4, r5, lr}
    22ae:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    22b0:	f7ff ffc8 	bl	2244 <mpu_configure_static_mpu_regions>
    22b4:	f110 0f16 	cmn.w	r0, #22
    22b8:	d000      	beq.n	22bc <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    22ba:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    22bc:	4d08      	ldr	r5, [pc, #32]	; (22e0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    22be:	f240 1311 	movw	r3, #273	; 0x111
    22c2:	462a      	mov	r2, r5
    22c4:	4907      	ldr	r1, [pc, #28]	; (22e4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    22c6:	4808      	ldr	r0, [pc, #32]	; (22e8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    22c8:	f005 fe6c 	bl	7fa4 <printk>
    22cc:	4621      	mov	r1, r4
    22ce:	4807      	ldr	r0, [pc, #28]	; (22ec <arm_core_mpu_configure_static_mpu_regions+0x40>)
    22d0:	f005 fe68 	bl	7fa4 <printk>
    22d4:	f240 1111 	movw	r1, #273	; 0x111
    22d8:	4628      	mov	r0, r5
    22da:	f005 ffbc 	bl	8256 <assert_post_action>
}
    22de:	e7ec      	b.n	22ba <arm_core_mpu_configure_static_mpu_regions+0xe>
    22e0:	000094c4 	.word	0x000094c4
    22e4:	00009074 	.word	0x00009074
    22e8:	00009078 	.word	0x00009078
    22ec:	000094fc 	.word	0x000094fc

000022f0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    22f0:	b538      	push	{r3, r4, r5, lr}
    22f2:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    22f4:	f7ff ffb0 	bl	2258 <mpu_configure_dynamic_mpu_regions>
    22f8:	f110 0f16 	cmn.w	r0, #22
    22fc:	d000      	beq.n	2300 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    22fe:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2300:	4d08      	ldr	r5, [pc, #32]	; (2324 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    2302:	f44f 7398 	mov.w	r3, #304	; 0x130
    2306:	462a      	mov	r2, r5
    2308:	4907      	ldr	r1, [pc, #28]	; (2328 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    230a:	4808      	ldr	r0, [pc, #32]	; (232c <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    230c:	f005 fe4a 	bl	7fa4 <printk>
    2310:	4621      	mov	r1, r4
    2312:	4807      	ldr	r0, [pc, #28]	; (2330 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    2314:	f005 fe46 	bl	7fa4 <printk>
    2318:	f44f 7198 	mov.w	r1, #304	; 0x130
    231c:	4628      	mov	r0, r5
    231e:	f005 ff9a 	bl	8256 <assert_post_action>
}
    2322:	e7ec      	b.n	22fe <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    2324:	000094c4 	.word	0x000094c4
    2328:	00009074 	.word	0x00009074
    232c:	00009078 	.word	0x00009078
    2330:	00009528 	.word	0x00009528

00002334 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2334:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2336:	4b23      	ldr	r3, [pc, #140]	; (23c4 <z_arm_mpu_init+0x90>)
    2338:	681d      	ldr	r5, [r3, #0]
    233a:	2d08      	cmp	r5, #8
    233c:	d803      	bhi.n	2346 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    233e:	f7ff ffad 	bl	229c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2342:	2400      	movs	r4, #0
    2344:	e01e      	b.n	2384 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    2346:	4c20      	ldr	r4, [pc, #128]	; (23c8 <z_arm_mpu_init+0x94>)
    2348:	f44f 73a4 	mov.w	r3, #328	; 0x148
    234c:	4622      	mov	r2, r4
    234e:	491f      	ldr	r1, [pc, #124]	; (23cc <z_arm_mpu_init+0x98>)
    2350:	481f      	ldr	r0, [pc, #124]	; (23d0 <z_arm_mpu_init+0x9c>)
    2352:	f005 fe27 	bl	7fa4 <printk>
    2356:	2208      	movs	r2, #8
    2358:	4629      	mov	r1, r5
    235a:	481e      	ldr	r0, [pc, #120]	; (23d4 <z_arm_mpu_init+0xa0>)
    235c:	f005 fe22 	bl	7fa4 <printk>
    2360:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2364:	4620      	mov	r0, r4
    2366:	f005 ff76 	bl	8256 <assert_post_action>
		return -1;
    236a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    236e:	e016      	b.n	239e <z_arm_mpu_init+0x6a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2370:	4b14      	ldr	r3, [pc, #80]	; (23c4 <z_arm_mpu_init+0x90>)
    2372:	6859      	ldr	r1, [r3, #4]
    2374:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2378:	0093      	lsls	r3, r2, #2
    237a:	4419      	add	r1, r3
    237c:	4620      	mov	r0, r4
    237e:	f7ff ff51 	bl	2224 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2382:	3401      	adds	r4, #1
    2384:	42a5      	cmp	r5, r4
    2386:	d8f3      	bhi.n	2370 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2388:	4b13      	ldr	r3, [pc, #76]	; (23d8 <z_arm_mpu_init+0xa4>)
    238a:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    238c:	f7ff ff7c 	bl	2288 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    2390:	4b12      	ldr	r3, [pc, #72]	; (23dc <z_arm_mpu_init+0xa8>)
    2392:	681b      	ldr	r3, [r3, #0]
    2394:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2398:	2b08      	cmp	r3, #8
    239a:	d101      	bne.n	23a0 <z_arm_mpu_init+0x6c>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    239c:	2000      	movs	r0, #0
}
    239e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    23a0:	4c09      	ldr	r4, [pc, #36]	; (23c8 <z_arm_mpu_init+0x94>)
    23a2:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    23a6:	4622      	mov	r2, r4
    23a8:	490d      	ldr	r1, [pc, #52]	; (23e0 <z_arm_mpu_init+0xac>)
    23aa:	4809      	ldr	r0, [pc, #36]	; (23d0 <z_arm_mpu_init+0x9c>)
    23ac:	f005 fdfa 	bl	7fa4 <printk>
    23b0:	480c      	ldr	r0, [pc, #48]	; (23e4 <z_arm_mpu_init+0xb0>)
    23b2:	f005 fdf7 	bl	7fa4 <printk>
    23b6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    23ba:	4620      	mov	r0, r4
    23bc:	f005 ff4b 	bl	8256 <assert_post_action>
	return 0;
    23c0:	2000      	movs	r0, #0
    23c2:	e7ec      	b.n	239e <z_arm_mpu_init+0x6a>
    23c4:	00009610 	.word	0x00009610
    23c8:	000094c4 	.word	0x000094c4
    23cc:	00009074 	.word	0x00009074
    23d0:	00009078 	.word	0x00009078
    23d4:	00009558 	.word	0x00009558
    23d8:	20001010 	.word	0x20001010
    23dc:	e000ed90 	.word	0xe000ed90
    23e0:	0000958c 	.word	0x0000958c
    23e4:	000095dc 	.word	0x000095dc

000023e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    23e8:	4b01      	ldr	r3, [pc, #4]	; (23f0 <__stdout_hook_install+0x8>)
    23ea:	6018      	str	r0, [r3, #0]
}
    23ec:	4770      	bx	lr
    23ee:	bf00      	nop
    23f0:	20000028 	.word	0x20000028

000023f4 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    23f4:	4b06      	ldr	r3, [pc, #24]	; (2410 <nrf52_errata_197+0x1c>)
    23f6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    23f8:	4a06      	ldr	r2, [pc, #24]	; (2414 <nrf52_errata_197+0x20>)
    23fa:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    23fc:	2b08      	cmp	r3, #8
    23fe:	d001      	beq.n	2404 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2400:	2000      	movs	r0, #0
    2402:	4770      	bx	lr
                switch(var2)
    2404:	2a02      	cmp	r2, #2
    2406:	d001      	beq.n	240c <nrf52_errata_197+0x18>
                        return false;
    2408:	2000      	movs	r0, #0
    240a:	4770      	bx	lr
                        return true;
    240c:	2001      	movs	r0, #1
    #endif
}
    240e:	4770      	bx	lr
    2410:	10000130 	.word	0x10000130
    2414:	10000134 	.word	0x10000134

00002418 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2418:	b510      	push	{r4, lr}
	__asm__ volatile(
    241a:	f04f 0320 	mov.w	r3, #32
    241e:	f3ef 8411 	mrs	r4, BASEPRI
    2422:	f383 8812 	msr	BASEPRI_MAX, r3
    2426:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    242a:	2301      	movs	r3, #1
    242c:	4a0b      	ldr	r2, [pc, #44]	; (245c <nordicsemi_nrf52_init+0x44>)
    242e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2436:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    243a:	f7ff ffdb 	bl	23f4 <nrf52_errata_197>
    243e:	b110      	cbz	r0, 2446 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2440:	4b07      	ldr	r3, [pc, #28]	; (2460 <nordicsemi_nrf52_init+0x48>)
    2442:	2201      	movs	r2, #1
    2444:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    244a:	2201      	movs	r2, #1
    244c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2450:	f384 8811 	msr	BASEPRI, r4
    2454:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2458:	2000      	movs	r0, #0
    245a:	bd10      	pop	{r4, pc}
    245c:	4001e000 	.word	0x4001e000
    2460:	40000638 	.word	0x40000638

00002464 <sys_arch_reboot>:
    *p_gpregret = val;
    2464:	b2c0      	uxtb	r0, r0
    2466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    246a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    246e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2472:	4905      	ldr	r1, [pc, #20]	; (2488 <sys_arch_reboot+0x24>)
    2474:	68ca      	ldr	r2, [r1, #12]
    2476:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    247a:	4b04      	ldr	r3, [pc, #16]	; (248c <sys_arch_reboot+0x28>)
    247c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    247e:	60cb      	str	r3, [r1, #12]
    2480:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2484:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2486:	e7fd      	b.n	2484 <sys_arch_reboot+0x20>
    2488:	e000ed00 	.word	0xe000ed00
    248c:	05fa0004 	.word	0x05fa0004

00002490 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2490:	b130      	cbz	r0, 24a0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    2492:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2494:	0180      	lsls	r0, r0, #6
    2496:	4b03      	ldr	r3, [pc, #12]	; (24a4 <arch_busy_wait+0x14>)
    2498:	f043 0301 	orr.w	r3, r3, #1
    249c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    249e:	bd08      	pop	{r3, pc}
    24a0:	4770      	bx	lr
    24a2:	bf00      	nop
    24a4:	00008fd0 	.word	0x00008fd0

000024a8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    24a8:	4800      	ldr	r0, [pc, #0]	; (24ac <get_hf_flags+0x4>)
    24aa:	4770      	bx	lr
    24ac:	20000aa8 	.word	0x20000aa8

000024b0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    24b0:	4b01      	ldr	r3, [pc, #4]	; (24b8 <get_subsys+0x8>)
    24b2:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    24b4:	1140      	asrs	r0, r0, #5
    24b6:	4770      	bx	lr
    24b8:	20000a60 	.word	0x20000a60

000024bc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    24bc:	b530      	push	{r4, r5, lr}
    24be:	b083      	sub	sp, #12
    24c0:	4605      	mov	r5, r0
    24c2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24c4:	f7ff fff4 	bl	24b0 <get_subsys>
    24c8:	4601      	mov	r1, r0
    24ca:	2340      	movs	r3, #64	; 0x40
    24cc:	9300      	str	r3, [sp, #0]
    24ce:	4623      	mov	r3, r4
    24d0:	4a05      	ldr	r2, [pc, #20]	; (24e8 <onoff_start+0x2c>)
    24d2:	4806      	ldr	r0, [pc, #24]	; (24ec <onoff_start+0x30>)
    24d4:	f006 f875 	bl	85c2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    24d8:	1e01      	subs	r1, r0, #0
    24da:	db01      	blt.n	24e0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    24dc:	b003      	add	sp, #12
    24de:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    24e0:	4628      	mov	r0, r5
    24e2:	47a0      	blx	r4
}
    24e4:	e7fa      	b.n	24dc <onoff_start+0x20>
    24e6:	bf00      	nop
    24e8:	0000860b 	.word	0x0000860b
    24ec:	00008d60 	.word	0x00008d60

000024f0 <generic_hfclk_stop>:
{
    24f0:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    24f2:	4b0a      	ldr	r3, [pc, #40]	; (251c <generic_hfclk_stop+0x2c>)
    24f4:	f3bf 8f5b 	dmb	ish
    24f8:	e853 2f00 	ldrex	r2, [r3]
    24fc:	f022 0102 	bic.w	r1, r2, #2
    2500:	e843 1000 	strex	r0, r1, [r3]
    2504:	2800      	cmp	r0, #0
    2506:	d1f7      	bne.n	24f8 <generic_hfclk_stop+0x8>
    2508:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    250c:	f012 0f01 	tst.w	r2, #1
    2510:	d000      	beq.n	2514 <generic_hfclk_stop+0x24>
}
    2512:	bd08      	pop	{r3, pc}
	hfclk_stop();
    2514:	f006 f88b 	bl	862e <hfclk_stop>
    2518:	e7fb      	b.n	2512 <generic_hfclk_stop+0x22>
    251a:	bf00      	nop
    251c:	20000ab8 	.word	0x20000ab8

00002520 <generic_hfclk_start>:
{
    2520:	b510      	push	{r4, lr}
	__asm__ volatile(
    2522:	f04f 0320 	mov.w	r3, #32
    2526:	f3ef 8411 	mrs	r4, BASEPRI
    252a:	f383 8812 	msr	BASEPRI_MAX, r3
    252e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2532:	4a13      	ldr	r2, [pc, #76]	; (2580 <generic_hfclk_start+0x60>)
    2534:	6813      	ldr	r3, [r2, #0]
    2536:	f043 0302 	orr.w	r3, r3, #2
    253a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    253c:	f013 0f01 	tst.w	r3, #1
    2540:	d108      	bne.n	2554 <generic_hfclk_start+0x34>
	bool already_started = false;
    2542:	2300      	movs	r3, #0
	__asm__ volatile(
    2544:	f384 8811 	msr	BASEPRI, r4
    2548:	f3bf 8f6f 	isb	sy
	if (already_started) {
    254c:	b99b      	cbnz	r3, 2576 <generic_hfclk_start+0x56>
	hfclk_start();
    254e:	f006 f864 	bl	861a <hfclk_start>
}
    2552:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2558:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    255c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2560:	f012 0f01 	tst.w	r2, #1
    2564:	d101      	bne.n	256a <generic_hfclk_start+0x4a>
	bool already_started = false;
    2566:	2300      	movs	r3, #0
    2568:	e7ec      	b.n	2544 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    256a:	f7ff ff9d 	bl	24a8 <get_hf_flags>
    256e:	f006 f803 	bl	8578 <set_on_state>
			already_started = true;
    2572:	2301      	movs	r3, #1
    2574:	e7e6      	b.n	2544 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    2576:	2100      	movs	r1, #0
    2578:	4802      	ldr	r0, [pc, #8]	; (2584 <generic_hfclk_start+0x64>)
    257a:	f006 f810 	bl	859e <clkstarted_handle>
		return;
    257e:	e7e8      	b.n	2552 <generic_hfclk_start+0x32>
    2580:	20000ab8 	.word	0x20000ab8
    2584:	00008d60 	.word	0x00008d60

00002588 <get_status>:
{
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    258c:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    258e:	2c01      	cmp	r4, #1
    2590:	d807      	bhi.n	25a2 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2592:	4621      	mov	r1, r4
    2594:	4628      	mov	r0, r5
    2596:	f005 ffa7 	bl	84e8 <get_sub_data>
    259a:	6880      	ldr	r0, [r0, #8]
}
    259c:	f000 0007 	and.w	r0, r0, #7
    25a0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25a2:	4e06      	ldr	r6, [pc, #24]	; (25bc <get_status+0x34>)
    25a4:	2379      	movs	r3, #121	; 0x79
    25a6:	4632      	mov	r2, r6
    25a8:	4905      	ldr	r1, [pc, #20]	; (25c0 <get_status+0x38>)
    25aa:	4806      	ldr	r0, [pc, #24]	; (25c4 <get_status+0x3c>)
    25ac:	f005 fcfa 	bl	7fa4 <printk>
    25b0:	2179      	movs	r1, #121	; 0x79
    25b2:	4630      	mov	r0, r6
    25b4:	f005 fe4f 	bl	8256 <assert_post_action>
    25b8:	e7eb      	b.n	2592 <get_status+0xa>
    25ba:	bf00      	nop
    25bc:	00009630 	.word	0x00009630
    25c0:	00009670 	.word	0x00009670
    25c4:	00009078 	.word	0x00009078

000025c8 <stop>:
{
    25c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25cc:	4607      	mov	r7, r0
    25ce:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    25d0:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    25d2:	4621      	mov	r1, r4
    25d4:	f005 ff88 	bl	84e8 <get_sub_data>
    25d8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25da:	2c01      	cmp	r4, #1
    25dc:	d80f      	bhi.n	25fe <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    25de:	4631      	mov	r1, r6
    25e0:	f105 0008 	add.w	r0, r5, #8
    25e4:	f005 ff8f 	bl	8506 <set_off_state>
	if (err < 0) {
    25e8:	2800      	cmp	r0, #0
    25ea:	db06      	blt.n	25fa <stop+0x32>
	get_sub_config(dev, type)->stop();
    25ec:	4621      	mov	r1, r4
    25ee:	4638      	mov	r0, r7
    25f0:	f005 ff81 	bl	84f6 <get_sub_config>
    25f4:	6843      	ldr	r3, [r0, #4]
    25f6:	4798      	blx	r3
	return 0;
    25f8:	2000      	movs	r0, #0
}
    25fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25fe:	f8df 8024 	ldr.w	r8, [pc, #36]	; 2624 <stop+0x5c>
    2602:	f240 134d 	movw	r3, #333	; 0x14d
    2606:	4642      	mov	r2, r8
    2608:	4904      	ldr	r1, [pc, #16]	; (261c <stop+0x54>)
    260a:	4805      	ldr	r0, [pc, #20]	; (2620 <stop+0x58>)
    260c:	f005 fcca 	bl	7fa4 <printk>
    2610:	f240 114d 	movw	r1, #333	; 0x14d
    2614:	4640      	mov	r0, r8
    2616:	f005 fe1e 	bl	8256 <assert_post_action>
    261a:	e7e0      	b.n	25de <stop+0x16>
    261c:	00009670 	.word	0x00009670
    2620:	00009078 	.word	0x00009078
    2624:	00009630 	.word	0x00009630

00002628 <onoff_stop>:
{
    2628:	b538      	push	{r3, r4, r5, lr}
    262a:	4605      	mov	r5, r0
    262c:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    262e:	f7ff ff3f 	bl	24b0 <get_subsys>
    2632:	4601      	mov	r1, r0
    2634:	2240      	movs	r2, #64	; 0x40
    2636:	4803      	ldr	r0, [pc, #12]	; (2644 <onoff_stop+0x1c>)
    2638:	f7ff ffc6 	bl	25c8 <stop>
    263c:	4601      	mov	r1, r0
	notify(mgr, res);
    263e:	4628      	mov	r0, r5
    2640:	47a0      	blx	r4
}
    2642:	bd38      	pop	{r3, r4, r5, pc}
    2644:	00008d60 	.word	0x00008d60

00002648 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    2648:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    264a:	2801      	cmp	r0, #1
    264c:	d01d      	beq.n	268a <clock_event_handler+0x42>
    264e:	2803      	cmp	r0, #3
    2650:	d020      	beq.n	2694 <clock_event_handler+0x4c>
    2652:	b168      	cbz	r0, 2670 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    2654:	4c16      	ldr	r4, [pc, #88]	; (26b0 <clock_event_handler+0x68>)
    2656:	f240 2362 	movw	r3, #610	; 0x262
    265a:	4622      	mov	r2, r4
    265c:	4915      	ldr	r1, [pc, #84]	; (26b4 <clock_event_handler+0x6c>)
    265e:	4816      	ldr	r0, [pc, #88]	; (26b8 <clock_event_handler+0x70>)
    2660:	f005 fca0 	bl	7fa4 <printk>
    2664:	f240 2162 	movw	r1, #610	; 0x262
    2668:	4620      	mov	r0, r4
    266a:	f005 fdf4 	bl	8256 <assert_post_action>
		break;
	}
}
    266e:	e010      	b.n	2692 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2670:	2100      	movs	r1, #0
    2672:	4812      	ldr	r0, [pc, #72]	; (26bc <clock_event_handler+0x74>)
    2674:	f005 ff38 	bl	84e8 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2678:	6883      	ldr	r3, [r0, #8]
    267a:	f013 0f07 	tst.w	r3, #7
    267e:	d108      	bne.n	2692 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2680:	2100      	movs	r1, #0
    2682:	480e      	ldr	r0, [pc, #56]	; (26bc <clock_event_handler+0x74>)
    2684:	f005 ff8b 	bl	859e <clkstarted_handle>
    2688:	e003      	b.n	2692 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    268a:	2101      	movs	r1, #1
    268c:	480b      	ldr	r0, [pc, #44]	; (26bc <clock_event_handler+0x74>)
    268e:	f005 ff86 	bl	859e <clkstarted_handle>
}
    2692:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    2694:	4c06      	ldr	r4, [pc, #24]	; (26b0 <clock_event_handler+0x68>)
    2696:	f240 235e 	movw	r3, #606	; 0x25e
    269a:	4622      	mov	r2, r4
    269c:	4905      	ldr	r1, [pc, #20]	; (26b4 <clock_event_handler+0x6c>)
    269e:	4806      	ldr	r0, [pc, #24]	; (26b8 <clock_event_handler+0x70>)
    26a0:	f005 fc80 	bl	7fa4 <printk>
    26a4:	f240 215e 	movw	r1, #606	; 0x25e
    26a8:	4620      	mov	r0, r4
    26aa:	f005 fdd4 	bl	8256 <assert_post_action>
		break;
    26ae:	e7f0      	b.n	2692 <clock_event_handler+0x4a>
    26b0:	00009630 	.word	0x00009630
    26b4:	00009074 	.word	0x00009074
    26b8:	00009078 	.word	0x00009078
    26bc:	00008d60 	.word	0x00008d60

000026c0 <api_blocking_start>:
{
    26c0:	b500      	push	{lr}
    26c2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    26c4:	f8cd d000 	str.w	sp, [sp]
    26c8:	f8cd d004 	str.w	sp, [sp, #4]
    26cc:	2300      	movs	r3, #0
    26ce:	9302      	str	r3, [sp, #8]
    26d0:	2301      	movs	r3, #1
    26d2:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    26d4:	466b      	mov	r3, sp
    26d6:	4a07      	ldr	r2, [pc, #28]	; (26f4 <api_blocking_start+0x34>)
    26d8:	f005 ff8f 	bl	85fa <api_start>
	if (err < 0) {
    26dc:	2800      	cmp	r0, #0
    26de:	db05      	blt.n	26ec <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    26e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    26e4:	2300      	movs	r3, #0
    26e6:	4668      	mov	r0, sp
    26e8:	f003 fbf4 	bl	5ed4 <z_impl_k_sem_take>
}
    26ec:	b005      	add	sp, #20
    26ee:	f85d fb04 	ldr.w	pc, [sp], #4
    26f2:	bf00      	nop
    26f4:	0000864d 	.word	0x0000864d

000026f8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    26fc:	2200      	movs	r2, #0
    26fe:	2101      	movs	r1, #1
    2700:	4610      	mov	r0, r2
    2702:	f7ff fa17 	bl	1b34 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2706:	2000      	movs	r0, #0
    2708:	f7ff f9f6 	bl	1af8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    270c:	4811      	ldr	r0, [pc, #68]	; (2754 <clk_init+0x5c>)
    270e:	f001 fb65 	bl	3ddc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2712:	4b11      	ldr	r3, [pc, #68]	; (2758 <clk_init+0x60>)
    2714:	4298      	cmp	r0, r3
    2716:	d11a      	bne.n	274e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2718:	f001 fb88 	bl	3e2c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    271c:	2400      	movs	r4, #0
    271e:	e003      	b.n	2728 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2720:	2301      	movs	r3, #1
    2722:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2724:	441c      	add	r4, r3
    2726:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    2728:	2c01      	cmp	r4, #1
    272a:	d80e      	bhi.n	274a <clk_init+0x52>
						get_sub_data(dev, i);
    272c:	4621      	mov	r1, r4
    272e:	4630      	mov	r0, r6
    2730:	f005 feda 	bl	84e8 <get_sub_data>
    2734:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2736:	4621      	mov	r1, r4
    2738:	4630      	mov	r0, r6
    273a:	f005 fee0 	bl	84fe <get_onoff_manager>
    273e:	4907      	ldr	r1, [pc, #28]	; (275c <clk_init+0x64>)
    2740:	f005 fccc 	bl	80dc <onoff_manager_init>
		if (err < 0) {
    2744:	2800      	cmp	r0, #0
    2746:	daeb      	bge.n	2720 <clk_init+0x28>
    2748:	e000      	b.n	274c <clk_init+0x54>
	}

	return 0;
    274a:	2000      	movs	r0, #0
}
    274c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    274e:	f06f 0004 	mvn.w	r0, #4
    2752:	e7fb      	b.n	274c <clk_init+0x54>
    2754:	00002649 	.word	0x00002649
    2758:	0bad0000 	.word	0x0bad0000
    275c:	000096d0 	.word	0x000096d0

00002760 <lfclk_spinwait>:
{
    2760:	b570      	push	{r4, r5, r6, lr}
    2762:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2764:	2801      	cmp	r0, #1
    2766:	d107      	bne.n	2778 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    276c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2770:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2774:	2b01      	cmp	r3, #1
    2776:	d058      	beq.n	282a <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2778:	f006 fa34 	bl	8be4 <k_is_in_isr>
    277c:	b928      	cbnz	r0, 278a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    277e:	4b2e      	ldr	r3, [pc, #184]	; (2838 <lfclk_spinwait+0xd8>)
    2780:	781b      	ldrb	r3, [r3, #0]
    2782:	2b00      	cmp	r3, #0
    2784:	d041      	beq.n	280a <lfclk_spinwait+0xaa>
    2786:	2300      	movs	r3, #0
    2788:	e000      	b.n	278c <lfclk_spinwait+0x2c>
    278a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    278c:	461c      	mov	r4, r3
    278e:	2b00      	cmp	r3, #0
    2790:	d03d      	beq.n	280e <lfclk_spinwait+0xae>
	__asm__ volatile(
    2792:	f04f 0320 	mov.w	r3, #32
    2796:	f3ef 8611 	mrs	r6, BASEPRI
    279a:	f383 8812 	msr	BASEPRI_MAX, r3
    279e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    27a2:	b924      	cbnz	r4, 27ae <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    27a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27a8:	2202      	movs	r2, #2
    27aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    27ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    27b2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    27b6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    27ba:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    27be:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    27c2:	d12b      	bne.n	281c <lfclk_spinwait+0xbc>
    return false;
    27c4:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    27c6:	b11a      	cbz	r2, 27d0 <lfclk_spinwait+0x70>
    27c8:	2b01      	cmp	r3, #1
    27ca:	d029      	beq.n	2820 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    27cc:	2d01      	cmp	r5, #1
    27ce:	d027      	beq.n	2820 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    27d0:	b1fc      	cbz	r4, 2812 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    27d2:	4630      	mov	r0, r6
    27d4:	f7ff f986 	bl	1ae4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    27d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27dc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    27e0:	2b00      	cmp	r3, #0
    27e2:	d1e4      	bne.n	27ae <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    27e4:	4b15      	ldr	r3, [pc, #84]	; (283c <lfclk_spinwait+0xdc>)
    27e6:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    27e8:	2b00      	cmp	r3, #0
    27ea:	d0e0      	beq.n	27ae <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27ec:	4b13      	ldr	r3, [pc, #76]	; (283c <lfclk_spinwait+0xdc>)
    27ee:	2200      	movs	r2, #0
    27f0:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    27f2:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    27f4:	2301      	movs	r3, #1
    27f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    27fa:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27fe:	4a10      	ldr	r2, [pc, #64]	; (2840 <lfclk_spinwait+0xe0>)
    2800:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2804:	4a0f      	ldr	r2, [pc, #60]	; (2844 <lfclk_spinwait+0xe4>)
    2806:	6013      	str	r3, [r2, #0]
}
    2808:	e7d1      	b.n	27ae <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    280a:	2301      	movs	r3, #1
    280c:	e7be      	b.n	278c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    280e:	2600      	movs	r6, #0
    2810:	e7c7      	b.n	27a2 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    2812:	2021      	movs	r0, #33	; 0x21
    2814:	2100      	movs	r1, #0
    2816:	f004 fd1f 	bl	7258 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    281a:	e7dd      	b.n	27d8 <lfclk_spinwait+0x78>
                return true;
    281c:	2201      	movs	r2, #1
    281e:	e7d2      	b.n	27c6 <lfclk_spinwait+0x66>
	if (isr_mode) {
    2820:	b124      	cbz	r4, 282c <lfclk_spinwait+0xcc>
	__asm__ volatile(
    2822:	f386 8811 	msr	BASEPRI, r6
    2826:	f3bf 8f6f 	isb	sy
}
    282a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    282c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2830:	2202      	movs	r2, #2
    2832:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2836:	e7f8      	b.n	282a <lfclk_spinwait+0xca>
    2838:	20001011 	.word	0x20001011
    283c:	40000104 	.word	0x40000104
    2840:	e000e100 	.word	0xe000e100
    2844:	40000008 	.word	0x40000008

00002848 <z_nrf_clock_control_lf_on>:
{
    2848:	b538      	push	{r3, r4, r5, lr}
    284a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    284c:	4b1f      	ldr	r3, [pc, #124]	; (28cc <z_nrf_clock_control_lf_on+0x84>)
    284e:	2101      	movs	r1, #1
    2850:	f3bf 8f5b 	dmb	ish
    2854:	e853 2f00 	ldrex	r2, [r3]
    2858:	e843 1000 	strex	r0, r1, [r3]
    285c:	2800      	cmp	r0, #0
    285e:	d1f9      	bne.n	2854 <z_nrf_clock_control_lf_on+0xc>
    2860:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2864:	b142      	cbz	r2, 2878 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    2866:	b134      	cbz	r4, 2876 <z_nrf_clock_control_lf_on+0x2e>
    2868:	1e63      	subs	r3, r4, #1
    286a:	b2db      	uxtb	r3, r3
    286c:	2b01      	cmp	r3, #1
    286e:	d81e      	bhi.n	28ae <z_nrf_clock_control_lf_on+0x66>
		lfclk_spinwait(start_mode);
    2870:	4620      	mov	r0, r4
    2872:	f7ff ff75 	bl	2760 <lfclk_spinwait>
}
    2876:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    2878:	4815      	ldr	r0, [pc, #84]	; (28d0 <z_nrf_clock_control_lf_on+0x88>)
    287a:	f005 fe40 	bl	84fe <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    287e:	4915      	ldr	r1, [pc, #84]	; (28d4 <z_nrf_clock_control_lf_on+0x8c>)
    2880:	2300      	movs	r3, #0
    2882:	604b      	str	r3, [r1, #4]
    2884:	60cb      	str	r3, [r1, #12]
    2886:	2301      	movs	r3, #1
    2888:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    288a:	f7fe f8f1 	bl	a70 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    288e:	2800      	cmp	r0, #0
    2890:	dae9      	bge.n	2866 <z_nrf_clock_control_lf_on+0x1e>
    2892:	4d11      	ldr	r5, [pc, #68]	; (28d8 <z_nrf_clock_control_lf_on+0x90>)
    2894:	f44f 7308 	mov.w	r3, #544	; 0x220
    2898:	462a      	mov	r2, r5
    289a:	4910      	ldr	r1, [pc, #64]	; (28dc <z_nrf_clock_control_lf_on+0x94>)
    289c:	4810      	ldr	r0, [pc, #64]	; (28e0 <z_nrf_clock_control_lf_on+0x98>)
    289e:	f005 fb81 	bl	7fa4 <printk>
    28a2:	f44f 7108 	mov.w	r1, #544	; 0x220
    28a6:	4628      	mov	r0, r5
    28a8:	f005 fcd5 	bl	8256 <assert_post_action>
    28ac:	e7db      	b.n	2866 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    28ae:	4c0a      	ldr	r4, [pc, #40]	; (28d8 <z_nrf_clock_control_lf_on+0x90>)
    28b0:	f240 2332 	movw	r3, #562	; 0x232
    28b4:	4622      	mov	r2, r4
    28b6:	490b      	ldr	r1, [pc, #44]	; (28e4 <z_nrf_clock_control_lf_on+0x9c>)
    28b8:	4809      	ldr	r0, [pc, #36]	; (28e0 <z_nrf_clock_control_lf_on+0x98>)
    28ba:	f005 fb73 	bl	7fa4 <printk>
    28be:	f240 2132 	movw	r1, #562	; 0x232
    28c2:	4620      	mov	r0, r4
    28c4:	f005 fcc7 	bl	8256 <assert_post_action>
    28c8:	e7d5      	b.n	2876 <z_nrf_clock_control_lf_on+0x2e>
    28ca:	bf00      	nop
    28cc:	20000abc 	.word	0x20000abc
    28d0:	00008d60 	.word	0x00008d60
    28d4:	20000a50 	.word	0x20000a50
    28d8:	00009630 	.word	0x00009630
    28dc:	00009694 	.word	0x00009694
    28e0:	00009078 	.word	0x00009078
    28e4:	00009074 	.word	0x00009074

000028e8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    28e8:	b510      	push	{r4, lr}
    28ea:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    28ec:	280a      	cmp	r0, #10
    28ee:	d007      	beq.n	2900 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    28f0:	4b07      	ldr	r3, [pc, #28]	; (2910 <console_out+0x28>)
    28f2:	6818      	ldr	r0, [r3, #0]
    28f4:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    28f6:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    28f8:	685b      	ldr	r3, [r3, #4]
    28fa:	4798      	blx	r3

	return c;
}
    28fc:	4620      	mov	r0, r4
    28fe:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    2900:	4b03      	ldr	r3, [pc, #12]	; (2910 <console_out+0x28>)
    2902:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2904:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2906:	685b      	ldr	r3, [r3, #4]
    2908:	210d      	movs	r1, #13
    290a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    290c:	e7f0      	b.n	28f0 <console_out+0x8>
    290e:	bf00      	nop
    2910:	20000ac0 	.word	0x20000ac0

00002914 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    2914:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    2916:	4c04      	ldr	r4, [pc, #16]	; (2928 <uart_console_hook_install+0x14>)
    2918:	4620      	mov	r0, r4
    291a:	f7ff fd65 	bl	23e8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    291e:	4620      	mov	r0, r4
    2920:	f7fd fde2 	bl	4e8 <__printk_hook_install>
#endif
}
    2924:	bd10      	pop	{r4, pc}
    2926:	bf00      	nop
    2928:	000028e9 	.word	0x000028e9

0000292c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    292c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    292e:	4806      	ldr	r0, [pc, #24]	; (2948 <uart_console_init+0x1c>)
    2930:	4b06      	ldr	r3, [pc, #24]	; (294c <uart_console_init+0x20>)
    2932:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2934:	f006 f911 	bl	8b5a <z_device_ready>
    2938:	b118      	cbz	r0, 2942 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    293a:	f7ff ffeb 	bl	2914 <uart_console_hook_install>

	return 0;
    293e:	2000      	movs	r0, #0
}
    2940:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2942:	f06f 0012 	mvn.w	r0, #18
    2946:	e7fb      	b.n	2940 <uart_console_init+0x14>
    2948:	00008dc0 	.word	0x00008dc0
    294c:	20000ac0 	.word	0x20000ac0

00002950 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2950:	4b1f      	ldr	r3, [pc, #124]	; (29d0 <get_drive+0x80>)
    2952:	4003      	ands	r3, r0
    2954:	4a1f      	ldr	r2, [pc, #124]	; (29d4 <get_drive+0x84>)
    2956:	4293      	cmp	r3, r2
    2958:	d032      	beq.n	29c0 <get_drive+0x70>
    295a:	d816      	bhi.n	298a <get_drive+0x3a>
    295c:	2b06      	cmp	r3, #6
    295e:	d02b      	beq.n	29b8 <get_drive+0x68>
    2960:	d906      	bls.n	2970 <get_drive+0x20>
    2962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2966:	d10d      	bne.n	2984 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    2968:	2301      	movs	r3, #1
    296a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    296c:	2000      	movs	r0, #0
		break;
    296e:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2970:	b1fb      	cbz	r3, 29b2 <get_drive+0x62>
    2972:	2b02      	cmp	r3, #2
    2974:	d103      	bne.n	297e <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    2976:	2304      	movs	r3, #4
    2978:	700b      	strb	r3, [r1, #0]
	int err = 0;
    297a:	2000      	movs	r0, #0
		break;
    297c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    297e:	f06f 0015 	mvn.w	r0, #21
    2982:	4770      	bx	lr
    2984:	f06f 0015 	mvn.w	r0, #21
    2988:	4770      	bx	lr
    298a:	4a13      	ldr	r2, [pc, #76]	; (29d8 <get_drive+0x88>)
    298c:	4293      	cmp	r3, r2
    298e:	d01b      	beq.n	29c8 <get_drive+0x78>
    2990:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2994:	d103      	bne.n	299e <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    2996:	2303      	movs	r3, #3
    2998:	700b      	strb	r3, [r1, #0]
	int err = 0;
    299a:	2000      	movs	r0, #0
		break;
    299c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    299e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    29a2:	d103      	bne.n	29ac <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    29a4:	2302      	movs	r3, #2
    29a6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    29a8:	2000      	movs	r0, #0
		break;
    29aa:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29ac:	f06f 0015 	mvn.w	r0, #21
    29b0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    29b2:	2000      	movs	r0, #0
    29b4:	7008      	strb	r0, [r1, #0]
		break;
    29b6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    29b8:	2306      	movs	r3, #6
    29ba:	700b      	strb	r3, [r1, #0]
	int err = 0;
    29bc:	2000      	movs	r0, #0
		break;
    29be:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    29c0:	2307      	movs	r3, #7
    29c2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    29c4:	2000      	movs	r0, #0
		break;
    29c6:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    29c8:	2305      	movs	r3, #5
    29ca:	700b      	strb	r3, [r1, #0]
	int err = 0;
    29cc:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    29ce:	4770      	bx	lr
    29d0:	00f00006 	.word	0x00f00006
    29d4:	00100006 	.word	0x00100006
    29d8:	00400002 	.word	0x00400002

000029dc <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29dc:	b128      	cbz	r0, 29ea <get_dev+0xe>
    29de:	2801      	cmp	r0, #1
    29e0:	d101      	bne.n	29e6 <get_dev+0xa>
    29e2:	4803      	ldr	r0, [pc, #12]	; (29f0 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    29e4:	4770      	bx	lr
	const struct device *dev = NULL;
    29e6:	2000      	movs	r0, #0
    29e8:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29ea:	4802      	ldr	r0, [pc, #8]	; (29f4 <get_dev+0x18>)
    29ec:	4770      	bx	lr
    29ee:	bf00      	nop
    29f0:	00008d78 	.word	0x00008d78
    29f4:	00008d90 	.word	0x00008d90

000029f8 <gpio_nrfx_manage_callback>:
{
    29f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29fc:	4615      	mov	r5, r2
	return port->data;
    29fe:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2a00:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2a02:	460c      	mov	r4, r1
    2a04:	b139      	cbz	r1, 2a16 <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
    2a06:	6863      	ldr	r3, [r4, #4]
    2a08:	b1ab      	cbz	r3, 2a36 <gpio_nrfx_manage_callback+0x3e>
	return list->head;
    2a0a:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d03b      	beq.n	2a88 <gpio_nrfx_manage_callback+0x90>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    2a10:	4621      	mov	r1, r4
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a12:	2200      	movs	r2, #0
    2a14:	e02a      	b.n	2a6c <gpio_nrfx_manage_callback+0x74>
	__ASSERT(callback, "No callback!");
    2a16:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2ac0 <gpio_nrfx_manage_callback+0xc8>
    2a1a:	2324      	movs	r3, #36	; 0x24
    2a1c:	4642      	mov	r2, r8
    2a1e:	4923      	ldr	r1, [pc, #140]	; (2aac <gpio_nrfx_manage_callback+0xb4>)
    2a20:	4823      	ldr	r0, [pc, #140]	; (2ab0 <gpio_nrfx_manage_callback+0xb8>)
    2a22:	f005 fabf 	bl	7fa4 <printk>
    2a26:	4823      	ldr	r0, [pc, #140]	; (2ab4 <gpio_nrfx_manage_callback+0xbc>)
    2a28:	f005 fabc 	bl	7fa4 <printk>
    2a2c:	2124      	movs	r1, #36	; 0x24
    2a2e:	4640      	mov	r0, r8
    2a30:	f005 fc11 	bl	8256 <assert_post_action>
    2a34:	e7e7      	b.n	2a06 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    2a36:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2ac0 <gpio_nrfx_manage_callback+0xc8>
    2a3a:	2325      	movs	r3, #37	; 0x25
    2a3c:	4642      	mov	r2, r8
    2a3e:	491e      	ldr	r1, [pc, #120]	; (2ab8 <gpio_nrfx_manage_callback+0xc0>)
    2a40:	481b      	ldr	r0, [pc, #108]	; (2ab0 <gpio_nrfx_manage_callback+0xb8>)
    2a42:	f005 faaf 	bl	7fa4 <printk>
    2a46:	481d      	ldr	r0, [pc, #116]	; (2abc <gpio_nrfx_manage_callback+0xc4>)
    2a48:	f005 faac 	bl	7fa4 <printk>
    2a4c:	2125      	movs	r1, #37	; 0x25
    2a4e:	4640      	mov	r0, r8
    2a50:	f005 fc01 	bl	8256 <assert_post_action>
    2a54:	e7d9      	b.n	2a0a <gpio_nrfx_manage_callback+0x12>
	return node->next;
    2a56:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    2a58:	6073      	str	r3, [r6, #4]
	return list->tail;
    2a5a:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2a5c:	4294      	cmp	r4, r2
    2a5e:	d10f      	bne.n	2a80 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
    2a60:	607b      	str	r3, [r7, #4]
}
    2a62:	e00d      	b.n	2a80 <gpio_nrfx_manage_callback+0x88>
	list->tail = node;
    2a64:	607a      	str	r2, [r7, #4]
}
    2a66:	e00b      	b.n	2a80 <gpio_nrfx_manage_callback+0x88>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a68:	461a      	mov	r2, r3
    2a6a:	681b      	ldr	r3, [r3, #0]
    2a6c:	b15b      	cbz	r3, 2a86 <gpio_nrfx_manage_callback+0x8e>
    2a6e:	4299      	cmp	r1, r3
    2a70:	d1fa      	bne.n	2a68 <gpio_nrfx_manage_callback+0x70>
Z_GENLIST_REMOVE(slist, snode)
    2a72:	2a00      	cmp	r2, #0
    2a74:	d0ef      	beq.n	2a56 <gpio_nrfx_manage_callback+0x5e>
	return node->next;
    2a76:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    2a78:	6013      	str	r3, [r2, #0]
	return list->tail;
    2a7a:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2a7c:	429c      	cmp	r4, r3
    2a7e:	d0f1      	beq.n	2a64 <gpio_nrfx_manage_callback+0x6c>
	parent->next = child;
    2a80:	2300      	movs	r3, #0
    2a82:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a84:	e000      	b.n	2a88 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    2a86:	b155      	cbz	r5, 2a9e <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    2a88:	b165      	cbz	r5, 2aa4 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    2a8a:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
    2a8c:	6023      	str	r3, [r4, #0]
	list->head = node;
    2a8e:	6074      	str	r4, [r6, #4]
	return list->tail;
    2a90:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    2a92:	b10b      	cbz	r3, 2a98 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2a94:	2000      	movs	r0, #0
    2a96:	e006      	b.n	2aa6 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    2a98:	607c      	str	r4, [r7, #4]
    2a9a:	2000      	movs	r0, #0
}
    2a9c:	e003      	b.n	2aa6 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    2a9e:	f06f 0015 	mvn.w	r0, #21
    2aa2:	e000      	b.n	2aa6 <gpio_nrfx_manage_callback+0xae>
	return 0;
    2aa4:	2000      	movs	r0, #0
}
    2aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2aaa:	bf00      	nop
    2aac:	0000970c 	.word	0x0000970c
    2ab0:	00009078 	.word	0x00009078
    2ab4:	00009718 	.word	0x00009718
    2ab8:	00009728 	.word	0x00009728
    2abc:	0000973c 	.word	0x0000973c
    2ac0:	000096dc 	.word	0x000096dc

00002ac4 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2ac8:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    2acc:	0940      	lsrs	r0, r0, #5
    2ace:	f7ff ff85 	bl	29dc <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    2ad2:	b380      	cbz	r0, 2b36 <nrfx_gpio_handler+0x72>
    2ad4:	4607      	mov	r7, r0
	return port->data;
    2ad6:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    2ad8:	2601      	movs	r6, #1
    2ada:	40a6      	lsls	r6, r4
	return list->head;
    2adc:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2ade:	b11c      	cbz	r4, 2ae8 <nrfx_gpio_handler+0x24>
    2ae0:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    2ae2:	b17c      	cbz	r4, 2b04 <nrfx_gpio_handler+0x40>
	return node->next;
    2ae4:	6825      	ldr	r5, [r4, #0]
    2ae6:	e00d      	b.n	2b04 <nrfx_gpio_handler+0x40>
    2ae8:	4625      	mov	r5, r4
    2aea:	e00b      	b.n	2b04 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2aec:	6863      	ldr	r3, [r4, #4]
    2aee:	68a2      	ldr	r2, [r4, #8]
    2af0:	4032      	ands	r2, r6
    2af2:	4621      	mov	r1, r4
    2af4:	4638      	mov	r0, r7
    2af6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2af8:	b1dd      	cbz	r5, 2b32 <nrfx_gpio_handler+0x6e>
    2afa:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2afc:	b105      	cbz	r5, 2b00 <nrfx_gpio_handler+0x3c>
	return node->next;
    2afe:	682b      	ldr	r3, [r5, #0]
    2b00:	462c      	mov	r4, r5
    2b02:	461d      	mov	r5, r3
    2b04:	b1bc      	cbz	r4, 2b36 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    2b06:	68a3      	ldr	r3, [r4, #8]
    2b08:	421e      	tst	r6, r3
    2b0a:	d0f5      	beq.n	2af8 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    2b0c:	6863      	ldr	r3, [r4, #4]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d1ec      	bne.n	2aec <nrfx_gpio_handler+0x28>
    2b12:	f8df 8034 	ldr.w	r8, [pc, #52]	; 2b48 <nrfx_gpio_handler+0x84>
    2b16:	2345      	movs	r3, #69	; 0x45
    2b18:	4642      	mov	r2, r8
    2b1a:	4908      	ldr	r1, [pc, #32]	; (2b3c <nrfx_gpio_handler+0x78>)
    2b1c:	4808      	ldr	r0, [pc, #32]	; (2b40 <nrfx_gpio_handler+0x7c>)
    2b1e:	f005 fa41 	bl	7fa4 <printk>
    2b22:	4808      	ldr	r0, [pc, #32]	; (2b44 <nrfx_gpio_handler+0x80>)
    2b24:	f005 fa3e 	bl	7fa4 <printk>
    2b28:	2145      	movs	r1, #69	; 0x45
    2b2a:	4640      	mov	r0, r8
    2b2c:	f005 fb93 	bl	8256 <assert_post_action>
    2b30:	e7dc      	b.n	2aec <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b32:	462b      	mov	r3, r5
    2b34:	e7e4      	b.n	2b00 <nrfx_gpio_handler+0x3c>
}
    2b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b3a:	bf00      	nop
    2b3c:	00009754 	.word	0x00009754
    2b40:	00009078 	.word	0x00009078
    2b44:	0000973c 	.word	0x0000973c
    2b48:	000096dc 	.word	0x000096dc

00002b4c <gpio_nrfx_pin_interrupt_configure>:
{
    2b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b4e:	b085      	sub	sp, #20
    2b50:	460e      	mov	r6, r1
    2b52:	4619      	mov	r1, r3
	return port->config;
    2b54:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b56:	7b1b      	ldrb	r3, [r3, #12]
    2b58:	f006 041f 	and.w	r4, r6, #31
    2b5c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b60:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2b64:	d022      	beq.n	2bac <gpio_nrfx_pin_interrupt_configure+0x60>
    2b66:	4607      	mov	r7, r0
    2b68:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b6a:	2300      	movs	r3, #0
    2b6c:	9302      	str	r3, [sp, #8]
    2b6e:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    2b70:	4610      	mov	r0, r2
    2b72:	f005 fda3 	bl	86bc <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b76:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    2b7a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2b7c:	6899      	ldr	r1, [r3, #8]
    2b7e:	40f1      	lsrs	r1, r6
    2b80:	f011 0101 	ands.w	r1, r1, #1
    2b84:	d102      	bne.n	2b8c <gpio_nrfx_pin_interrupt_configure+0x40>
    2b86:	f5b5 3fa0 	cmp.w	r5, #81920	; 0x14000
    2b8a:	d014      	beq.n	2bb6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b8c:	2300      	movs	r3, #0
    2b8e:	aa02      	add	r2, sp, #8
    2b90:	4619      	mov	r1, r3
    2b92:	4620      	mov	r0, r4
    2b94:	f001 fe5a 	bl	484c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2b98:	4b32      	ldr	r3, [pc, #200]	; (2c64 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2b9a:	4298      	cmp	r0, r3
    2b9c:	d15f      	bne.n	2c5e <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2b9e:	2101      	movs	r1, #1
    2ba0:	4620      	mov	r0, r4
    2ba2:	f002 f8b5 	bl	4d10 <nrfx_gpiote_trigger_enable>
	return 0;
    2ba6:	2000      	movs	r0, #0
}
    2ba8:	b005      	add	sp, #20
    2baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2bac:	4620      	mov	r0, r4
    2bae:	f002 f9bb 	bl	4f28 <nrfx_gpiote_trigger_disable>
		return 0;
    2bb2:	2000      	movs	r0, #0
    2bb4:	e7f8      	b.n	2ba8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    2bb6:	0963      	lsrs	r3, r4, #5
    2bb8:	d01f      	beq.n	2bfa <gpio_nrfx_pin_interrupt_configure+0xae>
    2bba:	2b01      	cmp	r3, #1
    2bbc:	d101      	bne.n	2bc2 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    2bbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    2bc2:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2bc6:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2bc8:	f011 0f01 	tst.w	r1, #1
    2bcc:	d018      	beq.n	2c00 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    2bce:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2bd2:	0963      	lsrs	r3, r4, #5
    2bd4:	d022      	beq.n	2c1c <gpio_nrfx_pin_interrupt_configure+0xd0>
    2bd6:	2b01      	cmp	r3, #1
    2bd8:	d023      	beq.n	2c22 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    2bda:	4e23      	ldr	r6, [pc, #140]	; (2c68 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2bdc:	f240 232e 	movw	r3, #558	; 0x22e
    2be0:	4632      	mov	r2, r6
    2be2:	4922      	ldr	r1, [pc, #136]	; (2c6c <gpio_nrfx_pin_interrupt_configure+0x120>)
    2be4:	4822      	ldr	r0, [pc, #136]	; (2c70 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2be6:	f005 f9dd 	bl	7fa4 <printk>
    2bea:	f240 212e 	movw	r1, #558	; 0x22e
    2bee:	4630      	mov	r0, r6
    2bf0:	f005 fb31 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    2bf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2bf8:	e014      	b.n	2c24 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    2bfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2bfe:	e7e0      	b.n	2bc2 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c00:	4d19      	ldr	r5, [pc, #100]	; (2c68 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2c02:	f240 2329 	movw	r3, #553	; 0x229
    2c06:	462a      	mov	r2, r5
    2c08:	491a      	ldr	r1, [pc, #104]	; (2c74 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2c0a:	4819      	ldr	r0, [pc, #100]	; (2c70 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2c0c:	f005 f9ca 	bl	7fa4 <printk>
    2c10:	f240 2129 	movw	r1, #553	; 0x229
    2c14:	4628      	mov	r0, r5
    2c16:	f005 fb1e 	bl	8256 <assert_post_action>
    2c1a:	e7d8      	b.n	2bce <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    2c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2c20:	e000      	b.n	2c24 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c22:	4b15      	ldr	r3, [pc, #84]	; (2c78 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2c24:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2c28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2c2c:	f013 0f01 	tst.w	r3, #1
    2c30:	d1ac      	bne.n	2b8c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2c32:	f10d 0107 	add.w	r1, sp, #7
    2c36:	4620      	mov	r0, r4
    2c38:	f001 fffa 	bl	4c30 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2c3c:	4b0f      	ldr	r3, [pc, #60]	; (2c7c <gpio_nrfx_pin_interrupt_configure+0x130>)
    2c3e:	4298      	cmp	r0, r3
    2c40:	d003      	beq.n	2c4a <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    2c42:	f10d 0307 	add.w	r3, sp, #7
    2c46:	9303      	str	r3, [sp, #12]
    2c48:	e7a0      	b.n	2b8c <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    2c4a:	f10d 0007 	add.w	r0, sp, #7
    2c4e:	f002 f857 	bl	4d00 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2c52:	4b04      	ldr	r3, [pc, #16]	; (2c64 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2c54:	4298      	cmp	r0, r3
    2c56:	d0f4      	beq.n	2c42 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    2c58:	f06f 000b 	mvn.w	r0, #11
    2c5c:	e7a4      	b.n	2ba8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    2c5e:	f06f 0004 	mvn.w	r0, #4
    2c62:	e7a1      	b.n	2ba8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2c64:	0bad0000 	.word	0x0bad0000
    2c68:	00009760 	.word	0x00009760
    2c6c:	00009074 	.word	0x00009074
    2c70:	00009078 	.word	0x00009078
    2c74:	00009794 	.word	0x00009794
    2c78:	50000300 	.word	0x50000300
    2c7c:	0bad0004 	.word	0x0bad0004

00002c80 <pin_uninit>:
{
    2c80:	b530      	push	{r4, r5, lr}
    2c82:	b083      	sub	sp, #12
    2c84:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2c86:	f10d 0107 	add.w	r1, sp, #7
    2c8a:	f001 ffd1 	bl	4c30 <nrfx_gpiote_channel_get>
    2c8e:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2c90:	4620      	mov	r0, r4
    2c92:	f002 f9b1 	bl	4ff8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2c96:	4b0b      	ldr	r3, [pc, #44]	; (2cc4 <pin_uninit+0x44>)
    2c98:	4298      	cmp	r0, r3
    2c9a:	d10f      	bne.n	2cbc <pin_uninit+0x3c>
	if (free_ch) {
    2c9c:	429d      	cmp	r5, r3
    2c9e:	d005      	beq.n	2cac <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2ca0:	4b08      	ldr	r3, [pc, #32]	; (2cc4 <pin_uninit+0x44>)
    2ca2:	4298      	cmp	r0, r3
    2ca4:	d107      	bne.n	2cb6 <pin_uninit+0x36>
    2ca6:	2000      	movs	r0, #0
}
    2ca8:	b003      	add	sp, #12
    2caa:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    2cac:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2cb0:	f002 f81e 	bl	4cf0 <nrfx_gpiote_channel_free>
    2cb4:	e7f4      	b.n	2ca0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2cb6:	f06f 0004 	mvn.w	r0, #4
    2cba:	e7f5      	b.n	2ca8 <pin_uninit+0x28>
		return -EIO;
    2cbc:	f06f 0004 	mvn.w	r0, #4
    2cc0:	e7f2      	b.n	2ca8 <pin_uninit+0x28>
    2cc2:	bf00      	nop
    2cc4:	0bad0000 	.word	0x0bad0000

00002cc8 <gpio_nrfx_pin_configure>:
{
    2cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ccc:	b087      	sub	sp, #28
	return port->config;
    2cce:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2cd2:	f898 300c 	ldrb.w	r3, [r8, #12]
    2cd6:	f001 051f 	and.w	r5, r1, #31
    2cda:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2cde:	2a00      	cmp	r2, #0
    2ce0:	d044      	beq.n	2d6c <gpio_nrfx_pin_configure+0xa4>
    2ce2:	460c      	mov	r4, r1
    2ce4:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2ce6:	2600      	movs	r6, #0
    2ce8:	9603      	str	r6, [sp, #12]
    2cea:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cec:	f10d 0117 	add.w	r1, sp, #23
    2cf0:	4620      	mov	r0, r4
    2cf2:	f001 ff9d 	bl	4c30 <nrfx_gpiote_channel_get>
    2cf6:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2cf8:	4633      	mov	r3, r6
    2cfa:	aa03      	add	r2, sp, #12
    2cfc:	4631      	mov	r1, r6
    2cfe:	4628      	mov	r0, r5
    2d00:	f001 fda4 	bl	484c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d04:	4b30      	ldr	r3, [pc, #192]	; (2dc8 <gpio_nrfx_pin_configure+0x100>)
    2d06:	4298      	cmp	r0, r3
    2d08:	d15b      	bne.n	2dc2 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    2d0a:	4599      	cmp	r9, r3
    2d0c:	d036      	beq.n	2d7c <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    2d0e:	f417 7f00 	tst.w	r7, #512	; 0x200
    2d12:	d043      	beq.n	2d9c <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    2d14:	f10d 0103 	add.w	r1, sp, #3
    2d18:	4638      	mov	r0, r7
    2d1a:	f7ff fe19 	bl	2950 <get_drive>
		if (rv != 0) {
    2d1e:	4606      	mov	r6, r0
    2d20:	bb40      	cbnz	r0, 2d74 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    2d22:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2d26:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2d2a:	f417 7f80 	tst.w	r7, #256	; 0x100
    2d2e:	bf0c      	ite	eq
    2d30:	2301      	moveq	r3, #1
    2d32:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2d34:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2d38:	4638      	mov	r0, r7
    2d3a:	f005 fc8c 	bl	8656 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2d3e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d42:	f417 6f00 	tst.w	r7, #2048	; 0x800
    2d46:	d01e      	beq.n	2d86 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2d48:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2d4c:	2101      	movs	r1, #1
    2d4e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    2d52:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2d56:	2200      	movs	r2, #0
    2d58:	a901      	add	r1, sp, #4
    2d5a:	4628      	mov	r0, r5
    2d5c:	f001 fe68 	bl	4a30 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2d60:	4b19      	ldr	r3, [pc, #100]	; (2dc8 <gpio_nrfx_pin_configure+0x100>)
    2d62:	4298      	cmp	r0, r3
    2d64:	d006      	beq.n	2d74 <gpio_nrfx_pin_configure+0xac>
    2d66:	f06f 0615 	mvn.w	r6, #21
    2d6a:	e003      	b.n	2d74 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    2d6c:	4628      	mov	r0, r5
    2d6e:	f7ff ff87 	bl	2c80 <pin_uninit>
    2d72:	4606      	mov	r6, r0
}
    2d74:	4630      	mov	r0, r6
    2d76:	b007      	add	sp, #28
    2d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    2d7c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2d80:	f001 ffb6 	bl	4cf0 <nrfx_gpiote_channel_free>
    2d84:	e7c3      	b.n	2d0e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2d86:	f417 6f80 	tst.w	r7, #1024	; 0x400
    2d8a:	d0e4      	beq.n	2d56 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2d8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2d90:	2301      	movs	r3, #1
    2d92:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    2d96:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    2d9a:	e7dc      	b.n	2d56 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    2d9c:	4638      	mov	r0, r7
    2d9e:	f005 fc5a 	bl	8656 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2da2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2da6:	2300      	movs	r3, #0
    2da8:	461a      	mov	r2, r3
    2daa:	a902      	add	r1, sp, #8
    2dac:	4628      	mov	r0, r5
    2dae:	f001 fd4d 	bl	484c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2db2:	4b05      	ldr	r3, [pc, #20]	; (2dc8 <gpio_nrfx_pin_configure+0x100>)
    2db4:	4298      	cmp	r0, r3
    2db6:	d101      	bne.n	2dbc <gpio_nrfx_pin_configure+0xf4>
    2db8:	2600      	movs	r6, #0
    2dba:	e7db      	b.n	2d74 <gpio_nrfx_pin_configure+0xac>
    2dbc:	f06f 0615 	mvn.w	r6, #21
    2dc0:	e7d8      	b.n	2d74 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    2dc2:	f06f 0615 	mvn.w	r6, #21
    2dc6:	e7d5      	b.n	2d74 <gpio_nrfx_pin_configure+0xac>
    2dc8:	0bad0000 	.word	0x0bad0000

00002dcc <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2dcc:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2dce:	f001 ff85 	bl	4cdc <nrfx_gpiote_is_init>
    2dd2:	b108      	cbz	r0, 2dd8 <gpio_nrfx_init+0xc>
		return 0;
    2dd4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2dd6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2dd8:	f001 ff56 	bl	4c88 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2ddc:	4b08      	ldr	r3, [pc, #32]	; (2e00 <gpio_nrfx_init+0x34>)
    2dde:	4298      	cmp	r0, r3
    2de0:	d10a      	bne.n	2df8 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2de2:	2100      	movs	r1, #0
    2de4:	4807      	ldr	r0, [pc, #28]	; (2e04 <gpio_nrfx_init+0x38>)
    2de6:	f001 ff1d 	bl	4c24 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2dea:	2200      	movs	r2, #0
    2dec:	2105      	movs	r1, #5
    2dee:	2006      	movs	r0, #6
    2df0:	f7fe fea0 	bl	1b34 <z_arm_irq_priority_set>
	return 0;
    2df4:	2000      	movs	r0, #0
    2df6:	e7ee      	b.n	2dd6 <gpio_nrfx_init+0xa>
		return -EIO;
    2df8:	f06f 0004 	mvn.w	r0, #4
    2dfc:	e7eb      	b.n	2dd6 <gpio_nrfx_init+0xa>
    2dfe:	bf00      	nop
    2e00:	0bad0000 	.word	0x0bad0000
    2e04:	00002ac5 	.word	0x00002ac5

00002e08 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    2e08:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    2e0a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2e0c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2e10:	d06f      	beq.n	2ef2 <baudrate_set+0xea>
    2e12:	d83a      	bhi.n	2e8a <baudrate_set+0x82>
    2e14:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2e18:	d06e      	beq.n	2ef8 <baudrate_set+0xf0>
    2e1a:	d90a      	bls.n	2e32 <baudrate_set+0x2a>
    2e1c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2e20:	d075      	beq.n	2f0e <baudrate_set+0x106>
    2e22:	d924      	bls.n	2e6e <baudrate_set+0x66>
    2e24:	f647 2312 	movw	r3, #31250	; 0x7a12
    2e28:	4299      	cmp	r1, r3
    2e2a:	d12b      	bne.n	2e84 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2e2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2e30:	e013      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2e32:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2e36:	d061      	beq.n	2efc <baudrate_set+0xf4>
    2e38:	d907      	bls.n	2e4a <baudrate_set+0x42>
    2e3a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2e3e:	d063      	beq.n	2f08 <baudrate_set+0x100>
    2e40:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2e44:	d110      	bne.n	2e68 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2e46:	4b3c      	ldr	r3, [pc, #240]	; (2f38 <baudrate_set+0x130>)
    2e48:	e007      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2e4a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2e4e:	d058      	beq.n	2f02 <baudrate_set+0xfa>
    2e50:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2e54:	d105      	bne.n	2e62 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2e56:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2e5a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2e5e:	2000      	movs	r0, #0
    2e60:	4770      	bx	lr
	switch (baudrate) {
    2e62:	f06f 0015 	mvn.w	r0, #21
    2e66:	4770      	bx	lr
    2e68:	f06f 0015 	mvn.w	r0, #21
    2e6c:	4770      	bx	lr
    2e6e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2e72:	d04e      	beq.n	2f12 <baudrate_set+0x10a>
    2e74:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2e78:	d101      	bne.n	2e7e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2e7a:	4b30      	ldr	r3, [pc, #192]	; (2f3c <baudrate_set+0x134>)
    2e7c:	e7ed      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2e7e:	f06f 0015 	mvn.w	r0, #21
    2e82:	4770      	bx	lr
    2e84:	f06f 0015 	mvn.w	r0, #21
    2e88:	4770      	bx	lr
    2e8a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2e8e:	d042      	beq.n	2f16 <baudrate_set+0x10e>
    2e90:	d909      	bls.n	2ea6 <baudrate_set+0x9e>
    2e92:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2e96:	d046      	beq.n	2f26 <baudrate_set+0x11e>
    2e98:	d91f      	bls.n	2eda <baudrate_set+0xd2>
    2e9a:	4b29      	ldr	r3, [pc, #164]	; (2f40 <baudrate_set+0x138>)
    2e9c:	4299      	cmp	r1, r3
    2e9e:	d148      	bne.n	2f32 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2ea4:	e7d9      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2ea6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2eaa:	d037      	beq.n	2f1c <baudrate_set+0x114>
    2eac:	d905      	bls.n	2eba <baudrate_set+0xb2>
    2eae:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2eb2:	d10f      	bne.n	2ed4 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2eb4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2eb8:	e7cf      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2eba:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2ebe:	4299      	cmp	r1, r3
    2ec0:	d02e      	beq.n	2f20 <baudrate_set+0x118>
    2ec2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2ec6:	d102      	bne.n	2ece <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2ec8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2ecc:	e7c5      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2ece:	f06f 0015 	mvn.w	r0, #21
    2ed2:	4770      	bx	lr
    2ed4:	f06f 0015 	mvn.w	r0, #21
    2ed8:	4770      	bx	lr
    2eda:	4b1a      	ldr	r3, [pc, #104]	; (2f44 <baudrate_set+0x13c>)
    2edc:	4299      	cmp	r1, r3
    2ede:	d025      	beq.n	2f2c <baudrate_set+0x124>
    2ee0:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2ee4:	d102      	bne.n	2eec <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2ee6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2eea:	e7b6      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2eec:	f06f 0015 	mvn.w	r0, #21
    2ef0:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2ef2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2ef6:	e7b0      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2ef8:	4b13      	ldr	r3, [pc, #76]	; (2f48 <baudrate_set+0x140>)
    2efa:	e7ae      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2efc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2f00:	e7ab      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2f02:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2f06:	e7a8      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2f08:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2f0c:	e7a5      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2f0e:	4b0f      	ldr	r3, [pc, #60]	; (2f4c <baudrate_set+0x144>)
    2f10:	e7a3      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2f12:	4b0f      	ldr	r3, [pc, #60]	; (2f50 <baudrate_set+0x148>)
    2f14:	e7a1      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2f16:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2f1a:	e79e      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2f1c:	4b0d      	ldr	r3, [pc, #52]	; (2f54 <baudrate_set+0x14c>)
    2f1e:	e79c      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2f20:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2f24:	e799      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2f26:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2f2a:	e796      	b.n	2e5a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2f2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2f30:	e793      	b.n	2e5a <baudrate_set+0x52>
	switch (baudrate) {
    2f32:	f06f 0015 	mvn.w	r0, #21
}
    2f36:	4770      	bx	lr
    2f38:	0013b000 	.word	0x0013b000
    2f3c:	004ea000 	.word	0x004ea000
    2f40:	000f4240 	.word	0x000f4240
    2f44:	0003d090 	.word	0x0003d090
    2f48:	00275000 	.word	0x00275000
    2f4c:	0075c000 	.word	0x0075c000
    2f50:	003af000 	.word	0x003af000
    2f54:	013a9000 	.word	0x013a9000

00002f58 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f5c:	4605      	mov	r5, r0
    2f5e:	460f      	mov	r7, r1
	return dev->data;
    2f60:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2f64:	f005 fe3e 	bl	8be4 <k_is_in_isr>
    2f68:	b920      	cbnz	r0, 2f74 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    2f6a:	4b16      	ldr	r3, [pc, #88]	; (2fc4 <uarte_nrfx_poll_out+0x6c>)
    2f6c:	781b      	ldrb	r3, [r3, #0]
    2f6e:	b1ab      	cbz	r3, 2f9c <uarte_nrfx_poll_out+0x44>
    2f70:	2300      	movs	r3, #0
    2f72:	e000      	b.n	2f76 <uarte_nrfx_poll_out+0x1e>
    2f74:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    2f76:	b19b      	cbz	r3, 2fa0 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    2f78:	f04f 0320 	mov.w	r3, #32
    2f7c:	f3ef 8411 	mrs	r4, BASEPRI
    2f80:	f383 8812 	msr	BASEPRI_MAX, r3
    2f84:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    2f88:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    2f8a:	4628      	mov	r0, r5
    2f8c:	f005 fc52 	bl	8834 <is_tx_ready>
    2f90:	b950      	cbnz	r0, 2fa8 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    2f92:	f384 8811 	msr	BASEPRI, r4
    2f96:	f3bf 8f6f 	isb	sy
}
    2f9a:	e7ed      	b.n	2f78 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2f9c:	2301      	movs	r3, #1
    2f9e:	e7ea      	b.n	2f76 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2fa0:	4628      	mov	r0, r5
    2fa2:	f005 fc96 	bl	88d2 <wait_tx_ready>
    2fa6:	4606      	mov	r6, r0
	}

	data->char_out = c;
    2fa8:	4641      	mov	r1, r8
    2faa:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    2fae:	2201      	movs	r2, #1
    2fb0:	4628      	mov	r0, r5
    2fb2:	f005 fc59 	bl	8868 <tx_start>
	__asm__ volatile(
    2fb6:	f386 8811 	msr	BASEPRI, r6
    2fba:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fc2:	bf00      	nop
    2fc4:	20001011 	.word	0x20001011

00002fc8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2fc8:	b538      	push	{r3, r4, r5, lr}
    2fca:	4604      	mov	r4, r0
    2fcc:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2fce:	f101 0012 	add.w	r0, r1, #18
    2fd2:	f002 f89d 	bl	5110 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2fd6:	4b0c      	ldr	r3, [pc, #48]	; (3008 <endtx_stoptx_ppi_init+0x40>)
    2fd8:	4298      	cmp	r0, r3
    2fda:	d111      	bne.n	3000 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2fdc:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2fde:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    2fe2:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2fe4:	4a09      	ldr	r2, [pc, #36]	; (300c <endtx_stoptx_ppi_init+0x44>)
    2fe6:	33a2      	adds	r3, #162	; 0xa2
    2fe8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2fec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2ff0:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2ff2:	7ca9      	ldrb	r1, [r5, #18]
    2ff4:	2301      	movs	r3, #1
    2ff6:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    2ff8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    2ffc:	2000      	movs	r0, #0
}
    2ffe:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    3000:	f06f 0004 	mvn.w	r0, #4
    3004:	e7fb      	b.n	2ffe <endtx_stoptx_ppi_init+0x36>
    3006:	bf00      	nop
    3008:	0bad0000 	.word	0x0bad0000
    300c:	4001f000 	.word	0x4001f000

00003010 <uarte_nrfx_pins_configure>:
{
    3010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    3012:	6844      	ldr	r4, [r0, #4]
	if (!sleep) {
    3014:	2900      	cmp	r1, #0
    3016:	f040 81ba 	bne.w	338e <uarte_nrfx_pins_configure+0x37e>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    301a:	68e5      	ldr	r5, [r4, #12]
    301c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3020:	d130      	bne.n	3084 <uarte_nrfx_pins_configure+0x74>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3022:	6925      	ldr	r5, [r4, #16]
    3024:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3028:	f000 80c7 	beq.w	31ba <uarte_nrfx_pins_configure+0x1aa>
					   (cfg->rx_pull_up ?
    302c:	7f23      	ldrb	r3, [r4, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    302e:	2b00      	cmp	r3, #0
    3030:	f000 80a5 	beq.w	317e <uarte_nrfx_pins_configure+0x16e>
    3034:	2603      	movs	r6, #3
    switch (port)
    3036:	096b      	lsrs	r3, r5, #5
    3038:	f000 80a3 	beq.w	3182 <uarte_nrfx_pins_configure+0x172>
    303c:	2b01      	cmp	r3, #1
    303e:	f040 80a3 	bne.w	3188 <uarte_nrfx_pins_configure+0x178>
            mask = P1_FEATURE_PINS_PRESENT;
    3042:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3046:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    304a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    304c:	f013 0f01 	tst.w	r3, #1
    3050:	f000 809c 	beq.w	318c <uarte_nrfx_pins_configure+0x17c>
    *p_pin = pin_number & 0x1F;
    3054:	f005 071f 	and.w	r7, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3058:	096d      	lsrs	r5, r5, #5
    305a:	f000 80a5 	beq.w	31a8 <uarte_nrfx_pins_configure+0x198>
    305e:	2d01      	cmp	r5, #1
    3060:	f000 80a5 	beq.w	31ae <uarte_nrfx_pins_configure+0x19e>
            NRFX_ASSERT(0);
    3064:	4dba      	ldr	r5, [pc, #744]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    3066:	f240 232e 	movw	r3, #558	; 0x22e
    306a:	462a      	mov	r2, r5
    306c:	49b9      	ldr	r1, [pc, #740]	; (3354 <uarte_nrfx_pins_configure+0x344>)
    306e:	48ba      	ldr	r0, [pc, #744]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    3070:	f004 ff98 	bl	7fa4 <printk>
    3074:	f240 212e 	movw	r1, #558	; 0x22e
    3078:	4628      	mov	r0, r5
    307a:	f005 f8ec 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    307e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3082:	e095      	b.n	31b0 <uarte_nrfx_pins_configure+0x1a0>
    switch (port)
    3084:	096b      	lsrs	r3, r5, #5
    3086:	d01f      	beq.n	30c8 <uarte_nrfx_pins_configure+0xb8>
    3088:	2b01      	cmp	r3, #1
    308a:	d120      	bne.n	30ce <uarte_nrfx_pins_configure+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    308c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3090:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3094:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3096:	f013 0f01 	tst.w	r3, #1
    309a:	d01a      	beq.n	30d2 <uarte_nrfx_pins_configure+0xc2>
    *p_pin = pin_number & 0x1F;
    309c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30a0:	096d      	lsrs	r5, r5, #5
    30a2:	d024      	beq.n	30ee <uarte_nrfx_pins_configure+0xde>
    30a4:	2d01      	cmp	r5, #1
    30a6:	d025      	beq.n	30f4 <uarte_nrfx_pins_configure+0xe4>
            NRFX_ASSERT(0);
    30a8:	4da9      	ldr	r5, [pc, #676]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    30aa:	f240 232e 	movw	r3, #558	; 0x22e
    30ae:	462a      	mov	r2, r5
    30b0:	49a8      	ldr	r1, [pc, #672]	; (3354 <uarte_nrfx_pins_configure+0x344>)
    30b2:	48a9      	ldr	r0, [pc, #676]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    30b4:	f004 ff76 	bl	7fa4 <printk>
    30b8:	f240 212e 	movw	r1, #558	; 0x22e
    30bc:	4628      	mov	r0, r5
    30be:	f005 f8ca 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    30c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    30c6:	e016      	b.n	30f6 <uarte_nrfx_pins_configure+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    30c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30cc:	e7e0      	b.n	3090 <uarte_nrfx_pins_configure+0x80>
    switch (port)
    30ce:	2300      	movs	r3, #0
    30d0:	e7de      	b.n	3090 <uarte_nrfx_pins_configure+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    30d2:	4e9f      	ldr	r6, [pc, #636]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    30d4:	f240 2329 	movw	r3, #553	; 0x229
    30d8:	4632      	mov	r2, r6
    30da:	49a0      	ldr	r1, [pc, #640]	; (335c <uarte_nrfx_pins_configure+0x34c>)
    30dc:	489e      	ldr	r0, [pc, #632]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    30de:	f004 ff61 	bl	7fa4 <printk>
    30e2:	f240 2129 	movw	r1, #553	; 0x229
    30e6:	4630      	mov	r0, r6
    30e8:	f005 f8b5 	bl	8256 <assert_post_action>
    30ec:	e7d6      	b.n	309c <uarte_nrfx_pins_configure+0x8c>
        case 0: return NRF_P0;
    30ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    30f2:	e000      	b.n	30f6 <uarte_nrfx_pins_configure+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30f4:	4a9a      	ldr	r2, [pc, #616]	; (3360 <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    30f6:	2301      	movs	r3, #1
    30f8:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    30fa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->tx_pin);
    30fe:	68e5      	ldr	r5, [r4, #12]
    switch (port)
    3100:	096b      	lsrs	r3, r5, #5
    3102:	d01f      	beq.n	3144 <uarte_nrfx_pins_configure+0x134>
    3104:	2b01      	cmp	r3, #1
    3106:	d120      	bne.n	314a <uarte_nrfx_pins_configure+0x13a>
            mask = P1_FEATURE_PINS_PRESENT;
    3108:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    310c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3110:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3112:	f013 0f01 	tst.w	r3, #1
    3116:	d01a      	beq.n	314e <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
    3118:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    311c:	096d      	lsrs	r5, r5, #5
    311e:	d024      	beq.n	316a <uarte_nrfx_pins_configure+0x15a>
    3120:	2d01      	cmp	r5, #1
    3122:	d025      	beq.n	3170 <uarte_nrfx_pins_configure+0x160>
            NRFX_ASSERT(0);
    3124:	4d8a      	ldr	r5, [pc, #552]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    3126:	f240 232e 	movw	r3, #558	; 0x22e
    312a:	462a      	mov	r2, r5
    312c:	4989      	ldr	r1, [pc, #548]	; (3354 <uarte_nrfx_pins_configure+0x344>)
    312e:	488a      	ldr	r0, [pc, #552]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    3130:	f004 ff38 	bl	7fa4 <printk>
    3134:	f240 212e 	movw	r1, #558	; 0x22e
    3138:	4628      	mov	r0, r5
    313a:	f005 f88c 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    313e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3142:	e016      	b.n	3172 <uarte_nrfx_pins_configure+0x162>
            mask = P0_FEATURE_PINS_PRESENT;
    3144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3148:	e7e0      	b.n	310c <uarte_nrfx_pins_configure+0xfc>
    switch (port)
    314a:	2300      	movs	r3, #0
    314c:	e7de      	b.n	310c <uarte_nrfx_pins_configure+0xfc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    314e:	4e80      	ldr	r6, [pc, #512]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    3150:	f240 2329 	movw	r3, #553	; 0x229
    3154:	4632      	mov	r2, r6
    3156:	4981      	ldr	r1, [pc, #516]	; (335c <uarte_nrfx_pins_configure+0x34c>)
    3158:	487f      	ldr	r0, [pc, #508]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    315a:	f004 ff23 	bl	7fa4 <printk>
    315e:	f240 2129 	movw	r1, #553	; 0x229
    3162:	4630      	mov	r0, r6
    3164:	f005 f877 	bl	8256 <assert_post_action>
    3168:	e7d6      	b.n	3118 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
    316a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    316e:	e000      	b.n	3172 <uarte_nrfx_pins_configure+0x162>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3170:	4b7b      	ldr	r3, [pc, #492]	; (3360 <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
    3172:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3176:	2203      	movs	r2, #3
    3178:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    317c:	e751      	b.n	3022 <uarte_nrfx_pins_configure+0x12>
			nrf_gpio_cfg_input(cfg->rx_pin,
    317e:	2600      	movs	r6, #0
    3180:	e759      	b.n	3036 <uarte_nrfx_pins_configure+0x26>
            mask = P0_FEATURE_PINS_PRESENT;
    3182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3186:	e75e      	b.n	3046 <uarte_nrfx_pins_configure+0x36>
    switch (port)
    3188:	2300      	movs	r3, #0
    318a:	e75c      	b.n	3046 <uarte_nrfx_pins_configure+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    318c:	4f70      	ldr	r7, [pc, #448]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    318e:	f240 2329 	movw	r3, #553	; 0x229
    3192:	463a      	mov	r2, r7
    3194:	4971      	ldr	r1, [pc, #452]	; (335c <uarte_nrfx_pins_configure+0x34c>)
    3196:	4870      	ldr	r0, [pc, #448]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    3198:	f004 ff04 	bl	7fa4 <printk>
    319c:	f240 2129 	movw	r1, #553	; 0x229
    31a0:	4638      	mov	r0, r7
    31a2:	f005 f858 	bl	8256 <assert_post_action>
    31a6:	e755      	b.n	3054 <uarte_nrfx_pins_configure+0x44>
        case 0: return NRF_P0;
    31a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    31ac:	e000      	b.n	31b0 <uarte_nrfx_pins_configure+0x1a0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31ae:	4b6c      	ldr	r3, [pc, #432]	; (3360 <uarte_nrfx_pins_configure+0x350>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    31b0:	00b6      	lsls	r6, r6, #2
    reg->PIN_CNF[pin_number] = cnf;
    31b2:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    31b6:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    31ba:	6965      	ldr	r5, [r4, #20]
    31bc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    31c0:	d130      	bne.n	3224 <uarte_nrfx_pins_configure+0x214>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    31c2:	69a5      	ldr	r5, [r4, #24]
    31c4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    31c8:	f000 80d2 	beq.w	3370 <uarte_nrfx_pins_configure+0x360>
					   (cfg->cts_pull_up ?
    31cc:	7f63      	ldrb	r3, [r4, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    31ce:	2b00      	cmp	r3, #0
    31d0:	f000 80a5 	beq.w	331e <uarte_nrfx_pins_configure+0x30e>
    31d4:	2703      	movs	r7, #3
    switch (port)
    31d6:	096b      	lsrs	r3, r5, #5
    31d8:	f000 80a3 	beq.w	3322 <uarte_nrfx_pins_configure+0x312>
    31dc:	2b01      	cmp	r3, #1
    31de:	f040 80a3 	bne.w	3328 <uarte_nrfx_pins_configure+0x318>
            mask = P1_FEATURE_PINS_PRESENT;
    31e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    31e6:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    31ea:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    31ec:	f013 0f01 	tst.w	r3, #1
    31f0:	f000 809c 	beq.w	332c <uarte_nrfx_pins_configure+0x31c>
    *p_pin = pin_number & 0x1F;
    31f4:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31f8:	096d      	lsrs	r5, r5, #5
    31fa:	f000 80a5 	beq.w	3348 <uarte_nrfx_pins_configure+0x338>
    31fe:	2d01      	cmp	r5, #1
    3200:	f000 80b0 	beq.w	3364 <uarte_nrfx_pins_configure+0x354>
            NRFX_ASSERT(0);
    3204:	4d52      	ldr	r5, [pc, #328]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    3206:	f240 232e 	movw	r3, #558	; 0x22e
    320a:	462a      	mov	r2, r5
    320c:	4951      	ldr	r1, [pc, #324]	; (3354 <uarte_nrfx_pins_configure+0x344>)
    320e:	4852      	ldr	r0, [pc, #328]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    3210:	f004 fec8 	bl	7fa4 <printk>
    3214:	f240 212e 	movw	r1, #558	; 0x22e
    3218:	4628      	mov	r0, r5
    321a:	f005 f81c 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    321e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3222:	e0a0      	b.n	3366 <uarte_nrfx_pins_configure+0x356>
    switch (port)
    3224:	096b      	lsrs	r3, r5, #5
    3226:	d01f      	beq.n	3268 <uarte_nrfx_pins_configure+0x258>
    3228:	2b01      	cmp	r3, #1
    322a:	d120      	bne.n	326e <uarte_nrfx_pins_configure+0x25e>
            mask = P1_FEATURE_PINS_PRESENT;
    322c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3230:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3234:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3236:	f013 0f01 	tst.w	r3, #1
    323a:	d01a      	beq.n	3272 <uarte_nrfx_pins_configure+0x262>
    *p_pin = pin_number & 0x1F;
    323c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3240:	096d      	lsrs	r5, r5, #5
    3242:	d024      	beq.n	328e <uarte_nrfx_pins_configure+0x27e>
    3244:	2d01      	cmp	r5, #1
    3246:	d025      	beq.n	3294 <uarte_nrfx_pins_configure+0x284>
            NRFX_ASSERT(0);
    3248:	4d41      	ldr	r5, [pc, #260]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    324a:	f240 232e 	movw	r3, #558	; 0x22e
    324e:	462a      	mov	r2, r5
    3250:	4940      	ldr	r1, [pc, #256]	; (3354 <uarte_nrfx_pins_configure+0x344>)
    3252:	4841      	ldr	r0, [pc, #260]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    3254:	f004 fea6 	bl	7fa4 <printk>
    3258:	f240 212e 	movw	r1, #558	; 0x22e
    325c:	4628      	mov	r0, r5
    325e:	f004 fffa 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    3262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3266:	e016      	b.n	3296 <uarte_nrfx_pins_configure+0x286>
            mask = P0_FEATURE_PINS_PRESENT;
    3268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    326c:	e7e0      	b.n	3230 <uarte_nrfx_pins_configure+0x220>
    switch (port)
    326e:	2300      	movs	r3, #0
    3270:	e7de      	b.n	3230 <uarte_nrfx_pins_configure+0x220>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3272:	4e37      	ldr	r6, [pc, #220]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    3274:	f240 2329 	movw	r3, #553	; 0x229
    3278:	4632      	mov	r2, r6
    327a:	4938      	ldr	r1, [pc, #224]	; (335c <uarte_nrfx_pins_configure+0x34c>)
    327c:	4836      	ldr	r0, [pc, #216]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    327e:	f004 fe91 	bl	7fa4 <printk>
    3282:	f240 2129 	movw	r1, #553	; 0x229
    3286:	4630      	mov	r0, r6
    3288:	f004 ffe5 	bl	8256 <assert_post_action>
    328c:	e7d6      	b.n	323c <uarte_nrfx_pins_configure+0x22c>
        case 0: return NRF_P0;
    328e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3292:	e000      	b.n	3296 <uarte_nrfx_pins_configure+0x286>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3294:	4a32      	ldr	r2, [pc, #200]	; (3360 <uarte_nrfx_pins_configure+0x350>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3296:	2301      	movs	r3, #1
    3298:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    329a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_gpio_cfg_output(cfg->rts_pin);
    329e:	6965      	ldr	r5, [r4, #20]
    switch (port)
    32a0:	096b      	lsrs	r3, r5, #5
    32a2:	d01f      	beq.n	32e4 <uarte_nrfx_pins_configure+0x2d4>
    32a4:	2b01      	cmp	r3, #1
    32a6:	d120      	bne.n	32ea <uarte_nrfx_pins_configure+0x2da>
            mask = P1_FEATURE_PINS_PRESENT;
    32a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    32ac:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    32b0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32b2:	f013 0f01 	tst.w	r3, #1
    32b6:	d01a      	beq.n	32ee <uarte_nrfx_pins_configure+0x2de>
    *p_pin = pin_number & 0x1F;
    32b8:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32bc:	096d      	lsrs	r5, r5, #5
    32be:	d024      	beq.n	330a <uarte_nrfx_pins_configure+0x2fa>
    32c0:	2d01      	cmp	r5, #1
    32c2:	d025      	beq.n	3310 <uarte_nrfx_pins_configure+0x300>
            NRFX_ASSERT(0);
    32c4:	4d22      	ldr	r5, [pc, #136]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    32c6:	f240 232e 	movw	r3, #558	; 0x22e
    32ca:	462a      	mov	r2, r5
    32cc:	4921      	ldr	r1, [pc, #132]	; (3354 <uarte_nrfx_pins_configure+0x344>)
    32ce:	4822      	ldr	r0, [pc, #136]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    32d0:	f004 fe68 	bl	7fa4 <printk>
    32d4:	f240 212e 	movw	r1, #558	; 0x22e
    32d8:	4628      	mov	r0, r5
    32da:	f004 ffbc 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    32de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    32e2:	e016      	b.n	3312 <uarte_nrfx_pins_configure+0x302>
            mask = P0_FEATURE_PINS_PRESENT;
    32e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32e8:	e7e0      	b.n	32ac <uarte_nrfx_pins_configure+0x29c>
    switch (port)
    32ea:	2300      	movs	r3, #0
    32ec:	e7de      	b.n	32ac <uarte_nrfx_pins_configure+0x29c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32ee:	4e18      	ldr	r6, [pc, #96]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    32f0:	f240 2329 	movw	r3, #553	; 0x229
    32f4:	4632      	mov	r2, r6
    32f6:	4919      	ldr	r1, [pc, #100]	; (335c <uarte_nrfx_pins_configure+0x34c>)
    32f8:	4817      	ldr	r0, [pc, #92]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    32fa:	f004 fe53 	bl	7fa4 <printk>
    32fe:	f240 2129 	movw	r1, #553	; 0x229
    3302:	4630      	mov	r0, r6
    3304:	f004 ffa7 	bl	8256 <assert_post_action>
    3308:	e7d6      	b.n	32b8 <uarte_nrfx_pins_configure+0x2a8>
        case 0: return NRF_P0;
    330a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    330e:	e000      	b.n	3312 <uarte_nrfx_pins_configure+0x302>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3310:	4b13      	ldr	r3, [pc, #76]	; (3360 <uarte_nrfx_pins_configure+0x350>)
    reg->PIN_CNF[pin_number] = cnf;
    3312:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3316:	2203      	movs	r2, #3
    3318:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    331c:	e751      	b.n	31c2 <uarte_nrfx_pins_configure+0x1b2>
			nrf_gpio_cfg_input(cfg->cts_pin,
    331e:	2700      	movs	r7, #0
    3320:	e759      	b.n	31d6 <uarte_nrfx_pins_configure+0x1c6>
            mask = P0_FEATURE_PINS_PRESENT;
    3322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3326:	e75e      	b.n	31e6 <uarte_nrfx_pins_configure+0x1d6>
    switch (port)
    3328:	2300      	movs	r3, #0
    332a:	e75c      	b.n	31e6 <uarte_nrfx_pins_configure+0x1d6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    332c:	4e08      	ldr	r6, [pc, #32]	; (3350 <uarte_nrfx_pins_configure+0x340>)
    332e:	f240 2329 	movw	r3, #553	; 0x229
    3332:	4632      	mov	r2, r6
    3334:	4909      	ldr	r1, [pc, #36]	; (335c <uarte_nrfx_pins_configure+0x34c>)
    3336:	4808      	ldr	r0, [pc, #32]	; (3358 <uarte_nrfx_pins_configure+0x348>)
    3338:	f004 fe34 	bl	7fa4 <printk>
    333c:	f240 2129 	movw	r1, #553	; 0x229
    3340:	4630      	mov	r0, r6
    3342:	f004 ff88 	bl	8256 <assert_post_action>
    3346:	e755      	b.n	31f4 <uarte_nrfx_pins_configure+0x1e4>
        case 0: return NRF_P0;
    3348:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    334c:	e00b      	b.n	3366 <uarte_nrfx_pins_configure+0x356>
    334e:	bf00      	nop
    3350:	00009760 	.word	0x00009760
    3354:	00009074 	.word	0x00009074
    3358:	00009078 	.word	0x00009078
    335c:	00009794 	.word	0x00009794
    3360:	50000300 	.word	0x50000300
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3364:	4a93      	ldr	r2, [pc, #588]	; (35b4 <uarte_nrfx_pins_configure+0x5a4>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3366:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
    3368:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    336c:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3370:	6823      	ldr	r3, [r4, #0]
    3372:	68e1      	ldr	r1, [r4, #12]
    3374:	6922      	ldr	r2, [r4, #16]
    p_reg->PSEL.TXD = pseltxd;
    3376:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    337a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    337e:	6823      	ldr	r3, [r4, #0]
    3380:	6961      	ldr	r1, [r4, #20]
    3382:	69a2      	ldr	r2, [r4, #24]
    p_reg->PSEL.RTS = pselrts;
    3384:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3388:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    338e:	68e5      	ldr	r5, [r4, #12]
    3390:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3394:	d133      	bne.n	33fe <uarte_nrfx_pins_configure+0x3ee>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3396:	6925      	ldr	r5, [r4, #16]
    3398:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    339c:	d16e      	bne.n	347c <uarte_nrfx_pins_configure+0x46c>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    339e:	6965      	ldr	r5, [r4, #20]
    33a0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    33a4:	f040 80a9 	bne.w	34fa <uarte_nrfx_pins_configure+0x4ea>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    33a8:	69a5      	ldr	r5, [r4, #24]
    33aa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    33ae:	d0df      	beq.n	3370 <uarte_nrfx_pins_configure+0x360>
    switch (port)
    33b0:	096b      	lsrs	r3, r5, #5
    33b2:	f000 80e1 	beq.w	3578 <uarte_nrfx_pins_configure+0x568>
    33b6:	2b01      	cmp	r3, #1
    33b8:	f040 80e1 	bne.w	357e <uarte_nrfx_pins_configure+0x56e>
            mask = P1_FEATURE_PINS_PRESENT;
    33bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    33c0:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    33c4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33c6:	f013 0f01 	tst.w	r3, #1
    33ca:	f000 80da 	beq.w	3582 <uarte_nrfx_pins_configure+0x572>
    *p_pin = pin_number & 0x1F;
    33ce:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33d2:	096d      	lsrs	r5, r5, #5
    33d4:	f000 80e3 	beq.w	359e <uarte_nrfx_pins_configure+0x58e>
    33d8:	2d01      	cmp	r5, #1
    33da:	f000 80e3 	beq.w	35a4 <uarte_nrfx_pins_configure+0x594>
            NRFX_ASSERT(0);
    33de:	4d76      	ldr	r5, [pc, #472]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    33e0:	f240 232e 	movw	r3, #558	; 0x22e
    33e4:	462a      	mov	r2, r5
    33e6:	4975      	ldr	r1, [pc, #468]	; (35bc <uarte_nrfx_pins_configure+0x5ac>)
    33e8:	4875      	ldr	r0, [pc, #468]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    33ea:	f004 fddb 	bl	7fa4 <printk>
    33ee:	f240 212e 	movw	r1, #558	; 0x22e
    33f2:	4628      	mov	r0, r5
    33f4:	f004 ff2f 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    33f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    33fc:	e0d3      	b.n	35a6 <uarte_nrfx_pins_configure+0x596>
    switch (port)
    33fe:	096b      	lsrs	r3, r5, #5
    3400:	d01f      	beq.n	3442 <uarte_nrfx_pins_configure+0x432>
    3402:	2b01      	cmp	r3, #1
    3404:	d120      	bne.n	3448 <uarte_nrfx_pins_configure+0x438>
            mask = P1_FEATURE_PINS_PRESENT;
    3406:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    340a:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    340e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3410:	f013 0f01 	tst.w	r3, #1
    3414:	d01a      	beq.n	344c <uarte_nrfx_pins_configure+0x43c>
    *p_pin = pin_number & 0x1F;
    3416:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    341a:	096d      	lsrs	r5, r5, #5
    341c:	d024      	beq.n	3468 <uarte_nrfx_pins_configure+0x458>
    341e:	2d01      	cmp	r5, #1
    3420:	d025      	beq.n	346e <uarte_nrfx_pins_configure+0x45e>
            NRFX_ASSERT(0);
    3422:	4d65      	ldr	r5, [pc, #404]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    3424:	f240 232e 	movw	r3, #558	; 0x22e
    3428:	462a      	mov	r2, r5
    342a:	4964      	ldr	r1, [pc, #400]	; (35bc <uarte_nrfx_pins_configure+0x5ac>)
    342c:	4864      	ldr	r0, [pc, #400]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    342e:	f004 fdb9 	bl	7fa4 <printk>
    3432:	f240 212e 	movw	r1, #558	; 0x22e
    3436:	4628      	mov	r0, r5
    3438:	f004 ff0d 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    343c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3440:	e016      	b.n	3470 <uarte_nrfx_pins_configure+0x460>
            mask = P0_FEATURE_PINS_PRESENT;
    3442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3446:	e7e0      	b.n	340a <uarte_nrfx_pins_configure+0x3fa>
    switch (port)
    3448:	2300      	movs	r3, #0
    344a:	e7de      	b.n	340a <uarte_nrfx_pins_configure+0x3fa>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    344c:	4e5a      	ldr	r6, [pc, #360]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    344e:	f240 2329 	movw	r3, #553	; 0x229
    3452:	4632      	mov	r2, r6
    3454:	495b      	ldr	r1, [pc, #364]	; (35c4 <uarte_nrfx_pins_configure+0x5b4>)
    3456:	485a      	ldr	r0, [pc, #360]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    3458:	f004 fda4 	bl	7fa4 <printk>
    345c:	f240 2129 	movw	r1, #553	; 0x229
    3460:	4630      	mov	r0, r6
    3462:	f004 fef8 	bl	8256 <assert_post_action>
    3466:	e7d6      	b.n	3416 <uarte_nrfx_pins_configure+0x406>
        case 0: return NRF_P0;
    3468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    346c:	e000      	b.n	3470 <uarte_nrfx_pins_configure+0x460>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    346e:	4b51      	ldr	r3, [pc, #324]	; (35b4 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    3470:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3474:	2202      	movs	r2, #2
    3476:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    347a:	e78c      	b.n	3396 <uarte_nrfx_pins_configure+0x386>
    switch (port)
    347c:	096b      	lsrs	r3, r5, #5
    347e:	d01f      	beq.n	34c0 <uarte_nrfx_pins_configure+0x4b0>
    3480:	2b01      	cmp	r3, #1
    3482:	d120      	bne.n	34c6 <uarte_nrfx_pins_configure+0x4b6>
            mask = P1_FEATURE_PINS_PRESENT;
    3484:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3488:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    348c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    348e:	f013 0f01 	tst.w	r3, #1
    3492:	d01a      	beq.n	34ca <uarte_nrfx_pins_configure+0x4ba>
    *p_pin = pin_number & 0x1F;
    3494:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3498:	096d      	lsrs	r5, r5, #5
    349a:	d024      	beq.n	34e6 <uarte_nrfx_pins_configure+0x4d6>
    349c:	2d01      	cmp	r5, #1
    349e:	d025      	beq.n	34ec <uarte_nrfx_pins_configure+0x4dc>
            NRFX_ASSERT(0);
    34a0:	4d45      	ldr	r5, [pc, #276]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    34a2:	f240 232e 	movw	r3, #558	; 0x22e
    34a6:	462a      	mov	r2, r5
    34a8:	4944      	ldr	r1, [pc, #272]	; (35bc <uarte_nrfx_pins_configure+0x5ac>)
    34aa:	4845      	ldr	r0, [pc, #276]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    34ac:	f004 fd7a 	bl	7fa4 <printk>
    34b0:	f240 212e 	movw	r1, #558	; 0x22e
    34b4:	4628      	mov	r0, r5
    34b6:	f004 fece 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    34ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    34be:	e016      	b.n	34ee <uarte_nrfx_pins_configure+0x4de>
            mask = P0_FEATURE_PINS_PRESENT;
    34c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34c4:	e7e0      	b.n	3488 <uarte_nrfx_pins_configure+0x478>
    switch (port)
    34c6:	2300      	movs	r3, #0
    34c8:	e7de      	b.n	3488 <uarte_nrfx_pins_configure+0x478>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    34ca:	4e3b      	ldr	r6, [pc, #236]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    34cc:	f240 2329 	movw	r3, #553	; 0x229
    34d0:	4632      	mov	r2, r6
    34d2:	493c      	ldr	r1, [pc, #240]	; (35c4 <uarte_nrfx_pins_configure+0x5b4>)
    34d4:	483a      	ldr	r0, [pc, #232]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    34d6:	f004 fd65 	bl	7fa4 <printk>
    34da:	f240 2129 	movw	r1, #553	; 0x229
    34de:	4630      	mov	r0, r6
    34e0:	f004 feb9 	bl	8256 <assert_post_action>
    34e4:	e7d6      	b.n	3494 <uarte_nrfx_pins_configure+0x484>
        case 0: return NRF_P0;
    34e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    34ea:	e000      	b.n	34ee <uarte_nrfx_pins_configure+0x4de>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34ec:	4b31      	ldr	r3, [pc, #196]	; (35b4 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    34ee:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    34f2:	2202      	movs	r2, #2
    34f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    34f8:	e751      	b.n	339e <uarte_nrfx_pins_configure+0x38e>
    switch (port)
    34fa:	096b      	lsrs	r3, r5, #5
    34fc:	d01f      	beq.n	353e <uarte_nrfx_pins_configure+0x52e>
    34fe:	2b01      	cmp	r3, #1
    3500:	d120      	bne.n	3544 <uarte_nrfx_pins_configure+0x534>
            mask = P1_FEATURE_PINS_PRESENT;
    3502:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3506:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    350a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    350c:	f013 0f01 	tst.w	r3, #1
    3510:	d01a      	beq.n	3548 <uarte_nrfx_pins_configure+0x538>
    *p_pin = pin_number & 0x1F;
    3512:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3516:	096d      	lsrs	r5, r5, #5
    3518:	d024      	beq.n	3564 <uarte_nrfx_pins_configure+0x554>
    351a:	2d01      	cmp	r5, #1
    351c:	d025      	beq.n	356a <uarte_nrfx_pins_configure+0x55a>
            NRFX_ASSERT(0);
    351e:	4d26      	ldr	r5, [pc, #152]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    3520:	f240 232e 	movw	r3, #558	; 0x22e
    3524:	462a      	mov	r2, r5
    3526:	4925      	ldr	r1, [pc, #148]	; (35bc <uarte_nrfx_pins_configure+0x5ac>)
    3528:	4825      	ldr	r0, [pc, #148]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    352a:	f004 fd3b 	bl	7fa4 <printk>
    352e:	f240 212e 	movw	r1, #558	; 0x22e
    3532:	4628      	mov	r0, r5
    3534:	f004 fe8f 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    3538:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    353c:	e016      	b.n	356c <uarte_nrfx_pins_configure+0x55c>
            mask = P0_FEATURE_PINS_PRESENT;
    353e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3542:	e7e0      	b.n	3506 <uarte_nrfx_pins_configure+0x4f6>
    switch (port)
    3544:	2300      	movs	r3, #0
    3546:	e7de      	b.n	3506 <uarte_nrfx_pins_configure+0x4f6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3548:	4e1b      	ldr	r6, [pc, #108]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    354a:	f240 2329 	movw	r3, #553	; 0x229
    354e:	4632      	mov	r2, r6
    3550:	491c      	ldr	r1, [pc, #112]	; (35c4 <uarte_nrfx_pins_configure+0x5b4>)
    3552:	481b      	ldr	r0, [pc, #108]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    3554:	f004 fd26 	bl	7fa4 <printk>
    3558:	f240 2129 	movw	r1, #553	; 0x229
    355c:	4630      	mov	r0, r6
    355e:	f004 fe7a 	bl	8256 <assert_post_action>
    3562:	e7d6      	b.n	3512 <uarte_nrfx_pins_configure+0x502>
        case 0: return NRF_P0;
    3564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3568:	e000      	b.n	356c <uarte_nrfx_pins_configure+0x55c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    356a:	4b12      	ldr	r3, [pc, #72]	; (35b4 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    356c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3570:	2202      	movs	r2, #2
    3572:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    3576:	e717      	b.n	33a8 <uarte_nrfx_pins_configure+0x398>
            mask = P0_FEATURE_PINS_PRESENT;
    3578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    357c:	e720      	b.n	33c0 <uarte_nrfx_pins_configure+0x3b0>
    switch (port)
    357e:	2300      	movs	r3, #0
    3580:	e71e      	b.n	33c0 <uarte_nrfx_pins_configure+0x3b0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3582:	4e0d      	ldr	r6, [pc, #52]	; (35b8 <uarte_nrfx_pins_configure+0x5a8>)
    3584:	f240 2329 	movw	r3, #553	; 0x229
    3588:	4632      	mov	r2, r6
    358a:	490e      	ldr	r1, [pc, #56]	; (35c4 <uarte_nrfx_pins_configure+0x5b4>)
    358c:	480c      	ldr	r0, [pc, #48]	; (35c0 <uarte_nrfx_pins_configure+0x5b0>)
    358e:	f004 fd09 	bl	7fa4 <printk>
    3592:	f240 2129 	movw	r1, #553	; 0x229
    3596:	4630      	mov	r0, r6
    3598:	f004 fe5d 	bl	8256 <assert_post_action>
    359c:	e717      	b.n	33ce <uarte_nrfx_pins_configure+0x3be>
        case 0: return NRF_P0;
    359e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    35a2:	e000      	b.n	35a6 <uarte_nrfx_pins_configure+0x596>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35a4:	4b03      	ldr	r3, [pc, #12]	; (35b4 <uarte_nrfx_pins_configure+0x5a4>)
    reg->PIN_CNF[pin_number] = cnf;
    35a6:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    35aa:	2202      	movs	r2, #2
    35ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    35b0:	e6de      	b.n	3370 <uarte_nrfx_pins_configure+0x360>
    35b2:	bf00      	nop
    35b4:	50000300 	.word	0x50000300
    35b8:	00009760 	.word	0x00009760
    35bc:	00009074 	.word	0x00009074
    35c0:	00009078 	.word	0x00009078
    35c4:	00009794 	.word	0x00009794

000035c8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    35c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    35cc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    35d0:	4b01      	ldr	r3, [pc, #4]	; (35d8 <set_comparator+0x10>)
    35d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    35d6:	4770      	bx	lr
    35d8:	40011000 	.word	0x40011000

000035dc <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    35dc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    35e0:	4b01      	ldr	r3, [pc, #4]	; (35e8 <get_comparator+0xc>)
    35e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    35e6:	4770      	bx	lr
    35e8:	40011000 	.word	0x40011000

000035ec <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    35f0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    35f2:	4a02      	ldr	r2, [pc, #8]	; (35fc <event_enable+0x10>)
    35f4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    35f8:	4770      	bx	lr
    35fa:	bf00      	nop
    35fc:	40011000 	.word	0x40011000

00003600 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3604:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3606:	4a02      	ldr	r2, [pc, #8]	; (3610 <event_disable+0x10>)
    3608:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    360c:	4770      	bx	lr
    360e:	bf00      	nop
    3610:	40011000 	.word	0x40011000

00003614 <counter>:
     return p_reg->COUNTER;
    3614:	4b01      	ldr	r3, [pc, #4]	; (361c <counter+0x8>)
    3616:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    361a:	4770      	bx	lr
    361c:	40011000 	.word	0x40011000

00003620 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    3620:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3622:	2301      	movs	r3, #1
    3624:	4083      	lsls	r3, r0
    3626:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3628:	4a10      	ldr	r2, [pc, #64]	; (366c <compare_int_lock+0x4c>)
    362a:	f3bf 8f5b 	dmb	ish
    362e:	e852 1f00 	ldrex	r1, [r2]
    3632:	ea01 0c04 	and.w	ip, r1, r4
    3636:	e842 ce00 	strex	lr, ip, [r2]
    363a:	f1be 0f00 	cmp.w	lr, #0
    363e:	d1f6      	bne.n	362e <compare_int_lock+0xe>
    3640:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3648:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    364c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3654:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3658:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    365c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3660:	420b      	tst	r3, r1
}
    3662:	bf14      	ite	ne
    3664:	2001      	movne	r0, #1
    3666:	2000      	moveq	r0, #0
    3668:	bd10      	pop	{r4, pc}
    366a:	bf00      	nop
    366c:	20000ae0 	.word	0x20000ae0

00003670 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    3670:	b570      	push	{r4, r5, r6, lr}
    3672:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    3674:	f005 f9d0 	bl	8a18 <full_int_lock>
    3678:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    367a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    367e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    3680:	4a17      	ldr	r2, [pc, #92]	; (36e0 <channel_processing_check_and_clear+0x70>)
    3682:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3686:	4213      	tst	r3, r2
    3688:	d105      	bne.n	3696 <channel_processing_check_and_clear+0x26>
	bool result = false;
    368a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    368c:	4628      	mov	r0, r5
    368e:	f005 f9cc 	bl	8a2a <full_int_unlock>

	return result;
}
    3692:	4630      	mov	r0, r6
    3694:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3696:	2301      	movs	r3, #1
    3698:	40a3      	lsls	r3, r4
    369a:	43db      	mvns	r3, r3
    369c:	4a11      	ldr	r2, [pc, #68]	; (36e4 <channel_processing_check_and_clear+0x74>)
    369e:	f3bf 8f5b 	dmb	ish
    36a2:	e852 1f00 	ldrex	r1, [r2]
    36a6:	ea01 0003 	and.w	r0, r1, r3
    36aa:	e842 0600 	strex	r6, r0, [r2]
    36ae:	2e00      	cmp	r6, #0
    36b0:	d1f7      	bne.n	36a2 <channel_processing_check_and_clear+0x32>
    36b2:	f3bf 8f5b 	dmb	ish
    36b6:	b959      	cbnz	r1, 36d0 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    36b8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    36bc:	009b      	lsls	r3, r3, #2
    36be:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    36c4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    36c8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    36ca:	b113      	cbz	r3, 36d2 <channel_processing_check_and_clear+0x62>
    36cc:	2301      	movs	r3, #1
    36ce:	e000      	b.n	36d2 <channel_processing_check_and_clear+0x62>
    36d0:	2301      	movs	r3, #1
		if (result) {
    36d2:	461e      	mov	r6, r3
    36d4:	2b00      	cmp	r3, #0
    36d6:	d0d9      	beq.n	368c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    36d8:	4620      	mov	r0, r4
    36da:	f005 f98e 	bl	89fa <event_clear>
    36de:	e7d5      	b.n	368c <channel_processing_check_and_clear+0x1c>
    36e0:	40011000 	.word	0x40011000
    36e4:	20000adc 	.word	0x20000adc

000036e8 <compare_int_unlock>:
	if (key) {
    36e8:	b901      	cbnz	r1, 36ec <compare_int_unlock+0x4>
}
    36ea:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    36ec:	2301      	movs	r3, #1
    36ee:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    36f0:	4a11      	ldr	r2, [pc, #68]	; (3738 <compare_int_unlock+0x50>)
    36f2:	f3bf 8f5b 	dmb	ish
    36f6:	e852 1f00 	ldrex	r1, [r2]
    36fa:	4319      	orrs	r1, r3
    36fc:	e842 1c00 	strex	ip, r1, [r2]
    3700:	f1bc 0f00 	cmp.w	ip, #0
    3704:	d1f7      	bne.n	36f6 <compare_int_unlock+0xe>
    3706:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    370a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    370e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3710:	4a0a      	ldr	r2, [pc, #40]	; (373c <compare_int_unlock+0x54>)
    3712:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3716:	f3bf 8f5b 	dmb	ish
    371a:	4b09      	ldr	r3, [pc, #36]	; (3740 <compare_int_unlock+0x58>)
    371c:	681b      	ldr	r3, [r3, #0]
    371e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3722:	fa23 f000 	lsr.w	r0, r3, r0
    3726:	f010 0f01 	tst.w	r0, #1
    372a:	d0de      	beq.n	36ea <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    372c:	4b05      	ldr	r3, [pc, #20]	; (3744 <compare_int_unlock+0x5c>)
    372e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3732:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    3736:	e7d8      	b.n	36ea <compare_int_unlock+0x2>
    3738:	20000ae0 	.word	0x20000ae0
    373c:	40011000 	.word	0x40011000
    3740:	20000adc 	.word	0x20000adc
    3744:	e000e100 	.word	0xe000e100

00003748 <sys_clock_timeout_handler>:
{
    3748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    374a:	4607      	mov	r7, r0
    374c:	4614      	mov	r4, r2
    374e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    3750:	4610      	mov	r0, r2
    3752:	4619      	mov	r1, r3
    3754:	f005 f95d 	bl	8a12 <absolute_time_to_cc>
    3758:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    375a:	4b15      	ldr	r3, [pc, #84]	; (37b0 <sys_clock_timeout_handler+0x68>)
    375c:	681a      	ldr	r2, [r3, #0]
    375e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    3760:	601c      	str	r4, [r3, #0]
    3762:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3764:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3768:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    376c:	d308      	bcc.n	3780 <sys_clock_timeout_handler+0x38>
	return false;
    376e:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3770:	f004 f8d6 	bl	7920 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    3774:	4638      	mov	r0, r7
    3776:	f7ff ff31 	bl	35dc <get_comparator>
    377a:	42a8      	cmp	r0, r5
    377c:	d00c      	beq.n	3798 <sys_clock_timeout_handler+0x50>
}
    377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3780:	4b0c      	ldr	r3, [pc, #48]	; (37b4 <sys_clock_timeout_handler+0x6c>)
    3782:	6819      	ldr	r1, [r3, #0]
    3784:	0a0b      	lsrs	r3, r1, #8
    3786:	060a      	lsls	r2, r1, #24
    3788:	1952      	adds	r2, r2, r5
    378a:	f143 0300 	adc.w	r3, r3, #0
    378e:	490a      	ldr	r1, [pc, #40]	; (37b8 <sys_clock_timeout_handler+0x70>)
    3790:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3794:	2401      	movs	r4, #1
    3796:	e7eb      	b.n	3770 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    3798:	b11c      	cbz	r4, 37a2 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    379a:	4638      	mov	r0, r7
    379c:	f7ff ff26 	bl	35ec <event_enable>
}
    37a0:	e7ed      	b.n	377e <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    37a2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    37a6:	4638      	mov	r0, r7
    37a8:	f7ff ff0e 	bl	35c8 <set_comparator>
    37ac:	e7f5      	b.n	379a <sys_clock_timeout_handler+0x52>
    37ae:	bf00      	nop
    37b0:	20000390 	.word	0x20000390
    37b4:	20000ae4 	.word	0x20000ae4
    37b8:	20000378 	.word	0x20000378

000037bc <z_nrf_rtc_timer_read>:
{
    37bc:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    37be:	4b0d      	ldr	r3, [pc, #52]	; (37f4 <z_nrf_rtc_timer_read+0x38>)
    37c0:	681b      	ldr	r3, [r3, #0]
    37c2:	0a1d      	lsrs	r5, r3, #8
    37c4:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    37c6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    37ca:	f7ff ff23 	bl	3614 <counter>
    37ce:	4603      	mov	r3, r0
	val += cntr;
    37d0:	1820      	adds	r0, r4, r0
    37d2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    37d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    37da:	d20a      	bcs.n	37f2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    37dc:	4b06      	ldr	r3, [pc, #24]	; (37f8 <z_nrf_rtc_timer_read+0x3c>)
    37de:	e9d3 2300 	ldrd	r2, r3, [r3]
    37e2:	4299      	cmp	r1, r3
    37e4:	bf08      	it	eq
    37e6:	4290      	cmpeq	r0, r2
    37e8:	d203      	bcs.n	37f2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    37ea:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    37ee:	f141 0100 	adc.w	r1, r1, #0
}
    37f2:	bd38      	pop	{r3, r4, r5, pc}
    37f4:	20000ae4 	.word	0x20000ae4
    37f8:	20000378 	.word	0x20000378

000037fc <compare_set_nolocks>:
{
    37fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3800:	4606      	mov	r6, r0
    3802:	4614      	mov	r4, r2
    3804:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    3806:	4610      	mov	r0, r2
    3808:	4619      	mov	r1, r3
    380a:	f005 f902 	bl	8a12 <absolute_time_to_cc>
    380e:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3810:	f7ff ffd4 	bl	37bc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3814:	42a9      	cmp	r1, r5
    3816:	bf08      	it	eq
    3818:	42a0      	cmpeq	r0, r4
    381a:	d21e      	bcs.n	385a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    381c:	ebb4 0800 	subs.w	r8, r4, r0
    3820:	eb65 0901 	sbc.w	r9, r5, r1
    3824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3828:	2300      	movs	r3, #0
    382a:	454b      	cmp	r3, r9
    382c:	bf08      	it	eq
    382e:	4542      	cmpeq	r2, r8
    3830:	d32e      	bcc.n	3890 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    3832:	4b19      	ldr	r3, [pc, #100]	; (3898 <compare_set_nolocks+0x9c>)
    3834:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    3838:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    383c:	42ab      	cmp	r3, r5
    383e:	bf08      	it	eq
    3840:	42a2      	cmpeq	r2, r4
    3842:	d018      	beq.n	3876 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    3844:	4639      	mov	r1, r7
    3846:	4630      	mov	r0, r6
    3848:	f005 f8f4 	bl	8a34 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    384c:	4639      	mov	r1, r7
    384e:	f005 f8d0 	bl	89f2 <counter_sub>
    3852:	1824      	adds	r4, r4, r0
    3854:	f145 0500 	adc.w	r5, r5, #0
    3858:	e00d      	b.n	3876 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    385a:	2301      	movs	r3, #1
    385c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    385e:	4a0f      	ldr	r2, [pc, #60]	; (389c <compare_set_nolocks+0xa0>)
    3860:	f3bf 8f5b 	dmb	ish
    3864:	e852 1f00 	ldrex	r1, [r2]
    3868:	4319      	orrs	r1, r3
    386a:	e842 1000 	strex	r0, r1, [r2]
    386e:	2800      	cmp	r0, #0
    3870:	d1f8      	bne.n	3864 <compare_set_nolocks+0x68>
    3872:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3876:	4b08      	ldr	r3, [pc, #32]	; (3898 <compare_set_nolocks+0x9c>)
    3878:	0132      	lsls	r2, r6, #4
    387a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    387e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    3882:	9908      	ldr	r1, [sp, #32]
    3884:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    3886:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3888:	6073      	str	r3, [r6, #4]
	return ret;
    388a:	2000      	movs	r0, #0
}
    388c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    3890:	f06f 0015 	mvn.w	r0, #21
    3894:	e7fa      	b.n	388c <compare_set_nolocks+0x90>
    3896:	bf00      	nop
    3898:	20000380 	.word	0x20000380
    389c:	20000adc 	.word	0x20000adc

000038a0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    38a0:	b530      	push	{r4, r5, lr}
    38a2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    38a4:	2300      	movs	r3, #0
    38a6:	4a1e      	ldr	r2, [pc, #120]	; (3920 <sys_clock_driver_init+0x80>)
    38a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    38ac:	2b00      	cmp	r3, #0
    38ae:	dd25      	ble.n	38fc <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    38b0:	4c1b      	ldr	r4, [pc, #108]	; (3920 <sys_clock_driver_init+0x80>)
    38b2:	2502      	movs	r5, #2
    38b4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38b8:	4b1a      	ldr	r3, [pc, #104]	; (3924 <sys_clock_driver_init+0x84>)
    38ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    38be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    38c2:	2200      	movs	r2, #0
    38c4:	2101      	movs	r1, #1
    38c6:	2011      	movs	r0, #17
    38c8:	f7fe f934 	bl	1b34 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    38cc:	2011      	movs	r0, #17
    38ce:	f7fe f913 	bl	1af8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    38d2:	2301      	movs	r3, #1
    38d4:	4a14      	ldr	r2, [pc, #80]	; (3928 <sys_clock_driver_init+0x88>)
    38d6:	6013      	str	r3, [r2, #0]
    38d8:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    38da:	4a14      	ldr	r2, [pc, #80]	; (392c <sys_clock_driver_init+0x8c>)
    38dc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    38de:	2400      	movs	r4, #0
    38e0:	9401      	str	r4, [sp, #4]
    38e2:	4b13      	ldr	r3, [pc, #76]	; (3930 <sys_clock_driver_init+0x90>)
    38e4:	9300      	str	r3, [sp, #0]
    38e6:	4a13      	ldr	r2, [pc, #76]	; (3934 <sys_clock_driver_init+0x94>)
    38e8:	2300      	movs	r3, #0
    38ea:	4620      	mov	r0, r4
    38ec:	f005 f8dd 	bl	8aaa <compare_set>

	z_nrf_clock_control_lf_on(mode);
    38f0:	4628      	mov	r0, r5
    38f2:	f7fe ffa9 	bl	2848 <z_nrf_clock_control_lf_on>

	return 0;
}
    38f6:	4620      	mov	r0, r4
    38f8:	b003      	add	sp, #12
    38fa:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    38fc:	4a0e      	ldr	r2, [pc, #56]	; (3938 <sys_clock_driver_init+0x98>)
    38fe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3906:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    390a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    390e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3912:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    3914:	4902      	ldr	r1, [pc, #8]	; (3920 <sys_clock_driver_init+0x80>)
    3916:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    391a:	3301      	adds	r3, #1
    391c:	e7c6      	b.n	38ac <sys_clock_driver_init+0xc>
    391e:	bf00      	nop
    3920:	40011000 	.word	0x40011000
    3924:	e000e100 	.word	0xe000e100
    3928:	40011008 	.word	0x40011008
    392c:	20000ae0 	.word	0x20000ae0
    3930:	00003749 	.word	0x00003749
    3934:	007fffff 	.word	0x007fffff
    3938:	20000380 	.word	0x20000380

0000393c <process_channel>:
{
    393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3940:	b082      	sub	sp, #8
    3942:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    3944:	f7ff fe94 	bl	3670 <channel_processing_check_and_clear>
    3948:	b910      	cbnz	r0, 3950 <process_channel+0x14>
}
    394a:	b002      	add	sp, #8
    394c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    3950:	f7ff ff34 	bl	37bc <z_nrf_rtc_timer_read>
    3954:	4606      	mov	r6, r0
    3956:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    3958:	f005 f85e 	bl	8a18 <full_int_lock>
    395c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    395e:	4b13      	ldr	r3, [pc, #76]	; (39ac <process_channel+0x70>)
    3960:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    3964:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3968:	454f      	cmp	r7, r9
    396a:	bf08      	it	eq
    396c:	4546      	cmpeq	r6, r8
    396e:	d20b      	bcs.n	3988 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3970:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    3972:	4650      	mov	r0, sl
    3974:	f005 f859 	bl	8a2a <full_int_unlock>
		if (handler) {
    3978:	2e00      	cmp	r6, #0
    397a:	d0e6      	beq.n	394a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    397c:	9500      	str	r5, [sp, #0]
    397e:	4642      	mov	r2, r8
    3980:	464b      	mov	r3, r9
    3982:	4620      	mov	r0, r4
    3984:	47b0      	blx	r6
}
    3986:	e7e0      	b.n	394a <process_channel+0xe>
			handler = cc_data[chan].callback;
    3988:	4a08      	ldr	r2, [pc, #32]	; (39ac <process_channel+0x70>)
    398a:	0123      	lsls	r3, r4, #4
    398c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    3990:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    3992:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    3994:	2000      	movs	r0, #0
    3996:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    399c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    39a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    39a4:	4620      	mov	r0, r4
    39a6:	f7ff fe2b 	bl	3600 <event_disable>
    39aa:	e7e2      	b.n	3972 <process_channel+0x36>
    39ac:	20000380 	.word	0x20000380

000039b0 <rtc_nrf_isr>:
{
    39b0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    39b2:	4b0d      	ldr	r3, [pc, #52]	; (39e8 <rtc_nrf_isr+0x38>)
    39b4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    39b8:	f013 0f02 	tst.w	r3, #2
    39bc:	d00a      	beq.n	39d4 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39be:	4b0b      	ldr	r3, [pc, #44]	; (39ec <rtc_nrf_isr+0x3c>)
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	b13b      	cbz	r3, 39d4 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39c4:	4b09      	ldr	r3, [pc, #36]	; (39ec <rtc_nrf_isr+0x3c>)
    39c6:	2200      	movs	r2, #0
    39c8:	601a      	str	r2, [r3, #0]
    39ca:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    39cc:	4a08      	ldr	r2, [pc, #32]	; (39f0 <rtc_nrf_isr+0x40>)
    39ce:	6813      	ldr	r3, [r2, #0]
    39d0:	3301      	adds	r3, #1
    39d2:	6013      	str	r3, [r2, #0]
{
    39d4:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    39d6:	2c00      	cmp	r4, #0
    39d8:	dd00      	ble.n	39dc <rtc_nrf_isr+0x2c>
}
    39da:	bd10      	pop	{r4, pc}
		process_channel(chan);
    39dc:	4620      	mov	r0, r4
    39de:	f7ff ffad 	bl	393c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    39e2:	3401      	adds	r4, #1
    39e4:	e7f7      	b.n	39d6 <rtc_nrf_isr+0x26>
    39e6:	bf00      	nop
    39e8:	40011000 	.word	0x40011000
    39ec:	40011104 	.word	0x40011104
    39f0:	20000ae4 	.word	0x20000ae4

000039f4 <sys_clock_set_timeout>:
{
    39f4:	b510      	push	{r4, lr}
    39f6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    39f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    39fc:	d007      	beq.n	3a0e <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    39fe:	1e44      	subs	r4, r0, #1
    3a00:	2c00      	cmp	r4, #0
    3a02:	dd07      	ble.n	3a14 <sys_clock_set_timeout+0x20>
    3a04:	4b11      	ldr	r3, [pc, #68]	; (3a4c <sys_clock_set_timeout+0x58>)
    3a06:	429c      	cmp	r4, r3
    3a08:	dd05      	ble.n	3a16 <sys_clock_set_timeout+0x22>
    3a0a:	4c11      	ldr	r4, [pc, #68]	; (3a50 <sys_clock_set_timeout+0x5c>)
    3a0c:	e003      	b.n	3a16 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3a0e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    3a12:	e7f4      	b.n	39fe <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3a14:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3a16:	f7ff fed1 	bl	37bc <z_nrf_rtc_timer_read>
    3a1a:	4b0e      	ldr	r3, [pc, #56]	; (3a54 <sys_clock_set_timeout+0x60>)
    3a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a20:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    3a22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a26:	d300      	bcc.n	3a2a <sys_clock_set_timeout+0x36>
		ticks = 0;
    3a28:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3a2a:	4404      	add	r4, r0
    3a2c:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    3a2e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    3a32:	d300      	bcc.n	3a36 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    3a34:	4c06      	ldr	r4, [pc, #24]	; (3a50 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3a36:	2000      	movs	r0, #0
    3a38:	9001      	str	r0, [sp, #4]
    3a3a:	4907      	ldr	r1, [pc, #28]	; (3a58 <sys_clock_set_timeout+0x64>)
    3a3c:	9100      	str	r1, [sp, #0]
    3a3e:	1912      	adds	r2, r2, r4
    3a40:	f143 0300 	adc.w	r3, r3, #0
    3a44:	f005 f831 	bl	8aaa <compare_set>
}
    3a48:	b002      	add	sp, #8
    3a4a:	bd10      	pop	{r4, pc}
    3a4c:	007ffffe 	.word	0x007ffffe
    3a50:	007fffff 	.word	0x007fffff
    3a54:	20000390 	.word	0x20000390
    3a58:	00003749 	.word	0x00003749

00003a5c <sys_clock_elapsed>:
{
    3a5c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3a5e:	f7ff fead 	bl	37bc <z_nrf_rtc_timer_read>
    3a62:	4b02      	ldr	r3, [pc, #8]	; (3a6c <sys_clock_elapsed+0x10>)
    3a64:	681b      	ldr	r3, [r3, #0]
}
    3a66:	1ac0      	subs	r0, r0, r3
    3a68:	bd08      	pop	{r3, pc}
    3a6a:	bf00      	nop
    3a6c:	20000390 	.word	0x20000390

00003a70 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3a70:	4b03      	ldr	r3, [pc, #12]	; (3a80 <nrf52_errata_36+0x10>)
    3a72:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3a74:	2b08      	cmp	r3, #8
    3a76:	d001      	beq.n	3a7c <nrf52_errata_36+0xc>
        return false;
    3a78:	2000      	movs	r0, #0
    3a7a:	4770      	bx	lr
                        return true;
    3a7c:	2001      	movs	r0, #1
}
    3a7e:	4770      	bx	lr
    3a80:	10000130 	.word	0x10000130

00003a84 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3a84:	4b03      	ldr	r3, [pc, #12]	; (3a94 <nrf52_errata_66+0x10>)
    3a86:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3a88:	2b08      	cmp	r3, #8
    3a8a:	d001      	beq.n	3a90 <nrf52_errata_66+0xc>
        return false;
    3a8c:	2000      	movs	r0, #0
    3a8e:	4770      	bx	lr
                        return true;
    3a90:	2001      	movs	r0, #1
}
    3a92:	4770      	bx	lr
    3a94:	10000130 	.word	0x10000130

00003a98 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3a98:	4b08      	ldr	r3, [pc, #32]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a9a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3a9c:	3304      	adds	r3, #4
    3a9e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3aa0:	2a08      	cmp	r2, #8
    3aa2:	d001      	beq.n	3aa8 <nrf52_errata_98+0x10>
        return false;
    3aa4:	2000      	movs	r0, #0
    3aa6:	4770      	bx	lr
                switch(var2)
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	d804      	bhi.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
    3aac:	e8df f003 	tbb	[pc, r3]
    3ab0:	01          	.byte	0x01
    3ab1:	00          	.byte	0x00
            if (var1 == 0x08)
    3ab2:	2001      	movs	r0, #1
    3ab4:	4770      	bx	lr
                        return false;
    3ab6:	2000      	movs	r0, #0
}
    3ab8:	4770      	bx	lr
    3aba:	bf00      	nop
    3abc:	10000130 	.word	0x10000130

00003ac0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3ac0:	4b08      	ldr	r3, [pc, #32]	; (3ae4 <nrf52_errata_103+0x24>)
    3ac2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3ac4:	3304      	adds	r3, #4
    3ac6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3ac8:	2a08      	cmp	r2, #8
    3aca:	d001      	beq.n	3ad0 <nrf52_errata_103+0x10>
        return false;
    3acc:	2000      	movs	r0, #0
    3ace:	4770      	bx	lr
                switch(var2)
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d804      	bhi.n	3ade <nrf52_errata_103+0x1e>
    3ad4:	e8df f003 	tbb	[pc, r3]
    3ad8:	01          	.byte	0x01
    3ad9:	00          	.byte	0x00
            if (var1 == 0x08)
    3ada:	2001      	movs	r0, #1
    3adc:	4770      	bx	lr
                        return false;
    3ade:	2000      	movs	r0, #0
}
    3ae0:	4770      	bx	lr
    3ae2:	bf00      	nop
    3ae4:	10000130 	.word	0x10000130

00003ae8 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3ae8:	4b08      	ldr	r3, [pc, #32]	; (3b0c <nrf52_errata_115+0x24>)
    3aea:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3aec:	3304      	adds	r3, #4
    3aee:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3af0:	2a08      	cmp	r2, #8
    3af2:	d001      	beq.n	3af8 <nrf52_errata_115+0x10>
        return false;
    3af4:	2000      	movs	r0, #0
    3af6:	4770      	bx	lr
                switch(var2)
    3af8:	2b00      	cmp	r3, #0
    3afa:	d804      	bhi.n	3b06 <nrf52_errata_115+0x1e>
    3afc:	e8df f003 	tbb	[pc, r3]
    3b00:	01          	.byte	0x01
    3b01:	00          	.byte	0x00
            if (var1 == 0x08)
    3b02:	2001      	movs	r0, #1
    3b04:	4770      	bx	lr
                        return false;
    3b06:	2000      	movs	r0, #0
}
    3b08:	4770      	bx	lr
    3b0a:	bf00      	nop
    3b0c:	10000130 	.word	0x10000130

00003b10 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3b10:	4b08      	ldr	r3, [pc, #32]	; (3b34 <nrf52_errata_120+0x24>)
    3b12:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3b14:	3304      	adds	r3, #4
    3b16:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3b18:	2a08      	cmp	r2, #8
    3b1a:	d001      	beq.n	3b20 <nrf52_errata_120+0x10>
        return false;
    3b1c:	2000      	movs	r0, #0
    3b1e:	4770      	bx	lr
                switch(var2)
    3b20:	2b00      	cmp	r3, #0
    3b22:	d804      	bhi.n	3b2e <nrf52_errata_120+0x1e>
    3b24:	e8df f003 	tbb	[pc, r3]
    3b28:	01          	.byte	0x01
    3b29:	00          	.byte	0x00
            if (var1 == 0x08)
    3b2a:	2001      	movs	r0, #1
    3b2c:	4770      	bx	lr
                        return false;
    3b2e:	2000      	movs	r0, #0
}
    3b30:	4770      	bx	lr
    3b32:	bf00      	nop
    3b34:	10000130 	.word	0x10000130

00003b38 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3b38:	4b03      	ldr	r3, [pc, #12]	; (3b48 <nrf52_errata_136+0x10>)
    3b3a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    3b3c:	2b08      	cmp	r3, #8
    3b3e:	d001      	beq.n	3b44 <nrf52_errata_136+0xc>
        return false;
    3b40:	2000      	movs	r0, #0
    3b42:	4770      	bx	lr
                        return true;
    3b44:	2001      	movs	r0, #1
}
    3b46:	4770      	bx	lr
    3b48:	10000130 	.word	0x10000130

00003b4c <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3b4c:	4b06      	ldr	r3, [pc, #24]	; (3b68 <nrf52_configuration_249+0x1c>)
    3b4e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3b50:	4a06      	ldr	r2, [pc, #24]	; (3b6c <nrf52_configuration_249+0x20>)
    3b52:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3b54:	2b08      	cmp	r3, #8
    3b56:	d001      	beq.n	3b5c <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3b58:	2000      	movs	r0, #0
    3b5a:	4770      	bx	lr
                switch(var2)
    3b5c:	2a04      	cmp	r2, #4
    3b5e:	d801      	bhi.n	3b64 <nrf52_configuration_249+0x18>
    3b60:	2000      	movs	r0, #0
    3b62:	4770      	bx	lr
                        return true;
    3b64:	2001      	movs	r0, #1
    #endif
}
    3b66:	4770      	bx	lr
    3b68:	10000130 	.word	0x10000130
    3b6c:	10000134 	.word	0x10000134

00003b70 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3b70:	4b02      	ldr	r3, [pc, #8]	; (3b7c <nvmc_wait+0xc>)
    3b72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3b76:	2b00      	cmp	r3, #0
    3b78:	d0fa      	beq.n	3b70 <nvmc_wait>
}
    3b7a:	4770      	bx	lr
    3b7c:	4001e000 	.word	0x4001e000

00003b80 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    3b80:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3b82:	4b03      	ldr	r3, [pc, #12]	; (3b90 <nvmc_config+0x10>)
    3b84:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    3b88:	f7ff fff2 	bl	3b70 <nvmc_wait>
}
    3b8c:	bd08      	pop	{r3, pc}
    3b8e:	bf00      	nop
    3b90:	4001e000 	.word	0x4001e000

00003b94 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3b94:	4b01      	ldr	r3, [pc, #4]	; (3b9c <SystemCoreClockUpdate+0x8>)
    3b96:	4a02      	ldr	r2, [pc, #8]	; (3ba0 <SystemCoreClockUpdate+0xc>)
    3b98:	601a      	str	r2, [r3, #0]
}
    3b9a:	4770      	bx	lr
    3b9c:	20000054 	.word	0x20000054
    3ba0:	03d09000 	.word	0x03d09000

00003ba4 <SystemInit>:

void SystemInit(void)
{
    3ba4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3ba6:	f7ff ff63 	bl	3a70 <nrf52_errata_36>
    3baa:	b140      	cbz	r0, 3bbe <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3bb0:	2200      	movs	r2, #0
    3bb2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3bb6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3bba:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3bbe:	f7ff ff61 	bl	3a84 <nrf52_errata_66>
    3bc2:	2800      	cmp	r0, #0
    3bc4:	d046      	beq.n	3c54 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3bca:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3bce:	4b56      	ldr	r3, [pc, #344]	; (3d28 <SystemInit+0x184>)
    3bd0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3bd4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3bd8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3bdc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3be0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3be4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3be8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3bec:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3bf0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3bf4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3bf8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3bfc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3c00:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3c04:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3c08:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3c0c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3c10:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3c14:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3c18:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3c1c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3c20:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3c24:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3c28:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3c2c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3c30:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3c34:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3c38:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3c3c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3c40:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3c44:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3c48:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3c4c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3c50:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3c54:	f7ff ff20 	bl	3a98 <nrf52_errata_98>
    3c58:	b110      	cbz	r0, 3c60 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3c5a:	4b34      	ldr	r3, [pc, #208]	; (3d2c <SystemInit+0x188>)
    3c5c:	4a34      	ldr	r2, [pc, #208]	; (3d30 <SystemInit+0x18c>)
    3c5e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3c60:	f7ff ff2e 	bl	3ac0 <nrf52_errata_103>
    3c64:	b118      	cbz	r0, 3c6e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3c66:	4b33      	ldr	r3, [pc, #204]	; (3d34 <SystemInit+0x190>)
    3c68:	22fb      	movs	r2, #251	; 0xfb
    3c6a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3c6e:	f7ff ff3b 	bl	3ae8 <nrf52_errata_115>
    3c72:	b148      	cbz	r0, 3c88 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3c74:	4930      	ldr	r1, [pc, #192]	; (3d38 <SystemInit+0x194>)
    3c76:	680b      	ldr	r3, [r1, #0]
    3c78:	f023 030f 	bic.w	r3, r3, #15
    3c7c:	4a2f      	ldr	r2, [pc, #188]	; (3d3c <SystemInit+0x198>)
    3c7e:	6812      	ldr	r2, [r2, #0]
    3c80:	f002 020f 	and.w	r2, r2, #15
    3c84:	4313      	orrs	r3, r2
    3c86:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3c88:	f7ff ff42 	bl	3b10 <nrf52_errata_120>
    3c8c:	b118      	cbz	r0, 3c96 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3c8e:	4b2c      	ldr	r3, [pc, #176]	; (3d40 <SystemInit+0x19c>)
    3c90:	f44f 7200 	mov.w	r2, #512	; 0x200
    3c94:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3c96:	f7ff ff4f 	bl	3b38 <nrf52_errata_136>
    3c9a:	b160      	cbz	r0, 3cb6 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ca0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3ca4:	f013 0f01 	tst.w	r3, #1
    3ca8:	d005      	beq.n	3cb6 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cae:	f06f 0201 	mvn.w	r2, #1
    3cb2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3cb6:	f7ff ff49 	bl	3b4c <nrf52_configuration_249>
    3cba:	b138      	cbz	r0, 3ccc <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3cbc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3cc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cc8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3ccc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3cd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	db08      	blt.n	3cea <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3cd8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3cdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	db02      	blt.n	3cea <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    3ce4:	f7ff ff56 	bl	3b94 <SystemCoreClockUpdate>
}
    3ce8:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    3cea:	2001      	movs	r0, #1
    3cec:	f7ff ff48 	bl	3b80 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3cf0:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    3cf4:	2512      	movs	r5, #18
    3cf6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    3cfa:	f7ff ff39 	bl	3b70 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3cfe:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    3d02:	f7ff ff35 	bl	3b70 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    3d06:	2000      	movs	r0, #0
    3d08:	f7ff ff3a 	bl	3b80 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    3d0c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3d10:	490c      	ldr	r1, [pc, #48]	; (3d44 <SystemInit+0x1a0>)
    3d12:	68ca      	ldr	r2, [r1, #12]
    3d14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3d18:	4b0b      	ldr	r3, [pc, #44]	; (3d48 <SystemInit+0x1a4>)
    3d1a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3d1c:	60cb      	str	r3, [r1, #12]
    3d1e:	f3bf 8f4f 	dsb	sy
    __NOP();
    3d22:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3d24:	e7fd      	b.n	3d22 <SystemInit+0x17e>
    3d26:	bf00      	nop
    3d28:	4000c000 	.word	0x4000c000
    3d2c:	4000568c 	.word	0x4000568c
    3d30:	00038148 	.word	0x00038148
    3d34:	4000f000 	.word	0x4000f000
    3d38:	40000ee4 	.word	0x40000ee4
    3d3c:	10000258 	.word	0x10000258
    3d40:	40029640 	.word	0x40029640
    3d44:	e000ed00 	.word	0xe000ed00
    3d48:	05fa0004 	.word	0x05fa0004

00003d4c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3d4c:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    3d4e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3d50:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    3d54:	f1d3 031f 	rsbs	r3, r3, #31
    3d58:	d415      	bmi.n	3d86 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3d5a:	2201      	movs	r2, #1
    3d5c:	409a      	lsls	r2, r3
    3d5e:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3d62:	f3bf 8f5b 	dmb	ish
    3d66:	e850 5f00 	ldrex	r5, [r0]
    3d6a:	42a5      	cmp	r5, r4
    3d6c:	d104      	bne.n	3d78 <nrfx_flag32_alloc+0x2c>
    3d6e:	e840 2c00 	strex	ip, r2, [r0]
    3d72:	f1bc 0f00 	cmp.w	ip, #0
    3d76:	d1f6      	bne.n	3d66 <nrfx_flag32_alloc+0x1a>
    3d78:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3d7c:	d1e7      	bne.n	3d4e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    3d7e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    3d80:	4802      	ldr	r0, [pc, #8]	; (3d8c <nrfx_flag32_alloc+0x40>)
}
    3d82:	bc30      	pop	{r4, r5}
    3d84:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    3d86:	4802      	ldr	r0, [pc, #8]	; (3d90 <nrfx_flag32_alloc+0x44>)
    3d88:	e7fb      	b.n	3d82 <nrfx_flag32_alloc+0x36>
    3d8a:	bf00      	nop
    3d8c:	0bad0000 	.word	0x0bad0000
    3d90:	0bad0002 	.word	0x0bad0002

00003d94 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    3d94:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3d96:	6803      	ldr	r3, [r0, #0]
    3d98:	460c      	mov	r4, r1
    3d9a:	fa23 f101 	lsr.w	r1, r3, r1
    3d9e:	f011 0f01 	tst.w	r1, #1
    3da2:	d114      	bne.n	3dce <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    3da4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    3da6:	2301      	movs	r3, #1
    3da8:	40a3      	lsls	r3, r4
    3daa:	4313      	orrs	r3, r2
    3dac:	f3bf 8f5b 	dmb	ish
    3db0:	e850 1f00 	ldrex	r1, [r0]
    3db4:	4291      	cmp	r1, r2
    3db6:	d104      	bne.n	3dc2 <nrfx_flag32_free+0x2e>
    3db8:	e840 3c00 	strex	ip, r3, [r0]
    3dbc:	f1bc 0f00 	cmp.w	ip, #0
    3dc0:	d1f6      	bne.n	3db0 <nrfx_flag32_free+0x1c>
    3dc2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3dc6:	d1ed      	bne.n	3da4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3dc8:	4802      	ldr	r0, [pc, #8]	; (3dd4 <nrfx_flag32_free+0x40>)
}
    3dca:	bc10      	pop	{r4}
    3dcc:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    3dce:	4802      	ldr	r0, [pc, #8]	; (3dd8 <nrfx_flag32_free+0x44>)
    3dd0:	e7fb      	b.n	3dca <nrfx_flag32_free+0x36>
    3dd2:	bf00      	nop
    3dd4:	0bad0000 	.word	0x0bad0000
    3dd8:	0bad0004 	.word	0x0bad0004

00003ddc <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3ddc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    3dde:	4604      	mov	r4, r0
    3de0:	b150      	cbz	r0, 3df8 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3de2:	4b0c      	ldr	r3, [pc, #48]	; (3e14 <nrfx_clock_init+0x38>)
    3de4:	791b      	ldrb	r3, [r3, #4]
    3de6:	b99b      	cbnz	r3, 3e10 <nrfx_clock_init+0x34>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    3de8:	4b0a      	ldr	r3, [pc, #40]	; (3e14 <nrfx_clock_init+0x38>)
    3dea:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3dec:	2201      	movs	r2, #1
    3dee:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    3df0:	2200      	movs	r2, #0
    3df2:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3df4:	4808      	ldr	r0, [pc, #32]	; (3e18 <nrfx_clock_init+0x3c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3df6:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    3df8:	4d08      	ldr	r5, [pc, #32]	; (3e1c <nrfx_clock_init+0x40>)
    3dfa:	23bd      	movs	r3, #189	; 0xbd
    3dfc:	462a      	mov	r2, r5
    3dfe:	4908      	ldr	r1, [pc, #32]	; (3e20 <nrfx_clock_init+0x44>)
    3e00:	4808      	ldr	r0, [pc, #32]	; (3e24 <nrfx_clock_init+0x48>)
    3e02:	f004 f8cf 	bl	7fa4 <printk>
    3e06:	21bd      	movs	r1, #189	; 0xbd
    3e08:	4628      	mov	r0, r5
    3e0a:	f004 fa24 	bl	8256 <assert_post_action>
    3e0e:	e7e8      	b.n	3de2 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3e10:	4805      	ldr	r0, [pc, #20]	; (3e28 <nrfx_clock_init+0x4c>)
    return err_code;
    3e12:	e7f0      	b.n	3df6 <nrfx_clock_init+0x1a>
    3e14:	20000ae8 	.word	0x20000ae8
    3e18:	0bad0000 	.word	0x0bad0000
    3e1c:	00009870 	.word	0x00009870
    3e20:	000098b0 	.word	0x000098b0
    3e24:	00009078 	.word	0x00009078
    3e28:	0bad000c 	.word	0x0bad000c

00003e2c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3e2c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e2e:	4b0b      	ldr	r3, [pc, #44]	; (3e5c <nrfx_clock_enable+0x30>)
    3e30:	791b      	ldrb	r3, [r3, #4]
    3e32:	b123      	cbz	r3, 3e3e <nrfx_clock_enable+0x12>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3e34:	2000      	movs	r0, #0
    3e36:	f7fd fe6f 	bl	1b18 <arch_irq_is_enabled>
    3e3a:	b160      	cbz	r0, 3e56 <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3e3c:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e3e:	4c08      	ldr	r4, [pc, #32]	; (3e60 <nrfx_clock_enable+0x34>)
    3e40:	23d6      	movs	r3, #214	; 0xd6
    3e42:	4622      	mov	r2, r4
    3e44:	4907      	ldr	r1, [pc, #28]	; (3e64 <nrfx_clock_enable+0x38>)
    3e46:	4808      	ldr	r0, [pc, #32]	; (3e68 <nrfx_clock_enable+0x3c>)
    3e48:	f004 f8ac 	bl	7fa4 <printk>
    3e4c:	21d6      	movs	r1, #214	; 0xd6
    3e4e:	4620      	mov	r0, r4
    3e50:	f004 fa01 	bl	8256 <assert_post_action>
    3e54:	e7ee      	b.n	3e34 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3e56:	f7fd fe4f 	bl	1af8 <arch_irq_enable>
}
    3e5a:	e7ef      	b.n	3e3c <nrfx_clock_enable+0x10>
    3e5c:	20000ae8 	.word	0x20000ae8
    3e60:	00009870 	.word	0x00009870
    3e64:	000098c0 	.word	0x000098c0
    3e68:	00009078 	.word	0x00009078

00003e6c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    3e6c:	b538      	push	{r3, r4, r5, lr}
    3e6e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e70:	4b2a      	ldr	r3, [pc, #168]	; (3f1c <nrfx_clock_start+0xb0>)
    3e72:	791b      	ldrb	r3, [r3, #4]
    3e74:	b183      	cbz	r3, 3e98 <nrfx_clock_start+0x2c>
    switch (domain)
    3e76:	b1ec      	cbz	r4, 3eb4 <nrfx_clock_start+0x48>
    3e78:	2c01      	cmp	r4, #1
    3e7a:	d044      	beq.n	3f06 <nrfx_clock_start+0x9a>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3e7c:	4c28      	ldr	r4, [pc, #160]	; (3f20 <nrfx_clock_start+0xb4>)
    3e7e:	f44f 73a2 	mov.w	r3, #324	; 0x144
    3e82:	4622      	mov	r2, r4
    3e84:	4927      	ldr	r1, [pc, #156]	; (3f24 <nrfx_clock_start+0xb8>)
    3e86:	4828      	ldr	r0, [pc, #160]	; (3f28 <nrfx_clock_start+0xbc>)
    3e88:	f004 f88c 	bl	7fa4 <printk>
    3e8c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3e90:	4620      	mov	r0, r4
    3e92:	f004 f9e0 	bl	8256 <assert_post_action>
            break;
    }
}
    3e96:	e02d      	b.n	3ef4 <nrfx_clock_start+0x88>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e98:	4d21      	ldr	r5, [pc, #132]	; (3f20 <nrfx_clock_start+0xb4>)
    3e9a:	f44f 7389 	mov.w	r3, #274	; 0x112
    3e9e:	462a      	mov	r2, r5
    3ea0:	4922      	ldr	r1, [pc, #136]	; (3f2c <nrfx_clock_start+0xc0>)
    3ea2:	4821      	ldr	r0, [pc, #132]	; (3f28 <nrfx_clock_start+0xbc>)
    3ea4:	f004 f87e 	bl	7fa4 <printk>
    3ea8:	f44f 7189 	mov.w	r1, #274	; 0x112
    3eac:	4628      	mov	r0, r5
    3eae:	f004 f9d2 	bl	8256 <assert_post_action>
    3eb2:	e7e0      	b.n	3e76 <nrfx_clock_start+0xa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3eb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3eb8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3ebc:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3ec0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3ec4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3ec8:	d115      	bne.n	3ef6 <nrfx_clock_start+0x8a>
    return false;
    3eca:	2200      	movs	r2, #0
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3ecc:	b10a      	cbz	r2, 3ed2 <nrfx_clock_start+0x66>
    3ece:	2b01      	cmp	r3, #1
    3ed0:	d013      	beq.n	3efa <nrfx_clock_start+0x8e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ed6:	2200      	movs	r2, #0
    3ed8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3edc:	4b14      	ldr	r3, [pc, #80]	; (3f30 <nrfx_clock_start+0xc4>)
    3ede:	2200      	movs	r2, #0
    3ee0:	601a      	str	r2, [r3, #0]
    3ee2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ee8:	2202      	movs	r2, #2
    3eea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3eee:	3308      	adds	r3, #8
    3ef0:	2201      	movs	r2, #1
    3ef2:	601a      	str	r2, [r3, #0]
}
    3ef4:	bd38      	pop	{r3, r4, r5, pc}
                return true;
    3ef6:	2201      	movs	r2, #1
    3ef8:	e7e8      	b.n	3ecc <nrfx_clock_start+0x60>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3efe:	2201      	movs	r2, #1
    3f00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    3f04:	e7ea      	b.n	3edc <nrfx_clock_start+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f06:	4b0b      	ldr	r3, [pc, #44]	; (3f34 <nrfx_clock_start+0xc8>)
    3f08:	2200      	movs	r2, #0
    3f0a:	601a      	str	r2, [r3, #0]
    3f0c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f12:	2201      	movs	r2, #1
    3f14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f18:	601a      	str	r2, [r3, #0]
}
    3f1a:	e7eb      	b.n	3ef4 <nrfx_clock_start+0x88>
    3f1c:	20000ae8 	.word	0x20000ae8
    3f20:	00009870 	.word	0x00009870
    3f24:	00009074 	.word	0x00009074
    3f28:	00009078 	.word	0x00009078
    3f2c:	000098c0 	.word	0x000098c0
    3f30:	40000104 	.word	0x40000104
    3f34:	40000100 	.word	0x40000100

00003f38 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3f38:	b570      	push	{r4, r5, r6, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3f3e:	4b5e      	ldr	r3, [pc, #376]	; (40b8 <nrfx_clock_stop+0x180>)
    3f40:	791b      	ldrb	r3, [r3, #4]
    3f42:	b183      	cbz	r3, 3f66 <nrfx_clock_stop+0x2e>
    switch (domain)
    3f44:	b1ec      	cbz	r4, 3f82 <nrfx_clock_stop+0x4a>
    3f46:	2c01      	cmp	r4, #1
    3f48:	d02d      	beq.n	3fa6 <nrfx_clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3f4a:	4c5c      	ldr	r4, [pc, #368]	; (40bc <nrfx_clock_stop+0x184>)
    3f4c:	f240 1367 	movw	r3, #359	; 0x167
    3f50:	4622      	mov	r2, r4
    3f52:	495b      	ldr	r1, [pc, #364]	; (40c0 <nrfx_clock_stop+0x188>)
    3f54:	485b      	ldr	r0, [pc, #364]	; (40c4 <nrfx_clock_stop+0x18c>)
    3f56:	f004 f825 	bl	7fa4 <printk>
    3f5a:	f240 1167 	movw	r1, #359	; 0x167
    3f5e:	4620      	mov	r0, r4
    3f60:	f004 f979 	bl	8256 <assert_post_action>
            return;
    3f64:	e0a1      	b.n	40aa <nrfx_clock_stop+0x172>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3f66:	4d55      	ldr	r5, [pc, #340]	; (40bc <nrfx_clock_stop+0x184>)
    3f68:	f240 134b 	movw	r3, #331	; 0x14b
    3f6c:	462a      	mov	r2, r5
    3f6e:	4956      	ldr	r1, [pc, #344]	; (40c8 <nrfx_clock_stop+0x190>)
    3f70:	4854      	ldr	r0, [pc, #336]	; (40c4 <nrfx_clock_stop+0x18c>)
    3f72:	f004 f817 	bl	7fa4 <printk>
    3f76:	f240 114b 	movw	r1, #331	; 0x14b
    3f7a:	4628      	mov	r0, r5
    3f7c:	f004 f96b 	bl	8256 <assert_post_action>
    3f80:	e7e0      	b.n	3f44 <nrfx_clock_stop+0xc>
    p_reg->INTENCLR = mask;
    3f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f86:	2202      	movs	r2, #2
    3f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f8c:	f503 7382 	add.w	r3, r3, #260	; 0x104
    3f90:	2200      	movs	r2, #0
    3f92:	601a      	str	r2, [r3, #0]
    3f94:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f96:	4b4d      	ldr	r3, [pc, #308]	; (40cc <nrfx_clock_stop+0x194>)
    3f98:	2201      	movs	r2, #1
    3f9a:	601a      	str	r2, [r3, #0]
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3f9c:	2c01      	cmp	r4, #1
    3f9e:	d00f      	beq.n	3fc0 <nrfx_clock_stop+0x88>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3fa0:	f242 7510 	movw	r5, #10000	; 0x2710
    3fa4:	e05f      	b.n	4066 <nrfx_clock_stop+0x12e>
    p_reg->INTENCLR = mask;
    3fa6:	2301      	movs	r3, #1
    3fa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3fac:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fb0:	f502 7280 	add.w	r2, r2, #256	; 0x100
    3fb4:	2100      	movs	r1, #0
    3fb6:	6011      	str	r1, [r2, #0]
    3fb8:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fba:	4a45      	ldr	r2, [pc, #276]	; (40d0 <nrfx_clock_stop+0x198>)
    3fbc:	6013      	str	r3, [r2, #0]
}
    3fbe:	e7ed      	b.n	3f9c <nrfx_clock_stop+0x64>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3fc0:	2301      	movs	r3, #1
    3fc2:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3fc6:	f242 7510 	movw	r5, #10000	; 0x2710
    3fca:	e018      	b.n	3ffe <nrfx_clock_stop+0xc6>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3fcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3fd0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3fd4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3fd8:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3fdc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3fe0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3fe4:	d12d      	bne.n	4042 <nrfx_clock_stop+0x10a>
    return false;
    3fe6:	2300      	movs	r3, #0
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d05c      	beq.n	40a6 <nrfx_clock_stop+0x16e>
    3fec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3ff0:	2b01      	cmp	r3, #1
    3ff2:	d158      	bne.n	40a6 <nrfx_clock_stop+0x16e>
    3ff4:	2001      	movs	r0, #1
    3ff6:	f004 fd86 	bl	8b06 <nrfx_busy_wait>
    3ffa:	3d01      	subs	r5, #1
    3ffc:	d053      	beq.n	40a6 <nrfx_clock_stop+0x16e>
    switch (domain)
    3ffe:	2c00      	cmp	r4, #0
    4000:	d0e4      	beq.n	3fcc <nrfx_clock_stop+0x94>
    4002:	2c01      	cmp	r4, #1
    4004:	d00e      	beq.n	4024 <nrfx_clock_stop+0xec>
            NRFX_ASSERT(0);
    4006:	4e33      	ldr	r6, [pc, #204]	; (40d4 <nrfx_clock_stop+0x19c>)
    4008:	f44f 734f 	mov.w	r3, #828	; 0x33c
    400c:	4632      	mov	r2, r6
    400e:	492c      	ldr	r1, [pc, #176]	; (40c0 <nrfx_clock_stop+0x188>)
    4010:	482c      	ldr	r0, [pc, #176]	; (40c4 <nrfx_clock_stop+0x18c>)
    4012:	f003 ffc7 	bl	7fa4 <printk>
    4016:	f44f 714f 	mov.w	r1, #828	; 0x33c
    401a:	4630      	mov	r0, r6
    401c:	f004 f91b 	bl	8256 <assert_post_action>
            return false;
    4020:	2300      	movs	r3, #0
    4022:	e7e1      	b.n	3fe8 <nrfx_clock_stop+0xb0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4028:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    402c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4030:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4034:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    4038:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    403c:	d103      	bne.n	4046 <nrfx_clock_stop+0x10e>
    return false;
    403e:	2300      	movs	r3, #0
    4040:	e7d2      	b.n	3fe8 <nrfx_clock_stop+0xb0>
                return true;
    4042:	2301      	movs	r3, #1
    4044:	e7d0      	b.n	3fe8 <nrfx_clock_stop+0xb0>
                return true;
    4046:	2301      	movs	r3, #1
    4048:	e7ce      	b.n	3fe8 <nrfx_clock_stop+0xb0>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    404a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    404e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4052:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4056:	d122      	bne.n	409e <nrfx_clock_stop+0x166>
    return false;
    4058:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    405a:	b323      	cbz	r3, 40a6 <nrfx_clock_stop+0x16e>
    405c:	2001      	movs	r0, #1
    405e:	f004 fd52 	bl	8b06 <nrfx_busy_wait>
    4062:	3d01      	subs	r5, #1
    4064:	d01f      	beq.n	40a6 <nrfx_clock_stop+0x16e>
    switch (domain)
    4066:	2c00      	cmp	r4, #0
    4068:	d0ef      	beq.n	404a <nrfx_clock_stop+0x112>
    406a:	2c01      	cmp	r4, #1
    406c:	d00e      	beq.n	408c <nrfx_clock_stop+0x154>
            NRFX_ASSERT(0);
    406e:	4e19      	ldr	r6, [pc, #100]	; (40d4 <nrfx_clock_stop+0x19c>)
    4070:	f44f 734f 	mov.w	r3, #828	; 0x33c
    4074:	4632      	mov	r2, r6
    4076:	4912      	ldr	r1, [pc, #72]	; (40c0 <nrfx_clock_stop+0x188>)
    4078:	4812      	ldr	r0, [pc, #72]	; (40c4 <nrfx_clock_stop+0x18c>)
    407a:	f003 ff93 	bl	7fa4 <printk>
    407e:	f44f 714f 	mov.w	r1, #828	; 0x33c
    4082:	4630      	mov	r0, r6
    4084:	f004 f8e7 	bl	8256 <assert_post_action>
            return false;
    4088:	2300      	movs	r3, #0
    408a:	e7e6      	b.n	405a <nrfx_clock_stop+0x122>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    408c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4090:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4094:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4098:	d103      	bne.n	40a2 <nrfx_clock_stop+0x16a>
    return false;
    409a:	2300      	movs	r3, #0
    409c:	e7dd      	b.n	405a <nrfx_clock_stop+0x122>
                return true;
    409e:	2301      	movs	r3, #1
    40a0:	e7db      	b.n	405a <nrfx_clock_stop+0x122>
                return true;
    40a2:	2301      	movs	r3, #1
    40a4:	e7d9      	b.n	405a <nrfx_clock_stop+0x122>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    40a6:	2c01      	cmp	r4, #1
    40a8:	d001      	beq.n	40ae <nrfx_clock_stop+0x176>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    40aa:	b002      	add	sp, #8
    40ac:	bd70      	pop	{r4, r5, r6, pc}
            m_clock_cb.hfclk_started = false;
    40ae:	4b02      	ldr	r3, [pc, #8]	; (40b8 <nrfx_clock_stop+0x180>)
    40b0:	2200      	movs	r2, #0
    40b2:	715a      	strb	r2, [r3, #5]
    40b4:	e7f9      	b.n	40aa <nrfx_clock_stop+0x172>
    40b6:	bf00      	nop
    40b8:	20000ae8 	.word	0x20000ae8
    40bc:	00009870 	.word	0x00009870
    40c0:	00009074 	.word	0x00009074
    40c4:	00009078 	.word	0x00009078
    40c8:	000098c0 	.word	0x000098c0
    40cc:	4000000c 	.word	0x4000000c
    40d0:	40000004 	.word	0x40000004
    40d4:	000098e0 	.word	0x000098e0

000040d8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    40d8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    40da:	4b1b      	ldr	r3, [pc, #108]	; (4148 <nrfx_power_clock_irq_handler+0x70>)
    40dc:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    40de:	b183      	cbz	r3, 4102 <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40e0:	4b19      	ldr	r3, [pc, #100]	; (4148 <nrfx_power_clock_irq_handler+0x70>)
    40e2:	2200      	movs	r2, #0
    40e4:	601a      	str	r2, [r3, #0]
    40e6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    40e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40ec:	2201      	movs	r2, #1
    40ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    40f2:	4b16      	ldr	r3, [pc, #88]	; (414c <nrfx_power_clock_irq_handler+0x74>)
    40f4:	795b      	ldrb	r3, [r3, #5]
    40f6:	b923      	cbnz	r3, 4102 <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    40f8:	4b14      	ldr	r3, [pc, #80]	; (414c <nrfx_power_clock_irq_handler+0x74>)
    40fa:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	2000      	movs	r0, #0
    4100:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4102:	4b13      	ldr	r3, [pc, #76]	; (4150 <nrfx_power_clock_irq_handler+0x78>)
    4104:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4106:	b903      	cbnz	r3, 410a <nrfx_power_clock_irq_handler+0x32>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4108:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    410a:	4b11      	ldr	r3, [pc, #68]	; (4150 <nrfx_power_clock_irq_handler+0x78>)
    410c:	2200      	movs	r2, #0
    410e:	601a      	str	r2, [r3, #0]
    4110:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4116:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    411a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    411e:	f012 0f03 	tst.w	r2, #3
    4122:	d107      	bne.n	4134 <nrfx_power_clock_irq_handler+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4124:	2301      	movs	r3, #1
    4126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    412a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    412e:	3208      	adds	r2, #8
    4130:	6013      	str	r3, [r2, #0]
}
    4132:	e7e9      	b.n	4108 <nrfx_power_clock_irq_handler+0x30>
    p_reg->INTENCLR = mask;
    4134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4138:	2202      	movs	r2, #2
    413a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    413e:	4b03      	ldr	r3, [pc, #12]	; (414c <nrfx_power_clock_irq_handler+0x74>)
    4140:	681b      	ldr	r3, [r3, #0]
    4142:	2001      	movs	r0, #1
    4144:	4798      	blx	r3
}
    4146:	e7df      	b.n	4108 <nrfx_power_clock_irq_handler+0x30>
    4148:	40000100 	.word	0x40000100
    414c:	20000ae8 	.word	0x20000ae8
    4150:	40000104 	.word	0x40000104

00004154 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4154:	3008      	adds	r0, #8
    4156:	4b03      	ldr	r3, [pc, #12]	; (4164 <pin_in_use+0x10>)
    4158:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    415c:	f000 0001 	and.w	r0, r0, #1
    4160:	4770      	bx	lr
    4162:	bf00      	nop
    4164:	20000058 	.word	0x20000058

00004168 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4168:	3008      	adds	r0, #8
    416a:	4b03      	ldr	r3, [pc, #12]	; (4178 <pin_in_use_by_te+0x10>)
    416c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4170:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4174:	4770      	bx	lr
    4176:	bf00      	nop
    4178:	20000058 	.word	0x20000058

0000417c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    417c:	3008      	adds	r0, #8
    417e:	4b04      	ldr	r3, [pc, #16]	; (4190 <pin_has_trigger+0x14>)
    4180:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4184:	f010 001c 	ands.w	r0, r0, #28
    4188:	bf18      	it	ne
    418a:	2001      	movne	r0, #1
    418c:	4770      	bx	lr
    418e:	bf00      	nop
    4190:	20000058 	.word	0x20000058

00004194 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4194:	3008      	adds	r0, #8
    4196:	4b03      	ldr	r3, [pc, #12]	; (41a4 <pin_is_output+0x10>)
    4198:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    419c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    41a0:	4770      	bx	lr
    41a2:	bf00      	nop
    41a4:	20000058 	.word	0x20000058

000041a8 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    41a8:	3008      	adds	r0, #8
    41aa:	4b02      	ldr	r3, [pc, #8]	; (41b4 <pin_te_get+0xc>)
    41ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    41b0:	0b40      	lsrs	r0, r0, #13
    41b2:	4770      	bx	lr
    41b4:	20000058 	.word	0x20000058

000041b8 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    41b8:	2200      	movs	r2, #0
    41ba:	e004      	b.n	41c6 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    41bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    41c0:	4283      	cmp	r3, r0
    41c2:	d00f      	beq.n	41e4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    41c4:	3201      	adds	r2, #1
    41c6:	2a2f      	cmp	r2, #47	; 0x2f
    41c8:	d80a      	bhi.n	41e0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    41ca:	f102 0308 	add.w	r3, r2, #8
    41ce:	4906      	ldr	r1, [pc, #24]	; (41e8 <handler_in_use+0x30>)
    41d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    41d4:	f413 7f80 	tst.w	r3, #256	; 0x100
    41d8:	d0f0      	beq.n	41bc <handler_in_use+0x4>
    41da:	f3c3 2343 	ubfx	r3, r3, #9, #4
    41de:	e7ef      	b.n	41c0 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    41e0:	2000      	movs	r0, #0
    41e2:	4770      	bx	lr
            return true;
    41e4:	2001      	movs	r0, #1
}
    41e6:	4770      	bx	lr
    41e8:	20000058 	.word	0x20000058

000041ec <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    41ec:	2300      	movs	r3, #0
    41ee:	b113      	cbz	r3, 41f6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    41f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    41f4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    41f6:	4a07      	ldr	r2, [pc, #28]	; (4214 <find_handler+0x28>)
    41f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    41fc:	4282      	cmp	r2, r0
    41fe:	d001      	beq.n	4204 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4200:	3301      	adds	r3, #1
    4202:	e7f4      	b.n	41ee <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4204:	4a03      	ldr	r2, [pc, #12]	; (4214 <find_handler+0x28>)
    4206:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    420a:	6852      	ldr	r2, [r2, #4]
    420c:	428a      	cmp	r2, r1
    420e:	d1f7      	bne.n	4200 <find_handler+0x14>
            return i;
    4210:	4618      	mov	r0, r3
    4212:	4770      	bx	lr
    4214:	20000058 	.word	0x20000058

00004218 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4218:	3008      	adds	r0, #8
    421a:	4b06      	ldr	r3, [pc, #24]	; (4234 <channel_handler_get+0x1c>)
    421c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4220:	f410 7f80 	tst.w	r0, #256	; 0x100
    4224:	d004      	beq.n	4230 <channel_handler_get+0x18>
    4226:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    422a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    422e:	4770      	bx	lr
        return NULL;
    4230:	2000      	movs	r0, #0
}
    4232:	4770      	bx	lr
    4234:	20000058 	.word	0x20000058

00004238 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4238:	b570      	push	{r4, r5, r6, lr}
    423a:	4604      	mov	r4, r0
    423c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    423e:	f7ff ffeb 	bl	4218 <channel_handler_get>

    if (handler)
    4242:	b120      	cbz	r0, 424e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    4244:	6806      	ldr	r6, [r0, #0]
    4246:	6842      	ldr	r2, [r0, #4]
    4248:	4629      	mov	r1, r5
    424a:	4620      	mov	r0, r4
    424c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    424e:	4b04      	ldr	r3, [pc, #16]	; (4260 <call_handler+0x28>)
    4250:	689b      	ldr	r3, [r3, #8]
    4252:	b123      	cbz	r3, 425e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4254:	4a02      	ldr	r2, [pc, #8]	; (4260 <call_handler+0x28>)
    4256:	68d2      	ldr	r2, [r2, #12]
    4258:	4629      	mov	r1, r5
    425a:	4620      	mov	r0, r4
    425c:	4798      	blx	r3
    }
}
    425e:	bd70      	pop	{r4, r5, r6, pc}
    4260:	20000058 	.word	0x20000058

00004264 <latch_pending_read_and_check>:
    }
}

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    4264:	b410      	push	{r4}
    4266:	b083      	sub	sp, #12
    4268:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    426a:	4b12      	ldr	r3, [pc, #72]	; (42b4 <latch_pending_read_and_check+0x50>)
    426c:	e893 0003 	ldmia.w	r3, {r0, r1}
    4270:	ab02      	add	r3, sp, #8
    4272:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4276:	4620      	mov	r0, r4
    4278:	2300      	movs	r3, #0
    427a:	e00b      	b.n	4294 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    427c:	aa02      	add	r2, sp, #8
    427e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4282:	f852 2c08 	ldr.w	r2, [r2, #-8]
    4286:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    428a:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    428e:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4292:	3301      	adds	r3, #1
    4294:	2b01      	cmp	r3, #1
    4296:	d9f1      	bls.n	427c <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    4298:	2300      	movs	r3, #0
    429a:	2b01      	cmp	r3, #1
    429c:	d804      	bhi.n	42a8 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    429e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    42a2:	b92a      	cbnz	r2, 42b0 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    42a4:	3301      	adds	r3, #1
    42a6:	e7f8      	b.n	429a <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    42a8:	2000      	movs	r0, #0
}
    42aa:	b003      	add	sp, #12
    42ac:	bc10      	pop	{r4}
    42ae:	4770      	bx	lr
            return true;
    42b0:	2001      	movs	r0, #1
    42b2:	e7fa      	b.n	42aa <latch_pending_read_and_check+0x46>
    42b4:	00008fc0 	.word	0x00008fc0

000042b8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    42b8:	f100 0208 	add.w	r2, r0, #8
    42bc:	4b16      	ldr	r3, [pc, #88]	; (4318 <release_handler+0x60>)
    42be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    42c2:	f413 7f80 	tst.w	r3, #256	; 0x100
    42c6:	d026      	beq.n	4316 <release_handler+0x5e>
{
    42c8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    42ca:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    42ce:	4610      	mov	r0, r2
    42d0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    42d4:	4a10      	ldr	r2, [pc, #64]	; (4318 <release_handler+0x60>)
    42d6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    42da:	4620      	mov	r0, r4
    42dc:	f7ff ff6c 	bl	41b8 <handler_in_use>
    42e0:	b100      	cbz	r0, 42e4 <release_handler+0x2c>
}
    42e2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    42e4:	480c      	ldr	r0, [pc, #48]	; (4318 <release_handler+0x60>)
    42e6:	2300      	movs	r3, #0
    42e8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    42ec:	4621      	mov	r1, r4
    42ee:	3074      	adds	r0, #116	; 0x74
    42f0:	f7ff fd50 	bl	3d94 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    42f4:	4b09      	ldr	r3, [pc, #36]	; (431c <release_handler+0x64>)
    42f6:	4298      	cmp	r0, r3
    42f8:	d0f3      	beq.n	42e2 <release_handler+0x2a>
    42fa:	4c09      	ldr	r4, [pc, #36]	; (4320 <release_handler+0x68>)
    42fc:	f44f 7399 	mov.w	r3, #306	; 0x132
    4300:	4622      	mov	r2, r4
    4302:	4908      	ldr	r1, [pc, #32]	; (4324 <release_handler+0x6c>)
    4304:	4808      	ldr	r0, [pc, #32]	; (4328 <release_handler+0x70>)
    4306:	f003 fe4d 	bl	7fa4 <printk>
    430a:	f44f 7199 	mov.w	r1, #306	; 0x132
    430e:	4620      	mov	r0, r4
    4310:	f003 ffa1 	bl	8256 <assert_post_action>
    4314:	e7e5      	b.n	42e2 <release_handler+0x2a>
    4316:	4770      	bx	lr
    4318:	20000058 	.word	0x20000058
    431c:	0bad0000 	.word	0x0bad0000
    4320:	00009914 	.word	0x00009914
    4324:	00009954 	.word	0x00009954
    4328:	00009078 	.word	0x00009078

0000432c <pin_handler_trigger_uninit>:
{
    432c:	b510      	push	{r4, lr}
    432e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    4330:	f7ff ff1a 	bl	4168 <pin_in_use_by_te>
    4334:	b140      	cbz	r0, 4348 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4336:	4620      	mov	r0, r4
    4338:	f7ff ff36 	bl	41a8 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    433c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    4340:	4b06      	ldr	r3, [pc, #24]	; (435c <pin_handler_trigger_uninit+0x30>)
    4342:	2200      	movs	r2, #0
    4344:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    4348:	4620      	mov	r0, r4
    434a:	f7ff ffb5 	bl	42b8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    434e:	3408      	adds	r4, #8
    4350:	4b03      	ldr	r3, [pc, #12]	; (4360 <pin_handler_trigger_uninit+0x34>)
    4352:	2200      	movs	r2, #0
    4354:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    4358:	bd10      	pop	{r4, pc}
    435a:	bf00      	nop
    435c:	40006000 	.word	0x40006000
    4360:	20000058 	.word	0x20000058

00004364 <pin_handler_set>:
{
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	b082      	sub	sp, #8
    4368:	4606      	mov	r6, r0
    436a:	460c      	mov	r4, r1
    436c:	4615      	mov	r5, r2
    release_handler(pin);
    436e:	f7ff ffa3 	bl	42b8 <release_handler>
    if (!handler)
    4372:	b324      	cbz	r4, 43be <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    4374:	4629      	mov	r1, r5
    4376:	4620      	mov	r0, r4
    4378:	f7ff ff38 	bl	41ec <find_handler>
    if (handler_id < 0)
    437c:	1e03      	subs	r3, r0, #0
    437e:	db13      	blt.n	43a8 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    4380:	4a10      	ldr	r2, [pc, #64]	; (43c4 <pin_handler_set+0x60>)
    4382:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4386:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    438a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    438c:	025b      	lsls	r3, r3, #9
    438e:	b29b      	uxth	r3, r3
    4390:	f106 0008 	add.w	r0, r6, #8
    4394:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    4398:	430b      	orrs	r3, r1
    439a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    439e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    43a2:	4809      	ldr	r0, [pc, #36]	; (43c8 <pin_handler_set+0x64>)
}
    43a4:	b002      	add	sp, #8
    43a6:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    43a8:	f10d 0107 	add.w	r1, sp, #7
    43ac:	4807      	ldr	r0, [pc, #28]	; (43cc <pin_handler_set+0x68>)
    43ae:	f7ff fccd 	bl	3d4c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    43b2:	4b05      	ldr	r3, [pc, #20]	; (43c8 <pin_handler_set+0x64>)
    43b4:	4298      	cmp	r0, r3
    43b6:	d1f5      	bne.n	43a4 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    43b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    43bc:	e7e0      	b.n	4380 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    43be:	4802      	ldr	r0, [pc, #8]	; (43c8 <pin_handler_set+0x64>)
    43c0:	e7f0      	b.n	43a4 <pin_handler_set+0x40>
    43c2:	bf00      	nop
    43c4:	20000058 	.word	0x20000058
    43c8:	0bad0000 	.word	0x0bad0000
    43cc:	200000cc 	.word	0x200000cc

000043d0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    43d0:	b538      	push	{r3, r4, r5, lr}
    43d2:	4604      	mov	r4, r0
    while (mask)
    43d4:	b1cc      	cbz	r4, 440a <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    43d6:	fa94 f3a4 	rbit	r3, r4
    43da:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    43de:	2201      	movs	r2, #1
    43e0:	409a      	lsls	r2, r3
    43e2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    43e6:	4a09      	ldr	r2, [pc, #36]	; (440c <gpiote_evt_handle+0x3c>)
    43e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    43ec:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    43f0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    43f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    43f8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    43fc:	f004 fb9d 	bl	8b3a <gpiote_polarity_to_trigger>
    4400:	4601      	mov	r1, r0
    4402:	4628      	mov	r0, r5
    4404:	f7ff ff18 	bl	4238 <call_handler>
    4408:	e7e4      	b.n	43d4 <gpiote_evt_handle+0x4>
    }
}
    440a:	bd38      	pop	{r3, r4, r5, pc}
    440c:	40006000 	.word	0x40006000

00004410 <next_sense_cond_call_handler>:
{
    4410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4414:	4604      	mov	r4, r0
    4416:	460d      	mov	r5, r1
    4418:	4616      	mov	r6, r2
    if (is_level(trigger))
    441a:	4608      	mov	r0, r1
    441c:	f004 fb8f 	bl	8b3e <is_level>
    4420:	bb60      	cbnz	r0, 447c <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4422:	2e02      	cmp	r6, #2
    4424:	f000 80f5 	beq.w	4612 <next_sense_cond_call_handler+0x202>
    4428:	f04f 0802 	mov.w	r8, #2
    switch (port)
    442c:	0963      	lsrs	r3, r4, #5
    442e:	f000 80f3 	beq.w	4618 <next_sense_cond_call_handler+0x208>
    4432:	2b01      	cmp	r3, #1
    4434:	f040 80f3 	bne.w	461e <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    4438:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    443c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4440:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4442:	f013 0f01 	tst.w	r3, #1
    4446:	f000 80ec 	beq.w	4622 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    444a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    444e:	0963      	lsrs	r3, r4, #5
    4450:	f000 80f5 	beq.w	463e <next_sense_cond_call_handler+0x22e>
    4454:	2b01      	cmp	r3, #1
    4456:	f000 80f5 	beq.w	4644 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    445a:	f8df 922c 	ldr.w	r9, [pc, #556]	; 4688 <next_sense_cond_call_handler+0x278>
    445e:	f240 232e 	movw	r3, #558	; 0x22e
    4462:	464a      	mov	r2, r9
    4464:	4986      	ldr	r1, [pc, #536]	; (4680 <next_sense_cond_call_handler+0x270>)
    4466:	4887      	ldr	r0, [pc, #540]	; (4684 <next_sense_cond_call_handler+0x274>)
    4468:	f003 fd9c 	bl	7fa4 <printk>
    446c:	f240 212e 	movw	r1, #558	; 0x22e
    4470:	4648      	mov	r0, r9
    4472:	f003 fef0 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    4476:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    447a:	e0e4      	b.n	4646 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    447c:	4629      	mov	r1, r5
    447e:	4620      	mov	r0, r4
    4480:	f7ff feda 	bl	4238 <call_handler>
    switch (port)
    4484:	0963      	lsrs	r3, r4, #5
    4486:	d01f      	beq.n	44c8 <next_sense_cond_call_handler+0xb8>
    4488:	2b01      	cmp	r3, #1
    448a:	d120      	bne.n	44ce <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    448c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4490:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4494:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4496:	f013 0f01 	tst.w	r3, #1
    449a:	d01a      	beq.n	44d2 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    449c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    44a0:	0963      	lsrs	r3, r4, #5
    44a2:	d024      	beq.n	44ee <next_sense_cond_call_handler+0xde>
    44a4:	2b01      	cmp	r3, #1
    44a6:	d025      	beq.n	44f4 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    44a8:	4f77      	ldr	r7, [pc, #476]	; (4688 <next_sense_cond_call_handler+0x278>)
    44aa:	f240 232e 	movw	r3, #558	; 0x22e
    44ae:	463a      	mov	r2, r7
    44b0:	4973      	ldr	r1, [pc, #460]	; (4680 <next_sense_cond_call_handler+0x270>)
    44b2:	4874      	ldr	r0, [pc, #464]	; (4684 <next_sense_cond_call_handler+0x274>)
    44b4:	f003 fd76 	bl	7fa4 <printk>
    44b8:	f240 212e 	movw	r1, #558	; 0x22e
    44bc:	4638      	mov	r0, r7
    44be:	f003 feca 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    44c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    44c6:	e016      	b.n	44f6 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    44c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    44cc:	e7e0      	b.n	4490 <next_sense_cond_call_handler+0x80>
    switch (port)
    44ce:	2300      	movs	r3, #0
    44d0:	e7de      	b.n	4490 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    44d2:	4d6d      	ldr	r5, [pc, #436]	; (4688 <next_sense_cond_call_handler+0x278>)
    44d4:	f240 2329 	movw	r3, #553	; 0x229
    44d8:	462a      	mov	r2, r5
    44da:	496c      	ldr	r1, [pc, #432]	; (468c <next_sense_cond_call_handler+0x27c>)
    44dc:	4869      	ldr	r0, [pc, #420]	; (4684 <next_sense_cond_call_handler+0x274>)
    44de:	f003 fd61 	bl	7fa4 <printk>
    44e2:	f240 2129 	movw	r1, #553	; 0x229
    44e6:	4628      	mov	r0, r5
    44e8:	f003 feb5 	bl	8256 <assert_post_action>
    44ec:	e7d6      	b.n	449c <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    44ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    44f2:	e000      	b.n	44f6 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    44f4:	4b66      	ldr	r3, [pc, #408]	; (4690 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    44f6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    44fa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    44fe:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4502:	429e      	cmp	r6, r3
    4504:	f040 80af 	bne.w	4666 <next_sense_cond_call_handler+0x256>
    switch (port)
    4508:	0963      	lsrs	r3, r4, #5
    450a:	d01f      	beq.n	454c <next_sense_cond_call_handler+0x13c>
    450c:	2b01      	cmp	r3, #1
    450e:	d120      	bne.n	4552 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    4510:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4514:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4518:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    451a:	f013 0f01 	tst.w	r3, #1
    451e:	d01a      	beq.n	4556 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    4520:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4524:	0963      	lsrs	r3, r4, #5
    4526:	d024      	beq.n	4572 <next_sense_cond_call_handler+0x162>
    4528:	2b01      	cmp	r3, #1
    452a:	d025      	beq.n	4578 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    452c:	4f56      	ldr	r7, [pc, #344]	; (4688 <next_sense_cond_call_handler+0x278>)
    452e:	f240 232e 	movw	r3, #558	; 0x22e
    4532:	463a      	mov	r2, r7
    4534:	4952      	ldr	r1, [pc, #328]	; (4680 <next_sense_cond_call_handler+0x270>)
    4536:	4853      	ldr	r0, [pc, #332]	; (4684 <next_sense_cond_call_handler+0x274>)
    4538:	f003 fd34 	bl	7fa4 <printk>
    453c:	f240 212e 	movw	r1, #558	; 0x22e
    4540:	4638      	mov	r0, r7
    4542:	f003 fe88 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    4546:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    454a:	e016      	b.n	457a <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    454c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4550:	e7e0      	b.n	4514 <next_sense_cond_call_handler+0x104>
    switch (port)
    4552:	2300      	movs	r3, #0
    4554:	e7de      	b.n	4514 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4556:	4d4c      	ldr	r5, [pc, #304]	; (4688 <next_sense_cond_call_handler+0x278>)
    4558:	f240 2329 	movw	r3, #553	; 0x229
    455c:	462a      	mov	r2, r5
    455e:	494b      	ldr	r1, [pc, #300]	; (468c <next_sense_cond_call_handler+0x27c>)
    4560:	4848      	ldr	r0, [pc, #288]	; (4684 <next_sense_cond_call_handler+0x274>)
    4562:	f003 fd1f 	bl	7fa4 <printk>
    4566:	f240 2129 	movw	r1, #553	; 0x229
    456a:	4628      	mov	r0, r5
    456c:	f003 fe73 	bl	8256 <assert_post_action>
    4570:	e7d6      	b.n	4520 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    4572:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4576:	e000      	b.n	457a <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4578:	4945      	ldr	r1, [pc, #276]	; (4690 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    457a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    457e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4582:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    458a:	0963      	lsrs	r3, r4, #5
    458c:	d01f      	beq.n	45ce <next_sense_cond_call_handler+0x1be>
    458e:	2b01      	cmp	r3, #1
    4590:	d120      	bne.n	45d4 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    4592:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4596:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    459a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    459c:	f013 0f01 	tst.w	r3, #1
    45a0:	d01a      	beq.n	45d8 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    45a2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    45a6:	0964      	lsrs	r4, r4, #5
    45a8:	d024      	beq.n	45f4 <next_sense_cond_call_handler+0x1e4>
    45aa:	2c01      	cmp	r4, #1
    45ac:	d025      	beq.n	45fa <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    45ae:	4c36      	ldr	r4, [pc, #216]	; (4688 <next_sense_cond_call_handler+0x278>)
    45b0:	f240 232e 	movw	r3, #558	; 0x22e
    45b4:	4622      	mov	r2, r4
    45b6:	4932      	ldr	r1, [pc, #200]	; (4680 <next_sense_cond_call_handler+0x270>)
    45b8:	4832      	ldr	r0, [pc, #200]	; (4684 <next_sense_cond_call_handler+0x274>)
    45ba:	f003 fcf3 	bl	7fa4 <printk>
    45be:	f240 212e 	movw	r1, #558	; 0x22e
    45c2:	4620      	mov	r0, r4
    45c4:	f003 fe47 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    45c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    45cc:	e016      	b.n	45fc <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    45ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45d2:	e7e0      	b.n	4596 <next_sense_cond_call_handler+0x186>
    switch (port)
    45d4:	2300      	movs	r3, #0
    45d6:	e7de      	b.n	4596 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    45d8:	4d2b      	ldr	r5, [pc, #172]	; (4688 <next_sense_cond_call_handler+0x278>)
    45da:	f240 2329 	movw	r3, #553	; 0x229
    45de:	462a      	mov	r2, r5
    45e0:	492a      	ldr	r1, [pc, #168]	; (468c <next_sense_cond_call_handler+0x27c>)
    45e2:	4828      	ldr	r0, [pc, #160]	; (4684 <next_sense_cond_call_handler+0x274>)
    45e4:	f003 fcde 	bl	7fa4 <printk>
    45e8:	f240 2129 	movw	r1, #553	; 0x229
    45ec:	4628      	mov	r0, r5
    45ee:	f003 fe32 	bl	8256 <assert_post_action>
    45f2:	e7d6      	b.n	45a2 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    45f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    45f8:	e000      	b.n	45fc <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    45fa:	4925      	ldr	r1, [pc, #148]	; (4690 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    45fc:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4600:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4604:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4608:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    460c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    4610:	e029      	b.n	4666 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4612:	f04f 0803 	mov.w	r8, #3
    4616:	e709      	b.n	442c <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    4618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    461c:	e70e      	b.n	443c <next_sense_cond_call_handler+0x2c>
    switch (port)
    461e:	2300      	movs	r3, #0
    4620:	e70c      	b.n	443c <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4622:	4f19      	ldr	r7, [pc, #100]	; (4688 <next_sense_cond_call_handler+0x278>)
    4624:	f240 2329 	movw	r3, #553	; 0x229
    4628:	463a      	mov	r2, r7
    462a:	4918      	ldr	r1, [pc, #96]	; (468c <next_sense_cond_call_handler+0x27c>)
    462c:	4815      	ldr	r0, [pc, #84]	; (4684 <next_sense_cond_call_handler+0x274>)
    462e:	f003 fcb9 	bl	7fa4 <printk>
    4632:	f240 2129 	movw	r1, #553	; 0x229
    4636:	4638      	mov	r0, r7
    4638:	f003 fe0d 	bl	8256 <assert_post_action>
    463c:	e705      	b.n	444a <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    463e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4642:	e000      	b.n	4646 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4644:	4912      	ldr	r1, [pc, #72]	; (4690 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4646:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    464a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    464e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4652:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4656:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    465a:	2d03      	cmp	r5, #3
    465c:	d007      	beq.n	466e <next_sense_cond_call_handler+0x25e>
    465e:	2e02      	cmp	r6, #2
    4660:	d003      	beq.n	466a <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4662:	2e03      	cmp	r6, #3
    4664:	d008      	beq.n	4678 <next_sense_cond_call_handler+0x268>
}
    4666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    466a:	2d01      	cmp	r5, #1
    466c:	d1f9      	bne.n	4662 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    466e:	4629      	mov	r1, r5
    4670:	4620      	mov	r0, r4
    4672:	f7ff fde1 	bl	4238 <call_handler>
}
    4676:	e7f6      	b.n	4666 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4678:	2d02      	cmp	r5, #2
    467a:	d1f4      	bne.n	4666 <next_sense_cond_call_handler+0x256>
    467c:	e7f7      	b.n	466e <next_sense_cond_call_handler+0x25e>
    467e:	bf00      	nop
    4680:	00009074 	.word	0x00009074
    4684:	00009078 	.word	0x00009078
    4688:	00009760 	.word	0x00009760
    468c:	00009794 	.word	0x00009794
    4690:	50000300 	.word	0x50000300

00004694 <port_event_handle>:
{
    4694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4698:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    469a:	4a64      	ldr	r2, [pc, #400]	; (482c <port_event_handle+0x198>)
    469c:	466b      	mov	r3, sp
    469e:	e892 0003 	ldmia.w	r2, {r0, r1}
    46a2:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    46a6:	2300      	movs	r3, #0
    46a8:	a802      	add	r0, sp, #8
    46aa:	e00b      	b.n	46c4 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    46ac:	aa04      	add	r2, sp, #16
    46ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    46b2:	f852 2c10 	ldr.w	r2, [r2, #-16]
    46b6:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    46ba:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    46be:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    46c2:	3301      	adds	r3, #1
    46c4:	2b01      	cmp	r3, #1
    46c6:	d9f1      	bls.n	46ac <port_event_handle+0x18>
    46c8:	e0ab      	b.n	4822 <port_event_handle+0x18e>
            mask = P0_FEATURE_PINS_PRESENT;
    46ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46ce:	e07f      	b.n	47d0 <port_event_handle+0x13c>
    switch (port)
    46d0:	2300      	movs	r3, #0
    46d2:	e07d      	b.n	47d0 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    46d4:	4f56      	ldr	r7, [pc, #344]	; (4830 <port_event_handle+0x19c>)
    46d6:	f240 2329 	movw	r3, #553	; 0x229
    46da:	463a      	mov	r2, r7
    46dc:	4955      	ldr	r1, [pc, #340]	; (4834 <port_event_handle+0x1a0>)
    46de:	4856      	ldr	r0, [pc, #344]	; (4838 <port_event_handle+0x1a4>)
    46e0:	f003 fc60 	bl	7fa4 <printk>
    46e4:	f240 2129 	movw	r1, #553	; 0x229
    46e8:	4638      	mov	r0, r7
    46ea:	f003 fdb4 	bl	8256 <assert_post_action>
    46ee:	e076      	b.n	47de <port_event_handle+0x14a>
        case 0: return NRF_P0;
    46f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    46f4:	e000      	b.n	46f8 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    46f6:	4b51      	ldr	r3, [pc, #324]	; (483c <port_event_handle+0x1a8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    46f8:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    46fc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    4700:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4704:	4631      	mov	r1, r6
    4706:	4620      	mov	r0, r4
    4708:	f7ff fe82 	bl	4410 <next_sense_cond_call_handler>
    switch (port)
    470c:	0963      	lsrs	r3, r4, #5
    470e:	d01f      	beq.n	4750 <port_event_handle+0xbc>
    4710:	2b01      	cmp	r3, #1
    4712:	d120      	bne.n	4756 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    4714:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4718:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    471c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    471e:	f013 0f01 	tst.w	r3, #1
    4722:	d01a      	beq.n	475a <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    4724:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4728:	0964      	lsrs	r4, r4, #5
    472a:	d024      	beq.n	4776 <port_event_handle+0xe2>
    472c:	2c01      	cmp	r4, #1
    472e:	d025      	beq.n	477c <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    4730:	4c3f      	ldr	r4, [pc, #252]	; (4830 <port_event_handle+0x19c>)
    4732:	f240 232e 	movw	r3, #558	; 0x22e
    4736:	4622      	mov	r2, r4
    4738:	4941      	ldr	r1, [pc, #260]	; (4840 <port_event_handle+0x1ac>)
    473a:	483f      	ldr	r0, [pc, #252]	; (4838 <port_event_handle+0x1a4>)
    473c:	f003 fc32 	bl	7fa4 <printk>
    4740:	f240 212e 	movw	r1, #558	; 0x22e
    4744:	4620      	mov	r0, r4
    4746:	f003 fd86 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    474a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    474e:	e016      	b.n	477e <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    4750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4754:	e7e0      	b.n	4718 <port_event_handle+0x84>
    switch (port)
    4756:	2300      	movs	r3, #0
    4758:	e7de      	b.n	4718 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    475a:	4e35      	ldr	r6, [pc, #212]	; (4830 <port_event_handle+0x19c>)
    475c:	f240 2329 	movw	r3, #553	; 0x229
    4760:	4632      	mov	r2, r6
    4762:	4934      	ldr	r1, [pc, #208]	; (4834 <port_event_handle+0x1a0>)
    4764:	4834      	ldr	r0, [pc, #208]	; (4838 <port_event_handle+0x1a4>)
    4766:	f003 fc1d 	bl	7fa4 <printk>
    476a:	f240 2129 	movw	r1, #553	; 0x229
    476e:	4630      	mov	r0, r6
    4770:	f003 fd71 	bl	8256 <assert_post_action>
    4774:	e7d6      	b.n	4724 <port_event_handle+0x90>
        case 0: return NRF_P0;
    4776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    477a:	e000      	b.n	477e <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    477c:	4a2f      	ldr	r2, [pc, #188]	; (483c <port_event_handle+0x1a8>)
    reg->LATCH = (1 << pin_number);
    477e:	2301      	movs	r3, #1
    4780:	40b3      	lsls	r3, r6
    4782:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    4786:	ab04      	add	r3, sp, #16
    4788:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    478c:	f853 4c08 	ldr.w	r4, [r3, #-8]
    4790:	2c00      	cmp	r4, #0
    4792:	d03b      	beq.n	480c <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    4794:	fa94 f4a4 	rbit	r4, r4
    4798:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    479c:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    47a0:	f104 0208 	add.w	r2, r4, #8
    47a4:	4b27      	ldr	r3, [pc, #156]	; (4844 <port_event_handle+0x1b0>)
    47a6:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    47aa:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    47ae:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    47b0:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    47b4:	a802      	add	r0, sp, #8
    47b6:	2301      	movs	r3, #1
    47b8:	fa03 f202 	lsl.w	r2, r3, r2
    47bc:	5c43      	ldrb	r3, [r0, r1]
    47be:	ea23 0302 	bic.w	r3, r3, r2
    47c2:	5443      	strb	r3, [r0, r1]
    switch (port)
    47c4:	0963      	lsrs	r3, r4, #5
    47c6:	d080      	beq.n	46ca <port_event_handle+0x36>
    47c8:	2b01      	cmp	r3, #1
    47ca:	d181      	bne.n	46d0 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    47cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    47d0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    47d4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    47d6:	f013 0f01 	tst.w	r3, #1
    47da:	f43f af7b 	beq.w	46d4 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    47de:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47e2:	0963      	lsrs	r3, r4, #5
    47e4:	d084      	beq.n	46f0 <port_event_handle+0x5c>
    47e6:	2b01      	cmp	r3, #1
    47e8:	d085      	beq.n	46f6 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    47ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4830 <port_event_handle+0x19c>
    47ee:	f240 232e 	movw	r3, #558	; 0x22e
    47f2:	4642      	mov	r2, r8
    47f4:	4912      	ldr	r1, [pc, #72]	; (4840 <port_event_handle+0x1ac>)
    47f6:	4810      	ldr	r0, [pc, #64]	; (4838 <port_event_handle+0x1a4>)
    47f8:	f003 fbd4 	bl	7fa4 <printk>
    47fc:	f240 212e 	movw	r1, #558	; 0x22e
    4800:	4640      	mov	r0, r8
    4802:	f003 fd28 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    4806:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    480a:	e775      	b.n	46f8 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    480c:	3501      	adds	r5, #1
    480e:	2d01      	cmp	r5, #1
    4810:	d9b9      	bls.n	4786 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4812:	4b0d      	ldr	r3, [pc, #52]	; (4848 <port_event_handle+0x1b4>)
    4814:	2200      	movs	r2, #0
    4816:	601a      	str	r2, [r3, #0]
    4818:	681b      	ldr	r3, [r3, #0]
    } while (latch_pending_read_and_check(latch));
    481a:	a802      	add	r0, sp, #8
    481c:	f7ff fd22 	bl	4264 <latch_pending_read_and_check>
    4820:	b108      	cbz	r0, 4826 <port_event_handle+0x192>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4822:	2500      	movs	r5, #0
    4824:	e7f3      	b.n	480e <port_event_handle+0x17a>
}
    4826:	b004      	add	sp, #16
    4828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    482c:	00008fc0 	.word	0x00008fc0
    4830:	00009760 	.word	0x00009760
    4834:	00009794 	.word	0x00009794
    4838:	00009078 	.word	0x00009078
    483c:	50000300 	.word	0x50000300
    4840:	00009074 	.word	0x00009074
    4844:	20000058 	.word	0x20000058
    4848:	4000617c 	.word	0x4000617c

0000484c <nrfx_gpiote_input_configure>:
{
    484c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4850:	4604      	mov	r4, r0
    4852:	4615      	mov	r5, r2
    4854:	461e      	mov	r6, r3
    if (p_input_config)
    4856:	2900      	cmp	r1, #0
    4858:	d062      	beq.n	4920 <nrfx_gpiote_input_configure+0xd4>
    485a:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    485c:	f004 f957 	bl	8b0e <pin_is_task_output>
    4860:	2800      	cmp	r0, #0
    4862:	f040 80cb 	bne.w	49fc <nrfx_gpiote_input_configure+0x1b0>
    switch (port)
    4866:	0963      	lsrs	r3, r4, #5
    4868:	d020      	beq.n	48ac <nrfx_gpiote_input_configure+0x60>
    486a:	2b01      	cmp	r3, #1
    486c:	d121      	bne.n	48b2 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    486e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4872:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4876:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4878:	f013 0f01 	tst.w	r3, #1
    487c:	d01b      	beq.n	48b6 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    487e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4882:	0963      	lsrs	r3, r4, #5
    4884:	d025      	beq.n	48d2 <nrfx_gpiote_input_configure+0x86>
    4886:	2b01      	cmp	r3, #1
    4888:	d026      	beq.n	48d8 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    488a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 4a14 <nrfx_gpiote_input_configure+0x1c8>
    488e:	f240 232e 	movw	r3, #558	; 0x22e
    4892:	464a      	mov	r2, r9
    4894:	495d      	ldr	r1, [pc, #372]	; (4a0c <nrfx_gpiote_input_configure+0x1c0>)
    4896:	485e      	ldr	r0, [pc, #376]	; (4a10 <nrfx_gpiote_input_configure+0x1c4>)
    4898:	f003 fb84 	bl	7fa4 <printk>
    489c:	f240 212e 	movw	r1, #558	; 0x22e
    48a0:	4648      	mov	r0, r9
    48a2:	f003 fcd8 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    48a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    48aa:	e016      	b.n	48da <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    48ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    48b0:	e7df      	b.n	4872 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    48b2:	2300      	movs	r3, #0
    48b4:	e7dd      	b.n	4872 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    48b6:	4f57      	ldr	r7, [pc, #348]	; (4a14 <nrfx_gpiote_input_configure+0x1c8>)
    48b8:	f240 2329 	movw	r3, #553	; 0x229
    48bc:	463a      	mov	r2, r7
    48be:	4956      	ldr	r1, [pc, #344]	; (4a18 <nrfx_gpiote_input_configure+0x1cc>)
    48c0:	4853      	ldr	r0, [pc, #332]	; (4a10 <nrfx_gpiote_input_configure+0x1c4>)
    48c2:	f003 fb6f 	bl	7fa4 <printk>
    48c6:	f240 2129 	movw	r1, #553	; 0x229
    48ca:	4638      	mov	r0, r7
    48cc:	f003 fcc3 	bl	8256 <assert_post_action>
    48d0:	e7d5      	b.n	487e <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    48d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    48d6:	e000      	b.n	48da <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48d8:	4950      	ldr	r1, [pc, #320]	; (4a1c <nrfx_gpiote_input_configure+0x1d0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    48da:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    48de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    48e2:	f1b8 0f00 	cmp.w	r8, #0
    48e6:	d03c      	beq.n	4962 <nrfx_gpiote_input_configure+0x116>
    48e8:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    48ea:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    48ee:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    48f2:	f1b8 0f00 	cmp.w	r8, #0
    48f6:	d036      	beq.n	4966 <nrfx_gpiote_input_configure+0x11a>
    48f8:	f898 2000 	ldrb.w	r2, [r8]
    48fc:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    48fe:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    4900:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    4904:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4908:	4a45      	ldr	r2, [pc, #276]	; (4a20 <nrfx_gpiote_input_configure+0x1d4>)
    490a:	f104 0108 	add.w	r1, r4, #8
    490e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4912:	f023 0302 	bic.w	r3, r3, #2
    4916:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4918:	f043 0301 	orr.w	r3, r3, #1
    491c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4920:	b1b5      	cbz	r5, 4950 <nrfx_gpiote_input_configure+0x104>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4922:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4926:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    492a:	4620      	mov	r0, r4
    492c:	f7ff fc32 	bl	4194 <pin_is_output>
    4930:	b1d8      	cbz	r0, 496a <nrfx_gpiote_input_configure+0x11e>
            if (use_evt)
    4932:	f1b9 0f00 	cmp.w	r9, #0
    4936:	d163      	bne.n	4a00 <nrfx_gpiote_input_configure+0x1b4>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4938:	4b39      	ldr	r3, [pc, #228]	; (4a20 <nrfx_gpiote_input_configure+0x1d4>)
    493a:	f104 0208 	add.w	r2, r4, #8
    493e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    4942:	f020 001c 	bic.w	r0, r0, #28
    4946:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4948:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    494c:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    4950:	2e00      	cmp	r6, #0
    4952:	d059      	beq.n	4a08 <nrfx_gpiote_input_configure+0x1bc>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4954:	6872      	ldr	r2, [r6, #4]
    4956:	6831      	ldr	r1, [r6, #0]
    4958:	4620      	mov	r0, r4
    495a:	f7ff fd03 	bl	4364 <pin_handler_set>
}
    495e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4962:	2200      	movs	r2, #0
    4964:	e7c1      	b.n	48ea <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4966:	2200      	movs	r2, #0
    4968:	e7c9      	b.n	48fe <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    496a:	4b2d      	ldr	r3, [pc, #180]	; (4a20 <nrfx_gpiote_input_configure+0x1d4>)
    496c:	f104 0208 	add.w	r2, r4, #8
    4970:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    4974:	f027 0720 	bic.w	r7, r7, #32
    4978:	04ff      	lsls	r7, r7, #19
    497a:	0cff      	lsrs	r7, r7, #19
    497c:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    4980:	f1b9 0f00 	cmp.w	r9, #0
    4984:	d0d8      	beq.n	4938 <nrfx_gpiote_input_configure+0xec>
                if (!edge)
    4986:	f1b8 0f03 	cmp.w	r8, #3
    498a:	d83b      	bhi.n	4a04 <nrfx_gpiote_input_configure+0x1b8>
                uint8_t ch = *p_trigger_config->p_in_channel;
    498c:	686b      	ldr	r3, [r5, #4]
    498e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4990:	f1b8 0f00 	cmp.w	r8, #0
    4994:	d106      	bne.n	49a4 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    4996:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    499a:	4b22      	ldr	r3, [pc, #136]	; (4a24 <nrfx_gpiote_input_configure+0x1d8>)
    499c:	2200      	movs	r2, #0
    499e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    49a2:	e7c9      	b.n	4938 <nrfx_gpiote_input_configure+0xec>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    49a4:	4640      	mov	r0, r8
    49a6:	f004 f8c9 	bl	8b3c <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    49aa:	4b1e      	ldr	r3, [pc, #120]	; (4a24 <nrfx_gpiote_input_configure+0x1d8>)
    49ac:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    49b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    49b4:	f021 0103 	bic.w	r1, r1, #3
    49b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    49bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    49c0:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    49c4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    49c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    49cc:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    49d0:	0221      	lsls	r1, r4, #8
    49d2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    49d6:	0400      	lsls	r0, r0, #16
    49d8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    49dc:	4301      	orrs	r1, r0
    49de:	ea4c 0101 	orr.w	r1, ip, r1
    49e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    49e6:	036d      	lsls	r5, r5, #13
    49e8:	b2ad      	uxth	r5, r5
    49ea:	f104 0308 	add.w	r3, r4, #8
    49ee:	432f      	orrs	r7, r5
    49f0:	f047 0720 	orr.w	r7, r7, #32
    49f4:	4a0a      	ldr	r2, [pc, #40]	; (4a20 <nrfx_gpiote_input_configure+0x1d4>)
    49f6:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    49fa:	e79d      	b.n	4938 <nrfx_gpiote_input_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
    49fc:	480a      	ldr	r0, [pc, #40]	; (4a28 <nrfx_gpiote_input_configure+0x1dc>)
    49fe:	e7ae      	b.n	495e <nrfx_gpiote_input_configure+0x112>
                return NRFX_ERROR_INVALID_PARAM;
    4a00:	4809      	ldr	r0, [pc, #36]	; (4a28 <nrfx_gpiote_input_configure+0x1dc>)
    4a02:	e7ac      	b.n	495e <nrfx_gpiote_input_configure+0x112>
                    return NRFX_ERROR_INVALID_PARAM;
    4a04:	4808      	ldr	r0, [pc, #32]	; (4a28 <nrfx_gpiote_input_configure+0x1dc>)
    4a06:	e7aa      	b.n	495e <nrfx_gpiote_input_configure+0x112>
        err = NRFX_SUCCESS;
    4a08:	4808      	ldr	r0, [pc, #32]	; (4a2c <nrfx_gpiote_input_configure+0x1e0>)
    4a0a:	e7a8      	b.n	495e <nrfx_gpiote_input_configure+0x112>
    4a0c:	00009074 	.word	0x00009074
    4a10:	00009078 	.word	0x00009078
    4a14:	00009760 	.word	0x00009760
    4a18:	00009794 	.word	0x00009794
    4a1c:	50000300 	.word	0x50000300
    4a20:	20000058 	.word	0x20000058
    4a24:	40006000 	.word	0x40006000
    4a28:	0bad0004 	.word	0x0bad0004
    4a2c:	0bad0000 	.word	0x0bad0000

00004a30 <nrfx_gpiote_output_configure>:
{
    4a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a34:	4604      	mov	r4, r0
    4a36:	4615      	mov	r5, r2
    if (p_config)
    4a38:	2900      	cmp	r1, #0
    4a3a:	f000 8086 	beq.w	4b4a <nrfx_gpiote_output_configure+0x11a>
    4a3e:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4a40:	f004 f874 	bl	8b2c <pin_is_input>
    4a44:	b128      	cbz	r0, 4a52 <nrfx_gpiote_output_configure+0x22>
    4a46:	4620      	mov	r0, r4
    4a48:	f7ff fb8e 	bl	4168 <pin_in_use_by_te>
    4a4c:	2800      	cmp	r0, #0
    4a4e:	f040 80cc 	bne.w	4bea <nrfx_gpiote_output_configure+0x1ba>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4a52:	4620      	mov	r0, r4
    4a54:	f7ff fb92 	bl	417c <pin_has_trigger>
    4a58:	b118      	cbz	r0, 4a62 <nrfx_gpiote_output_configure+0x32>
    4a5a:	787b      	ldrb	r3, [r7, #1]
    4a5c:	2b01      	cmp	r3, #1
    4a5e:	f000 80c6 	beq.w	4bee <nrfx_gpiote_output_configure+0x1be>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4a62:	f107 0901 	add.w	r9, r7, #1
    4a66:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    4a6a:	0963      	lsrs	r3, r4, #5
    4a6c:	d020      	beq.n	4ab0 <nrfx_gpiote_output_configure+0x80>
    4a6e:	2b01      	cmp	r3, #1
    4a70:	d121      	bne.n	4ab6 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    4a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4a76:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4a7a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4a7c:	f013 0f01 	tst.w	r3, #1
    4a80:	d01b      	beq.n	4aba <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    4a82:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a86:	0963      	lsrs	r3, r4, #5
    4a88:	d025      	beq.n	4ad6 <nrfx_gpiote_output_configure+0xa6>
    4a8a:	2b01      	cmp	r3, #1
    4a8c:	d026      	beq.n	4adc <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    4a8e:	f8df a178 	ldr.w	sl, [pc, #376]	; 4c08 <nrfx_gpiote_output_configure+0x1d8>
    4a92:	f240 232e 	movw	r3, #558	; 0x22e
    4a96:	4652      	mov	r2, sl
    4a98:	4959      	ldr	r1, [pc, #356]	; (4c00 <nrfx_gpiote_output_configure+0x1d0>)
    4a9a:	485a      	ldr	r0, [pc, #360]	; (4c04 <nrfx_gpiote_output_configure+0x1d4>)
    4a9c:	f003 fa82 	bl	7fa4 <printk>
    4aa0:	f240 212e 	movw	r1, #558	; 0x22e
    4aa4:	4650      	mov	r0, sl
    4aa6:	f003 fbd6 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    4aaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4aae:	e016      	b.n	4ade <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    4ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ab4:	e7df      	b.n	4a76 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    4ab6:	2300      	movs	r3, #0
    4ab8:	e7dd      	b.n	4a76 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4aba:	4e53      	ldr	r6, [pc, #332]	; (4c08 <nrfx_gpiote_output_configure+0x1d8>)
    4abc:	f240 2329 	movw	r3, #553	; 0x229
    4ac0:	4632      	mov	r2, r6
    4ac2:	4952      	ldr	r1, [pc, #328]	; (4c0c <nrfx_gpiote_output_configure+0x1dc>)
    4ac4:	484f      	ldr	r0, [pc, #316]	; (4c04 <nrfx_gpiote_output_configure+0x1d4>)
    4ac6:	f003 fa6d 	bl	7fa4 <printk>
    4aca:	f240 2129 	movw	r1, #553	; 0x229
    4ace:	4630      	mov	r0, r6
    4ad0:	f003 fbc1 	bl	8256 <assert_post_action>
    4ad4:	e7d5      	b.n	4a82 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    4ad6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4ada:	e000      	b.n	4ade <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4adc:	4a4c      	ldr	r2, [pc, #304]	; (4c10 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ade:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    4ae2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4ae6:	f1b9 0f00 	cmp.w	r9, #0
    4aea:	d072      	beq.n	4bd2 <nrfx_gpiote_output_configure+0x1a2>
    4aec:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4aee:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4af2:	f1b8 0f00 	cmp.w	r8, #0
    4af6:	d06e      	beq.n	4bd6 <nrfx_gpiote_output_configure+0x1a6>
    4af8:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4afa:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4afc:	2f00      	cmp	r7, #0
    4afe:	d06c      	beq.n	4bda <nrfx_gpiote_output_configure+0x1aa>
    4b00:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4b04:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    4b06:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4b0a:	f1b9 0f00 	cmp.w	r9, #0
    4b0e:	d066      	beq.n	4bde <nrfx_gpiote_output_configure+0x1ae>
    4b10:	787b      	ldrb	r3, [r7, #1]
    4b12:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b14:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4b18:	f1b8 0f00 	cmp.w	r8, #0
    4b1c:	d061      	beq.n	4be2 <nrfx_gpiote_output_configure+0x1b2>
    4b1e:	78b8      	ldrb	r0, [r7, #2]
    4b20:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4b22:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4b24:	2f00      	cmp	r7, #0
    4b26:	d05e      	beq.n	4be6 <nrfx_gpiote_output_configure+0x1b6>
    4b28:	7838      	ldrb	r0, [r7, #0]
    4b2a:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4b2c:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b2e:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    4b30:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4b34:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4b38:	4a36      	ldr	r2, [pc, #216]	; (4c14 <nrfx_gpiote_output_configure+0x1e4>)
    4b3a:	f104 0108 	add.w	r1, r4, #8
    4b3e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4b42:	f043 0303 	orr.w	r3, r3, #3
    4b46:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    4b4a:	2d00      	cmp	r5, #0
    4b4c:	d051      	beq.n	4bf2 <nrfx_gpiote_output_configure+0x1c2>
        if (pin_is_input(pin))
    4b4e:	4620      	mov	r0, r4
    4b50:	f003 ffec 	bl	8b2c <pin_is_input>
    4b54:	2800      	cmp	r0, #0
    4b56:	d14f      	bne.n	4bf8 <nrfx_gpiote_output_configure+0x1c8>
        uint32_t ch = p_task_config->task_ch;
    4b58:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    4b5a:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    4b5e:	4b2e      	ldr	r3, [pc, #184]	; (4c18 <nrfx_gpiote_output_configure+0x1e8>)
    4b60:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4b64:	492b      	ldr	r1, [pc, #172]	; (4c14 <nrfx_gpiote_output_configure+0x1e4>)
    4b66:	f104 0008 	add.w	r0, r4, #8
    4b6a:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    4b6e:	f023 0320 	bic.w	r3, r3, #32
    4b72:	04db      	lsls	r3, r3, #19
    4b74:	0cdb      	lsrs	r3, r3, #19
    4b76:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4b7a:	7869      	ldrb	r1, [r5, #1]
    4b7c:	2900      	cmp	r1, #0
    4b7e:	d03d      	beq.n	4bfc <nrfx_gpiote_output_configure+0x1cc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4b80:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4b84:	4d24      	ldr	r5, [pc, #144]	; (4c18 <nrfx_gpiote_output_configure+0x1e8>)
    4b86:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    4b8a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    4b8e:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    4b92:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    4b96:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4b9a:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    4b9e:	0220      	lsls	r0, r4, #8
    4ba0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4ba4:	0409      	lsls	r1, r1, #16
    4ba6:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4baa:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4bac:	ea4f 500c 	mov.w	r0, ip, lsl #20
    4bb0:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4bb4:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bb6:	4339      	orrs	r1, r7
    4bb8:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bbc:	0352      	lsls	r2, r2, #13
    4bbe:	b292      	uxth	r2, r2
    4bc0:	3408      	adds	r4, #8
    4bc2:	431a      	orrs	r2, r3
    4bc4:	f042 0220 	orr.w	r2, r2, #32
    4bc8:	4b12      	ldr	r3, [pc, #72]	; (4c14 <nrfx_gpiote_output_configure+0x1e4>)
    4bca:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    4bce:	4813      	ldr	r0, [pc, #76]	; (4c1c <nrfx_gpiote_output_configure+0x1ec>)
    4bd0:	e010      	b.n	4bf4 <nrfx_gpiote_output_configure+0x1c4>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4bd2:	2300      	movs	r3, #0
    4bd4:	e78b      	b.n	4aee <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4bd6:	2000      	movs	r0, #0
    4bd8:	e78f      	b.n	4afa <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4bda:	2000      	movs	r0, #0
    4bdc:	e792      	b.n	4b04 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4bde:	2300      	movs	r3, #0
    4be0:	e798      	b.n	4b14 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4be2:	2000      	movs	r0, #0
    4be4:	e79d      	b.n	4b22 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4be6:	2000      	movs	r0, #0
    4be8:	e7a0      	b.n	4b2c <nrfx_gpiote_output_configure+0xfc>
    4bea:	480d      	ldr	r0, [pc, #52]	; (4c20 <nrfx_gpiote_output_configure+0x1f0>)
    4bec:	e002      	b.n	4bf4 <nrfx_gpiote_output_configure+0x1c4>
    4bee:	480c      	ldr	r0, [pc, #48]	; (4c20 <nrfx_gpiote_output_configure+0x1f0>)
    4bf0:	e000      	b.n	4bf4 <nrfx_gpiote_output_configure+0x1c4>
    4bf2:	480a      	ldr	r0, [pc, #40]	; (4c1c <nrfx_gpiote_output_configure+0x1ec>)
}
    4bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return NRFX_ERROR_INVALID_PARAM;
    4bf8:	4809      	ldr	r0, [pc, #36]	; (4c20 <nrfx_gpiote_output_configure+0x1f0>)
    4bfa:	e7fb      	b.n	4bf4 <nrfx_gpiote_output_configure+0x1c4>
    return NRFX_SUCCESS;
    4bfc:	4807      	ldr	r0, [pc, #28]	; (4c1c <nrfx_gpiote_output_configure+0x1ec>)
    4bfe:	e7f9      	b.n	4bf4 <nrfx_gpiote_output_configure+0x1c4>
    4c00:	00009074 	.word	0x00009074
    4c04:	00009078 	.word	0x00009078
    4c08:	00009760 	.word	0x00009760
    4c0c:	00009794 	.word	0x00009794
    4c10:	50000300 	.word	0x50000300
    4c14:	20000058 	.word	0x20000058
    4c18:	40006000 	.word	0x40006000
    4c1c:	0bad0000 	.word	0x0bad0000
    4c20:	0bad0004 	.word	0x0bad0004

00004c24 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4c24:	4b01      	ldr	r3, [pc, #4]	; (4c2c <nrfx_gpiote_global_callback_set+0x8>)
    4c26:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    4c28:	60d9      	str	r1, [r3, #12]
}
    4c2a:	4770      	bx	lr
    4c2c:	20000058 	.word	0x20000058

00004c30 <nrfx_gpiote_channel_get>:
{
    4c30:	b570      	push	{r4, r5, r6, lr}
    4c32:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4c34:	460d      	mov	r5, r1
    4c36:	b159      	cbz	r1, 4c50 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    4c38:	4620      	mov	r0, r4
    4c3a:	f7ff fa95 	bl	4168 <pin_in_use_by_te>
    4c3e:	b1a8      	cbz	r0, 4c6c <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4c40:	3408      	adds	r4, #8
    4c42:	4b0b      	ldr	r3, [pc, #44]	; (4c70 <nrfx_gpiote_channel_get+0x40>)
    4c44:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4c48:	0b5b      	lsrs	r3, r3, #13
    4c4a:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    4c4c:	4809      	ldr	r0, [pc, #36]	; (4c74 <nrfx_gpiote_channel_get+0x44>)
}
    4c4e:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    4c50:	4e09      	ldr	r6, [pc, #36]	; (4c78 <nrfx_gpiote_channel_get+0x48>)
    4c52:	f240 2335 	movw	r3, #565	; 0x235
    4c56:	4632      	mov	r2, r6
    4c58:	4908      	ldr	r1, [pc, #32]	; (4c7c <nrfx_gpiote_channel_get+0x4c>)
    4c5a:	4809      	ldr	r0, [pc, #36]	; (4c80 <nrfx_gpiote_channel_get+0x50>)
    4c5c:	f003 f9a2 	bl	7fa4 <printk>
    4c60:	f240 2135 	movw	r1, #565	; 0x235
    4c64:	4630      	mov	r0, r6
    4c66:	f003 faf6 	bl	8256 <assert_post_action>
    4c6a:	e7e5      	b.n	4c38 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    4c6c:	4805      	ldr	r0, [pc, #20]	; (4c84 <nrfx_gpiote_channel_get+0x54>)
    4c6e:	e7ee      	b.n	4c4e <nrfx_gpiote_channel_get+0x1e>
    4c70:	20000058 	.word	0x20000058
    4c74:	0bad0000 	.word	0x0bad0000
    4c78:	00009914 	.word	0x00009914
    4c7c:	00009968 	.word	0x00009968
    4c80:	00009078 	.word	0x00009078
    4c84:	0bad0004 	.word	0x0bad0004

00004c88 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4c88:	4b0f      	ldr	r3, [pc, #60]	; (4cc8 <nrfx_gpiote_init+0x40>)
    4c8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4c8e:	b10b      	cbz	r3, 4c94 <nrfx_gpiote_init+0xc>
        return err_code;
    4c90:	480e      	ldr	r0, [pc, #56]	; (4ccc <nrfx_gpiote_init+0x44>)
}
    4c92:	4770      	bx	lr
{
    4c94:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4c96:	4c0c      	ldr	r4, [pc, #48]	; (4cc8 <nrfx_gpiote_init+0x40>)
    4c98:	2260      	movs	r2, #96	; 0x60
    4c9a:	2100      	movs	r1, #0
    4c9c:	f104 0010 	add.w	r0, r4, #16
    4ca0:	f003 fbe4 	bl	846c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4ca4:	2006      	movs	r0, #6
    4ca6:	f7fc ff27 	bl	1af8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4caa:	4b09      	ldr	r3, [pc, #36]	; (4cd0 <nrfx_gpiote_init+0x48>)
    4cac:	2200      	movs	r2, #0
    4cae:	601a      	str	r2, [r3, #0]
    4cb0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4cb2:	4b08      	ldr	r3, [pc, #32]	; (4cd4 <nrfx_gpiote_init+0x4c>)
    4cb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4cb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4cbc:	2301      	movs	r3, #1
    4cbe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4cc2:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    4cc4:	4804      	ldr	r0, [pc, #16]	; (4cd8 <nrfx_gpiote_init+0x50>)
}
    4cc6:	bd10      	pop	{r4, pc}
    4cc8:	20000058 	.word	0x20000058
    4ccc:	0bad0005 	.word	0x0bad0005
    4cd0:	4000617c 	.word	0x4000617c
    4cd4:	40006000 	.word	0x40006000
    4cd8:	0bad0000 	.word	0x0bad0000

00004cdc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4cdc:	4b03      	ldr	r3, [pc, #12]	; (4cec <nrfx_gpiote_is_init+0x10>)
    4cde:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4ce2:	3800      	subs	r0, #0
    4ce4:	bf18      	it	ne
    4ce6:	2001      	movne	r0, #1
    4ce8:	4770      	bx	lr
    4cea:	bf00      	nop
    4cec:	20000058 	.word	0x20000058

00004cf0 <nrfx_gpiote_channel_free>:
{
    4cf0:	b508      	push	{r3, lr}
    4cf2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4cf4:	4801      	ldr	r0, [pc, #4]	; (4cfc <nrfx_gpiote_channel_free+0xc>)
    4cf6:	f7ff f84d 	bl	3d94 <nrfx_flag32_free>
}
    4cfa:	bd08      	pop	{r3, pc}
    4cfc:	200000c8 	.word	0x200000c8

00004d00 <nrfx_gpiote_channel_alloc>:
{
    4d00:	b508      	push	{r3, lr}
    4d02:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4d04:	4801      	ldr	r0, [pc, #4]	; (4d0c <nrfx_gpiote_channel_alloc+0xc>)
    4d06:	f7ff f821 	bl	3d4c <nrfx_flag32_alloc>
}
    4d0a:	bd08      	pop	{r3, pc}
    4d0c:	200000c8 	.word	0x200000c8

00004d10 <nrfx_gpiote_trigger_enable>:
{
    4d10:	b570      	push	{r4, r5, r6, lr}
    4d12:	4604      	mov	r4, r0
    4d14:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4d16:	f7ff fa31 	bl	417c <pin_has_trigger>
    4d1a:	b1b8      	cbz	r0, 4d4c <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d1c:	4620      	mov	r0, r4
    4d1e:	f7ff fa23 	bl	4168 <pin_in_use_by_te>
    4d22:	b118      	cbz	r0, 4d2c <nrfx_gpiote_trigger_enable+0x1c>
    4d24:	4620      	mov	r0, r4
    4d26:	f003 ff01 	bl	8b2c <pin_is_input>
    4d2a:	b9e8      	cbnz	r0, 4d68 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    4d2c:	2d00      	cmp	r5, #0
    4d2e:	d04c      	beq.n	4dca <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4d30:	f104 0308 	add.w	r3, r4, #8
    4d34:	4a70      	ldr	r2, [pc, #448]	; (4ef8 <nrfx_gpiote_trigger_enable+0x1e8>)
    4d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d3a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4d3e:	2b04      	cmp	r3, #4
    4d40:	f000 8092 	beq.w	4e68 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4d44:	2b05      	cmp	r3, #5
    4d46:	d14e      	bne.n	4de6 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4d48:	2602      	movs	r6, #2
    4d4a:	e08e      	b.n	4e6a <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    4d4c:	4e6b      	ldr	r6, [pc, #428]	; (4efc <nrfx_gpiote_trigger_enable+0x1ec>)
    4d4e:	f240 33df 	movw	r3, #991	; 0x3df
    4d52:	4632      	mov	r2, r6
    4d54:	496a      	ldr	r1, [pc, #424]	; (4f00 <nrfx_gpiote_trigger_enable+0x1f0>)
    4d56:	486b      	ldr	r0, [pc, #428]	; (4f04 <nrfx_gpiote_trigger_enable+0x1f4>)
    4d58:	f003 f924 	bl	7fa4 <printk>
    4d5c:	f240 31df 	movw	r1, #991	; 0x3df
    4d60:	4630      	mov	r0, r6
    4d62:	f003 fa78 	bl	8256 <assert_post_action>
    4d66:	e7d9      	b.n	4d1c <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    4d68:	4620      	mov	r0, r4
    4d6a:	f7ff fa1d 	bl	41a8 <pin_te_get>
    4d6e:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    4d70:	2807      	cmp	r0, #7
    4d72:	d81c      	bhi.n	4dae <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4d74:	00a3      	lsls	r3, r4, #2
    4d76:	f503 7380 	add.w	r3, r3, #256	; 0x100
    4d7a:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    4d7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d84:	2200      	movs	r2, #0
    4d86:	601a      	str	r2, [r3, #0]
    4d88:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4d8a:	4a5f      	ldr	r2, [pc, #380]	; (4f08 <nrfx_gpiote_trigger_enable+0x1f8>)
    4d8c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    4d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    4d94:	f043 0301 	orr.w	r3, r3, #1
    4d98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    4d9c:	2d00      	cmp	r5, #0
    4d9e:	f000 80a9 	beq.w	4ef4 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4da2:	2001      	movs	r0, #1
    4da4:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    4da8:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    4dac:	e0a2      	b.n	4ef4 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    4dae:	4e57      	ldr	r6, [pc, #348]	; (4f0c <nrfx_gpiote_trigger_enable+0x1fc>)
    4db0:	f44f 7323 	mov.w	r3, #652	; 0x28c
    4db4:	4632      	mov	r2, r6
    4db6:	4956      	ldr	r1, [pc, #344]	; (4f10 <nrfx_gpiote_trigger_enable+0x200>)
    4db8:	4852      	ldr	r0, [pc, #328]	; (4f04 <nrfx_gpiote_trigger_enable+0x1f4>)
    4dba:	f003 f8f3 	bl	7fa4 <printk>
    4dbe:	f44f 7123 	mov.w	r1, #652	; 0x28c
    4dc2:	4630      	mov	r0, r6
    4dc4:	f003 fa47 	bl	8256 <assert_post_action>
    4dc8:	e7d4      	b.n	4d74 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    4dca:	4d4c      	ldr	r5, [pc, #304]	; (4efc <nrfx_gpiote_trigger_enable+0x1ec>)
    4dcc:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4dd0:	462a      	mov	r2, r5
    4dd2:	4950      	ldr	r1, [pc, #320]	; (4f14 <nrfx_gpiote_trigger_enable+0x204>)
    4dd4:	484b      	ldr	r0, [pc, #300]	; (4f04 <nrfx_gpiote_trigger_enable+0x1f4>)
    4dd6:	f003 f8e5 	bl	7fa4 <printk>
    4dda:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4dde:	4628      	mov	r0, r5
    4de0:	f003 fa39 	bl	8256 <assert_post_action>
    4de4:	e7a4      	b.n	4d30 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    4de6:	0963      	lsrs	r3, r4, #5
    4de8:	d01f      	beq.n	4e2a <nrfx_gpiote_trigger_enable+0x11a>
    4dea:	2b01      	cmp	r3, #1
    4dec:	d120      	bne.n	4e30 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    4dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4df2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4df6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4df8:	f013 0f01 	tst.w	r3, #1
    4dfc:	d01a      	beq.n	4e34 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    4dfe:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e02:	0963      	lsrs	r3, r4, #5
    4e04:	d024      	beq.n	4e50 <nrfx_gpiote_trigger_enable+0x140>
    4e06:	2b01      	cmp	r3, #1
    4e08:	d025      	beq.n	4e56 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    4e0a:	4e43      	ldr	r6, [pc, #268]	; (4f18 <nrfx_gpiote_trigger_enable+0x208>)
    4e0c:	f240 232e 	movw	r3, #558	; 0x22e
    4e10:	4632      	mov	r2, r6
    4e12:	4942      	ldr	r1, [pc, #264]	; (4f1c <nrfx_gpiote_trigger_enable+0x20c>)
    4e14:	483b      	ldr	r0, [pc, #236]	; (4f04 <nrfx_gpiote_trigger_enable+0x1f4>)
    4e16:	f003 f8c5 	bl	7fa4 <printk>
    4e1a:	f240 212e 	movw	r1, #558	; 0x22e
    4e1e:	4630      	mov	r0, r6
    4e20:	f003 fa19 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    4e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e28:	e016      	b.n	4e58 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    4e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e2e:	e7e0      	b.n	4df2 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    4e30:	2300      	movs	r3, #0
    4e32:	e7de      	b.n	4df2 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e34:	4d38      	ldr	r5, [pc, #224]	; (4f18 <nrfx_gpiote_trigger_enable+0x208>)
    4e36:	f240 2329 	movw	r3, #553	; 0x229
    4e3a:	462a      	mov	r2, r5
    4e3c:	4938      	ldr	r1, [pc, #224]	; (4f20 <nrfx_gpiote_trigger_enable+0x210>)
    4e3e:	4831      	ldr	r0, [pc, #196]	; (4f04 <nrfx_gpiote_trigger_enable+0x1f4>)
    4e40:	f003 f8b0 	bl	7fa4 <printk>
    4e44:	f240 2129 	movw	r1, #553	; 0x229
    4e48:	4628      	mov	r0, r5
    4e4a:	f003 fa04 	bl	8256 <assert_post_action>
    4e4e:	e7d6      	b.n	4dfe <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    4e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e54:	e000      	b.n	4e58 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e56:	4b33      	ldr	r3, [pc, #204]	; (4f24 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    4e58:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e5c:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4e5e:	f013 0f01 	tst.w	r3, #1
    4e62:	d024      	beq.n	4eae <nrfx_gpiote_trigger_enable+0x19e>
    4e64:	2603      	movs	r6, #3
    4e66:	e000      	b.n	4e6a <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4e68:	2603      	movs	r6, #3
    switch (port)
    4e6a:	0963      	lsrs	r3, r4, #5
    4e6c:	d021      	beq.n	4eb2 <nrfx_gpiote_trigger_enable+0x1a2>
    4e6e:	2b01      	cmp	r3, #1
    4e70:	d122      	bne.n	4eb8 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    4e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4e76:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4e7a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e7c:	f013 0f01 	tst.w	r3, #1
    4e80:	d01c      	beq.n	4ebc <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    4e82:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e86:	0964      	lsrs	r4, r4, #5
    4e88:	d026      	beq.n	4ed8 <nrfx_gpiote_trigger_enable+0x1c8>
    4e8a:	2c01      	cmp	r4, #1
    4e8c:	d027      	beq.n	4ede <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    4e8e:	4c22      	ldr	r4, [pc, #136]	; (4f18 <nrfx_gpiote_trigger_enable+0x208>)
    4e90:	f240 232e 	movw	r3, #558	; 0x22e
    4e94:	4622      	mov	r2, r4
    4e96:	4921      	ldr	r1, [pc, #132]	; (4f1c <nrfx_gpiote_trigger_enable+0x20c>)
    4e98:	481a      	ldr	r0, [pc, #104]	; (4f04 <nrfx_gpiote_trigger_enable+0x1f4>)
    4e9a:	f003 f883 	bl	7fa4 <printk>
    4e9e:	f240 212e 	movw	r1, #558	; 0x22e
    4ea2:	4620      	mov	r0, r4
    4ea4:	f003 f9d7 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    4ea8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4eac:	e018      	b.n	4ee0 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4eae:	2602      	movs	r6, #2
    4eb0:	e7db      	b.n	4e6a <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    4eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4eb6:	e7de      	b.n	4e76 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    4eb8:	2300      	movs	r3, #0
    4eba:	e7dc      	b.n	4e76 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ebc:	4d16      	ldr	r5, [pc, #88]	; (4f18 <nrfx_gpiote_trigger_enable+0x208>)
    4ebe:	f240 2329 	movw	r3, #553	; 0x229
    4ec2:	462a      	mov	r2, r5
    4ec4:	4916      	ldr	r1, [pc, #88]	; (4f20 <nrfx_gpiote_trigger_enable+0x210>)
    4ec6:	480f      	ldr	r0, [pc, #60]	; (4f04 <nrfx_gpiote_trigger_enable+0x1f4>)
    4ec8:	f003 f86c 	bl	7fa4 <printk>
    4ecc:	f240 2129 	movw	r1, #553	; 0x229
    4ed0:	4628      	mov	r0, r5
    4ed2:	f003 f9c0 	bl	8256 <assert_post_action>
    4ed6:	e7d4      	b.n	4e82 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    4ed8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4edc:	e000      	b.n	4ee0 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ede:	4911      	ldr	r1, [pc, #68]	; (4f24 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ee0:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    4ee4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    4ee8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4eec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4ef0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    4ef4:	bd70      	pop	{r4, r5, r6, pc}
    4ef6:	bf00      	nop
    4ef8:	20000058 	.word	0x20000058
    4efc:	00009914 	.word	0x00009914
    4f00:	000099b8 	.word	0x000099b8
    4f04:	00009078 	.word	0x00009078
    4f08:	40006000 	.word	0x40006000
    4f0c:	00009974 	.word	0x00009974
    4f10:	000099ac 	.word	0x000099ac
    4f14:	000099d0 	.word	0x000099d0
    4f18:	00009760 	.word	0x00009760
    4f1c:	00009074 	.word	0x00009074
    4f20:	00009794 	.word	0x00009794
    4f24:	50000300 	.word	0x50000300

00004f28 <nrfx_gpiote_trigger_disable>:
{
    4f28:	b538      	push	{r3, r4, r5, lr}
    4f2a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f2c:	f7ff f91c 	bl	4168 <pin_in_use_by_te>
    4f30:	b1a0      	cbz	r0, 4f5c <nrfx_gpiote_trigger_disable+0x34>
    4f32:	4620      	mov	r0, r4
    4f34:	f003 fdfa 	bl	8b2c <pin_is_input>
    4f38:	b180      	cbz	r0, 4f5c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    4f3a:	4620      	mov	r0, r4
    4f3c:	f7ff f934 	bl	41a8 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f40:	2201      	movs	r2, #1
    4f42:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    4f44:	4b26      	ldr	r3, [pc, #152]	; (4fe0 <nrfx_gpiote_trigger_disable+0xb8>)
    4f46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4f4a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    4f4e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    4f52:	f022 0203 	bic.w	r2, r2, #3
    4f56:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    4f5a:	e040      	b.n	4fde <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    4f5c:	0963      	lsrs	r3, r4, #5
    4f5e:	d01f      	beq.n	4fa0 <nrfx_gpiote_trigger_disable+0x78>
    4f60:	2b01      	cmp	r3, #1
    4f62:	d120      	bne.n	4fa6 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    4f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4f68:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4f6c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f6e:	f013 0f01 	tst.w	r3, #1
    4f72:	d01a      	beq.n	4faa <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    4f74:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f78:	0964      	lsrs	r4, r4, #5
    4f7a:	d024      	beq.n	4fc6 <nrfx_gpiote_trigger_disable+0x9e>
    4f7c:	2c01      	cmp	r4, #1
    4f7e:	d025      	beq.n	4fcc <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    4f80:	4c18      	ldr	r4, [pc, #96]	; (4fe4 <nrfx_gpiote_trigger_disable+0xbc>)
    4f82:	f240 232e 	movw	r3, #558	; 0x22e
    4f86:	4622      	mov	r2, r4
    4f88:	4917      	ldr	r1, [pc, #92]	; (4fe8 <nrfx_gpiote_trigger_disable+0xc0>)
    4f8a:	4818      	ldr	r0, [pc, #96]	; (4fec <nrfx_gpiote_trigger_disable+0xc4>)
    4f8c:	f003 f80a 	bl	7fa4 <printk>
    4f90:	f240 212e 	movw	r1, #558	; 0x22e
    4f94:	4620      	mov	r0, r4
    4f96:	f003 f95e 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    4f9a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4f9e:	e016      	b.n	4fce <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    4fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fa4:	e7e0      	b.n	4f68 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    4fa6:	2300      	movs	r3, #0
    4fa8:	e7de      	b.n	4f68 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4faa:	4d0e      	ldr	r5, [pc, #56]	; (4fe4 <nrfx_gpiote_trigger_disable+0xbc>)
    4fac:	f240 2329 	movw	r3, #553	; 0x229
    4fb0:	462a      	mov	r2, r5
    4fb2:	490f      	ldr	r1, [pc, #60]	; (4ff0 <nrfx_gpiote_trigger_disable+0xc8>)
    4fb4:	480d      	ldr	r0, [pc, #52]	; (4fec <nrfx_gpiote_trigger_disable+0xc4>)
    4fb6:	f002 fff5 	bl	7fa4 <printk>
    4fba:	f240 2129 	movw	r1, #553	; 0x229
    4fbe:	4628      	mov	r0, r5
    4fc0:	f003 f949 	bl	8256 <assert_post_action>
    4fc4:	e7d6      	b.n	4f74 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    4fc6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4fca:	e000      	b.n	4fce <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fcc:	4909      	ldr	r1, [pc, #36]	; (4ff4 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4fce:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4fd2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4fd6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4fde:	bd38      	pop	{r3, r4, r5, pc}
    4fe0:	40006000 	.word	0x40006000
    4fe4:	00009760 	.word	0x00009760
    4fe8:	00009074 	.word	0x00009074
    4fec:	00009078 	.word	0x00009078
    4ff0:	00009794 	.word	0x00009794
    4ff4:	50000300 	.word	0x50000300

00004ff8 <nrfx_gpiote_pin_uninit>:
{
    4ff8:	b538      	push	{r3, r4, r5, lr}
    4ffa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4ffc:	f7ff f8aa 	bl	4154 <pin_in_use>
    5000:	b908      	cbnz	r0, 5006 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5002:	4824      	ldr	r0, [pc, #144]	; (5094 <nrfx_gpiote_pin_uninit+0x9c>)
}
    5004:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    5006:	4620      	mov	r0, r4
    5008:	f7ff ff8e 	bl	4f28 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    500c:	4620      	mov	r0, r4
    500e:	f7ff f98d 	bl	432c <pin_handler_trigger_uninit>
    switch (port)
    5012:	0963      	lsrs	r3, r4, #5
    5014:	d01f      	beq.n	5056 <nrfx_gpiote_pin_uninit+0x5e>
    5016:	2b01      	cmp	r3, #1
    5018:	d120      	bne.n	505c <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    501a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    501e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5022:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5024:	f013 0f01 	tst.w	r3, #1
    5028:	d01a      	beq.n	5060 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    502a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    502e:	0964      	lsrs	r4, r4, #5
    5030:	d024      	beq.n	507c <nrfx_gpiote_pin_uninit+0x84>
    5032:	2c01      	cmp	r4, #1
    5034:	d025      	beq.n	5082 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    5036:	4c18      	ldr	r4, [pc, #96]	; (5098 <nrfx_gpiote_pin_uninit+0xa0>)
    5038:	f240 232e 	movw	r3, #558	; 0x22e
    503c:	4622      	mov	r2, r4
    503e:	4917      	ldr	r1, [pc, #92]	; (509c <nrfx_gpiote_pin_uninit+0xa4>)
    5040:	4817      	ldr	r0, [pc, #92]	; (50a0 <nrfx_gpiote_pin_uninit+0xa8>)
    5042:	f002 ffaf 	bl	7fa4 <printk>
    5046:	f240 212e 	movw	r1, #558	; 0x22e
    504a:	4620      	mov	r0, r4
    504c:	f003 f903 	bl	8256 <assert_post_action>
        case 0: return NRF_P0;
    5050:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5054:	e016      	b.n	5084 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    5056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    505a:	e7e0      	b.n	501e <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    505c:	2300      	movs	r3, #0
    505e:	e7de      	b.n	501e <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5060:	4d0d      	ldr	r5, [pc, #52]	; (5098 <nrfx_gpiote_pin_uninit+0xa0>)
    5062:	f240 2329 	movw	r3, #553	; 0x229
    5066:	462a      	mov	r2, r5
    5068:	490e      	ldr	r1, [pc, #56]	; (50a4 <nrfx_gpiote_pin_uninit+0xac>)
    506a:	480d      	ldr	r0, [pc, #52]	; (50a0 <nrfx_gpiote_pin_uninit+0xa8>)
    506c:	f002 ff9a 	bl	7fa4 <printk>
    5070:	f240 2129 	movw	r1, #553	; 0x229
    5074:	4628      	mov	r0, r5
    5076:	f003 f8ee 	bl	8256 <assert_post_action>
    507a:	e7d6      	b.n	502a <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    507c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5080:	e000      	b.n	5084 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5082:	4b09      	ldr	r3, [pc, #36]	; (50a8 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    5084:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5088:	2202      	movs	r2, #2
    508a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    508e:	4807      	ldr	r0, [pc, #28]	; (50ac <nrfx_gpiote_pin_uninit+0xb4>)
    5090:	e7b8      	b.n	5004 <nrfx_gpiote_pin_uninit+0xc>
    5092:	bf00      	nop
    5094:	0bad0004 	.word	0x0bad0004
    5098:	00009760 	.word	0x00009760
    509c:	00009074 	.word	0x00009074
    50a0:	00009078 	.word	0x00009078
    50a4:	00009794 	.word	0x00009794
    50a8:	50000300 	.word	0x50000300
    50ac:	0bad0000 	.word	0x0bad0000

000050b0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    50b0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    50b2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    50b4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    50b8:	2100      	movs	r1, #0
    uint32_t status = 0;
    50ba:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    50bc:	e003      	b.n	50c6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    50be:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    50c0:	3304      	adds	r3, #4
    50c2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    50c4:	3101      	adds	r1, #1
    50c6:	2907      	cmp	r1, #7
    50c8:	d814      	bhi.n	50f4 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    50ca:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    50ce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    50d2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    50d4:	2a00      	cmp	r2, #0
    50d6:	d0f2      	beq.n	50be <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    50d8:	4a0b      	ldr	r2, [pc, #44]	; (5108 <nrfx_gpiote_irq_handler+0x58>)
    50da:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    50de:	4210      	tst	r0, r2
    50e0:	d0ed      	beq.n	50be <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    50e2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    50e6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    50ea:	2400      	movs	r4, #0
    50ec:	6014      	str	r4, [r2, #0]
    50ee:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    50f0:	4305      	orrs	r5, r0
    50f2:	e7e4      	b.n	50be <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    50f4:	4b05      	ldr	r3, [pc, #20]	; (510c <nrfx_gpiote_irq_handler+0x5c>)
    50f6:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    50f8:	b91b      	cbnz	r3, 5102 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    50fa:	4628      	mov	r0, r5
    50fc:	f7ff f968 	bl	43d0 <gpiote_evt_handle>
}
    5100:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5102:	f7ff fac7 	bl	4694 <port_event_handle>
    5106:	e7f8      	b.n	50fa <nrfx_gpiote_irq_handler+0x4a>
    5108:	40006000 	.word	0x40006000
    510c:	4000617c 	.word	0x4000617c

00005110 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5110:	b508      	push	{r3, lr}
    5112:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5114:	4801      	ldr	r0, [pc, #4]	; (511c <nrfx_ppi_channel_alloc+0xc>)
    5116:	f7fe fe19 	bl	3d4c <nrfx_flag32_alloc>
}
    511a:	bd08      	pop	{r3, pc}
    511c:	200000d4 	.word	0x200000d4

00005120 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5120:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5122:	4c14      	ldr	r4, [pc, #80]	; (5174 <_DoInit+0x54>)
    5124:	2303      	movs	r3, #3
    5126:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5128:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    512a:	4a13      	ldr	r2, [pc, #76]	; (5178 <_DoInit+0x58>)
    512c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    512e:	4b13      	ldr	r3, [pc, #76]	; (517c <_DoInit+0x5c>)
    5130:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5132:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5136:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5138:	2300      	movs	r3, #0
    513a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    513c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    513e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5140:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5142:	4a0f      	ldr	r2, [pc, #60]	; (5180 <_DoInit+0x60>)
    5144:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5146:	2210      	movs	r2, #16
    5148:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    514a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    514c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    514e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5150:	490c      	ldr	r1, [pc, #48]	; (5184 <_DoInit+0x64>)
    5152:	1de0      	adds	r0, r4, #7
    5154:	f003 f931 	bl	83ba <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5158:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    515c:	490a      	ldr	r1, [pc, #40]	; (5188 <_DoInit+0x68>)
    515e:	4620      	mov	r0, r4
    5160:	f003 f92b 	bl	83ba <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5164:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    5168:	2320      	movs	r3, #32
    516a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    516c:	f3bf 8f5f 	dmb	sy
}
    5170:	bd10      	pop	{r4, pc}
    5172:	bf00      	nop
    5174:	20000af0 	.word	0x20000af0
    5178:	000099dc 	.word	0x000099dc
    517c:	20000ba8 	.word	0x20000ba8
    5180:	20000b98 	.word	0x20000b98
    5184:	000099e8 	.word	0x000099e8
    5188:	000099ec 	.word	0x000099ec

0000518c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    518c:	4b03      	ldr	r3, [pc, #12]	; (519c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    518e:	4a04      	ldr	r2, [pc, #16]	; (51a0 <z_device_state_init+0x14>)
    5190:	4293      	cmp	r3, r2
    5192:	d201      	bcs.n	5198 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    5194:	3318      	adds	r3, #24
    5196:	e7fa      	b.n	518e <z_device_state_init+0x2>
	}
}
    5198:	4770      	bx	lr
    519a:	bf00      	nop
    519c:	00008d60 	.word	0x00008d60
    51a0:	00008dd8 	.word	0x00008dd8

000051a4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    51a4:	b570      	push	{r4, r5, r6, lr}
    51a6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51a8:	4b11      	ldr	r3, [pc, #68]	; (51f0 <z_sys_init_run_level+0x4c>)
    51aa:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    51ae:	e009      	b.n	51c4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    51b0:	4240      	negs	r0, r0
    51b2:	e017      	b.n	51e4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    51b4:	68eb      	ldr	r3, [r5, #12]
    51b6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    51b8:	68ea      	ldr	r2, [r5, #12]
    51ba:	7853      	ldrb	r3, [r2, #1]
    51bc:	f043 0301 	orr.w	r3, r3, #1
    51c0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51c2:	3408      	adds	r4, #8
    51c4:	1c73      	adds	r3, r6, #1
    51c6:	4a0a      	ldr	r2, [pc, #40]	; (51f0 <z_sys_init_run_level+0x4c>)
    51c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    51cc:	42a3      	cmp	r3, r4
    51ce:	d90d      	bls.n	51ec <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    51d0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    51d2:	6823      	ldr	r3, [r4, #0]
    51d4:	4628      	mov	r0, r5
    51d6:	4798      	blx	r3
		if (dev != NULL) {
    51d8:	2d00      	cmp	r5, #0
    51da:	d0f2      	beq.n	51c2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    51dc:	2800      	cmp	r0, #0
    51de:	d0eb      	beq.n	51b8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    51e0:	2800      	cmp	r0, #0
    51e2:	dbe5      	blt.n	51b0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    51e4:	28ff      	cmp	r0, #255	; 0xff
    51e6:	dde5      	ble.n	51b4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    51e8:	20ff      	movs	r0, #255	; 0xff
    51ea:	e7e3      	b.n	51b4 <z_sys_init_run_level+0x10>
		}
	}
}
    51ec:	bd70      	pop	{r4, r5, r6, pc}
    51ee:	bf00      	nop
    51f0:	000099f4 	.word	0x000099f4

000051f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    51f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51f6:	4604      	mov	r4, r0
    51f8:	460e      	mov	r6, r1
	__asm__ volatile(
    51fa:	f04f 0320 	mov.w	r3, #32
    51fe:	f3ef 8711 	mrs	r7, BASEPRI
    5202:	f383 8812 	msr	BASEPRI_MAX, r3
    5206:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    520a:	f002 f871 	bl	72f0 <z_impl_z_current_get>
    520e:	4605      	mov	r5, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5210:	4631      	mov	r1, r6
    5212:	4620      	mov	r0, r4
    5214:	f003 fc62 	bl	8adc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5218:	2c04      	cmp	r4, #4
    521a:	d007      	beq.n	522c <z_fatal_error+0x38>
	__asm__ volatile(
    521c:	f387 8811 	msr	BASEPRI, r7
    5220:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5224:	4628      	mov	r0, r5
    5226:	f7fc ffc7 	bl	21b8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    522c:	4c07      	ldr	r4, [pc, #28]	; (524c <z_fatal_error+0x58>)
    522e:	238f      	movs	r3, #143	; 0x8f
    5230:	4622      	mov	r2, r4
    5232:	4907      	ldr	r1, [pc, #28]	; (5250 <z_fatal_error+0x5c>)
    5234:	4807      	ldr	r0, [pc, #28]	; (5254 <z_fatal_error+0x60>)
    5236:	f002 feb5 	bl	7fa4 <printk>
    523a:	4807      	ldr	r0, [pc, #28]	; (5258 <z_fatal_error+0x64>)
    523c:	f002 feb2 	bl	7fa4 <printk>
    5240:	218f      	movs	r1, #143	; 0x8f
    5242:	4620      	mov	r0, r4
    5244:	f003 f807 	bl	8256 <assert_post_action>
    5248:	e7e8      	b.n	521c <z_fatal_error+0x28>
    524a:	bf00      	nop
    524c:	00009a0c 	.word	0x00009a0c
    5250:	00009a30 	.word	0x00009a30
    5254:	00009078 	.word	0x00009078
    5258:	00009a50 	.word	0x00009a50

0000525c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    525c:	b5f0      	push	{r4, r5, r6, r7, lr}
    525e:	b089      	sub	sp, #36	; 0x24
    5260:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    5262:	4b15      	ldr	r3, [pc, #84]	; (52b8 <init_idle_thread+0x5c>)
    5264:	25b0      	movs	r5, #176	; 0xb0
    5266:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    526a:	4b14      	ldr	r3, [pc, #80]	; (52bc <init_idle_thread+0x60>)
    526c:	f44f 76b0 	mov.w	r6, #352	; 0x160
    5270:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    5274:	af06      	add	r7, sp, #24
    5276:	4603      	mov	r3, r0
    5278:	4a11      	ldr	r2, [pc, #68]	; (52c0 <init_idle_thread+0x64>)
    527a:	2108      	movs	r1, #8
    527c:	4638      	mov	r0, r7
    527e:	f002 fe9f 	bl	7fc0 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5282:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5286:	480f      	ldr	r0, [pc, #60]	; (52c4 <init_idle_thread+0x68>)
    5288:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    528c:	9705      	str	r7, [sp, #20]
    528e:	2301      	movs	r3, #1
    5290:	9304      	str	r3, [sp, #16]
    5292:	230f      	movs	r3, #15
    5294:	9303      	str	r3, [sp, #12]
    5296:	2300      	movs	r3, #0
    5298:	9302      	str	r3, [sp, #8]
    529a:	9301      	str	r3, [sp, #4]
    529c:	9400      	str	r4, [sp, #0]
    529e:	4b0a      	ldr	r3, [pc, #40]	; (52c8 <init_idle_thread+0x6c>)
    52a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    52a4:	4631      	mov	r1, r6
    52a6:	4628      	mov	r0, r5
    52a8:	f000 fa6a 	bl	5780 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    52ac:	7b6b      	ldrb	r3, [r5, #13]
    52ae:	f023 0304 	bic.w	r3, r3, #4
    52b2:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    52b4:	b009      	add	sp, #36	; 0x24
    52b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52b8:	20000398 	.word	0x20000398
    52bc:	20001a40 	.word	0x20001a40
    52c0:	00009a88 	.word	0x00009a88
    52c4:	20000fa8 	.word	0x20000fa8
    52c8:	00005a09 	.word	0x00005a09

000052cc <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    52d0:	f001 fe46 	bl	6f60 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    52d4:	4d1b      	ldr	r5, [pc, #108]	; (5344 <prepare_multithreading+0x78>)
    52d6:	4b1c      	ldr	r3, [pc, #112]	; (5348 <prepare_multithreading+0x7c>)
    52d8:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    52da:	4b1c      	ldr	r3, [pc, #112]	; (534c <prepare_multithreading+0x80>)
    52dc:	9305      	str	r3, [sp, #20]
    52de:	2301      	movs	r3, #1
    52e0:	9304      	str	r3, [sp, #16]
    52e2:	2400      	movs	r4, #0
    52e4:	9403      	str	r4, [sp, #12]
    52e6:	9402      	str	r4, [sp, #8]
    52e8:	9401      	str	r4, [sp, #4]
    52ea:	9400      	str	r4, [sp, #0]
    52ec:	4b18      	ldr	r3, [pc, #96]	; (5350 <prepare_multithreading+0x84>)
    52ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    52f2:	4918      	ldr	r1, [pc, #96]	; (5354 <prepare_multithreading+0x88>)
    52f4:	4628      	mov	r0, r5
    52f6:	f000 fa43 	bl	5780 <z_setup_new_thread>
    52fa:	4606      	mov	r6, r0
    52fc:	7b6b      	ldrb	r3, [r5, #13]
    52fe:	f023 0304 	bic.w	r3, r3, #4
    5302:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    5304:	4628      	mov	r0, r5
    5306:	f001 f9b1 	bl	666c <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    530a:	2c00      	cmp	r4, #0
    530c:	dd02      	ble.n	5314 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    530e:	4630      	mov	r0, r6
    5310:	b006      	add	sp, #24
    5312:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    5314:	4620      	mov	r0, r4
    5316:	f7ff ffa1 	bl	525c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    531a:	4b0f      	ldr	r3, [pc, #60]	; (5358 <prepare_multithreading+0x8c>)
    531c:	22b0      	movs	r2, #176	; 0xb0
    531e:	fb02 3204 	mla	r2, r2, r4, r3
    5322:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    5326:	4b08      	ldr	r3, [pc, #32]	; (5348 <prepare_multithreading+0x7c>)
    5328:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    532c:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    532e:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    5330:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    5334:	4a09      	ldr	r2, [pc, #36]	; (535c <prepare_multithreading+0x90>)
    5336:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    533a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    533e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    5340:	3401      	adds	r4, #1
    5342:	e7e2      	b.n	530a <prepare_multithreading+0x3e>
    5344:	20000448 	.word	0x20000448
    5348:	20000fa8 	.word	0x20000fa8
    534c:	00009a94 	.word	0x00009a94
    5350:	00005361 	.word	0x00005361
    5354:	20001620 	.word	0x20001620
    5358:	20000398 	.word	0x20000398
    535c:	20001ba0 	.word	0x20001ba0

00005360 <bg_thread_main>:
{
    5360:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5362:	4b0a      	ldr	r3, [pc, #40]	; (538c <bg_thread_main+0x2c>)
    5364:	2201      	movs	r2, #1
    5366:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5368:	2002      	movs	r0, #2
    536a:	f7ff ff1b 	bl	51a4 <z_sys_init_run_level>
	boot_banner();
    536e:	f002 fbf9 	bl	7b64 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5372:	2003      	movs	r0, #3
    5374:	f7ff ff16 	bl	51a4 <z_sys_init_run_level>
	z_init_static_threads();
    5378:	f000 fac8 	bl	590c <z_init_static_threads>
	main();
    537c:	f003 fcb7 	bl	8cee <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5380:	4a03      	ldr	r2, [pc, #12]	; (5390 <bg_thread_main+0x30>)
    5382:	7b13      	ldrb	r3, [r2, #12]
    5384:	f023 0301 	bic.w	r3, r3, #1
    5388:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    538a:	bd08      	pop	{r3, pc}
    538c:	20001011 	.word	0x20001011
    5390:	20000448 	.word	0x20000448

00005394 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    5394:	b508      	push	{r3, lr}
    5396:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5398:	4a01      	ldr	r2, [pc, #4]	; (53a0 <switch_to_main_thread+0xc>)
    539a:	4802      	ldr	r0, [pc, #8]	; (53a4 <switch_to_main_thread+0x10>)
    539c:	f7fc fcc8 	bl	1d30 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    53a0:	00005361 	.word	0x00005361
    53a4:	20000448 	.word	0x20000448

000053a8 <z_bss_zero>:
{
    53a8:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    53aa:	4803      	ldr	r0, [pc, #12]	; (53b8 <z_bss_zero+0x10>)
    53ac:	4a03      	ldr	r2, [pc, #12]	; (53bc <z_bss_zero+0x14>)
    53ae:	1a12      	subs	r2, r2, r0
    53b0:	2100      	movs	r1, #0
    53b2:	f003 f85b 	bl	846c <memset>
}
    53b6:	bd08      	pop	{r3, pc}
    53b8:	20000218 	.word	0x20000218
    53bc:	200011d0 	.word	0x200011d0

000053c0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    53c0:	b500      	push	{lr}
    53c2:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    53c4:	4b1c      	ldr	r3, [pc, #112]	; (5438 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    53c6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    53ca:	4c1c      	ldr	r4, [pc, #112]	; (543c <z_cstart+0x7c>)
    53cc:	6963      	ldr	r3, [r4, #20]
    53ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    53d2:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    53d4:	23e0      	movs	r3, #224	; 0xe0
    53d6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    53da:	2500      	movs	r5, #0
    53dc:	77e5      	strb	r5, [r4, #31]
    53de:	7625      	strb	r5, [r4, #24]
    53e0:	7665      	strb	r5, [r4, #25]
    53e2:	76a5      	strb	r5, [r4, #26]
    53e4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    53e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53ea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    53ee:	6263      	str	r3, [r4, #36]	; 0x24
    53f0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    53f4:	f7fc fe50 	bl	2098 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    53f8:	f7fc fb60 	bl	1abc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    53fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5400:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5402:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5404:	f7fc ff96 	bl	2334 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5408:	f7fc feec 	bl	21e4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    540c:	2401      	movs	r4, #1
    540e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    5412:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    5416:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    5418:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    541a:	4b09      	ldr	r3, [pc, #36]	; (5440 <z_cstart+0x80>)
    541c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5420:	f7ff feb4 	bl	518c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5424:	4628      	mov	r0, r5
    5426:	f7ff febd 	bl	51a4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    542a:	4620      	mov	r0, r4
    542c:	f7ff feba 	bl	51a4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    5430:	f7ff ff4c 	bl	52cc <prepare_multithreading>
    5434:	f7ff ffae 	bl	5394 <switch_to_main_thread>
    5438:	200023c0 	.word	0x200023c0
    543c:	e000ed00 	.word	0xe000ed00
    5440:	20000fa8 	.word	0x20000fa8

00005444 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    5444:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5446:	4c10      	ldr	r4, [pc, #64]	; (5488 <init_mem_slab_module+0x44>)
	int rc = 0;
    5448:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    544a:	e016      	b.n	547a <init_mem_slab_module+0x36>
    544c:	4e0f      	ldr	r6, [pc, #60]	; (548c <init_mem_slab_module+0x48>)
    544e:	233c      	movs	r3, #60	; 0x3c
    5450:	4632      	mov	r2, r6
    5452:	490f      	ldr	r1, [pc, #60]	; (5490 <init_mem_slab_module+0x4c>)
    5454:	480f      	ldr	r0, [pc, #60]	; (5494 <init_mem_slab_module+0x50>)
    5456:	f002 fda5 	bl	7fa4 <printk>
    545a:	480f      	ldr	r0, [pc, #60]	; (5498 <init_mem_slab_module+0x54>)
    545c:	f002 fda2 	bl	7fa4 <printk>
    5460:	213c      	movs	r1, #60	; 0x3c
    5462:	4630      	mov	r0, r6
    5464:	f002 fef7 	bl	8256 <assert_post_action>
    5468:	4b0c      	ldr	r3, [pc, #48]	; (549c <init_mem_slab_module+0x58>)
    546a:	429c      	cmp	r4, r3
    546c:	d209      	bcs.n	5482 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    546e:	4620      	mov	r0, r4
    5470:	f003 fb80 	bl	8b74 <create_free_list>
		if (rc < 0) {
    5474:	1e05      	subs	r5, r0, #0
    5476:	db04      	blt.n	5482 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5478:	3420      	adds	r4, #32
    547a:	4b08      	ldr	r3, [pc, #32]	; (549c <init_mem_slab_module+0x58>)
    547c:	429c      	cmp	r4, r3
    547e:	d9f3      	bls.n	5468 <init_mem_slab_module+0x24>
    5480:	e7e4      	b.n	544c <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    5482:	4628      	mov	r0, r5
    5484:	bd70      	pop	{r4, r5, r6, pc}
    5486:	bf00      	nop
    5488:	200001b4 	.word	0x200001b4
    548c:	00009a9c 	.word	0x00009a9c
    5490:	00009ac4 	.word	0x00009ac4
    5494:	00009078 	.word	0x00009078
    5498:	00009ae4 	.word	0x00009ae4
    549c:	200001b4 	.word	0x200001b4

000054a0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    54a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54a4:	b082      	sub	sp, #8
    54a6:	4604      	mov	r4, r0
    54a8:	460e      	mov	r6, r1
    54aa:	4690      	mov	r8, r2
    54ac:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    54ae:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    54b2:	f04f 0320 	mov.w	r3, #32
    54b6:	f3ef 8711 	mrs	r7, BASEPRI
    54ba:	f383 8812 	msr	BASEPRI_MAX, r3
    54be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54c2:	4628      	mov	r0, r5
    54c4:	f000 f8da 	bl	567c <z_spin_lock_valid>
    54c8:	b1c0      	cbz	r0, 54fc <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    54ca:	4628      	mov	r0, r5
    54cc:	f000 f8f6 	bl	56bc <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    54d0:	69a3      	ldr	r3, [r4, #24]
    54d2:	b323      	cbz	r3, 551e <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    54d4:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    54d6:	69a3      	ldr	r3, [r4, #24]
    54d8:	681b      	ldr	r3, [r3, #0]
    54da:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    54dc:	69e3      	ldr	r3, [r4, #28]
    54de:	3301      	adds	r3, #1
    54e0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    54e2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54e4:	4628      	mov	r0, r5
    54e6:	f000 f8d9 	bl	569c <z_spin_unlock_valid>
    54ea:	b378      	cbz	r0, 554c <k_mem_slab_alloc+0xac>
	__asm__ volatile(
    54ec:	f387 8811 	msr	BASEPRI, r7
    54f0:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    54f4:	4620      	mov	r0, r4
    54f6:	b002      	add	sp, #8
    54f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54fc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 557c <k_mem_slab_alloc+0xdc>
    5500:	2381      	movs	r3, #129	; 0x81
    5502:	4652      	mov	r2, sl
    5504:	4919      	ldr	r1, [pc, #100]	; (556c <k_mem_slab_alloc+0xcc>)
    5506:	481a      	ldr	r0, [pc, #104]	; (5570 <k_mem_slab_alloc+0xd0>)
    5508:	f002 fd4c 	bl	7fa4 <printk>
    550c:	4629      	mov	r1, r5
    550e:	4819      	ldr	r0, [pc, #100]	; (5574 <k_mem_slab_alloc+0xd4>)
    5510:	f002 fd48 	bl	7fa4 <printk>
    5514:	2181      	movs	r1, #129	; 0x81
    5516:	4650      	mov	r0, sl
    5518:	f002 fe9d 	bl	8256 <assert_post_action>
    551c:	e7d5      	b.n	54ca <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    551e:	ea58 0309 	orrs.w	r3, r8, r9
    5522:	d104      	bne.n	552e <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    5524:	2300      	movs	r3, #0
    5526:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5528:	f06f 040b 	mvn.w	r4, #11
    552c:	e7da      	b.n	54e4 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    552e:	e9cd 8900 	strd	r8, r9, [sp]
    5532:	4622      	mov	r2, r4
    5534:	4639      	mov	r1, r7
    5536:	4628      	mov	r0, r5
    5538:	f001 fa70 	bl	6a1c <z_pend_curr>
		if (result == 0) {
    553c:	4604      	mov	r4, r0
    553e:	2800      	cmp	r0, #0
    5540:	d1d8      	bne.n	54f4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5542:	4b0d      	ldr	r3, [pc, #52]	; (5578 <k_mem_slab_alloc+0xd8>)
    5544:	689b      	ldr	r3, [r3, #8]
    5546:	695b      	ldr	r3, [r3, #20]
    5548:	6033      	str	r3, [r6, #0]
		return result;
    554a:	e7d3      	b.n	54f4 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    554c:	4e0b      	ldr	r6, [pc, #44]	; (557c <k_mem_slab_alloc+0xdc>)
    554e:	23ac      	movs	r3, #172	; 0xac
    5550:	4632      	mov	r2, r6
    5552:	490b      	ldr	r1, [pc, #44]	; (5580 <k_mem_slab_alloc+0xe0>)
    5554:	4806      	ldr	r0, [pc, #24]	; (5570 <k_mem_slab_alloc+0xd0>)
    5556:	f002 fd25 	bl	7fa4 <printk>
    555a:	4629      	mov	r1, r5
    555c:	4809      	ldr	r0, [pc, #36]	; (5584 <k_mem_slab_alloc+0xe4>)
    555e:	f002 fd21 	bl	7fa4 <printk>
    5562:	21ac      	movs	r1, #172	; 0xac
    5564:	4630      	mov	r0, r6
    5566:	f002 fe76 	bl	8256 <assert_post_action>
    556a:	e7bf      	b.n	54ec <k_mem_slab_alloc+0x4c>
    556c:	000091e8 	.word	0x000091e8
    5570:	00009078 	.word	0x00009078
    5574:	00009200 	.word	0x00009200
    5578:	20000fa8 	.word	0x20000fa8
    557c:	00009190 	.word	0x00009190
    5580:	000091b8 	.word	0x000091b8
    5584:	000091d0 	.word	0x000091d0

00005588 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    558c:	4604      	mov	r4, r0
    558e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5590:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    5594:	f04f 0320 	mov.w	r3, #32
    5598:	f3ef 8711 	mrs	r7, BASEPRI
    559c:	f383 8812 	msr	BASEPRI_MAX, r3
    55a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55a4:	4630      	mov	r0, r6
    55a6:	f000 f869 	bl	567c <z_spin_lock_valid>
    55aa:	b1b0      	cbz	r0, 55da <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    55ac:	4630      	mov	r0, r6
    55ae:	f000 f885 	bl	56bc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    55b2:	69a3      	ldr	r3, [r4, #24]
    55b4:	b313      	cbz	r3, 55fc <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    55b6:	682b      	ldr	r3, [r5, #0]
    55b8:	69a2      	ldr	r2, [r4, #24]
    55ba:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    55bc:	682b      	ldr	r3, [r5, #0]
    55be:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    55c0:	69e3      	ldr	r3, [r4, #28]
    55c2:	3b01      	subs	r3, #1
    55c4:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55c6:	4630      	mov	r0, r6
    55c8:	f000 f868 	bl	569c <z_spin_unlock_valid>
    55cc:	b338      	cbz	r0, 561e <k_mem_slab_free+0x96>
	__asm__ volatile(
    55ce:	f387 8811 	msr	BASEPRI, r7
    55d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    55d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55da:	f8df 8070 	ldr.w	r8, [pc, #112]	; 564c <k_mem_slab_free+0xc4>
    55de:	2381      	movs	r3, #129	; 0x81
    55e0:	4642      	mov	r2, r8
    55e2:	4917      	ldr	r1, [pc, #92]	; (5640 <k_mem_slab_free+0xb8>)
    55e4:	4817      	ldr	r0, [pc, #92]	; (5644 <k_mem_slab_free+0xbc>)
    55e6:	f002 fcdd 	bl	7fa4 <printk>
    55ea:	4631      	mov	r1, r6
    55ec:	4816      	ldr	r0, [pc, #88]	; (5648 <k_mem_slab_free+0xc0>)
    55ee:	f002 fcd9 	bl	7fa4 <printk>
    55f2:	2181      	movs	r1, #129	; 0x81
    55f4:	4640      	mov	r0, r8
    55f6:	f002 fe2e 	bl	8256 <assert_post_action>
    55fa:	e7d7      	b.n	55ac <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    55fc:	4620      	mov	r0, r4
    55fe:	f001 fc4b 	bl	6e98 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5602:	2800      	cmp	r0, #0
    5604:	d0d7      	beq.n	55b6 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5606:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5608:	2100      	movs	r1, #0
    560a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    560e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    5610:	f001 f82c 	bl	666c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5614:	4639      	mov	r1, r7
    5616:	4630      	mov	r0, r6
    5618:	f000 fda6 	bl	6168 <z_reschedule>
			return;
    561c:	e7db      	b.n	55d6 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    561e:	4c0b      	ldr	r4, [pc, #44]	; (564c <k_mem_slab_free+0xc4>)
    5620:	23ac      	movs	r3, #172	; 0xac
    5622:	4622      	mov	r2, r4
    5624:	490a      	ldr	r1, [pc, #40]	; (5650 <k_mem_slab_free+0xc8>)
    5626:	4807      	ldr	r0, [pc, #28]	; (5644 <k_mem_slab_free+0xbc>)
    5628:	f002 fcbc 	bl	7fa4 <printk>
    562c:	4631      	mov	r1, r6
    562e:	4809      	ldr	r0, [pc, #36]	; (5654 <k_mem_slab_free+0xcc>)
    5630:	f002 fcb8 	bl	7fa4 <printk>
    5634:	21ac      	movs	r1, #172	; 0xac
    5636:	4620      	mov	r0, r4
    5638:	f002 fe0d 	bl	8256 <assert_post_action>
    563c:	e7c7      	b.n	55ce <k_mem_slab_free+0x46>
    563e:	bf00      	nop
    5640:	000091e8 	.word	0x000091e8
    5644:	00009078 	.word	0x00009078
    5648:	00009200 	.word	0x00009200
    564c:	00009190 	.word	0x00009190
    5650:	000091b8 	.word	0x000091b8
    5654:	000091d0 	.word	0x000091d0

00005658 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    5658:	b538      	push	{r3, r4, r5, lr}
    565a:	4614      	mov	r4, r2
    565c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    565e:	ea54 0305 	orrs.w	r3, r4, r5
    5662:	d102      	bne.n	566a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    5664:	f003 fac4 	bl	8bf0 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    5668:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    566a:	462b      	mov	r3, r5
    566c:	4902      	ldr	r1, [pc, #8]	; (5678 <schedule_new_thread+0x20>)
    566e:	3018      	adds	r0, #24
    5670:	f001 ff48 	bl	7504 <z_add_timeout>
    5674:	e7f8      	b.n	5668 <schedule_new_thread+0x10>
    5676:	bf00      	nop
    5678:	000067c9 	.word	0x000067c9

0000567c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    567c:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    567e:	b13b      	cbz	r3, 5690 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    5680:	f003 0303 	and.w	r3, r3, #3
    5684:	4a04      	ldr	r2, [pc, #16]	; (5698 <z_spin_lock_valid+0x1c>)
    5686:	7d12      	ldrb	r2, [r2, #20]
    5688:	4293      	cmp	r3, r2
    568a:	d003      	beq.n	5694 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    568c:	2001      	movs	r0, #1
    568e:	4770      	bx	lr
    5690:	2001      	movs	r0, #1
    5692:	4770      	bx	lr
			return false;
    5694:	2000      	movs	r0, #0
}
    5696:	4770      	bx	lr
    5698:	20000fa8 	.word	0x20000fa8

0000569c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    569c:	6801      	ldr	r1, [r0, #0]
    569e:	4a06      	ldr	r2, [pc, #24]	; (56b8 <z_spin_unlock_valid+0x1c>)
    56a0:	7d13      	ldrb	r3, [r2, #20]
    56a2:	6892      	ldr	r2, [r2, #8]
    56a4:	4313      	orrs	r3, r2
    56a6:	4299      	cmp	r1, r3
    56a8:	d103      	bne.n	56b2 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    56aa:	2300      	movs	r3, #0
    56ac:	6003      	str	r3, [r0, #0]
	return true;
    56ae:	2001      	movs	r0, #1
    56b0:	4770      	bx	lr
		return false;
    56b2:	2000      	movs	r0, #0
}
    56b4:	4770      	bx	lr
    56b6:	bf00      	nop
    56b8:	20000fa8 	.word	0x20000fa8

000056bc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    56bc:	4a02      	ldr	r2, [pc, #8]	; (56c8 <z_spin_lock_set_owner+0xc>)
    56be:	7d13      	ldrb	r3, [r2, #20]
    56c0:	6892      	ldr	r2, [r2, #8]
    56c2:	4313      	orrs	r3, r2
    56c4:	6003      	str	r3, [r0, #0]
}
    56c6:	4770      	bx	lr
    56c8:	20000fa8 	.word	0x20000fa8

000056cc <z_thread_monitor_exit>:
{
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	4604      	mov	r4, r0
	__asm__ volatile(
    56d0:	f04f 0320 	mov.w	r3, #32
    56d4:	f3ef 8511 	mrs	r5, BASEPRI
    56d8:	f383 8812 	msr	BASEPRI_MAX, r3
    56dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56e0:	481f      	ldr	r0, [pc, #124]	; (5760 <z_thread_monitor_exit+0x94>)
    56e2:	f7ff ffcb 	bl	567c <z_spin_lock_valid>
    56e6:	b150      	cbz	r0, 56fe <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    56e8:	481d      	ldr	r0, [pc, #116]	; (5760 <z_thread_monitor_exit+0x94>)
    56ea:	f7ff ffe7 	bl	56bc <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    56ee:	4b1d      	ldr	r3, [pc, #116]	; (5764 <z_thread_monitor_exit+0x98>)
    56f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56f2:	42a3      	cmp	r3, r4
    56f4:	d114      	bne.n	5720 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    56f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    56f8:	4b1a      	ldr	r3, [pc, #104]	; (5764 <z_thread_monitor_exit+0x98>)
    56fa:	629a      	str	r2, [r3, #40]	; 0x28
    56fc:	e017      	b.n	572e <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56fe:	4e1a      	ldr	r6, [pc, #104]	; (5768 <z_thread_monitor_exit+0x9c>)
    5700:	2381      	movs	r3, #129	; 0x81
    5702:	4632      	mov	r2, r6
    5704:	4919      	ldr	r1, [pc, #100]	; (576c <z_thread_monitor_exit+0xa0>)
    5706:	481a      	ldr	r0, [pc, #104]	; (5770 <z_thread_monitor_exit+0xa4>)
    5708:	f002 fc4c 	bl	7fa4 <printk>
    570c:	4914      	ldr	r1, [pc, #80]	; (5760 <z_thread_monitor_exit+0x94>)
    570e:	4819      	ldr	r0, [pc, #100]	; (5774 <z_thread_monitor_exit+0xa8>)
    5710:	f002 fc48 	bl	7fa4 <printk>
    5714:	2181      	movs	r1, #129	; 0x81
    5716:	4630      	mov	r0, r6
    5718:	f002 fd9d 	bl	8256 <assert_post_action>
    571c:	e7e4      	b.n	56e8 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    571e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    5720:	b113      	cbz	r3, 5728 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    5722:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    5724:	42a2      	cmp	r2, r4
    5726:	d1fa      	bne.n	571e <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    5728:	b10b      	cbz	r3, 572e <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    572a:	6f22      	ldr	r2, [r4, #112]	; 0x70
    572c:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    572e:	480c      	ldr	r0, [pc, #48]	; (5760 <z_thread_monitor_exit+0x94>)
    5730:	f7ff ffb4 	bl	569c <z_spin_unlock_valid>
    5734:	b120      	cbz	r0, 5740 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    5736:	f385 8811 	msr	BASEPRI, r5
    573a:	f3bf 8f6f 	isb	sy
}
    573e:	bd70      	pop	{r4, r5, r6, pc}
    5740:	4c09      	ldr	r4, [pc, #36]	; (5768 <z_thread_monitor_exit+0x9c>)
    5742:	23ac      	movs	r3, #172	; 0xac
    5744:	4622      	mov	r2, r4
    5746:	490c      	ldr	r1, [pc, #48]	; (5778 <z_thread_monitor_exit+0xac>)
    5748:	4809      	ldr	r0, [pc, #36]	; (5770 <z_thread_monitor_exit+0xa4>)
    574a:	f002 fc2b 	bl	7fa4 <printk>
    574e:	4904      	ldr	r1, [pc, #16]	; (5760 <z_thread_monitor_exit+0x94>)
    5750:	480a      	ldr	r0, [pc, #40]	; (577c <z_thread_monitor_exit+0xb0>)
    5752:	f002 fc27 	bl	7fa4 <printk>
    5756:	21ac      	movs	r1, #172	; 0xac
    5758:	4620      	mov	r0, r4
    575a:	f002 fd7c 	bl	8256 <assert_post_action>
    575e:	e7ea      	b.n	5736 <z_thread_monitor_exit+0x6a>
    5760:	20000fd4 	.word	0x20000fd4
    5764:	20000fa8 	.word	0x20000fa8
    5768:	00009190 	.word	0x00009190
    576c:	000091e8 	.word	0x000091e8
    5770:	00009078 	.word	0x00009078
    5774:	00009200 	.word	0x00009200
    5778:	000091b8 	.word	0x000091b8
    577c:	000091d0 	.word	0x000091d0

00005780 <z_setup_new_thread>:
{
    5780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5784:	b085      	sub	sp, #20
    5786:	4604      	mov	r4, r0
    5788:	460e      	mov	r6, r1
    578a:	4690      	mov	r8, r2
    578c:	461d      	mov	r5, r3
    578e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    5792:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    5796:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    5798:	2f0f      	cmp	r7, #15
    579a:	d05e      	beq.n	585a <z_setup_new_thread+0xda>
    579c:	f107 0310 	add.w	r3, r7, #16
    57a0:	2b1e      	cmp	r3, #30
    57a2:	d85e      	bhi.n	5862 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    57a4:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    57a8:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    57aa:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    57ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    57ae:	2204      	movs	r2, #4
    57b0:	4639      	mov	r1, r7
    57b2:	4620      	mov	r0, r4
    57b4:	f003 fa20 	bl	8bf8 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    57b8:	4642      	mov	r2, r8
    57ba:	4631      	mov	r1, r6
    57bc:	4620      	mov	r0, r4
    57be:	f003 f9ff 	bl	8bc0 <setup_thread_stack>
    57c2:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    57c6:	9302      	str	r3, [sp, #8]
    57c8:	f8cd a004 	str.w	sl, [sp, #4]
    57cc:	f8cd b000 	str.w	fp, [sp]
    57d0:	462b      	mov	r3, r5
    57d2:	4602      	mov	r2, r0
    57d4:	4631      	mov	r1, r6
    57d6:	4620      	mov	r0, r4
    57d8:	f7fc fa5a 	bl	1c90 <arch_new_thread>
	new_thread->init_data = NULL;
    57dc:	2300      	movs	r3, #0
    57de:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    57e0:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    57e2:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    57e6:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    57ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    57ec:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    57ee:	f04f 0320 	mov.w	r3, #32
    57f2:	f3ef 8611 	mrs	r6, BASEPRI
    57f6:	f383 8812 	msr	BASEPRI_MAX, r3
    57fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57fe:	4837      	ldr	r0, [pc, #220]	; (58dc <z_setup_new_thread+0x15c>)
    5800:	f7ff ff3c 	bl	567c <z_spin_lock_valid>
    5804:	2800      	cmp	r0, #0
    5806:	d042      	beq.n	588e <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    5808:	4d34      	ldr	r5, [pc, #208]	; (58dc <z_setup_new_thread+0x15c>)
    580a:	4628      	mov	r0, r5
    580c:	f7ff ff56 	bl	56bc <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    5810:	4b33      	ldr	r3, [pc, #204]	; (58e0 <z_setup_new_thread+0x160>)
    5812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5814:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    5816:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5818:	4628      	mov	r0, r5
    581a:	f7ff ff3f 	bl	569c <z_spin_unlock_valid>
    581e:	2800      	cmp	r0, #0
    5820:	d045      	beq.n	58ae <z_setup_new_thread+0x12e>
	__asm__ volatile(
    5822:	f386 8811 	msr	BASEPRI, r6
    5826:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    582a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    582c:	2b00      	cmp	r3, #0
    582e:	d04e      	beq.n	58ce <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    5830:	221f      	movs	r2, #31
    5832:	4619      	mov	r1, r3
    5834:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5838:	f002 fdc8 	bl	83cc <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    583c:	2300      	movs	r3, #0
    583e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    5842:	4b27      	ldr	r3, [pc, #156]	; (58e0 <z_setup_new_thread+0x160>)
    5844:	689b      	ldr	r3, [r3, #8]
    5846:	2b00      	cmp	r3, #0
    5848:	d045      	beq.n	58d6 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    584a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    584e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    5852:	4638      	mov	r0, r7
    5854:	b005      	add	sp, #20
    5856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    585a:	4b22      	ldr	r3, [pc, #136]	; (58e4 <z_setup_new_thread+0x164>)
    585c:	429d      	cmp	r5, r3
    585e:	d19d      	bne.n	579c <z_setup_new_thread+0x1c>
    5860:	e7a0      	b.n	57a4 <z_setup_new_thread+0x24>
    5862:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5908 <z_setup_new_thread+0x188>
    5866:	f240 13ff 	movw	r3, #511	; 0x1ff
    586a:	464a      	mov	r2, r9
    586c:	491e      	ldr	r1, [pc, #120]	; (58e8 <z_setup_new_thread+0x168>)
    586e:	481f      	ldr	r0, [pc, #124]	; (58ec <z_setup_new_thread+0x16c>)
    5870:	f002 fb98 	bl	7fa4 <printk>
    5874:	f06f 030f 	mvn.w	r3, #15
    5878:	220e      	movs	r2, #14
    587a:	4639      	mov	r1, r7
    587c:	481c      	ldr	r0, [pc, #112]	; (58f0 <z_setup_new_thread+0x170>)
    587e:	f002 fb91 	bl	7fa4 <printk>
    5882:	f240 11ff 	movw	r1, #511	; 0x1ff
    5886:	4648      	mov	r0, r9
    5888:	f002 fce5 	bl	8256 <assert_post_action>
    588c:	e78a      	b.n	57a4 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    588e:	4d19      	ldr	r5, [pc, #100]	; (58f4 <z_setup_new_thread+0x174>)
    5890:	2381      	movs	r3, #129	; 0x81
    5892:	462a      	mov	r2, r5
    5894:	4918      	ldr	r1, [pc, #96]	; (58f8 <z_setup_new_thread+0x178>)
    5896:	4815      	ldr	r0, [pc, #84]	; (58ec <z_setup_new_thread+0x16c>)
    5898:	f002 fb84 	bl	7fa4 <printk>
    589c:	490f      	ldr	r1, [pc, #60]	; (58dc <z_setup_new_thread+0x15c>)
    589e:	4817      	ldr	r0, [pc, #92]	; (58fc <z_setup_new_thread+0x17c>)
    58a0:	f002 fb80 	bl	7fa4 <printk>
    58a4:	2181      	movs	r1, #129	; 0x81
    58a6:	4628      	mov	r0, r5
    58a8:	f002 fcd5 	bl	8256 <assert_post_action>
    58ac:	e7ac      	b.n	5808 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58ae:	4d11      	ldr	r5, [pc, #68]	; (58f4 <z_setup_new_thread+0x174>)
    58b0:	23ac      	movs	r3, #172	; 0xac
    58b2:	462a      	mov	r2, r5
    58b4:	4912      	ldr	r1, [pc, #72]	; (5900 <z_setup_new_thread+0x180>)
    58b6:	480d      	ldr	r0, [pc, #52]	; (58ec <z_setup_new_thread+0x16c>)
    58b8:	f002 fb74 	bl	7fa4 <printk>
    58bc:	4907      	ldr	r1, [pc, #28]	; (58dc <z_setup_new_thread+0x15c>)
    58be:	4811      	ldr	r0, [pc, #68]	; (5904 <z_setup_new_thread+0x184>)
    58c0:	f002 fb70 	bl	7fa4 <printk>
    58c4:	21ac      	movs	r1, #172	; 0xac
    58c6:	4628      	mov	r0, r5
    58c8:	f002 fcc5 	bl	8256 <assert_post_action>
    58cc:	e7a9      	b.n	5822 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    58ce:	2300      	movs	r3, #0
    58d0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    58d4:	e7b5      	b.n	5842 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    58d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    58da:	e7ba      	b.n	5852 <z_setup_new_thread+0xd2>
    58dc:	20000fd4 	.word	0x20000fd4
    58e0:	20000fa8 	.word	0x20000fa8
    58e4:	00005a09 	.word	0x00005a09
    58e8:	00009b5c 	.word	0x00009b5c
    58ec:	00009078 	.word	0x00009078
    58f0:	00009bdc 	.word	0x00009bdc
    58f4:	00009190 	.word	0x00009190
    58f8:	000091e8 	.word	0x000091e8
    58fc:	00009200 	.word	0x00009200
    5900:	000091b8 	.word	0x000091b8
    5904:	000091d0 	.word	0x000091d0
    5908:	00009b04 	.word	0x00009b04

0000590c <z_init_static_threads>:
{
    590c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    5910:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    5912:	4c37      	ldr	r4, [pc, #220]	; (59f0 <z_init_static_threads+0xe4>)
    5914:	e027      	b.n	5966 <z_init_static_threads+0x5a>
    5916:	4d37      	ldr	r5, [pc, #220]	; (59f4 <z_init_static_threads+0xe8>)
    5918:	f240 23cf 	movw	r3, #719	; 0x2cf
    591c:	462a      	mov	r2, r5
    591e:	4936      	ldr	r1, [pc, #216]	; (59f8 <z_init_static_threads+0xec>)
    5920:	4836      	ldr	r0, [pc, #216]	; (59fc <z_init_static_threads+0xf0>)
    5922:	f002 fb3f 	bl	7fa4 <printk>
    5926:	4836      	ldr	r0, [pc, #216]	; (5a00 <z_init_static_threads+0xf4>)
    5928:	f002 fb3c 	bl	7fa4 <printk>
    592c:	f240 21cf 	movw	r1, #719	; 0x2cf
    5930:	4628      	mov	r0, r5
    5932:	f002 fc90 	bl	8256 <assert_post_action>
    5936:	4b33      	ldr	r3, [pc, #204]	; (5a04 <z_init_static_threads+0xf8>)
    5938:	429c      	cmp	r4, r3
    593a:	d218      	bcs.n	596e <z_init_static_threads+0x62>
		z_setup_new_thread(
    593c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    593e:	9305      	str	r3, [sp, #20]
    5940:	6a23      	ldr	r3, [r4, #32]
    5942:	9304      	str	r3, [sp, #16]
    5944:	69e3      	ldr	r3, [r4, #28]
    5946:	9303      	str	r3, [sp, #12]
    5948:	69a3      	ldr	r3, [r4, #24]
    594a:	9302      	str	r3, [sp, #8]
    594c:	6963      	ldr	r3, [r4, #20]
    594e:	9301      	str	r3, [sp, #4]
    5950:	6923      	ldr	r3, [r4, #16]
    5952:	9300      	str	r3, [sp, #0]
    5954:	68e3      	ldr	r3, [r4, #12]
    5956:	68a2      	ldr	r2, [r4, #8]
    5958:	6861      	ldr	r1, [r4, #4]
    595a:	6820      	ldr	r0, [r4, #0]
    595c:	f7ff ff10 	bl	5780 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5960:	6823      	ldr	r3, [r4, #0]
    5962:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5964:	3430      	adds	r4, #48	; 0x30
    5966:	4b27      	ldr	r3, [pc, #156]	; (5a04 <z_init_static_threads+0xf8>)
    5968:	429c      	cmp	r4, r3
    596a:	d9e4      	bls.n	5936 <z_init_static_threads+0x2a>
    596c:	e7d3      	b.n	5916 <z_init_static_threads+0xa>
	k_sched_lock();
    596e:	f000 fc49 	bl	6204 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5972:	4c1f      	ldr	r4, [pc, #124]	; (59f0 <z_init_static_threads+0xe4>)
    5974:	e01b      	b.n	59ae <z_init_static_threads+0xa2>
			schedule_new_thread(thread_data->init_thread,
    5976:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    5978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    597c:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    5980:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    5984:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    5988:	03d8      	lsls	r0, r3, #15
    598a:	f240 35e7 	movw	r5, #999	; 0x3e7
    598e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5992:	2300      	movs	r3, #0
    5994:	1940      	adds	r0, r0, r5
    5996:	f04f 0500 	mov.w	r5, #0
    599a:	eb45 0101 	adc.w	r1, r5, r1
    599e:	f7fa fbaf 	bl	100 <__aeabi_uldivmod>
    59a2:	4602      	mov	r2, r0
    59a4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    59a6:	4630      	mov	r0, r6
    59a8:	f7ff fe56 	bl	5658 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    59ac:	3430      	adds	r4, #48	; 0x30
    59ae:	4b15      	ldr	r3, [pc, #84]	; (5a04 <z_init_static_threads+0xf8>)
    59b0:	429c      	cmp	r4, r3
    59b2:	d807      	bhi.n	59c4 <z_init_static_threads+0xb8>
    59b4:	4b13      	ldr	r3, [pc, #76]	; (5a04 <z_init_static_threads+0xf8>)
    59b6:	429c      	cmp	r4, r3
    59b8:	d215      	bcs.n	59e6 <z_init_static_threads+0xda>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    59ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    59bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    59c0:	d0f4      	beq.n	59ac <z_init_static_threads+0xa0>
    59c2:	e7d8      	b.n	5976 <z_init_static_threads+0x6a>
	_FOREACH_STATIC_THREAD(thread_data) {
    59c4:	4d0b      	ldr	r5, [pc, #44]	; (59f4 <z_init_static_threads+0xe8>)
    59c6:	f240 23ee 	movw	r3, #750	; 0x2ee
    59ca:	462a      	mov	r2, r5
    59cc:	490a      	ldr	r1, [pc, #40]	; (59f8 <z_init_static_threads+0xec>)
    59ce:	480b      	ldr	r0, [pc, #44]	; (59fc <z_init_static_threads+0xf0>)
    59d0:	f002 fae8 	bl	7fa4 <printk>
    59d4:	480a      	ldr	r0, [pc, #40]	; (5a00 <z_init_static_threads+0xf4>)
    59d6:	f002 fae5 	bl	7fa4 <printk>
    59da:	f240 21ee 	movw	r1, #750	; 0x2ee
    59de:	4628      	mov	r0, r5
    59e0:	f002 fc39 	bl	8256 <assert_post_action>
    59e4:	e7e6      	b.n	59b4 <z_init_static_threads+0xa8>
	k_sched_unlock();
    59e6:	f001 f975 	bl	6cd4 <k_sched_unlock>
}
    59ea:	b006      	add	sp, #24
    59ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    59f0:	20000154 	.word	0x20000154
    59f4:	00009b04 	.word	0x00009b04
    59f8:	00009c10 	.word	0x00009c10
    59fc:	00009078 	.word	0x00009078
    5a00:	00009ae4 	.word	0x00009ae4
    5a04:	200001b4 	.word	0x200001b4

00005a08 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5a08:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5a0a:	4b12      	ldr	r3, [pc, #72]	; (5a54 <idle+0x4c>)
    5a0c:	689b      	ldr	r3, [r3, #8]
    5a0e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5a12:	2b00      	cmp	r3, #0
    5a14:	da0d      	bge.n	5a32 <idle+0x2a>
    5a16:	4c10      	ldr	r4, [pc, #64]	; (5a58 <idle+0x50>)
    5a18:	2327      	movs	r3, #39	; 0x27
    5a1a:	4622      	mov	r2, r4
    5a1c:	490f      	ldr	r1, [pc, #60]	; (5a5c <idle+0x54>)
    5a1e:	4810      	ldr	r0, [pc, #64]	; (5a60 <idle+0x58>)
    5a20:	f002 fac0 	bl	7fa4 <printk>
    5a24:	2127      	movs	r1, #39	; 0x27
    5a26:	4620      	mov	r0, r4
    5a28:	f002 fc15 	bl	8256 <assert_post_action>
    5a2c:	e001      	b.n	5a32 <idle+0x2a>
	arch_cpu_idle();
    5a2e:	f7fc f84b 	bl	1ac8 <arch_cpu_idle>
	__asm__ volatile(
    5a32:	f04f 0220 	mov.w	r2, #32
    5a36:	f3ef 8311 	mrs	r3, BASEPRI
    5a3a:	f382 8812 	msr	BASEPRI_MAX, r2
    5a3e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5a42:	f001 feb5 	bl	77b0 <z_get_next_timeout_expiry>
    5a46:	4b03      	ldr	r3, [pc, #12]	; (5a54 <idle+0x4c>)
    5a48:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    5a4a:	f7fb fe6d 	bl	1728 <pm_system_suspend>
    5a4e:	2800      	cmp	r0, #0
    5a50:	d1ef      	bne.n	5a32 <idle+0x2a>
    5a52:	e7ec      	b.n	5a2e <idle+0x26>
    5a54:	20000fa8 	.word	0x20000fa8
    5a58:	00009c40 	.word	0x00009c40
    5a5c:	00009c64 	.word	0x00009c64
    5a60:	00009078 	.word	0x00009078

00005a64 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5a68:	b083      	sub	sp, #12
    5a6a:	4604      	mov	r4, r0
    5a6c:	4616      	mov	r6, r2
    5a6e:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5a70:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5a74:	2900      	cmp	r1, #0
    5a76:	d12b      	bne.n	5ad0 <z_impl_k_mutex_lock+0x6c>
    5a78:	f04f 0320 	mov.w	r3, #32
    5a7c:	f3ef 8711 	mrs	r7, BASEPRI
    5a80:	f383 8812 	msr	BASEPRI_MAX, r3
    5a84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a88:	487b      	ldr	r0, [pc, #492]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5a8a:	f7ff fdf7 	bl	567c <z_spin_lock_valid>
    5a8e:	2800      	cmp	r0, #0
    5a90:	d02d      	beq.n	5aee <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    5a92:	4879      	ldr	r0, [pc, #484]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5a94:	f7ff fe12 	bl	56bc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5a98:	68e1      	ldr	r1, [r4, #12]
    5a9a:	2900      	cmp	r1, #0
    5a9c:	d138      	bne.n	5b10 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    5a9e:	2900      	cmp	r1, #0
    5aa0:	d17d      	bne.n	5b9e <z_impl_k_mutex_lock+0x13a>
    5aa2:	4b76      	ldr	r3, [pc, #472]	; (5c7c <z_impl_k_mutex_lock+0x218>)
    5aa4:	689b      	ldr	r3, [r3, #8]
    5aa6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5aaa:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    5aac:	3101      	adds	r1, #1
    5aae:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    5ab0:	4b72      	ldr	r3, [pc, #456]	; (5c7c <z_impl_k_mutex_lock+0x218>)
    5ab2:	689b      	ldr	r3, [r3, #8]
    5ab4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ab6:	4870      	ldr	r0, [pc, #448]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5ab8:	f7ff fdf0 	bl	569c <z_spin_unlock_valid>
    5abc:	2800      	cmp	r0, #0
    5abe:	d070      	beq.n	5ba2 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    5ac0:	f387 8811 	msr	BASEPRI, r7
    5ac4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    5ac8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5aca:	b003      	add	sp, #12
    5acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5ad0:	4f6b      	ldr	r7, [pc, #428]	; (5c80 <z_impl_k_mutex_lock+0x21c>)
    5ad2:	2365      	movs	r3, #101	; 0x65
    5ad4:	463a      	mov	r2, r7
    5ad6:	496b      	ldr	r1, [pc, #428]	; (5c84 <z_impl_k_mutex_lock+0x220>)
    5ad8:	486b      	ldr	r0, [pc, #428]	; (5c88 <z_impl_k_mutex_lock+0x224>)
    5ada:	f002 fa63 	bl	7fa4 <printk>
    5ade:	486b      	ldr	r0, [pc, #428]	; (5c8c <z_impl_k_mutex_lock+0x228>)
    5ae0:	f002 fa60 	bl	7fa4 <printk>
    5ae4:	2165      	movs	r1, #101	; 0x65
    5ae6:	4638      	mov	r0, r7
    5ae8:	f002 fbb5 	bl	8256 <assert_post_action>
    5aec:	e7c4      	b.n	5a78 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5aee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 5c98 <z_impl_k_mutex_lock+0x234>
    5af2:	2381      	movs	r3, #129	; 0x81
    5af4:	4642      	mov	r2, r8
    5af6:	4966      	ldr	r1, [pc, #408]	; (5c90 <z_impl_k_mutex_lock+0x22c>)
    5af8:	4863      	ldr	r0, [pc, #396]	; (5c88 <z_impl_k_mutex_lock+0x224>)
    5afa:	f002 fa53 	bl	7fa4 <printk>
    5afe:	495e      	ldr	r1, [pc, #376]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5b00:	4864      	ldr	r0, [pc, #400]	; (5c94 <z_impl_k_mutex_lock+0x230>)
    5b02:	f002 fa4f 	bl	7fa4 <printk>
    5b06:	2181      	movs	r1, #129	; 0x81
    5b08:	4640      	mov	r0, r8
    5b0a:	f002 fba4 	bl	8256 <assert_post_action>
    5b0e:	e7c0      	b.n	5a92 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5b10:	68a2      	ldr	r2, [r4, #8]
    5b12:	4b5a      	ldr	r3, [pc, #360]	; (5c7c <z_impl_k_mutex_lock+0x218>)
    5b14:	689b      	ldr	r3, [r3, #8]
    5b16:	429a      	cmp	r2, r3
    5b18:	d0c1      	beq.n	5a9e <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5b1a:	ea55 0106 	orrs.w	r1, r5, r6
    5b1e:	bf0c      	ite	eq
    5b20:	f04f 0801 	moveq.w	r8, #1
    5b24:	f04f 0800 	movne.w	r8, #0
    5b28:	d04b      	beq.n	5bc2 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    5b2a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5b2e:	4649      	mov	r1, r9
    5b30:	f993 000e 	ldrsb.w	r0, [r3, #14]
    5b34:	f003 f871 	bl	8c1a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5b38:	4581      	cmp	r9, r0
    5b3a:	dc5d      	bgt.n	5bf8 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    5b3c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5b40:	9600      	str	r6, [sp, #0]
    5b42:	9501      	str	r5, [sp, #4]
    5b44:	4622      	mov	r2, r4
    5b46:	4639      	mov	r1, r7
    5b48:	484b      	ldr	r0, [pc, #300]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5b4a:	f000 ff67 	bl	6a1c <z_pend_curr>
	if (got_mutex == 0) {
    5b4e:	2800      	cmp	r0, #0
    5b50:	d0bb      	beq.n	5aca <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    5b52:	f04f 0320 	mov.w	r3, #32
    5b56:	f3ef 8511 	mrs	r5, BASEPRI
    5b5a:	f383 8812 	msr	BASEPRI_MAX, r3
    5b5e:	f3bf 8f6f 	isb	sy
    5b62:	4845      	ldr	r0, [pc, #276]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5b64:	f7ff fd8a 	bl	567c <z_spin_lock_valid>
    5b68:	2800      	cmp	r0, #0
    5b6a:	d04b      	beq.n	5c04 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    5b6c:	4842      	ldr	r0, [pc, #264]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5b6e:	f7ff fda5 	bl	56bc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5b72:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b74:	42a3      	cmp	r3, r4
    5b76:	d055      	beq.n	5c24 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d053      	beq.n	5c24 <z_impl_k_mutex_lock+0x1c0>
    5b7c:	6921      	ldr	r1, [r4, #16]
    5b7e:	f993 000e 	ldrsb.w	r0, [r3, #14]
    5b82:	f003 f84a 	bl	8c1a <new_prio_for_inheritance>
    5b86:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5b88:	4620      	mov	r0, r4
    5b8a:	f003 f851 	bl	8c30 <adjust_owner_prio>
    5b8e:	2800      	cmp	r0, #0
    5b90:	d14a      	bne.n	5c28 <z_impl_k_mutex_lock+0x1c4>
    5b92:	f1b9 0f00 	cmp.w	r9, #0
    5b96:	d049      	beq.n	5c2c <z_impl_k_mutex_lock+0x1c8>
    5b98:	f04f 0801 	mov.w	r8, #1
    5b9c:	e046      	b.n	5c2c <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    5b9e:	6923      	ldr	r3, [r4, #16]
    5ba0:	e783      	b.n	5aaa <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ba2:	4c3d      	ldr	r4, [pc, #244]	; (5c98 <z_impl_k_mutex_lock+0x234>)
    5ba4:	23ac      	movs	r3, #172	; 0xac
    5ba6:	4622      	mov	r2, r4
    5ba8:	493c      	ldr	r1, [pc, #240]	; (5c9c <z_impl_k_mutex_lock+0x238>)
    5baa:	4837      	ldr	r0, [pc, #220]	; (5c88 <z_impl_k_mutex_lock+0x224>)
    5bac:	f002 f9fa 	bl	7fa4 <printk>
    5bb0:	4931      	ldr	r1, [pc, #196]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5bb2:	483b      	ldr	r0, [pc, #236]	; (5ca0 <z_impl_k_mutex_lock+0x23c>)
    5bb4:	f002 f9f6 	bl	7fa4 <printk>
    5bb8:	21ac      	movs	r1, #172	; 0xac
    5bba:	4620      	mov	r0, r4
    5bbc:	f002 fb4b 	bl	8256 <assert_post_action>
    5bc0:	e77e      	b.n	5ac0 <z_impl_k_mutex_lock+0x5c>
    5bc2:	482d      	ldr	r0, [pc, #180]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5bc4:	f7ff fd6a 	bl	569c <z_spin_unlock_valid>
    5bc8:	b130      	cbz	r0, 5bd8 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    5bca:	f387 8811 	msr	BASEPRI, r7
    5bce:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    5bd2:	f06f 000f 	mvn.w	r0, #15
    5bd6:	e778      	b.n	5aca <z_impl_k_mutex_lock+0x66>
    5bd8:	4c2f      	ldr	r4, [pc, #188]	; (5c98 <z_impl_k_mutex_lock+0x234>)
    5bda:	23ac      	movs	r3, #172	; 0xac
    5bdc:	4622      	mov	r2, r4
    5bde:	492f      	ldr	r1, [pc, #188]	; (5c9c <z_impl_k_mutex_lock+0x238>)
    5be0:	4829      	ldr	r0, [pc, #164]	; (5c88 <z_impl_k_mutex_lock+0x224>)
    5be2:	f002 f9df 	bl	7fa4 <printk>
    5be6:	4924      	ldr	r1, [pc, #144]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5be8:	482d      	ldr	r0, [pc, #180]	; (5ca0 <z_impl_k_mutex_lock+0x23c>)
    5bea:	f002 f9db 	bl	7fa4 <printk>
    5bee:	21ac      	movs	r1, #172	; 0xac
    5bf0:	4620      	mov	r0, r4
    5bf2:	f002 fb30 	bl	8256 <assert_post_action>
    5bf6:	e7e8      	b.n	5bca <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    5bf8:	4601      	mov	r1, r0
    5bfa:	4620      	mov	r0, r4
    5bfc:	f003 f818 	bl	8c30 <adjust_owner_prio>
    5c00:	4681      	mov	r9, r0
    5c02:	e79d      	b.n	5b40 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c04:	4e24      	ldr	r6, [pc, #144]	; (5c98 <z_impl_k_mutex_lock+0x234>)
    5c06:	2381      	movs	r3, #129	; 0x81
    5c08:	4632      	mov	r2, r6
    5c0a:	4921      	ldr	r1, [pc, #132]	; (5c90 <z_impl_k_mutex_lock+0x22c>)
    5c0c:	481e      	ldr	r0, [pc, #120]	; (5c88 <z_impl_k_mutex_lock+0x224>)
    5c0e:	f002 f9c9 	bl	7fa4 <printk>
    5c12:	4919      	ldr	r1, [pc, #100]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5c14:	481f      	ldr	r0, [pc, #124]	; (5c94 <z_impl_k_mutex_lock+0x230>)
    5c16:	f002 f9c5 	bl	7fa4 <printk>
    5c1a:	2181      	movs	r1, #129	; 0x81
    5c1c:	4630      	mov	r0, r6
    5c1e:	f002 fb1a 	bl	8256 <assert_post_action>
    5c22:	e7a3      	b.n	5b6c <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5c24:	6921      	ldr	r1, [r4, #16]
    5c26:	e7af      	b.n	5b88 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5c28:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    5c2c:	f1b8 0f00 	cmp.w	r8, #0
    5c30:	d006      	beq.n	5c40 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    5c32:	4629      	mov	r1, r5
    5c34:	4810      	ldr	r0, [pc, #64]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5c36:	f000 fa97 	bl	6168 <z_reschedule>
	return -EAGAIN;
    5c3a:	f06f 000a 	mvn.w	r0, #10
    5c3e:	e744      	b.n	5aca <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c40:	480d      	ldr	r0, [pc, #52]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5c42:	f7ff fd2b 	bl	569c <z_spin_unlock_valid>
    5c46:	b130      	cbz	r0, 5c56 <z_impl_k_mutex_lock+0x1f2>
    5c48:	f385 8811 	msr	BASEPRI, r5
    5c4c:	f3bf 8f6f 	isb	sy
    5c50:	f06f 000a 	mvn.w	r0, #10
    5c54:	e739      	b.n	5aca <z_impl_k_mutex_lock+0x66>
    5c56:	4c10      	ldr	r4, [pc, #64]	; (5c98 <z_impl_k_mutex_lock+0x234>)
    5c58:	23ac      	movs	r3, #172	; 0xac
    5c5a:	4622      	mov	r2, r4
    5c5c:	490f      	ldr	r1, [pc, #60]	; (5c9c <z_impl_k_mutex_lock+0x238>)
    5c5e:	480a      	ldr	r0, [pc, #40]	; (5c88 <z_impl_k_mutex_lock+0x224>)
    5c60:	f002 f9a0 	bl	7fa4 <printk>
    5c64:	4904      	ldr	r1, [pc, #16]	; (5c78 <z_impl_k_mutex_lock+0x214>)
    5c66:	480e      	ldr	r0, [pc, #56]	; (5ca0 <z_impl_k_mutex_lock+0x23c>)
    5c68:	f002 f99c 	bl	7fa4 <printk>
    5c6c:	21ac      	movs	r1, #172	; 0xac
    5c6e:	4620      	mov	r0, r4
    5c70:	f002 faf1 	bl	8256 <assert_post_action>
    5c74:	e7e8      	b.n	5c48 <z_impl_k_mutex_lock+0x1e4>
    5c76:	bf00      	nop
    5c78:	20000fd8 	.word	0x20000fd8
    5c7c:	20000fa8 	.word	0x20000fa8
    5c80:	00009c8c 	.word	0x00009c8c
    5c84:	00009cb0 	.word	0x00009cb0
    5c88:	00009078 	.word	0x00009078
    5c8c:	00009cc4 	.word	0x00009cc4
    5c90:	000091e8 	.word	0x000091e8
    5c94:	00009200 	.word	0x00009200
    5c98:	00009190 	.word	0x00009190
    5c9c:	000091b8 	.word	0x000091b8
    5ca0:	000091d0 	.word	0x000091d0

00005ca4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5ca4:	b570      	push	{r4, r5, r6, lr}
    5ca6:	4604      	mov	r4, r0
    5ca8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5cac:	bb03      	cbnz	r3, 5cf0 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5cae:	68a3      	ldr	r3, [r4, #8]
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	f000 80a6 	beq.w	5e02 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5cb6:	4a56      	ldr	r2, [pc, #344]	; (5e10 <z_impl_k_mutex_unlock+0x16c>)
    5cb8:	6892      	ldr	r2, [r2, #8]
    5cba:	4293      	cmp	r3, r2
    5cbc:	f040 80a4 	bne.w	5e08 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5cc0:	68e3      	ldr	r3, [r4, #12]
    5cc2:	b323      	cbz	r3, 5d0e <z_impl_k_mutex_unlock+0x6a>
    5cc4:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5cc8:	bb6b      	cbnz	r3, 5d26 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5cca:	4b51      	ldr	r3, [pc, #324]	; (5e10 <z_impl_k_mutex_unlock+0x16c>)
    5ccc:	689b      	ldr	r3, [r3, #8]
    5cce:	7bdb      	ldrb	r3, [r3, #15]
    5cd0:	2b01      	cmp	r3, #1
    5cd2:	d037      	beq.n	5d44 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    5cd4:	4b4e      	ldr	r3, [pc, #312]	; (5e10 <z_impl_k_mutex_unlock+0x16c>)
    5cd6:	689a      	ldr	r2, [r3, #8]
    5cd8:	7bd3      	ldrb	r3, [r2, #15]
    5cda:	3b01      	subs	r3, #1
    5cdc:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5cde:	68e3      	ldr	r3, [r4, #12]
    5ce0:	2b01      	cmp	r3, #1
    5ce2:	d93e      	bls.n	5d62 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    5ce4:	3b01      	subs	r3, #1
    5ce6:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5ce8:	f000 fff4 	bl	6cd4 <k_sched_unlock>

	return 0;
    5cec:	2000      	movs	r0, #0
}
    5cee:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5cf0:	4d48      	ldr	r5, [pc, #288]	; (5e14 <z_impl_k_mutex_unlock+0x170>)
    5cf2:	23c7      	movs	r3, #199	; 0xc7
    5cf4:	462a      	mov	r2, r5
    5cf6:	4948      	ldr	r1, [pc, #288]	; (5e18 <z_impl_k_mutex_unlock+0x174>)
    5cf8:	4848      	ldr	r0, [pc, #288]	; (5e1c <z_impl_k_mutex_unlock+0x178>)
    5cfa:	f002 f953 	bl	7fa4 <printk>
    5cfe:	4848      	ldr	r0, [pc, #288]	; (5e20 <z_impl_k_mutex_unlock+0x17c>)
    5d00:	f002 f950 	bl	7fa4 <printk>
    5d04:	21c7      	movs	r1, #199	; 0xc7
    5d06:	4628      	mov	r0, r5
    5d08:	f002 faa5 	bl	8256 <assert_post_action>
    5d0c:	e7cf      	b.n	5cae <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5d0e:	4d41      	ldr	r5, [pc, #260]	; (5e14 <z_impl_k_mutex_unlock+0x170>)
    5d10:	23df      	movs	r3, #223	; 0xdf
    5d12:	462a      	mov	r2, r5
    5d14:	4943      	ldr	r1, [pc, #268]	; (5e24 <z_impl_k_mutex_unlock+0x180>)
    5d16:	4841      	ldr	r0, [pc, #260]	; (5e1c <z_impl_k_mutex_unlock+0x178>)
    5d18:	f002 f944 	bl	7fa4 <printk>
    5d1c:	21df      	movs	r1, #223	; 0xdf
    5d1e:	4628      	mov	r0, r5
    5d20:	f002 fa99 	bl	8256 <assert_post_action>
    5d24:	e7ce      	b.n	5cc4 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    5d26:	4d40      	ldr	r5, [pc, #256]	; (5e28 <z_impl_k_mutex_unlock+0x184>)
    5d28:	23fd      	movs	r3, #253	; 0xfd
    5d2a:	462a      	mov	r2, r5
    5d2c:	493a      	ldr	r1, [pc, #232]	; (5e18 <z_impl_k_mutex_unlock+0x174>)
    5d2e:	483b      	ldr	r0, [pc, #236]	; (5e1c <z_impl_k_mutex_unlock+0x178>)
    5d30:	f002 f938 	bl	7fa4 <printk>
    5d34:	483d      	ldr	r0, [pc, #244]	; (5e2c <z_impl_k_mutex_unlock+0x188>)
    5d36:	f002 f935 	bl	7fa4 <printk>
    5d3a:	21fd      	movs	r1, #253	; 0xfd
    5d3c:	4628      	mov	r0, r5
    5d3e:	f002 fa8a 	bl	8256 <assert_post_action>
    5d42:	e7c2      	b.n	5cca <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5d44:	4d38      	ldr	r5, [pc, #224]	; (5e28 <z_impl_k_mutex_unlock+0x184>)
    5d46:	23fe      	movs	r3, #254	; 0xfe
    5d48:	462a      	mov	r2, r5
    5d4a:	4939      	ldr	r1, [pc, #228]	; (5e30 <z_impl_k_mutex_unlock+0x18c>)
    5d4c:	4833      	ldr	r0, [pc, #204]	; (5e1c <z_impl_k_mutex_unlock+0x178>)
    5d4e:	f002 f929 	bl	7fa4 <printk>
    5d52:	4836      	ldr	r0, [pc, #216]	; (5e2c <z_impl_k_mutex_unlock+0x188>)
    5d54:	f002 f926 	bl	7fa4 <printk>
    5d58:	21fe      	movs	r1, #254	; 0xfe
    5d5a:	4628      	mov	r0, r5
    5d5c:	f002 fa7b 	bl	8256 <assert_post_action>
    5d60:	e7b8      	b.n	5cd4 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    5d62:	f04f 0320 	mov.w	r3, #32
    5d66:	f3ef 8511 	mrs	r5, BASEPRI
    5d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d72:	4830      	ldr	r0, [pc, #192]	; (5e34 <z_impl_k_mutex_unlock+0x190>)
    5d74:	f7ff fc82 	bl	567c <z_spin_lock_valid>
    5d78:	b1c0      	cbz	r0, 5dac <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    5d7a:	482e      	ldr	r0, [pc, #184]	; (5e34 <z_impl_k_mutex_unlock+0x190>)
    5d7c:	f7ff fc9e 	bl	56bc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5d80:	6921      	ldr	r1, [r4, #16]
    5d82:	4620      	mov	r0, r4
    5d84:	f002 ff54 	bl	8c30 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5d88:	4620      	mov	r0, r4
    5d8a:	f001 f885 	bl	6e98 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5d8e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5d90:	b1e0      	cbz	r0, 5dcc <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    5d92:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5d96:	6123      	str	r3, [r4, #16]
    5d98:	2300      	movs	r3, #0
    5d9a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    5d9e:	f000 fc65 	bl	666c <z_ready_thread>
		z_reschedule(&lock, key);
    5da2:	4629      	mov	r1, r5
    5da4:	4823      	ldr	r0, [pc, #140]	; (5e34 <z_impl_k_mutex_unlock+0x190>)
    5da6:	f000 f9df 	bl	6168 <z_reschedule>
    5daa:	e79d      	b.n	5ce8 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5dac:	4e22      	ldr	r6, [pc, #136]	; (5e38 <z_impl_k_mutex_unlock+0x194>)
    5dae:	2381      	movs	r3, #129	; 0x81
    5db0:	4632      	mov	r2, r6
    5db2:	4922      	ldr	r1, [pc, #136]	; (5e3c <z_impl_k_mutex_unlock+0x198>)
    5db4:	4819      	ldr	r0, [pc, #100]	; (5e1c <z_impl_k_mutex_unlock+0x178>)
    5db6:	f002 f8f5 	bl	7fa4 <printk>
    5dba:	491e      	ldr	r1, [pc, #120]	; (5e34 <z_impl_k_mutex_unlock+0x190>)
    5dbc:	4820      	ldr	r0, [pc, #128]	; (5e40 <z_impl_k_mutex_unlock+0x19c>)
    5dbe:	f002 f8f1 	bl	7fa4 <printk>
    5dc2:	2181      	movs	r1, #129	; 0x81
    5dc4:	4630      	mov	r0, r6
    5dc6:	f002 fa46 	bl	8256 <assert_post_action>
    5dca:	e7d6      	b.n	5d7a <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    5dcc:	2300      	movs	r3, #0
    5dce:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5dd0:	4818      	ldr	r0, [pc, #96]	; (5e34 <z_impl_k_mutex_unlock+0x190>)
    5dd2:	f7ff fc63 	bl	569c <z_spin_unlock_valid>
    5dd6:	b120      	cbz	r0, 5de2 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    5dd8:	f385 8811 	msr	BASEPRI, r5
    5ddc:	f3bf 8f6f 	isb	sy
    5de0:	e782      	b.n	5ce8 <z_impl_k_mutex_unlock+0x44>
    5de2:	4c15      	ldr	r4, [pc, #84]	; (5e38 <z_impl_k_mutex_unlock+0x194>)
    5de4:	23ac      	movs	r3, #172	; 0xac
    5de6:	4622      	mov	r2, r4
    5de8:	4916      	ldr	r1, [pc, #88]	; (5e44 <z_impl_k_mutex_unlock+0x1a0>)
    5dea:	480c      	ldr	r0, [pc, #48]	; (5e1c <z_impl_k_mutex_unlock+0x178>)
    5dec:	f002 f8da 	bl	7fa4 <printk>
    5df0:	4910      	ldr	r1, [pc, #64]	; (5e34 <z_impl_k_mutex_unlock+0x190>)
    5df2:	4815      	ldr	r0, [pc, #84]	; (5e48 <z_impl_k_mutex_unlock+0x1a4>)
    5df4:	f002 f8d6 	bl	7fa4 <printk>
    5df8:	21ac      	movs	r1, #172	; 0xac
    5dfa:	4620      	mov	r0, r4
    5dfc:	f002 fa2b 	bl	8256 <assert_post_action>
    5e00:	e7ea      	b.n	5dd8 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    5e02:	f06f 0015 	mvn.w	r0, #21
    5e06:	e772      	b.n	5cee <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    5e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5e0c:	e76f      	b.n	5cee <z_impl_k_mutex_unlock+0x4a>
    5e0e:	bf00      	nop
    5e10:	20000fa8 	.word	0x20000fa8
    5e14:	00009c8c 	.word	0x00009c8c
    5e18:	00009cb0 	.word	0x00009cb0
    5e1c:	00009078 	.word	0x00009078
    5e20:	00009cc4 	.word	0x00009cc4
    5e24:	00009cec 	.word	0x00009cec
    5e28:	00009d04 	.word	0x00009d04
    5e2c:	00009d30 	.word	0x00009d30
    5e30:	00009d34 	.word	0x00009d34
    5e34:	20000fd8 	.word	0x20000fd8
    5e38:	00009190 	.word	0x00009190
    5e3c:	000091e8 	.word	0x000091e8
    5e40:	00009200 	.word	0x00009200
    5e44:	000091b8 	.word	0x000091b8
    5e48:	000091d0 	.word	0x000091d0

00005e4c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5e4c:	b570      	push	{r4, r5, r6, lr}
    5e4e:	4604      	mov	r4, r0
	__asm__ volatile(
    5e50:	f04f 0320 	mov.w	r3, #32
    5e54:	f3ef 8511 	mrs	r5, BASEPRI
    5e58:	f383 8812 	msr	BASEPRI_MAX, r3
    5e5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e60:	4817      	ldr	r0, [pc, #92]	; (5ec0 <z_impl_k_sem_give+0x74>)
    5e62:	f7ff fc0b 	bl	567c <z_spin_lock_valid>
    5e66:	b180      	cbz	r0, 5e8a <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    5e68:	4815      	ldr	r0, [pc, #84]	; (5ec0 <z_impl_k_sem_give+0x74>)
    5e6a:	f7ff fc27 	bl	56bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5e6e:	4620      	mov	r0, r4
    5e70:	f001 f812 	bl	6e98 <z_unpend_first_thread>

	if (thread != NULL) {
    5e74:	b1c8      	cbz	r0, 5eaa <z_impl_k_sem_give+0x5e>
    5e76:	2200      	movs	r2, #0
    5e78:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5e7c:	f000 fbf6 	bl	666c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5e80:	4629      	mov	r1, r5
    5e82:	480f      	ldr	r0, [pc, #60]	; (5ec0 <z_impl_k_sem_give+0x74>)
    5e84:	f000 f970 	bl	6168 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5e88:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e8a:	4e0e      	ldr	r6, [pc, #56]	; (5ec4 <z_impl_k_sem_give+0x78>)
    5e8c:	2381      	movs	r3, #129	; 0x81
    5e8e:	4632      	mov	r2, r6
    5e90:	490d      	ldr	r1, [pc, #52]	; (5ec8 <z_impl_k_sem_give+0x7c>)
    5e92:	480e      	ldr	r0, [pc, #56]	; (5ecc <z_impl_k_sem_give+0x80>)
    5e94:	f002 f886 	bl	7fa4 <printk>
    5e98:	4909      	ldr	r1, [pc, #36]	; (5ec0 <z_impl_k_sem_give+0x74>)
    5e9a:	480d      	ldr	r0, [pc, #52]	; (5ed0 <z_impl_k_sem_give+0x84>)
    5e9c:	f002 f882 	bl	7fa4 <printk>
    5ea0:	2181      	movs	r1, #129	; 0x81
    5ea2:	4630      	mov	r0, r6
    5ea4:	f002 f9d7 	bl	8256 <assert_post_action>
    5ea8:	e7de      	b.n	5e68 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5eaa:	68a3      	ldr	r3, [r4, #8]
    5eac:	68e2      	ldr	r2, [r4, #12]
    5eae:	4293      	cmp	r3, r2
    5eb0:	d003      	beq.n	5eba <z_impl_k_sem_give+0x6e>
    5eb2:	2201      	movs	r2, #1
    5eb4:	4413      	add	r3, r2
    5eb6:	60a3      	str	r3, [r4, #8]
}
    5eb8:	e7e2      	b.n	5e80 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5eba:	2200      	movs	r2, #0
    5ebc:	e7fa      	b.n	5eb4 <z_impl_k_sem_give+0x68>
    5ebe:	bf00      	nop
    5ec0:	20000fdc 	.word	0x20000fdc
    5ec4:	00009190 	.word	0x00009190
    5ec8:	000091e8 	.word	0x000091e8
    5ecc:	00009078 	.word	0x00009078
    5ed0:	00009200 	.word	0x00009200

00005ed4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ed8:	b082      	sub	sp, #8
    5eda:	4604      	mov	r4, r0
    5edc:	4616      	mov	r6, r2
    5ede:	461f      	mov	r7, r3
    5ee0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5ee4:	b113      	cbz	r3, 5eec <z_impl_k_sem_take+0x18>
    5ee6:	ea56 0307 	orrs.w	r3, r6, r7
    5eea:	d11f      	bne.n	5f2c <z_impl_k_sem_take+0x58>
    5eec:	f04f 0320 	mov.w	r3, #32
    5ef0:	f3ef 8511 	mrs	r5, BASEPRI
    5ef4:	f383 8812 	msr	BASEPRI_MAX, r3
    5ef8:	f3bf 8f6f 	isb	sy
    5efc:	4836      	ldr	r0, [pc, #216]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5efe:	f7ff fbbd 	bl	567c <z_spin_lock_valid>
    5f02:	b310      	cbz	r0, 5f4a <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    5f04:	4834      	ldr	r0, [pc, #208]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5f06:	f7ff fbd9 	bl	56bc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5f0a:	68a3      	ldr	r3, [r4, #8]
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	d03d      	beq.n	5f8c <z_impl_k_sem_take+0xb8>
		sem->count--;
    5f10:	3b01      	subs	r3, #1
    5f12:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f14:	4830      	ldr	r0, [pc, #192]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5f16:	f7ff fbc1 	bl	569c <z_spin_unlock_valid>
    5f1a:	b338      	cbz	r0, 5f6c <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    5f1c:	f385 8811 	msr	BASEPRI, r5
    5f20:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5f24:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5f26:	b002      	add	sp, #8
    5f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    5f2c:	4d2b      	ldr	r5, [pc, #172]	; (5fdc <z_impl_k_sem_take+0x108>)
    5f2e:	2379      	movs	r3, #121	; 0x79
    5f30:	462a      	mov	r2, r5
    5f32:	492b      	ldr	r1, [pc, #172]	; (5fe0 <z_impl_k_sem_take+0x10c>)
    5f34:	482b      	ldr	r0, [pc, #172]	; (5fe4 <z_impl_k_sem_take+0x110>)
    5f36:	f002 f835 	bl	7fa4 <printk>
    5f3a:	482b      	ldr	r0, [pc, #172]	; (5fe8 <z_impl_k_sem_take+0x114>)
    5f3c:	f002 f832 	bl	7fa4 <printk>
    5f40:	2179      	movs	r1, #121	; 0x79
    5f42:	4628      	mov	r0, r5
    5f44:	f002 f987 	bl	8256 <assert_post_action>
    5f48:	e7d0      	b.n	5eec <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f4a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5ff4 <z_impl_k_sem_take+0x120>
    5f4e:	2381      	movs	r3, #129	; 0x81
    5f50:	4642      	mov	r2, r8
    5f52:	4926      	ldr	r1, [pc, #152]	; (5fec <z_impl_k_sem_take+0x118>)
    5f54:	4823      	ldr	r0, [pc, #140]	; (5fe4 <z_impl_k_sem_take+0x110>)
    5f56:	f002 f825 	bl	7fa4 <printk>
    5f5a:	491f      	ldr	r1, [pc, #124]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5f5c:	4824      	ldr	r0, [pc, #144]	; (5ff0 <z_impl_k_sem_take+0x11c>)
    5f5e:	f002 f821 	bl	7fa4 <printk>
    5f62:	2181      	movs	r1, #129	; 0x81
    5f64:	4640      	mov	r0, r8
    5f66:	f002 f976 	bl	8256 <assert_post_action>
    5f6a:	e7cb      	b.n	5f04 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f6c:	4c21      	ldr	r4, [pc, #132]	; (5ff4 <z_impl_k_sem_take+0x120>)
    5f6e:	23ac      	movs	r3, #172	; 0xac
    5f70:	4622      	mov	r2, r4
    5f72:	4921      	ldr	r1, [pc, #132]	; (5ff8 <z_impl_k_sem_take+0x124>)
    5f74:	481b      	ldr	r0, [pc, #108]	; (5fe4 <z_impl_k_sem_take+0x110>)
    5f76:	f002 f815 	bl	7fa4 <printk>
    5f7a:	4917      	ldr	r1, [pc, #92]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5f7c:	481f      	ldr	r0, [pc, #124]	; (5ffc <z_impl_k_sem_take+0x128>)
    5f7e:	f002 f811 	bl	7fa4 <printk>
    5f82:	21ac      	movs	r1, #172	; 0xac
    5f84:	4620      	mov	r0, r4
    5f86:	f002 f966 	bl	8256 <assert_post_action>
    5f8a:	e7c7      	b.n	5f1c <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5f8c:	ea56 0307 	orrs.w	r3, r6, r7
    5f90:	d007      	beq.n	5fa2 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5f92:	e9cd 6700 	strd	r6, r7, [sp]
    5f96:	4622      	mov	r2, r4
    5f98:	4629      	mov	r1, r5
    5f9a:	480f      	ldr	r0, [pc, #60]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5f9c:	f000 fd3e 	bl	6a1c <z_pend_curr>
	return ret;
    5fa0:	e7c1      	b.n	5f26 <z_impl_k_sem_take+0x52>
    5fa2:	480d      	ldr	r0, [pc, #52]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5fa4:	f7ff fb7a 	bl	569c <z_spin_unlock_valid>
    5fa8:	b130      	cbz	r0, 5fb8 <z_impl_k_sem_take+0xe4>
    5faa:	f385 8811 	msr	BASEPRI, r5
    5fae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5fb2:	f06f 000f 	mvn.w	r0, #15
    5fb6:	e7b6      	b.n	5f26 <z_impl_k_sem_take+0x52>
    5fb8:	4c0e      	ldr	r4, [pc, #56]	; (5ff4 <z_impl_k_sem_take+0x120>)
    5fba:	23ac      	movs	r3, #172	; 0xac
    5fbc:	4622      	mov	r2, r4
    5fbe:	490e      	ldr	r1, [pc, #56]	; (5ff8 <z_impl_k_sem_take+0x124>)
    5fc0:	4808      	ldr	r0, [pc, #32]	; (5fe4 <z_impl_k_sem_take+0x110>)
    5fc2:	f001 ffef 	bl	7fa4 <printk>
    5fc6:	4904      	ldr	r1, [pc, #16]	; (5fd8 <z_impl_k_sem_take+0x104>)
    5fc8:	480c      	ldr	r0, [pc, #48]	; (5ffc <z_impl_k_sem_take+0x128>)
    5fca:	f001 ffeb 	bl	7fa4 <printk>
    5fce:	21ac      	movs	r1, #172	; 0xac
    5fd0:	4620      	mov	r0, r4
    5fd2:	f002 f940 	bl	8256 <assert_post_action>
    5fd6:	e7e8      	b.n	5faa <z_impl_k_sem_take+0xd6>
    5fd8:	20000fdc 	.word	0x20000fdc
    5fdc:	00009d68 	.word	0x00009d68
    5fe0:	00009d88 	.word	0x00009d88
    5fe4:	00009078 	.word	0x00009078
    5fe8:	00009d30 	.word	0x00009d30
    5fec:	000091e8 	.word	0x000091e8
    5ff0:	00009200 	.word	0x00009200
    5ff4:	00009190 	.word	0x00009190
    5ff8:	000091b8 	.word	0x000091b8
    5ffc:	000091d0 	.word	0x000091d0

00006000 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    6000:	b538      	push	{r3, r4, r5, lr}
    6002:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6004:	6883      	ldr	r3, [r0, #8]
    6006:	b10b      	cbz	r3, 600c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    6008:	68a0      	ldr	r0, [r4, #8]
    600a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    600c:	4d06      	ldr	r5, [pc, #24]	; (6028 <pended_on_thread+0x28>)
    600e:	f240 2383 	movw	r3, #643	; 0x283
    6012:	462a      	mov	r2, r5
    6014:	4905      	ldr	r1, [pc, #20]	; (602c <pended_on_thread+0x2c>)
    6016:	4806      	ldr	r0, [pc, #24]	; (6030 <pended_on_thread+0x30>)
    6018:	f001 ffc4 	bl	7fa4 <printk>
    601c:	f240 2183 	movw	r1, #643	; 0x283
    6020:	4628      	mov	r0, r5
    6022:	f002 f918 	bl	8256 <assert_post_action>
    6026:	e7ef      	b.n	6008 <pended_on_thread+0x8>
    6028:	00009dd8 	.word	0x00009dd8
    602c:	00009dfc 	.word	0x00009dfc
    6030:	00009078 	.word	0x00009078

00006034 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    6034:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    603a:	bf08      	it	eq
    603c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    6040:	d100      	bne.n	6044 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    6042:	bd38      	pop	{r3, r4, r5, pc}
    6044:	4902      	ldr	r1, [pc, #8]	; (6050 <add_thread_timeout+0x1c>)
    6046:	3018      	adds	r0, #24
    6048:	f001 fa5c 	bl	7504 <z_add_timeout>
    604c:	e7f9      	b.n	6042 <add_thread_timeout+0xe>
    604e:	bf00      	nop
    6050:	000067c9 	.word	0x000067c9

00006054 <z_reset_time_slice>:
{
    6054:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    6056:	4b08      	ldr	r3, [pc, #32]	; (6078 <z_reset_time_slice+0x24>)
    6058:	681b      	ldr	r3, [r3, #0]
    605a:	b903      	cbnz	r3, 605e <z_reset_time_slice+0xa>
}
    605c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    605e:	f7fd fcfd 	bl	3a5c <sys_clock_elapsed>
    6062:	4603      	mov	r3, r0
    6064:	4a04      	ldr	r2, [pc, #16]	; (6078 <z_reset_time_slice+0x24>)
    6066:	6810      	ldr	r0, [r2, #0]
    6068:	4403      	add	r3, r0
    606a:	4a04      	ldr	r2, [pc, #16]	; (607c <z_reset_time_slice+0x28>)
    606c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    606e:	2100      	movs	r1, #0
    6070:	f001 fbf0 	bl	7854 <z_set_timeout_expiry>
}
    6074:	e7f2      	b.n	605c <z_reset_time_slice+0x8>
    6076:	bf00      	nop
    6078:	20000fec 	.word	0x20000fec
    607c:	20000fa8 	.word	0x20000fa8

00006080 <k_sched_time_slice_set>:
{
    6080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6084:	4606      	mov	r6, r0
    6086:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    6088:	2400      	movs	r4, #0
	__asm__ volatile(
    608a:	f04f 0320 	mov.w	r3, #32
    608e:	f3ef 8711 	mrs	r7, BASEPRI
    6092:	f383 8812 	msr	BASEPRI_MAX, r3
    6096:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    609a:	4829      	ldr	r0, [pc, #164]	; (6140 <k_sched_time_slice_set+0xc0>)
    609c:	f7ff faee 	bl	567c <z_spin_lock_valid>
    60a0:	b118      	cbz	r0, 60aa <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    60a2:	4827      	ldr	r0, [pc, #156]	; (6140 <k_sched_time_slice_set+0xc0>)
    60a4:	f7ff fb0a 	bl	56bc <z_spin_lock_set_owner>
	return k;
    60a8:	e01d      	b.n	60e6 <k_sched_time_slice_set+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60aa:	4d26      	ldr	r5, [pc, #152]	; (6144 <k_sched_time_slice_set+0xc4>)
    60ac:	2381      	movs	r3, #129	; 0x81
    60ae:	462a      	mov	r2, r5
    60b0:	4925      	ldr	r1, [pc, #148]	; (6148 <k_sched_time_slice_set+0xc8>)
    60b2:	4826      	ldr	r0, [pc, #152]	; (614c <k_sched_time_slice_set+0xcc>)
    60b4:	f001 ff76 	bl	7fa4 <printk>
    60b8:	4921      	ldr	r1, [pc, #132]	; (6140 <k_sched_time_slice_set+0xc0>)
    60ba:	4825      	ldr	r0, [pc, #148]	; (6150 <k_sched_time_slice_set+0xd0>)
    60bc:	f001 ff72 	bl	7fa4 <printk>
    60c0:	2181      	movs	r1, #129	; 0x81
    60c2:	4628      	mov	r0, r5
    60c4:	f002 f8c7 	bl	8256 <assert_post_action>
    60c8:	e7eb      	b.n	60a2 <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
    60ca:	4b22      	ldr	r3, [pc, #136]	; (6154 <k_sched_time_slice_set+0xd4>)
    60cc:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    60d0:	f7ff ffc0 	bl	6054 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60d4:	481a      	ldr	r0, [pc, #104]	; (6140 <k_sched_time_slice_set+0xc0>)
    60d6:	f7ff fae1 	bl	569c <z_spin_unlock_valid>
    60da:	b1f8      	cbz	r0, 611c <k_sched_time_slice_set+0x9c>
	__asm__ volatile(
    60dc:	f387 8811 	msr	BASEPRI, r7
    60e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    60e4:	2401      	movs	r4, #1
    60e6:	bb4c      	cbnz	r4, 613c <k_sched_time_slice_set+0xbc>
		_current_cpu->slice_ticks = 0;
    60e8:	2300      	movs	r3, #0
    60ea:	4a1b      	ldr	r2, [pc, #108]	; (6158 <k_sched_time_slice_set+0xd8>)
    60ec:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    60ee:	0c75      	lsrs	r5, r6, #17
    60f0:	03f4      	lsls	r4, r6, #15
    60f2:	f240 30e7 	movw	r0, #999	; 0x3e7
    60f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    60fa:	2300      	movs	r3, #0
    60fc:	1820      	adds	r0, r4, r0
    60fe:	f04f 0100 	mov.w	r1, #0
    6102:	eb45 0101 	adc.w	r1, r5, r1
    6106:	f7f9 fffb 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    610a:	4b14      	ldr	r3, [pc, #80]	; (615c <k_sched_time_slice_set+0xdc>)
    610c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    610e:	2e00      	cmp	r6, #0
    6110:	dddb      	ble.n	60ca <k_sched_time_slice_set+0x4a>
			slice_time = MAX(2, slice_time);
    6112:	2802      	cmp	r0, #2
    6114:	bfb8      	it	lt
    6116:	2002      	movlt	r0, #2
    6118:	6018      	str	r0, [r3, #0]
    611a:	e7d6      	b.n	60ca <k_sched_time_slice_set+0x4a>
    611c:	4c09      	ldr	r4, [pc, #36]	; (6144 <k_sched_time_slice_set+0xc4>)
    611e:	23ac      	movs	r3, #172	; 0xac
    6120:	4622      	mov	r2, r4
    6122:	490f      	ldr	r1, [pc, #60]	; (6160 <k_sched_time_slice_set+0xe0>)
    6124:	4809      	ldr	r0, [pc, #36]	; (614c <k_sched_time_slice_set+0xcc>)
    6126:	f001 ff3d 	bl	7fa4 <printk>
    612a:	4905      	ldr	r1, [pc, #20]	; (6140 <k_sched_time_slice_set+0xc0>)
    612c:	480d      	ldr	r0, [pc, #52]	; (6164 <k_sched_time_slice_set+0xe4>)
    612e:	f001 ff39 	bl	7fa4 <printk>
    6132:	21ac      	movs	r1, #172	; 0xac
    6134:	4620      	mov	r0, r4
    6136:	f002 f88e 	bl	8256 <assert_post_action>
    613a:	e7cf      	b.n	60dc <k_sched_time_slice_set+0x5c>
}
    613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6140:	20000fe4 	.word	0x20000fe4
    6144:	00009190 	.word	0x00009190
    6148:	000091e8 	.word	0x000091e8
    614c:	00009078 	.word	0x00009078
    6150:	00009200 	.word	0x00009200
    6154:	20000fe8 	.word	0x20000fe8
    6158:	20000fa8 	.word	0x20000fa8
    615c:	20000fec 	.word	0x20000fec
    6160:	000091b8 	.word	0x000091b8
    6164:	000091d0 	.word	0x000091d0

00006168 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6168:	b570      	push	{r4, r5, r6, lr}
    616a:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    616c:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    616e:	b921      	cbnz	r1, 617a <z_reschedule+0x12>
    6170:	f3ef 8305 	mrs	r3, IPSR
    6174:	b913      	cbnz	r3, 617c <z_reschedule+0x14>
    6176:	2101      	movs	r1, #1
    6178:	e000      	b.n	617c <z_reschedule+0x14>
    617a:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    617c:	f011 0f01 	tst.w	r1, #1
    6180:	d01c      	beq.n	61bc <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    6182:	4b1b      	ldr	r3, [pc, #108]	; (61f0 <z_reschedule+0x88>)
    6184:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    6186:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    6188:	429a      	cmp	r2, r3
    618a:	d017      	beq.n	61bc <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    618c:	4620      	mov	r0, r4
    618e:	f7ff fa85 	bl	569c <z_spin_unlock_valid>
    6192:	b118      	cbz	r0, 619c <z_reschedule+0x34>
	ret = arch_swap(key);
    6194:	4628      	mov	r0, r5
    6196:	f7fb fd23 	bl	1be0 <arch_swap>
		z_swap(lock, key);
    619a:	e017      	b.n	61cc <z_reschedule+0x64>
    619c:	4e15      	ldr	r6, [pc, #84]	; (61f4 <z_reschedule+0x8c>)
    619e:	23c3      	movs	r3, #195	; 0xc3
    61a0:	4632      	mov	r2, r6
    61a2:	4915      	ldr	r1, [pc, #84]	; (61f8 <z_reschedule+0x90>)
    61a4:	4815      	ldr	r0, [pc, #84]	; (61fc <z_reschedule+0x94>)
    61a6:	f001 fefd 	bl	7fa4 <printk>
    61aa:	4621      	mov	r1, r4
    61ac:	4814      	ldr	r0, [pc, #80]	; (6200 <z_reschedule+0x98>)
    61ae:	f001 fef9 	bl	7fa4 <printk>
    61b2:	21c3      	movs	r1, #195	; 0xc3
    61b4:	4630      	mov	r0, r6
    61b6:	f002 f84e 	bl	8256 <assert_post_action>
    61ba:	e7eb      	b.n	6194 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61bc:	4620      	mov	r0, r4
    61be:	f7ff fa6d 	bl	569c <z_spin_unlock_valid>
    61c2:	b120      	cbz	r0, 61ce <z_reschedule+0x66>
    61c4:	f385 8811 	msr	BASEPRI, r5
    61c8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    61cc:	bd70      	pop	{r4, r5, r6, pc}
    61ce:	4e09      	ldr	r6, [pc, #36]	; (61f4 <z_reschedule+0x8c>)
    61d0:	23ac      	movs	r3, #172	; 0xac
    61d2:	4632      	mov	r2, r6
    61d4:	4908      	ldr	r1, [pc, #32]	; (61f8 <z_reschedule+0x90>)
    61d6:	4809      	ldr	r0, [pc, #36]	; (61fc <z_reschedule+0x94>)
    61d8:	f001 fee4 	bl	7fa4 <printk>
    61dc:	4621      	mov	r1, r4
    61de:	4808      	ldr	r0, [pc, #32]	; (6200 <z_reschedule+0x98>)
    61e0:	f001 fee0 	bl	7fa4 <printk>
    61e4:	21ac      	movs	r1, #172	; 0xac
    61e6:	4630      	mov	r0, r6
    61e8:	f002 f835 	bl	8256 <assert_post_action>
    61ec:	e7ea      	b.n	61c4 <z_reschedule+0x5c>
    61ee:	bf00      	nop
    61f0:	20000fa8 	.word	0x20000fa8
    61f4:	00009190 	.word	0x00009190
    61f8:	000091b8 	.word	0x000091b8
    61fc:	00009078 	.word	0x00009078
    6200:	000091d0 	.word	0x000091d0

00006204 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    6204:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    6206:	2400      	movs	r4, #0
	__asm__ volatile(
    6208:	f04f 0320 	mov.w	r3, #32
    620c:	f3ef 8511 	mrs	r5, BASEPRI
    6210:	f383 8812 	msr	BASEPRI_MAX, r3
    6214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6218:	482f      	ldr	r0, [pc, #188]	; (62d8 <k_sched_lock+0xd4>)
    621a:	f7ff fa2f 	bl	567c <z_spin_lock_valid>
    621e:	b118      	cbz	r0, 6228 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    6220:	482d      	ldr	r0, [pc, #180]	; (62d8 <k_sched_lock+0xd4>)
    6222:	f7ff fa4b 	bl	56bc <z_spin_lock_set_owner>
	return k;
    6226:	e041      	b.n	62ac <k_sched_lock+0xa8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6228:	4e2c      	ldr	r6, [pc, #176]	; (62dc <k_sched_lock+0xd8>)
    622a:	2381      	movs	r3, #129	; 0x81
    622c:	4632      	mov	r2, r6
    622e:	492c      	ldr	r1, [pc, #176]	; (62e0 <k_sched_lock+0xdc>)
    6230:	482c      	ldr	r0, [pc, #176]	; (62e4 <k_sched_lock+0xe0>)
    6232:	f001 feb7 	bl	7fa4 <printk>
    6236:	4928      	ldr	r1, [pc, #160]	; (62d8 <k_sched_lock+0xd4>)
    6238:	482b      	ldr	r0, [pc, #172]	; (62e8 <k_sched_lock+0xe4>)
    623a:	f001 feb3 	bl	7fa4 <printk>
    623e:	2181      	movs	r1, #129	; 0x81
    6240:	4630      	mov	r0, r6
    6242:	f002 f808 	bl	8256 <assert_post_action>
    6246:	e7eb      	b.n	6220 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
    6248:	4c28      	ldr	r4, [pc, #160]	; (62ec <k_sched_lock+0xe8>)
    624a:	23fd      	movs	r3, #253	; 0xfd
    624c:	4622      	mov	r2, r4
    624e:	4928      	ldr	r1, [pc, #160]	; (62f0 <k_sched_lock+0xec>)
    6250:	4824      	ldr	r0, [pc, #144]	; (62e4 <k_sched_lock+0xe0>)
    6252:	f001 fea7 	bl	7fa4 <printk>
    6256:	4827      	ldr	r0, [pc, #156]	; (62f4 <k_sched_lock+0xf0>)
    6258:	f001 fea4 	bl	7fa4 <printk>
    625c:	21fd      	movs	r1, #253	; 0xfd
    625e:	4620      	mov	r0, r4
    6260:	f001 fff9 	bl	8256 <assert_post_action>
    6264:	e027      	b.n	62b6 <k_sched_lock+0xb2>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6266:	4c21      	ldr	r4, [pc, #132]	; (62ec <k_sched_lock+0xe8>)
    6268:	23fe      	movs	r3, #254	; 0xfe
    626a:	4622      	mov	r2, r4
    626c:	4922      	ldr	r1, [pc, #136]	; (62f8 <k_sched_lock+0xf4>)
    626e:	481d      	ldr	r0, [pc, #116]	; (62e4 <k_sched_lock+0xe0>)
    6270:	f001 fe98 	bl	7fa4 <printk>
    6274:	481f      	ldr	r0, [pc, #124]	; (62f4 <k_sched_lock+0xf0>)
    6276:	f001 fe95 	bl	7fa4 <printk>
    627a:	21fe      	movs	r1, #254	; 0xfe
    627c:	4620      	mov	r0, r4
    627e:	f001 ffea 	bl	8256 <assert_post_action>
    6282:	e01d      	b.n	62c0 <k_sched_lock+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6284:	4c15      	ldr	r4, [pc, #84]	; (62dc <k_sched_lock+0xd8>)
    6286:	23ac      	movs	r3, #172	; 0xac
    6288:	4622      	mov	r2, r4
    628a:	491c      	ldr	r1, [pc, #112]	; (62fc <k_sched_lock+0xf8>)
    628c:	4815      	ldr	r0, [pc, #84]	; (62e4 <k_sched_lock+0xe0>)
    628e:	f001 fe89 	bl	7fa4 <printk>
    6292:	4911      	ldr	r1, [pc, #68]	; (62d8 <k_sched_lock+0xd4>)
    6294:	481a      	ldr	r0, [pc, #104]	; (6300 <k_sched_lock+0xfc>)
    6296:	f001 fe85 	bl	7fa4 <printk>
    629a:	21ac      	movs	r1, #172	; 0xac
    629c:	4620      	mov	r0, r4
    629e:	f001 ffda 	bl	8256 <assert_post_action>
	__asm__ volatile(
    62a2:	f385 8811 	msr	BASEPRI, r5
    62a6:	f3bf 8f6f 	isb	sy
    62aa:	2401      	movs	r4, #1
    62ac:	b99c      	cbnz	r4, 62d6 <k_sched_lock+0xd2>
    62ae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    62b2:	2b00      	cmp	r3, #0
    62b4:	d1c8      	bne.n	6248 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    62b6:	4b13      	ldr	r3, [pc, #76]	; (6304 <k_sched_lock+0x100>)
    62b8:	689b      	ldr	r3, [r3, #8]
    62ba:	7bdb      	ldrb	r3, [r3, #15]
    62bc:	2b01      	cmp	r3, #1
    62be:	d0d2      	beq.n	6266 <k_sched_lock+0x62>
	--_current->base.sched_locked;
    62c0:	4b10      	ldr	r3, [pc, #64]	; (6304 <k_sched_lock+0x100>)
    62c2:	689a      	ldr	r2, [r3, #8]
    62c4:	7bd3      	ldrb	r3, [r2, #15]
    62c6:	3b01      	subs	r3, #1
    62c8:	73d3      	strb	r3, [r2, #15]
    62ca:	4803      	ldr	r0, [pc, #12]	; (62d8 <k_sched_lock+0xd4>)
    62cc:	f7ff f9e6 	bl	569c <z_spin_unlock_valid>
    62d0:	2800      	cmp	r0, #0
    62d2:	d1e6      	bne.n	62a2 <k_sched_lock+0x9e>
    62d4:	e7d6      	b.n	6284 <k_sched_lock+0x80>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    62d6:	bd70      	pop	{r4, r5, r6, pc}
    62d8:	20000fe4 	.word	0x20000fe4
    62dc:	00009190 	.word	0x00009190
    62e0:	000091e8 	.word	0x000091e8
    62e4:	00009078 	.word	0x00009078
    62e8:	00009200 	.word	0x00009200
    62ec:	00009d04 	.word	0x00009d04
    62f0:	00009cb0 	.word	0x00009cb0
    62f4:	00009d30 	.word	0x00009d30
    62f8:	00009d34 	.word	0x00009d34
    62fc:	000091b8 	.word	0x000091b8
    6300:	000091d0 	.word	0x000091d0
    6304:	20000fa8 	.word	0x20000fa8

00006308 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    6308:	b538      	push	{r3, r4, r5, lr}
    630a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    630c:	4b0c      	ldr	r3, [pc, #48]	; (6340 <z_priq_dumb_remove+0x38>)
    630e:	4299      	cmp	r1, r3
    6310:	d007      	beq.n	6322 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6312:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6314:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    6316:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6318:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    631a:	2300      	movs	r3, #0
    631c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    631e:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6320:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6322:	4d08      	ldr	r5, [pc, #32]	; (6344 <z_priq_dumb_remove+0x3c>)
    6324:	f240 33e7 	movw	r3, #999	; 0x3e7
    6328:	462a      	mov	r2, r5
    632a:	4907      	ldr	r1, [pc, #28]	; (6348 <z_priq_dumb_remove+0x40>)
    632c:	4807      	ldr	r0, [pc, #28]	; (634c <z_priq_dumb_remove+0x44>)
    632e:	f001 fe39 	bl	7fa4 <printk>
    6332:	f240 31e7 	movw	r1, #999	; 0x3e7
    6336:	4628      	mov	r0, r5
    6338:	f001 ff8d 	bl	8256 <assert_post_action>
    633c:	e7e9      	b.n	6312 <z_priq_dumb_remove+0xa>
    633e:	bf00      	nop
    6340:	20000398 	.word	0x20000398
    6344:	00009dd8 	.word	0x00009dd8
    6348:	00009e14 	.word	0x00009e14
    634c:	00009078 	.word	0x00009078

00006350 <update_cache>:
{
    6350:	b538      	push	{r3, r4, r5, lr}
    6352:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    6354:	4818      	ldr	r0, [pc, #96]	; (63b8 <update_cache+0x68>)
    6356:	f002 fc9e 	bl	8c96 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    635a:	4605      	mov	r5, r0
    635c:	b188      	cbz	r0, 6382 <update_cache+0x32>
	if (preempt_ok != 0) {
    635e:	bb14      	cbnz	r4, 63a6 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    6360:	4b16      	ldr	r3, [pc, #88]	; (63bc <update_cache+0x6c>)
    6362:	689b      	ldr	r3, [r3, #8]
    6364:	b183      	cbz	r3, 6388 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    6366:	4b15      	ldr	r3, [pc, #84]	; (63bc <update_cache+0x6c>)
    6368:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    636a:	7b5a      	ldrb	r2, [r3, #13]
    636c:	f012 0f1f 	tst.w	r2, #31
    6370:	d119      	bne.n	63a6 <update_cache+0x56>
	return node->next != NULL;
    6372:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6374:	b9ba      	cbnz	r2, 63a6 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6376:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    6378:	2a7f      	cmp	r2, #127	; 0x7f
    637a:	d914      	bls.n	63a6 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    637c:	4a0f      	ldr	r2, [pc, #60]	; (63bc <update_cache+0x6c>)
    637e:	61d3      	str	r3, [r2, #28]
    6380:	e019      	b.n	63b6 <update_cache+0x66>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6382:	4b0e      	ldr	r3, [pc, #56]	; (63bc <update_cache+0x6c>)
    6384:	68dd      	ldr	r5, [r3, #12]
    6386:	e7ea      	b.n	635e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    6388:	4c0d      	ldr	r4, [pc, #52]	; (63c0 <update_cache+0x70>)
    638a:	2389      	movs	r3, #137	; 0x89
    638c:	4622      	mov	r2, r4
    638e:	490d      	ldr	r1, [pc, #52]	; (63c4 <update_cache+0x74>)
    6390:	480d      	ldr	r0, [pc, #52]	; (63c8 <update_cache+0x78>)
    6392:	f001 fe07 	bl	7fa4 <printk>
    6396:	480d      	ldr	r0, [pc, #52]	; (63cc <update_cache+0x7c>)
    6398:	f001 fe04 	bl	7fa4 <printk>
    639c:	2189      	movs	r1, #137	; 0x89
    639e:	4620      	mov	r0, r4
    63a0:	f001 ff59 	bl	8256 <assert_post_action>
    63a4:	e7df      	b.n	6366 <update_cache+0x16>
		if (thread != _current) {
    63a6:	4b05      	ldr	r3, [pc, #20]	; (63bc <update_cache+0x6c>)
    63a8:	689b      	ldr	r3, [r3, #8]
    63aa:	42ab      	cmp	r3, r5
    63ac:	d001      	beq.n	63b2 <update_cache+0x62>
			z_reset_time_slice();
    63ae:	f7ff fe51 	bl	6054 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    63b2:	4b02      	ldr	r3, [pc, #8]	; (63bc <update_cache+0x6c>)
    63b4:	61dd      	str	r5, [r3, #28]
}
    63b6:	bd38      	pop	{r3, r4, r5, pc}
    63b8:	20000fc8 	.word	0x20000fc8
    63bc:	20000fa8 	.word	0x20000fa8
    63c0:	00009dd8 	.word	0x00009dd8
    63c4:	00009e38 	.word	0x00009e38
    63c8:	00009078 	.word	0x00009078
    63cc:	00009d30 	.word	0x00009d30

000063d0 <move_thread_to_end_of_prio_q>:
{
    63d0:	b538      	push	{r3, r4, r5, lr}
    63d2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    63d4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    63d6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    63da:	2b00      	cmp	r3, #0
    63dc:	db2b      	blt.n	6436 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    63de:	7b6b      	ldrb	r3, [r5, #13]
    63e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    63e4:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    63e6:	4b22      	ldr	r3, [pc, #136]	; (6470 <move_thread_to_end_of_prio_q+0xa0>)
    63e8:	429d      	cmp	r5, r3
    63ea:	d02c      	beq.n	6446 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    63ec:	4b21      	ldr	r3, [pc, #132]	; (6474 <move_thread_to_end_of_prio_q+0xa4>)
    63ee:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    63f2:	429c      	cmp	r4, r3
    63f4:	d039      	beq.n	646a <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    63f6:	b16c      	cbz	r4, 6414 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    63f8:	4621      	mov	r1, r4
    63fa:	4628      	mov	r0, r5
    63fc:	f002 fc2c 	bl	8c58 <z_sched_prio_cmp>
    6400:	2800      	cmp	r0, #0
    6402:	dc2c      	bgt.n	645e <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6404:	b134      	cbz	r4, 6414 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    6406:	4b1b      	ldr	r3, [pc, #108]	; (6474 <move_thread_to_end_of_prio_q+0xa4>)
    6408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    640a:	429c      	cmp	r4, r3
    640c:	d002      	beq.n	6414 <move_thread_to_end_of_prio_q+0x44>
    640e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6410:	2c00      	cmp	r4, #0
    6412:	d1f0      	bne.n	63f6 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    6414:	4b17      	ldr	r3, [pc, #92]	; (6474 <move_thread_to_end_of_prio_q+0xa4>)
    6416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6418:	f103 0120 	add.w	r1, r3, #32
    641c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    641e:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6420:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6422:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    6424:	4b13      	ldr	r3, [pc, #76]	; (6474 <move_thread_to_end_of_prio_q+0xa4>)
    6426:	6898      	ldr	r0, [r3, #8]
    6428:	42a8      	cmp	r0, r5
    642a:	bf14      	ite	ne
    642c:	2000      	movne	r0, #0
    642e:	2001      	moveq	r0, #1
    6430:	f7ff ff8e 	bl	6350 <update_cache>
}
    6434:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6436:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    643a:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    643c:	4601      	mov	r1, r0
    643e:	480e      	ldr	r0, [pc, #56]	; (6478 <move_thread_to_end_of_prio_q+0xa8>)
    6440:	f7ff ff62 	bl	6308 <z_priq_dumb_remove>
}
    6444:	e7cb      	b.n	63de <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6446:	4c0d      	ldr	r4, [pc, #52]	; (647c <move_thread_to_end_of_prio_q+0xac>)
    6448:	23ba      	movs	r3, #186	; 0xba
    644a:	4622      	mov	r2, r4
    644c:	490c      	ldr	r1, [pc, #48]	; (6480 <move_thread_to_end_of_prio_q+0xb0>)
    644e:	480d      	ldr	r0, [pc, #52]	; (6484 <move_thread_to_end_of_prio_q+0xb4>)
    6450:	f001 fda8 	bl	7fa4 <printk>
    6454:	21ba      	movs	r1, #186	; 0xba
    6456:	4620      	mov	r0, r4
    6458:	f001 fefd 	bl	8256 <assert_post_action>
    645c:	e7c6      	b.n	63ec <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    645e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6460:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6462:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6464:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6466:	6065      	str	r5, [r4, #4]
}
    6468:	e7dc      	b.n	6424 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    646a:	2400      	movs	r4, #0
    646c:	e7c3      	b.n	63f6 <move_thread_to_end_of_prio_q+0x26>
    646e:	bf00      	nop
    6470:	20000398 	.word	0x20000398
    6474:	20000fa8 	.word	0x20000fa8
    6478:	20000fc8 	.word	0x20000fc8
    647c:	00009dd8 	.word	0x00009dd8
    6480:	00009e14 	.word	0x00009e14
    6484:	00009078 	.word	0x00009078

00006488 <z_time_slice>:
{
    6488:	b570      	push	{r4, r5, r6, lr}
    648a:	4604      	mov	r4, r0
	__asm__ volatile(
    648c:	f04f 0320 	mov.w	r3, #32
    6490:	f3ef 8511 	mrs	r5, BASEPRI
    6494:	f383 8812 	msr	BASEPRI_MAX, r3
    6498:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    649c:	483c      	ldr	r0, [pc, #240]	; (6590 <z_time_slice+0x108>)
    649e:	f7ff f8ed 	bl	567c <z_spin_lock_valid>
    64a2:	b338      	cbz	r0, 64f4 <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
    64a4:	483a      	ldr	r0, [pc, #232]	; (6590 <z_time_slice+0x108>)
    64a6:	f7ff f909 	bl	56bc <z_spin_lock_set_owner>
	if (pending_current == _current) {
    64aa:	4b3a      	ldr	r3, [pc, #232]	; (6594 <z_time_slice+0x10c>)
    64ac:	689b      	ldr	r3, [r3, #8]
    64ae:	4a3a      	ldr	r2, [pc, #232]	; (6598 <z_time_slice+0x110>)
    64b0:	6812      	ldr	r2, [r2, #0]
    64b2:	4293      	cmp	r3, r2
    64b4:	d02e      	beq.n	6514 <z_time_slice+0x8c>
	pending_current = NULL;
    64b6:	4a38      	ldr	r2, [pc, #224]	; (6598 <z_time_slice+0x110>)
    64b8:	2100      	movs	r1, #0
    64ba:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    64bc:	4a37      	ldr	r2, [pc, #220]	; (659c <z_time_slice+0x114>)
    64be:	6812      	ldr	r2, [r2, #0]
    64c0:	2a00      	cmp	r2, #0
    64c2:	d048      	beq.n	6556 <z_time_slice+0xce>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    64c4:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    64c6:	2a7f      	cmp	r2, #127	; 0x7f
    64c8:	d845      	bhi.n	6556 <z_time_slice+0xce>
	uint8_t state = thread->base.thread_state;
    64ca:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    64cc:	f012 0f1f 	tst.w	r2, #31
    64d0:	d141      	bne.n	6556 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    64d2:	f993 100e 	ldrsb.w	r1, [r3, #14]
    64d6:	4a32      	ldr	r2, [pc, #200]	; (65a0 <z_time_slice+0x118>)
    64d8:	6812      	ldr	r2, [r2, #0]
    64da:	4291      	cmp	r1, r2
    64dc:	db3b      	blt.n	6556 <z_time_slice+0xce>
		&& !z_is_idle_thread_object(thread);
    64de:	4a31      	ldr	r2, [pc, #196]	; (65a4 <z_time_slice+0x11c>)
    64e0:	4293      	cmp	r3, r2
    64e2:	d038      	beq.n	6556 <z_time_slice+0xce>
		if (ticks >= _current_cpu->slice_ticks) {
    64e4:	4a2b      	ldr	r2, [pc, #172]	; (6594 <z_time_slice+0x10c>)
    64e6:	6910      	ldr	r0, [r2, #16]
    64e8:	42a0      	cmp	r0, r4
    64ea:	dd2e      	ble.n	654a <z_time_slice+0xc2>
			_current_cpu->slice_ticks -= ticks;
    64ec:	1b00      	subs	r0, r0, r4
    64ee:	4b29      	ldr	r3, [pc, #164]	; (6594 <z_time_slice+0x10c>)
    64f0:	6118      	str	r0, [r3, #16]
    64f2:	e033      	b.n	655c <z_time_slice+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64f4:	4e2c      	ldr	r6, [pc, #176]	; (65a8 <z_time_slice+0x120>)
    64f6:	2381      	movs	r3, #129	; 0x81
    64f8:	4632      	mov	r2, r6
    64fa:	492c      	ldr	r1, [pc, #176]	; (65ac <z_time_slice+0x124>)
    64fc:	482c      	ldr	r0, [pc, #176]	; (65b0 <z_time_slice+0x128>)
    64fe:	f001 fd51 	bl	7fa4 <printk>
    6502:	4923      	ldr	r1, [pc, #140]	; (6590 <z_time_slice+0x108>)
    6504:	482b      	ldr	r0, [pc, #172]	; (65b4 <z_time_slice+0x12c>)
    6506:	f001 fd4d 	bl	7fa4 <printk>
    650a:	2181      	movs	r1, #129	; 0x81
    650c:	4630      	mov	r0, r6
    650e:	f001 fea2 	bl	8256 <assert_post_action>
    6512:	e7c7      	b.n	64a4 <z_time_slice+0x1c>
		z_reset_time_slice();
    6514:	f7ff fd9e 	bl	6054 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6518:	481d      	ldr	r0, [pc, #116]	; (6590 <z_time_slice+0x108>)
    651a:	f7ff f8bf 	bl	569c <z_spin_unlock_valid>
    651e:	b120      	cbz	r0, 652a <z_time_slice+0xa2>
	__asm__ volatile(
    6520:	f385 8811 	msr	BASEPRI, r5
    6524:	f3bf 8f6f 	isb	sy
		return;
    6528:	e020      	b.n	656c <z_time_slice+0xe4>
    652a:	4c1f      	ldr	r4, [pc, #124]	; (65a8 <z_time_slice+0x120>)
    652c:	23ac      	movs	r3, #172	; 0xac
    652e:	4622      	mov	r2, r4
    6530:	4921      	ldr	r1, [pc, #132]	; (65b8 <z_time_slice+0x130>)
    6532:	481f      	ldr	r0, [pc, #124]	; (65b0 <z_time_slice+0x128>)
    6534:	f001 fd36 	bl	7fa4 <printk>
    6538:	4915      	ldr	r1, [pc, #84]	; (6590 <z_time_slice+0x108>)
    653a:	4820      	ldr	r0, [pc, #128]	; (65bc <z_time_slice+0x134>)
    653c:	f001 fd32 	bl	7fa4 <printk>
    6540:	21ac      	movs	r1, #172	; 0xac
    6542:	4620      	mov	r0, r4
    6544:	f001 fe87 	bl	8256 <assert_post_action>
    6548:	e7ea      	b.n	6520 <z_time_slice+0x98>
			move_thread_to_end_of_prio_q(_current);
    654a:	4618      	mov	r0, r3
    654c:	f7ff ff40 	bl	63d0 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    6550:	f7ff fd80 	bl	6054 <z_reset_time_slice>
    6554:	e002      	b.n	655c <z_time_slice+0xd4>
		_current_cpu->slice_ticks = 0;
    6556:	4b0f      	ldr	r3, [pc, #60]	; (6594 <z_time_slice+0x10c>)
    6558:	2200      	movs	r2, #0
    655a:	611a      	str	r2, [r3, #16]
    655c:	480c      	ldr	r0, [pc, #48]	; (6590 <z_time_slice+0x108>)
    655e:	f7ff f89d 	bl	569c <z_spin_unlock_valid>
    6562:	b120      	cbz	r0, 656e <z_time_slice+0xe6>
    6564:	f385 8811 	msr	BASEPRI, r5
    6568:	f3bf 8f6f 	isb	sy
}
    656c:	bd70      	pop	{r4, r5, r6, pc}
    656e:	4c0e      	ldr	r4, [pc, #56]	; (65a8 <z_time_slice+0x120>)
    6570:	23ac      	movs	r3, #172	; 0xac
    6572:	4622      	mov	r2, r4
    6574:	4910      	ldr	r1, [pc, #64]	; (65b8 <z_time_slice+0x130>)
    6576:	480e      	ldr	r0, [pc, #56]	; (65b0 <z_time_slice+0x128>)
    6578:	f001 fd14 	bl	7fa4 <printk>
    657c:	4904      	ldr	r1, [pc, #16]	; (6590 <z_time_slice+0x108>)
    657e:	480f      	ldr	r0, [pc, #60]	; (65bc <z_time_slice+0x134>)
    6580:	f001 fd10 	bl	7fa4 <printk>
    6584:	21ac      	movs	r1, #172	; 0xac
    6586:	4620      	mov	r0, r4
    6588:	f001 fe65 	bl	8256 <assert_post_action>
    658c:	e7ea      	b.n	6564 <z_time_slice+0xdc>
    658e:	bf00      	nop
    6590:	20000fe4 	.word	0x20000fe4
    6594:	20000fa8 	.word	0x20000fa8
    6598:	20000fe0 	.word	0x20000fe0
    659c:	20000fec 	.word	0x20000fec
    65a0:	20000fe8 	.word	0x20000fe8
    65a4:	20000398 	.word	0x20000398
    65a8:	00009190 	.word	0x00009190
    65ac:	000091e8 	.word	0x000091e8
    65b0:	00009078 	.word	0x00009078
    65b4:	00009200 	.word	0x00009200
    65b8:	000091b8 	.word	0x000091b8
    65bc:	000091d0 	.word	0x000091d0

000065c0 <ready_thread>:
{
    65c0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    65c2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    65c4:	f990 200d 	ldrsb.w	r2, [r0, #13]
    65c8:	2a00      	cmp	r2, #0
    65ca:	db30      	blt.n	662e <ready_thread+0x6e>
    65cc:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    65ce:	f013 0f1f 	tst.w	r3, #31
    65d2:	d105      	bne.n	65e0 <ready_thread+0x20>
	return node->next != NULL;
    65d4:	6982      	ldr	r2, [r0, #24]
    65d6:	b10a      	cbz	r2, 65dc <ready_thread+0x1c>
    65d8:	2200      	movs	r2, #0
    65da:	e002      	b.n	65e2 <ready_thread+0x22>
    65dc:	2201      	movs	r2, #1
    65de:	e000      	b.n	65e2 <ready_thread+0x22>
    65e0:	2200      	movs	r2, #0
    65e2:	b322      	cbz	r2, 662e <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    65e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    65e8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    65ea:	4b1b      	ldr	r3, [pc, #108]	; (6658 <ready_thread+0x98>)
    65ec:	429c      	cmp	r4, r3
    65ee:	d01f      	beq.n	6630 <ready_thread+0x70>
	return list->head == list;
    65f0:	4b1a      	ldr	r3, [pc, #104]	; (665c <ready_thread+0x9c>)
    65f2:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65f6:	429d      	cmp	r5, r3
    65f8:	d02c      	beq.n	6654 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    65fa:	b16d      	cbz	r5, 6618 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    65fc:	4629      	mov	r1, r5
    65fe:	4620      	mov	r0, r4
    6600:	f002 fb2a 	bl	8c58 <z_sched_prio_cmp>
    6604:	2800      	cmp	r0, #0
    6606:	dc1f      	bgt.n	6648 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6608:	b135      	cbz	r5, 6618 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    660a:	4b14      	ldr	r3, [pc, #80]	; (665c <ready_thread+0x9c>)
    660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    660e:	429d      	cmp	r5, r3
    6610:	d002      	beq.n	6618 <ready_thread+0x58>
    6612:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6614:	2d00      	cmp	r5, #0
    6616:	d1f0      	bne.n	65fa <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    6618:	4b10      	ldr	r3, [pc, #64]	; (665c <ready_thread+0x9c>)
    661a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    661c:	f103 0120 	add.w	r1, r3, #32
    6620:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6622:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6624:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6626:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    6628:	2000      	movs	r0, #0
    662a:	f7ff fe91 	bl	6350 <update_cache>
}
    662e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6630:	4d0b      	ldr	r5, [pc, #44]	; (6660 <ready_thread+0xa0>)
    6632:	23ba      	movs	r3, #186	; 0xba
    6634:	462a      	mov	r2, r5
    6636:	490b      	ldr	r1, [pc, #44]	; (6664 <ready_thread+0xa4>)
    6638:	480b      	ldr	r0, [pc, #44]	; (6668 <ready_thread+0xa8>)
    663a:	f001 fcb3 	bl	7fa4 <printk>
    663e:	21ba      	movs	r1, #186	; 0xba
    6640:	4628      	mov	r0, r5
    6642:	f001 fe08 	bl	8256 <assert_post_action>
    6646:	e7d3      	b.n	65f0 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    6648:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    664a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    664c:	6025      	str	r5, [r4, #0]
	prev->next = node;
    664e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6650:	606c      	str	r4, [r5, #4]
}
    6652:	e7e9      	b.n	6628 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6654:	2500      	movs	r5, #0
    6656:	e7d0      	b.n	65fa <ready_thread+0x3a>
    6658:	20000398 	.word	0x20000398
    665c:	20000fa8 	.word	0x20000fa8
    6660:	00009dd8 	.word	0x00009dd8
    6664:	00009e14 	.word	0x00009e14
    6668:	00009078 	.word	0x00009078

0000666c <z_ready_thread>:
{
    666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    666e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    6670:	2400      	movs	r4, #0
	__asm__ volatile(
    6672:	f04f 0320 	mov.w	r3, #32
    6676:	f3ef 8611 	mrs	r6, BASEPRI
    667a:	f383 8812 	msr	BASEPRI_MAX, r3
    667e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6682:	481e      	ldr	r0, [pc, #120]	; (66fc <z_ready_thread+0x90>)
    6684:	f7fe fffa 	bl	567c <z_spin_lock_valid>
    6688:	b118      	cbz	r0, 6692 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    668a:	481c      	ldr	r0, [pc, #112]	; (66fc <z_ready_thread+0x90>)
    668c:	f7ff f816 	bl	56bc <z_spin_lock_set_owner>
	return k;
    6690:	e027      	b.n	66e2 <z_ready_thread+0x76>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6692:	4f1b      	ldr	r7, [pc, #108]	; (6700 <z_ready_thread+0x94>)
    6694:	2381      	movs	r3, #129	; 0x81
    6696:	463a      	mov	r2, r7
    6698:	491a      	ldr	r1, [pc, #104]	; (6704 <z_ready_thread+0x98>)
    669a:	481b      	ldr	r0, [pc, #108]	; (6708 <z_ready_thread+0x9c>)
    669c:	f001 fc82 	bl	7fa4 <printk>
    66a0:	4916      	ldr	r1, [pc, #88]	; (66fc <z_ready_thread+0x90>)
    66a2:	481a      	ldr	r0, [pc, #104]	; (670c <z_ready_thread+0xa0>)
    66a4:	f001 fc7e 	bl	7fa4 <printk>
    66a8:	2181      	movs	r1, #129	; 0x81
    66aa:	4638      	mov	r0, r7
    66ac:	f001 fdd3 	bl	8256 <assert_post_action>
    66b0:	e7eb      	b.n	668a <z_ready_thread+0x1e>
			ready_thread(thread);
    66b2:	4628      	mov	r0, r5
    66b4:	f7ff ff84 	bl	65c0 <ready_thread>
    66b8:	e019      	b.n	66ee <z_ready_thread+0x82>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66ba:	4c11      	ldr	r4, [pc, #68]	; (6700 <z_ready_thread+0x94>)
    66bc:	23ac      	movs	r3, #172	; 0xac
    66be:	4622      	mov	r2, r4
    66c0:	4913      	ldr	r1, [pc, #76]	; (6710 <z_ready_thread+0xa4>)
    66c2:	4811      	ldr	r0, [pc, #68]	; (6708 <z_ready_thread+0x9c>)
    66c4:	f001 fc6e 	bl	7fa4 <printk>
    66c8:	490c      	ldr	r1, [pc, #48]	; (66fc <z_ready_thread+0x90>)
    66ca:	4812      	ldr	r0, [pc, #72]	; (6714 <z_ready_thread+0xa8>)
    66cc:	f001 fc6a 	bl	7fa4 <printk>
    66d0:	21ac      	movs	r1, #172	; 0xac
    66d2:	4620      	mov	r0, r4
    66d4:	f001 fdbf 	bl	8256 <assert_post_action>
	__asm__ volatile(
    66d8:	f386 8811 	msr	BASEPRI, r6
    66dc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    66e0:	2401      	movs	r4, #1
    66e2:	b954      	cbnz	r4, 66fa <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    66e4:	4628      	mov	r0, r5
    66e6:	f002 fab5 	bl	8c54 <thread_active_elsewhere>
    66ea:	2800      	cmp	r0, #0
    66ec:	d0e1      	beq.n	66b2 <z_ready_thread+0x46>
    66ee:	4803      	ldr	r0, [pc, #12]	; (66fc <z_ready_thread+0x90>)
    66f0:	f7fe ffd4 	bl	569c <z_spin_unlock_valid>
    66f4:	2800      	cmp	r0, #0
    66f6:	d1ef      	bne.n	66d8 <z_ready_thread+0x6c>
    66f8:	e7df      	b.n	66ba <z_ready_thread+0x4e>
}
    66fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66fc:	20000fe4 	.word	0x20000fe4
    6700:	00009190 	.word	0x00009190
    6704:	000091e8 	.word	0x000091e8
    6708:	00009078 	.word	0x00009078
    670c:	00009200 	.word	0x00009200
    6710:	000091b8 	.word	0x000091b8
    6714:	000091d0 	.word	0x000091d0

00006718 <z_sched_start>:
{
    6718:	b570      	push	{r4, r5, r6, lr}
    671a:	4604      	mov	r4, r0
	__asm__ volatile(
    671c:	f04f 0320 	mov.w	r3, #32
    6720:	f3ef 8511 	mrs	r5, BASEPRI
    6724:	f383 8812 	msr	BASEPRI_MAX, r3
    6728:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    672c:	481f      	ldr	r0, [pc, #124]	; (67ac <z_sched_start+0x94>)
    672e:	f7fe ffa5 	bl	567c <z_spin_lock_valid>
    6732:	b188      	cbz	r0, 6758 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    6734:	481d      	ldr	r0, [pc, #116]	; (67ac <z_sched_start+0x94>)
    6736:	f7fe ffc1 	bl	56bc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    673a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    673c:	f013 0f04 	tst.w	r3, #4
    6740:	d01a      	beq.n	6778 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6742:	f023 0304 	bic.w	r3, r3, #4
    6746:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    6748:	4620      	mov	r0, r4
    674a:	f7ff ff39 	bl	65c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    674e:	4629      	mov	r1, r5
    6750:	4816      	ldr	r0, [pc, #88]	; (67ac <z_sched_start+0x94>)
    6752:	f7ff fd09 	bl	6168 <z_reschedule>
}
    6756:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6758:	4e15      	ldr	r6, [pc, #84]	; (67b0 <z_sched_start+0x98>)
    675a:	2381      	movs	r3, #129	; 0x81
    675c:	4632      	mov	r2, r6
    675e:	4915      	ldr	r1, [pc, #84]	; (67b4 <z_sched_start+0x9c>)
    6760:	4815      	ldr	r0, [pc, #84]	; (67b8 <z_sched_start+0xa0>)
    6762:	f001 fc1f 	bl	7fa4 <printk>
    6766:	4911      	ldr	r1, [pc, #68]	; (67ac <z_sched_start+0x94>)
    6768:	4814      	ldr	r0, [pc, #80]	; (67bc <z_sched_start+0xa4>)
    676a:	f001 fc1b 	bl	7fa4 <printk>
    676e:	2181      	movs	r1, #129	; 0x81
    6770:	4630      	mov	r0, r6
    6772:	f001 fd70 	bl	8256 <assert_post_action>
    6776:	e7dd      	b.n	6734 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6778:	480c      	ldr	r0, [pc, #48]	; (67ac <z_sched_start+0x94>)
    677a:	f7fe ff8f 	bl	569c <z_spin_unlock_valid>
    677e:	b120      	cbz	r0, 678a <z_sched_start+0x72>
	__asm__ volatile(
    6780:	f385 8811 	msr	BASEPRI, r5
    6784:	f3bf 8f6f 	isb	sy
		return;
    6788:	e7e5      	b.n	6756 <z_sched_start+0x3e>
    678a:	4c09      	ldr	r4, [pc, #36]	; (67b0 <z_sched_start+0x98>)
    678c:	23ac      	movs	r3, #172	; 0xac
    678e:	4622      	mov	r2, r4
    6790:	490b      	ldr	r1, [pc, #44]	; (67c0 <z_sched_start+0xa8>)
    6792:	4809      	ldr	r0, [pc, #36]	; (67b8 <z_sched_start+0xa0>)
    6794:	f001 fc06 	bl	7fa4 <printk>
    6798:	4904      	ldr	r1, [pc, #16]	; (67ac <z_sched_start+0x94>)
    679a:	480a      	ldr	r0, [pc, #40]	; (67c4 <z_sched_start+0xac>)
    679c:	f001 fc02 	bl	7fa4 <printk>
    67a0:	21ac      	movs	r1, #172	; 0xac
    67a2:	4620      	mov	r0, r4
    67a4:	f001 fd57 	bl	8256 <assert_post_action>
    67a8:	e7ea      	b.n	6780 <z_sched_start+0x68>
    67aa:	bf00      	nop
    67ac:	20000fe4 	.word	0x20000fe4
    67b0:	00009190 	.word	0x00009190
    67b4:	000091e8 	.word	0x000091e8
    67b8:	00009078 	.word	0x00009078
    67bc:	00009200 	.word	0x00009200
    67c0:	000091b8 	.word	0x000091b8
    67c4:	000091d0 	.word	0x000091d0

000067c8 <z_thread_timeout>:
{
    67c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67cc:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    67ce:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    67d2:	2500      	movs	r5, #0
	__asm__ volatile(
    67d4:	f04f 0320 	mov.w	r3, #32
    67d8:	f3ef 8711 	mrs	r7, BASEPRI
    67dc:	f383 8812 	msr	BASEPRI_MAX, r3
    67e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67e4:	4829      	ldr	r0, [pc, #164]	; (688c <z_thread_timeout+0xc4>)
    67e6:	f7fe ff49 	bl	567c <z_spin_lock_valid>
    67ea:	b118      	cbz	r0, 67f4 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    67ec:	4827      	ldr	r0, [pc, #156]	; (688c <z_thread_timeout+0xc4>)
    67ee:	f7fe ff65 	bl	56bc <z_spin_lock_set_owner>
	return k;
    67f2:	e02e      	b.n	6852 <z_thread_timeout+0x8a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67f4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 689c <z_thread_timeout+0xd4>
    67f8:	2381      	movs	r3, #129	; 0x81
    67fa:	4642      	mov	r2, r8
    67fc:	4924      	ldr	r1, [pc, #144]	; (6890 <z_thread_timeout+0xc8>)
    67fe:	4825      	ldr	r0, [pc, #148]	; (6894 <z_thread_timeout+0xcc>)
    6800:	f001 fbd0 	bl	7fa4 <printk>
    6804:	4921      	ldr	r1, [pc, #132]	; (688c <z_thread_timeout+0xc4>)
    6806:	4824      	ldr	r0, [pc, #144]	; (6898 <z_thread_timeout+0xd0>)
    6808:	f001 fbcc 	bl	7fa4 <printk>
    680c:	2181      	movs	r1, #129	; 0x81
    680e:	4640      	mov	r0, r8
    6810:	f001 fd21 	bl	8256 <assert_post_action>
    6814:	e7ea      	b.n	67ec <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6816:	4630      	mov	r0, r6
    6818:	f7ff fbf2 	bl	6000 <pended_on_thread>
    681c:	4631      	mov	r1, r6
    681e:	f7ff fd73 	bl	6308 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6822:	7b73      	ldrb	r3, [r6, #13]
    6824:	f023 0302 	bic.w	r3, r3, #2
    6828:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    682a:	2300      	movs	r3, #0
    682c:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    682e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6832:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    6836:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    683a:	4630      	mov	r0, r6
    683c:	f7ff fec0 	bl	65c0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6840:	4812      	ldr	r0, [pc, #72]	; (688c <z_thread_timeout+0xc4>)
    6842:	f7fe ff2b 	bl	569c <z_spin_unlock_valid>
    6846:	b178      	cbz	r0, 6868 <z_thread_timeout+0xa0>
	__asm__ volatile(
    6848:	f387 8811 	msr	BASEPRI, r7
    684c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6850:	2501      	movs	r5, #1
    6852:	b9cd      	cbnz	r5, 6888 <z_thread_timeout+0xc0>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6854:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6858:	f013 0f28 	tst.w	r3, #40	; 0x28
    685c:	d1f0      	bne.n	6840 <z_thread_timeout+0x78>
			if (thread->base.pended_on != NULL) {
    685e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6862:	2b00      	cmp	r3, #0
    6864:	d1d7      	bne.n	6816 <z_thread_timeout+0x4e>
    6866:	e7e2      	b.n	682e <z_thread_timeout+0x66>
    6868:	4d0c      	ldr	r5, [pc, #48]	; (689c <z_thread_timeout+0xd4>)
    686a:	23ac      	movs	r3, #172	; 0xac
    686c:	462a      	mov	r2, r5
    686e:	490c      	ldr	r1, [pc, #48]	; (68a0 <z_thread_timeout+0xd8>)
    6870:	4808      	ldr	r0, [pc, #32]	; (6894 <z_thread_timeout+0xcc>)
    6872:	f001 fb97 	bl	7fa4 <printk>
    6876:	4905      	ldr	r1, [pc, #20]	; (688c <z_thread_timeout+0xc4>)
    6878:	480a      	ldr	r0, [pc, #40]	; (68a4 <z_thread_timeout+0xdc>)
    687a:	f001 fb93 	bl	7fa4 <printk>
    687e:	21ac      	movs	r1, #172	; 0xac
    6880:	4628      	mov	r0, r5
    6882:	f001 fce8 	bl	8256 <assert_post_action>
    6886:	e7df      	b.n	6848 <z_thread_timeout+0x80>
}
    6888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    688c:	20000fe4 	.word	0x20000fe4
    6890:	000091e8 	.word	0x000091e8
    6894:	00009078 	.word	0x00009078
    6898:	00009200 	.word	0x00009200
    689c:	00009190 	.word	0x00009190
    68a0:	000091b8 	.word	0x000091b8
    68a4:	000091d0 	.word	0x000091d0

000068a8 <unready_thread>:
{
    68a8:	b510      	push	{r4, lr}
    68aa:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    68ac:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    68ae:	f990 300d 	ldrsb.w	r3, [r0, #13]
    68b2:	2b00      	cmp	r3, #0
    68b4:	db08      	blt.n	68c8 <unready_thread+0x20>
	update_cache(thread == _current);
    68b6:	4b08      	ldr	r3, [pc, #32]	; (68d8 <unready_thread+0x30>)
    68b8:	6898      	ldr	r0, [r3, #8]
    68ba:	42a0      	cmp	r0, r4
    68bc:	bf14      	ite	ne
    68be:	2000      	movne	r0, #0
    68c0:	2001      	moveq	r0, #1
    68c2:	f7ff fd45 	bl	6350 <update_cache>
}
    68c6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    68c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    68cc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    68ce:	4601      	mov	r1, r0
    68d0:	4802      	ldr	r0, [pc, #8]	; (68dc <unready_thread+0x34>)
    68d2:	f7ff fd19 	bl	6308 <z_priq_dumb_remove>
}
    68d6:	e7ee      	b.n	68b6 <unready_thread+0xe>
    68d8:	20000fa8 	.word	0x20000fa8
    68dc:	20000fc8 	.word	0x20000fc8

000068e0 <add_to_waitq_locked>:
{
    68e0:	b570      	push	{r4, r5, r6, lr}
    68e2:	4605      	mov	r5, r0
    68e4:	460e      	mov	r6, r1
	unready_thread(thread);
    68e6:	f7ff ffdf 	bl	68a8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    68ea:	7b6b      	ldrb	r3, [r5, #13]
    68ec:	f043 0302 	orr.w	r3, r3, #2
    68f0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    68f2:	b1ce      	cbz	r6, 6928 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    68f4:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    68f6:	4b17      	ldr	r3, [pc, #92]	; (6954 <add_to_waitq_locked+0x74>)
    68f8:	429d      	cmp	r5, r3
    68fa:	d016      	beq.n	692a <add_to_waitq_locked+0x4a>
	return list->head == list;
    68fc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68fe:	42a6      	cmp	r6, r4
    6900:	d025      	beq.n	694e <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6902:	b164      	cbz	r4, 691e <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6904:	4621      	mov	r1, r4
    6906:	4628      	mov	r0, r5
    6908:	f002 f9a6 	bl	8c58 <z_sched_prio_cmp>
    690c:	2800      	cmp	r0, #0
    690e:	dc18      	bgt.n	6942 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6910:	b12c      	cbz	r4, 691e <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    6912:	6873      	ldr	r3, [r6, #4]
    6914:	429c      	cmp	r4, r3
    6916:	d002      	beq.n	691e <add_to_waitq_locked+0x3e>
    6918:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    691a:	2c00      	cmp	r4, #0
    691c:	d1f1      	bne.n	6902 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    691e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    6920:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    6922:	606b      	str	r3, [r5, #4]
	tail->next = node;
    6924:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6926:	6075      	str	r5, [r6, #4]
}
    6928:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    692a:	4c0b      	ldr	r4, [pc, #44]	; (6958 <add_to_waitq_locked+0x78>)
    692c:	23ba      	movs	r3, #186	; 0xba
    692e:	4622      	mov	r2, r4
    6930:	490a      	ldr	r1, [pc, #40]	; (695c <add_to_waitq_locked+0x7c>)
    6932:	480b      	ldr	r0, [pc, #44]	; (6960 <add_to_waitq_locked+0x80>)
    6934:	f001 fb36 	bl	7fa4 <printk>
    6938:	21ba      	movs	r1, #186	; 0xba
    693a:	4620      	mov	r0, r4
    693c:	f001 fc8b 	bl	8256 <assert_post_action>
    6940:	e7dc      	b.n	68fc <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    6942:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6944:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6946:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6948:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    694a:	6065      	str	r5, [r4, #4]
}
    694c:	e7ec      	b.n	6928 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    694e:	2400      	movs	r4, #0
    6950:	e7d7      	b.n	6902 <add_to_waitq_locked+0x22>
    6952:	bf00      	nop
    6954:	20000398 	.word	0x20000398
    6958:	00009dd8 	.word	0x00009dd8
    695c:	00009e14 	.word	0x00009e14
    6960:	00009078 	.word	0x00009078

00006964 <pend>:
{
    6964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6968:	4605      	mov	r5, r0
    696a:	460f      	mov	r7, r1
    696c:	4691      	mov	r9, r2
    696e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    6970:	2400      	movs	r4, #0
	__asm__ volatile(
    6972:	f04f 0320 	mov.w	r3, #32
    6976:	f3ef 8611 	mrs	r6, BASEPRI
    697a:	f383 8812 	msr	BASEPRI_MAX, r3
    697e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6982:	481f      	ldr	r0, [pc, #124]	; (6a00 <pend+0x9c>)
    6984:	f7fe fe7a 	bl	567c <z_spin_lock_valid>
    6988:	b118      	cbz	r0, 6992 <pend+0x2e>
	z_spin_lock_set_owner(l);
    698a:	481d      	ldr	r0, [pc, #116]	; (6a00 <pend+0x9c>)
    698c:	f7fe fe96 	bl	56bc <z_spin_lock_set_owner>
	return k;
    6990:	e024      	b.n	69dc <pend+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6992:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6a10 <pend+0xac>
    6996:	2381      	movs	r3, #129	; 0x81
    6998:	4652      	mov	r2, sl
    699a:	491a      	ldr	r1, [pc, #104]	; (6a04 <pend+0xa0>)
    699c:	481a      	ldr	r0, [pc, #104]	; (6a08 <pend+0xa4>)
    699e:	f001 fb01 	bl	7fa4 <printk>
    69a2:	4917      	ldr	r1, [pc, #92]	; (6a00 <pend+0x9c>)
    69a4:	4819      	ldr	r0, [pc, #100]	; (6a0c <pend+0xa8>)
    69a6:	f001 fafd 	bl	7fa4 <printk>
    69aa:	2181      	movs	r1, #129	; 0x81
    69ac:	4650      	mov	r0, sl
    69ae:	f001 fc52 	bl	8256 <assert_post_action>
    69b2:	e7ea      	b.n	698a <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69b4:	4c16      	ldr	r4, [pc, #88]	; (6a10 <pend+0xac>)
    69b6:	23ac      	movs	r3, #172	; 0xac
    69b8:	4622      	mov	r2, r4
    69ba:	4916      	ldr	r1, [pc, #88]	; (6a14 <pend+0xb0>)
    69bc:	4812      	ldr	r0, [pc, #72]	; (6a08 <pend+0xa4>)
    69be:	f001 faf1 	bl	7fa4 <printk>
    69c2:	490f      	ldr	r1, [pc, #60]	; (6a00 <pend+0x9c>)
    69c4:	4814      	ldr	r0, [pc, #80]	; (6a18 <pend+0xb4>)
    69c6:	f001 faed 	bl	7fa4 <printk>
    69ca:	21ac      	movs	r1, #172	; 0xac
    69cc:	4620      	mov	r0, r4
    69ce:	f001 fc42 	bl	8256 <assert_post_action>
	__asm__ volatile(
    69d2:	f386 8811 	msr	BASEPRI, r6
    69d6:	f3bf 8f6f 	isb	sy
    69da:	2401      	movs	r4, #1
    69dc:	b94c      	cbnz	r4, 69f2 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    69de:	4639      	mov	r1, r7
    69e0:	4628      	mov	r0, r5
    69e2:	f7ff ff7d 	bl	68e0 <add_to_waitq_locked>
    69e6:	4806      	ldr	r0, [pc, #24]	; (6a00 <pend+0x9c>)
    69e8:	f7fe fe58 	bl	569c <z_spin_unlock_valid>
    69ec:	2800      	cmp	r0, #0
    69ee:	d1f0      	bne.n	69d2 <pend+0x6e>
    69f0:	e7e0      	b.n	69b4 <pend+0x50>
	add_thread_timeout(thread, timeout);
    69f2:	464a      	mov	r2, r9
    69f4:	4643      	mov	r3, r8
    69f6:	4628      	mov	r0, r5
    69f8:	f7ff fb1c 	bl	6034 <add_thread_timeout>
}
    69fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a00:	20000fe4 	.word	0x20000fe4
    6a04:	000091e8 	.word	0x000091e8
    6a08:	00009078 	.word	0x00009078
    6a0c:	00009200 	.word	0x00009200
    6a10:	00009190 	.word	0x00009190
    6a14:	000091b8 	.word	0x000091b8
    6a18:	000091d0 	.word	0x000091d0

00006a1c <z_pend_curr>:
{
    6a1c:	b570      	push	{r4, r5, r6, lr}
    6a1e:	4604      	mov	r4, r0
    6a20:	460d      	mov	r5, r1
    6a22:	4611      	mov	r1, r2
	pending_current = _current;
    6a24:	4b0f      	ldr	r3, [pc, #60]	; (6a64 <z_pend_curr+0x48>)
    6a26:	6898      	ldr	r0, [r3, #8]
    6a28:	4b0f      	ldr	r3, [pc, #60]	; (6a68 <z_pend_curr+0x4c>)
    6a2a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    6a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6a30:	f7ff ff98 	bl	6964 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a34:	4620      	mov	r0, r4
    6a36:	f7fe fe31 	bl	569c <z_spin_unlock_valid>
    6a3a:	b118      	cbz	r0, 6a44 <z_pend_curr+0x28>
    6a3c:	4628      	mov	r0, r5
    6a3e:	f7fb f8cf 	bl	1be0 <arch_swap>
}
    6a42:	bd70      	pop	{r4, r5, r6, pc}
    6a44:	4e09      	ldr	r6, [pc, #36]	; (6a6c <z_pend_curr+0x50>)
    6a46:	23c3      	movs	r3, #195	; 0xc3
    6a48:	4632      	mov	r2, r6
    6a4a:	4909      	ldr	r1, [pc, #36]	; (6a70 <z_pend_curr+0x54>)
    6a4c:	4809      	ldr	r0, [pc, #36]	; (6a74 <z_pend_curr+0x58>)
    6a4e:	f001 faa9 	bl	7fa4 <printk>
    6a52:	4621      	mov	r1, r4
    6a54:	4808      	ldr	r0, [pc, #32]	; (6a78 <z_pend_curr+0x5c>)
    6a56:	f001 faa5 	bl	7fa4 <printk>
    6a5a:	21c3      	movs	r1, #195	; 0xc3
    6a5c:	4630      	mov	r0, r6
    6a5e:	f001 fbfa 	bl	8256 <assert_post_action>
    6a62:	e7eb      	b.n	6a3c <z_pend_curr+0x20>
    6a64:	20000fa8 	.word	0x20000fa8
    6a68:	20000fe0 	.word	0x20000fe0
    6a6c:	00009190 	.word	0x00009190
    6a70:	000091b8 	.word	0x000091b8
    6a74:	00009078 	.word	0x00009078
    6a78:	000091d0 	.word	0x000091d0

00006a7c <z_set_prio>:
{
    6a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a80:	4604      	mov	r4, r0
    6a82:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    6a84:	2500      	movs	r5, #0
	__asm__ volatile(
    6a86:	f04f 0320 	mov.w	r3, #32
    6a8a:	f3ef 8611 	mrs	r6, BASEPRI
    6a8e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a96:	4845      	ldr	r0, [pc, #276]	; (6bac <z_set_prio+0x130>)
    6a98:	f7fe fdf0 	bl	567c <z_spin_lock_valid>
    6a9c:	b128      	cbz	r0, 6aaa <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
    6a9e:	4843      	ldr	r0, [pc, #268]	; (6bac <z_set_prio+0x130>)
    6aa0:	f7fe fe0c 	bl	56bc <z_spin_lock_set_owner>
	bool need_sched = 0;
    6aa4:	f04f 0800 	mov.w	r8, #0
	return k;
    6aa8:	e01e      	b.n	6ae8 <z_set_prio+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6aaa:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6bd0 <z_set_prio+0x154>
    6aae:	2381      	movs	r3, #129	; 0x81
    6ab0:	4642      	mov	r2, r8
    6ab2:	493f      	ldr	r1, [pc, #252]	; (6bb0 <z_set_prio+0x134>)
    6ab4:	483f      	ldr	r0, [pc, #252]	; (6bb4 <z_set_prio+0x138>)
    6ab6:	f001 fa75 	bl	7fa4 <printk>
    6aba:	493c      	ldr	r1, [pc, #240]	; (6bac <z_set_prio+0x130>)
    6abc:	483e      	ldr	r0, [pc, #248]	; (6bb8 <z_set_prio+0x13c>)
    6abe:	f001 fa71 	bl	7fa4 <printk>
    6ac2:	2181      	movs	r1, #129	; 0x81
    6ac4:	4640      	mov	r0, r8
    6ac6:	f001 fbc6 	bl	8256 <assert_post_action>
    6aca:	e7e8      	b.n	6a9e <z_set_prio+0x22>
		if (need_sched) {
    6acc:	f013 0801 	ands.w	r8, r3, #1
    6ad0:	d116      	bne.n	6b00 <z_set_prio+0x84>
			thread->base.prio = prio;
    6ad2:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ad4:	4835      	ldr	r0, [pc, #212]	; (6bac <z_set_prio+0x130>)
    6ad6:	f7fe fde1 	bl	569c <z_spin_unlock_valid>
    6ada:	2800      	cmp	r0, #0
    6adc:	d053      	beq.n	6b86 <z_set_prio+0x10a>
	__asm__ volatile(
    6ade:	f386 8811 	msr	BASEPRI, r6
    6ae2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6ae6:	2501      	movs	r5, #1
    6ae8:	462b      	mov	r3, r5
    6aea:	2d00      	cmp	r5, #0
    6aec:	d15b      	bne.n	6ba6 <z_set_prio+0x12a>
	uint8_t state = thread->base.thread_state;
    6aee:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6af0:	f012 0f1f 	tst.w	r2, #31
    6af4:	d1ea      	bne.n	6acc <z_set_prio+0x50>
	return node->next != NULL;
    6af6:	69a1      	ldr	r1, [r4, #24]
    6af8:	2900      	cmp	r1, #0
    6afa:	d1e7      	bne.n	6acc <z_set_prio+0x50>
    6afc:	2301      	movs	r3, #1
    6afe:	e7e5      	b.n	6acc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6b04:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6b06:	4621      	mov	r1, r4
    6b08:	482c      	ldr	r0, [pc, #176]	; (6bbc <z_set_prio+0x140>)
    6b0a:	f7ff fbfd 	bl	6308 <z_priq_dumb_remove>
				thread->base.prio = prio;
    6b0e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6b10:	7b63      	ldrb	r3, [r4, #13]
    6b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b16:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b18:	4b29      	ldr	r3, [pc, #164]	; (6bc0 <z_set_prio+0x144>)
    6b1a:	429c      	cmp	r4, r3
    6b1c:	d01f      	beq.n	6b5e <z_set_prio+0xe2>
	return list->head == list;
    6b1e:	4b29      	ldr	r3, [pc, #164]	; (6bc4 <z_set_prio+0x148>)
    6b20:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b24:	429d      	cmp	r5, r3
    6b26:	d02c      	beq.n	6b82 <z_set_prio+0x106>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b28:	b16d      	cbz	r5, 6b46 <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6b2a:	4629      	mov	r1, r5
    6b2c:	4620      	mov	r0, r4
    6b2e:	f002 f893 	bl	8c58 <z_sched_prio_cmp>
    6b32:	2800      	cmp	r0, #0
    6b34:	dc1f      	bgt.n	6b76 <z_set_prio+0xfa>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6b36:	b135      	cbz	r5, 6b46 <z_set_prio+0xca>
	return (node == list->tail) ? NULL : node->next;
    6b38:	4b22      	ldr	r3, [pc, #136]	; (6bc4 <z_set_prio+0x148>)
    6b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b3c:	429d      	cmp	r5, r3
    6b3e:	d002      	beq.n	6b46 <z_set_prio+0xca>
    6b40:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b42:	2d00      	cmp	r5, #0
    6b44:	d1f0      	bne.n	6b28 <z_set_prio+0xac>
	sys_dnode_t *const tail = list->tail;
    6b46:	4b1f      	ldr	r3, [pc, #124]	; (6bc4 <z_set_prio+0x148>)
    6b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6b4a:	f103 0120 	add.w	r1, r3, #32
    6b4e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6b50:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6b52:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6b54:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    6b56:	2001      	movs	r0, #1
    6b58:	f7ff fbfa 	bl	6350 <update_cache>
    6b5c:	e7ba      	b.n	6ad4 <z_set_prio+0x58>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b5e:	4d1a      	ldr	r5, [pc, #104]	; (6bc8 <z_set_prio+0x14c>)
    6b60:	23ba      	movs	r3, #186	; 0xba
    6b62:	462a      	mov	r2, r5
    6b64:	4919      	ldr	r1, [pc, #100]	; (6bcc <z_set_prio+0x150>)
    6b66:	4813      	ldr	r0, [pc, #76]	; (6bb4 <z_set_prio+0x138>)
    6b68:	f001 fa1c 	bl	7fa4 <printk>
    6b6c:	21ba      	movs	r1, #186	; 0xba
    6b6e:	4628      	mov	r0, r5
    6b70:	f001 fb71 	bl	8256 <assert_post_action>
    6b74:	e7d3      	b.n	6b1e <z_set_prio+0xa2>
	sys_dnode_t *const prev = successor->prev;
    6b76:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6b78:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6b7a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6b7c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6b7e:	606c      	str	r4, [r5, #4]
}
    6b80:	e7e9      	b.n	6b56 <z_set_prio+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b82:	2500      	movs	r5, #0
    6b84:	e7d0      	b.n	6b28 <z_set_prio+0xac>
    6b86:	4d12      	ldr	r5, [pc, #72]	; (6bd0 <z_set_prio+0x154>)
    6b88:	23ac      	movs	r3, #172	; 0xac
    6b8a:	462a      	mov	r2, r5
    6b8c:	4911      	ldr	r1, [pc, #68]	; (6bd4 <z_set_prio+0x158>)
    6b8e:	4809      	ldr	r0, [pc, #36]	; (6bb4 <z_set_prio+0x138>)
    6b90:	f001 fa08 	bl	7fa4 <printk>
    6b94:	4905      	ldr	r1, [pc, #20]	; (6bac <z_set_prio+0x130>)
    6b96:	4810      	ldr	r0, [pc, #64]	; (6bd8 <z_set_prio+0x15c>)
    6b98:	f001 fa04 	bl	7fa4 <printk>
    6b9c:	21ac      	movs	r1, #172	; 0xac
    6b9e:	4628      	mov	r0, r5
    6ba0:	f001 fb59 	bl	8256 <assert_post_action>
    6ba4:	e79b      	b.n	6ade <z_set_prio+0x62>
}
    6ba6:	4640      	mov	r0, r8
    6ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bac:	20000fe4 	.word	0x20000fe4
    6bb0:	000091e8 	.word	0x000091e8
    6bb4:	00009078 	.word	0x00009078
    6bb8:	00009200 	.word	0x00009200
    6bbc:	20000fc8 	.word	0x20000fc8
    6bc0:	20000398 	.word	0x20000398
    6bc4:	20000fa8 	.word	0x20000fa8
    6bc8:	00009dd8 	.word	0x00009dd8
    6bcc:	00009e14 	.word	0x00009e14
    6bd0:	00009190 	.word	0x00009190
    6bd4:	000091b8 	.word	0x000091b8
    6bd8:	000091d0 	.word	0x000091d0

00006bdc <z_impl_k_thread_suspend>:
{
    6bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bde:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6be0:	3018      	adds	r0, #24
    6be2:	f000 fd8b 	bl	76fc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    6be6:	2500      	movs	r5, #0
	__asm__ volatile(
    6be8:	f04f 0320 	mov.w	r3, #32
    6bec:	f3ef 8611 	mrs	r6, BASEPRI
    6bf0:	f383 8812 	msr	BASEPRI_MAX, r3
    6bf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bf8:	482d      	ldr	r0, [pc, #180]	; (6cb0 <z_impl_k_thread_suspend+0xd4>)
    6bfa:	f7fe fd3f 	bl	567c <z_spin_lock_valid>
    6bfe:	b118      	cbz	r0, 6c08 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    6c00:	482b      	ldr	r0, [pc, #172]	; (6cb0 <z_impl_k_thread_suspend+0xd4>)
    6c02:	f7fe fd5b 	bl	56bc <z_spin_lock_set_owner>
	return k;
    6c06:	e02b      	b.n	6c60 <z_impl_k_thread_suspend+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c08:	4f2a      	ldr	r7, [pc, #168]	; (6cb4 <z_impl_k_thread_suspend+0xd8>)
    6c0a:	2381      	movs	r3, #129	; 0x81
    6c0c:	463a      	mov	r2, r7
    6c0e:	492a      	ldr	r1, [pc, #168]	; (6cb8 <z_impl_k_thread_suspend+0xdc>)
    6c10:	482a      	ldr	r0, [pc, #168]	; (6cbc <z_impl_k_thread_suspend+0xe0>)
    6c12:	f001 f9c7 	bl	7fa4 <printk>
    6c16:	4926      	ldr	r1, [pc, #152]	; (6cb0 <z_impl_k_thread_suspend+0xd4>)
    6c18:	4829      	ldr	r0, [pc, #164]	; (6cc0 <z_impl_k_thread_suspend+0xe4>)
    6c1a:	f001 f9c3 	bl	7fa4 <printk>
    6c1e:	2181      	movs	r1, #129	; 0x81
    6c20:	4638      	mov	r0, r7
    6c22:	f001 fb18 	bl	8256 <assert_post_action>
    6c26:	e7eb      	b.n	6c00 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6c2c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c2e:	4621      	mov	r1, r4
    6c30:	4824      	ldr	r0, [pc, #144]	; (6cc4 <z_impl_k_thread_suspend+0xe8>)
    6c32:	f7ff fb69 	bl	6308 <z_priq_dumb_remove>
}
    6c36:	e019      	b.n	6c6c <z_impl_k_thread_suspend+0x90>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c38:	4d1e      	ldr	r5, [pc, #120]	; (6cb4 <z_impl_k_thread_suspend+0xd8>)
    6c3a:	23ac      	movs	r3, #172	; 0xac
    6c3c:	462a      	mov	r2, r5
    6c3e:	4922      	ldr	r1, [pc, #136]	; (6cc8 <z_impl_k_thread_suspend+0xec>)
    6c40:	481e      	ldr	r0, [pc, #120]	; (6cbc <z_impl_k_thread_suspend+0xe0>)
    6c42:	f001 f9af 	bl	7fa4 <printk>
    6c46:	491a      	ldr	r1, [pc, #104]	; (6cb0 <z_impl_k_thread_suspend+0xd4>)
    6c48:	4820      	ldr	r0, [pc, #128]	; (6ccc <z_impl_k_thread_suspend+0xf0>)
    6c4a:	f001 f9ab 	bl	7fa4 <printk>
    6c4e:	21ac      	movs	r1, #172	; 0xac
    6c50:	4628      	mov	r0, r5
    6c52:	f001 fb00 	bl	8256 <assert_post_action>
	__asm__ volatile(
    6c56:	f386 8811 	msr	BASEPRI, r6
    6c5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6c5e:	2501      	movs	r5, #1
    6c60:	b9b5      	cbnz	r5, 6c90 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    6c62:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    6c64:	f994 300d 	ldrsb.w	r3, [r4, #13]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	dbdd      	blt.n	6c28 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6c6c:	7b63      	ldrb	r3, [r4, #13]
    6c6e:	f043 0310 	orr.w	r3, r3, #16
    6c72:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    6c74:	4b16      	ldr	r3, [pc, #88]	; (6cd0 <z_impl_k_thread_suspend+0xf4>)
    6c76:	6898      	ldr	r0, [r3, #8]
    6c78:	42a0      	cmp	r0, r4
    6c7a:	bf14      	ite	ne
    6c7c:	2000      	movne	r0, #0
    6c7e:	2001      	moveq	r0, #1
    6c80:	f7ff fb66 	bl	6350 <update_cache>
    6c84:	480a      	ldr	r0, [pc, #40]	; (6cb0 <z_impl_k_thread_suspend+0xd4>)
    6c86:	f7fe fd09 	bl	569c <z_spin_unlock_valid>
    6c8a:	2800      	cmp	r0, #0
    6c8c:	d1e3      	bne.n	6c56 <z_impl_k_thread_suspend+0x7a>
    6c8e:	e7d3      	b.n	6c38 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    6c90:	4b0f      	ldr	r3, [pc, #60]	; (6cd0 <z_impl_k_thread_suspend+0xf4>)
    6c92:	689b      	ldr	r3, [r3, #8]
    6c94:	42a3      	cmp	r3, r4
    6c96:	d000      	beq.n	6c9a <z_impl_k_thread_suspend+0xbe>
}
    6c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    6c9a:	f04f 0320 	mov.w	r3, #32
    6c9e:	f3ef 8011 	mrs	r0, BASEPRI
    6ca2:	f383 8812 	msr	BASEPRI_MAX, r3
    6ca6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6caa:	f001 ffdf 	bl	8c6c <z_reschedule_irqlock>
    6cae:	e7f3      	b.n	6c98 <z_impl_k_thread_suspend+0xbc>
    6cb0:	20000fe4 	.word	0x20000fe4
    6cb4:	00009190 	.word	0x00009190
    6cb8:	000091e8 	.word	0x000091e8
    6cbc:	00009078 	.word	0x00009078
    6cc0:	00009200 	.word	0x00009200
    6cc4:	20000fc8 	.word	0x20000fc8
    6cc8:	000091b8 	.word	0x000091b8
    6ccc:	000091d0 	.word	0x000091d0
    6cd0:	20000fa8 	.word	0x20000fa8

00006cd4 <k_sched_unlock>:
{
    6cd4:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    6cd6:	2400      	movs	r4, #0
    6cd8:	f04f 0320 	mov.w	r3, #32
    6cdc:	f3ef 8511 	mrs	r5, BASEPRI
    6ce0:	f383 8812 	msr	BASEPRI_MAX, r3
    6ce4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ce8:	4838      	ldr	r0, [pc, #224]	; (6dcc <k_sched_unlock+0xf8>)
    6cea:	f7fe fcc7 	bl	567c <z_spin_lock_valid>
    6cee:	b118      	cbz	r0, 6cf8 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    6cf0:	4836      	ldr	r0, [pc, #216]	; (6dcc <k_sched_unlock+0xf8>)
    6cf2:	f7fe fce3 	bl	56bc <z_spin_lock_set_owner>
	return k;
    6cf6:	e045      	b.n	6d84 <k_sched_unlock+0xb0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cf8:	4e35      	ldr	r6, [pc, #212]	; (6dd0 <k_sched_unlock+0xfc>)
    6cfa:	2381      	movs	r3, #129	; 0x81
    6cfc:	4632      	mov	r2, r6
    6cfe:	4935      	ldr	r1, [pc, #212]	; (6dd4 <k_sched_unlock+0x100>)
    6d00:	4835      	ldr	r0, [pc, #212]	; (6dd8 <k_sched_unlock+0x104>)
    6d02:	f001 f94f 	bl	7fa4 <printk>
    6d06:	4931      	ldr	r1, [pc, #196]	; (6dcc <k_sched_unlock+0xf8>)
    6d08:	4834      	ldr	r0, [pc, #208]	; (6ddc <k_sched_unlock+0x108>)
    6d0a:	f001 f94b 	bl	7fa4 <printk>
    6d0e:	2181      	movs	r1, #129	; 0x81
    6d10:	4630      	mov	r0, r6
    6d12:	f001 faa0 	bl	8256 <assert_post_action>
    6d16:	e7eb      	b.n	6cf0 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    6d18:	4c31      	ldr	r4, [pc, #196]	; (6de0 <k_sched_unlock+0x10c>)
    6d1a:	f240 3385 	movw	r3, #901	; 0x385
    6d1e:	4622      	mov	r2, r4
    6d20:	4930      	ldr	r1, [pc, #192]	; (6de4 <k_sched_unlock+0x110>)
    6d22:	482d      	ldr	r0, [pc, #180]	; (6dd8 <k_sched_unlock+0x104>)
    6d24:	f001 f93e 	bl	7fa4 <printk>
    6d28:	482f      	ldr	r0, [pc, #188]	; (6de8 <k_sched_unlock+0x114>)
    6d2a:	f001 f93b 	bl	7fa4 <printk>
    6d2e:	f240 3185 	movw	r1, #901	; 0x385
    6d32:	4620      	mov	r0, r4
    6d34:	f001 fa8f 	bl	8256 <assert_post_action>
    6d38:	e02a      	b.n	6d90 <k_sched_unlock+0xbc>
		__ASSERT(!arch_is_in_isr(), "");
    6d3a:	4c29      	ldr	r4, [pc, #164]	; (6de0 <k_sched_unlock+0x10c>)
    6d3c:	f240 3386 	movw	r3, #902	; 0x386
    6d40:	4622      	mov	r2, r4
    6d42:	492a      	ldr	r1, [pc, #168]	; (6dec <k_sched_unlock+0x118>)
    6d44:	4824      	ldr	r0, [pc, #144]	; (6dd8 <k_sched_unlock+0x104>)
    6d46:	f001 f92d 	bl	7fa4 <printk>
    6d4a:	4827      	ldr	r0, [pc, #156]	; (6de8 <k_sched_unlock+0x114>)
    6d4c:	f001 f92a 	bl	7fa4 <printk>
    6d50:	f240 3186 	movw	r1, #902	; 0x386
    6d54:	4620      	mov	r0, r4
    6d56:	f001 fa7e 	bl	8256 <assert_post_action>
    6d5a:	e01d      	b.n	6d98 <k_sched_unlock+0xc4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d5c:	4c1c      	ldr	r4, [pc, #112]	; (6dd0 <k_sched_unlock+0xfc>)
    6d5e:	23ac      	movs	r3, #172	; 0xac
    6d60:	4622      	mov	r2, r4
    6d62:	4923      	ldr	r1, [pc, #140]	; (6df0 <k_sched_unlock+0x11c>)
    6d64:	481c      	ldr	r0, [pc, #112]	; (6dd8 <k_sched_unlock+0x104>)
    6d66:	f001 f91d 	bl	7fa4 <printk>
    6d6a:	4918      	ldr	r1, [pc, #96]	; (6dcc <k_sched_unlock+0xf8>)
    6d6c:	4821      	ldr	r0, [pc, #132]	; (6df4 <k_sched_unlock+0x120>)
    6d6e:	f001 f919 	bl	7fa4 <printk>
    6d72:	21ac      	movs	r1, #172	; 0xac
    6d74:	4620      	mov	r0, r4
    6d76:	f001 fa6e 	bl	8256 <assert_post_action>
	__asm__ volatile(
    6d7a:	f385 8811 	msr	BASEPRI, r5
    6d7e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6d82:	2401      	movs	r4, #1
    6d84:	b9b4      	cbnz	r4, 6db4 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    6d86:	4b1c      	ldr	r3, [pc, #112]	; (6df8 <k_sched_unlock+0x124>)
    6d88:	689b      	ldr	r3, [r3, #8]
    6d8a:	7bdb      	ldrb	r3, [r3, #15]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d0c3      	beq.n	6d18 <k_sched_unlock+0x44>
    6d90:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6d94:	2b00      	cmp	r3, #0
    6d96:	d1d0      	bne.n	6d3a <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    6d98:	4b17      	ldr	r3, [pc, #92]	; (6df8 <k_sched_unlock+0x124>)
    6d9a:	689a      	ldr	r2, [r3, #8]
    6d9c:	7bd3      	ldrb	r3, [r2, #15]
    6d9e:	3301      	adds	r3, #1
    6da0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6da2:	2000      	movs	r0, #0
    6da4:	f7ff fad4 	bl	6350 <update_cache>
    6da8:	4808      	ldr	r0, [pc, #32]	; (6dcc <k_sched_unlock+0xf8>)
    6daa:	f7fe fc77 	bl	569c <z_spin_unlock_valid>
    6dae:	2800      	cmp	r0, #0
    6db0:	d1e3      	bne.n	6d7a <k_sched_unlock+0xa6>
    6db2:	e7d3      	b.n	6d5c <k_sched_unlock+0x88>
	__asm__ volatile(
    6db4:	f04f 0320 	mov.w	r3, #32
    6db8:	f3ef 8011 	mrs	r0, BASEPRI
    6dbc:	f383 8812 	msr	BASEPRI_MAX, r3
    6dc0:	f3bf 8f6f 	isb	sy
    6dc4:	f001 ff52 	bl	8c6c <z_reschedule_irqlock>
}
    6dc8:	bd70      	pop	{r4, r5, r6, pc}
    6dca:	bf00      	nop
    6dcc:	20000fe4 	.word	0x20000fe4
    6dd0:	00009190 	.word	0x00009190
    6dd4:	000091e8 	.word	0x000091e8
    6dd8:	00009078 	.word	0x00009078
    6ddc:	00009200 	.word	0x00009200
    6de0:	00009dd8 	.word	0x00009dd8
    6de4:	00009e60 	.word	0x00009e60
    6de8:	00009d30 	.word	0x00009d30
    6dec:	00009cb0 	.word	0x00009cb0
    6df0:	000091b8 	.word	0x000091b8
    6df4:	000091d0 	.word	0x000091d0
    6df8:	20000fa8 	.word	0x20000fa8

00006dfc <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    6dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    6dfe:	7b43      	ldrb	r3, [r0, #13]
    6e00:	f013 0f08 	tst.w	r3, #8
    6e04:	d145      	bne.n	6e92 <end_thread+0x96>
    6e06:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    6e08:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6e0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6e10:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    6e12:	f013 0f80 	tst.w	r3, #128	; 0x80
    6e16:	d114      	bne.n	6e42 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    6e18:	68ab      	ldr	r3, [r5, #8]
    6e1a:	b15b      	cbz	r3, 6e34 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6e1c:	4628      	mov	r0, r5
    6e1e:	f7ff f8ef 	bl	6000 <pended_on_thread>
    6e22:	4629      	mov	r1, r5
    6e24:	f7ff fa70 	bl	6308 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6e28:	7b6b      	ldrb	r3, [r5, #13]
    6e2a:	f023 0302 	bic.w	r3, r3, #2
    6e2e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    6e30:	2300      	movs	r3, #0
    6e32:	60ab      	str	r3, [r5, #8]
    6e34:	f105 0018 	add.w	r0, r5, #24
    6e38:	f000 fc60 	bl	76fc <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    6e3c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6e40:	e01c      	b.n	6e7c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6e46:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6e48:	4601      	mov	r1, r0
    6e4a:	4812      	ldr	r0, [pc, #72]	; (6e94 <end_thread+0x98>)
    6e4c:	f7ff fa5c 	bl	6308 <z_priq_dumb_remove>
}
    6e50:	e7e2      	b.n	6e18 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6e52:	4620      	mov	r0, r4
    6e54:	f7ff f8d4 	bl	6000 <pended_on_thread>
    6e58:	4621      	mov	r1, r4
    6e5a:	f7ff fa55 	bl	6308 <z_priq_dumb_remove>
    6e5e:	7b63      	ldrb	r3, [r4, #13]
    6e60:	f023 0302 	bic.w	r3, r3, #2
    6e64:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6e66:	2600      	movs	r6, #0
    6e68:	60a6      	str	r6, [r4, #8]
    6e6a:	f104 0018 	add.w	r0, r4, #24
    6e6e:	f000 fc45 	bl	76fc <z_abort_timeout>
    6e72:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    6e76:	4620      	mov	r0, r4
    6e78:	f7ff fba2 	bl	65c0 <ready_thread>
	return list->head == list;
    6e7c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e7e:	42bc      	cmp	r4, r7
    6e80:	d001      	beq.n	6e86 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6e82:	2c00      	cmp	r4, #0
    6e84:	d1e5      	bne.n	6e52 <end_thread+0x56>
		update_cache(1);
    6e86:	2001      	movs	r0, #1
    6e88:	f7ff fa62 	bl	6350 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    6e8c:	4628      	mov	r0, r5
    6e8e:	f7fe fc1d 	bl	56cc <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    6e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e94:	20000fc8 	.word	0x20000fc8

00006e98 <z_unpend_first_thread>:
{
    6e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e9a:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
    6e9c:	2500      	movs	r5, #0
    6e9e:	f04f 0320 	mov.w	r3, #32
    6ea2:	f3ef 8611 	mrs	r6, BASEPRI
    6ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    6eaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6eae:	4825      	ldr	r0, [pc, #148]	; (6f44 <z_unpend_first_thread+0xac>)
    6eb0:	f7fe fbe4 	bl	567c <z_spin_lock_valid>
    6eb4:	b120      	cbz	r0, 6ec0 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    6eb6:	4823      	ldr	r0, [pc, #140]	; (6f44 <z_unpend_first_thread+0xac>)
    6eb8:	f7fe fc00 	bl	56bc <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    6ebc:	2400      	movs	r4, #0
	return k;
    6ebe:	e027      	b.n	6f10 <z_unpend_first_thread+0x78>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ec0:	4c21      	ldr	r4, [pc, #132]	; (6f48 <z_unpend_first_thread+0xb0>)
    6ec2:	2381      	movs	r3, #129	; 0x81
    6ec4:	4622      	mov	r2, r4
    6ec6:	4921      	ldr	r1, [pc, #132]	; (6f4c <z_unpend_first_thread+0xb4>)
    6ec8:	4821      	ldr	r0, [pc, #132]	; (6f50 <z_unpend_first_thread+0xb8>)
    6eca:	f001 f86b 	bl	7fa4 <printk>
    6ece:	491d      	ldr	r1, [pc, #116]	; (6f44 <z_unpend_first_thread+0xac>)
    6ed0:	4820      	ldr	r0, [pc, #128]	; (6f54 <z_unpend_first_thread+0xbc>)
    6ed2:	f001 f867 	bl	7fa4 <printk>
    6ed6:	2181      	movs	r1, #129	; 0x81
    6ed8:	4620      	mov	r0, r4
    6eda:	f001 f9bc 	bl	8256 <assert_post_action>
    6ede:	e7ea      	b.n	6eb6 <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6ee0:	f7ff f88e 	bl	6000 <pended_on_thread>
    6ee4:	4621      	mov	r1, r4
    6ee6:	f7ff fa0f 	bl	6308 <z_priq_dumb_remove>
    6eea:	7b63      	ldrb	r3, [r4, #13]
    6eec:	f023 0302 	bic.w	r3, r3, #2
    6ef0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6ef2:	2300      	movs	r3, #0
    6ef4:	60a3      	str	r3, [r4, #8]
    6ef6:	f104 0018 	add.w	r0, r4, #24
    6efa:	f000 fbff 	bl	76fc <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6efe:	4811      	ldr	r0, [pc, #68]	; (6f44 <z_unpend_first_thread+0xac>)
    6f00:	f7fe fbcc 	bl	569c <z_spin_unlock_valid>
    6f04:	b160      	cbz	r0, 6f20 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    6f06:	f386 8811 	msr	BASEPRI, r6
    6f0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6f0e:	2501      	movs	r5, #1
    6f10:	b9b5      	cbnz	r5, 6f40 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    6f12:	4638      	mov	r0, r7
    6f14:	f001 febf 	bl	8c96 <z_priq_dumb_best>
		if (thread != NULL) {
    6f18:	4604      	mov	r4, r0
    6f1a:	2800      	cmp	r0, #0
    6f1c:	d1e0      	bne.n	6ee0 <z_unpend_first_thread+0x48>
    6f1e:	e7ee      	b.n	6efe <z_unpend_first_thread+0x66>
    6f20:	4d09      	ldr	r5, [pc, #36]	; (6f48 <z_unpend_first_thread+0xb0>)
    6f22:	23ac      	movs	r3, #172	; 0xac
    6f24:	462a      	mov	r2, r5
    6f26:	490c      	ldr	r1, [pc, #48]	; (6f58 <z_unpend_first_thread+0xc0>)
    6f28:	4809      	ldr	r0, [pc, #36]	; (6f50 <z_unpend_first_thread+0xb8>)
    6f2a:	f001 f83b 	bl	7fa4 <printk>
    6f2e:	4905      	ldr	r1, [pc, #20]	; (6f44 <z_unpend_first_thread+0xac>)
    6f30:	480a      	ldr	r0, [pc, #40]	; (6f5c <z_unpend_first_thread+0xc4>)
    6f32:	f001 f837 	bl	7fa4 <printk>
    6f36:	21ac      	movs	r1, #172	; 0xac
    6f38:	4628      	mov	r0, r5
    6f3a:	f001 f98c 	bl	8256 <assert_post_action>
    6f3e:	e7e2      	b.n	6f06 <z_unpend_first_thread+0x6e>
}
    6f40:	4620      	mov	r0, r4
    6f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f44:	20000fe4 	.word	0x20000fe4
    6f48:	00009190 	.word	0x00009190
    6f4c:	000091e8 	.word	0x000091e8
    6f50:	00009078 	.word	0x00009078
    6f54:	00009200 	.word	0x00009200
    6f58:	000091b8 	.word	0x000091b8
    6f5c:	000091d0 	.word	0x000091d0

00006f60 <z_sched_init>:
{
    6f60:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    6f62:	4804      	ldr	r0, [pc, #16]	; (6f74 <z_sched_init+0x14>)
    6f64:	f001 fe9e 	bl	8ca4 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6f68:	2100      	movs	r1, #0
    6f6a:	200a      	movs	r0, #10
    6f6c:	f7ff f888 	bl	6080 <k_sched_time_slice_set>
}
    6f70:	bd08      	pop	{r3, pc}
    6f72:	bf00      	nop
    6f74:	20000fc4 	.word	0x20000fc4

00006f78 <z_impl_k_yield>:
{
    6f78:	b570      	push	{r4, r5, r6, lr}
    6f7a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d149      	bne.n	7016 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    6f82:	f04f 0320 	mov.w	r3, #32
    6f86:	f3ef 8611 	mrs	r6, BASEPRI
    6f8a:	f383 8812 	msr	BASEPRI_MAX, r3
    6f8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f92:	4843      	ldr	r0, [pc, #268]	; (70a0 <z_impl_k_yield+0x128>)
    6f94:	f7fe fb72 	bl	567c <z_spin_lock_valid>
    6f98:	2800      	cmp	r0, #0
    6f9a:	d04d      	beq.n	7038 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    6f9c:	4840      	ldr	r0, [pc, #256]	; (70a0 <z_impl_k_yield+0x128>)
    6f9e:	f7fe fb8d 	bl	56bc <z_spin_lock_set_owner>
		dequeue_thread(_current);
    6fa2:	4c40      	ldr	r4, [pc, #256]	; (70a4 <z_impl_k_yield+0x12c>)
    6fa4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6fa6:	7b4b      	ldrb	r3, [r1, #13]
    6fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6fac:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6fae:	f104 0020 	add.w	r0, r4, #32
    6fb2:	f7ff f9a9 	bl	6308 <z_priq_dumb_remove>
	queue_thread(_current);
    6fb6:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6fb8:	7b6b      	ldrb	r3, [r5, #13]
    6fba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6fbe:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6fc0:	4b39      	ldr	r3, [pc, #228]	; (70a8 <z_impl_k_yield+0x130>)
    6fc2:	429d      	cmp	r5, r3
    6fc4:	d048      	beq.n	7058 <z_impl_k_yield+0xe0>
	return list->head == list;
    6fc6:	4b37      	ldr	r3, [pc, #220]	; (70a4 <z_impl_k_yield+0x12c>)
    6fc8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fcc:	429c      	cmp	r4, r3
    6fce:	d055      	beq.n	707c <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6fd0:	b16c      	cbz	r4, 6fee <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6fd2:	4621      	mov	r1, r4
    6fd4:	4628      	mov	r0, r5
    6fd6:	f001 fe3f 	bl	8c58 <z_sched_prio_cmp>
    6fda:	2800      	cmp	r0, #0
    6fdc:	dc48      	bgt.n	7070 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6fde:	b134      	cbz	r4, 6fee <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    6fe0:	4b30      	ldr	r3, [pc, #192]	; (70a4 <z_impl_k_yield+0x12c>)
    6fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fe4:	429c      	cmp	r4, r3
    6fe6:	d002      	beq.n	6fee <z_impl_k_yield+0x76>
    6fe8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6fea:	2c00      	cmp	r4, #0
    6fec:	d1f0      	bne.n	6fd0 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    6fee:	4b2d      	ldr	r3, [pc, #180]	; (70a4 <z_impl_k_yield+0x12c>)
    6ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6ff2:	f103 0120 	add.w	r1, r3, #32
    6ff6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6ff8:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6ffa:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6ffc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    6ffe:	2001      	movs	r0, #1
    7000:	f7ff f9a6 	bl	6350 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7004:	4826      	ldr	r0, [pc, #152]	; (70a0 <z_impl_k_yield+0x128>)
    7006:	f7fe fb49 	bl	569c <z_spin_unlock_valid>
    700a:	2800      	cmp	r0, #0
    700c:	d038      	beq.n	7080 <z_impl_k_yield+0x108>
    700e:	4630      	mov	r0, r6
    7010:	f7fa fde6 	bl	1be0 <arch_swap>
}
    7014:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    7016:	4c25      	ldr	r4, [pc, #148]	; (70ac <z_impl_k_yield+0x134>)
    7018:	f240 43dc 	movw	r3, #1244	; 0x4dc
    701c:	4622      	mov	r2, r4
    701e:	4924      	ldr	r1, [pc, #144]	; (70b0 <z_impl_k_yield+0x138>)
    7020:	4824      	ldr	r0, [pc, #144]	; (70b4 <z_impl_k_yield+0x13c>)
    7022:	f000 ffbf 	bl	7fa4 <printk>
    7026:	4824      	ldr	r0, [pc, #144]	; (70b8 <z_impl_k_yield+0x140>)
    7028:	f000 ffbc 	bl	7fa4 <printk>
    702c:	f240 41dc 	movw	r1, #1244	; 0x4dc
    7030:	4620      	mov	r0, r4
    7032:	f001 f910 	bl	8256 <assert_post_action>
    7036:	e7a4      	b.n	6f82 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7038:	4c20      	ldr	r4, [pc, #128]	; (70bc <z_impl_k_yield+0x144>)
    703a:	2381      	movs	r3, #129	; 0x81
    703c:	4622      	mov	r2, r4
    703e:	4920      	ldr	r1, [pc, #128]	; (70c0 <z_impl_k_yield+0x148>)
    7040:	481c      	ldr	r0, [pc, #112]	; (70b4 <z_impl_k_yield+0x13c>)
    7042:	f000 ffaf 	bl	7fa4 <printk>
    7046:	4916      	ldr	r1, [pc, #88]	; (70a0 <z_impl_k_yield+0x128>)
    7048:	481e      	ldr	r0, [pc, #120]	; (70c4 <z_impl_k_yield+0x14c>)
    704a:	f000 ffab 	bl	7fa4 <printk>
    704e:	2181      	movs	r1, #129	; 0x81
    7050:	4620      	mov	r0, r4
    7052:	f001 f900 	bl	8256 <assert_post_action>
    7056:	e7a1      	b.n	6f9c <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7058:	4c14      	ldr	r4, [pc, #80]	; (70ac <z_impl_k_yield+0x134>)
    705a:	23ba      	movs	r3, #186	; 0xba
    705c:	4622      	mov	r2, r4
    705e:	491a      	ldr	r1, [pc, #104]	; (70c8 <z_impl_k_yield+0x150>)
    7060:	4814      	ldr	r0, [pc, #80]	; (70b4 <z_impl_k_yield+0x13c>)
    7062:	f000 ff9f 	bl	7fa4 <printk>
    7066:	21ba      	movs	r1, #186	; 0xba
    7068:	4620      	mov	r0, r4
    706a:	f001 f8f4 	bl	8256 <assert_post_action>
    706e:	e7aa      	b.n	6fc6 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    7070:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7072:	606b      	str	r3, [r5, #4]
	node->next = successor;
    7074:	602c      	str	r4, [r5, #0]
	prev->next = node;
    7076:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    7078:	6065      	str	r5, [r4, #4]
}
    707a:	e7c0      	b.n	6ffe <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    707c:	2400      	movs	r4, #0
    707e:	e7a7      	b.n	6fd0 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7080:	4c0e      	ldr	r4, [pc, #56]	; (70bc <z_impl_k_yield+0x144>)
    7082:	23c3      	movs	r3, #195	; 0xc3
    7084:	4622      	mov	r2, r4
    7086:	4911      	ldr	r1, [pc, #68]	; (70cc <z_impl_k_yield+0x154>)
    7088:	480a      	ldr	r0, [pc, #40]	; (70b4 <z_impl_k_yield+0x13c>)
    708a:	f000 ff8b 	bl	7fa4 <printk>
    708e:	4904      	ldr	r1, [pc, #16]	; (70a0 <z_impl_k_yield+0x128>)
    7090:	480f      	ldr	r0, [pc, #60]	; (70d0 <z_impl_k_yield+0x158>)
    7092:	f000 ff87 	bl	7fa4 <printk>
    7096:	21c3      	movs	r1, #195	; 0xc3
    7098:	4620      	mov	r0, r4
    709a:	f001 f8dc 	bl	8256 <assert_post_action>
    709e:	e7b6      	b.n	700e <z_impl_k_yield+0x96>
    70a0:	20000fe4 	.word	0x20000fe4
    70a4:	20000fa8 	.word	0x20000fa8
    70a8:	20000398 	.word	0x20000398
    70ac:	00009dd8 	.word	0x00009dd8
    70b0:	00009cb0 	.word	0x00009cb0
    70b4:	00009078 	.word	0x00009078
    70b8:	00009d30 	.word	0x00009d30
    70bc:	00009190 	.word	0x00009190
    70c0:	000091e8 	.word	0x000091e8
    70c4:	00009200 	.word	0x00009200
    70c8:	00009e14 	.word	0x00009e14
    70cc:	000091b8 	.word	0x000091b8
    70d0:	000091d0 	.word	0x000091d0

000070d4 <z_tick_sleep>:
{
    70d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    70d8:	4604      	mov	r4, r0
    70da:	460d      	mov	r5, r1
    70dc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    70e0:	2b00      	cmp	r3, #0
    70e2:	d14f      	bne.n	7184 <z_tick_sleep+0xb0>
	if (ticks == 0) {
    70e4:	ea54 0305 	orrs.w	r3, r4, r5
    70e8:	d05e      	beq.n	71a8 <z_tick_sleep+0xd4>
	if (Z_TICK_ABS(ticks) <= 0) {
    70ea:	f06f 0301 	mvn.w	r3, #1
    70ee:	1b1e      	subs	r6, r3, r4
    70f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    70f4:	eb63 0705 	sbc.w	r7, r3, r5
    70f8:	2e01      	cmp	r6, #1
    70fa:	f177 0300 	sbcs.w	r3, r7, #0
    70fe:	db57      	blt.n	71b0 <z_tick_sleep+0xdc>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7100:	f06f 0601 	mvn.w	r6, #1
    7104:	1b36      	subs	r6, r6, r4
    7106:	f04f 0320 	mov.w	r3, #32
    710a:	f3ef 8911 	mrs	r9, BASEPRI
    710e:	f383 8812 	msr	BASEPRI_MAX, r3
    7112:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7116:	4842      	ldr	r0, [pc, #264]	; (7220 <z_tick_sleep+0x14c>)
    7118:	f7fe fab0 	bl	567c <z_spin_lock_valid>
    711c:	2800      	cmp	r0, #0
    711e:	d04b      	beq.n	71b8 <z_tick_sleep+0xe4>
	z_spin_lock_set_owner(l);
    7120:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7220 <z_tick_sleep+0x14c>
    7124:	4640      	mov	r0, r8
    7126:	f7fe fac9 	bl	56bc <z_spin_lock_set_owner>
	pending_current = _current;
    712a:	4f3e      	ldr	r7, [pc, #248]	; (7224 <z_tick_sleep+0x150>)
    712c:	68b8      	ldr	r0, [r7, #8]
    712e:	4b3e      	ldr	r3, [pc, #248]	; (7228 <z_tick_sleep+0x154>)
    7130:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7132:	f7ff fbb9 	bl	68a8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7136:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7138:	4622      	mov	r2, r4
    713a:	462b      	mov	r3, r5
    713c:	493b      	ldr	r1, [pc, #236]	; (722c <z_tick_sleep+0x158>)
    713e:	3018      	adds	r0, #24
    7140:	f000 f9e0 	bl	7504 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7144:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7146:	7b53      	ldrb	r3, [r2, #13]
    7148:	f043 0310 	orr.w	r3, r3, #16
    714c:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    714e:	4640      	mov	r0, r8
    7150:	f7fe faa4 	bl	569c <z_spin_unlock_valid>
    7154:	2800      	cmp	r0, #0
    7156:	d03f      	beq.n	71d8 <z_tick_sleep+0x104>
    7158:	4648      	mov	r0, r9
    715a:	f7fa fd41 	bl	1be0 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    715e:	4b31      	ldr	r3, [pc, #196]	; (7224 <z_tick_sleep+0x150>)
    7160:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    7162:	7b5b      	ldrb	r3, [r3, #13]
    7164:	f013 0f10 	tst.w	r3, #16
    7168:	d146      	bne.n	71f8 <z_tick_sleep+0x124>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    716a:	2500      	movs	r5, #0
    716c:	f001 fdb5 	bl	8cda <sys_clock_tick_get_32>
    7170:	1a34      	subs	r4, r6, r0
    7172:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    7176:	2c01      	cmp	r4, #1
    7178:	f175 0300 	sbcs.w	r3, r5, #0
    717c:	da4d      	bge.n	721a <z_tick_sleep+0x146>
	return 0;
    717e:	2000      	movs	r0, #0
}
    7180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    7184:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7250 <z_tick_sleep+0x17c>
    7188:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    718c:	4642      	mov	r2, r8
    718e:	4928      	ldr	r1, [pc, #160]	; (7230 <z_tick_sleep+0x15c>)
    7190:	4828      	ldr	r0, [pc, #160]	; (7234 <z_tick_sleep+0x160>)
    7192:	f000 ff07 	bl	7fa4 <printk>
    7196:	4828      	ldr	r0, [pc, #160]	; (7238 <z_tick_sleep+0x164>)
    7198:	f000 ff04 	bl	7fa4 <printk>
    719c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    71a0:	4640      	mov	r0, r8
    71a2:	f001 f858 	bl	8256 <assert_post_action>
    71a6:	e79d      	b.n	70e4 <z_tick_sleep+0x10>
	z_impl_k_yield();
    71a8:	f7ff fee6 	bl	6f78 <z_impl_k_yield>
		return 0;
    71ac:	2000      	movs	r0, #0
    71ae:	e7e7      	b.n	7180 <z_tick_sleep+0xac>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    71b0:	f001 fd93 	bl	8cda <sys_clock_tick_get_32>
    71b4:	1906      	adds	r6, r0, r4
    71b6:	e7a6      	b.n	7106 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71b8:	4f20      	ldr	r7, [pc, #128]	; (723c <z_tick_sleep+0x168>)
    71ba:	2381      	movs	r3, #129	; 0x81
    71bc:	463a      	mov	r2, r7
    71be:	4920      	ldr	r1, [pc, #128]	; (7240 <z_tick_sleep+0x16c>)
    71c0:	481c      	ldr	r0, [pc, #112]	; (7234 <z_tick_sleep+0x160>)
    71c2:	f000 feef 	bl	7fa4 <printk>
    71c6:	4916      	ldr	r1, [pc, #88]	; (7220 <z_tick_sleep+0x14c>)
    71c8:	481e      	ldr	r0, [pc, #120]	; (7244 <z_tick_sleep+0x170>)
    71ca:	f000 feeb 	bl	7fa4 <printk>
    71ce:	2181      	movs	r1, #129	; 0x81
    71d0:	4638      	mov	r0, r7
    71d2:	f001 f840 	bl	8256 <assert_post_action>
    71d6:	e7a3      	b.n	7120 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71d8:	4c18      	ldr	r4, [pc, #96]	; (723c <z_tick_sleep+0x168>)
    71da:	23c3      	movs	r3, #195	; 0xc3
    71dc:	4622      	mov	r2, r4
    71de:	491a      	ldr	r1, [pc, #104]	; (7248 <z_tick_sleep+0x174>)
    71e0:	4814      	ldr	r0, [pc, #80]	; (7234 <z_tick_sleep+0x160>)
    71e2:	f000 fedf 	bl	7fa4 <printk>
    71e6:	4641      	mov	r1, r8
    71e8:	4818      	ldr	r0, [pc, #96]	; (724c <z_tick_sleep+0x178>)
    71ea:	f000 fedb 	bl	7fa4 <printk>
    71ee:	21c3      	movs	r1, #195	; 0xc3
    71f0:	4620      	mov	r0, r4
    71f2:	f001 f830 	bl	8256 <assert_post_action>
    71f6:	e7af      	b.n	7158 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    71f8:	4c15      	ldr	r4, [pc, #84]	; (7250 <z_tick_sleep+0x17c>)
    71fa:	f240 5319 	movw	r3, #1305	; 0x519
    71fe:	4622      	mov	r2, r4
    7200:	4914      	ldr	r1, [pc, #80]	; (7254 <z_tick_sleep+0x180>)
    7202:	480c      	ldr	r0, [pc, #48]	; (7234 <z_tick_sleep+0x160>)
    7204:	f000 fece 	bl	7fa4 <printk>
    7208:	480b      	ldr	r0, [pc, #44]	; (7238 <z_tick_sleep+0x164>)
    720a:	f000 fecb 	bl	7fa4 <printk>
    720e:	f240 5119 	movw	r1, #1305	; 0x519
    7212:	4620      	mov	r0, r4
    7214:	f001 f81f 	bl	8256 <assert_post_action>
    7218:	e7a7      	b.n	716a <z_tick_sleep+0x96>
		return ticks;
    721a:	4620      	mov	r0, r4
    721c:	e7b0      	b.n	7180 <z_tick_sleep+0xac>
    721e:	bf00      	nop
    7220:	20000fe4 	.word	0x20000fe4
    7224:	20000fa8 	.word	0x20000fa8
    7228:	20000fe0 	.word	0x20000fe0
    722c:	000067c9 	.word	0x000067c9
    7230:	00009cb0 	.word	0x00009cb0
    7234:	00009078 	.word	0x00009078
    7238:	00009d30 	.word	0x00009d30
    723c:	00009190 	.word	0x00009190
    7240:	000091e8 	.word	0x000091e8
    7244:	00009200 	.word	0x00009200
    7248:	000091b8 	.word	0x000091b8
    724c:	000091d0 	.word	0x000091d0
    7250:	00009dd8 	.word	0x00009dd8
    7254:	00009e94 	.word	0x00009e94

00007258 <z_impl_k_sleep>:
{
    7258:	b570      	push	{r4, r5, r6, lr}
    725a:	4604      	mov	r4, r0
    725c:	460d      	mov	r5, r1
    725e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7262:	bb13      	cbnz	r3, 72aa <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7264:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7268:	bf08      	it	eq
    726a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    726e:	d02d      	beq.n	72cc <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    7270:	4620      	mov	r0, r4
    7272:	4629      	mov	r1, r5
    7274:	f7ff ff2e 	bl	70d4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    7278:	4604      	mov	r4, r0
    727a:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    727c:	0169      	lsls	r1, r5, #5
    727e:	0143      	lsls	r3, r0, #5
    7280:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    7284:	1a18      	subs	r0, r3, r0
    7286:	eb62 0305 	sbc.w	r3, r2, r5
    728a:	009a      	lsls	r2, r3, #2
    728c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    7290:	0081      	lsls	r1, r0, #2
    7292:	4613      	mov	r3, r2
    7294:	1908      	adds	r0, r1, r4
    7296:	eb45 0303 	adc.w	r3, r5, r3
    729a:	00da      	lsls	r2, r3, #3
    729c:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    72a0:	00c1      	lsls	r1, r0, #3
    72a2:	0bc8      	lsrs	r0, r1, #15
    72a4:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    72a8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    72aa:	4e0c      	ldr	r6, [pc, #48]	; (72dc <z_impl_k_sleep+0x84>)
    72ac:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    72b0:	4632      	mov	r2, r6
    72b2:	490b      	ldr	r1, [pc, #44]	; (72e0 <z_impl_k_sleep+0x88>)
    72b4:	480b      	ldr	r0, [pc, #44]	; (72e4 <z_impl_k_sleep+0x8c>)
    72b6:	f000 fe75 	bl	7fa4 <printk>
    72ba:	480b      	ldr	r0, [pc, #44]	; (72e8 <z_impl_k_sleep+0x90>)
    72bc:	f000 fe72 	bl	7fa4 <printk>
    72c0:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    72c4:	4630      	mov	r0, r6
    72c6:	f000 ffc6 	bl	8256 <assert_post_action>
    72ca:	e7cb      	b.n	7264 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    72cc:	4b07      	ldr	r3, [pc, #28]	; (72ec <z_impl_k_sleep+0x94>)
    72ce:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    72d0:	f7ff fc84 	bl	6bdc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    72d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    72d8:	e7e6      	b.n	72a8 <z_impl_k_sleep+0x50>
    72da:	bf00      	nop
    72dc:	00009dd8 	.word	0x00009dd8
    72e0:	00009cb0 	.word	0x00009cb0
    72e4:	00009078 	.word	0x00009078
    72e8:	00009d30 	.word	0x00009d30
    72ec:	20000fa8 	.word	0x20000fa8

000072f0 <z_impl_z_current_get>:
}
    72f0:	4b01      	ldr	r3, [pc, #4]	; (72f8 <z_impl_z_current_get+0x8>)
    72f2:	6898      	ldr	r0, [r3, #8]
    72f4:	4770      	bx	lr
    72f6:	bf00      	nop
    72f8:	20000fa8 	.word	0x20000fa8

000072fc <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    72fc:	b570      	push	{r4, r5, r6, lr}
    72fe:	4604      	mov	r4, r0
    7300:	f04f 0320 	mov.w	r3, #32
    7304:	f3ef 8511 	mrs	r5, BASEPRI
    7308:	f383 8812 	msr	BASEPRI_MAX, r3
    730c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7310:	4840      	ldr	r0, [pc, #256]	; (7414 <z_thread_abort+0x118>)
    7312:	f7fe f9b3 	bl	567c <z_spin_lock_valid>
    7316:	b1b8      	cbz	r0, 7348 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    7318:	483e      	ldr	r0, [pc, #248]	; (7414 <z_thread_abort+0x118>)
    731a:	f7fe f9cf 	bl	56bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    731e:	7b63      	ldrb	r3, [r4, #13]
    7320:	f013 0f08 	tst.w	r3, #8
    7324:	d120      	bne.n	7368 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    7326:	4620      	mov	r0, r4
    7328:	f7ff fd68 	bl	6dfc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    732c:	4b3a      	ldr	r3, [pc, #232]	; (7418 <z_thread_abort+0x11c>)
    732e:	689b      	ldr	r3, [r3, #8]
    7330:	42a3      	cmp	r3, r4
    7332:	d032      	beq.n	739a <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7334:	4837      	ldr	r0, [pc, #220]	; (7414 <z_thread_abort+0x118>)
    7336:	f7fe f9b1 	bl	569c <z_spin_unlock_valid>
    733a:	2800      	cmp	r0, #0
    733c:	d059      	beq.n	73f2 <z_thread_abort+0xf6>
	__asm__ volatile(
    733e:	f385 8811 	msr	BASEPRI, r5
    7342:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7346:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7348:	4e34      	ldr	r6, [pc, #208]	; (741c <z_thread_abort+0x120>)
    734a:	2381      	movs	r3, #129	; 0x81
    734c:	4632      	mov	r2, r6
    734e:	4934      	ldr	r1, [pc, #208]	; (7420 <z_thread_abort+0x124>)
    7350:	4834      	ldr	r0, [pc, #208]	; (7424 <z_thread_abort+0x128>)
    7352:	f000 fe27 	bl	7fa4 <printk>
    7356:	492f      	ldr	r1, [pc, #188]	; (7414 <z_thread_abort+0x118>)
    7358:	4833      	ldr	r0, [pc, #204]	; (7428 <z_thread_abort+0x12c>)
    735a:	f000 fe23 	bl	7fa4 <printk>
    735e:	2181      	movs	r1, #129	; 0x81
    7360:	4630      	mov	r0, r6
    7362:	f000 ff78 	bl	8256 <assert_post_action>
    7366:	e7d7      	b.n	7318 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7368:	482a      	ldr	r0, [pc, #168]	; (7414 <z_thread_abort+0x118>)
    736a:	f7fe f997 	bl	569c <z_spin_unlock_valid>
    736e:	b120      	cbz	r0, 737a <z_thread_abort+0x7e>
    7370:	f385 8811 	msr	BASEPRI, r5
    7374:	f3bf 8f6f 	isb	sy
		return;
    7378:	e7e5      	b.n	7346 <z_thread_abort+0x4a>
    737a:	4c28      	ldr	r4, [pc, #160]	; (741c <z_thread_abort+0x120>)
    737c:	23ac      	movs	r3, #172	; 0xac
    737e:	4622      	mov	r2, r4
    7380:	492a      	ldr	r1, [pc, #168]	; (742c <z_thread_abort+0x130>)
    7382:	4828      	ldr	r0, [pc, #160]	; (7424 <z_thread_abort+0x128>)
    7384:	f000 fe0e 	bl	7fa4 <printk>
    7388:	4922      	ldr	r1, [pc, #136]	; (7414 <z_thread_abort+0x118>)
    738a:	4829      	ldr	r0, [pc, #164]	; (7430 <z_thread_abort+0x134>)
    738c:	f000 fe0a 	bl	7fa4 <printk>
    7390:	21ac      	movs	r1, #172	; 0xac
    7392:	4620      	mov	r0, r4
    7394:	f000 ff5f 	bl	8256 <assert_post_action>
    7398:	e7ea      	b.n	7370 <z_thread_abort+0x74>
    739a:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    739e:	2b00      	cmp	r3, #0
    73a0:	d1c8      	bne.n	7334 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73a2:	481c      	ldr	r0, [pc, #112]	; (7414 <z_thread_abort+0x118>)
    73a4:	f7fe f97a 	bl	569c <z_spin_unlock_valid>
    73a8:	b198      	cbz	r0, 73d2 <z_thread_abort+0xd6>
    73aa:	4628      	mov	r0, r5
    73ac:	f7fa fc18 	bl	1be0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    73b0:	4c20      	ldr	r4, [pc, #128]	; (7434 <z_thread_abort+0x138>)
    73b2:	f240 634b 	movw	r3, #1611	; 0x64b
    73b6:	4622      	mov	r2, r4
    73b8:	491f      	ldr	r1, [pc, #124]	; (7438 <z_thread_abort+0x13c>)
    73ba:	481a      	ldr	r0, [pc, #104]	; (7424 <z_thread_abort+0x128>)
    73bc:	f000 fdf2 	bl	7fa4 <printk>
    73c0:	481e      	ldr	r0, [pc, #120]	; (743c <z_thread_abort+0x140>)
    73c2:	f000 fdef 	bl	7fa4 <printk>
    73c6:	f240 614b 	movw	r1, #1611	; 0x64b
    73ca:	4620      	mov	r0, r4
    73cc:	f000 ff43 	bl	8256 <assert_post_action>
    73d0:	e7b0      	b.n	7334 <z_thread_abort+0x38>
    73d2:	4c12      	ldr	r4, [pc, #72]	; (741c <z_thread_abort+0x120>)
    73d4:	23c3      	movs	r3, #195	; 0xc3
    73d6:	4622      	mov	r2, r4
    73d8:	4914      	ldr	r1, [pc, #80]	; (742c <z_thread_abort+0x130>)
    73da:	4812      	ldr	r0, [pc, #72]	; (7424 <z_thread_abort+0x128>)
    73dc:	f000 fde2 	bl	7fa4 <printk>
    73e0:	490c      	ldr	r1, [pc, #48]	; (7414 <z_thread_abort+0x118>)
    73e2:	4813      	ldr	r0, [pc, #76]	; (7430 <z_thread_abort+0x134>)
    73e4:	f000 fdde 	bl	7fa4 <printk>
    73e8:	21c3      	movs	r1, #195	; 0xc3
    73ea:	4620      	mov	r0, r4
    73ec:	f000 ff33 	bl	8256 <assert_post_action>
    73f0:	e7db      	b.n	73aa <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73f2:	4c0a      	ldr	r4, [pc, #40]	; (741c <z_thread_abort+0x120>)
    73f4:	23ac      	movs	r3, #172	; 0xac
    73f6:	4622      	mov	r2, r4
    73f8:	490c      	ldr	r1, [pc, #48]	; (742c <z_thread_abort+0x130>)
    73fa:	480a      	ldr	r0, [pc, #40]	; (7424 <z_thread_abort+0x128>)
    73fc:	f000 fdd2 	bl	7fa4 <printk>
    7400:	4904      	ldr	r1, [pc, #16]	; (7414 <z_thread_abort+0x118>)
    7402:	480b      	ldr	r0, [pc, #44]	; (7430 <z_thread_abort+0x134>)
    7404:	f000 fdce 	bl	7fa4 <printk>
    7408:	21ac      	movs	r1, #172	; 0xac
    740a:	4620      	mov	r0, r4
    740c:	f000 ff23 	bl	8256 <assert_post_action>
    7410:	e795      	b.n	733e <z_thread_abort+0x42>
    7412:	bf00      	nop
    7414:	20000fe4 	.word	0x20000fe4
    7418:	20000fa8 	.word	0x20000fa8
    741c:	00009190 	.word	0x00009190
    7420:	000091e8 	.word	0x000091e8
    7424:	00009078 	.word	0x00009078
    7428:	00009200 	.word	0x00009200
    742c:	000091b8 	.word	0x000091b8
    7430:	000091d0 	.word	0x000091d0
    7434:	00009dd8 	.word	0x00009dd8
    7438:	00009074 	.word	0x00009074
    743c:	00009ed4 	.word	0x00009ed4

00007440 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    7440:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    7442:	4806      	ldr	r0, [pc, #24]	; (745c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    7444:	4a06      	ldr	r2, [pc, #24]	; (7460 <z_data_copy+0x20>)
    7446:	1a12      	subs	r2, r2, r0
    7448:	4906      	ldr	r1, [pc, #24]	; (7464 <z_data_copy+0x24>)
    744a:	f000 ffeb 	bl	8424 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    744e:	4a06      	ldr	r2, [pc, #24]	; (7468 <z_data_copy+0x28>)
    7450:	4906      	ldr	r1, [pc, #24]	; (746c <z_data_copy+0x2c>)
    7452:	4807      	ldr	r0, [pc, #28]	; (7470 <z_data_copy+0x30>)
    7454:	f000 ffe6 	bl	8424 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7458:	bd08      	pop	{r3, pc}
    745a:	bf00      	nop
    745c:	20000000 	.word	0x20000000
    7460:	20000218 	.word	0x20000218
    7464:	00009ffc 	.word	0x00009ffc
    7468:	00000000 	.word	0x00000000
    746c:	00009ffc 	.word	0x00009ffc
    7470:	20000000 	.word	0x20000000

00007474 <first>:
	return list->head == list;
    7474:	4b03      	ldr	r3, [pc, #12]	; (7484 <first+0x10>)
    7476:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7478:	4298      	cmp	r0, r3
    747a:	d000      	beq.n	747e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    747c:	4770      	bx	lr
    747e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    7480:	e7fc      	b.n	747c <first+0x8>
    7482:	bf00      	nop
    7484:	200000d8 	.word	0x200000d8

00007488 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7488:	b130      	cbz	r0, 7498 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    748a:	4a04      	ldr	r2, [pc, #16]	; (749c <next+0x14>)
    748c:	6852      	ldr	r2, [r2, #4]
    748e:	4290      	cmp	r0, r2
    7490:	d001      	beq.n	7496 <next+0xe>
    7492:	6800      	ldr	r0, [r0, #0]
    7494:	4770      	bx	lr
    7496:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    7498:	4770      	bx	lr
    749a:	bf00      	nop
    749c:	200000d8 	.word	0x200000d8

000074a0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    74a0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    74a2:	4b04      	ldr	r3, [pc, #16]	; (74b4 <elapsed+0x14>)
    74a4:	681b      	ldr	r3, [r3, #0]
    74a6:	b10b      	cbz	r3, 74ac <elapsed+0xc>
    74a8:	2000      	movs	r0, #0
}
    74aa:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    74ac:	f7fc fad6 	bl	3a5c <sys_clock_elapsed>
    74b0:	e7fb      	b.n	74aa <elapsed+0xa>
    74b2:	bf00      	nop
    74b4:	20000ff0 	.word	0x20000ff0

000074b8 <next_timeout>:

static int32_t next_timeout(void)
{
    74b8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    74ba:	f7ff ffdb 	bl	7474 <first>
    74be:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    74c0:	f7ff ffee 	bl	74a0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    74c4:	b18c      	cbz	r4, 74ea <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    74c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    74ca:	1a12      	subs	r2, r2, r0
    74cc:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    74d0:	2a01      	cmp	r2, #1
    74d2:	f173 0100 	sbcs.w	r1, r3, #0
    74d6:	db11      	blt.n	74fc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    74d8:	4610      	mov	r0, r2
    74da:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    74de:	f173 0300 	sbcs.w	r3, r3, #0
    74e2:	db04      	blt.n	74ee <next_timeout+0x36>
    74e4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    74e8:	e001      	b.n	74ee <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    74ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    74ee:	4b04      	ldr	r3, [pc, #16]	; (7500 <next_timeout+0x48>)
    74f0:	691b      	ldr	r3, [r3, #16]
    74f2:	b113      	cbz	r3, 74fa <next_timeout+0x42>
    74f4:	4283      	cmp	r3, r0
    74f6:	da00      	bge.n	74fa <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    74f8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    74fa:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    74fc:	2000      	movs	r0, #0
    74fe:	e7f6      	b.n	74ee <next_timeout+0x36>
    7500:	20000fa8 	.word	0x20000fa8

00007504 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7508:	b087      	sub	sp, #28
    750a:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    750c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7510:	bf08      	it	eq
    7512:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7516:	f000 80d3 	beq.w	76c0 <z_add_timeout+0x1bc>
    751a:	4604      	mov	r4, r0
    751c:	4616      	mov	r6, r2
    751e:	461f      	mov	r7, r3
	return node->next != NULL;
    7520:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7522:	b16b      	cbz	r3, 7540 <z_add_timeout+0x3c>
    7524:	4d68      	ldr	r5, [pc, #416]	; (76c8 <z_add_timeout+0x1c4>)
    7526:	235d      	movs	r3, #93	; 0x5d
    7528:	462a      	mov	r2, r5
    752a:	4968      	ldr	r1, [pc, #416]	; (76cc <z_add_timeout+0x1c8>)
    752c:	4868      	ldr	r0, [pc, #416]	; (76d0 <z_add_timeout+0x1cc>)
    752e:	f000 fd39 	bl	7fa4 <printk>
    7532:	4868      	ldr	r0, [pc, #416]	; (76d4 <z_add_timeout+0x1d0>)
    7534:	f000 fd36 	bl	7fa4 <printk>
    7538:	215d      	movs	r1, #93	; 0x5d
    753a:	4628      	mov	r0, r5
    753c:	f000 fe8b 	bl	8256 <assert_post_action>
	to->fn = fn;
    7540:	9b00      	ldr	r3, [sp, #0]
    7542:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
    7544:	2500      	movs	r5, #0
	__asm__ volatile(
    7546:	f04f 0320 	mov.w	r3, #32
    754a:	f3ef 8211 	mrs	r2, BASEPRI
    754e:	f383 8812 	msr	BASEPRI_MAX, r3
    7552:	f3bf 8f6f 	isb	sy
    7556:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7558:	485f      	ldr	r0, [pc, #380]	; (76d8 <z_add_timeout+0x1d4>)
    755a:	f7fe f88f 	bl	567c <z_spin_lock_valid>
    755e:	b140      	cbz	r0, 7572 <z_add_timeout+0x6e>
	z_spin_lock_set_owner(l);
    7560:	485d      	ldr	r0, [pc, #372]	; (76d8 <z_add_timeout+0x1d4>)
    7562:	f7fe f8ab 	bl	56bc <z_spin_lock_set_owner>
	return k;
    7566:	9b00      	ldr	r3, [sp, #0]
    7568:	9303      	str	r3, [sp, #12]
    756a:	e9cd ab00 	strd	sl, fp, [sp]
    756e:	46a3      	mov	fp, r4
    7570:	e040      	b.n	75f4 <z_add_timeout+0xf0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7572:	2381      	movs	r3, #129	; 0x81
    7574:	4a59      	ldr	r2, [pc, #356]	; (76dc <z_add_timeout+0x1d8>)
    7576:	495a      	ldr	r1, [pc, #360]	; (76e0 <z_add_timeout+0x1dc>)
    7578:	4855      	ldr	r0, [pc, #340]	; (76d0 <z_add_timeout+0x1cc>)
    757a:	f000 fd13 	bl	7fa4 <printk>
    757e:	4956      	ldr	r1, [pc, #344]	; (76d8 <z_add_timeout+0x1d4>)
    7580:	4858      	ldr	r0, [pc, #352]	; (76e4 <z_add_timeout+0x1e0>)
    7582:	f000 fd0f 	bl	7fa4 <printk>
    7586:	2181      	movs	r1, #129	; 0x81
    7588:	4854      	ldr	r0, [pc, #336]	; (76dc <z_add_timeout+0x1d8>)
    758a:	f000 fe64 	bl	8256 <assert_post_action>
    758e:	e7e7      	b.n	7560 <z_add_timeout+0x5c>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    7590:	2201      	movs	r2, #1
    7592:	2300      	movs	r3, #0
    7594:	e052      	b.n	763c <z_add_timeout+0x138>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7596:	f7ff ff83 	bl	74a0 <elapsed>
    759a:	1833      	adds	r3, r6, r0
    759c:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
    75a0:	1c5a      	adds	r2, r3, #1
    75a2:	f144 0300 	adc.w	r3, r4, #0
    75a6:	f8cb 2010 	str.w	r2, [fp, #16]
    75aa:	f8cb 3014 	str.w	r3, [fp, #20]
    75ae:	e049      	b.n	7644 <z_add_timeout+0x140>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    75b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    75b4:	1aa2      	subs	r2, r4, r2
    75b6:	9b05      	ldr	r3, [sp, #20]
    75b8:	eb65 0303 	sbc.w	r3, r5, r3
    75bc:	6102      	str	r2, [r0, #16]
    75be:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    75c0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    75c2:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
    75c6:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
    75ca:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
    75ce:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    75d2:	2800      	cmp	r0, #0
    75d4:	d04c      	beq.n	7670 <z_add_timeout+0x16c>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    75d6:	f7ff ff4d 	bl	7474 <first>
    75da:	4583      	cmp	fp, r0
    75dc:	d053      	beq.n	7686 <z_add_timeout+0x182>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75de:	483e      	ldr	r0, [pc, #248]	; (76d8 <z_add_timeout+0x1d4>)
    75e0:	f7fe f85c 	bl	569c <z_spin_unlock_valid>
    75e4:	2800      	cmp	r0, #0
    75e6:	d05b      	beq.n	76a0 <z_add_timeout+0x19c>
	__asm__ volatile(
    75e8:	9b03      	ldr	r3, [sp, #12]
    75ea:	f383 8811 	msr	BASEPRI, r3
    75ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    75f2:	2501      	movs	r5, #1
    75f4:	2d00      	cmp	r5, #0
    75f6:	d163      	bne.n	76c0 <z_add_timeout+0x1bc>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    75f8:	f06f 0301 	mvn.w	r3, #1
    75fc:	ebb3 0806 	subs.w	r8, r3, r6
    7600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7604:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7608:	f1b8 0f00 	cmp.w	r8, #0
    760c:	f179 0300 	sbcs.w	r3, r9, #0
    7610:	dbc1      	blt.n	7596 <z_add_timeout+0x92>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7612:	4a35      	ldr	r2, [pc, #212]	; (76e8 <z_add_timeout+0x1e4>)
    7614:	6813      	ldr	r3, [r2, #0]
    7616:	6852      	ldr	r2, [r2, #4]
    7618:	18f3      	adds	r3, r6, r3
    761a:	eb47 0202 	adc.w	r2, r7, r2
    761e:	f06f 0101 	mvn.w	r1, #1
    7622:	1acb      	subs	r3, r1, r3
    7624:	9300      	str	r3, [sp, #0]
    7626:	eb60 0302 	sbc.w	r3, r0, r2
    762a:	9301      	str	r3, [sp, #4]
			to->dticks = MAX(1, ticks);
    762c:	e9dd 0100 	ldrd	r0, r1, [sp]
    7630:	4602      	mov	r2, r0
    7632:	460b      	mov	r3, r1
    7634:	2801      	cmp	r0, #1
    7636:	f171 0100 	sbcs.w	r1, r1, #0
    763a:	dba9      	blt.n	7590 <z_add_timeout+0x8c>
    763c:	f8cb 2010 	str.w	r2, [fp, #16]
    7640:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    7644:	f7ff ff16 	bl	7474 <first>
    7648:	2800      	cmp	r0, #0
    764a:	d0c2      	beq.n	75d2 <z_add_timeout+0xce>
			if (t->dticks > to->dticks) {
    764c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7650:	e9db 2304 	ldrd	r2, r3, [fp, #16]
    7654:	42a2      	cmp	r2, r4
    7656:	eb73 0105 	sbcs.w	r1, r3, r5
    765a:	dba9      	blt.n	75b0 <z_add_timeout+0xac>
			to->dticks -= t->dticks;
    765c:	1b11      	subs	r1, r2, r4
    765e:	eb63 0305 	sbc.w	r3, r3, r5
    7662:	f8cb 1010 	str.w	r1, [fp, #16]
    7666:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    766a:	f7ff ff0d 	bl	7488 <next>
    766e:	e7eb      	b.n	7648 <z_add_timeout+0x144>
	sys_dnode_t *const tail = list->tail;
    7670:	4b1e      	ldr	r3, [pc, #120]	; (76ec <z_add_timeout+0x1e8>)
    7672:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    7674:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
    7678:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
    767c:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
    7680:	f8c3 b004 	str.w	fp, [r3, #4]
}
    7684:	e7a7      	b.n	75d6 <z_add_timeout+0xd2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7686:	f7ff ff17 	bl	74b8 <next_timeout>

			if (next_time == 0 ||
    768a:	4603      	mov	r3, r0
    768c:	b118      	cbz	r0, 7696 <z_add_timeout+0x192>
			    _current_cpu->slice_ticks != next_time) {
    768e:	4a18      	ldr	r2, [pc, #96]	; (76f0 <z_add_timeout+0x1ec>)
    7690:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    7692:	4282      	cmp	r2, r0
    7694:	d0a3      	beq.n	75de <z_add_timeout+0xda>
				sys_clock_set_timeout(next_time, false);
    7696:	2100      	movs	r1, #0
    7698:	4618      	mov	r0, r3
    769a:	f7fc f9ab 	bl	39f4 <sys_clock_set_timeout>
    769e:	e79e      	b.n	75de <z_add_timeout+0xda>
    76a0:	4c0e      	ldr	r4, [pc, #56]	; (76dc <z_add_timeout+0x1d8>)
    76a2:	23ac      	movs	r3, #172	; 0xac
    76a4:	4622      	mov	r2, r4
    76a6:	4913      	ldr	r1, [pc, #76]	; (76f4 <z_add_timeout+0x1f0>)
    76a8:	4809      	ldr	r0, [pc, #36]	; (76d0 <z_add_timeout+0x1cc>)
    76aa:	f000 fc7b 	bl	7fa4 <printk>
    76ae:	490a      	ldr	r1, [pc, #40]	; (76d8 <z_add_timeout+0x1d4>)
    76b0:	4811      	ldr	r0, [pc, #68]	; (76f8 <z_add_timeout+0x1f4>)
    76b2:	f000 fc77 	bl	7fa4 <printk>
    76b6:	21ac      	movs	r1, #172	; 0xac
    76b8:	4620      	mov	r0, r4
    76ba:	f000 fdcc 	bl	8256 <assert_post_action>
    76be:	e793      	b.n	75e8 <z_add_timeout+0xe4>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    76c0:	b007      	add	sp, #28
    76c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76c6:	bf00      	nop
    76c8:	00009ef8 	.word	0x00009ef8
    76cc:	00009f1c 	.word	0x00009f1c
    76d0:	00009078 	.word	0x00009078
    76d4:	00009d30 	.word	0x00009d30
    76d8:	20000ff4 	.word	0x20000ff4
    76dc:	00009190 	.word	0x00009190
    76e0:	000091e8 	.word	0x000091e8
    76e4:	00009200 	.word	0x00009200
    76e8:	200004f8 	.word	0x200004f8
    76ec:	200000d8 	.word	0x200000d8
    76f0:	20000fa8 	.word	0x20000fa8
    76f4:	000091b8 	.word	0x000091b8
    76f8:	000091d0 	.word	0x000091d0

000076fc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    76fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7700:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    7702:	2400      	movs	r4, #0
	__asm__ volatile(
    7704:	f04f 0320 	mov.w	r3, #32
    7708:	f3ef 8711 	mrs	r7, BASEPRI
    770c:	f383 8812 	msr	BASEPRI_MAX, r3
    7710:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7714:	481f      	ldr	r0, [pc, #124]	; (7794 <z_abort_timeout+0x98>)
    7716:	f7fd ffb1 	bl	567c <z_spin_lock_valid>
    771a:	b128      	cbz	r0, 7728 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    771c:	481d      	ldr	r0, [pc, #116]	; (7794 <z_abort_timeout+0x98>)
    771e:	f7fd ffcd 	bl	56bc <z_spin_lock_set_owner>
	int ret = -EINVAL;
    7722:	f06f 0815 	mvn.w	r8, #21
	return k;
    7726:	e01c      	b.n	7762 <z_abort_timeout+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7728:	4e1b      	ldr	r6, [pc, #108]	; (7798 <z_abort_timeout+0x9c>)
    772a:	2381      	movs	r3, #129	; 0x81
    772c:	4632      	mov	r2, r6
    772e:	491b      	ldr	r1, [pc, #108]	; (779c <z_abort_timeout+0xa0>)
    7730:	481b      	ldr	r0, [pc, #108]	; (77a0 <z_abort_timeout+0xa4>)
    7732:	f000 fc37 	bl	7fa4 <printk>
    7736:	4917      	ldr	r1, [pc, #92]	; (7794 <z_abort_timeout+0x98>)
    7738:	481a      	ldr	r0, [pc, #104]	; (77a4 <z_abort_timeout+0xa8>)
    773a:	f000 fc33 	bl	7fa4 <printk>
    773e:	2181      	movs	r1, #129	; 0x81
    7740:	4630      	mov	r0, r6
    7742:	f000 fd88 	bl	8256 <assert_post_action>
    7746:	e7e9      	b.n	771c <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
    7748:	4628      	mov	r0, r5
    774a:	f001 faaf 	bl	8cac <remove_timeout>
			ret = 0;
    774e:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7750:	4810      	ldr	r0, [pc, #64]	; (7794 <z_abort_timeout+0x98>)
    7752:	f7fd ffa3 	bl	569c <z_spin_unlock_valid>
    7756:	b150      	cbz	r0, 776e <z_abort_timeout+0x72>
	__asm__ volatile(
    7758:	f387 8811 	msr	BASEPRI, r7
    775c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7760:	2401      	movs	r4, #1
    7762:	4626      	mov	r6, r4
    7764:	b99c      	cbnz	r4, 778e <z_abort_timeout+0x92>
	return node->next != NULL;
    7766:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    7768:	2b00      	cmp	r3, #0
    776a:	d1ed      	bne.n	7748 <z_abort_timeout+0x4c>
    776c:	e7f0      	b.n	7750 <z_abort_timeout+0x54>
    776e:	4c0a      	ldr	r4, [pc, #40]	; (7798 <z_abort_timeout+0x9c>)
    7770:	23ac      	movs	r3, #172	; 0xac
    7772:	4622      	mov	r2, r4
    7774:	490c      	ldr	r1, [pc, #48]	; (77a8 <z_abort_timeout+0xac>)
    7776:	480a      	ldr	r0, [pc, #40]	; (77a0 <z_abort_timeout+0xa4>)
    7778:	f000 fc14 	bl	7fa4 <printk>
    777c:	4905      	ldr	r1, [pc, #20]	; (7794 <z_abort_timeout+0x98>)
    777e:	480b      	ldr	r0, [pc, #44]	; (77ac <z_abort_timeout+0xb0>)
    7780:	f000 fc10 	bl	7fa4 <printk>
    7784:	21ac      	movs	r1, #172	; 0xac
    7786:	4620      	mov	r0, r4
    7788:	f000 fd65 	bl	8256 <assert_post_action>
    778c:	e7e4      	b.n	7758 <z_abort_timeout+0x5c>
		}
	}

	return ret;
}
    778e:	4640      	mov	r0, r8
    7790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7794:	20000ff4 	.word	0x20000ff4
    7798:	00009190 	.word	0x00009190
    779c:	000091e8 	.word	0x000091e8
    77a0:	00009078 	.word	0x00009078
    77a4:	00009200 	.word	0x00009200
    77a8:	000091b8 	.word	0x000091b8
    77ac:	000091d0 	.word	0x000091d0

000077b0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    77b0:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    77b2:	2500      	movs	r5, #0
	__asm__ volatile(
    77b4:	f04f 0320 	mov.w	r3, #32
    77b8:	f3ef 8611 	mrs	r6, BASEPRI
    77bc:	f383 8812 	msr	BASEPRI_MAX, r3
    77c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77c4:	481c      	ldr	r0, [pc, #112]	; (7838 <z_get_next_timeout_expiry+0x88>)
    77c6:	f7fd ff59 	bl	567c <z_spin_lock_valid>
    77ca:	b128      	cbz	r0, 77d8 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    77cc:	481a      	ldr	r0, [pc, #104]	; (7838 <z_get_next_timeout_expiry+0x88>)
    77ce:	f7fd ff75 	bl	56bc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    77d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    77d6:	e023      	b.n	7820 <z_get_next_timeout_expiry+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77d8:	4c18      	ldr	r4, [pc, #96]	; (783c <z_get_next_timeout_expiry+0x8c>)
    77da:	2381      	movs	r3, #129	; 0x81
    77dc:	4622      	mov	r2, r4
    77de:	4918      	ldr	r1, [pc, #96]	; (7840 <z_get_next_timeout_expiry+0x90>)
    77e0:	4818      	ldr	r0, [pc, #96]	; (7844 <z_get_next_timeout_expiry+0x94>)
    77e2:	f000 fbdf 	bl	7fa4 <printk>
    77e6:	4914      	ldr	r1, [pc, #80]	; (7838 <z_get_next_timeout_expiry+0x88>)
    77e8:	4817      	ldr	r0, [pc, #92]	; (7848 <z_get_next_timeout_expiry+0x98>)
    77ea:	f000 fbdb 	bl	7fa4 <printk>
    77ee:	2181      	movs	r1, #129	; 0x81
    77f0:	4620      	mov	r0, r4
    77f2:	f000 fd30 	bl	8256 <assert_post_action>
    77f6:	e7e9      	b.n	77cc <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77f8:	4d10      	ldr	r5, [pc, #64]	; (783c <z_get_next_timeout_expiry+0x8c>)
    77fa:	23ac      	movs	r3, #172	; 0xac
    77fc:	462a      	mov	r2, r5
    77fe:	4913      	ldr	r1, [pc, #76]	; (784c <z_get_next_timeout_expiry+0x9c>)
    7800:	4810      	ldr	r0, [pc, #64]	; (7844 <z_get_next_timeout_expiry+0x94>)
    7802:	f000 fbcf 	bl	7fa4 <printk>
    7806:	490c      	ldr	r1, [pc, #48]	; (7838 <z_get_next_timeout_expiry+0x88>)
    7808:	4811      	ldr	r0, [pc, #68]	; (7850 <z_get_next_timeout_expiry+0xa0>)
    780a:	f000 fbcb 	bl	7fa4 <printk>
    780e:	21ac      	movs	r1, #172	; 0xac
    7810:	4628      	mov	r0, r5
    7812:	f000 fd20 	bl	8256 <assert_post_action>
	__asm__ volatile(
    7816:	f386 8811 	msr	BASEPRI, r6
    781a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    781e:	2501      	movs	r5, #1
    7820:	b945      	cbnz	r5, 7834 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    7822:	f7ff fe49 	bl	74b8 <next_timeout>
    7826:	4604      	mov	r4, r0
    7828:	4803      	ldr	r0, [pc, #12]	; (7838 <z_get_next_timeout_expiry+0x88>)
    782a:	f7fd ff37 	bl	569c <z_spin_unlock_valid>
    782e:	2800      	cmp	r0, #0
    7830:	d1f1      	bne.n	7816 <z_get_next_timeout_expiry+0x66>
    7832:	e7e1      	b.n	77f8 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    7834:	4620      	mov	r0, r4
    7836:	bd70      	pop	{r4, r5, r6, pc}
    7838:	20000ff4 	.word	0x20000ff4
    783c:	00009190 	.word	0x00009190
    7840:	000091e8 	.word	0x000091e8
    7844:	00009078 	.word	0x00009078
    7848:	00009200 	.word	0x00009200
    784c:	000091b8 	.word	0x000091b8
    7850:	000091d0 	.word	0x000091d0

00007854 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7858:	4607      	mov	r7, r0
    785a:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    785c:	2500      	movs	r5, #0
	__asm__ volatile(
    785e:	f04f 0320 	mov.w	r3, #32
    7862:	f3ef 8611 	mrs	r6, BASEPRI
    7866:	f383 8812 	msr	BASEPRI_MAX, r3
    786a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    786e:	4825      	ldr	r0, [pc, #148]	; (7904 <z_set_timeout_expiry+0xb0>)
    7870:	f7fd ff04 	bl	567c <z_spin_lock_valid>
    7874:	b118      	cbz	r0, 787e <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    7876:	4823      	ldr	r0, [pc, #140]	; (7904 <z_set_timeout_expiry+0xb0>)
    7878:	f7fd ff20 	bl	56bc <z_spin_lock_set_owner>
	return k;
    787c:	e01e      	b.n	78bc <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    787e:	4c22      	ldr	r4, [pc, #136]	; (7908 <z_set_timeout_expiry+0xb4>)
    7880:	2381      	movs	r3, #129	; 0x81
    7882:	4622      	mov	r2, r4
    7884:	4921      	ldr	r1, [pc, #132]	; (790c <z_set_timeout_expiry+0xb8>)
    7886:	4822      	ldr	r0, [pc, #136]	; (7910 <z_set_timeout_expiry+0xbc>)
    7888:	f000 fb8c 	bl	7fa4 <printk>
    788c:	491d      	ldr	r1, [pc, #116]	; (7904 <z_set_timeout_expiry+0xb0>)
    788e:	4821      	ldr	r0, [pc, #132]	; (7914 <z_set_timeout_expiry+0xc0>)
    7890:	f000 fb88 	bl	7fa4 <printk>
    7894:	2181      	movs	r1, #129	; 0x81
    7896:	4620      	mov	r0, r4
    7898:	f000 fcdd 	bl	8256 <assert_post_action>
    789c:	e7eb      	b.n	7876 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    789e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    78a0:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    78a4:	2801      	cmp	r0, #1
    78a6:	dd00      	ble.n	78aa <z_set_timeout_expiry+0x56>
    78a8:	b99c      	cbnz	r4, 78d2 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78aa:	4816      	ldr	r0, [pc, #88]	; (7904 <z_set_timeout_expiry+0xb0>)
    78ac:	f7fd fef6 	bl	569c <z_spin_unlock_valid>
    78b0:	b1b0      	cbz	r0, 78e0 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    78b2:	f386 8811 	msr	BASEPRI, r6
    78b6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    78ba:	2501      	movs	r5, #1
    78bc:	462c      	mov	r4, r5
    78be:	b9fd      	cbnz	r5, 7900 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    78c0:	f7ff fdfa 	bl	74b8 <next_timeout>
			      || (ticks <= next_to);
    78c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    78c8:	d0e9      	beq.n	789e <z_set_timeout_expiry+0x4a>
    78ca:	42b8      	cmp	r0, r7
    78cc:	dbe8      	blt.n	78a0 <z_set_timeout_expiry+0x4c>
    78ce:	2401      	movs	r4, #1
    78d0:	e7e6      	b.n	78a0 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    78d2:	4641      	mov	r1, r8
    78d4:	42b8      	cmp	r0, r7
    78d6:	bfa8      	it	ge
    78d8:	4638      	movge	r0, r7
    78da:	f7fc f88b 	bl	39f4 <sys_clock_set_timeout>
    78de:	e7e4      	b.n	78aa <z_set_timeout_expiry+0x56>
    78e0:	4c09      	ldr	r4, [pc, #36]	; (7908 <z_set_timeout_expiry+0xb4>)
    78e2:	23ac      	movs	r3, #172	; 0xac
    78e4:	4622      	mov	r2, r4
    78e6:	490c      	ldr	r1, [pc, #48]	; (7918 <z_set_timeout_expiry+0xc4>)
    78e8:	4809      	ldr	r0, [pc, #36]	; (7910 <z_set_timeout_expiry+0xbc>)
    78ea:	f000 fb5b 	bl	7fa4 <printk>
    78ee:	4905      	ldr	r1, [pc, #20]	; (7904 <z_set_timeout_expiry+0xb0>)
    78f0:	480a      	ldr	r0, [pc, #40]	; (791c <z_set_timeout_expiry+0xc8>)
    78f2:	f000 fb57 	bl	7fa4 <printk>
    78f6:	21ac      	movs	r1, #172	; 0xac
    78f8:	4620      	mov	r0, r4
    78fa:	f000 fcac 	bl	8256 <assert_post_action>
    78fe:	e7d8      	b.n	78b2 <z_set_timeout_expiry+0x5e>
		}
	}
}
    7900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7904:	20000ff4 	.word	0x20000ff4
    7908:	00009190 	.word	0x00009190
    790c:	000091e8 	.word	0x000091e8
    7910:	00009078 	.word	0x00009078
    7914:	00009200 	.word	0x00009200
    7918:	000091b8 	.word	0x000091b8
    791c:	000091d0 	.word	0x000091d0

00007920 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7922:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7924:	f7fe fdb0 	bl	6488 <z_time_slice>
	__asm__ volatile(
    7928:	f04f 0320 	mov.w	r3, #32
    792c:	f3ef 8411 	mrs	r4, BASEPRI
    7930:	f383 8812 	msr	BASEPRI_MAX, r3
    7934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7938:	4854      	ldr	r0, [pc, #336]	; (7a8c <sys_clock_announce+0x16c>)
    793a:	f7fd fe9f 	bl	567c <z_spin_lock_valid>
    793e:	b128      	cbz	r0, 794c <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    7940:	4852      	ldr	r0, [pc, #328]	; (7a8c <sys_clock_announce+0x16c>)
    7942:	f7fd febb 	bl	56bc <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7946:	4b52      	ldr	r3, [pc, #328]	; (7a90 <sys_clock_announce+0x170>)
    7948:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    794a:	e031      	b.n	79b0 <sys_clock_announce+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    794c:	4e51      	ldr	r6, [pc, #324]	; (7a94 <sys_clock_announce+0x174>)
    794e:	2381      	movs	r3, #129	; 0x81
    7950:	4632      	mov	r2, r6
    7952:	4951      	ldr	r1, [pc, #324]	; (7a98 <sys_clock_announce+0x178>)
    7954:	4851      	ldr	r0, [pc, #324]	; (7a9c <sys_clock_announce+0x17c>)
    7956:	f000 fb25 	bl	7fa4 <printk>
    795a:	494c      	ldr	r1, [pc, #304]	; (7a8c <sys_clock_announce+0x16c>)
    795c:	4850      	ldr	r0, [pc, #320]	; (7aa0 <sys_clock_announce+0x180>)
    795e:	f000 fb21 	bl	7fa4 <printk>
    7962:	2181      	movs	r1, #129	; 0x81
    7964:	4630      	mov	r0, r6
    7966:	f000 fc76 	bl	8256 <assert_post_action>
    796a:	e7e9      	b.n	7940 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    796c:	4e49      	ldr	r6, [pc, #292]	; (7a94 <sys_clock_announce+0x174>)
    796e:	23ac      	movs	r3, #172	; 0xac
    7970:	4632      	mov	r2, r6
    7972:	494c      	ldr	r1, [pc, #304]	; (7aa4 <sys_clock_announce+0x184>)
    7974:	4849      	ldr	r0, [pc, #292]	; (7a9c <sys_clock_announce+0x17c>)
    7976:	f000 fb15 	bl	7fa4 <printk>
    797a:	4944      	ldr	r1, [pc, #272]	; (7a8c <sys_clock_announce+0x16c>)
    797c:	484a      	ldr	r0, [pc, #296]	; (7aa8 <sys_clock_announce+0x188>)
    797e:	f000 fb11 	bl	7fa4 <printk>
    7982:	21ac      	movs	r1, #172	; 0xac
    7984:	4630      	mov	r0, r6
    7986:	f000 fc66 	bl	8256 <assert_post_action>
    798a:	e035      	b.n	79f8 <sys_clock_announce+0xd8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    798c:	4d41      	ldr	r5, [pc, #260]	; (7a94 <sys_clock_announce+0x174>)
    798e:	2381      	movs	r3, #129	; 0x81
    7990:	462a      	mov	r2, r5
    7992:	4941      	ldr	r1, [pc, #260]	; (7a98 <sys_clock_announce+0x178>)
    7994:	4841      	ldr	r0, [pc, #260]	; (7a9c <sys_clock_announce+0x17c>)
    7996:	f000 fb05 	bl	7fa4 <printk>
    799a:	493c      	ldr	r1, [pc, #240]	; (7a8c <sys_clock_announce+0x16c>)
    799c:	4840      	ldr	r0, [pc, #256]	; (7aa0 <sys_clock_announce+0x180>)
    799e:	f000 fb01 	bl	7fa4 <printk>
    79a2:	2181      	movs	r1, #129	; 0x81
    79a4:	4628      	mov	r0, r5
    79a6:	f000 fc56 	bl	8256 <assert_post_action>
	z_spin_lock_set_owner(l);
    79aa:	4838      	ldr	r0, [pc, #224]	; (7a8c <sys_clock_announce+0x16c>)
    79ac:	f7fd fe86 	bl	56bc <z_spin_lock_set_owner>
    79b0:	f7ff fd60 	bl	7474 <first>
    79b4:	4605      	mov	r5, r0
    79b6:	2800      	cmp	r0, #0
    79b8:	d033      	beq.n	7a22 <sys_clock_announce+0x102>
    79ba:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    79be:	4b34      	ldr	r3, [pc, #208]	; (7a90 <sys_clock_announce+0x170>)
    79c0:	6819      	ldr	r1, [r3, #0]
    79c2:	17cb      	asrs	r3, r1, #31
    79c4:	42b1      	cmp	r1, r6
    79c6:	41bb      	sbcs	r3, r7
    79c8:	db2b      	blt.n	7a22 <sys_clock_announce+0x102>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    79ca:	4838      	ldr	r0, [pc, #224]	; (7aac <sys_clock_announce+0x18c>)
    79cc:	e9d0 2300 	ldrd	r2, r3, [r0]
    79d0:	1992      	adds	r2, r2, r6
    79d2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
    79d6:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
    79da:	1b89      	subs	r1, r1, r6
    79dc:	4b2c      	ldr	r3, [pc, #176]	; (7a90 <sys_clock_announce+0x170>)
    79de:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
    79e0:	2200      	movs	r2, #0
    79e2:	2300      	movs	r3, #0
    79e4:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
    79e8:	4628      	mov	r0, r5
    79ea:	f001 f95f 	bl	8cac <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79ee:	4827      	ldr	r0, [pc, #156]	; (7a8c <sys_clock_announce+0x16c>)
    79f0:	f7fd fe54 	bl	569c <z_spin_unlock_valid>
    79f4:	2800      	cmp	r0, #0
    79f6:	d0b9      	beq.n	796c <sys_clock_announce+0x4c>
	__asm__ volatile(
    79f8:	f384 8811 	msr	BASEPRI, r4
    79fc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    7a00:	68ab      	ldr	r3, [r5, #8]
    7a02:	4628      	mov	r0, r5
    7a04:	4798      	blx	r3
	__asm__ volatile(
    7a06:	f04f 0320 	mov.w	r3, #32
    7a0a:	f3ef 8411 	mrs	r4, BASEPRI
    7a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    7a12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a16:	481d      	ldr	r0, [pc, #116]	; (7a8c <sys_clock_announce+0x16c>)
    7a18:	f7fd fe30 	bl	567c <z_spin_lock_valid>
    7a1c:	2800      	cmp	r0, #0
    7a1e:	d1c4      	bne.n	79aa <sys_clock_announce+0x8a>
    7a20:	e7b4      	b.n	798c <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    7a22:	b145      	cbz	r5, 7a36 <sys_clock_announce+0x116>
		first()->dticks -= announce_remaining;
    7a24:	4b1a      	ldr	r3, [pc, #104]	; (7a90 <sys_clock_announce+0x170>)
    7a26:	6819      	ldr	r1, [r3, #0]
    7a28:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    7a2c:	1a52      	subs	r2, r2, r1
    7a2e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    7a32:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
    7a36:	481d      	ldr	r0, [pc, #116]	; (7aac <sys_clock_announce+0x18c>)
    7a38:	4915      	ldr	r1, [pc, #84]	; (7a90 <sys_clock_announce+0x170>)
    7a3a:	680d      	ldr	r5, [r1, #0]
    7a3c:	e9d0 2300 	ldrd	r2, r3, [r0]
    7a40:	1952      	adds	r2, r2, r5
    7a42:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    7a46:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    7a4a:	2500      	movs	r5, #0
    7a4c:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7a4e:	f7ff fd33 	bl	74b8 <next_timeout>
    7a52:	4629      	mov	r1, r5
    7a54:	f7fb ffce 	bl	39f4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a58:	480c      	ldr	r0, [pc, #48]	; (7a8c <sys_clock_announce+0x16c>)
    7a5a:	f7fd fe1f 	bl	569c <z_spin_unlock_valid>
    7a5e:	b120      	cbz	r0, 7a6a <sys_clock_announce+0x14a>
	__asm__ volatile(
    7a60:	f384 8811 	msr	BASEPRI, r4
    7a64:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a6a:	4d0a      	ldr	r5, [pc, #40]	; (7a94 <sys_clock_announce+0x174>)
    7a6c:	23ac      	movs	r3, #172	; 0xac
    7a6e:	462a      	mov	r2, r5
    7a70:	490c      	ldr	r1, [pc, #48]	; (7aa4 <sys_clock_announce+0x184>)
    7a72:	480a      	ldr	r0, [pc, #40]	; (7a9c <sys_clock_announce+0x17c>)
    7a74:	f000 fa96 	bl	7fa4 <printk>
    7a78:	4904      	ldr	r1, [pc, #16]	; (7a8c <sys_clock_announce+0x16c>)
    7a7a:	480b      	ldr	r0, [pc, #44]	; (7aa8 <sys_clock_announce+0x188>)
    7a7c:	f000 fa92 	bl	7fa4 <printk>
    7a80:	21ac      	movs	r1, #172	; 0xac
    7a82:	4628      	mov	r0, r5
    7a84:	f000 fbe7 	bl	8256 <assert_post_action>
    7a88:	e7ea      	b.n	7a60 <sys_clock_announce+0x140>
    7a8a:	bf00      	nop
    7a8c:	20000ff4 	.word	0x20000ff4
    7a90:	20000ff0 	.word	0x20000ff0
    7a94:	00009190 	.word	0x00009190
    7a98:	000091e8 	.word	0x000091e8
    7a9c:	00009078 	.word	0x00009078
    7aa0:	00009200 	.word	0x00009200
    7aa4:	000091b8 	.word	0x000091b8
    7aa8:	000091d0 	.word	0x000091d0
    7aac:	200004f8 	.word	0x200004f8

00007ab0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    7ab2:	2400      	movs	r4, #0
	__asm__ volatile(
    7ab4:	f04f 0320 	mov.w	r3, #32
    7ab8:	f3ef 8511 	mrs	r5, BASEPRI
    7abc:	f383 8812 	msr	BASEPRI_MAX, r3
    7ac0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ac4:	481f      	ldr	r0, [pc, #124]	; (7b44 <sys_clock_tick_get+0x94>)
    7ac6:	f7fd fdd9 	bl	567c <z_spin_lock_valid>
    7aca:	b128      	cbz	r0, 7ad8 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    7acc:	481d      	ldr	r0, [pc, #116]	; (7b44 <sys_clock_tick_get+0x94>)
    7ace:	f7fd fdf5 	bl	56bc <z_spin_lock_set_owner>
	uint64_t t = 0U;
    7ad2:	2600      	movs	r6, #0
    7ad4:	2700      	movs	r7, #0
	return k;
    7ad6:	e023      	b.n	7b20 <sys_clock_tick_get+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ad8:	4e1b      	ldr	r6, [pc, #108]	; (7b48 <sys_clock_tick_get+0x98>)
    7ada:	2381      	movs	r3, #129	; 0x81
    7adc:	4632      	mov	r2, r6
    7ade:	491b      	ldr	r1, [pc, #108]	; (7b4c <sys_clock_tick_get+0x9c>)
    7ae0:	481b      	ldr	r0, [pc, #108]	; (7b50 <sys_clock_tick_get+0xa0>)
    7ae2:	f000 fa5f 	bl	7fa4 <printk>
    7ae6:	4917      	ldr	r1, [pc, #92]	; (7b44 <sys_clock_tick_get+0x94>)
    7ae8:	481a      	ldr	r0, [pc, #104]	; (7b54 <sys_clock_tick_get+0xa4>)
    7aea:	f000 fa5b 	bl	7fa4 <printk>
    7aee:	2181      	movs	r1, #129	; 0x81
    7af0:	4630      	mov	r0, r6
    7af2:	f000 fbb0 	bl	8256 <assert_post_action>
    7af6:	e7e9      	b.n	7acc <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7af8:	4c13      	ldr	r4, [pc, #76]	; (7b48 <sys_clock_tick_get+0x98>)
    7afa:	23ac      	movs	r3, #172	; 0xac
    7afc:	4622      	mov	r2, r4
    7afe:	4916      	ldr	r1, [pc, #88]	; (7b58 <sys_clock_tick_get+0xa8>)
    7b00:	4813      	ldr	r0, [pc, #76]	; (7b50 <sys_clock_tick_get+0xa0>)
    7b02:	f000 fa4f 	bl	7fa4 <printk>
    7b06:	490f      	ldr	r1, [pc, #60]	; (7b44 <sys_clock_tick_get+0x94>)
    7b08:	4814      	ldr	r0, [pc, #80]	; (7b5c <sys_clock_tick_get+0xac>)
    7b0a:	f000 fa4b 	bl	7fa4 <printk>
    7b0e:	21ac      	movs	r1, #172	; 0xac
    7b10:	4620      	mov	r0, r4
    7b12:	f000 fba0 	bl	8256 <assert_post_action>
	__asm__ volatile(
    7b16:	f385 8811 	msr	BASEPRI, r5
    7b1a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7b1e:	2401      	movs	r4, #1
    7b20:	b96c      	cbnz	r4, 7b3e <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    7b22:	f7fb ff9b 	bl	3a5c <sys_clock_elapsed>
    7b26:	4b0e      	ldr	r3, [pc, #56]	; (7b60 <sys_clock_tick_get+0xb0>)
    7b28:	e9d3 6700 	ldrd	r6, r7, [r3]
    7b2c:	1836      	adds	r6, r6, r0
    7b2e:	f147 0700 	adc.w	r7, r7, #0
    7b32:	4804      	ldr	r0, [pc, #16]	; (7b44 <sys_clock_tick_get+0x94>)
    7b34:	f7fd fdb2 	bl	569c <z_spin_unlock_valid>
    7b38:	2800      	cmp	r0, #0
    7b3a:	d1ec      	bne.n	7b16 <sys_clock_tick_get+0x66>
    7b3c:	e7dc      	b.n	7af8 <sys_clock_tick_get+0x48>
	}
	return t;
}
    7b3e:	4630      	mov	r0, r6
    7b40:	4639      	mov	r1, r7
    7b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b44:	20000ff4 	.word	0x20000ff4
    7b48:	00009190 	.word	0x00009190
    7b4c:	000091e8 	.word	0x000091e8
    7b50:	00009078 	.word	0x00009078
    7b54:	00009200 	.word	0x00009200
    7b58:	000091b8 	.word	0x000091b8
    7b5c:	000091d0 	.word	0x000091d0
    7b60:	200004f8 	.word	0x200004f8

00007b64 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    7b64:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7b66:	4a03      	ldr	r2, [pc, #12]	; (7b74 <boot_banner+0x10>)
    7b68:	4903      	ldr	r1, [pc, #12]	; (7b78 <boot_banner+0x14>)
    7b6a:	4804      	ldr	r0, [pc, #16]	; (7b7c <boot_banner+0x18>)
    7b6c:	f000 fa1a 	bl	7fa4 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    7b70:	bd08      	pop	{r3, pc}
    7b72:	bf00      	nop
    7b74:	00009554 	.word	0x00009554
    7b78:	00009f3c 	.word	0x00009f3c
    7b7c:	00009f4c 	.word	0x00009f4c

00007b80 <nrf_cc3xx_platform_init_no_rng>:
    7b80:	b510      	push	{r4, lr}
    7b82:	4c0a      	ldr	r4, [pc, #40]	; (7bac <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7b84:	6823      	ldr	r3, [r4, #0]
    7b86:	b11b      	cbz	r3, 7b90 <nrf_cc3xx_platform_init_no_rng+0x10>
    7b88:	2301      	movs	r3, #1
    7b8a:	6023      	str	r3, [r4, #0]
    7b8c:	2000      	movs	r0, #0
    7b8e:	bd10      	pop	{r4, pc}
    7b90:	f000 f8d6 	bl	7d40 <CC_LibInitNoRng>
    7b94:	2800      	cmp	r0, #0
    7b96:	d0f7      	beq.n	7b88 <nrf_cc3xx_platform_init_no_rng+0x8>
    7b98:	3801      	subs	r0, #1
    7b9a:	2806      	cmp	r0, #6
    7b9c:	d803      	bhi.n	7ba6 <nrf_cc3xx_platform_init_no_rng+0x26>
    7b9e:	4b04      	ldr	r3, [pc, #16]	; (7bb0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7ba0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7ba4:	bd10      	pop	{r4, pc}
    7ba6:	4803      	ldr	r0, [pc, #12]	; (7bb4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7ba8:	bd10      	pop	{r4, pc}
    7baa:	bf00      	nop
    7bac:	20000ff8 	.word	0x20000ff8
    7bb0:	00009f74 	.word	0x00009f74
    7bb4:	ffff8ffe 	.word	0xffff8ffe

00007bb8 <nrf_cc3xx_platform_abort>:
    7bb8:	f3bf 8f4f 	dsb	sy
    7bbc:	4905      	ldr	r1, [pc, #20]	; (7bd4 <nrf_cc3xx_platform_abort+0x1c>)
    7bbe:	4b06      	ldr	r3, [pc, #24]	; (7bd8 <nrf_cc3xx_platform_abort+0x20>)
    7bc0:	68ca      	ldr	r2, [r1, #12]
    7bc2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7bc6:	4313      	orrs	r3, r2
    7bc8:	60cb      	str	r3, [r1, #12]
    7bca:	f3bf 8f4f 	dsb	sy
    7bce:	bf00      	nop
    7bd0:	e7fd      	b.n	7bce <nrf_cc3xx_platform_abort+0x16>
    7bd2:	bf00      	nop
    7bd4:	e000ed00 	.word	0xe000ed00
    7bd8:	05fa0004 	.word	0x05fa0004

00007bdc <CC_PalAbort>:
    7bdc:	b4f0      	push	{r4, r5, r6, r7}
    7bde:	4f09      	ldr	r7, [pc, #36]	; (7c04 <CC_PalAbort+0x28>)
    7be0:	4e09      	ldr	r6, [pc, #36]	; (7c08 <CC_PalAbort+0x2c>)
    7be2:	4c0a      	ldr	r4, [pc, #40]	; (7c0c <CC_PalAbort+0x30>)
    7be4:	4a0a      	ldr	r2, [pc, #40]	; (7c10 <CC_PalAbort+0x34>)
    7be6:	4d0b      	ldr	r5, [pc, #44]	; (7c14 <CC_PalAbort+0x38>)
    7be8:	490b      	ldr	r1, [pc, #44]	; (7c18 <CC_PalAbort+0x3c>)
    7bea:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7bee:	603b      	str	r3, [r7, #0]
    7bf0:	6852      	ldr	r2, [r2, #4]
    7bf2:	6033      	str	r3, [r6, #0]
    7bf4:	6023      	str	r3, [r4, #0]
    7bf6:	2400      	movs	r4, #0
    7bf8:	602b      	str	r3, [r5, #0]
    7bfa:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7bfe:	bcf0      	pop	{r4, r5, r6, r7}
    7c00:	4710      	bx	r2
    7c02:	bf00      	nop
    7c04:	5002b400 	.word	0x5002b400
    7c08:	5002b404 	.word	0x5002b404
    7c0c:	5002b408 	.word	0x5002b408
    7c10:	200000e0 	.word	0x200000e0
    7c14:	5002b40c 	.word	0x5002b40c
    7c18:	5002a000 	.word	0x5002a000

00007c1c <nrf_cc3xx_platform_set_abort>:
    7c1c:	e9d0 1200 	ldrd	r1, r2, [r0]
    7c20:	4b01      	ldr	r3, [pc, #4]	; (7c28 <nrf_cc3xx_platform_set_abort+0xc>)
    7c22:	e9c3 1200 	strd	r1, r2, [r3]
    7c26:	4770      	bx	lr
    7c28:	200000e0 	.word	0x200000e0

00007c2c <mutex_free>:
    7c2c:	b510      	push	{r4, lr}
    7c2e:	4604      	mov	r4, r0
    7c30:	b130      	cbz	r0, 7c40 <mutex_free+0x14>
    7c32:	6863      	ldr	r3, [r4, #4]
    7c34:	06db      	lsls	r3, r3, #27
    7c36:	d502      	bpl.n	7c3e <mutex_free+0x12>
    7c38:	2300      	movs	r3, #0
    7c3a:	6023      	str	r3, [r4, #0]
    7c3c:	6063      	str	r3, [r4, #4]
    7c3e:	bd10      	pop	{r4, pc}
    7c40:	4b02      	ldr	r3, [pc, #8]	; (7c4c <mutex_free+0x20>)
    7c42:	4803      	ldr	r0, [pc, #12]	; (7c50 <mutex_free+0x24>)
    7c44:	685b      	ldr	r3, [r3, #4]
    7c46:	4798      	blx	r3
    7c48:	e7f3      	b.n	7c32 <mutex_free+0x6>
    7c4a:	bf00      	nop
    7c4c:	200000e0 	.word	0x200000e0
    7c50:	00009f90 	.word	0x00009f90

00007c54 <mutex_unlock>:
    7c54:	b168      	cbz	r0, 7c72 <mutex_unlock+0x1e>
    7c56:	6843      	ldr	r3, [r0, #4]
    7c58:	b13b      	cbz	r3, 7c6a <mutex_unlock+0x16>
    7c5a:	06db      	lsls	r3, r3, #27
    7c5c:	d507      	bpl.n	7c6e <mutex_unlock+0x1a>
    7c5e:	f3bf 8f5f 	dmb	sy
    7c62:	2300      	movs	r3, #0
    7c64:	6003      	str	r3, [r0, #0]
    7c66:	4618      	mov	r0, r3
    7c68:	4770      	bx	lr
    7c6a:	4803      	ldr	r0, [pc, #12]	; (7c78 <mutex_unlock+0x24>)
    7c6c:	4770      	bx	lr
    7c6e:	4803      	ldr	r0, [pc, #12]	; (7c7c <mutex_unlock+0x28>)
    7c70:	4770      	bx	lr
    7c72:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7c76:	4770      	bx	lr
    7c78:	ffff8fea 	.word	0xffff8fea
    7c7c:	ffff8fe9 	.word	0xffff8fe9

00007c80 <mutex_init>:
    7c80:	b510      	push	{r4, lr}
    7c82:	4604      	mov	r4, r0
    7c84:	b120      	cbz	r0, 7c90 <mutex_init+0x10>
    7c86:	2200      	movs	r2, #0
    7c88:	2311      	movs	r3, #17
    7c8a:	6022      	str	r2, [r4, #0]
    7c8c:	6063      	str	r3, [r4, #4]
    7c8e:	bd10      	pop	{r4, pc}
    7c90:	4801      	ldr	r0, [pc, #4]	; (7c98 <mutex_init+0x18>)
    7c92:	f7ff ffa3 	bl	7bdc <CC_PalAbort>
    7c96:	e7f6      	b.n	7c86 <mutex_init+0x6>
    7c98:	00009fb8 	.word	0x00009fb8

00007c9c <mutex_lock>:
    7c9c:	b1c0      	cbz	r0, 7cd0 <mutex_lock+0x34>
    7c9e:	6843      	ldr	r3, [r0, #4]
    7ca0:	b1a3      	cbz	r3, 7ccc <mutex_lock+0x30>
    7ca2:	06db      	lsls	r3, r3, #27
    7ca4:	d510      	bpl.n	7cc8 <mutex_lock+0x2c>
    7ca6:	2201      	movs	r2, #1
    7ca8:	f3bf 8f5b 	dmb	ish
    7cac:	e850 3f00 	ldrex	r3, [r0]
    7cb0:	e840 2100 	strex	r1, r2, [r0]
    7cb4:	2900      	cmp	r1, #0
    7cb6:	d1f9      	bne.n	7cac <mutex_lock+0x10>
    7cb8:	f3bf 8f5b 	dmb	ish
    7cbc:	2b01      	cmp	r3, #1
    7cbe:	d0f3      	beq.n	7ca8 <mutex_lock+0xc>
    7cc0:	f3bf 8f5f 	dmb	sy
    7cc4:	2000      	movs	r0, #0
    7cc6:	4770      	bx	lr
    7cc8:	4803      	ldr	r0, [pc, #12]	; (7cd8 <mutex_lock+0x3c>)
    7cca:	4770      	bx	lr
    7ccc:	4803      	ldr	r0, [pc, #12]	; (7cdc <mutex_lock+0x40>)
    7cce:	4770      	bx	lr
    7cd0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7cd4:	4770      	bx	lr
    7cd6:	bf00      	nop
    7cd8:	ffff8fe9 	.word	0xffff8fe9
    7cdc:	ffff8fea 	.word	0xffff8fea

00007ce0 <nrf_cc3xx_platform_set_mutexes>:
    7ce0:	b570      	push	{r4, r5, r6, lr}
    7ce2:	e9d0 2300 	ldrd	r2, r3, [r0]
    7ce6:	4c13      	ldr	r4, [pc, #76]	; (7d34 <nrf_cc3xx_platform_set_mutexes+0x54>)
    7ce8:	4d13      	ldr	r5, [pc, #76]	; (7d38 <nrf_cc3xx_platform_set_mutexes+0x58>)
    7cea:	e9c4 2300 	strd	r2, r3, [r4]
    7cee:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    7cf2:	e9c4 6302 	strd	r6, r3, [r4, #8]
    7cf6:	4b11      	ldr	r3, [pc, #68]	; (7d3c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7cf8:	6808      	ldr	r0, [r1, #0]
    7cfa:	6018      	str	r0, [r3, #0]
    7cfc:	6848      	ldr	r0, [r1, #4]
    7cfe:	6058      	str	r0, [r3, #4]
    7d00:	6888      	ldr	r0, [r1, #8]
    7d02:	6098      	str	r0, [r3, #8]
    7d04:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    7d08:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    7d0c:	60de      	str	r6, [r3, #12]
    7d0e:	6118      	str	r0, [r3, #16]
    7d10:	06cb      	lsls	r3, r1, #27
    7d12:	d50d      	bpl.n	7d30 <nrf_cc3xx_platform_set_mutexes+0x50>
    7d14:	2300      	movs	r3, #0
    7d16:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    7d1a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    7d1e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    7d22:	4790      	blx	r2
    7d24:	6823      	ldr	r3, [r4, #0]
    7d26:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    7d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d2e:	4718      	bx	r3
    7d30:	bd70      	pop	{r4, r5, r6, pc}
    7d32:	bf00      	nop
    7d34:	200000f0 	.word	0x200000f0
    7d38:	20001014 	.word	0x20001014
    7d3c:	20000100 	.word	0x20000100

00007d40 <CC_LibInitNoRng>:
    7d40:	b510      	push	{r4, lr}
    7d42:	f000 f833 	bl	7dac <CC_HalInit>
    7d46:	b120      	cbz	r0, 7d52 <CC_LibInitNoRng+0x12>
    7d48:	2403      	movs	r4, #3
    7d4a:	f000 f867 	bl	7e1c <CC_PalTerminate>
    7d4e:	4620      	mov	r0, r4
    7d50:	bd10      	pop	{r4, pc}
    7d52:	f000 f835 	bl	7dc0 <CC_PalInit>
    7d56:	b990      	cbnz	r0, 7d7e <CC_LibInitNoRng+0x3e>
    7d58:	f000 f8b0 	bl	7ebc <CC_PalPowerSaveModeSelect>
    7d5c:	b990      	cbnz	r0, 7d84 <CC_LibInitNoRng+0x44>
    7d5e:	4b0f      	ldr	r3, [pc, #60]	; (7d9c <CC_LibInitNoRng+0x5c>)
    7d60:	681b      	ldr	r3, [r3, #0]
    7d62:	0e1b      	lsrs	r3, r3, #24
    7d64:	2bf0      	cmp	r3, #240	; 0xf0
    7d66:	d108      	bne.n	7d7a <CC_LibInitNoRng+0x3a>
    7d68:	4a0d      	ldr	r2, [pc, #52]	; (7da0 <CC_LibInitNoRng+0x60>)
    7d6a:	4b0e      	ldr	r3, [pc, #56]	; (7da4 <CC_LibInitNoRng+0x64>)
    7d6c:	6812      	ldr	r2, [r2, #0]
    7d6e:	429a      	cmp	r2, r3
    7d70:	d00a      	beq.n	7d88 <CC_LibInitNoRng+0x48>
    7d72:	2407      	movs	r4, #7
    7d74:	f000 f81c 	bl	7db0 <CC_HalTerminate>
    7d78:	e7e7      	b.n	7d4a <CC_LibInitNoRng+0xa>
    7d7a:	2406      	movs	r4, #6
    7d7c:	e7fa      	b.n	7d74 <CC_LibInitNoRng+0x34>
    7d7e:	2404      	movs	r4, #4
    7d80:	4620      	mov	r0, r4
    7d82:	bd10      	pop	{r4, pc}
    7d84:	2400      	movs	r4, #0
    7d86:	e7f5      	b.n	7d74 <CC_LibInitNoRng+0x34>
    7d88:	2001      	movs	r0, #1
    7d8a:	f000 f897 	bl	7ebc <CC_PalPowerSaveModeSelect>
    7d8e:	4604      	mov	r4, r0
    7d90:	2800      	cmp	r0, #0
    7d92:	d1f7      	bne.n	7d84 <CC_LibInitNoRng+0x44>
    7d94:	4b04      	ldr	r3, [pc, #16]	; (7da8 <CC_LibInitNoRng+0x68>)
    7d96:	6018      	str	r0, [r3, #0]
    7d98:	e7d9      	b.n	7d4e <CC_LibInitNoRng+0xe>
    7d9a:	bf00      	nop
    7d9c:	5002b928 	.word	0x5002b928
    7da0:	5002ba24 	.word	0x5002ba24
    7da4:	20e00000 	.word	0x20e00000
    7da8:	5002ba0c 	.word	0x5002ba0c

00007dac <CC_HalInit>:
    7dac:	2000      	movs	r0, #0
    7dae:	4770      	bx	lr

00007db0 <CC_HalTerminate>:
    7db0:	2000      	movs	r0, #0
    7db2:	4770      	bx	lr

00007db4 <CC_HalMaskInterrupt>:
    7db4:	4b01      	ldr	r3, [pc, #4]	; (7dbc <CC_HalMaskInterrupt+0x8>)
    7db6:	6018      	str	r0, [r3, #0]
    7db8:	4770      	bx	lr
    7dba:	bf00      	nop
    7dbc:	5002ba04 	.word	0x5002ba04

00007dc0 <CC_PalInit>:
    7dc0:	b510      	push	{r4, lr}
    7dc2:	4811      	ldr	r0, [pc, #68]	; (7e08 <CC_PalInit+0x48>)
    7dc4:	f000 f848 	bl	7e58 <CC_PalMutexCreate>
    7dc8:	b100      	cbz	r0, 7dcc <CC_PalInit+0xc>
    7dca:	bd10      	pop	{r4, pc}
    7dcc:	480f      	ldr	r0, [pc, #60]	; (7e0c <CC_PalInit+0x4c>)
    7dce:	f000 f843 	bl	7e58 <CC_PalMutexCreate>
    7dd2:	2800      	cmp	r0, #0
    7dd4:	d1f9      	bne.n	7dca <CC_PalInit+0xa>
    7dd6:	4c0e      	ldr	r4, [pc, #56]	; (7e10 <CC_PalInit+0x50>)
    7dd8:	4620      	mov	r0, r4
    7dda:	f000 f83d 	bl	7e58 <CC_PalMutexCreate>
    7dde:	2800      	cmp	r0, #0
    7de0:	d1f3      	bne.n	7dca <CC_PalInit+0xa>
    7de2:	4b0c      	ldr	r3, [pc, #48]	; (7e14 <CC_PalInit+0x54>)
    7de4:	480c      	ldr	r0, [pc, #48]	; (7e18 <CC_PalInit+0x58>)
    7de6:	601c      	str	r4, [r3, #0]
    7de8:	f000 f836 	bl	7e58 <CC_PalMutexCreate>
    7dec:	4601      	mov	r1, r0
    7dee:	2800      	cmp	r0, #0
    7df0:	d1eb      	bne.n	7dca <CC_PalInit+0xa>
    7df2:	f000 f82d 	bl	7e50 <CC_PalDmaInit>
    7df6:	4604      	mov	r4, r0
    7df8:	b108      	cbz	r0, 7dfe <CC_PalInit+0x3e>
    7dfa:	4620      	mov	r0, r4
    7dfc:	bd10      	pop	{r4, pc}
    7dfe:	f000 f83f 	bl	7e80 <CC_PalPowerSaveModeInit>
    7e02:	4620      	mov	r0, r4
    7e04:	e7fa      	b.n	7dfc <CC_PalInit+0x3c>
    7e06:	bf00      	nop
    7e08:	20000138 	.word	0x20000138
    7e0c:	2000012c 	.word	0x2000012c
    7e10:	20000134 	.word	0x20000134
    7e14:	2000013c 	.word	0x2000013c
    7e18:	20000130 	.word	0x20000130

00007e1c <CC_PalTerminate>:
    7e1c:	b508      	push	{r3, lr}
    7e1e:	4808      	ldr	r0, [pc, #32]	; (7e40 <CC_PalTerminate+0x24>)
    7e20:	f000 f824 	bl	7e6c <CC_PalMutexDestroy>
    7e24:	4807      	ldr	r0, [pc, #28]	; (7e44 <CC_PalTerminate+0x28>)
    7e26:	f000 f821 	bl	7e6c <CC_PalMutexDestroy>
    7e2a:	4807      	ldr	r0, [pc, #28]	; (7e48 <CC_PalTerminate+0x2c>)
    7e2c:	f000 f81e 	bl	7e6c <CC_PalMutexDestroy>
    7e30:	4806      	ldr	r0, [pc, #24]	; (7e4c <CC_PalTerminate+0x30>)
    7e32:	f000 f81b 	bl	7e6c <CC_PalMutexDestroy>
    7e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7e3a:	f000 b80b 	b.w	7e54 <CC_PalDmaTerminate>
    7e3e:	bf00      	nop
    7e40:	20000138 	.word	0x20000138
    7e44:	2000012c 	.word	0x2000012c
    7e48:	20000134 	.word	0x20000134
    7e4c:	20000130 	.word	0x20000130

00007e50 <CC_PalDmaInit>:
    7e50:	2000      	movs	r0, #0
    7e52:	4770      	bx	lr

00007e54 <CC_PalDmaTerminate>:
    7e54:	4770      	bx	lr
    7e56:	bf00      	nop

00007e58 <CC_PalMutexCreate>:
    7e58:	b508      	push	{r3, lr}
    7e5a:	4b03      	ldr	r3, [pc, #12]	; (7e68 <CC_PalMutexCreate+0x10>)
    7e5c:	6802      	ldr	r2, [r0, #0]
    7e5e:	681b      	ldr	r3, [r3, #0]
    7e60:	6810      	ldr	r0, [r2, #0]
    7e62:	4798      	blx	r3
    7e64:	2000      	movs	r0, #0
    7e66:	bd08      	pop	{r3, pc}
    7e68:	200000f0 	.word	0x200000f0

00007e6c <CC_PalMutexDestroy>:
    7e6c:	b508      	push	{r3, lr}
    7e6e:	4b03      	ldr	r3, [pc, #12]	; (7e7c <CC_PalMutexDestroy+0x10>)
    7e70:	6802      	ldr	r2, [r0, #0]
    7e72:	685b      	ldr	r3, [r3, #4]
    7e74:	6810      	ldr	r0, [r2, #0]
    7e76:	4798      	blx	r3
    7e78:	2000      	movs	r0, #0
    7e7a:	bd08      	pop	{r3, pc}
    7e7c:	200000f0 	.word	0x200000f0

00007e80 <CC_PalPowerSaveModeInit>:
    7e80:	b570      	push	{r4, r5, r6, lr}
    7e82:	4c09      	ldr	r4, [pc, #36]	; (7ea8 <CC_PalPowerSaveModeInit+0x28>)
    7e84:	4d09      	ldr	r5, [pc, #36]	; (7eac <CC_PalPowerSaveModeInit+0x2c>)
    7e86:	6920      	ldr	r0, [r4, #16]
    7e88:	68ab      	ldr	r3, [r5, #8]
    7e8a:	4798      	blx	r3
    7e8c:	b118      	cbz	r0, 7e96 <CC_PalPowerSaveModeInit+0x16>
    7e8e:	4b08      	ldr	r3, [pc, #32]	; (7eb0 <CC_PalPowerSaveModeInit+0x30>)
    7e90:	4808      	ldr	r0, [pc, #32]	; (7eb4 <CC_PalPowerSaveModeInit+0x34>)
    7e92:	685b      	ldr	r3, [r3, #4]
    7e94:	4798      	blx	r3
    7e96:	4a08      	ldr	r2, [pc, #32]	; (7eb8 <CC_PalPowerSaveModeInit+0x38>)
    7e98:	68eb      	ldr	r3, [r5, #12]
    7e9a:	6920      	ldr	r0, [r4, #16]
    7e9c:	2100      	movs	r1, #0
    7e9e:	6011      	str	r1, [r2, #0]
    7ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ea4:	4718      	bx	r3
    7ea6:	bf00      	nop
    7ea8:	20000100 	.word	0x20000100
    7eac:	200000f0 	.word	0x200000f0
    7eb0:	200000e0 	.word	0x200000e0
    7eb4:	00009fdc 	.word	0x00009fdc
    7eb8:	2000100c 	.word	0x2000100c

00007ebc <CC_PalPowerSaveModeSelect>:
    7ebc:	b570      	push	{r4, r5, r6, lr}
    7ebe:	4d1a      	ldr	r5, [pc, #104]	; (7f28 <CC_PalPowerSaveModeSelect+0x6c>)
    7ec0:	4e1a      	ldr	r6, [pc, #104]	; (7f2c <CC_PalPowerSaveModeSelect+0x70>)
    7ec2:	4604      	mov	r4, r0
    7ec4:	68b2      	ldr	r2, [r6, #8]
    7ec6:	6928      	ldr	r0, [r5, #16]
    7ec8:	4790      	blx	r2
    7eca:	b9f0      	cbnz	r0, 7f0a <CC_PalPowerSaveModeSelect+0x4e>
    7ecc:	b15c      	cbz	r4, 7ee6 <CC_PalPowerSaveModeSelect+0x2a>
    7ece:	4c18      	ldr	r4, [pc, #96]	; (7f30 <CC_PalPowerSaveModeSelect+0x74>)
    7ed0:	6823      	ldr	r3, [r4, #0]
    7ed2:	b1ab      	cbz	r3, 7f00 <CC_PalPowerSaveModeSelect+0x44>
    7ed4:	2b01      	cmp	r3, #1
    7ed6:	d01a      	beq.n	7f0e <CC_PalPowerSaveModeSelect+0x52>
    7ed8:	3b01      	subs	r3, #1
    7eda:	6023      	str	r3, [r4, #0]
    7edc:	6928      	ldr	r0, [r5, #16]
    7ede:	68f3      	ldr	r3, [r6, #12]
    7ee0:	4798      	blx	r3
    7ee2:	2000      	movs	r0, #0
    7ee4:	bd70      	pop	{r4, r5, r6, pc}
    7ee6:	4c12      	ldr	r4, [pc, #72]	; (7f30 <CC_PalPowerSaveModeSelect+0x74>)
    7ee8:	6821      	ldr	r1, [r4, #0]
    7eea:	b939      	cbnz	r1, 7efc <CC_PalPowerSaveModeSelect+0x40>
    7eec:	4b11      	ldr	r3, [pc, #68]	; (7f34 <CC_PalPowerSaveModeSelect+0x78>)
    7eee:	4a12      	ldr	r2, [pc, #72]	; (7f38 <CC_PalPowerSaveModeSelect+0x7c>)
    7ef0:	2001      	movs	r0, #1
    7ef2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7ef6:	6813      	ldr	r3, [r2, #0]
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d1fc      	bne.n	7ef6 <CC_PalPowerSaveModeSelect+0x3a>
    7efc:	3101      	adds	r1, #1
    7efe:	6021      	str	r1, [r4, #0]
    7f00:	68f3      	ldr	r3, [r6, #12]
    7f02:	6928      	ldr	r0, [r5, #16]
    7f04:	4798      	blx	r3
    7f06:	2000      	movs	r0, #0
    7f08:	bd70      	pop	{r4, r5, r6, pc}
    7f0a:	480c      	ldr	r0, [pc, #48]	; (7f3c <CC_PalPowerSaveModeSelect+0x80>)
    7f0c:	bd70      	pop	{r4, r5, r6, pc}
    7f0e:	4a0a      	ldr	r2, [pc, #40]	; (7f38 <CC_PalPowerSaveModeSelect+0x7c>)
    7f10:	6813      	ldr	r3, [r2, #0]
    7f12:	2b00      	cmp	r3, #0
    7f14:	d1fc      	bne.n	7f10 <CC_PalPowerSaveModeSelect+0x54>
    7f16:	4a07      	ldr	r2, [pc, #28]	; (7f34 <CC_PalPowerSaveModeSelect+0x78>)
    7f18:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7f1c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7f20:	f7ff ff48 	bl	7db4 <CC_HalMaskInterrupt>
    7f24:	6823      	ldr	r3, [r4, #0]
    7f26:	e7d7      	b.n	7ed8 <CC_PalPowerSaveModeSelect+0x1c>
    7f28:	20000100 	.word	0x20000100
    7f2c:	200000f0 	.word	0x200000f0
    7f30:	2000100c 	.word	0x2000100c
    7f34:	5002a000 	.word	0x5002a000
    7f38:	5002b910 	.word	0x5002b910
    7f3c:	ffff8fe9 	.word	0xffff8fe9

00007f40 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7f40:	4770      	bx	lr

00007f42 <sys_notify_validate>:
	if (notify == NULL) {
    7f42:	4602      	mov	r2, r0
    7f44:	b158      	cbz	r0, 7f5e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7f46:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7f48:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    7f4c:	2b01      	cmp	r3, #1
    7f4e:	d003      	beq.n	7f58 <sys_notify_validate+0x16>
    7f50:	2b03      	cmp	r3, #3
    7f52:	d107      	bne.n	7f64 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    7f54:	6803      	ldr	r3, [r0, #0]
    7f56:	b143      	cbz	r3, 7f6a <sys_notify_validate+0x28>
		notify->result = 0;
    7f58:	2000      	movs	r0, #0
    7f5a:	6090      	str	r0, [r2, #8]
    7f5c:	4770      	bx	lr
		return -EINVAL;
    7f5e:	f06f 0015 	mvn.w	r0, #21
    7f62:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    7f64:	f06f 0015 	mvn.w	r0, #21
    7f68:	4770      	bx	lr
			rv = -EINVAL;
    7f6a:	f06f 0015 	mvn.w	r0, #21
}
    7f6e:	4770      	bx	lr

00007f70 <arch_printk_char_out>:
}
    7f70:	2000      	movs	r0, #0
    7f72:	4770      	bx	lr

00007f74 <str_out>:
{
    7f74:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7f76:	680c      	ldr	r4, [r1, #0]
    7f78:	b154      	cbz	r4, 7f90 <str_out+0x1c>
    7f7a:	688a      	ldr	r2, [r1, #8]
    7f7c:	684b      	ldr	r3, [r1, #4]
    7f7e:	429a      	cmp	r2, r3
    7f80:	da06      	bge.n	7f90 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    7f82:	3b01      	subs	r3, #1
    7f84:	429a      	cmp	r2, r3
    7f86:	d008      	beq.n	7f9a <str_out+0x26>
		ctx->str[ctx->count++] = c;
    7f88:	1c53      	adds	r3, r2, #1
    7f8a:	608b      	str	r3, [r1, #8]
    7f8c:	54a0      	strb	r0, [r4, r2]
    7f8e:	e002      	b.n	7f96 <str_out+0x22>
		ctx->count++;
    7f90:	688b      	ldr	r3, [r1, #8]
    7f92:	3301      	adds	r3, #1
    7f94:	608b      	str	r3, [r1, #8]
}
    7f96:	bc10      	pop	{r4}
    7f98:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    7f9a:	1c53      	adds	r3, r2, #1
    7f9c:	608b      	str	r3, [r1, #8]
    7f9e:	2300      	movs	r3, #0
    7fa0:	54a3      	strb	r3, [r4, r2]
    7fa2:	e7f8      	b.n	7f96 <str_out+0x22>

00007fa4 <printk>:
{
    7fa4:	b40f      	push	{r0, r1, r2, r3}
    7fa6:	b500      	push	{lr}
    7fa8:	b083      	sub	sp, #12
    7faa:	a904      	add	r1, sp, #16
    7fac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    7fb0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    7fb2:	f7f8 fa9f 	bl	4f4 <vprintk>
}
    7fb6:	b003      	add	sp, #12
    7fb8:	f85d eb04 	ldr.w	lr, [sp], #4
    7fbc:	b004      	add	sp, #16
    7fbe:	4770      	bx	lr

00007fc0 <snprintk>:
{
    7fc0:	b40c      	push	{r2, r3}
    7fc2:	b500      	push	{lr}
    7fc4:	b083      	sub	sp, #12
    7fc6:	ab04      	add	r3, sp, #16
    7fc8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    7fcc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    7fce:	f7f8 faa1 	bl	514 <vsnprintk>
}
    7fd2:	b003      	add	sp, #12
    7fd4:	f85d eb04 	ldr.w	lr, [sp], #4
    7fd8:	b002      	add	sp, #8
    7fda:	4770      	bx	lr

00007fdc <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    7fdc:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    7fe0:	8b81      	ldrh	r1, [r0, #28]
    7fe2:	f021 0107 	bic.w	r1, r1, #7
    7fe6:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    7fe8:	8381      	strh	r1, [r0, #28]
}
    7fea:	4770      	bx	lr

00007fec <notify_monitors>:
{
    7fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ff0:	4606      	mov	r6, r0
    7ff2:	460f      	mov	r7, r1
    7ff4:	4690      	mov	r8, r2
	return list->head;
    7ff6:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7ff8:	b119      	cbz	r1, 8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    7ffa:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7ffc:	b131      	cbz	r1, 800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
	return node->next;
    7ffe:	680c      	ldr	r4, [r1, #0]
    8000:	e004      	b.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    8002:	460c      	mov	r4, r1
    8004:	e002      	b.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    8006:	4623      	mov	r3, r4
    8008:	4621      	mov	r1, r4
    800a:	461c      	mov	r4, r3
    800c:	b159      	cbz	r1, 8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
		mon->callback(mgr, mon, state, res);
    800e:	684d      	ldr	r5, [r1, #4]
    8010:	4643      	mov	r3, r8
    8012:	463a      	mov	r2, r7
    8014:	4630      	mov	r0, r6
    8016:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8018:	2c00      	cmp	r4, #0
    801a:	d0f4      	beq.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
    801c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    801e:	2c00      	cmp	r4, #0
    8020:	d0f2      	beq.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
	return node->next;
    8022:	6823      	ldr	r3, [r4, #0]
    8024:	e7f0      	b.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
}
    8026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000802a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    802a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    802c:	f013 0307 	ands.w	r3, r3, #7
    8030:	d103      	bne.n	803a <process_recheck+0x10>
	return list->head;
    8032:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    8034:	b10a      	cbz	r2, 803a <process_recheck+0x10>
		evt = EVT_START;
    8036:	2003      	movs	r0, #3
    8038:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    803a:	2b02      	cmp	r3, #2
    803c:	d003      	beq.n	8046 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    803e:	2b01      	cmp	r3, #1
    8040:	d006      	beq.n	8050 <process_recheck+0x26>
	int evt = EVT_NOP;
    8042:	2000      	movs	r0, #0
    8044:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    8046:	8bc2      	ldrh	r2, [r0, #30]
    8048:	2a00      	cmp	r2, #0
    804a:	d1f8      	bne.n	803e <process_recheck+0x14>
		evt = EVT_STOP;
    804c:	2004      	movs	r0, #4
    804e:	4770      	bx	lr
    8050:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    8052:	b10b      	cbz	r3, 8058 <process_recheck+0x2e>
		evt = EVT_RESET;
    8054:	2005      	movs	r0, #5
}
    8056:	4770      	bx	lr
	int evt = EVT_NOP;
    8058:	2000      	movs	r0, #0
    805a:	4770      	bx	lr

0000805c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    805c:	b158      	cbz	r0, 8076 <validate_args+0x1a>
{
    805e:	b510      	push	{r4, lr}
    8060:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8062:	b159      	cbz	r1, 807c <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    8064:	1d08      	adds	r0, r1, #4
    8066:	f7ff ff6c 	bl	7f42 <sys_notify_validate>
	if ((rv == 0)
    806a:	b918      	cbnz	r0, 8074 <validate_args+0x18>
	    && ((cli->notify.flags
    806c:	68a3      	ldr	r3, [r4, #8]
    806e:	f033 0303 	bics.w	r3, r3, #3
    8072:	d106      	bne.n	8082 <validate_args+0x26>
}
    8074:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8076:	f06f 0015 	mvn.w	r0, #21
}
    807a:	4770      	bx	lr
		return -EINVAL;
    807c:	f06f 0015 	mvn.w	r0, #21
    8080:	e7f8      	b.n	8074 <validate_args+0x18>
		rv = -EINVAL;
    8082:	f06f 0015 	mvn.w	r0, #21
    8086:	e7f5      	b.n	8074 <validate_args+0x18>

00008088 <notify_one>:
{
    8088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    808c:	4607      	mov	r7, r0
    808e:	460c      	mov	r4, r1
    8090:	4616      	mov	r6, r2
    8092:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8094:	4619      	mov	r1, r3
    8096:	1d20      	adds	r0, r4, #4
    8098:	f7f8 f9f8 	bl	48c <sys_notify_finalize>
	if (cb) {
    809c:	b128      	cbz	r0, 80aa <notify_one+0x22>
    809e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    80a0:	462b      	mov	r3, r5
    80a2:	4632      	mov	r2, r6
    80a4:	4621      	mov	r1, r4
    80a6:	4638      	mov	r0, r7
    80a8:	47c0      	blx	r8
}
    80aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000080ae <notify_all>:
{
    80ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    80b2:	4681      	mov	r9, r0
    80b4:	460c      	mov	r4, r1
    80b6:	4690      	mov	r8, r2
    80b8:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    80ba:	e005      	b.n	80c8 <notify_all+0x1a>
	list->tail = node;
    80bc:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    80be:	463b      	mov	r3, r7
    80c0:	4642      	mov	r2, r8
    80c2:	4648      	mov	r0, r9
    80c4:	f7ff ffe0 	bl	8088 <notify_one>
	return list->head;
    80c8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    80ca:	b129      	cbz	r1, 80d8 <notify_all+0x2a>
	return node->next;
    80cc:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    80ce:	6025      	str	r5, [r4, #0]
	return list->tail;
    80d0:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    80d2:	428e      	cmp	r6, r1
    80d4:	d1f3      	bne.n	80be <notify_all+0x10>
    80d6:	e7f1      	b.n	80bc <notify_all+0xe>
}
    80d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000080dc <onoff_manager_init>:
	if ((mgr == NULL)
    80dc:	b170      	cbz	r0, 80fc <onoff_manager_init+0x20>
{
    80de:	b538      	push	{r3, r4, r5, lr}
    80e0:	460c      	mov	r4, r1
    80e2:	4605      	mov	r5, r0
	    || (transitions == NULL)
    80e4:	b169      	cbz	r1, 8102 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    80e6:	680b      	ldr	r3, [r1, #0]
    80e8:	b173      	cbz	r3, 8108 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    80ea:	684b      	ldr	r3, [r1, #4]
    80ec:	b17b      	cbz	r3, 810e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    80ee:	2220      	movs	r2, #32
    80f0:	2100      	movs	r1, #0
    80f2:	f000 f9bb 	bl	846c <memset>
    80f6:	612c      	str	r4, [r5, #16]
	return 0;
    80f8:	2000      	movs	r0, #0
}
    80fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    80fc:	f06f 0015 	mvn.w	r0, #21
}
    8100:	4770      	bx	lr
		return -EINVAL;
    8102:	f06f 0015 	mvn.w	r0, #21
    8106:	e7f8      	b.n	80fa <onoff_manager_init+0x1e>
    8108:	f06f 0015 	mvn.w	r0, #21
    810c:	e7f5      	b.n	80fa <onoff_manager_init+0x1e>
    810e:	f06f 0015 	mvn.w	r0, #21
    8112:	e7f2      	b.n	80fa <onoff_manager_init+0x1e>

00008114 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8114:	b508      	push	{r3, lr}
    8116:	4604      	mov	r4, r0
    8118:	4608      	mov	r0, r1
    811a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    811c:	461a      	mov	r2, r3
    811e:	47a0      	blx	r4
	return z_impl_z_current_get();
    8120:	f7ff f8e6 	bl	72f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8124:	f7fa f848 	bl	21b8 <z_impl_k_thread_abort>

00008128 <extract_decimal>:
{
    8128:	b410      	push	{r4}
    812a:	4604      	mov	r4, r0
	const char *sp = *str;
    812c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    812e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    8130:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8132:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    8136:	2909      	cmp	r1, #9
    8138:	d806      	bhi.n	8148 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    813a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    813e:	3201      	adds	r2, #1
    8140:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    8144:	3830      	subs	r0, #48	; 0x30
    8146:	e7f3      	b.n	8130 <extract_decimal+0x8>
	*str = sp;
    8148:	6022      	str	r2, [r4, #0]
}
    814a:	bc10      	pop	{r4}
    814c:	4770      	bx	lr

0000814e <encode_uint>:
{
    814e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8152:	b083      	sub	sp, #12
    8154:	4604      	mov	r4, r0
    8156:	460d      	mov	r5, r1
    8158:	9201      	str	r2, [sp, #4]
    815a:	469a      	mov	sl, r3
    815c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    8160:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8162:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    8166:	2b6f      	cmp	r3, #111	; 0x6f
    8168:	d00f      	beq.n	818a <encode_uint+0x3c>
    816a:	d906      	bls.n	817a <encode_uint+0x2c>
    816c:	2b70      	cmp	r3, #112	; 0x70
    816e:	d00f      	beq.n	8190 <encode_uint+0x42>
    8170:	2b78      	cmp	r3, #120	; 0x78
    8172:	d110      	bne.n	8196 <encode_uint+0x48>
		return 16;
    8174:	f04f 0910 	mov.w	r9, #16
    8178:	e026      	b.n	81c8 <encode_uint+0x7a>
	switch (specifier) {
    817a:	2b58      	cmp	r3, #88	; 0x58
    817c:	d002      	beq.n	8184 <encode_uint+0x36>
    817e:	f04f 090a 	mov.w	r9, #10
    8182:	e021      	b.n	81c8 <encode_uint+0x7a>
		return 16;
    8184:	f04f 0910 	mov.w	r9, #16
    8188:	e01e      	b.n	81c8 <encode_uint+0x7a>
		return 8;
    818a:	f04f 0908 	mov.w	r9, #8
    818e:	e01b      	b.n	81c8 <encode_uint+0x7a>
		return 16;
    8190:	f04f 0910 	mov.w	r9, #16
    8194:	e018      	b.n	81c8 <encode_uint+0x7a>
	switch (specifier) {
    8196:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    819a:	e015      	b.n	81c8 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    819c:	f1bb 0f19 	cmp.w	fp, #25
    81a0:	d820      	bhi.n	81e4 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    81a2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    81a4:	3237      	adds	r2, #55	; 0x37
    81a6:	b2d2      	uxtb	r2, r2
    81a8:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    81ac:	4632      	mov	r2, r6
    81ae:	463b      	mov	r3, r7
    81b0:	4620      	mov	r0, r4
    81b2:	4629      	mov	r1, r5
    81b4:	f7f7 ffa4 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    81b8:	42bd      	cmp	r5, r7
    81ba:	bf08      	it	eq
    81bc:	42b4      	cmpeq	r4, r6
    81be:	d315      	bcc.n	81ec <encode_uint+0x9e>
    81c0:	45d0      	cmp	r8, sl
    81c2:	d913      	bls.n	81ec <encode_uint+0x9e>
		value /= radix;
    81c4:	4604      	mov	r4, r0
    81c6:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    81c8:	464e      	mov	r6, r9
    81ca:	2700      	movs	r7, #0
    81cc:	464a      	mov	r2, r9
    81ce:	463b      	mov	r3, r7
    81d0:	4620      	mov	r0, r4
    81d2:	4629      	mov	r1, r5
    81d4:	f7f7 ff94 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    81d8:	2a09      	cmp	r2, #9
    81da:	d8df      	bhi.n	819c <encode_uint+0x4e>
    81dc:	b2d2      	uxtb	r2, r2
    81de:	3230      	adds	r2, #48	; 0x30
    81e0:	b2d2      	uxtb	r2, r2
    81e2:	e7e1      	b.n	81a8 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    81e4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    81e6:	3257      	adds	r2, #87	; 0x57
    81e8:	b2d2      	uxtb	r2, r2
    81ea:	e7dd      	b.n	81a8 <encode_uint+0x5a>
	if (conv->flag_hash) {
    81ec:	9b01      	ldr	r3, [sp, #4]
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	f013 0f20 	tst.w	r3, #32
    81f4:	d005      	beq.n	8202 <encode_uint+0xb4>
		if (radix == 8) {
    81f6:	f1b9 0f08 	cmp.w	r9, #8
    81fa:	d006      	beq.n	820a <encode_uint+0xbc>
		} else if (radix == 16) {
    81fc:	f1b9 0f10 	cmp.w	r9, #16
    8200:	d009      	beq.n	8216 <encode_uint+0xc8>
}
    8202:	4640      	mov	r0, r8
    8204:	b003      	add	sp, #12
    8206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    820a:	9a01      	ldr	r2, [sp, #4]
    820c:	7893      	ldrb	r3, [r2, #2]
    820e:	f043 0308 	orr.w	r3, r3, #8
    8212:	7093      	strb	r3, [r2, #2]
    8214:	e7f5      	b.n	8202 <encode_uint+0xb4>
			conv->altform_0c = true;
    8216:	9a01      	ldr	r2, [sp, #4]
    8218:	7893      	ldrb	r3, [r2, #2]
    821a:	f043 0310 	orr.w	r3, r3, #16
    821e:	7093      	strb	r3, [r2, #2]
    8220:	e7ef      	b.n	8202 <encode_uint+0xb4>

00008222 <outs>:
{
    8222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8226:	4607      	mov	r7, r0
    8228:	460e      	mov	r6, r1
    822a:	4614      	mov	r4, r2
    822c:	4698      	mov	r8, r3
	size_t count = 0;
    822e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8230:	e006      	b.n	8240 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    8232:	4631      	mov	r1, r6
    8234:	f814 0b01 	ldrb.w	r0, [r4], #1
    8238:	47b8      	blx	r7
		if (rc < 0) {
    823a:	2800      	cmp	r0, #0
    823c:	db09      	blt.n	8252 <outs+0x30>
		++count;
    823e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8240:	4544      	cmp	r4, r8
    8242:	d3f6      	bcc.n	8232 <outs+0x10>
    8244:	f1b8 0f00 	cmp.w	r8, #0
    8248:	d102      	bne.n	8250 <outs+0x2e>
    824a:	7823      	ldrb	r3, [r4, #0]
    824c:	2b00      	cmp	r3, #0
    824e:	d1f0      	bne.n	8232 <outs+0x10>
	return (int)count;
    8250:	4628      	mov	r0, r5
}
    8252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008256 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8256:	4040      	eors	r0, r0
    8258:	f380 8811 	msr	BASEPRI, r0
    825c:	f04f 0004 	mov.w	r0, #4
    8260:	df02      	svc	2
}
    8262:	4770      	bx	lr

00008264 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8264:	4770      	bx	lr

00008266 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8266:	2200      	movs	r2, #0
    8268:	6002      	str	r2, [r0, #0]
    826a:	6042      	str	r2, [r0, #4]
    826c:	6082      	str	r2, [r0, #8]
}
    826e:	4770      	bx	lr

00008270 <abort_function>:
{
    8270:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8272:	2000      	movs	r0, #0
    8274:	f7f9 f9a4 	bl	15c0 <sys_reboot>

00008278 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8278:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    827a:	f7fc ffbb 	bl	51f4 <z_fatal_error>
}
    827e:	bd08      	pop	{r3, pc}

00008280 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8280:	b508      	push	{r3, lr}
    8282:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8284:	6800      	ldr	r0, [r0, #0]
    8286:	f7ff fff7 	bl	8278 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    828a:	bd08      	pop	{r3, pc}

0000828c <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    828c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    828e:	2100      	movs	r1, #0
    8290:	2001      	movs	r0, #1
    8292:	f7ff fff1 	bl	8278 <z_arm_fatal_error>
}
    8296:	bd08      	pop	{r3, pc}

00008298 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    8298:	b508      	push	{r3, lr}
	handler();
    829a:	f7f9 fc81 	bl	1ba0 <z_SysNmiOnReset>
	z_arm_int_exit();
    829e:	f7f9 fd7d 	bl	1d9c <z_arm_exc_exit>
}
    82a2:	bd08      	pop	{r3, pc}

000082a4 <memory_fault_recoverable>:
}
    82a4:	2000      	movs	r0, #0
    82a6:	4770      	bx	lr

000082a8 <debug_monitor>:
	*recoverable = false;
    82a8:	2300      	movs	r3, #0
    82aa:	700b      	strb	r3, [r1, #0]
}
    82ac:	4770      	bx	lr

000082ae <fault_handle>:
{
    82ae:	b508      	push	{r3, lr}
	*recoverable = false;
    82b0:	2300      	movs	r3, #0
    82b2:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    82b4:	1ecb      	subs	r3, r1, #3
    82b6:	2b09      	cmp	r3, #9
    82b8:	d81a      	bhi.n	82f0 <fault_handle+0x42>
    82ba:	e8df f003 	tbb	[pc, r3]
    82be:	0905      	.short	0x0905
    82c0:	1919110d 	.word	0x1919110d
    82c4:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    82c8:	4611      	mov	r1, r2
    82ca:	f7f9 fe15 	bl	1ef8 <hard_fault>
		break;
    82ce:	e010      	b.n	82f2 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    82d0:	2100      	movs	r1, #0
    82d2:	f7f9 fdad 	bl	1e30 <mem_manage_fault>
		break;
    82d6:	e00c      	b.n	82f2 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    82d8:	2100      	movs	r1, #0
    82da:	f7f9 fd6d 	bl	1db8 <bus_fault>
		break;
    82de:	e008      	b.n	82f2 <fault_handle+0x44>
		reason = usage_fault(esf);
    82e0:	f7f9 fd94 	bl	1e0c <usage_fault>
		break;
    82e4:	e005      	b.n	82f2 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    82e6:	4611      	mov	r1, r2
    82e8:	f7ff ffde 	bl	82a8 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    82ec:	2000      	movs	r0, #0
		break;
    82ee:	e000      	b.n	82f2 <fault_handle+0x44>
	*recoverable = false;
    82f0:	2000      	movs	r0, #0
}
    82f2:	bd08      	pop	{r3, pc}

000082f4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    82f4:	6843      	ldr	r3, [r0, #4]
    82f6:	1e5a      	subs	r2, r3, #1
		&&
    82f8:	4213      	tst	r3, r2
    82fa:	d106      	bne.n	830a <mpu_partition_is_valid+0x16>
		&&
    82fc:	2b1f      	cmp	r3, #31
    82fe:	d906      	bls.n	830e <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    8300:	6803      	ldr	r3, [r0, #0]
		&&
    8302:	421a      	tst	r2, r3
    8304:	d005      	beq.n	8312 <mpu_partition_is_valid+0x1e>
    8306:	2000      	movs	r0, #0
    8308:	4770      	bx	lr
    830a:	2000      	movs	r0, #0
    830c:	4770      	bx	lr
    830e:	2000      	movs	r0, #0
    8310:	4770      	bx	lr
    8312:	2001      	movs	r0, #1
}
    8314:	4770      	bx	lr

00008316 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    8316:	2807      	cmp	r0, #7
    8318:	d805      	bhi.n	8326 <region_allocate_and_init+0x10>
{
    831a:	b510      	push	{r4, lr}
    831c:	4604      	mov	r4, r0
	region_init(index, region_conf);
    831e:	f7f9 ff81 	bl	2224 <region_init>
	return index;
    8322:	4620      	mov	r0, r4
}
    8324:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8326:	f06f 0015 	mvn.w	r0, #21
}
    832a:	4770      	bx	lr

0000832c <mpu_configure_region>:
{
    832c:	b500      	push	{lr}
    832e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    8330:	680b      	ldr	r3, [r1, #0]
    8332:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    8334:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8336:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    8338:	2b20      	cmp	r3, #32
    833a:	d912      	bls.n	8362 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    833c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8340:	d811      	bhi.n	8366 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    8342:	3b01      	subs	r3, #1
    8344:	fab3 f383 	clz	r3, r3
    8348:	f1c3 031f 	rsb	r3, r3, #31
    834c:	005b      	lsls	r3, r3, #1
    834e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8352:	4313      	orrs	r3, r2
    8354:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    8356:	a901      	add	r1, sp, #4
    8358:	f7ff ffdd 	bl	8316 <region_allocate_and_init>
}
    835c:	b005      	add	sp, #20
    835e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    8362:	2308      	movs	r3, #8
    8364:	e7f5      	b.n	8352 <mpu_configure_region+0x26>
		return REGION_4G;
    8366:	233e      	movs	r3, #62	; 0x3e
    8368:	e7f3      	b.n	8352 <mpu_configure_region+0x26>

0000836a <mpu_configure_regions>:
{
    836a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    836e:	4680      	mov	r8, r0
    8370:	460f      	mov	r7, r1
    8372:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    8374:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    8376:	2500      	movs	r5, #0
    8378:	e009      	b.n	838e <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    837a:	4621      	mov	r1, r4
    837c:	b2f0      	uxtb	r0, r6
    837e:	f7ff ffd5 	bl	832c <mpu_configure_region>
    8382:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    8384:	f110 0f16 	cmn.w	r0, #22
    8388:	d014      	beq.n	83b4 <mpu_configure_regions+0x4a>
		reg_index++;
    838a:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    838c:	3501      	adds	r5, #1
    838e:	42bd      	cmp	r5, r7
    8390:	da10      	bge.n	83b4 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    8392:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    8396:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    839a:	6862      	ldr	r2, [r4, #4]
    839c:	2a00      	cmp	r2, #0
    839e:	d0f5      	beq.n	838c <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    83a0:	f1b9 0f00 	cmp.w	r9, #0
    83a4:	d0e9      	beq.n	837a <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    83a6:	4620      	mov	r0, r4
    83a8:	f7ff ffa4 	bl	82f4 <mpu_partition_is_valid>
		if (do_sanity_check &&
    83ac:	2800      	cmp	r0, #0
    83ae:	d1e4      	bne.n	837a <mpu_configure_regions+0x10>
			return -EINVAL;
    83b0:	f06f 0615 	mvn.w	r6, #21
}
    83b4:	4630      	mov	r0, r6
    83b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000083ba <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    83ba:	4602      	mov	r2, r0
    83bc:	780b      	ldrb	r3, [r1, #0]
    83be:	b11b      	cbz	r3, 83c8 <strcpy+0xe>
		*d = *s;
    83c0:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    83c4:	3101      	adds	r1, #1
    83c6:	e7f9      	b.n	83bc <strcpy+0x2>
	}

	*d = '\0';
    83c8:	7013      	strb	r3, [r2, #0]

	return dest;
}
    83ca:	4770      	bx	lr

000083cc <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    83cc:	4603      	mov	r3, r0
    83ce:	b1a2      	cbz	r2, 83fa <strncpy+0x2e>
{
    83d0:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    83d2:	780c      	ldrb	r4, [r1, #0]
    83d4:	b12c      	cbz	r4, 83e2 <strncpy+0x16>
		*d = *s;
    83d6:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    83da:	3101      	adds	r1, #1
		d++;
		n--;
    83dc:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    83de:	2a00      	cmp	r2, #0
    83e0:	d1f7      	bne.n	83d2 <strncpy+0x6>
	}

	while (n > 0) {
    83e2:	b122      	cbz	r2, 83ee <strncpy+0x22>
		*d = '\0';
    83e4:	2100      	movs	r1, #0
    83e6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    83ea:	3a01      	subs	r2, #1
    83ec:	e7f9      	b.n	83e2 <strncpy+0x16>
	}

	return dest;
}
    83ee:	bc10      	pop	{r4}
    83f0:	4770      	bx	lr
		*d = '\0';
    83f2:	2100      	movs	r1, #0
    83f4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    83f8:	3a01      	subs	r2, #1
	while (n > 0) {
    83fa:	2a00      	cmp	r2, #0
    83fc:	d1f9      	bne.n	83f2 <strncpy+0x26>
    83fe:	4770      	bx	lr

00008400 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8400:	4603      	mov	r3, r0
	size_t n = 0;
    8402:	2000      	movs	r0, #0

	while (*s != '\0') {
    8404:	781a      	ldrb	r2, [r3, #0]
    8406:	b112      	cbz	r2, 840e <strlen+0xe>
		s++;
    8408:	3301      	adds	r3, #1
		n++;
    840a:	3001      	adds	r0, #1
    840c:	e7fa      	b.n	8404 <strlen+0x4>
	}

	return n;
}
    840e:	4770      	bx	lr

00008410 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8410:	4603      	mov	r3, r0
	size_t n = 0;
    8412:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8414:	781a      	ldrb	r2, [r3, #0]
    8416:	b122      	cbz	r2, 8422 <strnlen+0x12>
    8418:	4288      	cmp	r0, r1
    841a:	d202      	bcs.n	8422 <strnlen+0x12>
		s++;
    841c:	3301      	adds	r3, #1
		n++;
    841e:	3001      	adds	r0, #1
    8420:	e7f8      	b.n	8414 <strnlen+0x4>
	}

	return n;
}
    8422:	4770      	bx	lr

00008424 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8424:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    8426:	ea80 0301 	eor.w	r3, r0, r1
    842a:	f013 0f03 	tst.w	r3, #3
    842e:	d001      	beq.n	8434 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    8430:	4603      	mov	r3, r0
    8432:	e017      	b.n	8464 <memcpy+0x40>
    8434:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    8436:	f013 0f03 	tst.w	r3, #3
    843a:	d00b      	beq.n	8454 <memcpy+0x30>
			if (n == 0) {
    843c:	b1a2      	cbz	r2, 8468 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    843e:	f811 4b01 	ldrb.w	r4, [r1], #1
    8442:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    8446:	3a01      	subs	r2, #1
    8448:	e7f5      	b.n	8436 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    844a:	f851 4b04 	ldr.w	r4, [r1], #4
    844e:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    8452:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    8454:	2a03      	cmp	r2, #3
    8456:	d8f8      	bhi.n	844a <memcpy+0x26>
    8458:	e004      	b.n	8464 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    845a:	f811 4b01 	ldrb.w	r4, [r1], #1
    845e:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    8462:	3a01      	subs	r2, #1
	while (n > 0) {
    8464:	2a00      	cmp	r2, #0
    8466:	d1f8      	bne.n	845a <memcpy+0x36>
	}

	return d;
}
    8468:	bc10      	pop	{r4}
    846a:	4770      	bx	lr

0000846c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    846c:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    846e:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    8470:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8472:	f013 0f03 	tst.w	r3, #3
    8476:	d004      	beq.n	8482 <memset+0x16>
		if (n == 0) {
    8478:	b19a      	cbz	r2, 84a2 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    847a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    847e:	3a01      	subs	r2, #1
    8480:	e7f7      	b.n	8472 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    8482:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    8484:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    8488:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    848c:	2a03      	cmp	r2, #3
    848e:	d906      	bls.n	849e <memset+0x32>
		*(d_word++) = c_word;
    8490:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    8494:	3a04      	subs	r2, #4
    8496:	e7f9      	b.n	848c <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    8498:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    849c:	3a01      	subs	r2, #1
	while (n > 0) {
    849e:	2a00      	cmp	r2, #0
    84a0:	d1fa      	bne.n	8498 <memset+0x2c>
	}

	return buf;
}
    84a2:	bc10      	pop	{r4}
    84a4:	4770      	bx	lr

000084a6 <_stdout_hook_default>:
}
    84a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    84aa:	4770      	bx	lr

000084ac <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    84ac:	b084      	sub	sp, #16
    84ae:	ab04      	add	r3, sp, #16
    84b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    84b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    84b8:	2b06      	cmp	r3, #6
    84ba:	d001      	beq.n	84c0 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    84bc:	b004      	add	sp, #16
    84be:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    84c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84c4:	2201      	movs	r2, #1
    84c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    84ca:	f3bf 8f4f 	dsb	sy
        __WFE();
    84ce:	bf20      	wfe
    while (true)
    84d0:	e7fd      	b.n	84ce <pm_power_state_set+0x22>

000084d2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    84d2:	b084      	sub	sp, #16
    84d4:	ab04      	add	r3, sp, #16
    84d6:	e903 0007 	stmdb	r3, {r0, r1, r2}
    84da:	2300      	movs	r3, #0
    84dc:	f383 8811 	msr	BASEPRI, r3
    84e0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    84e4:	b004      	add	sp, #16
    84e6:	4770      	bx	lr

000084e8 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    84e8:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    84ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    84ee:	0089      	lsls	r1, r1, #2
    84f0:	3140      	adds	r1, #64	; 0x40
}
    84f2:	4408      	add	r0, r1
    84f4:	4770      	bx	lr

000084f6 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    84f6:	6840      	ldr	r0, [r0, #4]
}
    84f8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    84fc:	4770      	bx	lr

000084fe <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    84fe:	6900      	ldr	r0, [r0, #16]
}
    8500:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    8504:	4770      	bx	lr

00008506 <set_off_state>:
	__asm__ volatile(
    8506:	f04f 0320 	mov.w	r3, #32
    850a:	f3ef 8211 	mrs	r2, BASEPRI
    850e:	f383 8812 	msr	BASEPRI_MAX, r3
    8512:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8516:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    8518:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    851c:	d001      	beq.n	8522 <set_off_state+0x1c>
    851e:	428b      	cmp	r3, r1
    8520:	d107      	bne.n	8532 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    8522:	2301      	movs	r3, #1
    8524:	6003      	str	r3, [r0, #0]
	int err = 0;
    8526:	2000      	movs	r0, #0
	__asm__ volatile(
    8528:	f382 8811 	msr	BASEPRI, r2
    852c:	f3bf 8f6f 	isb	sy
}
    8530:	4770      	bx	lr
		err = -EPERM;
    8532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8536:	e7f7      	b.n	8528 <set_off_state+0x22>

00008538 <set_starting_state>:
{
    8538:	b410      	push	{r4}
	__asm__ volatile(
    853a:	f04f 0320 	mov.w	r3, #32
    853e:	f3ef 8211 	mrs	r2, BASEPRI
    8542:	f383 8812 	msr	BASEPRI_MAX, r3
    8546:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    854a:	6803      	ldr	r3, [r0, #0]
    854c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8550:	f003 0307 	and.w	r3, r3, #7
    8554:	2b01      	cmp	r3, #1
    8556:	d009      	beq.n	856c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    8558:	428c      	cmp	r4, r1
    855a:	d00a      	beq.n	8572 <set_starting_state+0x3a>
		err = -EPERM;
    855c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    8560:	f382 8811 	msr	BASEPRI, r2
    8564:	f3bf 8f6f 	isb	sy
}
    8568:	bc10      	pop	{r4}
    856a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    856c:	6001      	str	r1, [r0, #0]
	int err = 0;
    856e:	2000      	movs	r0, #0
    8570:	e7f6      	b.n	8560 <set_starting_state+0x28>
		err = -EALREADY;
    8572:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8576:	e7f3      	b.n	8560 <set_starting_state+0x28>

00008578 <set_on_state>:
	__asm__ volatile(
    8578:	f04f 0320 	mov.w	r3, #32
    857c:	f3ef 8211 	mrs	r2, BASEPRI
    8580:	f383 8812 	msr	BASEPRI_MAX, r3
    8584:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8588:	6803      	ldr	r3, [r0, #0]
    858a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    858e:	f043 0302 	orr.w	r3, r3, #2
    8592:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8594:	f382 8811 	msr	BASEPRI, r2
    8598:	f3bf 8f6f 	isb	sy
}
    859c:	4770      	bx	lr

0000859e <clkstarted_handle>:
{
    859e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85a0:	4606      	mov	r6, r0
    85a2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    85a4:	f7ff ffa0 	bl	84e8 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    85a8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    85aa:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    85ac:	2300      	movs	r3, #0
    85ae:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    85b2:	f7ff ffe1 	bl	8578 <set_on_state>
	if (callback) {
    85b6:	b11d      	cbz	r5, 85c0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    85b8:	463a      	mov	r2, r7
    85ba:	4621      	mov	r1, r4
    85bc:	4630      	mov	r0, r6
    85be:	47a8      	blx	r5
}
    85c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000085c2 <async_start>:
{
    85c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85c6:	4606      	mov	r6, r0
    85c8:	4690      	mov	r8, r2
    85ca:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    85cc:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    85ce:	4629      	mov	r1, r5
    85d0:	f7ff ff8a 	bl	84e8 <get_sub_data>
    85d4:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    85d6:	9906      	ldr	r1, [sp, #24]
    85d8:	3008      	adds	r0, #8
    85da:	f7ff ffad 	bl	8538 <set_starting_state>
	if (err < 0) {
    85de:	2800      	cmp	r0, #0
    85e0:	db09      	blt.n	85f6 <async_start+0x34>
	subdata->cb = cb;
    85e2:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    85e6:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    85e8:	4629      	mov	r1, r5
    85ea:	4630      	mov	r0, r6
    85ec:	f7ff ff83 	bl	84f6 <get_sub_config>
    85f0:	6803      	ldr	r3, [r0, #0]
    85f2:	4798      	blx	r3
	return 0;
    85f4:	2000      	movs	r0, #0
}
    85f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000085fa <api_start>:
{
    85fa:	b510      	push	{r4, lr}
    85fc:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    85fe:	2480      	movs	r4, #128	; 0x80
    8600:	9400      	str	r4, [sp, #0]
    8602:	f7ff ffde 	bl	85c2 <async_start>
}
    8606:	b002      	add	sp, #8
    8608:	bd10      	pop	{r4, pc}

0000860a <onoff_started_callback>:
{
    860a:	b510      	push	{r4, lr}
    860c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    860e:	b2c9      	uxtb	r1, r1
    8610:	f7ff ff75 	bl	84fe <get_onoff_manager>
	notify(mgr, 0);
    8614:	2100      	movs	r1, #0
    8616:	47a0      	blx	r4
}
    8618:	bd10      	pop	{r4, pc}

0000861a <hfclk_start>:
{
    861a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    861c:	2001      	movs	r0, #1
    861e:	f7fb fc25 	bl	3e6c <nrfx_clock_start>
}
    8622:	bd08      	pop	{r3, pc}

00008624 <lfclk_start>:
{
    8624:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8626:	2000      	movs	r0, #0
    8628:	f7fb fc20 	bl	3e6c <nrfx_clock_start>
}
    862c:	bd08      	pop	{r3, pc}

0000862e <hfclk_stop>:
{
    862e:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    8630:	2001      	movs	r0, #1
    8632:	f7fb fc81 	bl	3f38 <nrfx_clock_stop>
}
    8636:	bd08      	pop	{r3, pc}

00008638 <lfclk_stop>:
{
    8638:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    863a:	2000      	movs	r0, #0
    863c:	f7fb fc7c 	bl	3f38 <nrfx_clock_stop>
}
    8640:	bd08      	pop	{r3, pc}

00008642 <api_stop>:
{
    8642:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    8644:	2280      	movs	r2, #128	; 0x80
    8646:	f7f9 ffbf 	bl	25c8 <stop>
}
    864a:	bd08      	pop	{r3, pc}

0000864c <blocking_start_callback>:
{
    864c:	b508      	push	{r3, lr}
    864e:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8650:	f7fd fbfc 	bl	5e4c <z_impl_k_sem_give>
}
    8654:	bd08      	pop	{r3, pc}

00008656 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    8656:	f010 0f10 	tst.w	r0, #16
    865a:	d104      	bne.n	8666 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    865c:	f010 0f20 	tst.w	r0, #32
    8660:	d103      	bne.n	866a <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    8662:	2000      	movs	r0, #0
    8664:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    8666:	2003      	movs	r0, #3
    8668:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    866a:	2001      	movs	r0, #1
}
    866c:	4770      	bx	lr

0000866e <gpio_nrfx_port_get_raw>:
	return port->config;
    866e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8670:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8672:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8676:	600b      	str	r3, [r1, #0]
}
    8678:	2000      	movs	r0, #0
    867a:	4770      	bx	lr

0000867c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    867c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    867e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8680:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8684:	4042      	eors	r2, r0
    8686:	400a      	ands	r2, r1
    8688:	4042      	eors	r2, r0
    p_reg->OUT = value;
    868a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    868e:	2000      	movs	r0, #0
    8690:	4770      	bx	lr

00008692 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    8692:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8694:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    8696:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    869a:	2000      	movs	r0, #0
    869c:	4770      	bx	lr

0000869e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    869e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86a0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    86a2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    86a6:	2000      	movs	r0, #0
    86a8:	4770      	bx	lr

000086aa <gpio_nrfx_port_toggle_bits>:
	return port->config;
    86aa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86ac:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    86ae:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    86b2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    86b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    86b8:	2000      	movs	r0, #0
    86ba:	4770      	bx	lr

000086bc <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    86bc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    86c0:	d007      	beq.n	86d2 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    86c2:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    86c6:	d00d      	beq.n	86e4 <get_trigger+0x28>
    86c8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    86cc:	d008      	beq.n	86e0 <get_trigger+0x24>
    86ce:	2001      	movs	r0, #1
}
    86d0:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    86d2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    86d6:	d001      	beq.n	86dc <get_trigger+0x20>
    86d8:	2005      	movs	r0, #5
    86da:	4770      	bx	lr
    86dc:	2004      	movs	r0, #4
    86de:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    86e0:	2002      	movs	r0, #2
    86e2:	4770      	bx	lr
    86e4:	2003      	movs	r0, #3
    86e6:	4770      	bx	lr

000086e8 <endtx_isr>:
	return dev->config;
    86e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    86ea:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    86ec:	f04f 0120 	mov.w	r1, #32
    86f0:	f3ef 8211 	mrs	r2, BASEPRI
    86f4:	f381 8812 	msr	BASEPRI_MAX, r1
    86f8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    86fc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8700:	b131      	cbz	r1, 8710 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8702:	2100      	movs	r1, #0
    8704:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8708:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    870c:	2101      	movs	r1, #1
    870e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    8710:	f382 8811 	msr	BASEPRI, r2
    8714:	f3bf 8f6f 	isb	sy
}
    8718:	4770      	bx	lr

0000871a <uarte_nrfx_isr_int>:
{
    871a:	b538      	push	{r3, r4, r5, lr}
    871c:	4604      	mov	r4, r0
	return dev->config;
    871e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8720:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    8722:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8726:	f413 7f80 	tst.w	r3, #256	; 0x100
    872a:	d002      	beq.n	8732 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    872c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    8730:	b9db      	cbnz	r3, 876a <uarte_nrfx_isr_int+0x50>
	return dev->config;
    8732:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8734:	685b      	ldr	r3, [r3, #4]
    8736:	f013 0f10 	tst.w	r3, #16
    873a:	d015      	beq.n	8768 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    873c:	f04f 0220 	mov.w	r2, #32
    8740:	f3ef 8311 	mrs	r3, BASEPRI
    8744:	f382 8812 	msr	BASEPRI_MAX, r2
    8748:	f3bf 8f6f 	isb	sy
    874c:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8750:	b112      	cbz	r2, 8758 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8752:	2200      	movs	r2, #0
    8754:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    8758:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    875c:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    8760:	f383 8811 	msr	BASEPRI, r3
    8764:	f3bf 8f6f 	isb	sy
}
    8768:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    876a:	f7ff ffbd 	bl	86e8 <endtx_isr>
    876e:	e7e0      	b.n	8732 <uarte_nrfx_isr_int+0x18>

00008770 <uarte_nrfx_configure>:
{
    8770:	b570      	push	{r4, r5, r6, lr}
    8772:	b082      	sub	sp, #8
    8774:	4605      	mov	r5, r0
    8776:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    8778:	794b      	ldrb	r3, [r1, #5]
    877a:	2b01      	cmp	r3, #1
    877c:	d006      	beq.n	878c <uarte_nrfx_configure+0x1c>
    877e:	2b03      	cmp	r3, #3
    8780:	d011      	beq.n	87a6 <uarte_nrfx_configure+0x36>
    8782:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    8786:	4618      	mov	r0, r3
    8788:	b002      	add	sp, #8
    878a:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    878c:	2300      	movs	r3, #0
    878e:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8792:	79a3      	ldrb	r3, [r4, #6]
    8794:	2b03      	cmp	r3, #3
    8796:	d138      	bne.n	880a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    8798:	79e3      	ldrb	r3, [r4, #7]
    879a:	b143      	cbz	r3, 87ae <uarte_nrfx_configure+0x3e>
    879c:	2b01      	cmp	r3, #1
    879e:	d010      	beq.n	87c2 <uarte_nrfx_configure+0x52>
    87a0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    87a4:	e7ef      	b.n	8786 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    87a6:	2310      	movs	r3, #16
    87a8:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    87ac:	e7f1      	b.n	8792 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    87ae:	2300      	movs	r3, #0
    87b0:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    87b4:	7923      	ldrb	r3, [r4, #4]
    87b6:	b143      	cbz	r3, 87ca <uarte_nrfx_configure+0x5a>
    87b8:	2b02      	cmp	r3, #2
    87ba:	d022      	beq.n	8802 <uarte_nrfx_configure+0x92>
    87bc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    87c0:	e7e1      	b.n	8786 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    87c2:	2301      	movs	r3, #1
    87c4:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    87c8:	e7f4      	b.n	87b4 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    87ca:	2300      	movs	r3, #0
    87cc:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    87d0:	6821      	ldr	r1, [r4, #0]
    87d2:	4628      	mov	r0, r5
    87d4:	f7fa fb18 	bl	2e08 <baudrate_set>
    87d8:	4603      	mov	r3, r0
    87da:	b9c8      	cbnz	r0, 8810 <uarte_nrfx_configure+0xa0>
	return dev->config;
    87dc:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    87de:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    87e0:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    87e4:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    87e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    87ec:	4331      	orrs	r1, r6
    87ee:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    87f0:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    87f4:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    87f6:	3204      	adds	r2, #4
    87f8:	e894 0003 	ldmia.w	r4, {r0, r1}
    87fc:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    8800:	e7c1      	b.n	8786 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    8802:	230e      	movs	r3, #14
    8804:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    8808:	e7e2      	b.n	87d0 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    880a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    880e:	e7ba      	b.n	8786 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    8810:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8814:	e7b7      	b.n	8786 <uarte_nrfx_configure+0x16>

00008816 <uarte_nrfx_config_get>:
{
    8816:	460b      	mov	r3, r1
	return dev->data;
    8818:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    881a:	6891      	ldr	r1, [r2, #8]
    881c:	6850      	ldr	r0, [r2, #4]
    881e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8822:	2000      	movs	r0, #0
    8824:	4770      	bx	lr

00008826 <uarte_nrfx_err_check>:
	return dev->config;
    8826:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8828:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    882a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    882e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8832:	4770      	bx	lr

00008834 <is_tx_ready>:
	return dev->config;
    8834:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8836:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8838:	685b      	ldr	r3, [r3, #4]
    883a:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    883e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8842:	b929      	cbnz	r1, 8850 <is_tx_ready+0x1c>
    8844:	b933      	cbnz	r3, 8854 <is_tx_ready+0x20>
    8846:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    884a:	b92b      	cbnz	r3, 8858 <is_tx_ready+0x24>
    884c:	2000      	movs	r0, #0
    884e:	4770      	bx	lr
    8850:	2001      	movs	r0, #1
    8852:	4770      	bx	lr
    8854:	2000      	movs	r0, #0
    8856:	4770      	bx	lr
    8858:	2001      	movs	r0, #1
}
    885a:	4770      	bx	lr

0000885c <uarte_enable>:
	return dev->config;
    885c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    885e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8860:	2208      	movs	r2, #8
    8862:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    8866:	4770      	bx	lr

00008868 <tx_start>:
{
    8868:	b510      	push	{r4, lr}
	return dev->config;
    886a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    886c:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    886e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8872:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8876:	2300      	movs	r3, #0
    8878:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    887c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    8880:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    8884:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    8888:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    888a:	685b      	ldr	r3, [r3, #4]
    888c:	f013 0f10 	tst.w	r3, #16
    8890:	d102      	bne.n	8898 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8892:	2301      	movs	r3, #1
    8894:	60a3      	str	r3, [r4, #8]
}
    8896:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    8898:	2101      	movs	r1, #1
    889a:	f7ff ffdf 	bl	885c <uarte_enable>
    p_reg->INTENSET = mask;
    889e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    88a2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    88a6:	e7f4      	b.n	8892 <tx_start+0x2a>

000088a8 <uarte_nrfx_poll_in>:
{
    88a8:	b410      	push	{r4}
	return dev->data;
    88aa:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    88ac:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    88ae:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    88b4:	b152      	cbz	r2, 88cc <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    88b6:	7c62      	ldrb	r2, [r4, #17]
    88b8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88ba:	2000      	movs	r0, #0
    88bc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    88c0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88c4:	2201      	movs	r2, #1
    88c6:	601a      	str	r2, [r3, #0]
}
    88c8:	bc10      	pop	{r4}
    88ca:	4770      	bx	lr
		return -1;
    88cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    88d0:	e7fa      	b.n	88c8 <uarte_nrfx_poll_in+0x20>

000088d2 <wait_tx_ready>:
{
    88d2:	b570      	push	{r4, r5, r6, lr}
    88d4:	4606      	mov	r6, r0
    88d6:	e014      	b.n	8902 <wait_tx_ready+0x30>
		if (res) {
    88d8:	b17d      	cbz	r5, 88fa <wait_tx_ready+0x28>
	__asm__ volatile(
    88da:	f04f 0320 	mov.w	r3, #32
    88de:	f3ef 8411 	mrs	r4, BASEPRI
    88e2:	f383 8812 	msr	BASEPRI_MAX, r3
    88e6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    88ea:	4630      	mov	r0, r6
    88ec:	f7ff ffa2 	bl	8834 <is_tx_ready>
    88f0:	b9a0      	cbnz	r0, 891c <wait_tx_ready+0x4a>
	__asm__ volatile(
    88f2:	f384 8811 	msr	BASEPRI, r4
    88f6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    88fa:	2021      	movs	r0, #33	; 0x21
    88fc:	2100      	movs	r1, #0
    88fe:	f7fe fcab 	bl	7258 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    8902:	2464      	movs	r4, #100	; 0x64
    8904:	4630      	mov	r0, r6
    8906:	f7ff ff95 	bl	8834 <is_tx_ready>
    890a:	4605      	mov	r5, r0
    890c:	2800      	cmp	r0, #0
    890e:	d1e3      	bne.n	88d8 <wait_tx_ready+0x6>
    8910:	2001      	movs	r0, #1
    8912:	f000 f8f8 	bl	8b06 <nrfx_busy_wait>
    8916:	3c01      	subs	r4, #1
    8918:	d1f4      	bne.n	8904 <wait_tx_ready+0x32>
    891a:	e7dd      	b.n	88d8 <wait_tx_ready+0x6>
}
    891c:	4620      	mov	r0, r4
    891e:	bd70      	pop	{r4, r5, r6, pc}

00008920 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    8920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8922:	4604      	mov	r4, r0
	return dev->config;
    8924:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    8926:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    8928:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    892a:	2100      	movs	r1, #0
    892c:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    8930:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    8932:	f7fa fb6d 	bl	3010 <uarte_nrfx_pins_configure>
	return dev->data;
    8936:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8938:	3104      	adds	r1, #4
    893a:	4620      	mov	r0, r4
    893c:	f7ff ff18 	bl	8770 <uarte_nrfx_configure>
	if (err) {
    8940:	4604      	mov	r4, r0
    8942:	bb68      	cbnz	r0, 89a0 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    8944:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    8946:	f013 0f02 	tst.w	r3, #2
    894a:	d12b      	bne.n	89a4 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    894c:	2308      	movs	r3, #8
    894e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    8952:	7a33      	ldrb	r3, [r6, #8]
    8954:	b95b      	cbnz	r3, 896e <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8956:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    895a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    895e:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8962:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8966:	2301      	movs	r3, #1
    8968:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    896c:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    896e:	6873      	ldr	r3, [r6, #4]
    8970:	f013 0f02 	tst.w	r3, #2
    8974:	d103      	bne.n	897e <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    8976:	f44f 7380 	mov.w	r3, #256	; 0x100
    897a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    897e:	6873      	ldr	r3, [r6, #4]
    8980:	f013 0f10 	tst.w	r3, #16
    8984:	d003      	beq.n	898e <uarte_instance_init+0x6e>
    8986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    898a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    898e:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8990:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8994:	2300      	movs	r3, #0
    8996:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    899a:	2301      	movs	r3, #1
    899c:	60ab      	str	r3, [r5, #8]
    899e:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    89a0:	4620      	mov	r0, r4
    89a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    89a4:	4639      	mov	r1, r7
    89a6:	4628      	mov	r0, r5
    89a8:	f7fa fb0e 	bl	2fc8 <endtx_stoptx_ppi_init>
		if (err < 0) {
    89ac:	2800      	cmp	r0, #0
    89ae:	dacd      	bge.n	894c <uarte_instance_init+0x2c>
			return err;
    89b0:	4604      	mov	r4, r0
    89b2:	e7f5      	b.n	89a0 <uarte_instance_init+0x80>

000089b4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    89b4:	b510      	push	{r4, lr}
    89b6:	4604      	mov	r4, r0
    89b8:	2200      	movs	r2, #0
    89ba:	2101      	movs	r1, #1
    89bc:	2002      	movs	r0, #2
    89be:	f7f9 f8b9 	bl	1b34 <z_arm_irq_priority_set>
    89c2:	2002      	movs	r0, #2
    89c4:	f7f9 f898 	bl	1af8 <arch_irq_enable>
    89c8:	2100      	movs	r1, #0
    89ca:	4620      	mov	r0, r4
    89cc:	f7ff ffa8 	bl	8920 <uarte_instance_init>
    89d0:	bd10      	pop	{r4, pc}

000089d2 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    89d2:	b510      	push	{r4, lr}
    89d4:	4604      	mov	r4, r0
    89d6:	2200      	movs	r2, #0
    89d8:	2101      	movs	r1, #1
    89da:	2028      	movs	r0, #40	; 0x28
    89dc:	f7f9 f8aa 	bl	1b34 <z_arm_irq_priority_set>
    89e0:	2028      	movs	r0, #40	; 0x28
    89e2:	f7f9 f889 	bl	1af8 <arch_irq_enable>
    89e6:	2100      	movs	r1, #0
    89e8:	4620      	mov	r0, r4
    89ea:	f7ff ff99 	bl	8920 <uarte_instance_init>
    89ee:	bd10      	pop	{r4, pc}

000089f0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    89f0:	4770      	bx	lr

000089f2 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    89f2:	1a40      	subs	r0, r0, r1
}
    89f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89f8:	4770      	bx	lr

000089fa <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    89fa:	f100 0350 	add.w	r3, r0, #80	; 0x50
    89fe:	009b      	lsls	r3, r3, #2
    8a00:	b29b      	uxth	r3, r3
    8a02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8a06:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    8a0a:	2200      	movs	r2, #0
    8a0c:	601a      	str	r2, [r3, #0]
    8a0e:	681b      	ldr	r3, [r3, #0]
}
    8a10:	4770      	bx	lr

00008a12 <absolute_time_to_cc>:
}
    8a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8a16:	4770      	bx	lr

00008a18 <full_int_lock>:
	__asm__ volatile(
    8a18:	f04f 0320 	mov.w	r3, #32
    8a1c:	f3ef 8011 	mrs	r0, BASEPRI
    8a20:	f383 8812 	msr	BASEPRI_MAX, r3
    8a24:	f3bf 8f6f 	isb	sy
}
    8a28:	4770      	bx	lr

00008a2a <full_int_unlock>:
	__asm__ volatile(
    8a2a:	f380 8811 	msr	BASEPRI, r0
    8a2e:	f3bf 8f6f 	isb	sy
}
    8a32:	4770      	bx	lr

00008a34 <set_absolute_alarm>:
{
    8a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a36:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    8a38:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    8a3c:	f7fa fdce 	bl	35dc <get_comparator>
    8a40:	4607      	mov	r7, r0
    8a42:	e019      	b.n	8a78 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    8a44:	2013      	movs	r0, #19
    8a46:	f000 f94c 	bl	8ce2 <z_impl_k_busy_wait>
}
    8a4a:	e022      	b.n	8a92 <set_absolute_alarm+0x5e>
		event_clear(chan);
    8a4c:	4630      	mov	r0, r6
    8a4e:	f7ff ffd4 	bl	89fa <event_clear>
		event_enable(chan);
    8a52:	4630      	mov	r0, r6
    8a54:	f7fa fdca 	bl	35ec <event_enable>
		set_comparator(chan, cc_val);
    8a58:	4629      	mov	r1, r5
    8a5a:	4630      	mov	r0, r6
    8a5c:	f7fa fdb4 	bl	35c8 <set_comparator>
		now2 = counter();
    8a60:	f7fa fdd8 	bl	3614 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    8a64:	4284      	cmp	r4, r0
    8a66:	d01e      	beq.n	8aa6 <set_absolute_alarm+0x72>
    8a68:	1c81      	adds	r1, r0, #2
    8a6a:	4628      	mov	r0, r5
    8a6c:	f7ff ffc1 	bl	89f2 <counter_sub>
	} while ((now2 != now) &&
    8a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a74:	d917      	bls.n	8aa6 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    8a76:	462f      	mov	r7, r5
		now = counter();
    8a78:	f7fa fdcc 	bl	3614 <counter>
    8a7c:	4604      	mov	r4, r0
		set_comparator(chan, now);
    8a7e:	4601      	mov	r1, r0
    8a80:	4630      	mov	r0, r6
    8a82:	f7fa fda1 	bl	35c8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    8a86:	4621      	mov	r1, r4
    8a88:	4638      	mov	r0, r7
    8a8a:	f7ff ffb2 	bl	89f2 <counter_sub>
    8a8e:	2801      	cmp	r0, #1
    8a90:	d0d8      	beq.n	8a44 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    8a92:	1ca7      	adds	r7, r4, #2
    8a94:	4639      	mov	r1, r7
    8a96:	4628      	mov	r0, r5
    8a98:	f7ff ffab 	bl	89f2 <counter_sub>
    8a9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8aa0:	d9d4      	bls.n	8a4c <set_absolute_alarm+0x18>
			cc_val = now + 2;
    8aa2:	463d      	mov	r5, r7
    8aa4:	e7d2      	b.n	8a4c <set_absolute_alarm+0x18>
}
    8aa6:	4628      	mov	r0, r5
    8aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008aaa <compare_set>:
{
    8aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aac:	b083      	sub	sp, #12
    8aae:	4604      	mov	r4, r0
    8ab0:	4617      	mov	r7, r2
    8ab2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    8ab4:	f7fa fdb4 	bl	3620 <compare_int_lock>
    8ab8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    8aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8abc:	9301      	str	r3, [sp, #4]
    8abe:	9b08      	ldr	r3, [sp, #32]
    8ac0:	9300      	str	r3, [sp, #0]
    8ac2:	463a      	mov	r2, r7
    8ac4:	462b      	mov	r3, r5
    8ac6:	4620      	mov	r0, r4
    8ac8:	f7fa fe98 	bl	37fc <compare_set_nolocks>
    8acc:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    8ace:	4631      	mov	r1, r6
    8ad0:	4620      	mov	r0, r4
    8ad2:	f7fa fe09 	bl	36e8 <compare_int_unlock>
}
    8ad6:	4628      	mov	r0, r5
    8ad8:	b003      	add	sp, #12
    8ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008adc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    8adc:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    8ade:	2000      	movs	r0, #0
    8ae0:	f7f9 fcc0 	bl	2464 <sys_arch_reboot>

00008ae4 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    8ae4:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8ae6:	f7ff f84b 	bl	7b80 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    8aea:	bd08      	pop	{r3, pc}

00008aec <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    8aec:	b510      	push	{r4, lr}
    8aee:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8af0:	f7f8 ff12 	bl	1918 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8af4:	f7f8 ffce 	bl	1a94 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    8af8:	4620      	mov	r0, r4
    8afa:	f7ff fff3 	bl	8ae4 <hw_cc3xx_init_internal>
	return res;
}
    8afe:	bd10      	pop	{r4, pc}

00008b00 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    8b00:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    8b02:	4780      	blx	r0
}
    8b04:	bd08      	pop	{r3, pc}

00008b06 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    8b06:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    8b08:	f000 f8eb 	bl	8ce2 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    8b0c:	bd08      	pop	{r3, pc}

00008b0e <pin_is_task_output>:
{
    8b0e:	b510      	push	{r4, lr}
    8b10:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8b12:	f7fb fb3f 	bl	4194 <pin_is_output>
    8b16:	b128      	cbz	r0, 8b24 <pin_is_task_output+0x16>
    8b18:	4620      	mov	r0, r4
    8b1a:	f7fb fb25 	bl	4168 <pin_in_use_by_te>
    8b1e:	b118      	cbz	r0, 8b28 <pin_is_task_output+0x1a>
    8b20:	2001      	movs	r0, #1
    8b22:	e000      	b.n	8b26 <pin_is_task_output+0x18>
    8b24:	2000      	movs	r0, #0
}
    8b26:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8b28:	2000      	movs	r0, #0
    8b2a:	e7fc      	b.n	8b26 <pin_is_task_output+0x18>

00008b2c <pin_is_input>:
{
    8b2c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    8b2e:	f7fb fb31 	bl	4194 <pin_is_output>
    8b32:	f080 0001 	eor.w	r0, r0, #1
}
    8b36:	b2c0      	uxtb	r0, r0
    8b38:	bd08      	pop	{r3, pc}

00008b3a <gpiote_polarity_to_trigger>:
}
    8b3a:	4770      	bx	lr

00008b3c <gpiote_trigger_to_polarity>:
}
    8b3c:	4770      	bx	lr

00008b3e <is_level>:
}
    8b3e:	2803      	cmp	r0, #3
    8b40:	bf94      	ite	ls
    8b42:	2000      	movls	r0, #0
    8b44:	2001      	movhi	r0, #1
    8b46:	4770      	bx	lr

00008b48 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    8b48:	b508      	push	{r3, lr}
  _DoInit();
    8b4a:	f7fc fae9 	bl	5120 <_DoInit>
}
    8b4e:	bd08      	pop	{r3, pc}

00008b50 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    8b50:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    8b52:	f7ff fff9 	bl	8b48 <SEGGER_RTT_Init>

	return 0;
}
    8b56:	2000      	movs	r0, #0
    8b58:	bd08      	pop	{r3, pc}

00008b5a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8b5a:	b148      	cbz	r0, 8b70 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8b5c:	68c3      	ldr	r3, [r0, #12]
    8b5e:	8818      	ldrh	r0, [r3, #0]
    8b60:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8b64:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    8b68:	bf14      	ite	ne
    8b6a:	2000      	movne	r0, #0
    8b6c:	2001      	moveq	r0, #1
    8b6e:	4770      	bx	lr
		return false;
    8b70:	2000      	movs	r0, #0
}
    8b72:	4770      	bx	lr

00008b74 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8b74:	6902      	ldr	r2, [r0, #16]
    8b76:	6943      	ldr	r3, [r0, #20]
    8b78:	431a      	orrs	r2, r3
    8b7a:	f012 0203 	ands.w	r2, r2, #3
    8b7e:	d10d      	bne.n	8b9c <create_free_list+0x28>
	slab->free_list = NULL;
    8b80:	2100      	movs	r1, #0
    8b82:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8b84:	e005      	b.n	8b92 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    8b86:	6981      	ldr	r1, [r0, #24]
    8b88:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    8b8a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    8b8c:	6901      	ldr	r1, [r0, #16]
    8b8e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    8b90:	3201      	adds	r2, #1
    8b92:	68c1      	ldr	r1, [r0, #12]
    8b94:	4291      	cmp	r1, r2
    8b96:	d8f6      	bhi.n	8b86 <create_free_list+0x12>
	return 0;
    8b98:	2000      	movs	r0, #0
    8b9a:	4770      	bx	lr
		return -EINVAL;
    8b9c:	f06f 0015 	mvn.w	r0, #21
}
    8ba0:	4770      	bx	lr

00008ba2 <k_mem_slab_init>:
{
    8ba2:	b510      	push	{r4, lr}
    8ba4:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    8ba6:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    8ba8:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    8baa:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    8bac:	2300      	movs	r3, #0
    8bae:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    8bb0:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    8bb2:	f7ff ffdf 	bl	8b74 <create_free_list>
	if (rc < 0) {
    8bb6:	2800      	cmp	r0, #0
    8bb8:	db01      	blt.n	8bbe <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    8bba:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    8bbc:	6064      	str	r4, [r4, #4]
}
    8bbe:	bd10      	pop	{r4, pc}

00008bc0 <setup_thread_stack>:
{
    8bc0:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8bc2:	3207      	adds	r2, #7
    8bc4:	f022 0207 	bic.w	r2, r2, #7
    8bc8:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    8bcc:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    8bd0:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    8bd4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    8bd8:	2200      	movs	r2, #0
    8bda:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    8bde:	18c8      	adds	r0, r1, r3
    8be0:	bc10      	pop	{r4}
    8be2:	4770      	bx	lr

00008be4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8be4:	f3ef 8005 	mrs	r0, IPSR
}
    8be8:	3800      	subs	r0, #0
    8bea:	bf18      	it	ne
    8bec:	2001      	movne	r0, #1
    8bee:	4770      	bx	lr

00008bf0 <z_impl_k_thread_start>:
{
    8bf0:	b508      	push	{r3, lr}
	z_sched_start(thread);
    8bf2:	f7fd fd91 	bl	6718 <z_sched_start>
}
    8bf6:	bd08      	pop	{r3, pc}

00008bf8 <z_init_thread_base>:
{
    8bf8:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    8bfa:	2400      	movs	r4, #0
    8bfc:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    8bfe:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    8c00:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    8c02:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    8c04:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    8c06:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    8c08:	61c4      	str	r4, [r0, #28]
}
    8c0a:	bc10      	pop	{r4}
    8c0c:	4770      	bx	lr

00008c0e <z_pm_save_idle_exit>:
{
    8c0e:	b508      	push	{r3, lr}
	pm_system_resume();
    8c10:	f7f8 fcea 	bl	15e8 <pm_system_resume>
	sys_clock_idle_exit();
    8c14:	f7ff feec 	bl	89f0 <sys_clock_idle_exit>
}
    8c18:	bd08      	pop	{r3, pc}

00008c1a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    8c1a:	4288      	cmp	r0, r1
    8c1c:	da00      	bge.n	8c20 <new_prio_for_inheritance+0x6>
    8c1e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    8c20:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    8c24:	db01      	blt.n	8c2a <new_prio_for_inheritance+0x10>
    8c26:	4608      	mov	r0, r1
    8c28:	4770      	bx	lr
    8c2a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    8c2e:	4770      	bx	lr

00008c30 <adjust_owner_prio>:
{
    8c30:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    8c32:	6880      	ldr	r0, [r0, #8]
    8c34:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8c38:	428b      	cmp	r3, r1
    8c3a:	d101      	bne.n	8c40 <adjust_owner_prio+0x10>
	return false;
    8c3c:	2000      	movs	r0, #0
}
    8c3e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    8c40:	f7fd ff1c 	bl	6a7c <z_set_prio>
    8c44:	e7fb      	b.n	8c3e <adjust_owner_prio+0xe>

00008c46 <z_impl_k_mutex_init>:
{
    8c46:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8c48:	2000      	movs	r0, #0
    8c4a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    8c4c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    8c4e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    8c50:	605b      	str	r3, [r3, #4]
}
    8c52:	4770      	bx	lr

00008c54 <thread_active_elsewhere>:
}
    8c54:	2000      	movs	r0, #0
    8c56:	4770      	bx	lr

00008c58 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    8c58:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8c5c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    8c60:	4283      	cmp	r3, r0
    8c62:	d001      	beq.n	8c68 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    8c64:	1ac0      	subs	r0, r0, r3
    8c66:	4770      	bx	lr
	return 0;
    8c68:	2000      	movs	r0, #0
}
    8c6a:	4770      	bx	lr

00008c6c <z_reschedule_irqlock>:
{
    8c6c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8c6e:	4603      	mov	r3, r0
    8c70:	b920      	cbnz	r0, 8c7c <z_reschedule_irqlock+0x10>
    8c72:	f3ef 8205 	mrs	r2, IPSR
    8c76:	b942      	cbnz	r2, 8c8a <z_reschedule_irqlock+0x1e>
    8c78:	2201      	movs	r2, #1
    8c7a:	e000      	b.n	8c7e <z_reschedule_irqlock+0x12>
    8c7c:	2200      	movs	r2, #0
	if (resched(key)) {
    8c7e:	b932      	cbnz	r2, 8c8e <z_reschedule_irqlock+0x22>
    8c80:	f383 8811 	msr	BASEPRI, r3
    8c84:	f3bf 8f6f 	isb	sy
}
    8c88:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8c8a:	2200      	movs	r2, #0
    8c8c:	e7f7      	b.n	8c7e <z_reschedule_irqlock+0x12>
    8c8e:	4618      	mov	r0, r3
    8c90:	f7f8 ffa6 	bl	1be0 <arch_swap>
	return ret;
    8c94:	e7f8      	b.n	8c88 <z_reschedule_irqlock+0x1c>

00008c96 <z_priq_dumb_best>:
{
    8c96:	4603      	mov	r3, r0
	return list->head == list;
    8c98:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c9a:	4283      	cmp	r3, r0
    8c9c:	d000      	beq.n	8ca0 <z_priq_dumb_best+0xa>
}
    8c9e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8ca0:	2000      	movs	r0, #0
	return thread;
    8ca2:	e7fc      	b.n	8c9e <z_priq_dumb_best+0x8>

00008ca4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    8ca4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    8ca6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    8ca8:	6083      	str	r3, [r0, #8]
}
    8caa:	4770      	bx	lr

00008cac <remove_timeout>:
{
    8cac:	b538      	push	{r3, r4, r5, lr}
    8cae:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    8cb0:	f7fe fbea 	bl	7488 <next>
    8cb4:	b148      	cbz	r0, 8cca <remove_timeout+0x1e>
    8cb6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    8cb8:	6920      	ldr	r0, [r4, #16]
    8cba:	6965      	ldr	r5, [r4, #20]
    8cbc:	6913      	ldr	r3, [r2, #16]
    8cbe:	6951      	ldr	r1, [r2, #20]
    8cc0:	181b      	adds	r3, r3, r0
    8cc2:	eb45 0101 	adc.w	r1, r5, r1
    8cc6:	6113      	str	r3, [r2, #16]
    8cc8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    8cca:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    8ccc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    8cce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8cd0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8cd2:	2300      	movs	r3, #0
    8cd4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    8cd6:	6063      	str	r3, [r4, #4]
}
    8cd8:	bd38      	pop	{r3, r4, r5, pc}

00008cda <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8cda:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8cdc:	f7fe fee8 	bl	7ab0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8ce0:	bd08      	pop	{r3, pc}

00008ce2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8ce2:	b900      	cbnz	r0, 8ce6 <z_impl_k_busy_wait+0x4>
    8ce4:	4770      	bx	lr
{
    8ce6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8ce8:	f7f9 fbd2 	bl	2490 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8cec:	bd08      	pop	{r3, pc}

00008cee <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
    8cee:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
    8cf0:	4770      	bx	lr
	...

00008cf4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8cf4:	f7fa bf56 	b.w	3ba4 <SystemInit>
